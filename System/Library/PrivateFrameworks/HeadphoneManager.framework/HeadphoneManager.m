void *static Headphone_Manager.shared.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t *Headphone_Manager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static Headphone_Manager.shared;
}

void partial apply for closure #1 in HeadphoneDataProvider.init()(uint64_t a1)
{
  closure #1 in HeadphoneDataProvider.init()(a1, v1);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_6_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t type metadata accessor for ReplayData()
{
  uint64_t v1 = type metadata singleton initialization cache for ReplayData;
  if (!type metadata singleton initialization cache for ReplayData) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

__C::NSKeyValueObservingOptions protocol witness for OptionSet.init(rawValue:) in conformance NSKeyValueObservingOptions@<X0>(Swift::UInt *a1@<X0>, __C::NSKeyValueObservingOptions *a2@<X8>)
{
  result.rawValue = NSKeyValueObservingOptions.init(rawValue:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance HeadphoneFeatures()
{
  return HeadphoneFeatures.domain.getter();
}

const char *HeadphoneFeatures.domain.getter()
{
  return "HeadphoneFeatures";
}

uint64_t type metadata instantiation function for AADeviceProperty()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t one-time initialization function for subsystem()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.headphonemanager", 0x1AuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static Logger.subsystem = (__int128)v1;
  return result;
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

unint64_t base witness table accessor for Equatable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

unint64_t lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    type metadata accessor for NSKeyValueObservingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    type metadata accessor for NSKeyValueObservingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    type metadata accessor for NSKeyValueObservingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    type metadata accessor for NSKeyValueObservingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    type metadata accessor for NSKeyValueObservingOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.init()();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

char *HeadphoneDataProvider.defaultsObserver.getter()
{
  v11 = (id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider____lazy_storage___defaultsObserver);
  swift_beginAccess();
  id v12 = *v11;
  outlined copy of DefaultsObserver??(*v11);
  swift_endAccess();
  if (v12 != (id)1) {
    return (char *)v12;
  }
  type metadata accessor for DefaultsObserver();
  type metadata accessor for NSUserDefaults();
  Swift::String_optional suiteName = *(Swift::String_optional *)(v10
                                        + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_kDefaultsStorageIdentifier);
  swift_bridgeObjectRetain();
  NSUserDefaults.__allocating_init(suiteName:)(v1, suiteName);
  v8 = DefaultsObserver.__allocating_init(withDefault:)(v2);
  v3 = v8;
  v7 = (void **)(v10 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider____lazy_storage___defaultsObserver);
  swift_beginAccess();
  uint64_t v4 = *v7;
  *v7 = v8;
  outlined consume of DefaultsObserver??(v4);
  swift_endAccess();
  return v8;
}

uint64_t type metadata accessor for DefaultsObserver()
{
  return self;
}

unint64_t type metadata accessor for NSUserDefaults()
{
  uint64_t v2 = lazy cache variable for type metadata for NSUserDefaults;
  if (!lazy cache variable for type metadata for NSUserDefaults)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
    return ObjCClassMetadata;
  }
  return v2;
}

void __swiftcall NSUserDefaults.__allocating_init(suiteName:)(NSUserDefaults_optional *__return_ptr retstr, Swift::String_optional suiteName)
{
  uint64_t countAndFlagsBits = suiteName.value._countAndFlagsBits;
  object = suiteName.value._object;
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSUserDefaults.init(suiteName:)(countAndFlagsBits, (uint64_t)object);
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = MEMORY[0x253385EB0](a1);
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v7, sel_initWithSuiteName_, v6);
  }
  else
  {
    id v2 = objc_msgSend(v7, sel_initWithSuiteName_, 0);
  }
  id v5 = v2;

  return v5;
}

id outlined copy of DefaultsObserver??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

void outlined consume of DefaultsObserver??(void *a1)
{
  if (a1 != (void *)1) {
}
  }

char *DefaultsObserver.__allocating_init(withDefault:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return DefaultsObserver.init(withDefault:)(a1);
}

char *DefaultsObserver.init(withDefault:)(void *a1)
{
  v26 = 0;
  v27 = a1;
  id v2 = v1;
  v3 = v1;
  id v4 = v1;
  id v5 = v1;
  uint64_t v6 = v1;
  v28 = v1;
  *(void *)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher] = 0;

  id v7 = a1;
  if (a1)
  {
    v26 = a1;
    id v8 = a1;
    *(void *)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults] = a1;

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<NSUserDefaults, Never>);
    v16 = *(void **)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults];
    id v9 = v16;
    v25 = v16;
    uint64_t v17 = CurrentValueSubject.__allocating_init(_:)();

    *(void *)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_updatesSubject] = v17;
    v24.receiver = v28;
    v24.super_class = (Class)type metadata accessor for DefaultsObserver();
    v20 = (char *)objc_msgSendSuper2(&v24, sel_init);
    uint64_t v10 = v20;
    v11 = v20;
    id v12 = v20;
    v28 = v20;
    id v19 = *(id *)&v20[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults];
    id v13 = v19;
    uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("root", 4uLL, 1)._countAndFlagsBits;
    id v18 = (id)MEMORY[0x253385EB0](countAndFlagsBits);
    swift_bridgeObjectRelease();
    type metadata accessor for NSKeyValueObservingOptions();
    _allocateUninitializedArray<A>(_:)();
    lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
    SetAlgebra<>.init(arrayLiteral:)();
    objc_msgSend(v19, sel_addObserver_forKeyPath_options_context_, v20, v18, v23, 0);

    return v20;
  }
  else
  {

    outlined destroy of AnyPublisher<NSUserDefaults, Never>?();
    type metadata accessor for DefaultsObserver();
    swift_deallocPartialClassInstance();
    return 0;
  }
}

unint64_t base witness table accessor for SetAlgebra in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

uint64_t type metadata accessor for NSKeyValueObservingOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for NSKeyValueObservingOptions;
  if (!lazy cache variable for type metadata for NSKeyValueObservingOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSKeyValueObservingOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t one-time initialization function for shared()
{
  uint64_t v1 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v1, static Logger.shared);
  __swift_project_value_buffer(v1, (uint64_t)static Logger.shared);
  Logger.subsystem.unsafeMutableAddressor();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_endAccess();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("general", 7uLL, 1);
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  id v5 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

long long *Logger.subsystem.unsafeMutableAddressor()
{
  if (one-time initialization token for subsystem != -1) {
    swift_once();
  }
  return &static Logger.subsystem;
}

id one-time initialization function for shared()
{
  type metadata accessor for HeadphoneDataProvider();
  id result = HeadphoneDataProvider.__allocating_init()();
  static HeadphoneDataProvider.shared = (uint64_t)result;
  return result;
}

{
  id result;

  type metadata accessor for Headphone_Manager();
  id result = Headphone_Manager.__allocating_init()();
  static Headphone_Manager.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for HeadphoneDataProvider()
{
  return self;
}

id HeadphoneDataProvider.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HeadphoneDataProvider.init()()
{
  id v1 = v0;
  id v2 = v0;
  id v3 = v0;
  id v4 = v0;
  id v5 = v0;
  id v6 = v0;
  id v7 = v0;
  id v8 = v0;
  id v9 = v0;
  id v30 = v0;
  uint64_t v20 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_kDefaultsStorageIdentifier;
  *(Swift::String *)&v25[v20] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.settings.headphone.HeadphoneManager.Mock", 0x32uLL, 1);

  *(void *)&v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider____lazy_storage___defaultsObserver] = 1;
  uint64_t v21 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_listeners;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  *(void *)&v25[v21] = Set.init()();

  v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMock] = 0;
  uint64_t v22 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMockKey;
  *(Swift::String *)&v25[v22] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("shouldShowMock", 0xEuLL, 1);

  uint64_t v10 = &v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceFoundHandler];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;

  v11 = &v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceLostHandler];
  *(void *)v11 = 0;
  *((void *)v11 + 1) = 0;

  uint64_t v23 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_dataObjects;
  *(void *)&v25[v23] = Dictionary.init()();

  uint64_t v24 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_hexForReplayDeviceMap;
  type metadata accessor for NSMutableDictionary();
  *(NSMutableDictionary *)&v25[v24] = NSMutableDictionary.__allocating_init()();

  v29.receiver = v30;
  v29.super_class = (Class)type metadata accessor for HeadphoneDataProvider();
  id v26 = objc_msgSendSuper2(&v29, sel_init);
  id v12 = v26;
  id v13 = v26;
  id v14 = v26;
  id v15 = v26;
  id v30 = v26;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Perferences", 0x15uLL, 1);
  String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease();
  char has_internal_ui = os_variant_has_internal_ui();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (has_internal_ui)
  {
    v28 = HeadphoneDataProvider.defaultsObserver.getter();
    if (v28)
    {
      v16 = v28;
      id v19 = v28;
      uint64_t v17 = v28;
      outlined destroy of DefaultsObserver?((id *)&v28);
      (*(void (**)(void))((*(void *)v16 & *MEMORY[0x263F8EED0]) + 0x68))();

      swift_allocObject();
      swift_unknownObjectWeakInit();

      swift_retain();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<NSUserDefaults, Never>);
      lazy protocol witness table accessor for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>();
      Publisher<>.sink(receiveValue:)();
      swift_release();
      outlined destroy of AnyPublisher<NSUserDefaults, Never>();

      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();

      swift_release();
    }
    else
    {

      outlined destroy of DefaultsObserver?((id *)&v28);
    }
  }
  else
  {
  }
  return v26;
}

unint64_t lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable;
  if (!lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable)
  {
    type metadata accessor for AnyCancellable();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AnyPublisher<NSUserDefaults, Never>()
{
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<NSUserDefaults, Never>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultsObserver?(id *a1)
{
}

uint64_t DefaultsObserver.publisher.getter()
{
  id v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher);
  swift_beginAccess();
  uint64_t v7 = *v6;
  swift_retain();
  swift_endAccess();
  if (v7) {
    return v7;
  }
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<NSUserDefaults, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>();
  uint64_t v3 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_retain();
  uint64_t v2 = (uint64_t *)(v5 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher);
  swift_beginAccess();
  *uint64_t v2 = v3;
  swift_release();
  swift_endAccess();
  return v3;
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<NSUserDefaults, Never>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>);
    return WitnessTable;
  }
  return v2;
}

uint64_t closure #3 in Headphone_Manager.configHearingModeClient()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v98 = a1;
  uint64_t v100 = a2;
  uint64_t v91 = a3;
  uint64_t v92 = a4;
  v105 = implicit closure #1 in closure #3 in Headphone_Manager.configHearingModeClient();
  v106 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  v108 = implicit closure #2 in closure #3 in Headphone_Manager.configHearingModeClient();
  v109 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  v111 = partial apply for implicit closure #3 in closure #3 in Headphone_Manager.configHearingModeClient();
  v113 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  v117 = partial apply for implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient();
  v121 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v125 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v89 = partial apply for closure #1 in closure #3 in Headphone_Manager.configHearingModeClient();
  uint64_t v163 = 0;
  uint64_t v162 = 0;
  uint64_t v161 = 0;
  uint64_t v160 = 0;
  uint64_t v90 = 0;
  uint64_t v97 = type metadata accessor for Logger();
  uint64_t v95 = *(void *)(v97 - 8);
  uint64_t v96 = v97 - 8;
  unint64_t v93 = (*(void *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v4 = (char *)&v59 - v93;
  v94 = (char *)&v59 - v93;
  uint64_t v163 = MEMORY[0x270FA5388](v98, v100);
  uint64_t v162 = v5;
  uint64_t v161 = v6;
  uint64_t v160 = v7 + 16;
  uint64_t v8 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v4, v8, v97);
  swift_bridgeObjectRetain();
  uint64_t v99 = 24;
  uint64_t v119 = 7;
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = v98;
  swift_bridgeObjectRetain();
  uint64_t v120 = swift_allocObject();
  *(void *)(v120 + 16) = v100;
  v150 = Logger.logObject.getter();
  int v151 = static os_log_type_t.default.getter();
  v103 = &v158;
  uint64_t v158 = 42;
  unint64_t v101 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v104 = v159;
  uint64_t v115 = 17;
  uint64_t v124 = swift_allocObject();
  *(unsigned char *)(v124 + 16) = 32;
  uint64_t v126 = swift_allocObject();
  int v116 = 8;
  *(unsigned char *)(v126 + 16) = 8;
  uint64_t v118 = 32;
  uint64_t v9 = swift_allocObject();
  uint64_t v107 = v9;
  *(void *)(v9 + 16) = v105;
  *(void *)(v9 + 24) = 0;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v107;
  uint64_t v128 = v10;
  *(void *)(v10 + 16) = v106;
  *(void *)(v10 + 24) = v11;
  uint64_t v130 = swift_allocObject();
  *(unsigned char *)(v130 + 16) = 0;
  uint64_t v132 = swift_allocObject();
  *(unsigned char *)(v132 + 16) = v116;
  uint64_t v12 = swift_allocObject();
  uint64_t v110 = v12;
  *(void *)(v12 + 16) = v108;
  *(void *)(v12 + 24) = 0;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v110;
  uint64_t v134 = v13;
  *(void *)(v13 + 16) = v109;
  *(void *)(v13 + 24) = v14;
  uint64_t v136 = swift_allocObject();
  *(unsigned char *)(v136 + 16) = 0;
  uint64_t v138 = swift_allocObject();
  *(unsigned char *)(v138 + 16) = v116;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v112;
  uint64_t v114 = v15;
  *(void *)(v15 + 16) = v111;
  *(void *)(v15 + 24) = v16;
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v114;
  uint64_t v140 = v17;
  *(void *)(v17 + 16) = v113;
  *(void *)(v17 + 24) = v18;
  uint64_t v142 = swift_allocObject();
  *(unsigned char *)(v142 + 16) = 0;
  uint64_t v144 = swift_allocObject();
  *(unsigned char *)(v144 + 16) = v116;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v120;
  uint64_t v122 = v19;
  *(void *)(v19 + 16) = v117;
  *(void *)(v19 + 24) = v20;
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = v122;
  uint64_t v147 = v21;
  *(void *)(v21 + 16) = v121;
  *(void *)(v21 + 24) = v22;
  uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v145 = _allocateUninitializedArray<A>(_:)();
  v148 = v23;
  swift_retain();
  uint64_t v24 = v124;
  v25 = v148;
  *v148 = v123;
  v25[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
  swift_retain();
  uint64_t v26 = v126;
  v27 = v148;
  v148[2] = v125;
  v27[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
  swift_retain();
  v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v128;
  objc_super v29 = v148;
  v148[4] = v127;
  v29[5] = v28;
  swift_retain();
  uint64_t v30 = v130;
  v31 = v148;
  v148[6] = v129;
  v31[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v30;
  swift_retain();
  uint64_t v32 = v132;
  v33 = v148;
  v148[8] = v131;
  v33[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v32;
  swift_retain();
  v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v134;
  v35 = v148;
  v148[10] = v133;
  v35[11] = v34;
  swift_retain();
  uint64_t v36 = v136;
  v37 = v148;
  v148[12] = v135;
  v37[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
  swift_retain();
  uint64_t v38 = v138;
  v39 = v148;
  v148[14] = v137;
  v39[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
  swift_retain();
  v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v140;
  v41 = v148;
  v148[16] = v139;
  v41[17] = v40;
  swift_retain();
  uint64_t v42 = v142;
  v43 = v148;
  v148[18] = v141;
  v43[19] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v42;
  swift_retain();
  uint64_t v44 = v144;
  v45 = v148;
  v148[20] = v143;
  v45[21] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  swift_retain();
  v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v147;
  v47 = v148;
  v148[22] = v146;
  v47[23] = v46;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v150, (os_log_type_t)v151))
  {
    uint64_t v48 = v90;
    v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v83 = createStorage<A>(capacity:type:)(0);
    uint64_t v84 = createStorage<A>(capacity:type:)(1);
    v85 = v156;
    v156[0] = v82;
    v86 = &v155;
    uint64_t v155 = v83;
    v87 = &v154;
    uint64_t v154 = v84;
    serialize(_:at:)(2, v156);
    serialize(_:at:)(4, v85);
    v152 = v123;
    uint64_t v153 = v124;
    closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v85, (uint64_t)v86, (uint64_t)v87);
    uint64_t v88 = v48;
    if (v48)
    {
      __break(1u);
    }
    else
    {
      v152 = v125;
      uint64_t v153 = v126;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v79 = 0;
      uint64_t v50 = v79;
      v152 = v127;
      uint64_t v153 = v128;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v78 = v50;
      v152 = v129;
      uint64_t v153 = v130;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v77 = 0;
      v152 = v131;
      uint64_t v153 = v132;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v76 = 0;
      v152 = v133;
      uint64_t v153 = v134;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v75 = 0;
      v152 = v135;
      uint64_t v153 = v136;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v74 = 0;
      v152 = v137;
      uint64_t v153 = v138;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v73 = 0;
      v152 = v139;
      uint64_t v153 = v140;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v72 = 0;
      v152 = v141;
      uint64_t v153 = v142;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v71 = 0;
      v152 = v143;
      uint64_t v153 = v144;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v70 = 0;
      v152 = v146;
      uint64_t v153 = v147;
      closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)v156, (uint64_t)&v155, (uint64_t)&v154);
      uint64_t v69 = 0;
      _os_log_impl(&dword_250C36000, v150, (os_log_type_t)v151, "HeadphoneManager: %s: %ld audiogramsAvailableHandler update audiograms! %ld %ld", v82, v104);
      destroyStorage<A>(_:count:)(v83, 0, v81);
      destroyStorage<A>(_:count:)(v84, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v82, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v80 = v69;
    }
  }
  else
  {
    uint64_t v49 = v90;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v80 = v49;
  }
  uint64_t v67 = v80;

  (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v97);
  uint64_t v68 = v92 + 16;
  swift_beginAccess();
  v157 = (void *)MEMORY[0x253386C10](v68);
  if (v157)
  {
    uint64_t v52 = v67;
    v60 = (id *)&v157;
    v53 = v157;
    id v62 = v157;
    v54 = v157;
    outlined destroy of Headphone_Manager?(v60);
    uint64_t v55 = swift_endAccess();
    uint64_t v61 = (*(uint64_t (**)(uint64_t))((*v53 & *MEMORY[0x263F8EED0]) + 0x180))(v55);
    type metadata accessor for HeadphoneDevice();
    v63 = (unsigned char *)Dictionary.values.getter();

    v156[1] = v63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64 = &v59;
    MEMORY[0x270FA5388](&v59, v56);
    v57 = &v59 - 4;
    v65 = &v59 - 4;
    v57[2] = v98;
    v57[3] = v58;
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HeadphoneDevice].Values);
    lazy protocol witness table accessor for type [String : HeadphoneDevice].Values and conformance [A : B].Values();
    uint64_t result = Sequence.forEach(_:)();
    if (v52)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [String : HeadphoneDevice].Values();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v157);
    return swift_endAccess();
  }
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  id v4 = *result;
  *id v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a1;
  uint64_t v21 = a6;
  v13[1] = a7;
  uint64_t v14 = partial apply for closure #1 in serialize<A>(_:at:);
  uint64_t v25 = a6;
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = a6 - 8;
  v13[0] = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = (uint64_t)v13 - v13[0];
  v8(v7);
  uint64_t v16 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  uint64_t v23 = *v17;
  uint64_t v24 = v23 + v16;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v20, v14, (uint64_t)v22, v21, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  uint64_t v9 = v18;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  *v17 += v16;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a2;
  uint64_t v12 = a5;
  uint64_t v13 = a8;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  uint64_t v21 = a6;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = a5 - 8;
  unint64_t v16 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388]();
  uint64_t v18 = (char *)&v12 - v16;
  uint64_t v20 = v9 + *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t result = v17();
  uint64_t v19 = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v18, v12);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_0()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_1()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_2()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_3()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_4()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unsigned char **closure #1 in OSLogArguments.append(_:)partial apply(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_0(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_1(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_2(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_3(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_4(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v7 = (id)a4();
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v8 + 8;
  id v4 = *a2;
  if (*a2)
  {
    *id v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {
  }
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_0()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_1()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_2()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_3()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

void *partial apply for implicit closure #1 in closure #1 in HeadphoneDataProvider.init()()
{
  return implicit closure #1 in closure #1 in HeadphoneDataProvider.init()(*(void **)(v0 + 16));
}

void *implicit closure #1 in closure #1 in HeadphoneDataProvider.init()(void *a1)
{
  id v1 = a1;
  return a1;
}

void closure #1 in HeadphoneDataProvider.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v98 = a1;
  uint64_t v97 = a2;
  v89 = partial apply for implicit closure #1 in closure #1 in HeadphoneDataProvider.init();
  uint64_t v90 = _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_3;
  uint64_t v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_4;
  v94 = partial apply for closure #1 in closure #1 in HeadphoneDataProvider.init();
  id v128 = 0;
  uint64_t v127 = 0;
  v125 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v96 = 0;
  uint64_t v95 = 0;
  uint64_t v110 = 0;
  uint64_t v99 = type metadata accessor for Logger();
  uint64_t v100 = *(void *)(v99 - 8);
  uint64_t v101 = v99 - 8;
  unint64_t v102 = (*(void *)(v100 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v103 = (char *)&v29 - v102;
  id v104 = *(id *)MEMORY[0x270FA5388](v98, v97);
  id v128 = v104;
  uint64_t v105 = v2 + 16;
  uint64_t v127 = v2 + 16;
  v106 = &v126;
  swift_beginAccess();
  uint64_t v107 = (void *)MEMORY[0x253386C10](v105);
  swift_endAccess();
  if (v107)
  {
    uint64_t v88 = v107;
    uint64_t v84 = v107;
    v125 = v107;
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("root", 4uLL, 1);
    object = v3._object;
    id v86 = (id)MEMORY[0x253385EB0](v3._countAndFlagsBits);
    swift_bridgeObjectRelease();
    id v87 = objc_msgSend(v104, sel_valueForKey_, v86);

    if (v87)
    {
      id v83 = v87;
      id v82 = v87;
      uint64_t v81 = &v108;
      _bridgeAnyObjectToAny(_:)();
      outlined init with take of Any((uint64_t)v81, (uint64_t)&v120);
      swift_unknownObjectRelease();
    }
    else
    {
      long long v120 = 0uLL;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
    }
    outlined init with take of Any?(&v120, &v123);
    if (v124)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      if (swift_dynamicCast()) {
        uint64_t v78 = v109;
      }
      else {
        uint64_t v78 = 0;
      }
      uint64_t v80 = v78;
    }
    else
    {
      uint64_t v79 = 0;
      outlined destroy of Any?((uint64_t)&v123);
      uint64_t v80 = v79;
    }
    uint64_t v77 = v80;
    if (v80)
    {
      uint64_t v76 = v77;
      uint64_t v70 = v77;
      uint64_t v110 = v77;
      uint64_t v71 = MEMORY[0x263F8D310];
      uint64_t v72 = MEMORY[0x263F06F78];
      uint64_t v73 = MEMORY[0x263F8D320];
      uint64_t v74 = Dictionary.values.getter();
      uint64_t v75 = MEMORY[0x253385E30](v74, v71, v72, v73);
      swift_bridgeObjectRelease();
      if (v75 > 0)
      {
        HeadphoneDataProvider.shouldShowMock.setter(1);
        uint64_t v4 = HeadphoneDataProvider.dataObjects.setter(v70);
        (*(void (**)(uint64_t))((*v84 & *MEMORY[0x263F8EED0]) + 0x158))(v4);

        return;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v5 = v103;
    uint64_t v6 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v5, v6, v99);
    id v7 = v104;
    uint64_t v59 = 7;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = v104;
    uint64_t v68 = Logger.logObject.getter();
    int v69 = static os_log_type_t.default.getter();
    uint64_t v55 = &v118;
    uint64_t v118 = 12;
    unint64_t v53 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v56 = v119;
    uint64_t v57 = 17;
    uint64_t v62 = swift_allocObject();
    *(unsigned char *)(v62 + 16) = 64;
    uint64_t v63 = swift_allocObject();
    *(unsigned char *)(v63 + 16) = 8;
    uint64_t v58 = 32;
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = v60;
    uint64_t v61 = v8;
    *(void *)(v8 + 16) = v89;
    *(void *)(v8 + 24) = v9;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v61;
    uint64_t v65 = v10;
    *(void *)(v10 + 16) = v90;
    *(void *)(v10 + 24) = v11;
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v64 = _allocateUninitializedArray<A>(_:)();
    uint64_t v66 = v12;
    swift_retain();
    uint64_t v13 = v62;
    uint64_t v14 = v66;
    *uint64_t v66 = v91;
    v14[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
    swift_retain();
    uint64_t v15 = v63;
    unint64_t v16 = v66;
    v66[2] = v92;
    v16[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
    swift_retain();
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65;
    uint64_t v18 = v66;
    v66[4] = v93;
    v18[5] = v17;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v68, (os_log_type_t)v69))
    {
      uint64_t v19 = v95;
      v46 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v47 = createStorage<A>(capacity:type:)(1);
      uint64_t v48 = createStorage<A>(capacity:type:)(0);
      uint64_t v49 = v115;
      v115[0] = v46;
      uint64_t v50 = &v114;
      uint64_t v114 = v47;
      v51 = &v113;
      uint64_t v113 = v48;
      serialize(_:at:)(2, v115);
      serialize(_:at:)(1, v49);
      v111 = v91;
      uint64_t v112 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v111, (uint64_t)v49, (uint64_t)v50, (uint64_t)v51);
      uint64_t v52 = v19;
      if (v19)
      {
        __break(1u);
      }
      else
      {
        v111 = v92;
        uint64_t v112 = v63;
        closure #1 in osLogInternal(_:log:type:)(&v111, (uint64_t)v115, (uint64_t)&v114, (uint64_t)&v113);
        uint64_t v43 = 0;
        v111 = v93;
        uint64_t v112 = v65;
        closure #1 in osLogInternal(_:log:type:)(&v111, (uint64_t)v115, (uint64_t)&v114, (uint64_t)&v113);
        uint64_t v42 = 0;
        _os_log_impl(&dword_250C36000, v68, (os_log_type_t)v69, "HeadphoneManager-Replay: did not find data dict for notification %@", v46, v56);
        destroyStorage<A>(_:count:)(v47, 1, v45);
        destroyStorage<A>(_:count:)(v48, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v46, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v44 = v42;
      }
    }
    else
    {
      uint64_t v20 = v95;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v44 = v20;
    }
    uint64_t v39 = v44;

    (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v99);
    HeadphoneDataProvider.shouldShowMock.setter(0);
    uint64_t v21 = Dictionary.init()();
    uint64_t v22 = HeadphoneDataProvider.dataObjects.setter(v21);
    uint64_t v40 = (*(uint64_t (**)(uint64_t))((*v84 & *MEMORY[0x263F8EED0]) + 0x110))(v22);
    uint64_t v41 = v23;
    if (!v40) {
      goto LABEL_29;
    }
    uint64_t v37 = v40;
    uint64_t v38 = v41;
    uint64_t v24 = v39;
    uint64_t v32 = v41;
    v34 = (void *)v40;
    uint64_t v116 = v40;
    uint64_t v117 = v41;
    id v30 = (id)(*(uint64_t (**)(void))((*v84 & *MEMORY[0x263F8EED0]) + 0x140))();
    id v29 = objc_msgSend(v30, sel_allValues);
    v31 = (unsigned char *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v115[1] = v31;
    swift_retain();
    v33 = &v29;
    MEMORY[0x270FA5388](&v29, v25);
    uint64_t v26 = &v29 - 4;
    v35 = &v29 - 4;
    v26[2] = v34;
    v26[3] = v27;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    lazy protocol witness table accessor for type [Any] and conformance [A]();
    Sequence.forEach(_:)();
    if (!v24)
    {
      swift_release();
      outlined destroy of [Any]();

      swift_release();
LABEL_29:
      type metadata accessor for NSMutableDictionary();
      v28.super.super.isa = NSMutableDictionary.__allocating_init()().super.super.isa;
      HeadphoneDataProvider.hexForReplayDeviceMap.setter(v28.super.super.isa);

      return;
    }
    __break(1u);
  }
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x253386220](v3, a3);
  }
  return result;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1) {
    return static UnsafeMutablePointer.allocate(capacity:)();
  }
  else {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

uint64_t Logger.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.shared);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0) {
    return *(void *)a2;
  }
  return v3;
}

unint64_t type metadata accessor for NSMutableDictionary()
{
  uint64_t v2 = lazy cache variable for type metadata for NSMutableDictionary;
  if (!lazy cache variable for type metadata for NSMutableDictionary)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    return ObjCClassMetadata;
  }
  return v2;
}

NSMutableDictionary __swiftcall NSMutableDictionary.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSMutableDictionary)@nonobjc NSMutableDictionary.init()();
}

id @nonobjc NSMutableDictionary.init()()
{
  return objc_msgSend(v0, sel_init);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(a1);
  }
  return a1;
}

_OWORD *outlined init with take of Any?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
}

Swift::Void __swiftcall Array._endMutation()()
{
  *id v0 = *v0;
}

void HeadphoneDataProvider.hexForReplayDeviceMap.setter(void *a1)
{
  id v2 = a1;
  uint64_t v4 = (void **)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_hexForReplayDeviceMap);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *uint64_t v4 = a1;

  swift_endAccess();
}

uint64_t HeadphoneDataProvider.deviceLostHandler.getter()
{
  id v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceLostHandler);
  swift_beginAccess();
  uint64_t v3 = *v2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(*v2);
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDataProvider.shouldShowMock.setter(char a1)
{
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMock);
  swift_beginAccess();
  *uint64_t v4 = a1 & 1;
  return swift_endAccess();
}

uint64_t HeadphoneDataProvider.dataObjects.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_dataObjects);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t Headphone_Manager.topLevelUIHandler.setter()
{
  swift_unknownObjectRetain();
  Headphone_Manager._topLevelUIHandler.setter();
  uint64_t v4 = (id *)HeadphoneDataProvider.shared.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v0 = *v4;
  id v5 = *v4;
  id v1 = *v4;
  uint64_t v2 = swift_endAccess();
  (*(void (**)(uint64_t))((*v0 & *MEMORY[0x263F8EED0]) + 0x158))(v2);

  return swift_unknownObjectRelease();
}

uint64_t Headphone_Manager._topLevelUIHandler.setter()
{
  return swift_unknownObjectRelease();
}

id Headphone_Manager.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

Swift::Void __swiftcall HeadphoneDataProvider.provideDeviceForDiscoveryHandler()()
{
  uint64_t v38 = closure #1 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler();
  uint64_t v39 = partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed Data) -> (@owned (String, ReplayData)?);
  uint64_t v40 = partial apply for closure #2 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler();
  uint64_t v41 = partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed ReplayData) -> ();
  id v51 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v42 = 0;
  uint64_t v52 = v0;
  id v43 = (id)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x140))();
  id v51 = v43;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Perferences", 0x15uLL, 1)._object;
  uint64_t v44 = String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease();
  int has_internal_ui = os_variant_has_internal_ui();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (has_internal_ui)
  {
    uint64_t v35 = (*(uint64_t (**)(void))((*v37 & *MEMORY[0x263F8EED0]) + 0xF8))();
    uint64_t v36 = v1;
    if (v35)
    {
      uint64_t v33 = v35;
      uint64_t v34 = v36;
      uint64_t v2 = v42;
      uint64_t v25 = v36;
      uint64_t v26 = v35;
      uint64_t v49 = v35;
      uint64_t v50 = v36;
      uint64_t v48 = HeadphoneDataProvider.dataObjects.getter();
      v27 = &v17;
      MEMORY[0x270FA5388](&v17, v3);
      NSMutableDictionary v28 = v14;
      uint64_t v15 = v38;
      uint64_t v16 = 0;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ReplayData));
      lazy protocol witness table accessor for type [String : Data] and conformance [A : B]();
      uint64_t v4 = Sequence.compactMap<A>(_:)();
      uint64_t v31 = v2;
      uint64_t v32 = v4;
      uint64_t v18 = v4;
      outlined destroy of [String : Data]();
      uint64_t v47 = v18;
      id v5 = v37;
      id v6 = v43;
      swift_retain();
      uint64_t v19 = &v17;
      uint64_t v20 = 15;
      MEMORY[0x270FA5388](&v17, v7);
      v14[0] = v8;
      v14[1] = v9;
      uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))v26;
      uint64_t v16 = v25;
      uint64_t v21 = v13;
      unint64_t v22 = (v20 + 32) & 0xFFFFFFFFFFFFFFF0;
      MEMORY[0x270FA5388](v13, v10);
      uint64_t v11 = &v13[-v22];
      uint64_t v23 = v11;
      *((void *)v11 + 2) = v40;
      *((void *)v11 + 3) = v12;
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, ReplayData)]);
      lazy protocol witness table accessor for type [(String, ReplayData)] and conformance [A]();
      Sequence.forEach(_:)();

      swift_release();
      outlined destroy of [(String, ReplayData)]();
      swift_release();
    }
  }
}

uint64_t type metadata completion function for HearingRecord()
{
  uint64_t updated = type metadata accessor for Published<String>();
  if (v0 <= 0x3F)
  {
    uint64_t updated = type metadata accessor for Published<HMMultiState>();
    if (v1 <= 0x3F)
    {
      uint64_t updated = type metadata accessor for Published<HMRegionStatus>();
      if (v2 <= 0x3F)
      {
        uint64_t updated = type metadata accessor for Published<[NSNumber]>();
        if (v3 <= 0x3F)
        {
          uint64_t updated = type metadata accessor for Published<HMOcclusionResult>();
          if (v4 <= 0x3F)
          {
            uint64_t updated = type metadata accessor for Published<[HKAudiogramSample]>();
            if (v5 <= 0x3F)
            {
              uint64_t updated = swift_updateClassMetadata2();
              if (!updated) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return updated;
}

uint64_t type metadata accessor for Published<String>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<String>;
  if (!lazy cache variable for type metadata for Published<String>)
  {
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<String>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<HMOcclusionResult>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<HMOcclusionResult>;
  if (!lazy cache variable for type metadata for Published<HMOcclusionResult>)
  {
    type metadata accessor for HMOcclusionResult();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<HMOcclusionResult>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HMOcclusionResult()
{
  uint64_t v4 = lazy cache variable for type metadata for HMOcclusionResult;
  if (!lazy cache variable for type metadata for HMOcclusionResult)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HMOcclusionResult);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<HMRegionStatus>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<HMRegionStatus>;
  if (!lazy cache variable for type metadata for Published<HMRegionStatus>)
  {
    type metadata accessor for HMRegionStatus();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<HMRegionStatus>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HMRegionStatus()
{
  uint64_t v4 = lazy cache variable for type metadata for HMRegionStatus;
  if (!lazy cache variable for type metadata for HMRegionStatus)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HMRegionStatus);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<HMMultiState>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<HMMultiState>;
  if (!lazy cache variable for type metadata for Published<HMMultiState>)
  {
    type metadata accessor for HMMultiState();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<HMMultiState>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HMMultiState()
{
  uint64_t v4 = lazy cache variable for type metadata for HMMultiState;
  if (!lazy cache variable for type metadata for HMMultiState)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HMMultiState);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<[NSNumber]>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<[NSNumber]>;
  if (!lazy cache variable for type metadata for Published<[NSNumber]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NSNumber]);
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<[NSNumber]>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<[HKAudiogramSample]>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<[HKAudiogramSample]>;
  if (!lazy cache variable for type metadata for Published<[HKAudiogramSample]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKAudiogramSample]);
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<[HKAudiogramSample]>);
      return v1;
    }
  }
  return v4;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContextInMetadataState2 = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = TypeByMangledNameInContextInMetadataState2;
    return TypeByMangledNameInContextInMetadataState2;
  }
  return v4;
}

Swift::Void __swiftcall Headphone_Manager.configCBDiscovery()()
{
  uint64_t v114 = 0;
  uint64_t v95 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v96 = partial apply for closure #1 in Headphone_Manager.configCBDiscovery();
  uint64_t v97 = partial apply for closure #2 in Headphone_Manager.configCBDiscovery();
  uint64_t v98 = partial apply for closure #3 in Headphone_Manager.configCBDiscovery();
  uint64_t v99 = partial apply for closure #4 in Headphone_Manager.configCBDiscovery();
  uint64_t v100 = closure #5 in Headphone_Manager.configCBDiscovery();
  uint64_t v101 = thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply;
  unint64_t v102 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ();
  uint64_t v161 = 0;
  uint64_t v103 = 0;
  uint64_t v109 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v109 - 8);
  uint64_t v108 = v109 - 8;
  unint64_t v105 = (*(void *)(v107 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v109, v0);
  unint64_t v1 = (char *)&v41 - v105;
  v106 = (char *)&v41 - v105;
  uint64_t v161 = v2;
  uint64_t v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v1, v3, v109);
  uint64_t v116 = Logger.logObject.getter();
  int v115 = static os_log_type_t.default.getter();
  uint64_t v112 = &v159;
  uint64_t v159 = 2;
  unint64_t v110 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v111 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v113 = v160;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v117 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v116, (os_log_type_t)v115))
  {
    uint64_t v4 = v103;
    v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v84 = 0;
    uint64_t v86 = createStorage<A>(capacity:type:)(0);
    uint64_t v87 = createStorage<A>(capacity:type:)(v84);
    uint64_t v91 = &v121;
    uint64_t v121 = v85;
    uint64_t v92 = &v120;
    uint64_t v120 = v86;
    v89 = &v119;
    uint64_t v119 = v87;
    unsigned int v88 = 0;
    serialize(_:at:)(0, &v121);
    serialize(_:at:)(v88, v91);
    uint64_t v118 = v117;
    uint64_t v90 = &v41;
    MEMORY[0x270FA5388](&v41, v5);
    id v6 = v92;
    uint64_t v7 = &v41 - 6;
    unint64_t v93 = &v41 - 6;
    v7[2] = (uint64_t)v91;
    v7[3] = (uint64_t)v6;
    v7[4] = v8;
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v4)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_250C36000, v116, (os_log_type_t)v115, "HeadphoneManager: Starting CB Discovery", v85, v113);
      uint64_t v82 = 0;
      destroyStorage<A>(_:count:)(v86, 0, v83);
      destroyStorage<A>(_:count:)(v87, v82, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v85, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = v104;

  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v106, v109);
  uint64_t v11 = *v9;
  uint64_t v79 = (void *)MEMORY[0x263F8EED0];
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))((v11 & *MEMORY[0x263F8EED0]) + 0x120))(v10);
  uint64_t v13 = v104;
  id v75 = v12;
  uint64_t v14 = v104;
  uint64_t v15 = v13;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v96;
  *(void *)(v16 + 16) = v13;
  v157 = v17;
  uint64_t v158 = v16;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v153 = 1107296256;
  int v154 = 0;
  uint64_t v155 = thunk for @escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ();
  v156 = &block_descriptor_4;
  uint64_t v74 = _Block_copy(&aBlock);
  swift_release();

  objc_msgSend(v75, sel_setDeviceFoundHandler_, v74);
  _Block_release(v74);

  uint64_t v76 = HeadphoneDataProvider.shared.unsafeMutableAddressor();
  uint64_t v78 = &v151;
  swift_beginAccess();
  uint64_t v77 = (uint64_t *)*v76;
  uint64_t v18 = v77;
  uint64_t v19 = swift_endAccess();
  id v80 = (id)(*(uint64_t (**)(uint64_t))((*v13 & *v79) + 0x120))(v19);
  id v81 = objc_msgSend(v80, sel_deviceFoundHandler);
  if (v81)
  {
    id v73 = v81;
    id v70 = v81;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v101;
    *(void *)(v20 + 16) = v70;
    uint64_t v71 = v21;
    uint64_t v72 = v20;
  }
  else
  {
    uint64_t v71 = 0;
    uint64_t v72 = 0;
  }
  uint64_t v22 = *v77;
  uint64_t v67 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))((v22 & *MEMORY[0x263F8EED0]) + 0x100))(v71, v72);
  uint64_t v23 = v104;

  uint64_t v24 = (void *)(*(uint64_t (**)(void))((*v23 & *v67) + 0x120))();
  uint64_t v25 = v104;
  id v63 = v24;
  uint64_t v26 = v104;
  uint64_t v27 = swift_allocObject();
  NSMutableDictionary v28 = v97;
  *(void *)(v27 + 16) = v25;
  uint64_t v149 = v28;
  uint64_t v150 = v27;
  uint64_t v144 = MEMORY[0x263EF8330];
  int v145 = 1107296256;
  int v146 = 0;
  uint64_t v147 = thunk for @escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ();
  v148 = &block_descriptor_8_0;
  uint64_t v62 = _Block_copy(&v144);
  swift_release();
  objc_msgSend(v63, sel_setDeviceLostHandler_, v62);
  _Block_release(v62);

  uint64_t v64 = HeadphoneDataProvider.shared.unsafeMutableAddressor();
  uint64_t v66 = &v143;
  swift_beginAccess();
  uint64_t v65 = (uint64_t *)*v64;
  uint64_t v29 = v65;
  uint64_t v30 = swift_endAccess();
  id v68 = (id)(*(uint64_t (**)(uint64_t))((*v25 & *v67) + 0x120))(v30);
  id v69 = objc_msgSend(v68, sel_deviceLostHandler);
  if (v69)
  {
    id v61 = v69;
    id v58 = v69;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v102;
    *(void *)(v31 + 16) = v58;
    uint64_t v59 = v32;
    uint64_t v60 = v31;
  }
  else
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
  }
  uint64_t v33 = *v65;
  unint64_t v54 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))((v33 & *MEMORY[0x263F8EED0]) + 0x118))(v59, v60);
  uint64_t v34 = v104;

  uint64_t v35 = (void *)(*(uint64_t (**)(void))((*v34 & *v54) + 0x120))();
  uint64_t v36 = v104;
  id v45 = v35;
  uint64_t v48 = &unk_2701D80A0;
  uint64_t v46 = 24;
  uint64_t v47 = 7;
  uint64_t v43 = swift_allocObject();
  uint64_t v41 = v43 + 16;
  uint64_t v37 = v36;
  uint64_t v42 = v36;
  swift_unknownObjectWeakInit();

  swift_retain();
  v141 = v98;
  uint64_t v142 = v43;
  uint64_t v136 = MEMORY[0x263EF8330];
  int v55 = 1107296256;
  int v137 = 1107296256;
  int v138 = 0;
  v139 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v140 = &block_descriptor_14;
  uint64_t v44 = _Block_copy(&v136);
  swift_release();
  swift_release();
  objc_msgSend(v45, sel_setInterruptionHandler_, v44);
  _Block_release(v44);

  uint64_t v38 = (void *)(*(uint64_t (**)(void))((*v36 & *v54) + 0x120))();
  uint64_t v39 = v104;
  id v53 = v38;
  uint64_t v51 = swift_allocObject();
  uint64_t v49 = v51 + 16;
  uint64_t v40 = v39;
  uint64_t v50 = v39;
  swift_unknownObjectWeakInit();

  swift_retain();
  uint64_t v134 = v99;
  uint64_t v135 = v51;
  uint64_t v129 = MEMORY[0x263EF8330];
  int v130 = v55;
  int v131 = 0;
  uint64_t v132 = thunk for @escaping @callee_guaranteed () -> ();
  v133 = &block_descriptor_18;
  uint64_t v52 = _Block_copy(&v129);
  swift_release();
  swift_release();
  objc_msgSend(v53, sel_setInvalidationHandler_, v52);
  _Block_release(v52);

  id v57 = (id)(*(uint64_t (**)(void))((*v39 & *v54) + 0x120))();
  uint64_t v127 = v100;
  uint64_t v128 = 0;
  uint64_t v122 = MEMORY[0x263EF8330];
  int v123 = v55;
  int v124 = 0;
  v125 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  char v126 = &block_descriptor_21;
  uint32_t v56 = _Block_copy(&v122);
  objc_msgSend(v57, sel_activateWithCompletion_);
  _Block_release(v56);
}

id Headphone_Manager.deviceManger.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_deviceManger);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

uint64_t *HeadphoneDataProvider.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static HeadphoneDataProvider.shared;
}

void *Headphone_Manager.init()()
{
  uint64_t v97 = 0;
  uint64_t v67 = closure #1 in osLogInternal(_:log:type:)partial apply;
  id v112 = 0;
  uint64_t v88 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = type metadata accessor for Logger();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = v69 - 8;
  unint64_t v72 = (*(void *)(v70 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v1);
  id v73 = (char *)&v46 - v72;
  unint64_t v74 = (*(void *)(*(void *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v97, v2);
  uint64_t v80 = (uint64_t)&v46 - v74;
  unint64_t v75 = (*(void *)(*(void *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v97, v3);
  uint64_t v79 = (char *)&v46 - v75;
  uint64_t v4 = type metadata accessor for DispatchQoS();
  unint64_t v76 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4, v5);
  uint64_t v78 = (char *)&v46 - v76;
  id v6 = v0;
  id v7 = v0;
  id v8 = v0;
  id v9 = v0;
  id v10 = v0;
  id v11 = v0;
  id v12 = v0;
  id v13 = v0;
  id v14 = v0;
  id v15 = v0;
  id v16 = v0;
  id v112 = v0;
  uint64_t v81 = OBJC_IVAR___HPMHeadphoneManager_dispatchQueue;
  type metadata accessor for OS_dispatch_queue();
  Swift::String v77 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneManager", 0x1AuLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v80);
  uint64_t v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v18 = v96;
  *(void *)&v96[v81] = v17;

  swift_unknownObjectWeakInit();
  uint64_t v82 = OBJC_IVAR___HPMHeadphoneManager_cbDiscovery;
  type metadata accessor for CBDiscovery();
  id v19 = CBDiscovery.__allocating_init()();
  id v20 = v96;
  *(void *)&v96[v82] = v19;

  uint64_t v83 = OBJC_IVAR___HPMHeadphoneManager_controller;
  type metadata accessor for CBController();
  id v21 = CBController.__allocating_init()();
  id v22 = v96;
  *(void *)&v96[v83] = v21;

  uint64_t v84 = OBJC_IVAR___HPMHeadphoneManager_connection;
  type metadata accessor for CBConnection();
  id v23 = CBConnection.__allocating_init()();
  id v24 = v96;
  *(void *)&v96[v84] = v23;

  uint64_t v85 = OBJC_IVAR___HPMHeadphoneManager_deviceManger;
  type metadata accessor for AADeviceManager();
  id v25 = AADeviceManager.__allocating_init()();
  uint64_t v26 = v96;
  *(void *)&v96[v85] = v25;

  *(void *)&v26[OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient] = v97;
  uint64_t v87 = OBJC_IVAR___HPMHeadphoneManager_connectedRecords;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, HMDeviceRecord));
  uint64_t v86 = _allocateUninitializedArray<A>(_:)();
  type metadata accessor for HMDeviceRecord();
  uint64_t v94 = MEMORY[0x263F8D310];
  uint64_t v93 = MEMORY[0x263F8D320];
  *(void *)&v26[v87] = Dictionary.init(dictionaryLiteral:)();

  swift_unknownObjectWeakInit();
  uint64_t v90 = OBJC_IVAR___HPMHeadphoneManager_connectedHeadphones;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
  uint64_t v89 = _allocateUninitializedArray<A>(_:)();
  uint64_t v92 = type metadata accessor for HeadphoneDevice();
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
  id v28 = v96;
  *(void *)&v96[v90] = v27;

  uint64_t v95 = OBJC_IVAR___HPMHeadphoneManager_pendingConnectedHeadphones;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v29 = Dictionary.init(dictionaryLiteral:)();
  id v30 = v96;
  *(void *)&v96[v95] = v29;

  id v98 = v112;
  uint64_t v31 = (objc_class *)type metadata accessor for Headphone_Manager();
  v111.receiver = v98;
  v111.super_class = v31;
  uint64_t v99 = objc_msgSendSuper2(&v111, sel_init);
  uint64_t v32 = v99;
  uint64_t v33 = v99;
  uint64_t v34 = v99;
  uint64_t v35 = v99;
  id v112 = v99;
  uint64_t v100 = &v108;
  uint64_t v109 = &type metadata for HeadphoneFeatures;
  unint64_t v110 = lazy protocol witness table accessor for type HeadphoneFeatures and conformance HeadphoneFeatures();
  char v108 = 0;
  int v101 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  if (v101)
  {
    uint64_t v36 = v73;
    uint64_t v37 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v36, v37, v69);
    uint64_t v65 = Logger.logObject.getter();
    int v64 = static os_log_type_t.default.getter();
    uint64_t v62 = &v106;
    uint64_t v106 = 2;
    unint64_t v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v61 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v63 = v107;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v66 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v65, (os_log_type_t)v64))
    {
      uint64_t v38 = v68;
      uint64_t v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v49 = 0;
      uint64_t v51 = createStorage<A>(capacity:type:)(0);
      uint64_t v52 = createStorage<A>(capacity:type:)(v49);
      uint32_t v56 = &v105;
      unint64_t v105 = v50;
      id v57 = &v104;
      uint64_t v104 = v51;
      unint64_t v54 = &v103;
      uint64_t v103 = v52;
      unsigned int v53 = 0;
      serialize(_:at:)(0, &v105);
      serialize(_:at:)(v53, v56);
      uint64_t v102 = v66;
      int v55 = &v46;
      MEMORY[0x270FA5388](&v46, v39);
      uint64_t v40 = v57;
      uint64_t v41 = &v46 - 6;
      id v58 = &v46 - 6;
      v41[2] = (uint64_t)v56;
      v41[3] = (uint64_t)v40;
      v41[4] = v42;
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v38)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_250C36000, v65, (os_log_type_t)v64, "HeadphoneManager: BDM Feature enabled", v50, v63);
        uint64_t v47 = 0;
        destroyStorage<A>(_:count:)(v51, 0, v48);
        destroyStorage<A>(_:count:)(v52, v47, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v50, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v43 = v99;

    uint64_t v44 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v73, v69);
    (*(void (**)(uint64_t))((*v43 & *MEMORY[0x263F8EED0]) + 0x1B0))(v44);

    Headphone_Manager.configHearingModeClient()();
  }
  else
  {
  }
  return v99;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContext2 = swift_getTypeByMangledNameInContext2();
    *a1 = TypeByMangledNameInContext2;
    return TypeByMangledNameInContext2;
  }
  return v4;
}

uint64_t type metadata accessor for HeadphoneDevice()
{
  uint64_t v1 = type metadata singleton initialization cache for HeadphoneDevice;
  if (!type metadata singleton initialization cache for HeadphoneDevice) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t Headphone_Manager.connectedHeadphones.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneManager_connectedHeadphones);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for Headphone_Manager()
{
  return self;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((*(_DWORD *)(*(void *)(v2 - 8) + 80) & 0x20000) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
  }
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  uint64_t v2 = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *MEMORY[0x263F8F130];
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 8) + 104))(a1, v3);
}

uint64_t default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return static DispatchQoS.unspecified.getter();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  uint64_t v2 = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for AADeviceManager()
{
  uint64_t v2 = lazy cache variable for type metadata for AADeviceManager;
  if (!lazy cache variable for type metadata for AADeviceManager)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for AADeviceManager);
    return ObjCClassMetadata;
  }
  return v2;
}

id AADeviceManager.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc AADeviceManager.init()();
}

id @nonobjc AADeviceManager.init()()
{
  return objc_msgSend(v0, sel_init);
}

unint64_t type metadata accessor for HMDeviceRecord()
{
  uint64_t v2 = lazy cache variable for type metadata for HMDeviceRecord;
  if (!lazy cache variable for type metadata for HMDeviceRecord)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HMDeviceRecord);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for CBController()
{
  uint64_t v2 = lazy cache variable for type metadata for CBController;
  if (!lazy cache variable for type metadata for CBController)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBController);
    return ObjCClassMetadata;
  }
  return v2;
}

id CBController.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBController.init()();
}

id @nonobjc CBController.init()()
{
  return objc_msgSend(v0, sel_init);
}

unint64_t type metadata accessor for CBConnection()
{
  uint64_t v2 = lazy cache variable for type metadata for CBConnection;
  if (!lazy cache variable for type metadata for CBConnection)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBConnection);
    return ObjCClassMetadata;
  }
  return v2;
}

id CBConnection.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBConnection.init()();
}

id @nonobjc CBConnection.init()()
{
  return objc_msgSend(v0, sel_init);
}

unint64_t type metadata accessor for CBDiscovery()
{
  uint64_t v2 = lazy cache variable for type metadata for CBDiscovery;
  if (!lazy cache variable for type metadata for CBDiscovery)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDiscovery);
    return ObjCClassMetadata;
  }
  return v2;
}

id CBDiscovery.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBDiscovery.init()();
}

id @nonobjc CBDiscovery.init()()
{
  return objc_msgSend(v0, sel_init);
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  uint64_t v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for OS_dispatch_queue.Attributes();
      uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v1 + 16) = v4;
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x263F8EE78];
      swift_retain();
      uint64_t v3 = v2;
    }
    type metadata accessor for OS_dispatch_queue.Attributes();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for DispatchWorkItemFlags();
      uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v1 + 16) = v4;
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x263F8EE78];
      swift_retain();
      uint64_t v3 = v2;
    }
    type metadata accessor for DispatchWorkItemFlags();
    return v3;
  }
  return result;
}

Swift::Void __swiftcall Headphone_Manager.configHearingModeClient()()
{
  uint32_t v56 = v0;
  id v18 = (void *)MEMORY[0x263F8EED0];
  id v7 = (id)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x138))();
  uint64_t v5 = swift_allocObject();
  uint64_t v1 = v14;
  swift_unknownObjectWeakInit();

  swift_retain();
  unint64_t v54 = partial apply for closure #1 in Headphone_Manager.configHearingModeClient();
  uint64_t v55 = v5;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v50 = 1107296256;
  int v51 = 0;
  uint64_t v52 = thunk for @escaping @callee_guaranteed () -> ();
  unsigned int v53 = &block_descriptor_1;
  id v6 = _Block_copy(&aBlock);
  swift_release();
  swift_release();
  objc_msgSend(v7, sel_setInterruptionHandler_, v6);
  _Block_release(v6);

  id v10 = (id)(*(uint64_t (**)(void))((*v14 & *v18) + 0x138))();
  uint64_t v8 = swift_allocObject();
  uint64_t v2 = v14;
  swift_unknownObjectWeakInit();

  swift_retain();
  uint64_t v47 = partial apply for closure #2 in Headphone_Manager.configHearingModeClient();
  uint64_t v48 = v8;
  uint64_t v42 = MEMORY[0x263EF8330];
  int v43 = 1107296256;
  int v44 = 0;
  id v45 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v46 = &block_descriptor_4;
  id v9 = _Block_copy(&v42);
  swift_release();
  swift_release();
  objc_msgSend(v10, sel_setInvalidationHandler_, v9);
  _Block_release(v9);

  id v13 = (id)(*(uint64_t (**)(void))((*v14 & *v18) + 0x138))();
  uint64_t v11 = swift_allocObject();
  uint64_t v3 = v14;
  swift_unknownObjectWeakInit();

  swift_retain();
  uint64_t v40 = partial apply for closure #3 in Headphone_Manager.configHearingModeClient();
  uint64_t v41 = v11;
  uint64_t v35 = MEMORY[0x263EF8330];
  int v36 = 1107296256;
  int v37 = 0;
  uint64_t v38 = thunk for @escaping @callee_guaranteed (@guaranteed [HKAudiogramSample], @guaranteed [HKAudiogramSample], @guaranteed Error?) -> ();
  uint64_t v39 = &block_descriptor_8;
  id v12 = _Block_copy(&v35);
  swift_release();
  swift_release();
  objc_msgSend(v13, sel_setAudiogramsAvailableHandler_, v12);
  _Block_release(v12);

  id v17 = (id)(*(uint64_t (**)(void))((*v14 & *v18) + 0x138))();
  uint64_t v15 = swift_allocObject();
  uint64_t v4 = v14;
  swift_unknownObjectWeakInit();

  swift_retain();
  uint64_t v33 = partial apply for closure #4 in Headphone_Manager.configHearingModeClient();
  uint64_t v34 = v15;
  uint64_t v28 = MEMORY[0x263EF8330];
  int v29 = 1107296256;
  int v30 = 0;
  uint64_t v31 = thunk for @escaping @callee_guaranteed (@guaranteed HMDeviceRecord) -> ();
  uint64_t v32 = &block_descriptor_12;
  id v16 = _Block_copy(&v28);
  swift_release();
  swift_release();
  objc_msgSend(v17, sel_setDeviceRecordChangedHandler_, v16);
  _Block_release(v16);

  id v20 = (id)(*(uint64_t (**)(void))((*v14 & *v18) + 0x138))();
  uint64_t v26 = closure #5 in Headphone_Manager.configHearingModeClient();
  uint64_t v27 = 0;
  uint64_t v21 = MEMORY[0x263EF8330];
  int v22 = 1107296256;
  int v23 = 0;
  id v24 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  id v25 = &block_descriptor_15;
  id v19 = _Block_copy(&v21);
  objc_msgSend(v20, sel_activateWithCompletion_);
  _Block_release(v19);
}

id Headphone_Manager.hmsClient.getter()
{
  id v9 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient);
  swift_beginAccess();
  id v10 = *v9;
  id v1 = *v9;
  swift_endAccess();
  if (v10) {
    return v10;
  }
  type metadata accessor for HMServiceClient();
  id v6 = HMServiceClient.__allocating_init()();
  id v2 = v6;
  uint64_t v5 = (void **)(v8 + OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient);
  swift_beginAccess();
  uint64_t v3 = *v5;
  *uint64_t v5 = v6;

  swift_endAccess();
  return v6;
}

unint64_t type metadata accessor for HMServiceClient()
{
  uint64_t v2 = lazy cache variable for type metadata for HMServiceClient;
  if (!lazy cache variable for type metadata for HMServiceClient)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HMServiceClient);
    return ObjCClassMetadata;
  }
  return v2;
}

id HMServiceClient.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HMServiceClient.init()();
}

id @nonobjc HMServiceClient.init()()
{
  return objc_msgSend(v0, sel_init);
}

unint64_t lazy protocol witness table accessor for type HeadphoneFeatures and conformance HeadphoneFeatures()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures);
    return WitnessTable;
  }
  return v2;
}

id HeadphoneDataProvider.hexForReplayDeviceMap.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_hexForReplayDeviceMap);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

uint64_t HeadphoneDataProvider.deviceFoundHandler.setter(uint64_t a1, uint64_t a2)
{
  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceFoundHandler);
  swift_beginAccess();
  uint64_t v3 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v3);
  swift_endAccess();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
}

uint64_t HeadphoneDataProvider.deviceFoundHandler.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceFoundHandler);
  swift_beginAccess();
  uint64_t v3 = *v2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(*v2);
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDataProvider.deviceLostHandler.setter(uint64_t a1, uint64_t a2)
{
  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceLostHandler);
  swift_beginAccess();
  uint64_t v3 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v3);
  swift_endAccess();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t HeadphoneDataProvider.dataObjects.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_dataObjects);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance HeadphoneFeatures()
{
  return HeadphoneFeatures.feature.getter(*v0);
}

const char *HeadphoneFeatures.feature.getter(char a1)
{
  if (!a1) {
    return "BetterDeviceManagement";
  }
  if (a1 == 1) {
    return "BatteryStatus";
  }
  return "HeadphoneInfrastructureReDesign";
}

uint64_t type metadata completion function for HeadphoneDevice()
{
  uint64_t updated = type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F)
  {
    uint64_t updated = type metadata accessor for Published<String>();
    if (v1 <= 0x3F)
    {
      uint64_t updated = type metadata accessor for Published<CBListeningMode>();
      if (v2 <= 0x3F)
      {
        uint64_t updated = type metadata accessor for Published<CBPeerUIGestureMode>();
        if (v3 <= 0x3F)
        {
          uint64_t updated = type metadata accessor for Published<CBDoubleTapAction>();
          if (v4 <= 0x3F)
          {
            uint64_t updated = type metadata accessor for Published<CBPeerCrownRotationDirection>();
            if (v5 <= 0x3F)
            {
              uint64_t updated = type metadata accessor for Published<CBSmartRoutingMode>();
              if (v6 <= 0x3F)
              {
                uint64_t updated = type metadata accessor for Published<CBMicrophoneMode>();
                if (v7 <= 0x3F)
                {
                  uint64_t updated = type metadata accessor for Published<CBPeerCallConfig>();
                  if (v8 <= 0x3F)
                  {
                    uint64_t updated = type metadata accessor for Published<Float>();
                    if (v9 <= 0x3F)
                    {
                      uint64_t updated = type metadata accessor for Published<CBBatteryState>();
                      if (v10 <= 0x3F)
                      {
                        uint64_t updated = type metadata accessor for Published<HearingRecord>();
                        if (v11 <= 0x3F)
                        {
                          uint64_t updated = type metadata accessor for Published<AADevice>();
                          if (v12 <= 0x3F)
                          {
                            uint64_t updated = swift_updateClassMetadata2();
                            if (!updated) {
                              return 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return updated;
}

uint64_t type metadata accessor for Published<CBPeerCrownRotationDirection>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBPeerCrownRotationDirection>;
  if (!lazy cache variable for type metadata for Published<CBPeerCrownRotationDirection>)
  {
    type metadata accessor for CBPeerCrownRotationDirection();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBPeerCrownRotationDirection>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBPeerCrownRotationDirection()
{
  uint64_t v4 = lazy cache variable for type metadata for CBPeerCrownRotationDirection;
  if (!lazy cache variable for type metadata for CBPeerCrownRotationDirection)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerCrownRotationDirection);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBPeerUIGestureMode>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBPeerUIGestureMode>;
  if (!lazy cache variable for type metadata for Published<CBPeerUIGestureMode>)
  {
    type metadata accessor for CBPeerUIGestureMode();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBPeerUIGestureMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBPeerUIGestureMode()
{
  uint64_t v4 = lazy cache variable for type metadata for CBPeerUIGestureMode;
  if (!lazy cache variable for type metadata for CBPeerUIGestureMode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerUIGestureMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBSmartRoutingMode>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBSmartRoutingMode>;
  if (!lazy cache variable for type metadata for Published<CBSmartRoutingMode>)
  {
    type metadata accessor for CBSmartRoutingMode();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBSmartRoutingMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBSmartRoutingMode()
{
  uint64_t v4 = lazy cache variable for type metadata for CBSmartRoutingMode;
  if (!lazy cache variable for type metadata for CBSmartRoutingMode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBSmartRoutingMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBDoubleTapAction>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBDoubleTapAction>;
  if (!lazy cache variable for type metadata for Published<CBDoubleTapAction>)
  {
    type metadata accessor for CBDoubleTapAction();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBDoubleTapAction>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBDoubleTapAction()
{
  uint64_t v4 = lazy cache variable for type metadata for CBDoubleTapAction;
  if (!lazy cache variable for type metadata for CBDoubleTapAction)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDoubleTapAction);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBPeerCallConfig>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBPeerCallConfig>;
  if (!lazy cache variable for type metadata for Published<CBPeerCallConfig>)
  {
    type metadata accessor for CBPeerCallConfig();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBPeerCallConfig>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBPeerCallConfig()
{
  uint64_t v4 = lazy cache variable for type metadata for CBPeerCallConfig;
  if (!lazy cache variable for type metadata for CBPeerCallConfig)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerCallConfig);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBMicrophoneMode>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBMicrophoneMode>;
  if (!lazy cache variable for type metadata for Published<CBMicrophoneMode>)
  {
    type metadata accessor for CBMicrophoneMode();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBMicrophoneMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBMicrophoneMode()
{
  uint64_t v4 = lazy cache variable for type metadata for CBMicrophoneMode;
  if (!lazy cache variable for type metadata for CBMicrophoneMode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBMicrophoneMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBListeningMode>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBListeningMode>;
  if (!lazy cache variable for type metadata for Published<CBListeningMode>)
  {
    type metadata accessor for CBListeningMode();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBListeningMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBListeningMode()
{
  uint64_t v4 = lazy cache variable for type metadata for CBListeningMode;
  if (!lazy cache variable for type metadata for CBListeningMode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBListeningMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBBatteryState>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<CBBatteryState>;
  if (!lazy cache variable for type metadata for Published<CBBatteryState>)
  {
    type metadata accessor for CBBatteryState();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBBatteryState>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBBatteryState()
{
  uint64_t v4 = lazy cache variable for type metadata for CBBatteryState;
  if (!lazy cache variable for type metadata for CBBatteryState)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBBatteryState);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<Float>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<Float>;
  if (!lazy cache variable for type metadata for Published<Float>)
  {
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<Float>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<Bool>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<Bool>;
  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<AADevice>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<AADevice>;
  if (!lazy cache variable for type metadata for Published<AADevice>)
  {
    type metadata accessor for AADevice();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<AADevice>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<HearingRecord>()
{
  uint64_t v4 = lazy cache variable for type metadata for Published<HearingRecord>;
  if (!lazy cache variable for type metadata for Published<HearingRecord>)
  {
    type metadata accessor for HearingRecord();
    unint64_t v3 = type metadata accessor for Published();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<HearingRecord>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HearingRecord()
{
  uint64_t v1 = type metadata singleton initialization cache for HearingRecord;
  if (!type metadata singleton initialization cache for HearingRecord) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

unint64_t instantiation function for generic protocol witness table for AADevice(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AADevice and conformance AADevice();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AADevice and conformance AADevice()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AADevice and conformance AADevice;
  if (!lazy protocol witness table cache variable for type AADevice and conformance AADevice)
  {
    type metadata accessor for AADevice();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AADevice and conformance AADevice);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AADevice and conformance AADevice;
  if (!lazy protocol witness table cache variable for type AADevice and conformance AADevice)
  {
    type metadata accessor for AADevice();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AADevice and conformance AADevice);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata completion function for AADevice()
{
  uint64_t updated = type metadata accessor for AADeviceProperty<AADevice, Date?>();
  if (v0 <= 0x3F)
  {
    uint64_t updated = swift_updateClassMetadata2();
    if (!updated) {
      return 0;
    }
  }
  return updated;
}

uint64_t type metadata accessor for AADeviceProperty<AADevice, Date?>()
{
  uint64_t v4 = lazy cache variable for type metadata for AADeviceProperty<AADevice, Date?>;
  if (!lazy cache variable for type metadata for AADeviceProperty<AADevice, Date?>)
  {
    type metadata accessor for AADevice();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Date?);
    lazy protocol witness table accessor for type AADevice and conformance AADevice();
    lazy protocol witness table accessor for type Date? and conformance <A> A?();
    unint64_t v3 = type metadata accessor for AADeviceProperty();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for AADeviceProperty<AADevice, Date?>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AADevice()
{
  uint64_t v1 = type metadata singleton initialization cache for AADevice;
  if (!type metadata singleton initialization cache for AADevice) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

uint64_t type metadata accessor for AADeviceProperty()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type Date? and conformance <A> A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Date? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Date? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Date?);
    lazy protocol witness table accessor for type Date and conformance Date();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Date? and conformance <A> A?);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata completion function for ReplayData()
{
  uint64_t updated = type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    uint64_t updated = swift_updateClassMetadata2();
    if (!updated) {
      return 0;
    }
  }
  return updated;
}

uint64_t type metadata accessor for UUID?()
{
  uint64_t v4 = lazy cache variable for type metadata for UUID?;
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v3 = type metadata accessor for Optional();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for UUID?);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata completion function for AADeviceProperty()
{
  uint64_t v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v2 = a2;
  if (a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  v5();

  return swift_release();
}

uint64_t closure #5 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  uint64_t v70 = a1;
  uint64_t v59 = implicit closure #1 in closure #5 in Headphone_Manager.configHearingModeClient();
  unint64_t v60 = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_2;
  unint64_t v61 = implicit closure #2 in closure #5 in Headphone_Manager.configHearingModeClient();
  uint64_t v62 = _sSiIegd_SiIegr_TRTA_1;
  uint32_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
  uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
  uint64_t v84 = 0;
  uint64_t v69 = 0;
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v73 = v71 - 8;
  unint64_t v74 = (*(void *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t result = MEMORY[0x270FA5388](v70, v1);
  unint64_t v75 = (char *)v26 - v74;
  uint64_t v84 = result;
  uint64_t v83 = result;
  BOOL v58 = result != 0;
  if (result)
  {
    unint64_t v3 = v75;
    uint64_t v4 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v3, v4, v71);
    uint32_t v56 = Logger.logObject.getter();
    int v57 = static os_log_type_t.error.getter();
    uint64_t v39 = &v81;
    uint64_t v81 = 22;
    unint64_t v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v40 = v82;
    uint64_t v42 = 17;
    uint64_t v45 = 7;
    uint64_t v47 = swift_allocObject();
    *(unsigned char *)(v47 + 16) = 32;
    uint64_t v48 = swift_allocObject();
    int v43 = 8;
    *(unsigned char *)(v48 + 16) = 8;
    uint64_t v44 = 32;
    uint64_t v5 = swift_allocObject();
    uint64_t v41 = v5;
    *(void *)(v5 + 16) = v59;
    *(void *)(v5 + 24) = 0;
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = v41;
    uint64_t v49 = v6;
    *(void *)(v6 + 16) = v60;
    *(void *)(v6 + 24) = v7;
    uint64_t v50 = swift_allocObject();
    *(unsigned char *)(v50 + 16) = 0;
    uint64_t v51 = swift_allocObject();
    *(unsigned char *)(v51 + 16) = v43;
    uint64_t v8 = swift_allocObject();
    uint64_t v46 = v8;
    *(void *)(v8 + 16) = v61;
    *(void *)(v8 + 24) = 0;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v46;
    uint64_t v53 = v9;
    *(void *)(v9 + 16) = v62;
    *(void *)(v9 + 24) = v10;
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v52 = _allocateUninitializedArray<A>(_:)();
    unint64_t v54 = v11;
    swift_retain();
    uint64_t v12 = v47;
    id v13 = v54;
    uint64_t *v54 = v63;
    v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v12;
    swift_retain();
    uint64_t v14 = v48;
    uint64_t v15 = v54;
    v54[2] = v64;
    v15[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
    swift_retain();
    id v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v49;
    id v17 = v54;
    v54[4] = v65;
    v17[5] = v16;
    swift_retain();
    uint64_t v18 = v50;
    id v19 = v54;
    v54[6] = v66;
    v19[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
    swift_retain();
    uint64_t v20 = v51;
    uint64_t v21 = v54;
    v54[8] = v67;
    v21[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
    swift_retain();
    int v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v53;
    int v23 = v54;
    v54[10] = v68;
    v23[11] = v22;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v56, (os_log_type_t)v57))
    {
      uint64_t v24 = v69;
      int v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v30 = createStorage<A>(capacity:type:)(0);
      uint64_t v31 = createStorage<A>(capacity:type:)(1);
      uint64_t v33 = &v80;
      uint64_t v80 = v29;
      uint64_t v34 = &v79;
      uint64_t v79 = v30;
      uint64_t v35 = &v78;
      uint64_t v78 = v31;
      unsigned int v32 = 2;
      serialize(_:at:)(2, &v80);
      serialize(_:at:)(v32, v33);
      unint64_t v76 = v63;
      uint64_t v77 = v47;
      closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35);
      uint64_t v36 = v24;
      if (v24)
      {
        __break(1u);
      }
      else
      {
        unint64_t v76 = v64;
        uint64_t v77 = v48;
        closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v80, (uint64_t)&v79, (uint64_t)&v78);
        uint64_t v27 = 0;
        uint64_t v25 = v27;
        unint64_t v76 = v65;
        uint64_t v77 = v49;
        closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v80, (uint64_t)&v79, (uint64_t)&v78);
        v26[3] = v25;
        unint64_t v76 = v66;
        uint64_t v77 = v50;
        closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v80, (uint64_t)&v79, (uint64_t)&v78);
        v26[2] = 0;
        unint64_t v76 = v67;
        uint64_t v77 = v51;
        closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v80, (uint64_t)&v79, (uint64_t)&v78);
        v26[1] = 0;
        unint64_t v76 = v68;
        uint64_t v77 = v53;
        closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v80, (uint64_t)&v79, (uint64_t)&v78);
        _os_log_impl(&dword_250C36000, v56, (os_log_type_t)v57, "HeadphoneManager: %s: %ld failed to acitivate HMServiceClient", v29, v40);
        destroyStorage<A>(_:count:)(v30, 0, v28);
        destroyStorage<A>(_:count:)(v31, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v29, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v75, v71);
  }
  return result;
}

void closure #5 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  unint64_t v61 = a1;
  uint64_t v49 = partial apply for implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery();
  uint64_t v50 = _s2os18OSLogInterpolationV06appendC0_7privacy10attributesys5Error_pyXA_AA0B7PrivacyVSStFSo8NSObjectCycfu_TA_0;
  uint64_t v51 = _s2os18OSLogInterpolationV06appendC0_7privacy10attributesySo8NSObjectCyXA_AA0B7PrivacyVSStFAHSgycfu_TA_0;
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v70 = 0;
  uint64_t v69 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = v56 - 8;
  unint64_t v59 = (*(void *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v60 = (char *)&v20 - v59;
  id v70 = (id)MEMORY[0x270FA5388](v61, v1);
  id v2 = v70;
  if (v61)
  {
    uint64_t v48 = v61;
    unint64_t v3 = v60;
    id v29 = v61;
    uint64_t v69 = v61;
    uint64_t v4 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v3, v4, v56);
    id v5 = v29;
    uint64_t v37 = 7;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v29;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = Logger.logObject.getter();
    int v47 = static os_log_type_t.error.getter();
    unsigned int v32 = &v67;
    uint64_t v67 = 12;
    unint64_t v30 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v33 = v68;
    uint64_t v34 = 17;
    uint64_t v40 = swift_allocObject();
    *(unsigned char *)(v40 + 16) = 64;
    uint64_t v41 = swift_allocObject();
    *(unsigned char *)(v41 + 16) = 8;
    uint64_t v36 = 32;
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = v35;
    uint64_t v38 = v6;
    *(void *)(v6 + 16) = v49;
    *(void *)(v6 + 24) = v7;
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = v38;
    uint64_t v39 = v8;
    *(void *)(v8 + 16) = v50;
    *(void *)(v8 + 24) = v9;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v39;
    uint64_t v43 = v10;
    *(void *)(v10 + 16) = v51;
    *(void *)(v10 + 24) = v11;
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v42 = _allocateUninitializedArray<A>(_:)();
    uint64_t v44 = v12;
    swift_retain();
    uint64_t v13 = v40;
    uint64_t v14 = v44;
    *uint64_t v44 = v52;
    v14[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
    swift_retain();
    uint64_t v15 = v41;
    id v16 = v44;
    v44[2] = v53;
    v16[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
    swift_retain();
    id v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
    uint64_t v18 = v44;
    v44[4] = v54;
    v18[5] = v17;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      uint64_t v19 = v55;
      int v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v23 = createStorage<A>(capacity:type:)(1);
      uint64_t v24 = createStorage<A>(capacity:type:)(0);
      uint64_t v25 = &v66;
      uint64_t v66 = v22;
      uint64_t v26 = &v65;
      uint64_t v65 = v23;
      uint64_t v27 = &v64;
      uint64_t v64 = v24;
      serialize(_:at:)(2, &v66);
      serialize(_:at:)(1, v25);
      uint64_t v62 = v52;
      uint64_t v63 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27);
      uint64_t v28 = v19;
      if (v19)
      {
        __break(1u);
      }
      else
      {
        uint64_t v62 = v53;
        uint64_t v63 = v41;
        closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v66, (uint64_t)&v65, (uint64_t)&v64);
        uint64_t v20 = 0;
        uint64_t v62 = v54;
        uint64_t v63 = v43;
        closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v66, (uint64_t)&v65, (uint64_t)&v64);
        _os_log_impl(&dword_250C36000, v46, (os_log_type_t)v47, "HeadphoneManager: AAF Discovery Activation Failed: %@", v22, v33);
        destroyStorage<A>(_:count:)(v23, 1, v21);
        destroyStorage<A>(_:count:)(v24, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v22, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((*(_DWORD *)(*(void *)(v2 - 8) + 80) & 0x20000) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  id v17 = (void *)result;
  uint64_t v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3) {
          __break(1u);
        }
        int64_t v16 = a3 - (void)a2;
      }
      else
      {
        int64_t v16 = 0;
      }
      int64_t v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          *id v17 = a2;
          uint64_t v11 = 0;
          uint64_t v12 = v15;
          char v13 = 1;
          char v14 = 0;
LABEL_26:
          v21[2] = v11;
          v21[3] = v12;
          char v22 = v13 & 1;
          char v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    uint64_t v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    *id v17 = v7;
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    char v13 = 0;
    char v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  uint64_t result = _StringObject.sharedUTF8.getter();
  if (!result) {
    goto LABEL_29;
  }
  uint64_t v10 = result;
LABEL_21:
  *id v17 = v10;
  if (a6 < 0)
  {
    uint64_t v9 = 0;
LABEL_25:
    uint64_t v11 = (void *)v9;
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
    char v13 = 0;
    char v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    uint64_t v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for HKAudiogramSample()
{
  uint64_t v2 = lazy cache variable for type metadata for HKAudiogramSample;
  if (!lazy cache variable for type metadata for HKAudiogramSample)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKAudiogramSample);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [HKAudiogramSample], @guaranteed [HKAudiogramSample], @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  type metadata accessor for HKAudiogramSample();
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = a3;
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a4;
  if (a4) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = 0;
  }
  v9(v11, v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  uint64_t v15 = v3;
  __int16 v16 = v4;
  uint64_t v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    uint64_t v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  }
  else
  {
    v13[3] = MEMORY[0x263F8DBE0];
    v13[0] = a1;
    v13[1] = a2;
    uint64_t v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  return v11;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)partial apply(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

void *closure #1 in OSLogArguments.append(_:)partial apply(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void *closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  *a1 = v8 + 8;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Headphone_Manager?(id *a1)
{
}

uint64_t partial apply for closure #3 in Headphone_Manager.configHearingModeClient()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #3 in Headphone_Manager.configHearingModeClient()(a1, a2, a3, v3);
}

uint64_t partial apply for implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient()(*(void *)(v0 + 16));
}

uint64_t implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  unint64_t v1 = type metadata accessor for HKAudiogramSample();
  return MEMORY[0x253386090](a1, v1);
}

uint64_t partial apply for implicit closure #3 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return implicit closure #3 in closure #3 in Headphone_Manager.configHearingModeClient()(*(void *)(v0 + 16));
}

uint64_t implicit closure #3 in closure #3 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  unint64_t v1 = type metadata accessor for HKAudiogramSample();
  return MEMORY[0x253386090](a1, v1);
}

uint64_t implicit closure #2 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return 30;
}

uint64_t implicit closure #1 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

Swift::UInt8 *HPS_CBDevice_Addition_Key.unsafeMutableAddressor()
{
  return &HPS_CBDevice_Addition_Key;
}

uint64_t CBDevice.replayDevice.getter()
{
  uint64_t v10 = 0;
  __int16 v16 = v0;
  id v1 = v0;
  key = HPS_CBDevice_Addition_Key.unsafeMutableAddressor();
  swift_beginAccess();
  id v7 = objc_getAssociatedObject(v0, key);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    outlined init with take of Any((uint64_t)v8, (uint64_t)&v11);
    swift_unknownObjectRelease();
  }
  else
  {
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  outlined init with take of Any?(&v11, &v14);
  if (v15)
  {
    type metadata accessor for ReplayData();
    if (swift_dynamicCast()) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v4 = v5;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v14);
    uint64_t v4 = 0;
  }
  if (v4)
  {
    uint64_t v10 = v4;
    return v4;
  }
  else
  {
    type metadata accessor for ReplayData();
    return ReplayData.__allocating_init()();
  }
}

__n128 outlined init with take of Any(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t CBDevice.replayDevice.setter(void *a1)
{
  id v2 = v1;
  key = HPS_CBDevice_Addition_Key.unsafeMutableAddressor();
  swift_retain();
  swift_beginAccess();
  objc_setAssociatedObject(v1, key, a1, (void *)1);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t (*CBDevice.replayDevice.modify(uint64_t *a1))(void **a1, char a2)
{
  a1[1] = v1;
  *a1 = CBDevice.replayDevice.getter();
  return CBDevice.replayDevice.modify;
}

uint64_t CBDevice.replayDevice.modify(void **a1, char a2)
{
  if ((a2 & 1) == 0) {
    return CBDevice.replayDevice.setter(*a1);
  }
  uint64_t v3 = *a1;
  swift_retain();
  CBDevice.replayDevice.setter(v3);
  return swift_release();
}

uint64_t Data.init(hexString:)()
{
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  swift_bridgeObjectRetain();
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("0x", 2uLL, 1);
  String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  Collection.dropFirst(_:)();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  Sequence.compactMap<A>(_:)();
  outlined destroy of Substring();
  String.count.getter();
  Data.init(capacity:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (data: Data, byte: UInt8?));
  lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  Sequence.reduce<A>(into:_:)();
  outlined destroy of [UInt8]();
  outlined copy of Data._Representation(v2, v3);
  uint64_t v4 = v2;
  unint64_t v5 = v3;
  swift_bridgeObjectRelease();
  outlined destroy of Data((uint64_t)&v4);
  return v2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

uint64_t closure #1 in Data.init(hexString:)@<X0>(uint64_t a1@<X8>)
{
  Character.hexDigitValue.getter();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  uint64_t result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #1 in closure #1 in Data.init(hexString:), 0, v1, MEMORY[0x263F8E628], MEMORY[0x263F8E778], v5, a1);
  if (v4) {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Substring()
{
}

uint64_t closure #1 in closure #1 in Data.init(hexString:)()
{
  return UnsignedInteger<>.init<A>(_:)();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v18 = a7;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v25 = a6;
  uint64_t v39 = a4;
  uint64_t v38 = a5;
  uint64_t v26 = *(void *)(a4 - 8);
  uint64_t v27 = a4 - 8;
  unint64_t v28 = (*(void *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v7, a2);
  id v29 = (char *)v17 - v28;
  uint64_t v35 = *(void *)(v9 + 16);
  uint64_t v37 = v35;
  uint64_t v33 = *(void *)(v35 - 8);
  uint64_t v34 = v35 - 8;
  unint64_t v30 = (*(void *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8, (char *)v17 - v28);
  unint64_t v31 = (char *)v17 - v30;
  unint64_t v32 = (*(void *)(*(void *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (const void *)MEMORY[0x270FA5388](v10, (char *)v17 - v30);
  uint64_t v36 = (char *)v17 - v32;
  _sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(v12, (char *)v17 - v32, v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v36, 1, v35) == 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v18, 1);
    v17[1] = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v31, v36, v35);
    uint64_t v16 = v24;
    v19(v31, v29);
    v17[0] = v16;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v35);
    if (v16)
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v29, v22);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 56))(v18, 0, 1);
      return v17[0];
    }
  }
  return result;
}

uint64_t closure #2 in Data.init(hexString:)(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  int v3 = *a2;
  if (*(unsigned char *)(result + 17))
  {
    *(unsigned char *)(result + 16) = 16 * v3;
    *(unsigned char *)(result + 17) = 0;
  }
  else if (v3 + *(unsigned __int8 *)(result + 16) == (v3 + *(unsigned char *)(result + 16)))
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t result = RangeReplaceableCollection.append(_:)();
    *(unsigned char *)(v2 + 16) = 0;
    *(unsigned char *)(v2 + 17) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [UInt8]()
{
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_retain();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Data(uint64_t a1)
{
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_release();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t variable initialization expression of CodableIgnored.wrappedValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1);
}

void *CodableIgnored.wrappedValue.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v2 = type metadata accessor for Optional();
  return outlined init with copy of A?(v6, a2, v4, v2);
}

void *outlined init with copy of A?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t CodableIgnored.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v16 = v11;
  uint64_t v12 = type metadata accessor for Optional();
  unint64_t v8 = (*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v7 - v8;
  uint64_t v15 = (const void *)MEMORY[0x270FA5388](v13, v3);
  uint64_t v14 = v2;
  outlined init with copy of A?(v15, (char *)&v7 - v8, v4, v5);
  outlined assign with take of A?(v10, v9, v11, v12);
  return outlined destroy of A?(v13, v11);
}

void *outlined assign with take of A?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(unsigned int (**)(void))(v9 + 48);
  if (v10())
  {
    if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
    {
      memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a2, a1, a3);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
    }
  }
  else if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a2, a3);
    memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a2, a1, a3);
  }
  return a2;
}

uint64_t outlined destroy of A?(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  }
  return a1;
}

void (*CodableIgnored.wrappedValue.modify())()
{
  return CodableIgnored.wrappedValue.modify;
}

uint64_t CodableIgnored.init(wrappedValue:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = a3;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = a2;
  v7[1] = 0;
  uint64_t v14 = type metadata accessor for Optional();
  unint64_t v8 = (*(void *)(*(void *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v13);
  uint64_t v10 = (char *)v7 - v8;
  uint64_t v15 = type metadata accessor for CodableIgnored();
  unint64_t v9 = (*(void *)(*(void *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v15, v3);
  uint64_t v16 = (char *)v7 - v9;
  uint64_t v18 = (char *)v7 - v9;
  uint64_t v17 = v4;
  (*(void (**)(void))(*(void *)(v5 - 8) + 56))();
  outlined init with copy of A?(v12, v10, v13, v14);
  outlined assign with take of A?(v10, v16, v13, v14);
  outlined init with copy of CodableIgnored<A>(v16, v11, v13, v14);
  outlined destroy of A?((uint64_t)v12, v13);
  return outlined destroy of CodableIgnored<A>((uint64_t)v16, v13);
}

uint64_t type metadata accessor for CodableIgnored()
{
  return __swift_instantiateGenericMetadata();
}

void *outlined init with copy of CodableIgnored<A>(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t outlined destroy of CodableIgnored<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  }
  return a1;
}

uint64_t CodableIgnored.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = a3;
  uint64_t v16 = a1;
  uint64_t v18 = a2;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = a2;
  v8[1] = 0;
  uint64_t v19 = type metadata accessor for Optional();
  unint64_t v9 = (*(void *)(*(void *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v18);
  uint64_t v14 = (char *)v8 - v9;
  uint64_t v20 = type metadata accessor for CodableIgnored();
  unint64_t v10 = (*(void *)(*(void *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v20, v3);
  uint64_t v17 = (char *)v8 - v10;
  uint64_t v22 = (char *)v8 - v10;
  uint64_t v21 = v4;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v13 = *(void (**)(void))(v6 + 56);
  uint64_t v12 = v6 + 56;
  unsigned int v11 = 1;
  v13();
  ((void (*)(char *, void, void, uint64_t))v13)(v14, v11, v11, v18);
  outlined assign with take of A?(v14, v17, v18, v19);
  outlined init with copy of CodableIgnored<A>(v17, v15, v18, v19);
  __swift_destroy_boxed_opaque_existential_1(v16);
  return outlined destroy of CodableIgnored<A>((uint64_t)v17, v18);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableIgnored<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return CodableIgnored.init(from:)(a1, *(void *)(a2 + 16), a3);
}

void protocol witness for Encodable.encode(to:) in conformance CodableIgnored<A>()
{
}

uint64_t DefaultsObserver.publisher.setter(uint64_t a1)
{
  swift_retain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher);
  swift_beginAccess();
  void *v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*DefaultsObserver.publisher.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = DefaultsObserver.publisher.getter();
  return DefaultsObserver.publisher.modify;
}

uint64_t DefaultsObserver.publisher.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return DefaultsObserver.publisher.setter(*a1);
  }
  uint64_t v3 = *a1;
  swift_retain();
  DefaultsObserver.publisher.setter(v3);
  uint64_t result = (uint64_t)a1;
  outlined destroy of AnyPublisher<NSUserDefaults, Never>();
  return result;
}

uint64_t variable initialization expression of DefaultsObserver.$__lazy_storage_$_publisher()
{
  return 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AnyPublisher<NSUserDefaults, Never>?()
{
}

uint64_t DefaultsObserver.observeValue(forKeyPath:of:change:context:)()
{
  swift_retain();
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults);
  id v0 = v3;
  CurrentValueSubject.send(_:)();

  return swift_release();
}

uint64_t type metadata accessor for NSKeyValueChangeKey()
{
  uint64_t v4 = lazy cache variable for type metadata for NSKeyValueChangeKey;
  if (!lazy cache variable for type metadata for NSKeyValueChangeKey)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSKeyValueChangeKey);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return WitnessTable;
  }
  return v2;
}

id DefaultsObserver.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DefaultsObserver.init()()
{
  if (!"HeadphoneManager.DefaultsObserver")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"HeadphoneManager.DefaultsObserver", 33, (unint64_t)"init()", 6, 2, (unint64_t)"HeadphoneManager/ReplayExtensionsAndHelpers.swift", 49, 2, v1, 0x44uLL, 7uLL);
  __break(1u);
  return result;
}

id DefaultsObserver.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultsObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *AudioAccessoryContainerDevice._cbDevice.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice);
  id v1 = v3;
  return v3;
}

id AudioAccessoryContainerDevice.__allocating_init(withCBDevice:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return AudioAccessoryContainerDevice.init(withCBDevice:)(a1);
}

id AudioAccessoryContainerDevice.init(withCBDevice:)(void *a1)
{
  unint64_t v10 = a1;
  id v2 = v1;
  id v11 = v1;
  id v3 = a1;
  *(void *)&v6[OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice] = a1;

  v9.receiver = v11;
  v9.super_class = (Class)type metadata accessor for AudioAccessoryContainerDevice();
  id v8 = objc_msgSendSuper2(&v9, sel_init);
  id v4 = v8;
  id v11 = v8;

  return v8;
}

id AudioAccessoryContainerDevice.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id AudioAccessoryContainerDevice.init(coder:)(void *a1)
{
  objc_super v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for AudioAccessoryContainerDevice();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

void *AudioAccessoryContainerDevice.coreBluetoothDevice.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice);
  id v1 = v3;
  return v3;
}

id AudioAccessoryContainerDevice.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t AudioAccessoryContainerDevice.init()()
{
  if (!"HeadphoneManager.AudioAccessoryContainerDevice")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"HeadphoneManager.AudioAccessoryContainerDevice", 46, (unint64_t)"init()", 6, 2, (unint64_t)"HeadphoneManager/ReplayExtensionsAndHelpers.swift", 49, 2, v1, 0x58uLL, 7uLL);
  __break(1u);
  return result;
}

id AudioAccessoryContainerDevice.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioAccessoryContainerDevice();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id ReplayAudioAccessoryDevice.__allocating_init(withCBDevice:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return ReplayAudioAccessoryDevice.init(withCBDevice:)(a1);
}

id ReplayAudioAccessoryDevice.init(withCBDevice:)(void *a1)
{
  id v1 = a1;
  id v5 = AudioAccessoryContainerDevice.init(withCBDevice:)(a1);
  id v2 = v5;

  return v5;
}

id ReplayAudioAccessoryDevice.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id ReplayAudioAccessoryDevice.init(coder:)(void *a1)
{
  id v8 = 0;
  id v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for ReplayAudioAccessoryDevice();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id ReplayAudioAccessoryDevice.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReplayAudioAccessoryDevice();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(void *a1, uint64_t a2)
{
  type metadata accessor for HeadphoneDevice();
  id v2 = v5;
  id v3 = a1;
  swift_unknownObjectRetain();
  return HeadphoneDevice.__allocating_init(_aaDevice:cbDevice:delegate:)(v5, a1, a2);
}

char *@objc AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  swift_getObjectType();
  id v5 = a3;
  swift_unknownObjectRetain();
  id v6 = a1;
  id v11 = AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(a3, a4);

  swift_unknownObjectRelease();
  return v11;
}

id protocol witness for HeadphoneDeviceConstructable.headphoneDevice(cbDevice:withDelegate:) in conformance AudioAccessoryDevice(void *a1, uint64_t a2)
{
  return dynamic AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(a1, a2);
}

id dynamic AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(void *a1, uint64_t a2)
{
  id v2 = a1;
  swift_unknownObjectRetain();
  id v3 = v5;
  id v8 = objc_msgSend(v5, sel_headphoneDeviceWithCbDevice_withDelegate_, a1, a2);

  swift_unknownObjectRelease();
  return v8;
}

id ReplayAudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)()
{
  type metadata accessor for HeadphoneReplayDevice();
  id v1 = v0;
  uint64_t v19 = *(void **)&v0[OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice];
  id v2 = v19;

  if (v19)
  {
    uint64_t v17 = v19;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  swift_unknownObjectRetain();
  id v20 = HeadphoneDevice.__allocating_init(cbDevice:delegate:)(v17);
  id v3 = v20;
  swift_bridgeObjectRetain();

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v11 = MEMORY[0x263F8D310];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v16 = v4;
  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();
  uint64_t v12 = (id *)HeadphoneDataProvider.shared.unsafeMutableAddressor();
  swift_beginAccess();
  id v5 = *v12;
  id v13 = *v12;
  id v6 = *v12;
  uint64_t v7 = swift_endAccess();
  id v15 = (id)(*(uint64_t (**)(uint64_t))((*v5 & *MEMORY[0x263F8EED0]) + 0x140))(v7);

  id v8 = v20;
  swift_bridgeObjectRetain();
  MEMORY[0x253385EB0](v14, v16);
  objc_msgSend(v15, sel_setObject_forKey_, v20, v11, v10, v10, v10);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return v20;
}

uint64_t default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return 0;
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSKeyValueObservingOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSKeyValueChangeKey()
{
  return _SwiftNewtypeWrapper<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSKeyValueChangeKey()
{
  return _SwiftNewtypeWrapper<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NSKeyValueChangeKey()
{
  return _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSKeyValueChangeKey()
{
  return _SwiftNewtypeWrapper<>._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSKeyValueChangeKey()
{
  return static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSKeyValueChangeKey()
{
  return static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)() & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSKeyValueChangeKey()
{
  return static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSKeyValueObservingOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSKeyValueChangeKey()
{
  return == infix<A>(_:_:)() & 1;
}

__C::NSKeyValueObservingOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSKeyValueObservingOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  result.rawValue = NSKeyValueObservingOptions.init(rawValue:)(*a1).rawValue;
  *(__C::NSKeyValueObservingOptions *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSKeyValueObservingOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSKeyValueObservingOptions.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

__C::NSKeyValueChangeKey protocol witness for RawRepresentable.init(rawValue:) in conformance NSKeyValueChangeKey@<X0>(Swift::String *a1@<X0>, __C::NSKeyValueChangeKey *a2@<X8>)
{
  result._rawValue = NSKeyValueChangeKey.init(rawValue:)(*a1)._rawValue;
  a2->_rawValue = result._rawValue;
  return result;
}

__C::NSKeyValueChangeKey __swiftcall NSKeyValueChangeKey.init(rawValue:)(Swift::String rawValue)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)MEMORY[0x253385EB0](rawValue._countAndFlagsBits, rawValue._object);
  id v1 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return (__C::NSKeyValueChangeKey)v4;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSKeyValueChangeKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSKeyValueChangeKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t NSKeyValueChangeKey.rawValue.getter(void *a1)
{
  id v1 = a1;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSKeyValueChangeKey()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF) {
      goto LABEL_12;
    }
    unsigned int v5 = (a3 + 1);
  }
  else
  {
    int v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      unsigned int v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      int v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL) {
        unsigned int v5 = (v6 | (a3 >> 12)) + 8487393;
      }
      else {
        unsigned int v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
      }
    }
  }
  uint64_t v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  uint64_t v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0) {
    return a1(&v8, v4);
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  uint64_t v21 = a9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  unint64_t v26 = a6;
  uint64_t v27 = a7;
  int v28 = a8;
  unint64_t v29 = a10;
  unint64_t v30 = a11;
  unint64_t v31 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
  unint64_t v32 = partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:);
  uint64_t v33 = "Fatal error";
  uint64_t v34 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v35 = "Swift/StaticString.swift";
  uint64_t v36 = "Not enough bits to represent the passed value";
  uint64_t v37 = "Swift/Integers.swift";
  uint64_t v38 = "UnsafeBufferPointer with negative count";
  uint64_t v39 = "Swift/UnsafeBufferPointer.swift";
  uint64_t v40 = 0;
  unint64_t v42 = a6;
  uint64_t v43 = a7;
  char v44 = a8;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  unint64_t v47 = a10;
  unint64_t v48 = a11;
  if (a5)
  {
    if (v24 <= 0xFFFFFFFF)
    {
      unsigned int v20 = v24;
      if ((v24 < 0xD800 || v20 > 0xDFFF) && v20 <= 0x10FFFF)
      {
        uint64_t v19 = v18;
        uint64_t v11 = (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x270FA5388](v32, v18);
        uint64_t v16 = v31;
        uint64_t v17 = &v41;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v11, (uint64_t)v14, v12);
        return (uint64_t)v19;
      }
      v14[0] = 2;
      uint64_t v15 = 148;
      LODWORD(v16) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v14[0] = 2;
    uint64_t v15 = 3455;
    LODWORD(v16) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24) {
    uint64_t v49 = v24;
  }
  else {
    uint64_t v49 = 0;
  }
  v18[0] = v49;
  if (!v49)
  {
    v14[0] = 2;
    uint64_t v15 = 136;
    LODWORD(v16) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v25 >= 0) {
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v18[0], v25, v26, v27, v28, v22, v23, v29, v21, v30);
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AudioAccessoryContainerDevice()
{
  return self;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CBDevice?(id *a1)
{
}

uint64_t type metadata accessor for ReplayAudioAccessoryDevice()
{
  return self;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String()
{
}

uint64_t type metadata instantiation function for CodableIgnored()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for CodableIgnored()
{
  uint64_t v2 = type metadata accessor for Optional();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for CodableIgnored(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(type metadata accessor for Optional() - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  if ((v11 & 0x20000) != 0)
  {
    uint64_t v5 = *a2;
    swift_retain();
    *a1 = v5;
    return *a1 + ((v11 + 16) & ~(unint64_t)v11);
  }
  else
  {
    uint64_t v4 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v4 + 48))(a2, 1))
    {
      memcpy(a1, a2, *(void *)(v10 + 64));
    }
    else
    {
      (*(void (**)(void *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v9);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for CodableIgnored(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(void))(v8 + 48))())
  {
    uint64_t v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (((unsigned int (*)(void *, uint64_t))v10)(a1, 1))
  {
    if (v10(a2, 1, v8))
    {
      uint64_t v4 = type metadata accessor for Optional();
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  else if (v10(a2, 1, v8))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    uint64_t v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v8);
  }
  return a1;
}

void *initializeWithTake for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(void))(v8 + 48))())
  {
    uint64_t v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (((unsigned int (*)(void *, uint64_t))v10)(a1, 1))
  {
    if (v10(a2, 1, v8))
    {
      uint64_t v4 = type metadata accessor for Optional();
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  else if (v10(a2, 1, v8))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    uint64_t v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v8);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableIgnored()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_250C49444(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for CodableIgnored()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_250C494D4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 - 8) + 56))(a1, a2);
}

unint64_t base witness table accessor for RawRepresentable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
}

unint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
}

unint64_t base witness table accessor for Equatable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  uint64_t v21 = a9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  unint64_t v28 = a8;
  unint64_t v29 = a10;
  unint64_t v30 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
  unint64_t v31 = closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply;
  unint64_t v32 = "Fatal error";
  uint64_t v33 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v34 = "Swift/StaticString.swift";
  uint64_t v35 = "Not enough bits to represent the passed value";
  uint64_t v36 = "Swift/Integers.swift";
  uint64_t v37 = "UnsafeBufferPointer with negative count";
  uint64_t v38 = "Swift/UnsafeBufferPointer.swift";
  uint64_t v39 = 0;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  unint64_t v45 = a8;
  unint64_t v46 = a10;
  if (a5)
  {
    if (v24 <= 0xFFFFFFFF)
    {
      unsigned int v20 = v24;
      if ((v24 < 0xD800 || v20 > 0xDFFF) && v20 <= 0x10FFFF)
      {
        uint64_t v19 = &v17;
        uint64_t v10 = (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x270FA5388](v31, &v17);
        uint64_t v15 = v30;
        uint64_t v16 = &v40;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v10, (uint64_t)v13, v11);
        return (uint64_t)v19;
      }
      v13[0] = 2;
      uint64_t v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    uint64_t v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24) {
    uint64_t v47 = v24;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v18 = v47;
  if (!v47)
  {
    v13[0] = 2;
    uint64_t v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v25 >= 0) {
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v18, v25, v26, v27, v22, v23, v28, v29);
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a3, *(void *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF) {
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                }
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return WitnessTable;
  }
  return v2;
}

void *_sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t variable initialization expression of AADeviceModel.acceptReplyPlayPauseConfig()
{
  return 0;
}

uint64_t AADeviceModel.acceptReplyPlayPauseConfig.getter()
{
  return *v0;
}

uint64_t AADeviceModel.acceptReplyPlayPauseConfig.setter(uint64_t result)
{
  *id v1 = result;
  return result;
}

void (*AADeviceModel.acceptReplyPlayPauseConfig.modify())()
{
  return AADeviceModel.acceptReplyPlayPauseConfig.modify;
}

uint64_t variable initialization expression of AADeviceModel.autoANCCapability()
{
  return 0;
}

uint64_t AADeviceModel.autoANCCapability.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t AADeviceModel.autoANCCapability.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

void (*AADeviceModel.autoANCCapability.modify())()
{
  return AADeviceModel.autoANCCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.autoANCStrength()
{
  return 0;
}

uint64_t AADeviceModel.autoANCStrength.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t AADeviceModel.autoANCStrength.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

void (*AADeviceModel.autoANCStrength.modify())()
{
  return AADeviceModel.autoANCStrength.modify;
}

uint64_t variable initialization expression of AADeviceModel.bluetoothAddressData()
{
  return 0;
}

uint64_t AADeviceModel.bluetoothAddressData.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  outlined copy of Data?(v2, *(void *)(v0 + 24));
  return v2;
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000) {
    return outlined copy of Data._Representation(result, a2);
  }
  return result;
}

uint64_t AADeviceModel.bluetoothAddressData.setter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data?(a1, a2);
  uint64_t v3 = *(void *)(v2 + 16);
  unint64_t v4 = *(void *)(v2 + 24);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  outlined consume of Data?(v3, v4);
  return outlined consume of Data?(a1, a2);
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000) {
    return outlined consume of Data._Representation(result, a2);
  }
  return result;
}

void (*AADeviceModel.bluetoothAddressData.modify())()
{
  return AADeviceModel.bluetoothAddressData.modify;
}

uint64_t variable initialization expression of AADeviceModel.bobbleCapability()
{
  return 0;
}

uint64_t AADeviceModel.bobbleCapability.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AADeviceModel.bobbleCapability.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

void (*AADeviceModel.bobbleCapability.modify())()
{
  return AADeviceModel.bobbleCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.bobbleConfig()
{
  return 0;
}

uint64_t AADeviceModel.bobbleConfig.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t AADeviceModel.bobbleConfig.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

void (*AADeviceModel.bobbleConfig.modify())()
{
  return AADeviceModel.bobbleConfig.modify;
}

uint64_t variable initialization expression of AADeviceModel.caseSoundCapability()
{
  return 0;
}

uint64_t AADeviceModel.caseSoundCapability.getter()
{
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t AADeviceModel.caseSoundCapability.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 34) = result;
  return result;
}

void (*AADeviceModel.caseSoundCapability.modify())()
{
  return AADeviceModel.caseSoundCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.declineDismissSkipConfig()
{
  return 0;
}

uint64_t AADeviceModel.declineDismissSkipConfig.getter()
{
  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t AADeviceModel.declineDismissSkipConfig.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 35) = result;
  return result;
}

void (*AADeviceModel.declineDismissSkipConfig.modify())()
{
  return AADeviceModel.declineDismissSkipConfig.modify;
}

uint64_t variable initialization expression of AADeviceModel.earTipFitTestCapability()
{
  return 0;
}

uint64_t AADeviceModel.earTipFitTestCapability.getter()
{
  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t AADeviceModel.earTipFitTestCapability.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 36) = result;
  return result;
}

void (*AADeviceModel.earTipFitTestCapability.modify())()
{
  return AADeviceModel.earTipFitTestCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.frequencyBand()
{
  return 0;
}

uint64_t AADeviceModel.frequencyBand.getter()
{
  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t AADeviceModel.frequencyBand.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 37) = result;
  return result;
}

void (*AADeviceModel.frequencyBand.modify())()
{
  return AADeviceModel.frequencyBand.modify;
}

uint64_t variable initialization expression of AADeviceModel.headGestureToggle()
{
  return 0;
}

uint64_t AADeviceModel.headGestureToggle.getter()
{
  return *(unsigned __int8 *)(v0 + 38);
}

uint64_t AADeviceModel.headGestureToggle.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 38) = result;
  return result;
}

void (*AADeviceModel.headGestureToggle.modify())()
{
  return AADeviceModel.headGestureToggle.modify;
}

uint64_t variable initialization expression of AADeviceModel.headGestureProxCardShown()
{
  return 0;
}

uint64_t AADeviceModel.headGestureProxCardShown.getter()
{
  return *(unsigned __int8 *)(v0 + 39);
}

uint64_t AADeviceModel.headGestureProxCardShown.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 39) = result;
  return result;
}

void (*AADeviceModel.headGestureProxCardShown.modify())()
{
  return AADeviceModel.headGestureProxCardShown.modify;
}

uint64_t variable initialization expression of AADeviceModel.hearingAidCapability()
{
  return 0;
}

uint64_t AADeviceModel.hearingAidCapability.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t AADeviceModel.hearingAidCapability.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

void (*AADeviceModel.hearingAidCapability.modify())()
{
  return AADeviceModel.hearingAidCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.hearingAidEnrolled()
{
  return 0;
}

uint64_t AADeviceModel.hearingAidEnrolled.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t AADeviceModel.hearingAidEnrolled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 41) = result;
  return result;
}

void (*AADeviceModel.hearingAidEnrolled.modify())()
{
  return AADeviceModel.hearingAidEnrolled.modify;
}

uint64_t variable initialization expression of AADeviceModel.hearingAidConfig()
{
  return 0;
}

uint64_t AADeviceModel.hearingAidConfig.getter()
{
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t AADeviceModel.hearingAidConfig.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 42) = result;
  return result;
}

void (*AADeviceModel.hearingAidConfig.modify())()
{
  return AADeviceModel.hearingAidConfig.modify;
}

uint64_t variable initialization expression of AADeviceModel.hearingAidGainSwipeEnabled()
{
  return 0;
}

uint64_t AADeviceModel.hearingAidGainSwipeEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t AADeviceModel.hearingAidGainSwipeEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 43) = result;
  return result;
}

void (*AADeviceModel.hearingAidGainSwipeEnabled.modify())()
{
  return AADeviceModel.hearingAidGainSwipeEnabled.modify;
}

uint64_t variable initialization expression of AADeviceModel.hearingTestCapability()
{
  return 0;
}

uint64_t AADeviceModel.hearingTestCapability.getter()
{
  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t AADeviceModel.hearingTestCapability.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 44) = result;
  return result;
}

void (*AADeviceModel.hearingTestCapability.modify())()
{
  return AADeviceModel.hearingTestCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.hideOffListeningModeCapability()
{
  return 0;
}

uint64_t AADeviceModel.hideOffListeningModeCapability.getter()
{
  return *(unsigned __int8 *)(v0 + 45);
}

uint64_t AADeviceModel.hideOffListeningModeCapability.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 45) = result;
  return result;
}

void (*AADeviceModel.hideOffListeningModeCapability.modify())()
{
  return AADeviceModel.hideOffListeningModeCapability.modify;
}

NSDate variable initialization expression of AADeviceModel.audiogramEnrolledTimestamp()
{
  return NSDate.__allocating_init()();
}

unint64_t type metadata accessor for NSDate()
{
  uint64_t v2 = lazy cache variable for type metadata for NSDate;
  if (!lazy cache variable for type metadata for NSDate)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSDate);
    return ObjCClassMetadata;
  }
  return v2;
}

NSDate __swiftcall NSDate.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSDate)@nonobjc NSDate.init()();
}

void *AADeviceModel.audiogramEnrolledTimestamp.getter()
{
  uint64_t v3 = *(void **)(v0 + 48);
  id v1 = v3;
  return v3;
}

void AADeviceModel.audiogramEnrolledTimestamp.setter(void *a1)
{
  id v2 = a1;
  uint64_t v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = a1;
}

void (*AADeviceModel.audiogramEnrolledTimestamp.modify())()
{
  return AADeviceModel.audiogramEnrolledTimestamp.modify;
}

uint64_t variable initialization expression of AADeviceModel.heartRateMonitorEnabled()
{
  return 0;
}

uint64_t AADeviceModel.heartRateMonitorEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t AADeviceModel.heartRateMonitorEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

void (*AADeviceModel.heartRateMonitorEnabled.modify())()
{
  return AADeviceModel.heartRateMonitorEnabled.modify;
}

uint64_t variable initialization expression of AADeviceModel.hideEarDetectionCapability()
{
  return 0;
}

uint64_t AADeviceModel.hideEarDetectionCapability.getter()
{
  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t AADeviceModel.hideEarDetectionCapability.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 57) = result;
  return result;
}

void (*AADeviceModel.hideEarDetectionCapability.modify())()
{
  return AADeviceModel.hideEarDetectionCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.identifier()
{
  return 0;
}

uint64_t AADeviceModel.identifier.getter()
{
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AADeviceModel.identifier.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*AADeviceModel.identifier.modify())()
{
  return AADeviceModel.identifier.modify;
}

uint64_t variable initialization expression of AADeviceModel.streamStateAoS()
{
  return 0;
}

uint64_t AADeviceModel.streamStateAoS.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t AADeviceModel.streamStateAoS.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

void (*AADeviceModel.streamStateAoS.modify())()
{
  return AADeviceModel.streamStateAoS.modify;
}

uint64_t variable initialization expression of AADeviceModel.smartRoutingMode()
{
  return 0;
}

uint64_t AADeviceModel.smartRoutingMode.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t AADeviceModel.smartRoutingMode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 81) = result;
  return result;
}

void (*AADeviceModel.smartRoutingMode.modify())()
{
  return AADeviceModel.smartRoutingMode.modify;
}

id static AADeviceModel.deviceConfigFor<A>(keyPath:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v143 = (uint64_t *)&v191;
  uint64_t v139 = a1;
  uint64_t v106 = a2;
  uint64_t v105 = a3;
  uint64_t v196 = 0;
  uint64_t v195 = 0;
  uint64_t v194 = 0;
  uint64_t v197 = a3;
  uint64_t v107 = 0;
  uint64_t v100 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v100 - 8);
  uint64_t v102 = v100 - 8;
  unint64_t v103 = (*(void *)(v101 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v100, v3);
  uint64_t v104 = &v60[-v103];
  uint64_t v111 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                               - 8)
                   + 64);
  unint64_t v108 = (v111 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v107, v106);
  uint64_t v109 = &v60[-v108];
  unint64_t v110 = (v111 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4, v5);
  id v112 = &v60[-v110];
  unint64_t v113 = (v111 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6, v7);
  uint64_t v114 = &v60[-v113];
  uint64_t v115 = *(void *)(v9 - 8);
  uint64_t v116 = v9 - 8;
  uint64_t v134 = *(void *)(v115 + 64);
  unint64_t v117 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v8, v10);
  uint64_t v118 = &v60[-v117];
  unint64_t v119 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  uint64_t v120 = &v60[-v119];
  unint64_t v121 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13, v14);
  uint64_t v122 = &v60[-v121];
  unint64_t v123 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15, v16);
  int v124 = &v60[-v123];
  unint64_t v125 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v17, v18);
  char v126 = &v60[-v125];
  unint64_t v127 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = MEMORY[0x270FA5388](v19, v20);
  uint64_t v128 = &v60[-v127];
  unint64_t v129 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = MEMORY[0x270FA5388](v21, v22);
  int v130 = &v60[-v129];
  unint64_t v131 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = MEMORY[0x270FA5388](v23, v24);
  uint64_t v132 = &v60[-v131];
  unint64_t v133 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = MEMORY[0x270FA5388](v25, v26);
  uint64_t v135 = &v60[-v133];
  unint64_t v136 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v27, v28);
  int v137 = &v60[-v136];
  *(void *)(v29 + 104) = v139;
  *(void *)(v29 + 96) = v30;
  type metadata accessor for AADeviceConfig();
  id v138 = AADeviceConfig.__allocating_init()();
  v143[11] = (uint64_t)v138;
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  unint64_t v32 = v143;
  uint64_t v33 = KeyPath;
  uint64_t v34 = v139;
  v141 = &v193;
  v143[10] = v33;
  uint64_t v140 = &v192;
  v32[9] = v34;
  uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<AADeviceModel>);
  int v144 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v144)
  {
    swift_release();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v137, v106, v105);
    type metadata accessor for AAHeadGestureConfig();
    if (swift_dynamicCast())
    {
      int v98 = v147;
      int v99 = 0;
    }
    else
    {
      int v98 = 0;
      int v99 = 1;
    }
    unsigned __int8 v145 = v98;
    char v146 = v99 & 1;
    id v35 = v138;
    if (v146) {
      unsigned __int8 v148 = objc_msgSend(v138, sel_acceptReplyPlayPauseConfig);
    }
    else {
      unsigned __int8 v148 = v145;
    }

    objc_msgSend(v138, sel_setAcceptReplyPlayPauseConfig_, v148);
  }
  else
  {
    swift_release();
    swift_retain();
    uint64_t v36 = swift_getKeyPath();
    uint64_t v37 = v139;
    uint64_t v38 = v143;
    v143[8] = v36;
    v38[7] = v37;
    int v97 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if (v97)
    {
      swift_release();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v135, v106, v105);
      type metadata accessor for AAAutoANCStrength();
      if (swift_dynamicCast())
      {
        unsigned int v95 = v151;
        int v96 = 0;
      }
      else
      {
        unsigned int v95 = 0;
        int v96 = 1;
      }
      unsigned int v149 = v95;
      char v150 = v96 & 1;
      id v39 = v138;
      if (v150) {
        unsigned int v152 = objc_msgSend(v138, sel_autoANCStrength);
      }
      else {
        unsigned int v152 = v149;
      }

      objc_msgSend(v138, sel_setAutoANCStrength_, v152);
    }
    else
    {
      swift_release();
      swift_retain();
      uint64_t v40 = swift_getKeyPath();
      uint64_t v41 = v139;
      uint64_t v42 = v143;
      v143[6] = v40;
      v42[5] = v41;
      int v94 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      if (v94)
      {
        swift_release();
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v132, v106, v105);
        type metadata accessor for AABobbleConfiguration();
        if (swift_dynamicCast())
        {
          int v92 = v155;
          int v93 = 0;
        }
        else
        {
          int v92 = 0;
          int v93 = 1;
        }
        unsigned __int8 v153 = v92;
        char v154 = v93 & 1;
        id v43 = v138;
        if (v154) {
          unsigned __int8 v156 = objc_msgSend(v138, sel_bobbleConfig);
        }
        else {
          unsigned __int8 v156 = v153;
        }

        objc_msgSend(v138, sel_setBobbleConfig_, v156);
      }
      else
      {
        swift_release();
        swift_retain();
        uint64_t v44 = swift_getKeyPath();
        uint64_t v45 = v139;
        unint64_t v46 = v143;
        v143[4] = v44;
        v46[3] = v45;
        int v91 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        if (v91)
        {
          swift_release();
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v130, v106, v105);
          type metadata accessor for AAHeadGestureConfig();
          if (swift_dynamicCast())
          {
            int v89 = v159;
            int v90 = 0;
          }
          else
          {
            int v89 = 0;
            int v90 = 1;
          }
          unsigned __int8 v157 = v89;
          char v158 = v90 & 1;
          id v47 = v138;
          if (v158) {
            unsigned __int8 v160 = objc_msgSend(v138, sel_declineDismissSkipConfig);
          }
          else {
            unsigned __int8 v160 = v157;
          }

          objc_msgSend(v138, sel_setDeclineDismissSkipConfig_, v160);
        }
        else
        {
          swift_release();
          swift_retain();
          uint64_t v48 = swift_getKeyPath();
          uint64_t v49 = v139;
          uint64_t v50 = v143;
          v143[2] = v48;
          v50[1] = v49;
          int v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          if (v88)
          {
            swift_release();
            (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v128, v106, v105);
            type metadata accessor for AAMultiState();
            if (swift_dynamicCast())
            {
              int v86 = v163;
              int v87 = 0;
            }
            else
            {
              int v86 = 0;
              int v87 = 1;
            }
            signed __int8 v161 = v86;
            char v162 = v87 & 1;
            id v51 = v138;
            if (v162) {
              signed __int8 v164 = objc_msgSend(v138, sel_headGestureToggle);
            }
            else {
              signed __int8 v164 = v161;
            }

            objc_msgSend(v138, sel_setHeadGestureToggle_, v164);
          }
          else
          {
            swift_release();
            swift_retain();
            uint64_t v52 = swift_getKeyPath();
            uint64_t v53 = v139;
            *char v143 = v52;
            uint64_t v190 = v53;
            int v85 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            if (v85)
            {
              swift_release();
              (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v126, v106, v105);
              type metadata accessor for AAMultiState();
              if (swift_dynamicCast())
              {
                int v83 = v167;
                int v84 = 0;
              }
              else
              {
                int v83 = 0;
                int v84 = 1;
              }
              signed __int8 v165 = v83;
              char v166 = v84 & 1;
              id v54 = v138;
              if (v166) {
                signed __int8 v168 = objc_msgSend(v138, sel_headGestureProxCardShown);
              }
              else {
                signed __int8 v168 = v165;
              }

              objc_msgSend(v138, sel_setHeadGestureProxCardShown_, v168);
            }
            else
            {
              swift_release();
              swift_retain();
              uint64_t v189 = swift_getKeyPath();
              uint64_t v188 = v139;
              int v82 = dispatch thunk of static Equatable.== infix(_:_:)();
              swift_release();
              if (v82)
              {
                swift_release();
                (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v124, v106, v105);
                type metadata accessor for AAMultiState();
                if (swift_dynamicCast())
                {
                  int v80 = v171;
                  int v81 = 0;
                }
                else
                {
                  int v80 = 0;
                  int v81 = 1;
                }
                signed __int8 v169 = v80;
                char v170 = v81 & 1;
                id v55 = v138;
                if (v170) {
                  signed __int8 v172 = objc_msgSend(v138, sel_hearingAidEnrolled);
                }
                else {
                  signed __int8 v172 = v169;
                }

                objc_msgSend(v138, sel_setHearingAidEnrolled_, v172);
              }
              else
              {
                swift_release();
                swift_retain();
                uint64_t v187 = swift_getKeyPath();
                uint64_t v186 = v139;
                int v79 = dispatch thunk of static Equatable.== infix(_:_:)();
                swift_release();
                if (v79)
                {
                  swift_release();
                  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v122, v106, v105);
                  type metadata accessor for AAMultiState();
                  if (swift_dynamicCast())
                  {
                    int v77 = v175;
                    int v78 = 0;
                  }
                  else
                  {
                    int v77 = 0;
                    int v78 = 1;
                  }
                  signed __int8 v173 = v77;
                  char v174 = v78 & 1;
                  id v56 = v138;
                  if (v174) {
                    signed __int8 v176 = objc_msgSend(v138, sel_enableHearingAidGainSwipe);
                  }
                  else {
                    signed __int8 v176 = v173;
                  }

                  objc_msgSend(v138, sel_setEnableHearingAidGainSwipe_, v176);
                }
                else
                {
                  swift_release();
                  swift_retain();
                  uint64_t v185 = swift_getKeyPath();
                  uint64_t v184 = v139;
                  int v76 = dispatch thunk of static Equatable.== infix(_:_:)();
                  swift_release();
                  if (v76)
                  {
                    swift_release();
                    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v120, v106, v105);
                    type metadata accessor for NSDate();
                    if (swift_dynamicCast()) {
                      unint64_t v75 = v177;
                    }
                    else {
                      unint64_t v75 = 0;
                    }
                    unint64_t v74 = v75;
                    if (v75)
                    {
                      uint64_t v73 = v74;
                      id v72 = v74;
                      static Date._unconditionallyBridgeFromObjectiveC(_:)();
                      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v101 + 32))(v112, v104, v100);
                      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v101 + 56))(v112, 0, 1, v100);
                    }
                    else
                    {
                      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v112, 1, 1, v100);
                    }
                    id v57 = v138;
                    id v70 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v101 + 48);
                    uint64_t v71 = v101 + 48;
                    if (v70(v112, 1, v100) == 1)
                    {
                      id v69 = objc_msgSend(v138, sel_audiogramEnrolledTimestamp);
                      if (v69)
                      {
                        id v68 = v69;
                        id v67 = v69;
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();
                        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v101 + 32))(v109, v104, v100);
                        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v101 + 56))(v109, 0, 1, v100);
                      }
                      else
                      {
                        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v109, 1, 1, v100);
                      }
                      outlined init with take of Date?(v109, v114);
                      outlined destroy of Date?((uint64_t)v112);
                    }
                    else
                    {
                      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v101 + 32))(v114, v112, v100);
                      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v101 + 56))(v114, 0, 1, v100);
                    }

                    if (v70(v114, 1, v100) == 1)
                    {
                      Class v66 = 0;
                    }
                    else
                    {
                      Class isa = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(unsigned char *, uint64_t))(v101 + 8))(v114, v100);
                      Class v66 = isa;
                    }
                    Class v64 = v66;
                    objc_msgSend(v138, sel_setAudiogramEnrolledTimestamp_);
                  }
                  else
                  {
                    swift_release();
                    swift_retain();
                    uint64_t v183 = swift_getKeyPath();
                    uint64_t v182 = v139;
                    int v63 = dispatch thunk of static Equatable.== infix(_:_:)();
                    swift_release();
                    if (v63)
                    {
                      swift_release();
                      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v118, v106, v105);
                      type metadata accessor for AAMultiState();
                      if (swift_dynamicCast())
                      {
                        int v61 = v180;
                        int v62 = 0;
                      }
                      else
                      {
                        int v61 = 0;
                        int v62 = 1;
                      }
                      signed __int8 v178 = v61;
                      char v179 = v62 & 1;
                      id v58 = v138;
                      if (v179) {
                        signed __int8 v181 = objc_msgSend(v138, sel_enableHeartRateMonitor);
                      }
                      else {
                        signed __int8 v181 = v178;
                      }

                      objc_msgSend(v138, sel_setEnableHeartRateMonitor_, v181);
                    }
                    else
                    {
                      swift_release();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v138;
}

unint64_t type metadata accessor for AADeviceConfig()
{
  uint64_t v2 = lazy cache variable for type metadata for AADeviceConfig;
  if (!lazy cache variable for type metadata for AADeviceConfig)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for AADeviceConfig);
    return ObjCClassMetadata;
  }
  return v2;
}

id AADeviceConfig.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc AADeviceConfig.init()();
}

uint64_t type metadata accessor for AAMultiState()
{
  uint64_t v4 = lazy cache variable for type metadata for AAMultiState;
  if (!lazy cache variable for type metadata for AAMultiState)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAMultiState);
      return v1;
    }
  }
  return v4;
}

void *outlined init with take of Date?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t type metadata accessor for AAHeadGestureConfig()
{
  uint64_t v4 = lazy cache variable for type metadata for AAHeadGestureConfig;
  if (!lazy cache variable for type metadata for AAHeadGestureConfig)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAHeadGestureConfig);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AABobbleConfiguration()
{
  uint64_t v4 = lazy cache variable for type metadata for AABobbleConfiguration;
  if (!lazy cache variable for type metadata for AABobbleConfiguration)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AABobbleConfiguration);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAAutoANCStrength()
{
  uint64_t v4 = lazy cache variable for type metadata for AAAutoANCStrength;
  if (!lazy cache variable for type metadata for AAAutoANCStrength)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAAutoANCStrength);
      return v1;
    }
  }
  return v4;
}

uint64_t AADeviceModel.init()@<X0>(uint64_t a1@<X8>)
{
  memset(__b, 0, 0x52uLL);
  LOBYTE(__b[0]) = 0;
  HIDWORD(__b[0]) = 0;
  LODWORD(__b[1]) = 0;
  __b[2] = 0;
  __b[3] = 0xF000000000000000;
  __b[4] = 0;
  LODWORD(__b[5]) = 0;
  WORD2(__b[5]) = 0;
  type metadata accessor for NSDate();
  __b[6] = NSDate.__allocating_init()().super.isa;
  int v1 = HIDWORD(__b[0]);
  int v2 = __b[1];
  uint64_t v3 = __b[2];
  uint64_t v4 = __b[3];
  char v5 = __b[4];
  char v6 = BYTE1(__b[4]);
  char v7 = BYTE2(__b[4]);
  char v8 = BYTE3(__b[4]);
  char v9 = BYTE4(__b[4]);
  char v10 = BYTE5(__b[4]);
  char v11 = BYTE6(__b[4]);
  char v12 = HIBYTE(__b[4]);
  char v13 = __b[5];
  char v14 = BYTE1(__b[5]);
  char v15 = BYTE2(__b[5]);
  uint64_t result = BYTE3(__b[5]);
  char v17 = BYTE4(__b[5]);
  char v18 = BYTE5(__b[5]);
  uint64_t v19 = __b[6];
  *(unsigned char *)a1 = __b[0];
  *(_DWORD *)(a1 + 4) = v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 33) = v6;
  *(unsigned char *)(a1 + 34) = v7;
  *(unsigned char *)(a1 + 35) = v8;
  *(unsigned char *)(a1 + 36) = v9;
  *(unsigned char *)(a1 + 37) = v10;
  *(unsigned char *)(a1 + 38) = v11;
  *(unsigned char *)(a1 + 39) = v12;
  *(unsigned char *)(a1 + 40) = v13;
  *(unsigned char *)(a1 + 41) = v14;
  *(unsigned char *)(a1 + 42) = v15;
  *(unsigned char *)(a1 + 43) = result;
  *(unsigned char *)(a1 + 44) = v17;
  *(unsigned char *)(a1 + 45) = v18;
  *(void *)(a1 + 48) = v19;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 57) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 81) = 0;
  return result;
}

uint64_t default argument 0 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 1 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 2 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 4 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 5 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 6 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 7 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 8 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 9 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 10 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 11 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 12 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 13 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 14 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 15 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 16 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 17 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

NSDate default argument 18 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return NSDate.__allocating_init()();
}

uint64_t default argument 19 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 20 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 22 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 23 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:hearingAidCapability:hearingAidEnrolled:hearingAidConfig:hearingAidGainSwipeEnabled:hearingTestCapability:hideOffListeningModeCapability:audiogramEnrolledTimestamp:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, unsigned __int8 a18, char a19, char a20,uint64_t a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,char a27)
{
  uint64_t result = a18;
  *(unsigned char *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = a5;
  *(unsigned char *)(a9 + 32) = a6;
  *(unsigned char *)(a9 + 33) = a7;
  *(unsigned char *)(a9 + 34) = a8;
  *(unsigned char *)(a9 + 35) = a10;
  *(unsigned char *)(a9 + 36) = a11;
  *(unsigned char *)(a9 + 37) = a12;
  *(unsigned char *)(a9 + 38) = a13;
  *(unsigned char *)(a9 + 39) = a14;
  *(unsigned char *)(a9 + 40) = a15;
  *(unsigned char *)(a9 + 41) = a16;
  *(unsigned char *)(a9 + 42) = a17;
  *(unsigned char *)(a9 + 43) = a18;
  *(unsigned char *)(a9 + 44) = a19;
  *(unsigned char *)(a9 + 45) = a20;
  *(void *)(a9 + 48) = a21;
  *(unsigned char *)(a9 + 56) = a22;
  *(unsigned char *)(a9 + 57) = a23;
  *(void *)(a9 + 64) = a24;
  *(void *)(a9 + 72) = a25;
  *(unsigned char *)(a9 + 80) = a26;
  *(unsigned char *)(a9 + 81) = a27;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AADeviceModel(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for AADeviceModel(uint64_t a1)
{
  if ((*(void *)(a1 + 24) & 0xF000000000000000) != 0xF000000000000000) {
    outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AADeviceModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if ((*(void *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
    unint64_t v7 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v6, v7);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 39);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  uint64_t v4 = *(void **)(a2 + 48);
  id v2 = v4;
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return result;
}

uint64_t assignWithCopy for AADeviceModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if ((*(void *)(a1 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(void *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 16);
      unint64_t v10 = *(void *)(a2 + 24);
      outlined copy of Data._Representation(v9, v10);
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v10;
    }
  }
  else if ((*(void *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 16);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 16);
    unint64_t v12 = *(void *)(a2 + 24);
    outlined copy of Data._Representation(v11, v12);
    uint64_t v2 = *(void *)(a1 + 16);
    unint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v12;
    outlined consume of Data._Representation(v2, v3);
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 39);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  unint64_t v7 = *(void **)(a2 + 48);
  id v4 = v7;
  uint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v7;

  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy82_8(void *a1, const void *a2)
{
}

uint64_t assignWithTake for AADeviceModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if ((*(void *)(a1 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else if ((*(void *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 16);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    uint64_t v2 = *(void *)(a2 + 24);
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v2;
    outlined consume of Data._Representation(v3, v4);
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 39);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  uint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return result;
}

uint64_t getEnumTagSinglePayload for AADeviceModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 82))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)(a1 + 48))) {
        int v3 = *(void *)(a1 + 48);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AADeviceModel(uint64_t result, int a2, int a3)
{
  int v3 = (unsigned char *)(result + 82);
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 8) = 0;
    *(void *)uint64_t result = a2 + 0x80000000;
    *(void *)(result + 72) = 0;
    *(void *)(result + 64) = 0;
    *(_WORD *)(result + 80) = 0;
    if (a3 < 0) {
      unsigned char *v3 = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      unsigned char *v3 = 0;
    }
    if (a2) {
      *(void *)(result + 48) = (a2 - 1);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AADeviceModel()
{
  return &type metadata for AADeviceModel;
}

uint64_t type metadata accessor for AASmartRoutingMode()
{
  uint64_t v4 = lazy cache variable for type metadata for AASmartRoutingMode;
  if (!lazy cache variable for type metadata for AASmartRoutingMode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AASmartRoutingMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAStreamStateAoS()
{
  uint64_t v4 = lazy cache variable for type metadata for AAStreamStateAoS;
  if (!lazy cache variable for type metadata for AAStreamStateAoS)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAStreamStateAoS);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAHearingTestCapability()
{
  uint64_t v4 = lazy cache variable for type metadata for AAHearingTestCapability;
  if (!lazy cache variable for type metadata for AAHearingTestCapability)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAHearingTestCapability);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAHearingAidConfiguration()
{
  uint64_t v4 = lazy cache variable for type metadata for AAHearingAidConfiguration;
  if (!lazy cache variable for type metadata for AAHearingAidConfiguration)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAHearingAidConfiguration);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAHearingAidCapability()
{
  uint64_t v4 = lazy cache variable for type metadata for AAHearingAidCapability;
  if (!lazy cache variable for type metadata for AAHearingAidCapability)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAHearingAidCapability);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAFrequencyBand()
{
  uint64_t v4 = lazy cache variable for type metadata for AAFrequencyBand;
  if (!lazy cache variable for type metadata for AAFrequencyBand)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAFrequencyBand);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAFeatureCapability()
{
  uint64_t v4 = lazy cache variable for type metadata for AAFeatureCapability;
  if (!lazy cache variable for type metadata for AAFeatureCapability)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAFeatureCapability);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAAutoANCCapability()
{
  uint64_t v4 = lazy cache variable for type metadata for AAAutoANCCapability;
  if (!lazy cache variable for type metadata for AAAutoANCCapability)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAAutoANCCapability);
      return v1;
    }
  }
  return v4;
}

id @nonobjc NSDate.init()()
{
  return objc_msgSend(v0, sel_init);
}

id @nonobjc AADeviceConfig.init()()
{
  return objc_msgSend(v0, sel_init);
}

uint64_t RawRepresentable<>.description.getter()
{
  return String.init<A>(_:)();
}

{
  uint64_t v1;

  dispatch thunk of RawRepresentable.rawValue.getter();
  return v1;
}

BOOL static AADevicePropertyRemoteSendState.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  if (*a1)
  {
    if (*a1 == 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = 2;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*a2)
  {
    if (*a2 == 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v4 == v3;
}

uint64_t AADevicePropertyRemoteSendState.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t AADevicePropertyRemoteSendState.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState);
    return WitnessTable;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AADevicePropertyRemoteSendState(unsigned char *a1, unsigned char *a2)
{
  return static AADevicePropertyRemoteSendState.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AADevicePropertyRemoteSendState()
{
  return AADevicePropertyRemoteSendState.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AADevicePropertyRemoteSendState()
{
  return AADevicePropertyRemoteSendState.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AADevicePropertyRemoteSendState(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t AudioAccessoryDevice.btAddress.getter()
{
  unint64_t v113 = implicit closure #1 in AudioAccessoryDevice.btAddress.getter;
  uint64_t v114 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v115 = implicit closure #2 in AudioAccessoryDevice.btAddress.getter;
  uint64_t v116 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  unint64_t v117 = partial apply for implicit closure #3 in AudioAccessoryDevice.btAddress.getter;
  uint64_t v118 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  unint64_t v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  unint64_t v125 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  char v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v149 = 0;
  uint64_t v128 = 0;
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v130 = type metadata accessor for Logger();
  uint64_t v131 = *(void *)(v130 - 8);
  uint64_t v132 = v130 - 8;
  unint64_t v133 = (*(void *)(v131 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v134 = (char *)v41 - v133;
  id v149 = (id)MEMORY[0x270FA5388](v129, v0);
  id v135 = objc_msgSend(v149, sel_bluetoothAddressData);
  if (v135)
  {
    id v112 = v135;
    id v107 = v135;
    uint64_t v108 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v109 = v1;

    uint64_t v110 = v108;
    unint64_t v111 = v109;
  }
  else
  {
    uint64_t v110 = 0;
    unint64_t v111 = 0xF000000000000000;
  }
  unint64_t v105 = v111;
  uint64_t v106 = v110;
  if ((v111 & 0xF000000000000000) == 0xF000000000000000)
  {
    Class v102 = 0;
  }
  else
  {
    uint64_t v103 = v106;
    unint64_t v104 = v105;
    unint64_t v99 = v105;
    uint64_t v100 = v106;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v100, v99);
    Class v102 = isa;
  }
  Class v97 = v102;
  id v98 = (id)CUPrintNSDataAddress();

  if (v98)
  {
    id v96 = v98;
    id v91 = v98;
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v93 = v2;

    uint64_t v94 = v92;
    uint64_t v95 = v93;
  }
  else
  {
    uint64_t v94 = 0;
    uint64_t v95 = 0;
  }
  uint64_t v89 = v95;
  uint64_t v90 = v94;
  if (v95)
  {
    uint64_t v87 = v90;
    uint64_t v88 = v89;
    uint64_t v84 = v89;
    uint64_t v140 = v90;
    uint64_t v141 = v89;
    uint64_t v138 = v90;
    uint64_t v139 = v89;
    Builtin::Word v78 = 1;
    int v80 = 1;
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(":", 1uLL, 1);
    int v83 = &v137;
    Swift::String v137 = v3;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", v78, v80 & 1);
    int v82 = &v136;
    Swift::String v136 = v4;
    unint64_t v79 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v81 = MEMORY[0x263F8D310];
    default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v85._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v85._object = v5;
    outlined destroy of String();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    Swift::String v86 = v85;
  }
  else
  {
    uint64_t v6 = v134;
    uint64_t v7 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v6, v7, v130);
    id v8 = v129;
    uint64_t v61 = 7;
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v129;
    int v76 = Logger.logObject.getter();
    int v77 = static os_log_type_t.error.getter();
    uint64_t v53 = &v147;
    uint64_t v60 = 32;
    uint64_t v147 = 32;
    unint64_t v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v54 = v148;
    uint64_t v58 = 17;
    uint64_t v64 = swift_allocObject();
    int v57 = 32;
    *(unsigned char *)(v64 + 16) = 32;
    uint64_t v65 = swift_allocObject();
    int v59 = 8;
    *(unsigned char *)(v65 + 16) = 8;
    uint64_t v9 = swift_allocObject();
    uint64_t v55 = v9;
    *(void *)(v9 + 16) = v113;
    *(void *)(v9 + 24) = 0;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v55;
    uint64_t v66 = v10;
    *(void *)(v10 + 16) = v114;
    *(void *)(v10 + 24) = v11;
    uint64_t v67 = swift_allocObject();
    *(unsigned char *)(v67 + 16) = 0;
    uint64_t v68 = swift_allocObject();
    *(unsigned char *)(v68 + 16) = v59;
    uint64_t v12 = swift_allocObject();
    uint64_t v56 = v12;
    *(void *)(v12 + 16) = v115;
    *(void *)(v12 + 24) = 0;
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v56;
    uint64_t v69 = v13;
    *(void *)(v13 + 16) = v116;
    *(void *)(v13 + 24) = v14;
    uint64_t v70 = swift_allocObject();
    *(unsigned char *)(v70 + 16) = v57;
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = v59;
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v62;
    uint64_t v63 = v15;
    *(void *)(v15 + 16) = v117;
    *(void *)(v15 + 24) = v16;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v63;
    uint64_t v73 = v17;
    *(void *)(v17 + 16) = v118;
    *(void *)(v17 + 24) = v18;
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v72 = _allocateUninitializedArray<A>(_:)();
    unint64_t v74 = v19;
    swift_retain();
    uint64_t v20 = v64;
    uint64_t v21 = v74;
    *unint64_t v74 = v119;
    v21[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
    swift_retain();
    uint64_t v22 = v65;
    uint64_t v23 = v74;
    v74[2] = v120;
    v23[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
    swift_retain();
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
    uint64_t v25 = v74;
    v74[4] = v121;
    v25[5] = v24;
    swift_retain();
    uint64_t v26 = v67;
    uint64_t v27 = v74;
    v74[6] = v122;
    v27[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
    swift_retain();
    uint64_t v28 = v68;
    uint64_t v29 = v74;
    v74[8] = v123;
    v29[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28;
    swift_retain();
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v69;
    unint64_t v31 = v74;
    v74[10] = v124;
    v31[11] = v30;
    swift_retain();
    uint64_t v32 = v70;
    uint64_t v33 = v74;
    v74[12] = v125;
    v33[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v32;
    swift_retain();
    uint64_t v34 = v71;
    id v35 = v74;
    v74[14] = v126;
    v35[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v73;
    uint64_t v37 = v74;
    v74[16] = v127;
    v37[17] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v76, (os_log_type_t)v77))
    {
      uint64_t v38 = v128;
      uint64_t v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v45 = createStorage<A>(capacity:type:)(0);
      uint64_t v46 = createStorage<A>(capacity:type:)(2);
      id v47 = &v146;
      char v146 = v44;
      uint64_t v48 = &v145;
      uint64_t v145 = v45;
      uint64_t v49 = &v144;
      uint64_t v144 = v46;
      serialize(_:at:)(2, &v146);
      serialize(_:at:)(3, v47);
      uint64_t v142 = v119;
      uint64_t v143 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)v47, (uint64_t)v48, (uint64_t)v49);
      uint64_t v50 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        uint64_t v142 = v120;
        uint64_t v143 = v65;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        uint64_t v42 = 0;
        uint64_t v39 = v42;
        uint64_t v142 = v121;
        uint64_t v143 = v66;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        v41[6] = v39;
        uint64_t v142 = v122;
        uint64_t v143 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        v41[5] = 0;
        uint64_t v142 = v123;
        uint64_t v143 = v68;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        v41[4] = 0;
        uint64_t v142 = v124;
        uint64_t v143 = v69;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        v41[3] = 0;
        uint64_t v142 = v125;
        uint64_t v143 = v70;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        v41[2] = 0;
        uint64_t v142 = v126;
        uint64_t v143 = v71;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        v41[1] = 0;
        uint64_t v142 = v127;
        uint64_t v143 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
        _os_log_impl(&dword_250C36000, v76, (os_log_type_t)v77, "HeadphoneManager: %s: %ld::HeadphoneManager: Invalid BT Address address: %s", v44, v54);
        destroyStorage<A>(_:count:)(v45, 0, v43);
        destroyStorage<A>(_:count:)(v46, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v44, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v131 + 8))(v134, v130);
    Swift::String v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNKNOWN", 7uLL, 1);
  }
  return v86._countAndFlagsBits;
}

uint64_t implicit closure #1 in AudioAccessoryDevice.btAddress.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("btAddress", 9uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in AudioAccessoryDevice.btAddress.getter()
{
  return 40;
}

uint64_t implicit closure #3 in AudioAccessoryDevice.btAddress.getter(void *a1)
{
  id v10 = objc_msgSend(a1, sel_bluetoothAddressData);
  if (v10)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v1;

    uint64_t v8 = v6;
    unint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  if ((v9 & 0xF000000000000000) == 0xF000000000000000)
  {
    v5._uint64_t countAndFlagsBits = 0;
    v5._object = 0;
  }
  else
  {
    NSDataBase64EncodingOptions v2 = default argument 0 of Data.base64EncodedString(options:)();
    Swift::String v3 = Data.base64EncodedString(options:)(v2);
    outlined consume of Data._Representation(v8, v9);
    Swift::String v5 = v3;
  }
  if (v5._object) {
    return v5._countAndFlagsBits;
  }
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil data", 8uLL, 1)._countAndFlagsBits;
  outlined destroy of String?();
  return countAndFlagsBits;
}

uint64_t sub_250C4FD2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in AudioAccessoryDevice.btAddress.getter()
{
  return implicit closure #3 in AudioAccessoryDevice.btAddress.getter(*(void **)(v0 + 16));
}

uint64_t default argument 0 of Data.base64EncodedString(options:)()
{
  return 0;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  return __dst;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  specialized Array._endMutation()();
  swift_retain();
  uint64_t v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)v5;
  if (!__OFSUB__(v5, 1)) {
    return v6;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  void v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    return (void *)specialized ContiguousArray.init()();
  }
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  uint64_t result = (void *)_StringGuts.copyUTF8(into:)();
  uint64_t v6 = result;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of String.UTF8View();
    if (v6 == (void *)v7) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v4 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v4;
  if ((result & 1) == 0)
  {
    uint64_t v2 = specialized Array.count.getter(*v3);
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    uint64_t *v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (*(void *)(*(void *)v1 + 24) >> 1 < result + 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(*(void *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  *(void *)(v4 + 16) = v5;
  swift_release();
  uint64_t v6 = *v2;
  swift_retain();
  *(unsigned char *)(v6 + 32 + a1) = a2;
  return swift_release();
}

void specialized Array._endMutation()()
{
  *uint64_t v0 = *v0;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 < a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v6 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (void)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    swift_retain();
    return (void *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  swift_retain();
  uint64_t result = swift_retain();
  uint64_t v16 = *(void *)(a4 + 24) >> 1;
  if (a3)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 2 * v16;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a4 + 24) >> 1;
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  int64_t v10 = *(void *)(a4 + 16);
  if (v11 < v10) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v11;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      void v8[2] = v10;
      void v8[3] = 2 * (v6 - (void)(v8 + 4));
    }
    else
    {
      swift_retain();
      void v8[2] = v10;
      void v8[3] = 2 * v9;
    }
    swift_release();
    uint64_t v7 = (char *)v8;
  }
  else
  {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    swift_retain();
    uint64_t v7 = v5;
  }
  if (a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(void *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result) {
    return (char *)memmove(a3, result, a2);
  }
  return result;
}

uint64_t sub_250C5070C()
{
  return swift_deallocObject();
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_250C50740()
{
  return swift_deallocObject();
}

uint64_t sub_250C50774()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250C507C0()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250C5080C()
{
  return swift_deallocObject();
}

uint64_t sub_250C50840()
{
  return swift_deallocObject();
}

uint64_t sub_250C50874()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_250C508C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

uint64_t sub_250C50974()
{
  return swift_deallocObject();
}

uint64_t sub_250C509A8()
{
  return swift_deallocObject();
}

uint64_t sub_250C509DC()
{
  return swift_deallocObject();
}

uint64_t sub_250C50A28()
{
  return swift_deallocObject();
}

unint64_t base witness table accessor for Equatable in AADevicePropertyRemoteSendState()
{
  return lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState();
}

uint64_t dispatch thunk of AADeviceConfigurable.underlyingDevice.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AADeviceConfigurable.btAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AADeviceConfigurable.deviceRemoteSendState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AADevicePropertyRemoteSendState(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFD) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 2) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 3;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AADevicePropertyRemoteSendState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFD)
  {
    unsigned int v5 = ((a3 + 2) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFD)
  {
    unsigned int v4 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for AADevicePropertyRemoteSendState(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for AADevicePropertyRemoteSendState(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AADevicePropertyRemoteSendState()
{
  return &type metadata for AADevicePropertyRemoteSendState;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String?()
{
}

id AudioAccessoryDevice.cbDeviceValidator(aaDevice:)(void *a1)
{
  id v47 = a1;
  uint64_t v40 = partial apply for closure #1 in osLogInternal(_:log:type:);
  id v59 = 0;
  uint64_t v58 = 0;
  id v57 = 0;
  uint64_t v41 = 0;
  uint64_t v49 = 0;
  id v48 = 0;
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = v42 - 8;
  unint64_t v45 = (*(void *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v46 = (char *)&v13 - v45;
  id v59 = (id)MEMORY[0x270FA5388](v47, v2);
  uint64_t v58 = v1;
  id v3 = v59;
  id v57 = v47;
  if (objc_msgSend(v47, sel_respondsToSelector_, sel_coreBluetoothDevice))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    if (objc_msgSend(v47, sel_respondsToSelector_, sel_coreBluetoothDevice))
    {
      swift_unknownObjectRetain();
      uint64_t v50 = (uint64_t)objc_msgSend(v47, sel_coreBluetoothDevice);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v50 = 1;
    }
    uint64_t v39 = (void *)v50;
    if (v50 == 1)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v38 = v39;
      id v37 = v39;
      uint64_t v49 = v39;
      swift_unknownObjectRelease();
      id v4 = v37;
      if (v37)
      {
        id v36 = v37;
        id v34 = v37;
        id v48 = v37;

        swift_unknownObjectRelease();
        return v34;
      }
    }
  }
  unsigned int v5 = v46;
  uint64_t v6 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v5, v6, v42);
  uint64_t v32 = Logger.logObject.getter();
  int v31 = static os_log_type_t.error.getter();
  uint64_t v29 = &v55;
  uint64_t v55 = 2;
  unint64_t v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v28 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v30 = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v33 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v32, (os_log_type_t)v31))
  {
    uint64_t v7 = v41;
    uint64_t v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v16 = 0;
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v19 = createStorage<A>(capacity:type:)(v16);
    uint64_t v23 = &v54;
    uint32_t v54 = v17;
    uint64_t v24 = &v53;
    uint64_t v53 = v18;
    uint64_t v21 = &v52;
    uint64_t v52 = v19;
    unsigned int v20 = 0;
    serialize(_:at:)(0, &v54);
    serialize(_:at:)(v20, v23);
    uint64_t v51 = v33;
    uint64_t v22 = &v13;
    MEMORY[0x270FA5388](&v13, v8);
    uint64_t v9 = v24;
    uint64_t v10 = &v13 - 6;
    uint64_t v25 = &v13 - 6;
    v10[2] = (uint64_t)v23;
    v10[3] = (uint64_t)v9;
    v10[4] = v11;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_250C36000, v32, (os_log_type_t)v31, "HeadphoneManager: AudioAccessoryDevice does not have CBDevice yet.", v17, v30);
      uint64_t v14 = 0;
      destroyStorage<A>(_:count:)(v18, 0, v15);
      destroyStorage<A>(_:count:)(v19, v14, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v17, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = 0;

  (*(void (**)(char *, uint64_t))(v43 + 8))(v46, v42);
  swift_unknownObjectRelease();
  return (id)v13;
}

uint64_t SerialNumberType.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SerialNumberType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SerialNumberType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SerialNumberType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SerialNumberType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SerialNumberType@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = SerialNumberType.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SerialNumberType(void *a1@<X8>)
{
  SerialNumberType.rawValue.getter();
  *a1 = v1;
}

uint64_t HeadphoneDevice.HeadphoneFeatures.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 7:
      return 7;
    case 8:
      return 8;
    case 9:
      return 9;
    case 10:
      return 10;
    case 11:
      return 11;
    case 12:
      return 12;
    case 13:
      return 13;
    case 14:
      return 14;
    case 15:
      return 15;
    case 16:
      return 16;
    case 17:
      return 17;
    case 18:
      return 18;
    case 19:
      return 19;
    case 20:
      return 20;
    case 21:
      return 21;
    case 22:
      return 22;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HeadphoneDevice.HeadphoneFeatures()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HeadphoneDevice.HeadphoneFeatures()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HeadphoneDevice.HeadphoneFeatures()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance HeadphoneDevice.HeadphoneFeatures()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HeadphoneDevice.HeadphoneFeatures@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = HeadphoneDevice.HeadphoneFeatures.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance HeadphoneDevice.HeadphoneFeatures(void *a1@<X8>)
{
  HeadphoneDevice.HeadphoneFeatures.rawValue.getter();
  *a1 = v1;
}

uint64_t HeadphoneDevice.ListeningModeConfigs.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 7:
      return 7;
    case 8:
      return 8;
    case 9:
      return 9;
    case 10:
      return 10;
    case 11:
      return 11;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HeadphoneDevice.ListeningModeConfigs()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HeadphoneDevice.ListeningModeConfigs()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HeadphoneDevice.ListeningModeConfigs()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance HeadphoneDevice.ListeningModeConfigs()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HeadphoneDevice.ListeningModeConfigs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = HeadphoneDevice.ListeningModeConfigs.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance HeadphoneDevice.ListeningModeConfigs(void *a1@<X8>)
{
  HeadphoneDevice.ListeningModeConfigs.rawValue.getter();
  *a1 = v1;
}

id HeadphoneDevice.cbDevice.getter()
{
  char v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_cbDevice);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.cbDevice.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_cbDevice);
  swift_beginAccess();
  char v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.cbDevice : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x210))(v2);
}

void key path setter for HeadphoneDevice.cbDevice : HeadphoneDevice(id *a1, id *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  id v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x263F8EED0]) + 0x218))(v4);
}

uint64_t (*HeadphoneDevice.cbDevice.modify())()
{
  return HeadphoneDevice.cbDevice.modify;
}

uint64_t HeadphoneDevice.cbDevice.modify()
{
  return swift_endAccess();
}

id HeadphoneDevice.productInfo.getter()
{
  id v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_productInfo);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.productInfo.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_productInfo);
  swift_beginAccess();
  id v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.productInfo : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x228))(v2);
}

void key path setter for HeadphoneDevice.productInfo : HeadphoneDevice(id *a1, id *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  id v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x263F8EED0]) + 0x230))(v4);
}

uint64_t (*HeadphoneDevice.productInfo.modify())()
{
  return HeadphoneDevice.productInfo.modify;
}

uint64_t HeadphoneDevice.productInfo.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDevice.aaDevice()
{
  return 0;
}

id HeadphoneDevice.aaDevice.getter()
{
  id v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_aaDevice);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.aaDevice.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_aaDevice);
  swift_beginAccess();
  id v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.aaDevice : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x240))(v2);
}

void key path setter for HeadphoneDevice.aaDevice : HeadphoneDevice(id *a1, id *a2)
{
  outlined init with copy of AudioAccessoryDevice?(a1, &v6);
  uint64_t v5 = v6;
  id v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x248))(v5);
}

uint64_t (*HeadphoneDevice.aaDevice.modify())()
{
  return HeadphoneDevice.aaDevice.modify;
}

uint64_t HeadphoneDevice.aaDevice.modify()
{
  return swift_endAccess();
}

void *HeadphoneDevice.icon.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR___HPMHeadphoneDevice_icon);
  id v1 = v3;
  return v3;
}

uint64_t HeadphoneDevice.btAddress.getter()
{
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_btAddress);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HeadphoneDevice.isUpdatingDeviceConfig.getter()
{
  uint64_t v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isUpdatingDeviceConfig);
  swift_beginAccess();
  char v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isUpdatingDeviceConfig.setter(char a1)
{
  id v4 = (unsigned char *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isUpdatingDeviceConfig);
  swift_beginAccess();
  *id v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isUpdatingDeviceConfig : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x258))(v2) & 1;
}

void key path setter for HeadphoneDevice.isUpdatingDeviceConfig : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x260))(v4 & 1);
}

uint64_t (*HeadphoneDevice.isUpdatingDeviceConfig.modify())()
{
  return HeadphoneDevice.isUpdatingDeviceConfig.modify;
}

uint64_t HeadphoneDevice.isUpdatingDeviceConfig.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.isAirpods.getter()
{
  id v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isAirpods);
  swift_beginAccess();
  char v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isAirpods.setter(char a1)
{
  char v4 = (unsigned char *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isAirpods);
  swift_beginAccess();
  *char v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isAirpods : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x270))(v2) & 1;
}

void key path setter for HeadphoneDevice.isAirpods : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x278))(v4 & 1);
}

uint64_t (*HeadphoneDevice.isAirpods.modify())()
{
  return HeadphoneDevice.isAirpods.modify;
}

uint64_t HeadphoneDevice.isAirpods.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.findMyNetworkSupport.getter()
{
  id v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSupport);
  swift_beginAccess();
  char v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.findMyNetworkSupport.setter(char a1)
{
  char v4 = (unsigned char *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSupport);
  swift_beginAccess();
  *char v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.findMyNetworkSupport : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x288))(v2) & 1;
}

void key path setter for HeadphoneDevice.findMyNetworkSupport : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x290))(v4 & 1);
}

uint64_t (*HeadphoneDevice.findMyNetworkSupport.modify())()
{
  return HeadphoneDevice.findMyNetworkSupport.modify;
}

uint64_t HeadphoneDevice.findMyNetworkSupport.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.isResettingFindMyNetworkOnError.getter()
{
  id v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isResettingFindMyNetworkOnError);
  swift_beginAccess();
  char v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isResettingFindMyNetworkOnError.setter(char a1)
{
  char v4 = (unsigned char *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isResettingFindMyNetworkOnError);
  swift_beginAccess();
  *char v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isResettingFindMyNetworkOnError : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x2A0))(v2) & 1;
}

void key path setter for HeadphoneDevice.isResettingFindMyNetworkOnError : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x2A8))(v4 & 1);
}

uint64_t (*HeadphoneDevice.isResettingFindMyNetworkOnError.modify())()
{
  return HeadphoneDevice.isResettingFindMyNetworkOnError.modify;
}

uint64_t HeadphoneDevice.isResettingFindMyNetworkOnError.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.findMyNetworkEnable@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t Published.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v4[1] = a3;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v9 = a2;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = a2 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1, a1);
  v4[2] = (char *)v4 - v4[0];
  (*(void (**)(void))(v5 + 16))();
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

uint64_t HeadphoneDevice.findMyNetworkEnable.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.findMyNetworkEnable.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.findMyNetworkEnable : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x2B8))(v2) & 1;
}

void key path setter for HeadphoneDevice.findMyNetworkEnable : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x2C0))(v4 & 1);
}

void (*HeadphoneDevice.findMyNetworkEnable.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.findMyNetworkEnable.modify;
}

void HeadphoneDevice.findMyNetworkEnable.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$findMyNetworkEnable : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x2D0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$findMyNetworkEnable : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x2D8))(v9);
}

uint64_t HeadphoneDevice.$findMyNetworkEnable.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$findMyNetworkEnable.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$findMyNetworkEnable.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$findMyNetworkEnable.getter();
  return HeadphoneDevice.$findMyNetworkEnable.modify;
}

void HeadphoneDevice.$findMyNetworkEnable.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$findMyNetworkEnable.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$findMyNetworkEnable.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t HeadphoneDevice.findMyNetworkSession.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSession);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_unknownObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.findMyNetworkSession.setter(uint64_t a1)
{
  swift_unknownObjectRetain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSession);
  swift_beginAccess();
  void *v3 = a1;
  swift_unknownObjectRelease();
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void key path getter for HeadphoneDevice.findMyNetworkSession : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x2E8))(v2);
}

void key path setter for HeadphoneDevice.findMyNetworkSession : HeadphoneDevice(uint64_t *a1, id *a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectRetain();
  uint64_t v5 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v5 & *MEMORY[0x263F8EED0]) + 0x2F0))(v3);
}

uint64_t (*HeadphoneDevice.findMyNetworkSession.modify())()
{
  return HeadphoneDevice.findMyNetworkSession.modify;
}

uint64_t HeadphoneDevice.findMyNetworkSession.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.findMyNetworkValueUpdated.getter()
{
  id v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkValueUpdated);
  swift_beginAccess();
  char v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.findMyNetworkValueUpdated.setter(char a1)
{
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkValueUpdated);
  swift_beginAccess();
  *uint64_t v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.findMyNetworkValueUpdated : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x300))(v2) & 1;
}

void key path setter for HeadphoneDevice.findMyNetworkValueUpdated : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x308))(v4 & 1);
}

uint64_t (*HeadphoneDevice.findMyNetworkValueUpdated.modify())()
{
  return HeadphoneDevice.findMyNetworkValueUpdated.modify;
}

uint64_t HeadphoneDevice.findMyNetworkValueUpdated.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.isSettingFindMyNetworkValue@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.isSettingFindMyNetworkValue.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.isSettingFindMyNetworkValue.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.isSettingFindMyNetworkValue : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x318))(v2) & 1;
}

void key path setter for HeadphoneDevice.isSettingFindMyNetworkValue : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x320))(v4 & 1);
}

void (*HeadphoneDevice.isSettingFindMyNetworkValue.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.isSettingFindMyNetworkValue.modify;
}

void HeadphoneDevice.isSettingFindMyNetworkValue.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$isSettingFindMyNetworkValue : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x330))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$isSettingFindMyNetworkValue : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x338))(v9);
}

uint64_t HeadphoneDevice.$isSettingFindMyNetworkValue.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$isSettingFindMyNetworkValue.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$isSettingFindMyNetworkValue.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$isSettingFindMyNetworkValue.getter();
  return HeadphoneDevice.$isSettingFindMyNetworkValue.modify;
}

void HeadphoneDevice.$isSettingFindMyNetworkValue.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$isSettingFindMyNetworkValue.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$isSettingFindMyNetworkValue.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.name@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v7[2] = a1;
  v7[3] = a2;
  swift_bridgeObjectRetain();
  v7[0] = a1;
  v7[1] = a2;
  Published.init(wrappedValue:)((uint64_t)v7, MEMORY[0x263F8D310], a3);
  return swift_bridgeObjectRelease();
}

uint64_t HeadphoneDevice.name.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.name.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void key path getter for HeadphoneDevice.name : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v4 & *MEMORY[0x263F8EED0]) + 0x348))(v2);
  a2[1] = v3;
}

void key path setter for HeadphoneDevice.name : HeadphoneDevice(void *a1, id *a2)
{
  outlined init with copy of String(a1, v7);
  uint64_t v6 = v7[0];
  uint64_t v5 = v7[1];
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t, uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x350))(v6, v5);
}

void (*HeadphoneDevice.name.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.name.modify;
}

void HeadphoneDevice.name.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$name : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x360))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$name : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x368))(v9);
}

uint64_t HeadphoneDevice.$name.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$name.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$name.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$name.getter();
  return HeadphoneDevice.$name.modify;
}

void HeadphoneDevice.$name.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$name.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$name.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.listeningMode@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBListeningMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.listeningMode.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.listeningMode.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.listeningMode : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x378))(v2);
}

void key path setter for HeadphoneDevice.listeningMode : HeadphoneDevice(unsigned int *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned int v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x380))(v4);
}

void (*HeadphoneDevice.listeningMode.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.listeningMode.modify;
}

void HeadphoneDevice.listeningMode.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$listeningMode : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x390))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$listeningMode : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x398))(v9);
}

uint64_t HeadphoneDevice.$listeningMode.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$listeningMode.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$listeningMode.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$listeningMode.getter();
  return HeadphoneDevice.$listeningMode.modify;
}

void HeadphoneDevice.$listeningMode.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$listeningMode.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$listeningMode.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.clickHoldModeLeft@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBPeerUIGestureMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.clickHoldModeLeft.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.clickHoldModeLeft.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.clickHoldModeLeft : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x3A8))(v2);
}

void key path setter for HeadphoneDevice.clickHoldModeLeft : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x3B0))(v4);
}

void (*HeadphoneDevice.clickHoldModeLeft.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.clickHoldModeLeft.modify;
}

void HeadphoneDevice.clickHoldModeLeft.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$clickHoldModeLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x3C0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$clickHoldModeLeft : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x3C8))(v9);
}

uint64_t HeadphoneDevice.$clickHoldModeLeft.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$clickHoldModeLeft.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$clickHoldModeLeft.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$clickHoldModeLeft.getter();
  return HeadphoneDevice.$clickHoldModeLeft.modify;
}

void HeadphoneDevice.$clickHoldModeLeft.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$clickHoldModeLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$clickHoldModeLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.clickHoldModeRight@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBPeerUIGestureMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.clickHoldModeRight.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.clickHoldModeRight.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.clickHoldModeRight : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x3D8))(v2);
}

void key path setter for HeadphoneDevice.clickHoldModeRight : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x3E0))(v4);
}

void (*HeadphoneDevice.clickHoldModeRight.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.clickHoldModeRight.modify;
}

void HeadphoneDevice.clickHoldModeRight.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$clickHoldModeRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x3F0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$clickHoldModeRight : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x3F8))(v9);
}

uint64_t HeadphoneDevice.$clickHoldModeRight.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$clickHoldModeRight.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$clickHoldModeRight.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$clickHoldModeRight.getter();
  return HeadphoneDevice.$clickHoldModeRight.modify;
}

void HeadphoneDevice.$clickHoldModeRight.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$clickHoldModeRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$clickHoldModeRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t HeadphoneDevice.listeningModeConfigs.getter()
{
  uint64_t v2 = (unsigned int *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_listeningModeConfigs);
  swift_beginAccess();
  unsigned int v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.listeningModeConfigs.setter(int a1)
{
  unsigned int v3 = (_DWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_listeningModeConfigs);
  swift_beginAccess();
  _DWORD *v3 = a1;
  swift_endAccess();
  return HeadphoneDevice.listeningModeConfigs.didset();
}

void key path getter for HeadphoneDevice.listeningModeConfigs : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x408))(v2);
}

void key path setter for HeadphoneDevice.listeningModeConfigs : HeadphoneDevice(unsigned int *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned int v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x410))(v4);
}

uint64_t HeadphoneDevice.listeningModeConfigs.didset()
{
  swift_beginAccess();
  swift_endAccess();
  type metadata accessor for CBListeningModeConfigs();
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  BOOL v4 = (OptionSet<>.contains(_:)() & 1) != 0;
  (*(void (**)(BOOL))((*v5 & *MEMORY[0x263F8EED0]) + 0x428))(v4);
  swift_beginAccess();
  swift_endAccess();
  BOOL v3 = (OptionSet<>.contains(_:)() & 1) != 0;
  (*(void (**)(BOOL))((*v5 & *MEMORY[0x263F8EED0]) + 0x488))(v3);
  swift_beginAccess();
  swift_endAccess();
  BOOL v2 = (OptionSet<>.contains(_:)() & 1) != 0;
  (*(void (**)(BOOL))((*v5 & *MEMORY[0x263F8EED0]) + 0x4B8))(v2);
  swift_beginAccess();
  swift_endAccess();
  BOOL v1 = (OptionSet<>.contains(_:)() & 1) != 0;
  return (*(uint64_t (**)(BOOL))((*v5 & *MEMORY[0x263F8EED0]) + 0x458))(v1);
}

uint64_t (*HeadphoneDevice.listeningModeConfigs.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return HeadphoneDevice.listeningModeConfigs.modify;
}

uint64_t HeadphoneDevice.listeningModeConfigs.modify(uint64_t a1, char a2)
{
  if (a2) {
    return swift_endAccess();
  }
  swift_endAccess();
  return HeadphoneDevice.listeningModeConfigs.didset();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldAuto@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.pressHoldAuto.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldAuto.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldAuto : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x420))(v2) & 1;
}

void key path setter for HeadphoneDevice.pressHoldAuto : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x428))(v4 & 1);
}

void (*HeadphoneDevice.pressHoldAuto.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldAuto.modify;
}

void HeadphoneDevice.pressHoldAuto.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldAuto : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x438))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$pressHoldAuto : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x440))(v9);
}

uint64_t HeadphoneDevice.$pressHoldAuto.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldAuto.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$pressHoldAuto.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$pressHoldAuto.getter();
  return HeadphoneDevice.$pressHoldAuto.modify;
}

void HeadphoneDevice.$pressHoldAuto.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldAuto.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldAuto.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldTransparency@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.pressHoldTransparency.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldTransparency.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldTransparency : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x450))(v2) & 1;
}

void key path setter for HeadphoneDevice.pressHoldTransparency : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x458))(v4 & 1);
}

void (*HeadphoneDevice.pressHoldTransparency.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldTransparency.modify;
}

void HeadphoneDevice.pressHoldTransparency.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldTransparency : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x468))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$pressHoldTransparency : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x470))(v9);
}

uint64_t HeadphoneDevice.$pressHoldTransparency.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldTransparency.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$pressHoldTransparency.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$pressHoldTransparency.getter();
  return HeadphoneDevice.$pressHoldTransparency.modify;
}

void HeadphoneDevice.$pressHoldTransparency.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldTransparency.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldTransparency.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldOff@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.pressHoldOff.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldOff.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldOff : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x480))(v2) & 1;
}

void key path setter for HeadphoneDevice.pressHoldOff : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x488))(v4 & 1);
}

void (*HeadphoneDevice.pressHoldOff.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldOff.modify;
}

void HeadphoneDevice.pressHoldOff.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldOff : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x498))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$pressHoldOff : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x4A0))(v9);
}

uint64_t HeadphoneDevice.$pressHoldOff.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldOff.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$pressHoldOff.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$pressHoldOff.getter();
  return HeadphoneDevice.$pressHoldOff.modify;
}

void HeadphoneDevice.$pressHoldOff.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldOff.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldOff.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldNoiseCancel@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.pressHoldNoiseCancel.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldNoiseCancel.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldNoiseCancel : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x4B0))(v2) & 1;
}

void key path setter for HeadphoneDevice.pressHoldNoiseCancel : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x4B8))(v4 & 1);
}

void (*HeadphoneDevice.pressHoldNoiseCancel.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldNoiseCancel.modify;
}

void HeadphoneDevice.pressHoldNoiseCancel.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldNoiseCancel : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x4C8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$pressHoldNoiseCancel : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x4D0))(v9);
}

uint64_t HeadphoneDevice.$pressHoldNoiseCancel.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldNoiseCancel.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$pressHoldNoiseCancel.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$pressHoldNoiseCancel.getter();
  return HeadphoneDevice.$pressHoldNoiseCancel.modify;
}

void HeadphoneDevice.$pressHoldNoiseCancel.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldNoiseCancel.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldNoiseCancel.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.doubleTapActionLeft@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBDoubleTapAction();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.doubleTapActionLeft.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.doubleTapActionLeft.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.doubleTapActionLeft : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x4E0))(v2);
}

void key path setter for HeadphoneDevice.doubleTapActionLeft : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x4E8))(v4);
}

void (*HeadphoneDevice.doubleTapActionLeft.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.doubleTapActionLeft.modify;
}

void HeadphoneDevice.doubleTapActionLeft.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$doubleTapActionLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x4F8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$doubleTapActionLeft : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x500))(v9);
}

uint64_t HeadphoneDevice.$doubleTapActionLeft.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$doubleTapActionLeft.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$doubleTapActionLeft.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$doubleTapActionLeft.getter();
  return HeadphoneDevice.$doubleTapActionLeft.modify;
}

void HeadphoneDevice.$doubleTapActionLeft.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$doubleTapActionLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$doubleTapActionLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.doubleTapActionRight@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBDoubleTapAction();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.doubleTapActionRight.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.doubleTapActionRight.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.doubleTapActionRight : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x510))(v2);
}

void key path setter for HeadphoneDevice.doubleTapActionRight : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x518))(v4);
}

void (*HeadphoneDevice.doubleTapActionRight.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.doubleTapActionRight.modify;
}

void HeadphoneDevice.doubleTapActionRight.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$doubleTapActionRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x528))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$doubleTapActionRight : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x530))(v9);
}

uint64_t HeadphoneDevice.$doubleTapActionRight.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$doubleTapActionRight.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$doubleTapActionRight.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$doubleTapActionRight.getter();
  return HeadphoneDevice.$doubleTapActionRight.modify;
}

void HeadphoneDevice.$doubleTapActionRight.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$doubleTapActionRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$doubleTapActionRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.crownRotationDirection@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBPeerCrownRotationDirection();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.crownRotationDirection.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.crownRotationDirection.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.crownRotationDirection : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x540))(v2);
}

void key path setter for HeadphoneDevice.crownRotationDirection : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x548))(v4);
}

void (*HeadphoneDevice.crownRotationDirection.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.crownRotationDirection.modify;
}

void HeadphoneDevice.crownRotationDirection.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$crownRotationDirection : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x558))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$crownRotationDirection : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x560))(v9);
}

uint64_t HeadphoneDevice.$crownRotationDirection.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$crownRotationDirection.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$crownRotationDirection.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$crownRotationDirection.getter();
  return HeadphoneDevice.$crownRotationDirection.modify;
}

void HeadphoneDevice.$crownRotationDirection.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$crownRotationDirection.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$crownRotationDirection.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.inEarDetection@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.inEarDetection.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.inEarDetection.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.inEarDetection : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x570))(v2) & 1;
}

void key path setter for HeadphoneDevice.inEarDetection : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x578))(v4 & 1);
}

void (*HeadphoneDevice.inEarDetection.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.inEarDetection.modify;
}

void HeadphoneDevice.inEarDetection.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$inEarDetection : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x588))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$inEarDetection : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x590))(v9);
}

uint64_t HeadphoneDevice.$inEarDetection.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$inEarDetection.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$inEarDetection.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$inEarDetection.getter();
  return HeadphoneDevice.$inEarDetection.modify;
}

void HeadphoneDevice.$inEarDetection.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$inEarDetection.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$inEarDetection.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryCharging@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.batteryCharging.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.batteryCharging.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryCharging : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x5A0))(v2) & 1;
}

void key path setter for HeadphoneDevice.batteryCharging : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x5A8))(v4 & 1);
}

void (*HeadphoneDevice.batteryCharging.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryCharging.modify;
}

void HeadphoneDevice.batteryCharging.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryCharging : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x5B8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryCharging : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x5C0))(v9);
}

uint64_t HeadphoneDevice.$batteryCharging.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryCharging.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryCharging.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryCharging.getter();
  return HeadphoneDevice.$batteryCharging.modify;
}

void HeadphoneDevice.$batteryCharging.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryCharging.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryCharging.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.smartRoutingMode@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBSmartRoutingMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.smartRoutingMode.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.smartRoutingMode.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.smartRoutingMode : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x5D0))(v2);
}

void key path setter for HeadphoneDevice.smartRoutingMode : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x5D8))(v4);
}

void (*HeadphoneDevice.smartRoutingMode.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.smartRoutingMode.modify;
}

void HeadphoneDevice.smartRoutingMode.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$smartRoutingMode : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x5E8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$smartRoutingMode : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x5F0))(v9);
}

uint64_t HeadphoneDevice.$smartRoutingMode.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$smartRoutingMode.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$smartRoutingMode.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$smartRoutingMode.getter();
  return HeadphoneDevice.$smartRoutingMode.modify;
}

void HeadphoneDevice.$smartRoutingMode.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$smartRoutingMode.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$smartRoutingMode.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.microphoneMode@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBMicrophoneMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.microphoneMode.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.microphoneMode.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.microphoneMode : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x600))(v2);
}

void key path setter for HeadphoneDevice.microphoneMode : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x608))(v4);
}

void (*HeadphoneDevice.microphoneMode.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.microphoneMode.modify;
}

void HeadphoneDevice.microphoneMode.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$microphoneMode : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x618))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$microphoneMode : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x620))(v9);
}

uint64_t HeadphoneDevice.$microphoneMode.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$microphoneMode.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$microphoneMode.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$microphoneMode.getter();
  return HeadphoneDevice.$microphoneMode.modify;
}

void HeadphoneDevice.$microphoneMode.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$microphoneMode.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$microphoneMode.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.volumeControlToggle@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.volumeControlToggle.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.volumeControlToggle.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.volumeControlToggle : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x630))(v2) & 1;
}

void key path setter for HeadphoneDevice.volumeControlToggle : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x638))(v4 & 1);
}

void (*HeadphoneDevice.volumeControlToggle.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.volumeControlToggle.modify;
}

void HeadphoneDevice.volumeControlToggle.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$volumeControlToggle : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x648))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$volumeControlToggle : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x650))(v9);
}

uint64_t HeadphoneDevice.$volumeControlToggle.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$volumeControlToggle.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$volumeControlToggle.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$volumeControlToggle.getter();
  return HeadphoneDevice.$volumeControlToggle.modify;
}

void HeadphoneDevice.$volumeControlToggle.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$volumeControlToggle.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$volumeControlToggle.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t HeadphoneDevice.volumeControlView.getter()
{
  uint64_t v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_volumeControlView);
  swift_beginAccess();
  char v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.volumeControlView.setter(char a1)
{
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_volumeControlView);
  swift_beginAccess();
  *uint64_t v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.volumeControlView : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x660))(v2) & 1;
}

void key path setter for HeadphoneDevice.volumeControlView : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x668))(v4 & 1);
}

uint64_t (*HeadphoneDevice.volumeControlView.modify())()
{
  return HeadphoneDevice.volumeControlView.modify;
}

uint64_t HeadphoneDevice.volumeControlView.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.spatialProfileExists@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.spatialProfileExists.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.spatialProfileExists.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.spatialProfileExists : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x678))(v2) & 1;
}

void key path setter for HeadphoneDevice.spatialProfileExists : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x680))(v4 & 1);
}

void (*HeadphoneDevice.spatialProfileExists.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.spatialProfileExists.modify;
}

void HeadphoneDevice.spatialProfileExists.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$spatialProfileExists : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x690))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$spatialProfileExists : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x698))(v9);
}

uint64_t HeadphoneDevice.$spatialProfileExists.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$spatialProfileExists.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$spatialProfileExists.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$spatialProfileExists.getter();
  return HeadphoneDevice.$spatialProfileExists.modify;
}

void HeadphoneDevice.$spatialProfileExists.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$spatialProfileExists.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$spatialProfileExists.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.isCaseSoundSupported@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.isCaseSoundSupported.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.isCaseSoundSupported.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.isCaseSoundSupported : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x6A8))(v2) & 1;
}

void key path setter for HeadphoneDevice.isCaseSoundSupported : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x6B0))(v4 & 1);
}

void (*HeadphoneDevice.isCaseSoundSupported.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.isCaseSoundSupported.modify;
}

void HeadphoneDevice.isCaseSoundSupported.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$isCaseSoundSupported : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x6C0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$isCaseSoundSupported : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x6C8))(v9);
}

uint64_t HeadphoneDevice.$isCaseSoundSupported.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$isCaseSoundSupported.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$isCaseSoundSupported.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$isCaseSoundSupported.getter();
  return HeadphoneDevice.$isCaseSoundSupported.modify;
}

void HeadphoneDevice.$isCaseSoundSupported.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$isCaseSoundSupported.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$isCaseSoundSupported.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.caseSound@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.caseSound.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.caseSound.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.caseSound : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x6D8))(v2) & 1;
}

void key path setter for HeadphoneDevice.caseSound : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x6E0))(v4 & 1);
}

void (*HeadphoneDevice.caseSound.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.caseSound.modify;
}

void HeadphoneDevice.caseSound.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$caseSound : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x6F0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$caseSound : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x6F8))(v9);
}

uint64_t HeadphoneDevice.$caseSound.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$caseSound.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$caseSound.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$caseSound.getter();
  return HeadphoneDevice.$caseSound.modify;
}

void HeadphoneDevice.$caseSound.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$caseSound.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$caseSound.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HeadphoneDevice.airPodsServiceClient()
{
  return 0;
}

id HeadphoneDevice.airPodsServiceClient.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.airPodsServiceClient.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.airPodsServiceClient : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x708))(v2);
}

void key path setter for HeadphoneDevice.airPodsServiceClient : HeadphoneDevice(id *a1, id *a2)
{
  outlined init with copy of BTAirPodsControlServiceClient?(a1, &v6);
  uint64_t v5 = v6;
  id v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x710))(v5);
}

uint64_t (*HeadphoneDevice.airPodsServiceClient.modify())()
{
  return HeadphoneDevice.airPodsServiceClient.modify;
}

uint64_t HeadphoneDevice.airPodsServiceClient.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.isResettingCaseSoundOnError.getter()
{
  id v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isResettingCaseSoundOnError);
  swift_beginAccess();
  char v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isResettingCaseSoundOnError.setter(char a1)
{
  id v4 = (unsigned char *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isResettingCaseSoundOnError);
  swift_beginAccess();
  *id v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isResettingCaseSoundOnError : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x720))(v2) & 1;
}

void key path setter for HeadphoneDevice.isResettingCaseSoundOnError : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x728))(v4 & 1);
}

uint64_t (*HeadphoneDevice.isResettingCaseSoundOnError.modify())()
{
  return HeadphoneDevice.isResettingCaseSoundOnError.modify;
}

uint64_t HeadphoneDevice.isResettingCaseSoundOnError.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.isSettingCaseSoundValue@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.isSettingCaseSoundValue.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.isSettingCaseSoundValue.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.isSettingCaseSoundValue : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x738))(v2) & 1;
}

void key path setter for HeadphoneDevice.isSettingCaseSoundValue : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x740))(v4 & 1);
}

void (*HeadphoneDevice.isSettingCaseSoundValue.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.isSettingCaseSoundValue.modify;
}

void HeadphoneDevice.isSettingCaseSoundValue.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$isSettingCaseSoundValue : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x750))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$isSettingCaseSoundValue : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x758))(v9);
}

uint64_t HeadphoneDevice.$isSettingCaseSoundValue.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$isSettingCaseSoundValue.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$isSettingCaseSoundValue.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$isSettingCaseSoundValue.getter();
  return HeadphoneDevice.$isSettingCaseSoundValue.modify;
}

void HeadphoneDevice.$isSettingCaseSoundValue.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$isSettingCaseSoundValue.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$isSettingCaseSoundValue.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.endCallGesture@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBPeerCallConfig();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.endCallGesture.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.endCallGesture.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.endCallGesture : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x768))(v2);
}

void key path setter for HeadphoneDevice.endCallGesture : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x770))(v4);
}

void (*HeadphoneDevice.endCallGesture.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.endCallGesture.modify;
}

void HeadphoneDevice.endCallGesture.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$endCallGesture : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x780))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$endCallGesture : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x788))(v9);
}

uint64_t HeadphoneDevice.$endCallGesture.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$endCallGesture.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$endCallGesture.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$endCallGesture.getter();
  return HeadphoneDevice.$endCallGesture.modify;
}

void HeadphoneDevice.$endCallGesture.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$endCallGesture.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$endCallGesture.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.muteControlGesture@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBPeerCallConfig();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.muteControlGesture.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.muteControlGesture.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.muteControlGesture : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x798))(v2);
}

void key path setter for HeadphoneDevice.muteControlGesture : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x7A0))(v4);
}

void (*HeadphoneDevice.muteControlGesture.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.muteControlGesture.modify;
}

void HeadphoneDevice.muteControlGesture.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$muteControlGesture : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x7B0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$muteControlGesture : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x7B8))(v9);
}

uint64_t HeadphoneDevice.$muteControlGesture.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$muteControlGesture.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$muteControlGesture.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$muteControlGesture.getter();
  return HeadphoneDevice.$muteControlGesture.modify;
}

void HeadphoneDevice.$muteControlGesture.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$muteControlGesture.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$muteControlGesture.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HeadphoneDevice.serialNumbers()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t HeadphoneDevice.serialNumbers.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_serialNumbers);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.serialNumbers.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_serialNumbers);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for HeadphoneDevice.serialNumbers : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x7C8))(v2);
}

void key path setter for HeadphoneDevice.serialNumbers : HeadphoneDevice(uint64_t *a1, id *a2)
{
  outlined init with copy of [Int : String](a1, &v6);
  uint64_t v5 = v6;
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x7D0))(v5);
}

uint64_t (*HeadphoneDevice.serialNumbers.modify())()
{
  return HeadphoneDevice.serialNumbers.modify;
}

uint64_t HeadphoneDevice.serialNumbers.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.selectiveSpeechListening@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.selectiveSpeechListening.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.selectiveSpeechListening.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.selectiveSpeechListening : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x7E0))(v2) & 1;
}

void key path setter for HeadphoneDevice.selectiveSpeechListening : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x7E8))(v4 & 1);
}

void (*HeadphoneDevice.selectiveSpeechListening.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.selectiveSpeechListening.modify;
}

void HeadphoneDevice.selectiveSpeechListening.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$selectiveSpeechListening : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x7F8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$selectiveSpeechListening : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x800))(v9);
}

uint64_t HeadphoneDevice.$selectiveSpeechListening.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$selectiveSpeechListening.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$selectiveSpeechListening.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$selectiveSpeechListening.getter();
  return HeadphoneDevice.$selectiveSpeechListening.modify;
}

void HeadphoneDevice.$selectiveSpeechListening.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$selectiveSpeechListening.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$selectiveSpeechListening.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.conversationDetect@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.conversationDetect.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.conversationDetect.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.conversationDetect : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x810))(v2) & 1;
}

void key path setter for HeadphoneDevice.conversationDetect : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x818))(v4 & 1);
}

void (*HeadphoneDevice.conversationDetect.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.conversationDetect.modify;
}

void HeadphoneDevice.conversationDetect.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$conversationDetect : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x828))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$conversationDetect : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x830))(v9);
}

uint64_t HeadphoneDevice.$conversationDetect.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$conversationDetect.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$conversationDetect.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$conversationDetect.getter();
  return HeadphoneDevice.$conversationDetect.modify;
}

void HeadphoneDevice.$conversationDetect.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$conversationDetect.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$conversationDetect.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.adaptiveVolume@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D4F8], a2);
}

uint64_t HeadphoneDevice.adaptiveVolume.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.adaptiveVolume.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.adaptiveVolume : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x840))(v2) & 1;
}

void key path setter for HeadphoneDevice.adaptiveVolume : HeadphoneDevice(char *a1, id *a2)
{
  char v4 = *a1;
  char v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x848))(v4 & 1);
}

void (*HeadphoneDevice.adaptiveVolume.modify(void *a1))(uint64_t *a1, char a2)
{
  char v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.adaptiveVolume.modify;
}

void HeadphoneDevice.adaptiveVolume.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$adaptiveVolume : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x858))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$adaptiveVolume : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x860))(v9);
}

uint64_t HeadphoneDevice.$adaptiveVolume.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$adaptiveVolume.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$adaptiveVolume.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$adaptiveVolume.getter();
  return HeadphoneDevice.$adaptiveVolume.modify;
}

void HeadphoneDevice.$adaptiveVolume.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$adaptiveVolume.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$adaptiveVolume.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelMain@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)&v3[1] = a2;
  *(float *)uint64_t v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D5C8], a1);
}

float HeadphoneDevice.batteryLevelMain.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelMain.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelMain : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  float v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x870))(v2);
}

void key path setter for HeadphoneDevice.batteryLevelMain : HeadphoneDevice(float *a1, id *a2)
{
  float v4 = *a1;
  float v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x878))(v2, v4);
}

void (*HeadphoneDevice.batteryLevelMain.modify(void *a1))(uint64_t *a1, char a2)
{
  float v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelMain.modify;
}

void HeadphoneDevice.batteryLevelMain.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelMain : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x888))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryLevelMain : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x890))(v9);
}

uint64_t HeadphoneDevice.$batteryLevelMain.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelMain.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryLevelMain.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelMain.getter();
  return HeadphoneDevice.$batteryLevelMain.modify;
}

void HeadphoneDevice.$batteryLevelMain.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelMain.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelMain.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateMain@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateMain.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateMain.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateMain : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x8A0))(v2);
}

void key path setter for HeadphoneDevice.batteryStateMain : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x8A8))(v4);
}

void (*HeadphoneDevice.batteryStateMain.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateMain.modify;
}

void HeadphoneDevice.batteryStateMain.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateMain : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x8B8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryStateMain : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x8C0))(v9);
}

uint64_t HeadphoneDevice.$batteryStateMain.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateMain.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryStateMain.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryStateMain.getter();
  return HeadphoneDevice.$batteryStateMain.modify;
}

void HeadphoneDevice.$batteryStateMain.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateMain.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateMain.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelLeft@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)&v3[1] = a2;
  *(float *)uint64_t v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D5C8], a1);
}

float HeadphoneDevice.batteryLevelLeft.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelLeft.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelLeft : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  float v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x8D0))(v2);
}

void key path setter for HeadphoneDevice.batteryLevelLeft : HeadphoneDevice(float *a1, id *a2)
{
  float v4 = *a1;
  float v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x8D8))(v2, v4);
}

void (*HeadphoneDevice.batteryLevelLeft.modify(void *a1))(uint64_t *a1, char a2)
{
  float v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelLeft.modify;
}

void HeadphoneDevice.batteryLevelLeft.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x8E8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryLevelLeft : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x8F0))(v9);
}

uint64_t HeadphoneDevice.$batteryLevelLeft.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelLeft.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryLevelLeft.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelLeft.getter();
  return HeadphoneDevice.$batteryLevelLeft.modify;
}

void HeadphoneDevice.$batteryLevelLeft.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateLeft@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateLeft.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateLeft.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateLeft : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x900))(v2);
}

void key path setter for HeadphoneDevice.batteryStateLeft : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x908))(v4);
}

void (*HeadphoneDevice.batteryStateLeft.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateLeft.modify;
}

void HeadphoneDevice.batteryStateLeft.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x918))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryStateLeft : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x920))(v9);
}

uint64_t HeadphoneDevice.$batteryStateLeft.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateLeft.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryStateLeft.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryStateLeft.getter();
  return HeadphoneDevice.$batteryStateLeft.modify;
}

void HeadphoneDevice.$batteryStateLeft.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelRight@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)&v3[1] = a2;
  *(float *)uint64_t v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D5C8], a1);
}

float HeadphoneDevice.batteryLevelRight.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelRight.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelRight : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  float v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x930))(v2);
}

void key path setter for HeadphoneDevice.batteryLevelRight : HeadphoneDevice(float *a1, id *a2)
{
  float v4 = *a1;
  float v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x938))(v2, v4);
}

void (*HeadphoneDevice.batteryLevelRight.modify(void *a1))(uint64_t *a1, char a2)
{
  float v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelRight.modify;
}

void HeadphoneDevice.batteryLevelRight.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x948))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryLevelRight : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x950))(v9);
}

uint64_t HeadphoneDevice.$batteryLevelRight.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelRight.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryLevelRight.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelRight.getter();
  return HeadphoneDevice.$batteryLevelRight.modify;
}

void HeadphoneDevice.$batteryLevelRight.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateRight@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateRight.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateRight.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateRight : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x960))(v2);
}

void key path setter for HeadphoneDevice.batteryStateRight : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x968))(v4);
}

void (*HeadphoneDevice.batteryStateRight.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateRight.modify;
}

void HeadphoneDevice.batteryStateRight.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x978))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryStateRight : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x980))(v9);
}

uint64_t HeadphoneDevice.$batteryStateRight.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateRight.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryStateRight.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryStateRight.getter();
  return HeadphoneDevice.$batteryStateRight.modify;
}

void HeadphoneDevice.$batteryStateRight.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelCase@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)&v3[1] = a2;
  *(float *)uint64_t v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x263F8D5C8], a1);
}

float HeadphoneDevice.batteryLevelCase.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelCase.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelCase : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  float v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x990))(v2);
}

void key path setter for HeadphoneDevice.batteryLevelCase : HeadphoneDevice(float *a1, id *a2)
{
  float v4 = *a1;
  float v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x998))(v2, v4);
}

void (*HeadphoneDevice.batteryLevelCase.modify(void *a1))(uint64_t *a1, char a2)
{
  float v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelCase.modify;
}

void HeadphoneDevice.batteryLevelCase.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelCase : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x9A8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryLevelCase : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x9B0))(v9);
}

uint64_t HeadphoneDevice.$batteryLevelCase.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelCase.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryLevelCase.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelCase.getter();
  return HeadphoneDevice.$batteryLevelCase.modify;
}

void HeadphoneDevice.$batteryLevelCase.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelCase.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelCase.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateCase@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateCase.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateCase.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateCase : HeadphoneDevice(id *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int8 v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x9C0))(v2);
}

void key path setter for HeadphoneDevice.batteryStateCase : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned __int8 v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x9C8))(v4);
}

void (*HeadphoneDevice.batteryStateCase.modify(void *a1))(uint64_t *a1, char a2)
{
  unsigned int v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateCase.modify;
}

void HeadphoneDevice.batteryStateCase.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateCase : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x9D8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$batteryStateCase : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x9E0))(v9);
}

uint64_t HeadphoneDevice.$batteryStateCase.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateCase.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$batteryStateCase.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$batteryStateCase.getter();
  return HeadphoneDevice.$batteryStateCase.modify;
}

void HeadphoneDevice.$batteryStateCase.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateCase.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateCase.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

void property wrapper backing initializer of HeadphoneDevice.hearingRecord(void *a1@<X0>, uint64_t a2@<X8>)
{
  v6[1] = a1;
  id v2 = a1;
  v6[0] = a1;
  uint64_t v3 = type metadata accessor for HearingRecord();
  Published.init(wrappedValue:)((uint64_t)v6, v3, a2);
}

void key path getter for HeadphoneDevice.hearingRecord : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x9F0))(v2);
}

void key path setter for HeadphoneDevice.hearingRecord : HeadphoneDevice(id *a1, id *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  id v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x263F8EED0]) + 0x9F8))(v4);
}

uint64_t HeadphoneDevice.hearingRecord.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

void HeadphoneDevice.hearingRecord.setter(void *a1)
{
  id v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = a1;
  static Published.subscript.setter();
}

void (*HeadphoneDevice.hearingRecord.modify(void *a1))(uint64_t *a1, char a2)
{
  id v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.hearingRecord.modify;
}

void HeadphoneDevice.hearingRecord.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

id variable initialization expression of HeadphoneDevice._hearingRecord()
{
  return HearingRecord.__allocating_init()();
}

void key path getter for HeadphoneDevice.$hearingRecord : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0xA08))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$hearingRecord : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0xA10))(v9);
}

uint64_t HeadphoneDevice.$hearingRecord.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$hearingRecord.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$hearingRecord.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$hearingRecord.getter();
  return HeadphoneDevice.$hearingRecord.modify;
}

void HeadphoneDevice.$hearingRecord.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$hearingRecord.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$hearingRecord.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.audioAccessoryDevice@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v6[1] = a1;
  swift_retain();
  v6[0] = a1;
  uint64_t v2 = type metadata accessor for AADevice();
  Published.init(wrappedValue:)((uint64_t)v6, v2, a2);
  return swift_release();
}

void key path getter for HeadphoneDevice.audioAccessoryDevice : HeadphoneDevice(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0xA20))(v2);
}

void key path setter for HeadphoneDevice.audioAccessoryDevice : HeadphoneDevice(uint64_t *a1, id *a2)
{
  uint64_t v3 = *a1;
  swift_retain();
  uint64_t v5 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v5 & *MEMORY[0x263F8EED0]) + 0xA28))(v3);
}

uint64_t HeadphoneDevice.audioAccessoryDevice.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.audioAccessoryDevice.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  return swift_release();
}

void (*HeadphoneDevice.audioAccessoryDevice.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HeadphoneDevice.audioAccessoryDevice.modify;
}

void HeadphoneDevice.audioAccessoryDevice.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HeadphoneDevice._audioAccessoryDevice()
{
  return AADevice.__allocating_init()();
}

void key path getter for HeadphoneDevice.$audioAccessoryDevice : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0xA38))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HeadphoneDevice.$audioAccessoryDevice : HeadphoneDevice(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0xA40))(v9);
}

uint64_t HeadphoneDevice.$audioAccessoryDevice.getter()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$audioAccessoryDevice.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HeadphoneDevice.$audioAccessoryDevice.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HeadphoneDevice.$audioAccessoryDevice.getter();
  return HeadphoneDevice.$audioAccessoryDevice.modify;
}

void HeadphoneDevice.$audioAccessoryDevice.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$audioAccessoryDevice.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HeadphoneDevice.$audioAccessoryDevice.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HeadphoneDevice.deviceDelegate()
{
  return 0;
}

uint64_t HeadphoneDevice.deviceDelegate.getter()
{
  uint64_t v2 = v0 + OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x253386C10](v2);
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.deviceDelegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*HeadphoneDevice.deviceDelegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  v5[4] = v1;
  uint64_t v2 = OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate;
  v5[5] = OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate;
  uint64_t v4 = v1 + v2;
  swift_beginAccess();
  _DWORD v5[3] = MEMORY[0x253386C10](v4);
  return HeadphoneDevice.deviceDelegate.modify;
}

void HeadphoneDevice.deviceDelegate.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of HeadphoneDeviceDelegate?();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  swift_endAccess();
  free(v2);
}

void *HeadphoneDevice.__allocating_init(cbDevice:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return HeadphoneDevice.init(cbDevice:)(a1);
}

void *HeadphoneDevice.init(cbDevice:)(void *a1)
{
  id v452 = a1;
  v430 = "init(cbDevice:)";
  v431 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v432 = "Fatal error";
  v433 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v434 = "HeadphoneManager/HeadphoneDevice.swift";
  id v541 = 0;
  uint64_t v540 = 0;
  id v539 = 0;
  id v532 = 0;
  char v530 = 0;
  char v529 = 0;
  uint64_t v474 = 0;
  unint64_t v475 = 0;
  uint64_t v454 = 0;
  unint64_t v455 = 0;
  uint64_t v447 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>);
  uint64_t v443 = *(void *)(v447 - 8);
  uint64_t v444 = v447 - 8;
  unint64_t v435 = (*(void *)(v443 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v447, v1);
  uint64_t v446 = (uint64_t)v172 - v435;
  uint64_t v442 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>);
  uint64_t v438 = *(void *)(v442 - 8);
  uint64_t v439 = v442 - 8;
  unint64_t v436 = (*(void *)(v438 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (void *)MEMORY[0x270FA5388](v451, v2);
  uint64_t v441 = (uint64_t)v172 - v436;
  uint64_t v540 = v4;
  id v5 = v3;
  uint64_t v6 = v451;
  uint64_t v7 = v451;
  uint64_t v8 = v451;
  char v9 = v451;
  uint64_t v10 = v451;
  uint64_t v11 = v451;
  id v12 = v451;
  uint64_t v13 = v451;
  uint64_t v14 = v451;
  uint64_t v15 = v451;
  uint64_t v16 = v451;
  uint64_t v17 = v451;
  uint64_t v18 = v451;
  uint64_t v19 = v451;
  unsigned int v20 = v451;
  uint64_t v21 = v451;
  uint64_t v22 = v451;
  uint64_t v23 = v451;
  uint64_t v24 = v451;
  uint64_t v25 = v451;
  uint64_t v26 = v451;
  unint64_t v27 = v451;
  unint64_t v28 = v451;
  uint64_t v29 = v451;
  uint32_t v30 = v451;
  int v31 = v451;
  uint64_t v32 = v451;
  uint64_t v33 = v451;
  id v34 = v451;
  id v35 = v451;
  id v36 = v451;
  id v37 = v451;
  uint64_t v38 = v451;
  uint64_t v39 = v451;
  uint64_t v40 = v451;
  uint64_t v41 = v451;
  uint64_t v42 = v451;
  uint64_t v43 = v451;
  uint64_t v44 = v451;
  unint64_t v45 = v451;
  uint64_t v46 = v451;
  id v47 = v451;
  id v48 = v451;
  uint64_t v49 = v451;
  uint64_t v50 = v451;
  uint64_t v51 = v451;
  uint64_t v52 = v451;
  uint64_t v53 = v451;
  uint32_t v54 = v451;
  uint64_t v55 = v451;
  uint32_t v56 = v451;
  id v57 = v451;
  uint64_t v58 = v451;
  id v59 = v451;
  uint64_t v60 = v451;
  uint64_t v61 = v451;
  uint64_t v62 = v451;
  uint64_t v63 = v451;
  id v64 = v451;
  id v541 = v451;
  uint64_t v449 = 0;
  *(void *)&v451[OBJC_IVAR___HPMHeadphoneDevice_aaDevice] = 0;

  id v65 = v451;
  *(void *)&v451[OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient] = v449;

  uint64_t v437 = OBJC_IVAR___HPMHeadphoneDevice_serialNumbers;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v66 = Dictionary.init(dictionaryLiteral:)();
  id v67 = v451;
  *(void *)&v451[v437] = v66;

  uint64_t v440 = OBJC_IVAR___HPMHeadphoneDevice__hearingRecord;
  type metadata accessor for HearingRecord();
  id v68 = HearingRecord.__allocating_init()();
  uint64_t v69 = v451;
  property wrapper backing initializer of HeadphoneDevice.hearingRecord(v68, v441);
  (*(void (**)(char *, uint64_t, uint64_t))(v438 + 32))(&v69[v440], v441, v442);

  uint64_t v445 = OBJC_IVAR___HPMHeadphoneDevice__audioAccessoryDevice;
  type metadata accessor for AADevice();
  uint64_t v70 = AADevice.__allocating_init()();
  uint64_t v71 = v451;
  property wrapper backing initializer of HeadphoneDevice.audioAccessoryDevice(v70, v446);
  (*(void (**)(char *, uint64_t, uint64_t))(v443 + 32))(&v71[v445], v446, v447);

  swift_unknownObjectWeakInit();
  id v72 = v451;
  int v448 = 0;
  *(_DWORD *)&v451[OBJC_IVAR___HPMHeadphoneDevice_accessorySettingFeatureBitMask] = 0;

  id v73 = v451;
  *(_DWORD *)&v451[OBJC_IVAR___HPMHeadphoneDevice_deviceColor] = v448;

  id v74 = v452;
  id v75 = v451;
  *(void *)&v451[OBJC_IVAR___HPMHeadphoneDevice_cbDevice] = v452;

  type metadata accessor for CBProductInfo();
  id v450 = @nonobjc CBProductInfo.__allocating_init(productID:)(objc_msgSend(v452, sel_productID));
  id v539 = v450;
  id v76 = v450;
  id v77 = v451;
  *(void *)&v451[OBJC_IVAR___HPMHeadphoneDevice_productInfo] = v450;

  id v453 = objc_msgSend(v452, sel_name);
  if (v453)
  {
    id v429 = v453;
    id v426 = v453;
    v427._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v427._object = v78;

    Swift::String v428 = v427;
  }
  else
  {
    v428._uint64_t countAndFlagsBits = 0;
    v428._object = 0;
  }
  Swift::String v537 = v428;
  if (v428._object)
  {
    Swift::String v538 = v537;
  }
  else
  {
    Swift::String v538 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, 1);
    outlined destroy of String?();
  }
  Swift::String v423 = v538;
  v422 = &v451[OBJC_IVAR___HPMHeadphoneDevice__name];
  v424 = &v536;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.name(v423._countAndFlagsBits, (uint64_t)v423._object, (uint64_t)v422);
  swift_endAccess();

  id v425 = objc_msgSend(v450, sel_sfSymbolNameMain);
  if (v425)
  {
    id v421 = v425;
    id v418 = v425;
    v419._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v419._object = v79;

    Swift::String v420 = v419;
  }
  else
  {
    v420._uint64_t countAndFlagsBits = 0;
    v420._object = 0;
  }
  Swift::String v534 = v420;
  if (v420._object)
  {
    Swift::String v535 = v534;
  }
  else
  {
    Swift::String v535 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("headphones", 0xAuLL, 1);
    outlined destroy of String?();
  }
  Swift::String v533 = v535;
  uint64_t v80 = String.init<A>(_:)();
  uint64_t v414 = v81;
  id v415 = getDeviceIcon(symbolName:)(v80, v81);
  swift_bridgeObjectRelease();
  id v532 = v415;
  unint64_t v416 = type metadata accessor for UIImage();
  v417 = (CGImage *)objc_msgSend(v415, sel_CGImage);
  if (v417)
  {
    CGImageRef v413 = v417;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  Class isa = UIImage.__allocating_init(cgImage:)(v413).super.isa;
  id v83 = v451;
  *(void *)&v451[OBJC_IVAR___HPMHeadphoneDevice_icon] = isa;

  id v412 = objc_msgSend(v452, sel_btAddressData);
  if (v412)
  {
    id v411 = v412;
    id v406 = v412;
    uint64_t v407 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v408 = v84;

    uint64_t v409 = v407;
    unint64_t v410 = v408;
  }
  else
  {
    uint64_t v409 = 0;
    unint64_t v410 = 0xF000000000000000;
  }
  unint64_t v404 = v410;
  uint64_t v405 = v409;
  if ((v410 & 0xF000000000000000) == 0xF000000000000000)
  {

    type metadata accessor for Log();
    uint64_t v400 = static Log.shared.getter();
    int v401 = 1;
    object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Invalid BT Address", 0x24uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    Swift::String v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, v401 & 1);
    id v86 = v451;
    *(Swift::String *)&v451[OBJC_IVAR___HPMHeadphoneDevice_btAddress] = v85;
  }
  else
  {
    uint64_t v402 = v405;
    unint64_t v403 = v404;
    unint64_t v398 = v404;
    uint64_t v397 = v405;

    uint64_t v454 = v397;
    unint64_t v455 = v398;
    Swift::String v394 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X-%02X-%02X-%02X-%02X-%02X", 0x1DuLL, 1);
    uint64_t v392 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
    uint64_t v393 = _allocateUninitializedArray<A>(_:)();
    v391 = v87;
    char v88 = Data.subscript.getter();
    uint64_t v89 = v391;
    uint64_t v389 = MEMORY[0x263F8E778];
    v391[3] = MEMORY[0x263F8E778];
    uint64_t v390 = MEMORY[0x263F8E7C0];
    v89[4] = MEMORY[0x263F8E7C0];
    *(unsigned char *)uint64_t v89 = v88;
    char v90 = Data.subscript.getter();
    uint64_t v91 = v390;
    uint64_t v92 = v391;
    v391[8] = v389;
    v92[9] = v91;
    *((unsigned char *)v92 + 40) = v90;
    char v93 = Data.subscript.getter();
    uint64_t v94 = v390;
    uint64_t v95 = v391;
    v391[13] = v389;
    v95[14] = v94;
    *((unsigned char *)v95 + 80) = v93;
    char v96 = Data.subscript.getter();
    uint64_t v97 = v390;
    id v98 = v391;
    v391[18] = v389;
    v98[19] = v97;
    *((unsigned char *)v98 + 120) = v96;
    char v99 = Data.subscript.getter();
    uint64_t v100 = v390;
    uint64_t v101 = v391;
    v391[23] = v389;
    v101[24] = v100;
    *((unsigned char *)v101 + 160) = v99;
    char v102 = Data.subscript.getter();
    uint64_t v103 = v390;
    unint64_t v104 = v391;
    v391[28] = v389;
    v104[29] = v103;
    *((unsigned char *)v104 + 200) = v102;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v395 = String.init(format:_:)();
    uint64_t v396 = v105;
    swift_bridgeObjectRelease();
    uint64_t v106 = v396;
    id v107 = v451;
    uint64_t v108 = (uint64_t *)&v451[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
    *uint64_t v108 = v395;
    v108[1] = v106;

    outlined consume of Data._Representation(v397, v398);
  }
  int v371 = objc_msgSend(v452, sel_listeningMode);
  v370 = &v451[OBJC_IVAR___HPMHeadphoneDevice__listeningMode];
  v372 = &v531;
  uint64_t v380 = 33;
  uint64_t v381 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.listeningMode(v371, (uint64_t)v370);
  swift_endAccess();

  id v109 = v451;
  v451[OBJC_IVAR___HPMHeadphoneDevice_isUpdatingDeviceConfig] = 0;

  unint64_t v374 = 0x1F647D000uLL;
  unsigned int v373 = [v452 (SEL)0x1F647D918];
  char v530 = v373;
  unint64_t v379 = 0x1F68AD000uLL;
  unsigned int v375 = [v452 (SEL)0x1F68AD537];
  char v529 = v375;
  unsigned int v377 = [v452 (SEL)(v374 + 2328)];
  v376 = &v451[OBJC_IVAR___HPMHeadphoneDevice__clickHoldModeLeft];
  v378 = &v528;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.clickHoldModeLeft(v377, (uint64_t)v376);
  swift_endAccess();

  unsigned int v383 = [v452 (SEL)(v379 + 1335)];
  v382 = &v451[OBJC_IVAR___HPMHeadphoneDevice__clickHoldModeRight];
  v384 = &v527;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.clickHoldModeRight(v383, (uint64_t)v382);
  swift_endAccess();

  unint64_t v385 = 0x1F7087000uLL;
  unsigned int v110 = [v452 (SEL)0x1F7087546];
  id v111 = v451;
  *(_DWORD *)&v451[OBJC_IVAR___HPMHeadphoneDevice_listeningModeConfigs] = v110;

  v526[1] = [v452 (SEL)(v385 + 1350)];
  v387 = v526;
  v526[0] = 1;
  uint64_t v386 = type metadata accessor for CBListeningModeConfigs();
  unint64_t v388 = lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  BOOL v369 = (OptionSet<>.contains(_:)() & 1) != 0;
  BOOL v367 = v369;
  v366 = &v451[OBJC_IVAR___HPMHeadphoneDevice__pressHoldOff];
  v368 = &v525;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldOff(v367, (uint64_t)v366);
  swift_endAccess();

  v524[7] = objc_msgSend(v452, sel_listeningModeConfigs);
  v524[6] = 4;
  BOOL v365 = (OptionSet<>.contains(_:)() & 1) != 0;
  BOOL v363 = v365;
  v362 = &v451[OBJC_IVAR___HPMHeadphoneDevice__pressHoldTransparency];
  v364 = v524;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldTransparency(v363, (uint64_t)v362);
  swift_endAccess();

  v523[7] = objc_msgSend(v452, sel_listeningModeConfigs);
  v523[6] = 8;
  BOOL v361 = (OptionSet<>.contains(_:)() & 1) != 0;
  BOOL v359 = v361;
  v358 = &v451[OBJC_IVAR___HPMHeadphoneDevice__pressHoldAuto];
  v360 = v523;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldAuto(v359, (uint64_t)v358);
  swift_endAccess();

  v522[7] = objc_msgSend(v452, sel_listeningModeConfigs);
  v522[6] = 2;
  BOOL v357 = (OptionSet<>.contains(_:)() & 1) != 0;
  BOOL v344 = v357;
  v343 = &v451[OBJC_IVAR___HPMHeadphoneDevice__pressHoldNoiseCancel];
  v345 = v522;
  uint64_t v349 = 33;
  uint64_t v350 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldNoiseCancel(v344, (uint64_t)v343);
  swift_endAccess();

  unsigned int v347 = objc_msgSend(v452, sel_doubleTapActionLeft);
  v346 = &v451[OBJC_IVAR___HPMHeadphoneDevice__doubleTapActionLeft];
  v348 = &v521;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.doubleTapActionLeft(v347, (uint64_t)v346);
  swift_endAccess();

  unsigned int v352 = objc_msgSend(v452, sel_doubleTapActionRight);
  v351 = &v451[OBJC_IVAR___HPMHeadphoneDevice__doubleTapActionRight];
  v353 = &v520;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.doubleTapActionRight(v352, (uint64_t)v351);
  swift_endAccess();

  unsigned __int8 v112 = objc_msgSend(v452, sel_crownRotationDirection);
  v356 = &v519;
  unsigned __int8 v519 = v112;
  v354 = &v518;
  char v518 = 0;
  uint64_t v355 = type metadata accessor for CBPeerCrownRotationDirection();
  lazy protocol witness table accessor for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection();
  if (== infix<A>(_:_:)()) {
    unsigned int v342 = 1;
  }
  else {
    unsigned int v342 = objc_msgSend(v452, sel_crownRotationDirection);
  }
  unsigned int v318 = v342;
  v317 = &v451[OBJC_IVAR___HPMHeadphoneDevice__crownRotationDirection];
  v319 = &v517;
  uint64_t v332 = 33;
  uint64_t v333 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.crownRotationDirection(v318, (uint64_t)v317);
  swift_endAccess();

  unsigned __int8 v113 = objc_msgSend(v452, sel_placementMode);
  v322 = &v516;
  unsigned __int8 v516 = v113;
  v320 = &v515;
  char v515 = 1;
  uint64_t v337 = 0;
  uint64_t v321 = type metadata accessor for CBDevicePlacementMode();
  lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode();
  uint64_t v340 = MEMORY[0x263F8E4B0];
  int v324 = == infix<A>(_:_:)();
  v323 = &v451[OBJC_IVAR___HPMHeadphoneDevice__inEarDetection];
  v325 = &v514;
  swift_beginAccess();
  int v327 = 1;
  property wrapper backing initializer of HeadphoneDevice.inEarDetection(v324 & 1, (uint64_t)v323);
  swift_endAccess();

  v326 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryCharging];
  v328 = &v513;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryCharging(v327 & 1, (uint64_t)v326);
  swift_endAccess();

  unsigned int v330 = objc_msgSend(v452, sel_endCallConfig);
  v329 = &v451[OBJC_IVAR___HPMHeadphoneDevice__endCallGesture];
  v331 = &v512;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.endCallGesture(v330, (uint64_t)v329);
  swift_endAccess();

  unsigned int v335 = objc_msgSend(v452, sel_muteControlConfig);
  v334 = &v451[OBJC_IVAR___HPMHeadphoneDevice__muteControlGesture];
  v336 = &v511;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.muteControlGesture(v335, (uint64_t)v334);
  swift_endAccess();

  unsigned __int8 v114 = objc_msgSend(v452, sel_smartRoutingMode);
  v341 = &v510;
  unsigned __int8 v510 = v114;
  v338 = &v509;
  char v509 = 0;
  uint64_t v339 = type metadata accessor for CBSmartRoutingMode();
  lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode();
  if (== infix<A>(_:_:)()) {
    unsigned int v316 = 2;
  }
  else {
    unsigned int v316 = objc_msgSend(v452, sel_smartRoutingMode);
  }
  unsigned int v301 = v316;
  v300 = &v451[OBJC_IVAR___HPMHeadphoneDevice__smartRoutingMode];
  v302 = &v508;
  uint64_t v308 = 33;
  uint64_t v312 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.smartRoutingMode(v301, (uint64_t)v300);
  swift_endAccess();

  unsigned int v304 = objc_msgSend(v452, sel_microphoneMode);
  v303 = &v451[OBJC_IVAR___HPMHeadphoneDevice__microphoneMode];
  v305 = &v507;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.microphoneMode(v304, (uint64_t)v303);
  swift_endAccess();

  char v115 = CBProductIDIsAirPods(objc_msgSend(v452, sel_productID));
  id v116 = v451;
  v451[OBJC_IVAR___HPMHeadphoneDevice_isAirpods] = v115 & 1;

  id v117 = v451;
  v451[OBJC_IVAR___HPMHeadphoneDevice_isResettingCaseSoundOnError] = 0;

  v306 = &v451[OBJC_IVAR___HPMHeadphoneDevice__isSettingCaseSoundValue];
  v307 = &v506;
  swift_beginAccess();
  int v310 = 0;
  property wrapper backing initializer of HeadphoneDevice.isSettingCaseSoundValue(0, (uint64_t)v306);
  swift_endAccess();

  v309 = &v451[OBJC_IVAR___HPMHeadphoneDevice__isCaseSoundSupported];
  v311 = &v505;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.isCaseSoundSupported(v310 & 1, (uint64_t)v309);
  swift_endAccess();

  v313 = (id *)&v451[OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient];
  v314 = &v503;
  swift_beginAccess();
  id v315 = *v313;
  id v118 = v315;
  swift_endAccess();
  id v502 = v315;
  if (v315)
  {
    id v504 = v502;
  }
  else
  {
    id v504 = 0;
    outlined destroy of BTAirPodsControlServiceClient?(&v502);
  }

  id v280 = v504;
  v279 = (void **)&v451[OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient];
  v281 = &v501;
  uint64_t v290 = 33;
  uint64_t v291 = 0;
  swift_beginAccess();
  unint64_t v119 = *v279;
  *v279 = v280;

  swift_endAccess();
  v282 = &v451[OBJC_IVAR___HPMHeadphoneDevice__caseSound];
  v283 = &v500;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.caseSound(1, (uint64_t)v282);
  swift_endAccess();

  id v120 = v451;
  v451[OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSupport] = 0;

  v284 = &v451[OBJC_IVAR___HPMHeadphoneDevice__findMyNetworkEnable];
  v285 = &v499;
  swift_beginAccess();
  int v293 = 0;
  property wrapper backing initializer of HeadphoneDevice.findMyNetworkEnable(0, (uint64_t)v284);
  swift_endAccess();

  v286 = &v451[OBJC_IVAR___HPMHeadphoneDevice__isSettingFindMyNetworkValue];
  v287 = &v498;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.isSettingFindMyNetworkValue(v293 & 1, (uint64_t)v286);
  swift_endAccess();

  id v121 = v451;
  v451[OBJC_IVAR___HPMHeadphoneDevice_isResettingFindMyNetworkOnError] = 0;

  id v122 = v451;
  v451[OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkValueUpdated] = 0;

  uint64_t v295 = 0;
  type metadata accessor for SPOwnerInterface();
  id v288 = SPOwnerInterface.__allocating_init()();
  id v289 = objc_msgSend(v288, sel_ownerSession);

  id v123 = v451;
  *(void *)&v451[OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSession] = v289;

  v292 = &v451[OBJC_IVAR___HPMHeadphoneDevice__spatialProfileExists];
  v294 = &v497;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.spatialProfileExists(v293 & 1, (uint64_t)v292);
  swift_endAccess();

  v298 = &v496;
  char v496 = v373;
  v296 = &v495;
  char v495 = 6;
  uint64_t v297 = type metadata accessor for CBPeerUIGestureMode();
  unint64_t v299 = lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
  if (== infix<A>(_:_:)())
  {
    int v278 = 1;
  }
  else
  {
    v494[29] = v373;
    v494[28] = 7;
    int v278 = == infix<A>(_:_:)();
  }
  if (v278)
  {
    int v277 = 1;
  }
  else
  {
    v494[27] = v375;
    v494[26] = 6;
    int v277 = == infix<A>(_:_:)();
  }
  if (v277)
  {
    int v276 = 1;
  }
  else
  {
    v494[25] = v375;
    v494[24] = 7;
    int v276 = == infix<A>(_:_:)();
  }
  int v224 = v276;
  v223 = &v451[OBJC_IVAR___HPMHeadphoneDevice__volumeControlToggle];
  v225 = v494;
  uint64_t v267 = 33;
  uint64_t v268 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.volumeControlToggle(v224 & 1, (uint64_t)v223);
  swift_endAccess();

  id v124 = v451;
  v451[OBJC_IVAR___HPMHeadphoneDevice_volumeControlView] = 0;

  unsigned __int8 v125 = objc_msgSend(v452, sel_selectiveSpeechListeningConfig);
  v228 = &v493;
  unsigned __int8 v493 = v125;
  v226 = &v492;
  int v238 = 1;
  char v492 = 1;
  uint64_t v272 = 0;
  uint64_t v227 = type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
  lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig();
  uint64_t v241 = MEMORY[0x263F8E790];
  int v230 = == infix<A>(_:_:)();
  v229 = &v451[OBJC_IVAR___HPMHeadphoneDevice__selectiveSpeechListening];
  v231 = &v491;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.selectiveSpeechListening(v230 & 1, (uint64_t)v229);
  swift_endAccess();

  unsigned __int8 v126 = objc_msgSend(v452, sel_conversationDetectConfig);
  v234 = &v490;
  unsigned __int8 v490 = v126;
  v232 = &v489;
  char v489 = v238;
  uint64_t v233 = type metadata accessor for CBPeerConversationDetectConfig();
  lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig();
  int v236 = == infix<A>(_:_:)();
  v235 = &v451[OBJC_IVAR___HPMHeadphoneDevice__conversationDetect];
  v237 = &v488;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.conversationDetect(v236 & 1, (uint64_t)v235);
  swift_endAccess();

  unsigned __int8 v127 = objc_msgSend(v452, sel_adaptiveVolumeConfig);
  v242 = &v487;
  unsigned __int8 v487 = v127;
  v239 = &v486;
  char v486 = v238;
  uint64_t v240 = type metadata accessor for CBPeerAdaptiveVolumeConfig();
  lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig();
  int v244 = == infix<A>(_:_:)();
  v243 = &v451[OBJC_IVAR___HPMHeadphoneDevice__adaptiveVolume];
  v245 = &v485;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.adaptiveVolume(v244 & 1, (uint64_t)v243);
  swift_endAccess();

  objc_msgSend(v452, sel_batteryLevelLeft);
  float v247 = v128;
  v246 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelLeft];
  v248 = &v484;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelLeft((uint64_t)v246, v247);
  swift_endAccess();

  objc_msgSend(v452, sel_batteryLevelRight);
  float v250 = v129;
  v249 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelRight];
  v251 = &v483;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelRight((uint64_t)v249, v250);
  swift_endAccess();

  objc_msgSend(v452, sel_batteryLevelCase);
  float v253 = v130;
  v252 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelCase];
  v254 = &v482;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelCase((uint64_t)v252, v253);
  swift_endAccess();

  objc_msgSend(v452, sel_batteryLevelMain);
  float v256 = v131;
  v255 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelMain];
  v257 = &v481;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelMain((uint64_t)v255, v256);
  swift_endAccess();

  unsigned int v259 = objc_msgSend(v452, sel_batteryStateLeft);
  v258 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryStateLeft];
  v260 = &v480;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateLeft(v259, (uint64_t)v258);
  swift_endAccess();

  unsigned int v262 = objc_msgSend(v452, sel_batteryStateRight);
  v261 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryStateRight];
  v263 = &v479;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateRight(v262, (uint64_t)v261);
  swift_endAccess();

  unsigned int v265 = objc_msgSend(v452, sel_batteryStateCase);
  v264 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryStateCase];
  v266 = &v478;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateCase(v265, (uint64_t)v264);
  swift_endAccess();

  unsigned int v270 = objc_msgSend(v452, sel_batteryStateMain);
  v269 = &v451[OBJC_IVAR___HPMHeadphoneDevice__batteryStateMain];
  v271 = &v477;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateMain(v270, (uint64_t)v269);
  swift_endAccess();

  id v273 = v541;
  uint64_t v132 = (objc_class *)type metadata accessor for HeadphoneDevice();
  v476.receiver = v273;
  v476.super_class = v132;
  v274 = objc_msgSendSuper2(&v476, sel_init);
  unint64_t v133 = v274;
  uint64_t v134 = v274;
  id v135 = v274;
  Swift::String v136 = v274;
  Swift::String v137 = v274;
  uint64_t v138 = v274;
  uint64_t v139 = v274;
  uint64_t v140 = v274;
  uint64_t v141 = v274;
  uint64_t v142 = v274;
  uint64_t v143 = v274;
  uint64_t v144 = v274;
  uint64_t v145 = v274;
  char v146 = v274;
  uint64_t v147 = v274;
  id v541 = v274;
  id v275 = objc_msgSend(v452, sel_btAddressData);
  if (v275)
  {
    id v222 = v275;
    id v217 = v275;
    uint64_t v218 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v219 = v148;

    uint64_t v220 = v218;
    unint64_t v221 = v219;
  }
  else
  {
    uint64_t v220 = 0;
    unint64_t v221 = 0xF000000000000000;
  }
  unint64_t v215 = v221;
  uint64_t v216 = v220;
  if ((v221 & 0xF000000000000000) != 0xF000000000000000)
  {
    uint64_t v213 = v216;
    unint64_t v214 = v215;
    unint64_t v209 = v215;
    uint64_t v210 = v216;
    uint64_t v474 = v216;
    unint64_t v475 = v215;
    v473[1] = objc_msgSend(v450, sel_flags);
    v212 = v473;
    v473[0] = 0x40000;
    uint64_t v211 = type metadata accessor for CBProductFlags();
    lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
    char v149 = OptionSet<>.contains(_:)();
    if (v149) {
      (*(void (**)(uint64_t, unint64_t))((*v274 & *MEMORY[0x263F8EED0]) + 0xAB0))(v210, v209);
    }

    (*(void (**)(void))((*v274 & *MEMORY[0x263F8EED0]) + 0xAE8))();
    if (CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v452, sel_endCallCapability)))
    {
      char v150 = v274;

      char v151 = (*(uint64_t (**)(void))((*v150 & *MEMORY[0x263F8EED0]) + 0x768))();
      v206 = v462;
      v462[0] = v151;
      v204 = &v461;
      char v461 = 0;
      uint64_t v205 = type metadata accessor for CBPeerCallConfig();
      unint64_t v207 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      int v208 = == infix<A>(_:_:)();

      if (v208)
      {
        int v203 = 1;
      }
      else
      {
        char v460 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x263F8EED0]) + 0x768))();
        char v459 = 1;
        int v203 = == infix<A>(_:_:)();
      }
      int v202 = v203;

      if (v202)
      {
        type metadata accessor for Log();
        uint64_t v200 = static Log.shared.getter();
        uint64_t v152 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        uint64_t v196 = &v457;
        uint64_t v457 = v152;
        uint64_t v458 = v153;
        int v194 = 1;
        Swift::String v154 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: read endCallConfig as ", 0x28uLL, 1);
        char v193 = v154._object;
        DefaultStringInterpolation.appendLiteral(_:)(v154);
        unsigned __int8 v155 = v274;
        uint64_t v156 = swift_bridgeObjectRelease();
        char v456 = (*(uint64_t (**)(uint64_t))((*v155 & *MEMORY[0x263F8EED0]) + 0x768))(v156);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();

        Swift::String v157 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", defaulting to singleTap ", 0x1AuLL, v194 & 1);
        uint64_t v195 = v157._object;
        DefaultStringInterpolation.appendLiteral(_:)(v157);
        swift_bridgeObjectRelease();
        uint64_t v198 = v457;
        uint64_t v197 = v458;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        uint64_t v199 = v158;
        int v201 = 2;
        dispatch thunk of Log.error(_:function:file:line:)();
        swift_bridgeObjectRelease();
        swift_release();
        HeadphoneDevice.endCallGesture.setter();
      }
      else
      {
      }
    }
    else
    {

      if (!CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v452, sel_muteControlCapability)))
      {

        goto LABEL_70;
      }
      char v159 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x263F8EED0]) + 0x768))();
      uint64_t v190 = &v472;
      char v472 = v159;
      uint64_t v188 = &v471;
      char v471 = 0;
      uint64_t v189 = type metadata accessor for CBPeerCallConfig();
      unint64_t v191 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      int v192 = == infix<A>(_:_:)();

      if (v192)
      {
        int v187 = 1;
      }
      else
      {
        char v470 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x263F8EED0]) + 0x768))();
        char v469 = 1;
        int v187 = == infix<A>(_:_:)();
      }
      int v186 = v187;

      if (v186)
      {
        int v185 = 1;
      }
      else
      {
        char v468 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x263F8EED0]) + 0x798))();
        char v467 = 0;
        int v185 = == infix<A>(_:_:)();
      }
      int v184 = v185;

      if (v184)
      {
        int v183 = 1;
      }
      else
      {
        char v466 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x263F8EED0]) + 0x798))();
        char v465 = 1;
        int v183 = == infix<A>(_:_:)();
      }
      int v182 = v183;

      if (v182)
      {
        type metadata accessor for Log();
        uint64_t v180 = static Log.shared.getter();
        uint64_t v160 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        signed __int8 v176 = &v463;
        uint64_t v463 = v160;
        uint64_t v464 = v161;
        int v174 = 1;
        Swift::String v162 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: read endCallConfig as ", 0x28uLL, 1);
        v172[0] = v162._object;
        DefaultStringInterpolation.appendLiteral(_:)(v162);
        unsigned __int8 v163 = v274;
        uint64_t v164 = swift_bridgeObjectRelease();
        uint64_t v165 = *v163;
        signed __int8 v173 = (void *)MEMORY[0x263F8EED0];
        v462[2] = (*(uint64_t (**)(uint64_t))((v165 & *MEMORY[0x263F8EED0]) + 0x768))(v164);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();

        Swift::String v166 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", defaulting to doubleTap. Read muteControlConfig as ", 0x35uLL, v174 & 1);
        v172[1] = v166._object;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        unsigned __int8 v167 = v274;
        uint64_t v168 = swift_bridgeObjectRelease();
        v462[1] = (*(uint64_t (**)(uint64_t))((*v167 & *v173) + 0x798))(v168);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();

        Swift::String v169 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", defaulting to singleTap ", 0x1AuLL, v174 & 1);
        unsigned __int8 v175 = v169._object;
        DefaultStringInterpolation.appendLiteral(_:)(v169);
        swift_bridgeObjectRelease();
        uint64_t v178 = v463;
        uint64_t v177 = v464;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        uint64_t v179 = v170;
        int v181 = 2;
        dispatch thunk of Log.error(_:function:file:line:)();
        swift_bridgeObjectRelease();
        swift_release();
        HeadphoneDevice.muteControlGesture.setter();

        HeadphoneDevice.endCallGesture.setter();
      }
      else
      {
      }
    }

LABEL_70:
    outlined consume of Data._Representation(v210, v209);

    goto LABEL_71;
  }

LABEL_71:
  return v274;
}

uint64_t variable initialization expression of HeadphoneDevice.accessorySettingFeatureBitMask()
{
  return 0;
}

uint64_t variable initialization expression of HeadphoneDevice.deviceColor()
{
  return 0;
}

id @nonobjc CBProductInfo.__allocating_init(productID:)(unsigned int a1)
{
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_productInfoWithProductID_, a1);
  return v1;
}

UIImage __swiftcall UIImage.__allocating_init(cgImage:)(CGImageRef cgImage)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (UIImage)@nonobjc UIImage.init(cgImage:)(cgImage);
}

id SPOwnerInterface.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SPOwnerInterface.init()();
}

uint64_t CBPeerCallManagementCapability.rawValue.getter(uint64_t result)
{
  return result;
}

id HeadphoneDevice.__allocating_init(cbDevice:delegate:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return HeadphoneDevice.init(cbDevice:delegate:)(a1);
}

id HeadphoneDevice.init(cbDevice:delegate:)(void *a1)
{
  id v2 = v1;
  uint64_t v10 = v1;
  uint64_t ObjectType = swift_getObjectType();

  id v4 = a1;
  id v9 = (id)(*(uint64_t (**)(void *))(ObjectType + 2664))(a1);
  id v5 = v9;
  id v6 = v9;
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  swift_unknownObjectRetain();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();

  swift_unknownObjectRelease();
  return v9;
}

char *HeadphoneDevice.__allocating_init(_aaDevice:cbDevice:delegate:)(void *a1, void *a2, uint64_t a3)
{
  id v4 = objc_allocWithZone(v3);
  return HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(a1, a2, a3);
}

char *HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(void *a1, void *a2, uint64_t a3)
{
  id v262 = a1;
  id v329 = a2;
  uint64_t v256 = a3;
  float v253 = v3;
  int v324 = "init(_aaDevice:cbDevice:delegate:)";
  v326 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  Builtin::Word v318 = 0;
  v229 = implicit closure #1 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:);
  int v230 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  v231 = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_0;
  v232 = partial apply for implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:);
  uint64_t v233 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  v234 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v238 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v239 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v240 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v241 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v368 = 0;
  uint64_t v367 = 0;
  uint64_t v366 = 0;
  uint64_t v259 = 0;
  uint64_t v242 = 0;
  uint64_t v348 = 0;
  uint64_t v349 = 0;
  id v341 = 0;
  uint64_t v243 = type metadata accessor for Logger();
  uint64_t v244 = *(void *)(v243 - 8);
  uint64_t v245 = v243 - 8;
  uint64_t v249 = *(void *)(v244 + 64);
  unint64_t v246 = (v249 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v3, v329);
  float v247 = (char *)&v124 - v246;
  unint64_t v248 = v246;
  uint64_t v6 = MEMORY[0x270FA5388](v4, v5);
  float v250 = (char *)&v124 - v248;
  unint64_t v251 = (v249 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = (void *)MEMORY[0x270FA5388](v6, v7);
  v252 = (char *)&v124 - v251;
  uint64_t v368 = v9;
  uint64_t v367 = v10;
  uint64_t v366 = v11;
  id v12 = v8;
  BOOL v369 = v253;
  uint64_t v13 = swift_getObjectType();

  id v14 = v329;
  uint64_t v15 = (char *)(*(uint64_t (**)(id))(v13 + 2664))(v329);
  int v310 = v15;
  v254 = v369;
  uint64_t v16 = v15;
  uint64_t v17 = v15;
  uint64_t v18 = v15;
  uint64_t v19 = v15;
  unsigned int v20 = v15;
  uint64_t v21 = v15;
  uint64_t v22 = v15;
  uint64_t v23 = v15;
  uint64_t v24 = v15;
  uint64_t v25 = v15;
  uint64_t v26 = v15;
  unint64_t v27 = v15;
  unint64_t v28 = v15;
  BOOL v369 = v15;
  swift_getObjectType();
  v311 = (void *)MEMORY[0x263F8EED0];
  swift_deallocPartialClassInstance();
  swift_unknownObjectRetain();
  v255 = &v15[OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate];
  v257 = &v365;
  uint64_t v258 = 33;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();

  id v29 = v262;
  v260 = (void **)&v15[OBJC_IVAR___HPMHeadphoneDevice_aaDevice];
  v261 = &v364;
  swift_beginAccess();
  uint32_t v30 = *v260;
  uint64_t *v260 = v262;

  swift_endAccess();
  uint64_t v31 = (*(uint64_t (**)(void))((*(void *)v15 & *v311) + 0xA20))();
  uint64_t v263 = v31;

  (*(void (**)(id))(*(void *)v31 + 1056))(v262);
  uint64_t v32 = v310;
  swift_release();
  uint64_t v268 = (void *)(*(uint64_t (**)(void))((*v32 & *v311) + 0x9F0))();

  v264 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
  uint64_t v33 = v264;
  id v34 = v264;
  id v35 = (void *)(*(uint64_t (**)(void *))((*v33 & *v311) + 0x138))(v34);
  id v36 = v268;
  id v265 = v35;

  id v267 = objc_msgSend(v265, sel_validAudiograms);
  unint64_t v313 = type metadata accessor for HKAudiogramSample();
  uint64_t v266 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t))((*v36 & *v311) + 0x520))(v266);
  id v37 = v310;

  id v273 = (void *)(*(uint64_t (**)(void))((*v37 & *v311) + 0x9F0))();
  v269 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
  uint64_t v38 = v269;
  uint64_t v39 = v269;
  uint64_t v40 = (void *)(*(uint64_t (**)(void *))((*v38 & *v311) + 0x138))(v39);
  uint64_t v41 = v273;
  id v270 = v40;

  id v272 = objc_msgSend(v270, sel_invalidAudiograms);
  uint64_t v271 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t))((*v41 & *v311) + 0x550))(v271);
  type metadata accessor for Log();
  uint64_t v328 = static Log.shared.getter();
  uint64_t v42 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  uint64_t v321 = &v362;
  uint64_t v362 = v42;
  uint64_t v363 = v43;
  uint64_t v325 = 34;
  int v319 = 1;
  Swift::String v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager initWithCBDevice:", 0x22uLL, 1);
  object = v44._object;
  DefaultStringInterpolation.appendLiteral(_:)(v44);
  swift_bridgeObjectRelease();
  id v275 = &v361;
  BOOL v361 = v310;
  lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();

  v300 = " ";
  Builtin::Word v299 = 1;
  Swift::String v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, v319 & 1);
  int v276 = v45._object;
  DefaultStringInterpolation.appendLiteral(_:)(v45);
  swift_bridgeObjectRelease();
  v287 = "%p";
  Builtin::Word v288 = 2;
  Swift::String v280 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%p", 2uLL, v319 & 1);
  uint64_t v290 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
  uint64_t v279 = _allocateUninitializedArray<A>(_:)();
  int v278 = v46;
  v46[3] = ObjectType;
  unint64_t v47 = lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
  id v48 = v278;
  uint64_t v49 = v310;
  v278[4] = v47;
  *id v48 = v49;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v281 = String.init(format:_:)();
  uint64_t v282 = v50;
  swift_bridgeObjectRelease();
  v283 = v360;
  v360[0] = v281;
  v360[1] = v282;
  uint64_t v295 = MEMORY[0x263F8D310];
  uint64_t v296 = MEMORY[0x263F8D378];
  uint64_t v297 = MEMORY[0x263F8D370];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Builtin::Word v304 = 10;
  Swift::String v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" aaDevice:", 0xAuLL, v319 & 1);
  v284 = v51._object;
  DefaultStringInterpolation.appendLiteral(_:)(v51);
  uint64_t v52 = v310;
  swift_bridgeObjectRelease();
  uint64_t v285 = (*(uint64_t (**)(void))((*v52 & *v311) + 0xA20))();

  swift_release();
  v359[2] = v285;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" cb:", 4uLL, v319 & 1);
  v286 = v53._object;
  DefaultStringInterpolation.appendLiteral(_:)(v53);
  swift_bridgeObjectRelease();
  Swift::String v292 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v287, v288, v319 & 1);
  uint64_t v291 = _allocateUninitializedArray<A>(_:)();
  id v289 = v54;
  id v55 = v329;
  unint64_t v302 = type metadata accessor for CBDevice();
  v289[3] = v302;
  unint64_t v56 = lazy protocol witness table accessor for type CBDevice and conformance NSObject();
  id v57 = v289;
  id v58 = v329;
  v289[4] = v56;
  void *v57 = v58;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v293 = String.init(format:_:)();
  uint64_t v294 = v59;
  swift_bridgeObjectRelease();
  v298 = v359;
  v359[0] = v293;
  v359[1] = v294;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v300, v299, v319 & 1);
  unsigned int v301 = v60._object;
  DefaultStringInterpolation.appendLiteral(_:)(v60);
  swift_bridgeObjectRelease();
  v303 = &v358;
  id v358 = v329;
  lazy protocol witness table accessor for type CBDevice and conformance NSObject();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", validAG:", v304, v319 & 1);
  v305 = v61._object;
  DefaultStringInterpolation.appendLiteral(_:)(v61);
  uint64_t v62 = v310;
  swift_bridgeObjectRelease();
  uint64_t v63 = (void *)(*(uint64_t (**)(void))((*v62 & *v311) + 0x9F0))();
  id v306 = v63;

  uint64_t v307 = (*(uint64_t (**)(void))((*v63 & *v311) + 0x518))();
  uint64_t v308 = MEMORY[0x253386090](v307, v313);
  swift_bridgeObjectRelease();
  uint64_t v357 = v308;
  uint64_t v316 = MEMORY[0x263F8D6C8];
  uint64_t v317 = MEMORY[0x263F8D738];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v64 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" invalidAG:", 0xBuLL, v319 & 1);
  v309 = v64._object;
  DefaultStringInterpolation.appendLiteral(_:)(v64);
  id v65 = v310;
  swift_bridgeObjectRelease();
  uint64_t v66 = (void *)(*(uint64_t (**)(void))((*v65 & *v311) + 0x9F0))();
  id v312 = v66;

  uint64_t v314 = (*(uint64_t (**)(void))((*v66 & *v311) + 0x548))();
  uint64_t v315 = MEMORY[0x253386090](v314, v313);
  swift_bridgeObjectRelease();
  uint64_t v356 = v315;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v67 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v318, v319 & 1);
  v320 = v67._object;
  DefaultStringInterpolation.appendLiteral(_:)(v67);
  swift_bridgeObjectRelease();
  uint64_t v323 = v362;
  uint64_t v322 = v363;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  uint64_t v327 = v68;
  uint64_t v123 = 332;
  dispatch thunk of Log.notice(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  id v330 = objc_msgSend(v329, sel_identifier);
  if (v330)
  {
    id v228 = v330;
    id v223 = v330;
    uint64_t v224 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v225 = v69;

    uint64_t v226 = v224;
    uint64_t v227 = v225;
  }
  else
  {
    uint64_t v226 = 0;
    uint64_t v227 = 0;
  }
  uint64_t v221 = v227;
  uint64_t v222 = v226;
  if (v227)
  {
    uint64_t v219 = v222;
    uint64_t v220 = v221;
    uint64_t v208 = v221;
    uint64_t v207 = v222;
    uint64_t v348 = v222;
    uint64_t v349 = v221;
    v206 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
    id v72 = v206;
    id v73 = v206;
    id v210 = (id)(*(uint64_t (**)(void *))((*v72 & *MEMORY[0x263F8EED0]) + 0x138))(v73);

    swift_bridgeObjectRetain();
    id v209 = (id)MEMORY[0x253385EB0](v207, v208);
    swift_bridgeObjectRelease();
    id v211 = objc_msgSend(v210, sel_fetchHearingModeDeviceRecordForIdentifier_, v209);

    if (v211)
    {
      id v205 = v211;
      id v174 = v211;
      id v341 = v211;
      signed __int8 v173 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
      id v76 = v173;
      id v77 = v173;
      uint64_t v167 = *(void *)&v310[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
      uint64_t v168 = *(void *)&v310[OBJC_IVAR___HPMHeadphoneDevice_btAddress + 8];
      swift_bridgeObjectRetain();

      id v78 = v174;
      uint64_t v170 = &v340;
      id v340 = v174;
      Swift::String v169 = v339;
      v339[0] = v167;
      v339[1] = v168;
      unint64_t v79 = *(uint64_t (**)(void))((*v76 & *MEMORY[0x263F8EED0]) + 0x160);
      unsigned __int8 v171 = &v338;
      signed __int8 v172 = (void (*)(void))v79();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HMDeviceRecord]);
      Dictionary.subscript.setter();
      uint64_t v80 = v247;
      v172();

      uint64_t v81 = Logger.shared.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v80, v81, v243);
      uint64_t v183 = 32;
      uint64_t v184 = 7;
      uint64_t v82 = swift_allocObject();
      id v83 = v174;
      uint64_t v179 = v82;
      *(void *)(v82 + 16) = v229;
      *(void *)(v82 + 24) = 0;
      id v84 = v83;
      uint64_t v185 = swift_allocObject();
      *(void *)(v185 + 16) = v174;
      uint64_t v196 = Logger.logObject.getter();
      int v197 = static os_log_type_t.default.getter();
      uint64_t v177 = &v336;
      uint64_t v336 = 22;
      unint64_t v175 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v176 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v178 = v337;
      uint64_t v181 = 17;
      uint64_t v187 = swift_allocObject();
      *(unsigned char *)(v187 + 16) = 32;
      uint64_t v188 = swift_allocObject();
      int v182 = 8;
      *(unsigned char *)(v188 + 16) = 8;
      uint64_t v85 = swift_allocObject();
      uint64_t v86 = v179;
      uint64_t v180 = v85;
      *(void *)(v85 + 16) = v230;
      *(void *)(v85 + 24) = v86;
      uint64_t v87 = swift_allocObject();
      uint64_t v88 = v180;
      uint64_t v189 = v87;
      *(void *)(v87 + 16) = v231;
      *(void *)(v87 + 24) = v88;
      uint64_t v190 = swift_allocObject();
      *(unsigned char *)(v190 + 16) = 64;
      uint64_t v191 = swift_allocObject();
      *(unsigned char *)(v191 + 16) = v182;
      uint64_t v89 = swift_allocObject();
      uint64_t v90 = v185;
      uint64_t v186 = v89;
      *(void *)(v89 + 16) = v232;
      *(void *)(v89 + 24) = v90;
      uint64_t v91 = swift_allocObject();
      uint64_t v92 = v186;
      uint64_t v193 = v91;
      *(void *)(v91 + 16) = v233;
      *(void *)(v91 + 24) = v92;
      uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v192 = _allocateUninitializedArray<A>(_:)();
      int v194 = v93;
      swift_retain();
      uint64_t v94 = v187;
      uint64_t v95 = v194;
      *int v194 = v234;
      v95[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v94;
      swift_retain();
      uint64_t v96 = v188;
      uint64_t v97 = v194;
      v194[2] = v235;
      v97[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v96;
      swift_retain();
      id v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v189;
      char v99 = v194;
      v194[4] = v236;
      v99[5] = v98;
      swift_retain();
      uint64_t v100 = v190;
      uint64_t v101 = v194;
      v194[6] = v237;
      v101[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v100;
      swift_retain();
      uint64_t v102 = v191;
      uint64_t v103 = v194;
      v194[8] = v238;
      v103[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v102;
      swift_retain();
      unint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v193;
      uint64_t v105 = v194;
      v194[10] = v239;
      v105[11] = v104;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v196, (os_log_type_t)v197))
      {
        uint64_t v106 = v242;
        char v159 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v158 = 1;
        uint64_t v160 = createStorage<A>(capacity:type:)(1);
        uint64_t v161 = createStorage<A>(capacity:type:)(v158);
        unsigned __int8 v163 = &v335;
        unsigned int v335 = v159;
        uint64_t v164 = &v334;
        uint64_t v334 = v160;
        uint64_t v165 = &v333;
        uint64_t v333 = v161;
        unsigned int v162 = 2;
        serialize(_:at:)(2, &v335);
        serialize(_:at:)(v162, v163);
        v331 = v234;
        uint64_t v332 = v187;
        closure #1 in osLogInternal(_:log:type:)(&v331, (uint64_t)v163, (uint64_t)v164, (uint64_t)v165);
        uint64_t v166 = v106;
        if (v106)
        {
          __break(1u);
        }
        else
        {
          v331 = v235;
          uint64_t v332 = v188;
          closure #1 in osLogInternal(_:log:type:)(&v331, (uint64_t)&v335, (uint64_t)&v334, (uint64_t)&v333);
          uint64_t v156 = 0;
          uint64_t v107 = v156;
          v331 = v236;
          uint64_t v332 = v189;
          closure #1 in osLogInternal(_:log:type:)(&v331, (uint64_t)&v335, (uint64_t)&v334, (uint64_t)&v333);
          uint64_t v155 = v107;
          v331 = v237;
          uint64_t v332 = v190;
          closure #1 in osLogInternal(_:log:type:)(&v331, (uint64_t)&v335, (uint64_t)&v334, (uint64_t)&v333);
          uint64_t v154 = 0;
          v331 = v238;
          uint64_t v332 = v191;
          closure #1 in osLogInternal(_:log:type:)(&v331, (uint64_t)&v335, (uint64_t)&v334, (uint64_t)&v333);
          uint64_t v153 = 0;
          v331 = v239;
          uint64_t v332 = v193;
          closure #1 in osLogInternal(_:log:type:)(&v331, (uint64_t)&v335, (uint64_t)&v334, (uint64_t)&v333);
          _os_log_impl(&dword_250C36000, v196, (os_log_type_t)v197, "HeadphoneManager: HeadphoneDevice.init syncFetch Record %s %@", v159, v178);
          uint64_t v152 = 1;
          destroyStorage<A>(_:count:)(v160, 1, v157);
          destroyStorage<A>(_:count:)(v161, v152, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x253386220](v159, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v108 = (uint64_t *)v310;

      uint64_t v109 = (*(uint64_t (**)(char *, uint64_t))(v244 + 8))(v247, v243);
      uint64_t v110 = *v108;
      char v150 = (void *)MEMORY[0x263F8EED0];
      id v111 = (void *)(*(uint64_t (**)(uint64_t))((v110 & *MEMORY[0x263F8EED0]) + 0x9F0))(v109);
      id v151 = v111;

      (*(void (**)(id))((*v111 & *v150) + 0x590))(v174);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v74 = v250;

      uint64_t v75 = Logger.shared.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v74, v75, v243);
      int v203 = Logger.logObject.getter();
      int v202 = static os_log_type_t.error.getter();
      uint64_t v200 = &v346;
      uint64_t v346 = 2;
      unint64_t v198 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v199 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v201 = v347;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v204 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v203, (os_log_type_t)v202))
      {
        uint64_t v112 = v242;
        uint64_t v140 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v139 = 0;
        uint64_t v141 = createStorage<A>(capacity:type:)(0);
        uint64_t v142 = createStorage<A>(capacity:type:)(v139);
        char v146 = &v345;
        v345 = v140;
        uint64_t v147 = &v344;
        uint64_t v344 = v141;
        uint64_t v144 = &v343;
        uint64_t v343 = v142;
        unsigned int v143 = 0;
        serialize(_:at:)(0, &v345);
        serialize(_:at:)(v143, v146);
        uint64_t v342 = v204;
        uint64_t v145 = &v124;
        MEMORY[0x270FA5388](&v124, v113);
        unsigned __int8 v114 = v147;
        char v115 = &v124 - 6;
        unint64_t v148 = &v124 - 6;
        v115[2] = (uint64_t)v146;
        v115[3] = (uint64_t)v114;
        v115[4] = v116;
        uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v112)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_250C36000, v203, (os_log_type_t)v202, "HeadphoneManager: HeadphoneDevice.init: sync fetch returned nil", v140, v201);
          uint64_t v137 = 0;
          destroyStorage<A>(_:count:)(v141, 0, v138);
          destroyStorage<A>(_:count:)(v142, v137, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x253386220](v140, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v244 + 8))(v250, v243);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v70 = v252;

    uint64_t v71 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v70, v71, v243);
    id v217 = Logger.logObject.getter();
    int v216 = static os_log_type_t.error.getter();
    unint64_t v214 = &v354;
    uint64_t v354 = 2;
    unint64_t v212 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v213 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v215 = v355;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v218 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v217, (os_log_type_t)v216))
    {
      uint64_t v117 = v242;
      unsigned __int8 v127 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v126 = 0;
      uint64_t v128 = createStorage<A>(capacity:type:)(0);
      uint64_t v129 = createStorage<A>(capacity:type:)(v126);
      unint64_t v133 = &v353;
      v353 = v127;
      uint64_t v134 = &v352;
      uint64_t v352 = v128;
      float v131 = &v351;
      uint64_t v351 = v129;
      unsigned int v130 = 0;
      serialize(_:at:)(0, &v353);
      serialize(_:at:)(v130, v133);
      uint64_t v350 = v218;
      uint64_t v132 = &v124;
      MEMORY[0x270FA5388](&v124, v118);
      unint64_t v119 = v134;
      id v120 = &v124 - 6;
      id v135 = &v124 - 6;
      v120[2] = (uint64_t)v133;
      v120[3] = (uint64_t)v119;
      v120[4] = v121;
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v117)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_250C36000, v217, (os_log_type_t)v216, "HeadphoneManager: HeadphoneDevice.init: uuidString lookup for HR Fetch failed!", v127, v215);
        uint64_t v124 = 0;
        destroyStorage<A>(_:count:)(v128, 0, v125);
        destroyStorage<A>(_:count:)(v129, v124, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v127, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v244 + 8))(v252, v243);
  }
  swift_unknownObjectRelease();

  return v310;
}

void implicit closure #1 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(void *a1@<X8>)
{
  uint64_t v3 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
  id v1 = v3;
  *a1 = (*(uint64_t (**)(void *))((*v3 & *MEMORY[0x263F8EED0]) + 0x150))(v1);
}

void *implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t HeadphoneDevice.supportsFeature(feature:)(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if (v1)
  {
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    switch(v2)
    {
      case 0:
        char v45 = 1;
        break;
      case 1:
        Swift::String v44 = (void *)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        objc_msgSend(v44, sel_flags);

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 2:
        uint64_t v42 = (void *)MEMORY[0x263F8EED0];
        id v41 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        [v41 (SEL)0x1F7045E98];

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v3 = OptionSet<>.contains(_:)();
        uint64_t v4 = (*(uint64_t (**)(void))((*v46 & *v42) + 0x668))(v3 & 1);
        id v43 = (id)(*(uint64_t (**)(uint64_t))((*v46 & *v42) + 0x228))(v4);
        [v43 (SEL)0x1F7045E98];

        char v45 = OptionSet<>.contains(_:)();
        break;
      case 3:
        id v40 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        objc_msgSend(v40, sel_flags);

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 4:
        id v39 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        objc_msgSend(v39, sel_flags);

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 5:
        id v38 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        objc_msgSend(v38, sel_flags);

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 6:
        id v37 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x210))();
        objc_msgSend(v37, sel_deviceFlags);

        type metadata accessor for CBDeviceFlags();
        lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 7:
        id v36 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        objc_msgSend(v36, sel_flags);

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 8:
        char v45 = 0;
        break;
      case 9:
        char v45 = (*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x288))();
        break;
      case 10:
        char v35 = (*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0xAC0))();
        uint64_t v5 = v46;
        if (v35)
        {
          id v33 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
          objc_msgSend(v33, sel_flags);

          type metadata accessor for CBProductFlags();
          lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
          char v34 = OptionSet<>.contains(_:)();
        }
        else
        {
          char v34 = 0;
        }

        char v45 = v34;
        break;
      case 11:
      case 13:
      case 14:
        char v45 = 1;
        break;
      case 12:
        char v45 = 0;
        break;
      case 15:
        id v32 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        objc_msgSend(v32, sel_flags);

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 16:
        id v31 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x228))();
        objc_msgSend(v31, sel_flags);

        type metadata accessor for CBProductFlags();
        lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
        char v45 = OptionSet<>.contains(_:)();
        break;
      case 17:
        id v28 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x210))();
        unsigned int v29 = objc_msgSend(v28, sel_muteControlCapability);

        BOOL v30 = CBPeerCallManagementCapability.rawValue.getter(v29) == 0;
        uint64_t v6 = v46;
        if (v30)
        {
          id v25 = (id)(*(uint64_t (**)(void *))((*v46 & *MEMORY[0x263F8EED0]) + 0x210))(v6);
          unsigned int v26 = objc_msgSend(v25, sel_endCallCapability);

          BOOL v27 = CBPeerCallManagementCapability.rawValue.getter(v26) != 0;
        }
        else
        {
          BOOL v27 = 1;
        }

        char v45 = v27;
        break;
      case 18:
        id v23 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x210))();
        unsigned int v24 = objc_msgSend(v23, sel_selectiveSpeechListeningCapability);

        char v45 = CBPeerSelectiveSpeechListeningCapability.rawValue.getter(v24) != 0;
        break;
      case 19:
        id v21 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x210))();
        unsigned int v22 = objc_msgSend(v21, sel_conversationDetectCapability);

        char v45 = CBPeerConversationDetectCapability.rawValue.getter(v22) != 0;
        break;
      case 20:
        id v19 = (id)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x210))();
        unsigned int v20 = objc_msgSend(v19, sel_adaptiveVolumeCapability);

        char v45 = CBPeerAdaptiveVolumeCapability.rawValue.getter(v20) != 0;
        break;
      case 21:
        char v18 = (*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0xB40))();
        uint64_t v7 = v46;
        if (v18)
        {
          BOOL v17 = 1;
        }
        else
        {
          uint64_t v16 = (void *)(*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x240))();
          if (v16)
          {
            unsigned int v14 = objc_msgSend(v16, sel_autoANCCapability);

            unsigned int v15 = AAAutoANCCapability.rawValue.getter(v14);
            BOOL v17 = v15 >= AAAutoANCCapability.rawValue.getter(3);
          }
          else
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
        }

        char v45 = v17;
        break;
      case 22:
        uint64_t v13 = (*(uint64_t (**)(void))((*v46 & *MEMORY[0x263F8EED0]) + 0x240))();
        if (v13)
        {
          id v12 = (id)v13;
        }
        else
        {
          LOBYTE(v9) = 2;
          uint64_t v10 = 399;
          LODWORD(v11) = 0;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        objc_msgSend(v12, sel_bobbleCapability, v9, v10, v11);

        type metadata accessor for AAFeatureCapability();
        lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
        char v45 = == infix<A>(_:_:)();
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v45 & 1;
}

uint64_t CBPeerSelectiveSpeechListeningCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t CBPeerConversationDetectCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t CBPeerAdaptiveVolumeCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t AAAutoANCCapability.rawValue.getter(uint64_t result)
{
  return result;
}

void HeadphoneDevice.updateFeatureValues(feature:)(uint64_t a1, uint64_t a2)
{
  uint64_t v313 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v330 = v313;
  id v329 = v2;
  type metadata accessor for Log();
  static Log.shared.getter();
  uint64_t v327 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  uint64_t v328 = v3;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: updateFeatureValues mode: ", 0x2CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v326 = v313;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  dispatch thunk of Log.notice(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for CBDeviceSettings();
  id v312 = CBDeviceSettings.__allocating_init()();
  id v325 = v312;
  type metadata accessor for AADeviceConfig();
  id v314 = AADeviceConfig.__allocating_init()();
  id v324 = v314;
  char v323 = 0;
  uint64_t v322 = v313;
  if (v313)
  {
    uint64_t v7 = v313;
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    char v6 = 0;
  }
  if (v6)
  {
    uint64_t v321 = v313;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    goto LABEL_145;
  }
  switch(v7)
  {
    case 0:
      uint64_t v8 = (*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x348))(v313);
      id v311 = (id)MEMORY[0x253385EB0](v8);
      swift_bridgeObjectRelease();
      objc_msgSend(v312, sel_setName_, v311, 404);

      goto LABEL_145;
    case 1:
      objc_msgSend(v312, sel_setListeningMode_, (*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x378))(v313), 404);
      unsigned int v9 = objc_msgSend(v312, sel_listeningMode);
      if (v9 <= 1)
      {
        uint64_t v11 = v9 - 1;
        char v10 = 0;
      }
      else
      {
        uint64_t v11 = v9 - 1;
        char v10 = 1;
      }
      if ((v10 & 1) == 0)
      {
        switch(v11)
        {
          case 0:
            uint64_t v310 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
            swift_retain();
            Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
            v309 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v310 + 112))();
            *(Swift::String *)(v13 + 280) = v12;
            swift_bridgeObjectRelease();
            v309();
            swift_release();
            goto LABEL_145;
          case 1:
            uint64_t v308 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
            swift_retain();
            Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NoiseCancellation", 0x11uLL, 1);
            uint64_t v307 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v308 + 112))();
            *(Swift::String *)(v15 + 280) = v14;
            swift_bridgeObjectRelease();
            v307();
            swift_release();
            goto LABEL_145;
          case 2:
            uint64_t v306 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
            swift_retain();
            Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Transparency", 0xCuLL, 1);
            v305 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v306 + 112))();
            *(Swift::String *)(v17 + 280) = v16;
            swift_bridgeObjectRelease();
            v305();
            swift_release();
            goto LABEL_145;
          case 3:
            uint64_t v304 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
            swift_retain();
            Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Automatic", 9uLL, 1);
            v303 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v304 + 112))();
            *(Swift::String *)(v19 + 280) = v18;
            swift_bridgeObjectRelease();
            v303();
            swift_release();
            goto LABEL_145;
          default:
            goto LABEL_160;
        }
      }
      uint64_t v302 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      swift_retain();
      Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
      unsigned int v301 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v302 + 112))();
      v21[25] = v20;
      swift_bridgeObjectRelease();
      v301();
      swift_release();
      goto LABEL_145;
    case 2:
      v300 = (void *)MEMORY[0x263F8EED0];
      id v299 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x210))(v313);
      objc_msgSend(v299, sel_clickHoldModeLeft, 404);

      (*(void (**)(void))((*v2 & *v300) + 0x3A8))();
      type metadata accessor for CBPeerUIGestureMode();
      lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
      uint64_t v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((v22 & 1) == 0)
      {
        objc_msgSend(v312, sel_setClickHoldModeLeft_, (*(unsigned __int8 (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x3A8))());
        unsigned int v23 = objc_msgSend(v312, sel_clickHoldModeLeft);
        if (v23 <= 1)
        {
          uint64_t v25 = (v23 - 1);
          char v24 = 0;
        }
        else
        {
          uint64_t v25 = (v23 - 1);
          char v24 = 1;
        }
        if ((v24 & 1) == 0)
        {
          switch(v25)
          {
            case 0:
              uint64_t v298 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Siri", 4uLL, 1);
              uint64_t v297 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v298 + 112))();
              v27[25] = v26;
              swift_bridgeObjectRelease();
              v297();
              uint64_t v22 = swift_release();
              goto LABEL_28;
            case 1:
            case 2:
            case 3:
              break;
            case 4:
              uint64_t v296 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NoiseControl", 0xCuLL, 1);
              uint64_t v295 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v296 + 112))();
              v29[25] = v28;
              swift_bridgeObjectRelease();
              v295();
              uint64_t v22 = swift_release();
              goto LABEL_28;
            case 5:
              uint64_t v294 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VolumeUp", 8uLL, 1);
              uint64_t v293 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v294 + 112))();
              v31[25] = v30;
              swift_bridgeObjectRelease();
              v293();
              uint64_t v22 = swift_release();
              goto LABEL_28;
            case 6:
              uint64_t v292 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VolumeDown", 0xAuLL, 1);
              uint64_t v291 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v292 + 112))();
              v33[25] = v32;
              swift_bridgeObjectRelease();
              v291();
              uint64_t v22 = swift_release();
              goto LABEL_28;
            default:
              goto LABEL_160;
          }
        }
        uint64_t v290 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
        id v289 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v290 + 112))();
        v35[25] = v34;
        swift_bridgeObjectRelease();
        v289();
        uint64_t v22 = swift_release();
      }
LABEL_28:
      Builtin::Word v288 = (void *)MEMORY[0x263F8EED0];
      id v287 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x210))(v22);
      objc_msgSend(v287, sel_clickHoldModeRight);

      (*(void (**)(void))((*v2 & *v288) + 0x3D8))();
      uint64_t v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((v36 & 1) == 0)
      {
        objc_msgSend(v312, sel_setClickHoldModeRight_, (*(unsigned __int8 (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x3D8))());
        unsigned int v37 = objc_msgSend(v312, sel_clickHoldModeRight);
        if (v37 <= 1)
        {
          uint64_t v39 = (v37 - 1);
          char v38 = 0;
        }
        else
        {
          uint64_t v39 = (v37 - 1);
          char v38 = 1;
        }
        if ((v38 & 1) == 0)
        {
          switch(v39)
          {
            case 0:
              uint64_t v286 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Siri", 4uLL, 1);
              uint64_t v285 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v286 + 112))();
              v41[26] = v40;
              swift_bridgeObjectRelease();
              v285();
              uint64_t v36 = swift_release();
              goto LABEL_39;
            case 1:
            case 2:
            case 3:
              break;
            case 4:
              uint64_t v284 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NoiseControl", 0xCuLL, 1);
              v283 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v284 + 112))();
              v43[26] = v42;
              swift_bridgeObjectRelease();
              v283();
              uint64_t v36 = swift_release();
              goto LABEL_39;
            case 5:
              uint64_t v282 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VolumeUp", 8uLL, 1);
              uint64_t v281 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v282 + 112))();
              v45[26] = v44;
              swift_bridgeObjectRelease();
              v281();
              uint64_t v36 = swift_release();
              goto LABEL_39;
            case 6:
              uint64_t v280 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VolumeDown", 0xAuLL, 1);
              uint64_t v279 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v280 + 112))();
              v47[26] = v46;
              swift_bridgeObjectRelease();
              v279();
              uint64_t v36 = swift_release();
              goto LABEL_39;
            default:
              goto LABEL_160;
          }
        }
        uint64_t v278 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
        int v277 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v278 + 112))();
        v49[26] = v48;
        swift_bridgeObjectRelease();
        v277();
        uint64_t v36 = swift_release();
      }
LABEL_39:
      if (((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x630))(v36) & 1) == 0)
      {
        type metadata accessor for CBListeningModeConfigs();
        _allocateUninitializedArray<A>(_:)();
        lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
        SetAlgebra<>.init(arrayLiteral:)();
        Swift::String v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        uint64_t v51 = (*(uint64_t (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x4B0))();
        if (v51)
        {
          lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
          OptionSet<>.insert(_:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NC", 2uLL, 1);
          static String.+= infix(_:_:)();
          uint64_t v51 = swift_bridgeObjectRelease();
        }
        uint64_t v52 = (*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x480))(v51);
        if (v52)
        {
          lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
          OptionSet<>.insert(_:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
          static String.+= infix(_:_:)();
          uint64_t v52 = swift_bridgeObjectRelease();
        }
        uint64_t v53 = (*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x450))(v52);
        if (v53)
        {
          lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
          OptionSet<>.insert(_:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("T", 1uLL, 1);
          static String.+= infix(_:_:)();
          uint64_t v53 = swift_bridgeObjectRelease();
        }
        if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x420))(v53))
        {
          lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
          OptionSet<>.insert(_:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Auto", 4uLL, 1);
          static String.+= infix(_:_:)();
          swift_bridgeObjectRelease();
        }
        int v276 = (void *)MEMORY[0x263F8EED0];
        (*(void (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x410))(0);
        uint64_t v272 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        uint64_t v271 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v272 + 112))();
        v55[4] = v54;
        swift_bridgeObjectRelease();
        v271();
        swift_release();
        uint64_t v274 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        id v273 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v274 + 112))();
        v57[3] = v56;
        swift_bridgeObjectRelease();
        v273();
        uint64_t v58 = swift_release();
        id v275 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *v276) + 0x210))(v58);
        objc_msgSend(v275, sel_listeningModeConfigs);

        (*(void (**)(void))((*v2 & *v276) + 0x408))();
        lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          v269 = (void *)MEMORY[0x263F8EED0];
          id v59 = objc_msgSend(v312, sel_setListeningModeConfigs_, (*(uint64_t (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x408))());
          id v270 = (id)(*(uint64_t (**)(id))((*v2 & *v269) + 0x228))(v59);
          objc_msgSend(v270, sel_flags);

          type metadata accessor for CBProductFlags();
          lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
          if (OptionSet<>.contains(_:)())
          {
            uint64_t v264 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v263 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v264 + 112))();
            v63[5] = v50;
            swift_bridgeObjectRelease();
            v263();
            swift_release();
          }
          else
          {
            (*(void (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x3A8))();
            lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
            uint64_t v60 = == infix<A>(_:_:)();
            if (v60)
            {
              uint64_t v268 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              swift_bridgeObjectRetain();
              id v267 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v268 + 112))();
              v61[3] = v50;
              swift_bridgeObjectRelease();
              v267();
              uint64_t v60 = swift_release();
            }
            (*(void (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x3D8))(v60);
            if (== infix<A>(_:_:)())
            {
              uint64_t v266 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              swift_bridgeObjectRetain();
              id v265 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v266 + 112))();
              v62[4] = v50;
              swift_bridgeObjectRelease();
              v265();
              swift_release();
            }
          }
        }
        outlined destroy of String();
      }
      goto LABEL_145;
    case 3:
      id v262 = (void *)MEMORY[0x263F8EED0];
      id v261 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x210))(v313);
      objc_msgSend(v261, sel_doubleTapActionLeft, 404);

      (*(void (**)(void))((*v2 & *v262) + 0x4E0))();
      type metadata accessor for CBDoubleTapAction();
      lazy protocol witness table accessor for type CBDoubleTapAction and conformance CBDoubleTapAction();
      uint64_t v64 = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((v64 & 1) == 0)
      {
        objc_msgSend(v312, sel_setDoubleTapActionLeft_, (*(char (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x4E0))());
        unsigned int v65 = objc_msgSend(v312, sel_doubleTapActionLeft);
        if (v65 <= 2)
        {
          uint64_t v67 = (v65 - 2);
          char v66 = 0;
        }
        else
        {
          uint64_t v67 = (v65 - 2);
          char v66 = 1;
        }
        if ((v66 & 1) == 0)
        {
          switch(v67)
          {
            case 0:
              uint64_t v260 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v68 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Siri", 4uLL, 1);
              uint64_t v259 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v260 + 112))();
              *(Swift::String *)(v69 + 120) = v68;
              swift_bridgeObjectRelease();
              v259();
              uint64_t v64 = swift_release();
              goto LABEL_68;
            case 1:
              uint64_t v258 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v70 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PlayPause", 9uLL, 1);
              v257 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v258 + 112))();
              *(Swift::String *)(v71 + 120) = v70;
              swift_bridgeObjectRelease();
              v257();
              uint64_t v64 = swift_release();
              goto LABEL_68;
            case 2:
              uint64_t v256 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v72 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NextTrack", 9uLL, 1);
              v255 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v256 + 112))();
              *(Swift::String *)(v73 + 120) = v72;
              swift_bridgeObjectRelease();
              v255();
              uint64_t v64 = swift_release();
              goto LABEL_68;
            case 3:
              uint64_t v254 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v74 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PreviousTrack", 0xDuLL, 1);
              float v253 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v254 + 112))();
              *(Swift::String *)(v75 + 120) = v74;
              swift_bridgeObjectRelease();
              v253();
              uint64_t v64 = swift_release();
              goto LABEL_68;
            default:
              goto LABEL_160;
          }
        }
        uint64_t v252 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v76 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
        unint64_t v251 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v252 + 112))();
        *(Swift::String *)(v77 + 120) = v76;
        swift_bridgeObjectRelease();
        v251();
        uint64_t v64 = swift_release();
      }
LABEL_68:
      float v250 = (void *)MEMORY[0x263F8EED0];
      id v249 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x210))(v64);
      objc_msgSend(v249, sel_doubleTapActionRight);

      (*(void (**)(void))((*v2 & *v250) + 0x510))();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        objc_msgSend(v312, sel_setDoubleTapActionRight_, (*(char (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x510))());
        unsigned int v78 = objc_msgSend(v312, sel_doubleTapActionRight);
        if (v78 <= 2)
        {
          uint64_t v80 = (v78 - 2);
          char v79 = 0;
        }
        else
        {
          uint64_t v80 = (v78 - 2);
          char v79 = 1;
        }
        if ((v79 & 1) == 0)
        {
          switch(v80)
          {
            case 0:
              uint64_t v248 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v81 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Siri", 4uLL, 1);
              float v247 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v248 + 112))();
              *(Swift::String *)(v82 + 136) = v81;
              swift_bridgeObjectRelease();
              v247();
              swift_release();
              goto LABEL_145;
            case 1:
              uint64_t v246 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v83 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PlayPause", 9uLL, 1);
              uint64_t v245 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v246 + 112))();
              *(Swift::String *)(v84 + 136) = v83;
              swift_bridgeObjectRelease();
              v245();
              swift_release();
              goto LABEL_145;
            case 2:
              uint64_t v244 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NextTrack", 9uLL, 1);
              uint64_t v243 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v244 + 112))();
              *(Swift::String *)(v86 + 136) = v85;
              swift_bridgeObjectRelease();
              v243();
              swift_release();
              goto LABEL_145;
            case 3:
              uint64_t v242 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
              swift_retain();
              Swift::String v87 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PreviousTrack", 0xDuLL, 1);
              uint64_t v241 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v242 + 112))();
              *(Swift::String *)(v88 + 136) = v87;
              swift_bridgeObjectRelease();
              v241();
              swift_release();
              goto LABEL_145;
            default:
              goto LABEL_160;
          }
        }
        uint64_t v240 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v89 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
        v239 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v240 + 112))();
        *(Swift::String *)(v90 + 136) = v89;
        swift_bridgeObjectRelease();
        v239();
        swift_release();
      }
      goto LABEL_145;
    case 4:
      objc_msgSend(v312, sel_setCrownRotationDirection_, (*(unsigned __int8 (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x540))(v313), 404);
      unsigned __int8 v238 = objc_msgSend(v312, sel_crownRotationDirection);
      if (v238 == 1)
      {
        uint64_t v237 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v91 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BackToFront", 0xBuLL, 1);
        int v236 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v237 + 112))();
        v92[2] = v91;
        swift_bridgeObjectRelease();
        v236();
        swift_release();
        goto LABEL_145;
      }
      if (v238 == 2)
      {
        uint64_t v235 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v93 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FrontToBack", 0xBuLL, 1);
        v234 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v235 + 112))();
        v94[2] = v93;
        swift_bridgeObjectRelease();
        v234();
      }
      else
      {
        uint64_t v233 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v95 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
        v232 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v233 + 112))();
        v96[2] = v95;
        swift_bridgeObjectRelease();
        v232();
      }
      goto LABEL_101;
    case 5:
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x570))(v313)) {
        char v231 = 1;
      }
      else {
        char v231 = 2;
      }
      objc_msgSend(v312, sel_setPlacementMode_, v231, 404);
      uint64_t v230 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      uint64_t v97 = swift_retain();
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x570))(v97))
      {
        Swift::String v100 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
        object = v100._object;
        uint64_t countAndFlagsBits = v100._countAndFlagsBits;
      }
      else
      {
        Swift::String v101 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
        object = v101._object;
        uint64_t countAndFlagsBits = v101._countAndFlagsBits;
      }
      uint64_t v228 = countAndFlagsBits;
      v229 = object;
      uint64_t v227 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v230 + 112))();
      *(void *)(v102 + 256) = v228;
      *(void *)(v102 + 264) = v229;
      swift_bridgeObjectRelease();
      v227();
      swift_release();
      goto LABEL_145;
    case 6:
      objc_msgSend(v312, sel_setSmartRoutingMode_, (*(char (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x5D0))(v313), 404);
      unsigned __int8 v226 = objc_msgSend(v312, sel_smartRoutingMode);
      if (v226 == 1)
      {
        uint64_t v225 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v103 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Automatic", 9uLL, 1);
        uint64_t v224 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v225 + 112))();
        v104[2] = v103;
        swift_bridgeObjectRelease();
        v224();
        swift_release();
        goto LABEL_145;
      }
      if (v226 == 2)
      {
        uint64_t v223 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v105 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("LastConnect", 0xBuLL, 1);
        uint64_t v222 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v223 + 112))();
        v106[2] = v105;
        swift_bridgeObjectRelease();
        v222();
      }
      else
      {
        uint64_t v221 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v107 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
        uint64_t v220 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v221 + 112))();
        v108[2] = v107;
        swift_bridgeObjectRelease();
        v220();
      }
      goto LABEL_101;
    case 7:
      objc_msgSend(v312, sel_setMicrophoneMode_, (*(char (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x600))(v313), 404);
      unsigned __int8 v219 = objc_msgSend(v312, sel_microphoneMode);
      if (v219 == 1)
      {
        uint64_t v218 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v109 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Automatic", 9uLL, 1);
        id v217 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v218 + 112))();
        *(Swift::String *)(v110 + 328) = v109;
        swift_bridgeObjectRelease();
        v217();
        swift_release();
      }
      else if (v219 == 2)
      {
        uint64_t v216 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v111 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AlwaysLeft", 0xAuLL, 1);
        uint32_t v215 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v216 + 112))();
        *(Swift::String *)(v112 + 328) = v111;
        swift_bridgeObjectRelease();
        v215();
        swift_release();
      }
      else
      {
        if (v219 == 3)
        {
          uint64_t v214 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
          swift_retain();
          Swift::String v113 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AlwaysRight", 0xBuLL, 1);
          unint64_t v213 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v214 + 112))();
          *(Swift::String *)(v114 + 328) = v113;
          swift_bridgeObjectRelease();
          v213();
        }
        else
        {
          uint64_t v212 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
          swift_retain();
          Swift::String v115 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
          id v211 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v212 + 112))();
          *(Swift::String *)(v116 + 328) = v115;
          swift_bridgeObjectRelease();
          v211();
        }
LABEL_101:
        swift_release();
      }
      goto LABEL_145;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 21:
    case 22:

      return;
    case 17:
      uint64_t v208 = (void *)MEMORY[0x263F8EED0];
      id v117 = objc_msgSend(v312, sel_setEndCallConfig_, (*(unsigned __int8 (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x768))(v313), 404);
      id v209 = (id)(*(uint64_t (**)(id))((*v2 & *v208) + 0x210))(v117);
      unsigned int v210 = objc_msgSend(v209, sel_muteControlCapability);

      if (CBPeerCallManagementCapability.rawValue.getter(v210)) {
        objc_msgSend(v312, sel_setMuteControlConfig_, (*(unsigned __int8 (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x798))());
      }
      v316[103] = objc_msgSend(v312, sel_endCallConfig);
      v316[102] = 3;
      type metadata accessor for CBPeerCallConfig();
      lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      if ((== infix<A>(_:_:)() & 1) == 0)
      {
        uint64_t v196 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v126 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressOnce", 9uLL, 1);
        uint64_t v195 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v196 + 112))();
        *(Swift::String *)(v127 + 200) = v126;
        swift_bridgeObjectRelease();
        v195();
        uint64_t v128 = swift_release();
        id v197 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x210))(v128);
        unsigned int v198 = objc_msgSend(v197, sel_muteControlCapability);

        if (!CBPeerCallManagementCapability.rawValue.getter(v198)) {
          goto LABEL_145;
        }
        uint64_t v191 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v129 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressTwice", 0xAuLL, 1);
        uint64_t v190 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v191 + 112))();
        v130[22] = v129;
        swift_bridgeObjectRelease();
        v190();
        swift_release();
        uint64_t v192 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v193 = (void (*)(void))(*(uint64_t (**)(unsigned char *))(*(void *)v192 + 112))(v316);
        uint64_t v132 = *(void *)(v131 + 344);
        uint64_t v194 = v132 + 1;
        if (!__OFADD__(v132, 1))
        {
          *(void *)(v131 + 344) = v194;
          v193();
          swift_release();
          goto LABEL_145;
        }
        __break(1u);
LABEL_159:
        __break(1u);
        JUMPOUT(0x250C793E8);
      }
      uint64_t v205 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      swift_retain();
      Swift::String v118 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressTwice", 0xAuLL, 1);
      uint64_t v204 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v205 + 112))();
      *(Swift::String *)(v119 + 200) = v118;
      swift_bridgeObjectRelease();
      v204();
      uint64_t v120 = swift_release();
      id v206 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x210))(v120);
      unsigned int v207 = objc_msgSend(v206, sel_muteControlCapability);

      if (!CBPeerCallManagementCapability.rawValue.getter(v207)) {
        goto LABEL_145;
      }
      uint64_t v200 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      swift_retain();
      Swift::String v121 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressOnce", 9uLL, 1);
      unint64_t v199 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v200 + 112))();
      v122[22] = v121;
      swift_bridgeObjectRelease();
      v199();
      swift_release();
      uint64_t v201 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      swift_retain();
      int v202 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v201 + 112))(&v315);
      uint64_t v124 = *(void *)(v123 + 344);
      uint64_t v203 = v124 + 1;
      if (__OFADD__(v124, 1)) {
        goto LABEL_159;
      }
      *(void *)(v123 + 344) = v203;
      v202();
      swift_release();
LABEL_145:
      uint64_t v174 = HeadphoneDevice.deviceDelegate.getter();
      if (v174)
      {
        signed __int8 v173 = (void *)v174;
      }
      else
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      swift_getObjectType();
      objc_msgSend(v173, sel_updateDeviceConfigWithHpDevice_settings_, v2, v312);
      swift_unknownObjectRelease();
      static Log.shared.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deviceDelegate will call updateDeviceConfig", 0x3DuLL, 1);
      uint64_t v158 = 607;
      dispatch thunk of Log.notice(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v320 = v313;
      uint64_t v319 = 0;
      lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures();
      if (== infix<A>(_:_:)())
      {
        uint64_t v172 = HeadphoneDevice.deviceDelegate.getter();
        if (v172)
        {
          unsigned __int8 v171 = (void *)v172;
        }
        else
        {
          LOBYTE(v158) = 2;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        swift_getObjectType();
        objc_msgSend(v171, sel_updateTopLevelEntryWithHpDevice_, v2, v158);
        swift_unknownObjectRelease();
        uint64_t v170 = HeadphoneDevice.deviceDelegate.getter();
        if (v170)
        {
          Swift::String v169 = (void *)v170;
        }
        else
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        swift_getObjectType();
        objc_msgSend(v169, sel_updateTitleBar);
        swift_unknownObjectRelease();
      }
      uint64_t v164 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      uint64_t v152 = swift_retain();
      uint64_t v166 = (void *)MEMORY[0x263F8EED0];
      id v161 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x210))(v152);
      unsigned int v162 = objc_msgSend(v161, sel_productID);

      unsigned int v317 = v162;
      lazy protocol witness table accessor for type Int and conformance Int();
      lazy protocol witness table accessor for type Int and conformance Int();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      SignedInteger<>.init<A>(_:)();
      uint64_t v163 = v318;
      uint64_t v153 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v164 + 136))();
      *(void *)(v154 + 32) = v163;
      v153();
      swift_release();
      uint64_t v165 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      uint64_t v155 = swift_retain();
      id v167 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *v166) + 0x210))(v155);
      unsigned __int8 v168 = objc_msgSend(v167, sel_autoAncCapability);

      v316[207] = v168;
      v316[206] = 1;
      type metadata accessor for CBPeerAutoAncCapability();
      lazy protocol witness table accessor for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability();
      BOOL v160 = (== infix<A>(_:_:)() & 1) != 0;
      uint64_t v156 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v165 + 136))();
      *(void *)(v157 + 40) = v160;
      v156();
      swift_release();
      uint64_t v159 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      swift_retain();
      (*(void (**)(uint64_t))(*(void *)v159 + 152))(v313);
      swift_release();

      return;
    case 18:
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x7E0))(v313)) {
        unsigned __int8 v189 = 1;
      }
      else {
        unsigned __int8 v189 = 2;
      }
      objc_msgSend(v312, sel_setSelectiveSpeechListeningConfig_, v189, 404);
      uint64_t v188 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      uint64_t v134 = swift_retain();
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x7E0))(v134))
      {
        Swift::String v137 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
        uint64_t v136 = v137._object;
        uint64_t v135 = v137._countAndFlagsBits;
      }
      else
      {
        Swift::String v138 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
        uint64_t v136 = v138._object;
        uint64_t v135 = v138._countAndFlagsBits;
      }
      uint64_t v186 = v135;
      uint64_t v187 = v136;
      uint64_t v185 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v188 + 112))();
      *(void *)(v139 + 488) = v186;
      *(void *)(v139 + 496) = v187;
      swift_bridgeObjectRelease();
      v185();
      swift_release();
      goto LABEL_145;
    case 19:
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x810))(v313)) {
        unsigned __int8 v184 = 1;
      }
      else {
        unsigned __int8 v184 = 2;
      }
      objc_msgSend(v312, sel_setConversationDetectConfig_, v184, 404);
      uint64_t v183 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      uint64_t v140 = swift_retain();
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x810))(v140))
      {
        Swift::String v143 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
        uint64_t v142 = v143._object;
        uint64_t v141 = v143._countAndFlagsBits;
      }
      else
      {
        Swift::String v144 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
        uint64_t v142 = v144._object;
        uint64_t v141 = v144._countAndFlagsBits;
      }
      uint64_t v181 = v141;
      int v182 = v142;
      uint64_t v180 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v183 + 112))();
      *(void *)(v145 + 512) = v181;
      *(void *)(v145 + 520) = v182;
      swift_bridgeObjectRelease();
      v180();
      swift_release();
      goto LABEL_145;
    case 20:
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x840))(v313)) {
        unsigned __int8 v179 = 1;
      }
      else {
        unsigned __int8 v179 = 2;
      }
      objc_msgSend(v312, sel_setAdaptiveVolumeConfig_, v179, 404);
      uint64_t v178 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
      uint64_t v146 = swift_retain();
      if ((*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x840))(v146))
      {
        Swift::String v149 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
        unint64_t v148 = v149._object;
        uint64_t v147 = v149._countAndFlagsBits;
      }
      else
      {
        Swift::String v150 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
        unint64_t v148 = v150._object;
        uint64_t v147 = v150._countAndFlagsBits;
      }
      uint64_t v176 = v147;
      uint64_t v177 = v148;
      unint64_t v175 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v178 + 112))();
      *(void *)(v151 + 536) = v176;
      *(void *)(v151 + 544) = v177;
      swift_bridgeObjectRelease();
      v175();
      swift_release();
      goto LABEL_145;
    default:
LABEL_160:
      JUMPOUT(0);
  }
}

id CBDeviceSettings.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBDeviceSettings.init()();
}

uint64_t HeadphoneDevice.getFindMyUrl(hpDevice:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = a2;
  uint64_t v110 = a1;
  uint64_t v3 = v2;
  Swift::String v4 = v110;
  uint64_t v125 = v3;
  Swift::String v111 = "getFindMyUrl(hpDevice:)";
  uint64_t v112 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  Swift::String v113 = "Fatal error";
  uint64_t v114 = "Unexpectedly found nil while unwrapping an Optional value";
  Swift::String v115 = "HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v118 = 0;
  uint64_t v116 = closure #1 in HeadphoneDevice.getFindMyUrl(hpDevice:);
  Swift::String v150 = 0;
  Swift::String v149 = 0;
  uint64_t v148 = 0;
  uint64_t v146 = 0;
  unint64_t v147 = 0;
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  uint64_t v139 = 0;
  unint64_t v140 = 0;
  uint64_t v117 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  unint64_t v119 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](0, v5);
  uint64_t v120 = (char *)v47 - v119;
  unint64_t v121 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6, (char *)v47 - v119);
  id v122 = (char *)v47 - v121;
  unint64_t v123 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, (char *)v47 - v121);
  uint64_t v124 = (char *)v47 - v123;
  uint64_t v126 = type metadata accessor for SHA256Digest();
  uint64_t v127 = *(void *)(v126 - 8);
  uint64_t v128 = v126 - 8;
  unint64_t v129 = (*(void *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v126, v10);
  unsigned int v130 = (char *)v47 - v129;
  Swift::String v150 = (char *)v47 - v129;
  Swift::String v149 = v4;
  uint64_t v148 = v11;
  id v131 = (id)(*(uint64_t (**)(void))((*v4 & *MEMORY[0x263F8EED0]) + 0x210))();
  id v132 = objc_msgSend(v131, sel_btAddressData);
  if (v132)
  {
    id v108 = v132;
    id v103 = v132;
    uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v105 = v12;

    uint64_t v106 = v104;
    unint64_t v107 = v105;
  }
  else
  {
    uint64_t v106 = 0;
    unint64_t v107 = 0xF000000000000000;
  }
  unint64_t v101 = v107;
  uint64_t v102 = v106;
  if ((v107 & 0xF000000000000000) == 0xF000000000000000)
  {

    v47[4] = 0;
    type metadata accessor for Log();
    v47[2] = static Log.shared.getter();
    unsigned int v48 = 1;
    v47[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Invalid BT Address", 0x24uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    v47[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("findmy://devices", 0x10uLL, v48 & 1)._object;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v49 = type metadata accessor for URL();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = v49 - 8;
    if ((*(unsigned int (**)(char *, void))(v50 + 48))(v120, v48) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v50 + 32))(v109, v120, v49);
  }
  else
  {
    uint64_t v99 = v102;
    unint64_t v100 = v101;
    unint64_t v98 = v101;
    uint64_t v97 = v102;
    uint64_t v146 = v102;
    unint64_t v147 = v101;

    if (Data.count.getter() == 6)
    {
      uint64_t v13 = v117;
      int v79 = 1;
      Swift::String v77 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X:%02X:%02X:%02X:%02X:%02X", 0x1DuLL, 1);
      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
      uint64_t v76 = _allocateUninitializedArray<A>(_:)();
      uint64_t v75 = v14;
      uint64_t v90 = 0;
      char v15 = Data.subscript.getter();
      Swift::String v16 = v75;
      uint64_t v73 = MEMORY[0x263F8E778];
      v75[3] = MEMORY[0x263F8E778];
      uint64_t v74 = MEMORY[0x263F8E7C0];
      v16[4] = MEMORY[0x263F8E7C0];
      *(unsigned char *)Swift::String v16 = v15;
      uint64_t v80 = 1;
      char v17 = Data.subscript.getter();
      uint64_t v18 = v74;
      uint64_t v19 = v75;
      v75[8] = v73;
      v19[9] = v18;
      *((unsigned char *)v19 + 40) = v17;
      char v20 = Data.subscript.getter();
      uint64_t v21 = v74;
      uint64_t v22 = v75;
      v75[13] = v73;
      v22[14] = v21;
      *((unsigned char *)v22 + 80) = v20;
      char v23 = Data.subscript.getter();
      uint64_t v24 = v74;
      uint64_t v25 = v75;
      v75[18] = v73;
      v25[19] = v24;
      *((unsigned char *)v25 + 120) = v23;
      char v26 = Data.subscript.getter();
      uint64_t v27 = v74;
      Swift::String v28 = v75;
      v75[23] = v73;
      v28[24] = v27;
      *((unsigned char *)v28 + 160) = v26;
      Builtin::Word v78 = 5;
      char v29 = Data.subscript.getter();
      uint64_t v30 = v74;
      id v31 = v75;
      v75[28] = v73;
      v31[29] = v30;
      *((unsigned char *)v31 + 200) = v29;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v81 = String.init(format:_:)();
      uint64_t v82 = v32;
      swift_bridgeObjectRelease();
      uint64_t v144 = v81;
      uint64_t v145 = v82;
      Swift::String v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BT_%@", v78, v79 & 1);
      uint64_t v85 = _allocateUninitializedArray<A>(_:)();
      Swift::String v83 = v33;
      swift_bridgeObjectRetain();
      uint64_t v95 = MEMORY[0x263F8D310];
      v83[3] = MEMORY[0x263F8D310];
      unint64_t v34 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v35 = v81;
      uint64_t v36 = v82;
      unsigned int v37 = v83;
      v83[4] = v34;
      *unsigned int v37 = v35;
      v37[1] = v36;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v87 = String.init(format:_:)();
      uint64_t v88 = v38;
      swift_bridgeObjectRelease();
      uint64_t v142 = v87;
      uint64_t v143 = v88;
      uint64_t v39 = MEMORY[0x253385F70]();
      Swift::String v89 = v141;
      v141[0] = v39;
      v141[1] = v40;
      lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
      uint64_t v92 = Data.init<A>(_:)();
      unint64_t v91 = v41;
      uint64_t v139 = v92;
      unint64_t v140 = v41;
      type metadata accessor for SHA256();
      uint64_t v94 = v138;
      v138[0] = v92;
      v138[1] = v91;
      unint64_t v93 = lazy protocol witness table accessor for type SHA256 and conformance SHA256();
      lazy protocol witness table accessor for type Data and conformance Data();
      static HashFunction.hash<A>(data:)();
      lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest();
      uint64_t result = Sequence.compactMap<A>(_:)();
      uint64_t v96 = result;
      if (v13)
      {
        __break(1u);
      }
      else
      {
        uint64_t v63 = &v137;
        uint64_t v137 = v96;
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        unint64_t v61 = lazy protocol witness table accessor for type [String] and conformance [A]();
        default argument 0 of BidirectionalCollection<>.joined(separator:)();
        uint64_t v62 = v43;
        uint64_t v64 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v65 = v44;
        swift_bridgeObjectRelease();
        outlined destroy of [String]();
        uint64_t v135 = v64;
        uint64_t v136 = v65;
        unsigned int v69 = 1;
        Swift::String v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("findmy://device/bridgemissingdevice?id=", 0x27uLL, 1);
        object = v45._object;
        uint64_t v67 = MEMORY[0x253385F30](v45._countAndFlagsBits);
        uint64_t v68 = v46;
        swift_bridgeObjectRelease();
        uint64_t v133 = v67;
        uint64_t v134 = v68;
        URL.init(string:)();
        uint64_t v70 = type metadata accessor for URL();
        uint64_t v71 = *(void *)(v70 - 8);
        uint64_t v72 = v70 - 8;
        if ((*(unsigned int (**)(char *, void))(v71 + 48))(v124, v69) == 1)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v109, v124, v70);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v127 + 8))(v130, v126);
        outlined consume of Data._Representation(v92, v91);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined consume of Data._Representation(v97, v98);
      }
    }
    else
    {
      uint64_t v55 = 0;
      type metadata accessor for Log();
      uint64_t v53 = static Log.shared.getter();
      unsigned int v56 = 1;
      uint64_t v52 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Invalid BT Address", 0x24uLL, 1)._object;
      dispatch thunk of Log.error(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
      Swift::String v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("findmy://devices", 0x10uLL, v56 & 1)._object;
      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v57 = type metadata accessor for URL();
      uint64_t v58 = *(void *)(v57 - 8);
      uint64_t v59 = v57 - 8;
      if ((*(unsigned int (**)(char *, void))(v58 + 48))(v122, v56) == 1)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v109, v122, v57);
      return outlined consume of Data._Representation(v97, v98);
    }
  }
  return result;
}

uint64_t closure #1 in HeadphoneDevice.getFindMyUrl(hpDevice:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v5 = *a1;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02x", 4uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  *(void *)(v2 + 24) = MEMORY[0x263F8E778];
  *(void *)(v2 + 32) = MEMORY[0x263F8E7C0];
  *(unsigned char *)uint64_t v2 = v5;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v6 = String.init(format:_:)();
  uint64_t v8 = v3;
  swift_bridgeObjectRelease();
  uint64_t result = v6;
  *a2 = v6;
  a2[1] = v8;
  return result;
}

uint64_t default argument 0 of BidirectionalCollection<>.joined(separator:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HeadphoneDevice.featureUpdateListener(_aaDevice:cbDevice:)(void *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x258))())
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Ignore the updated aaDevice", 0x2DuLL, 1);
    dispatch thunk of Log.debug(_:function:file:line:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    id v3 = a1;
    uint64_t v9 = (void *)MEMORY[0x263F8EED0];
    uint64_t v4 = (*(uint64_t (**)(void *))((*v14 & *MEMORY[0x263F8EED0]) + 0x248))(a1);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))((*v14 & *v9) + 0xA20))(v4);
    uint64_t v11 = (*(uint64_t (**)(void))((*v14 & *v9) + 0x240))();
    if (v11)
    {
      uint64_t v8 = (void *)v11;
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 1056))(v8, v5, v6);

    swift_release();
    return (*(uint64_t (**)(uint64_t))((*v14 & *MEMORY[0x263F8EED0]) + 0xA90))(a2);
  }
}

uint64_t HeadphoneDevice.featureUpdateListener(cbDevice:)(uint64_t a1, uint64_t a2)
{
  id v761 = (id)MEMORY[0x270FA5388](a1, a2);
  v749 = v2;
  v750 = "featureUpdateListener(cbDevice:)";
  v751 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v752 = partial apply for implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:);
  v753 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  v754 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v755 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v756 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v757 = "Fatal error";
  v758 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v759 = "HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v918 = 0;
  v917 = 0;
  char v916 = 0;
  uint64_t v907 = 0;
  uint64_t v908 = 0;
  char v898 = 0;
  char v889 = 0;
  char v882 = 0;
  char v879 = 0;
  char v876 = 0;
  v777 = 0;
  v778 = 0;
  uint64_t v760 = 0;
  uint64_t v762 = type metadata accessor for Logger();
  uint64_t v763 = *(void *)(v762 - 8);
  uint64_t v764 = v762 - 8;
  unint64_t v765 = (*(void *)(v763 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v766 = (char *)v309 - v765;
  uint64_t v918 = MEMORY[0x270FA5388](v761, v3);
  v917 = v2;
  if ((*(uint64_t (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x258))())
  {
    type metadata accessor for Log();
    v309[2] = static Log.shared.getter();
    v309[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Ignore the updated cbDevice", 0x2DuLL, 1)._object;
    dispatch thunk of Log.debug(_:function:file:line:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t v4 = v749;
    id v5 = objc_msgSend(v761, sel_batteryLevelLeft);
    uint64_t v6 = *v4;
    v744 = (void *)MEMORY[0x263F8EED0];
    (*(void (**)(id))((v6 & *MEMORY[0x263F8EED0]) + 0x8D8))(v5);
    uint64_t v7 = v749;
    id v8 = objc_msgSend(v761, sel_batteryLevelRight);
    (*(void (**)(id))((*v7 & *v744) + 0x938))(v8);
    uint64_t v9 = v749;
    id v10 = objc_msgSend(v761, sel_batteryLevelCase);
    (*(void (**)(id))((*v9 & *v744) + 0x998))(v10);
    uint64_t v11 = v749;
    id v12 = objc_msgSend(v761, sel_batteryLevelMain);
    (*(void (**)(id))((*v11 & *v744) + 0x878))(v12);
    uint64_t v13 = v749;
    id v14 = objc_msgSend(v761, sel_batteryStateLeft);
    (*(void (**)(id))((*v13 & *v744) + 0x908))(v14);
    char v15 = v749;
    id v16 = objc_msgSend(v761, sel_batteryStateRight);
    (*(void (**)(id))((*v15 & *v744) + 0x968))(v16);
    char v17 = v749;
    id v18 = objc_msgSend(v761, sel_batteryStateCase);
    (*(void (**)(id))((*v17 & *v744) + 0x9C8))(v18);
    uint64_t v19 = v749;
    id v20 = objc_msgSend(v761, sel_batteryStateMain);
    uint64_t v21 = (*(uint64_t (**)(id))((*v19 & *v744) + 0x8A8))(v20);
    char v916 = 0;
    id v745 = (id)(*(uint64_t (**)(uint64_t))((*v749 & *v744) + 0x228))(v21);
    unsigned int v746 = objc_msgSend(v745, sel_flags);

    v915[1] = v746;
    v748 = v915;
    v915[0] = 8;
    uint64_t v747 = type metadata accessor for CBProductFlags();
    lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
    if (OptionSet<>.contains(_:)())
    {
      id v741 = (id)(*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x210))();
      unint64_t v742 = 0x1F8342000uLL;
      [v741 (SEL)0x1F8342DCELL];
      float v743 = v22;

      [v761 (SEL)(v742 + 3534)];
      if (v743 != v23) {
        char v916 = 1;
      }
    }
    else
    {
      id v737 = (id)(*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x210))();
      unint64_t v738 = 0x1F8342000uLL;
      [v737 (SEL)0x1F8342DBDLL];
      float v739 = v24;

      [v761 (SEL)(v738 + 3517)];
      BOOL v740 = v739 == v25;
      char v26 = v749;
      id v27 = v761;
      if (v740)
      {
        id v733 = (id)(*(uint64_t (**)(id))((*v749 & *MEMORY[0x263F8EED0]) + 0x210))(v27);
        unint64_t v734 = 0x1F8342000uLL;
        [v733 (SEL)0x1F8342DDFLL];
        float v735 = v28;

        [v761 (SEL)(v734 + 3551)];
        BOOL v736 = v735 != v29;
      }
      else
      {
        BOOL v736 = 1;
      }
      BOOL v732 = v736;

      uint64_t v30 = v749;
      id v31 = v761;
      if (v732)
      {
        BOOL v731 = 1;
      }
      else
      {
        id v728 = (id)(*(uint64_t (**)(id))((*v749 & *MEMORY[0x263F8EED0]) + 0x210))(v31);
        unint64_t v729 = 0x1F8342000uLL;
        [v728 (SEL)0x1F8342DACLL];
        float v730 = v32;

        [v761 (SEL)(v729 + 3500)];
        BOOL v731 = v730 != v33;
      }
      BOOL v727 = v731;

      if (v727) {
        char v916 = 1;
      }
    }
    uint64_t v34 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v705 = &v913;
    uint64_t v913 = v34;
    uint64_t v914 = v35;
    int v703 = 1;
    Swift::String v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager featureUpdate:", 0x1FuLL, 1);
    object = v36._object;
    DefaultStringInterpolation.appendLiteral(_:)(v36);
    swift_bridgeObjectRelease();
    v673 = &v912;
    v912 = v749;
    uint64_t v687 = 0;
    uint64_t v675 = type metadata accessor for HeadphoneDevice();
    lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v698 = " ";
    Builtin::Word v702 = 1;
    Swift::String v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, v703 & 1);
    v674 = v37._object;
    DefaultStringInterpolation.appendLiteral(_:)(v37);
    swift_bridgeObjectRelease();
    v685 = "%p";
    Builtin::Word v686 = 2;
    Swift::String v678 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%p", 2uLL, v703 & 1);
    uint64_t v689 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
    uint64_t v677 = _allocateUninitializedArray<A>(_:)();
    v676 = (uint64_t **)v38;
    uint64_t v39 = v749;
    v676[3] = (uint64_t *)v675;
    unint64_t v40 = lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
    unint64_t v41 = v676;
    Swift::String v42 = v749;
    v676[4] = (uint64_t *)v40;
    *unint64_t v41 = v42;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v679 = String.init(format:_:)();
    uint64_t v680 = v43;
    swift_bridgeObjectRelease();
    v681 = v911;
    v911[0] = v679;
    v911[1] = v680;
    uint64_t v694 = MEMORY[0x263F8D310];
    uint64_t v695 = MEMORY[0x263F8D378];
    uint64_t v696 = MEMORY[0x263F8D370];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" aaDevice:", 0xAuLL, v703 & 1);
    v682 = v44._object;
    DefaultStringInterpolation.appendLiteral(_:)(v44);
    Swift::String v45 = v749;
    uint64_t v46 = swift_bridgeObjectRelease();
    uint64_t v683 = (*(uint64_t (**)(uint64_t))((*v45 & *MEMORY[0x263F8EED0]) + 0xA20))(v46);
    swift_release();
    v910[2] = v683;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v47 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" cb:", 4uLL, v703 & 1);
    v684 = v47._object;
    DefaultStringInterpolation.appendLiteral(_:)(v47);
    swift_bridgeObjectRelease();
    Swift::String v691 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v685, v686, v703 & 1);
    uint64_t v690 = _allocateUninitializedArray<A>(_:)();
    v688 = v48;
    id v49 = v761;
    unint64_t v700 = type metadata accessor for CBDevice();
    v688[3] = v700;
    unint64_t v50 = lazy protocol witness table accessor for type CBDevice and conformance NSObject();
    uint64_t v51 = v688;
    id v52 = v761;
    v688[4] = v50;
    void *v51 = v52;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v692 = String.init(format:_:)();
    uint64_t v693 = v53;
    swift_bridgeObjectRelease();
    v697 = v910;
    v910[0] = v692;
    v910[1] = v693;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v698, v702, v703 & 1);
    v699 = v54._object;
    DefaultStringInterpolation.appendLiteral(_:)(v54);
    swift_bridgeObjectRelease();
    v701 = &v909;
    id v909 = v761;
    lazy protocol witness table accessor for type CBDevice and conformance NSObject();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",", v702, v703 & 1);
    v704 = v55._object;
    DefaultStringInterpolation.appendLiteral(_:)(v55);
    unsigned int v56 = v766;
    swift_bridgeObjectRelease();
    uint64_t v707 = v913;
    uint64_t v706 = v914;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v708 = String.init(stringInterpolation:)();
    uint64_t v709 = v57;
    uint64_t v907 = v708;
    uint64_t v908 = v57;
    uint64_t v58 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v763 + 16))(v56, v58, v762);
    swift_bridgeObjectRetain();
    uint64_t v715 = 32;
    uint64_t v716 = 7;
    uint64_t v59 = swift_allocObject();
    uint64_t v60 = v709;
    uint64_t v717 = v59;
    *(void *)(v59 + 16) = v708;
    *(void *)(v59 + 24) = v60;
    v725 = Logger.logObject.getter();
    int v726 = static os_log_type_t.default.getter();
    v712 = &v905;
    uint64_t v905 = 12;
    unint64_t v710 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v711 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v713 = v906;
    uint64_t v714 = 17;
    uint64_t v719 = swift_allocObject();
    *(unsigned char *)(v719 + 16) = 32;
    uint64_t v720 = swift_allocObject();
    *(unsigned char *)(v720 + 16) = 8;
    uint64_t v61 = swift_allocObject();
    uint64_t v62 = v717;
    uint64_t v718 = v61;
    *(void *)(v61 + 16) = v752;
    *(void *)(v61 + 24) = v62;
    uint64_t v63 = swift_allocObject();
    uint64_t v64 = v718;
    uint64_t v722 = v63;
    *(void *)(v63 + 16) = v753;
    *(void *)(v63 + 24) = v64;
    uint64_t v724 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v721 = _allocateUninitializedArray<A>(_:)();
    v723 = v65;
    swift_retain();
    uint64_t v66 = v719;
    uint64_t v67 = v723;
    *v723 = v754;
    v67[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
    swift_retain();
    uint64_t v68 = v720;
    unsigned int v69 = v723;
    v723[2] = v755;
    v69[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
    swift_retain();
    uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v722;
    uint64_t v71 = v723;
    v723[4] = v756;
    v71[5] = v70;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v725, (os_log_type_t)v726))
    {
      uint64_t v72 = v760;
      v665 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v664 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v666 = createStorage<A>(capacity:type:)(0);
      uint64_t v667 = createStorage<A>(capacity:type:)(1);
      v668 = v771;
      v771[0] = v665;
      v669 = &v770;
      uint64_t v770 = v666;
      v670 = &v769;
      uint64_t v769 = v667;
      serialize(_:at:)(2, v771);
      serialize(_:at:)(1, v668);
      v767 = v754;
      uint64_t v768 = v719;
      closure #1 in osLogInternal(_:log:type:)(&v767, (uint64_t)v668, (uint64_t)v669, (uint64_t)v670);
      uint64_t v671 = v72;
      if (v72)
      {
        __break(1u);
      }
      else
      {
        v767 = v755;
        uint64_t v768 = v720;
        closure #1 in osLogInternal(_:log:type:)(&v767, (uint64_t)v771, (uint64_t)&v770, (uint64_t)&v769);
        uint64_t v663 = 0;
        v767 = v756;
        uint64_t v768 = v722;
        closure #1 in osLogInternal(_:log:type:)(&v767, (uint64_t)v771, (uint64_t)&v770, (uint64_t)&v769);
        _os_log_impl(&dword_250C36000, v725, (os_log_type_t)v726, "%s", v665, v713);
        destroyStorage<A>(_:count:)(v666, 0, v664);
        destroyStorage<A>(_:count:)(v667, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v665, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v73 = v749;

    (*(void (**)(char *, uint64_t))(v763 + 8))(v766, v762);
    id v74 = v761;
    (*(void (**)(id))((*v73 & *MEMORY[0x263F8EED0]) + 0x218))(v761);
    if (v916)
    {
      type metadata accessor for Log();
      uint64_t v661 = static Log.shared.getter();
      v660 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: update battery levels", 0x27uLL, 1)._object;
      dispatch thunk of Log.notice(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v662 = HeadphoneDevice.deviceDelegate.getter();
      if (v662)
      {
        v659 = (void *)v662;
      }
      else
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      id v658 = v659;
      swift_getObjectType();
      objc_msgSend(v658, sel_updateTitleBar);
      swift_unknownObjectRelease();
    }
    id v657 = objc_msgSend(v761, sel_name);
    if (v657)
    {
      id v656 = v657;
      id v651 = v657;
      uint64_t v652 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v653 = v75;

      uint64_t v654 = v652;
      v655 = v653;
    }
    else
    {
      uint64_t v654 = 0;
      v655 = 0;
    }
    v649 = v655;
    v650 = (unsigned char *)v654;
    if (v655)
    {
      v647 = v650;
      v648 = v649;
      v644 = v649;
      v643 = v650;
      v777 = v650;
      v778 = v649;
      uint64_t v642 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x348))();
      uint64_t v645 = v76;
      swift_bridgeObjectRetain();
      v775 = v643;
      v776 = v644;
      int v646 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v646 & 1) == 0)
      {
        Builtin::Word v632 = 0;
        type metadata accessor for Log();
        uint64_t v639 = static Log.shared.getter();
        uint64_t v77 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v635 = &v773;
        uint64_t v773 = v77;
        uint64_t v774 = v78;
        int v633 = 1;
        Swift::String v79 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: name mismatch - change from ", 0x2EuLL, 1);
        v626 = v79._object;
        DefaultStringInterpolation.appendLiteral(_:)(v79);
        uint64_t v80 = v749;
        uint64_t v81 = swift_bridgeObjectRelease();
        uint64_t v82 = *v80;
        v640 = (void *)MEMORY[0x263F8EED0];
        uint64_t v83 = (*(uint64_t (**)(uint64_t))((v82 & *MEMORY[0x263F8EED0]) + 0x348))(v81);
        v627 = v772;
        v772[0] = v83;
        v772[1] = v84;
        uint64_t v629 = MEMORY[0x263F8D310];
        uint64_t v630 = MEMORY[0x263F8D378];
        uint64_t v631 = MEMORY[0x263F8D370];
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        Swift::String v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v633 & 1);
        v628 = v85._object;
        DefaultStringInterpolation.appendLiteral(_:)(v85);
        swift_bridgeObjectRelease();
        v771[1] = v643;
        v771[2] = v644;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v632, v633 & 1);
        v634 = v86._object;
        DefaultStringInterpolation.appendLiteral(_:)(v86);
        swift_bridgeObjectRelease();
        uint64_t v637 = v773;
        uint64_t v636 = v774;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        uint64_t v638 = v87;
        dispatch thunk of Log.notice(_:function:file:line:)();
        uint64_t v88 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRetain();
        (*(void (**)(unsigned char *, unsigned char *))((*v88 & *v640) + 0x350))(v643, v644);
        uint64_t v641 = HeadphoneDevice.deviceDelegate.getter();
        if (v641)
        {
          v625 = (void *)v641;
        }
        else
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        id v624 = v625;
        swift_getObjectType();
        objc_msgSend(v624, sel_updateTopLevelEntryWithHpDevice_, v749);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    int v89 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x378))();
    v623 = &v904;
    int v904 = v89;
    unsigned int v90 = objc_msgSend(v761, sel_listeningMode);
    v621 = &v903;
    unsigned int v903 = v90;
    uint64_t v622 = type metadata accessor for CBListeningMode();
    lazy protocol witness table accessor for type CBListeningMode and conformance CBListeningMode();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      Builtin::Word v611 = 0;
      type metadata accessor for Log();
      uint64_t v618 = static Log.shared.getter();
      uint64_t v91 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v614 = &v781;
      uint64_t v781 = v91;
      uint64_t v782 = v92;
      int v612 = 1;
      Swift::String v93 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: listeningMode mismatch - change from ", 0x37uLL, 1);
      v609 = v93._object;
      DefaultStringInterpolation.appendLiteral(_:)(v93);
      uint64_t v94 = v749;
      uint64_t v95 = swift_bridgeObjectRelease();
      uint64_t v96 = *v94;
      v620 = (void *)MEMORY[0x263F8EED0];
      int v780 = (*(uint64_t (**)(uint64_t))((v96 & *MEMORY[0x263F8EED0]) + 0x378))(v95);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v97 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v612 & 1);
      v610 = v97._object;
      DefaultStringInterpolation.appendLiteral(_:)(v97);
      swift_bridgeObjectRelease();
      unint64_t v619 = 0x1F6EF8000uLL;
      unsigned int v779 = [v761 (SEL)0x1F6EF8118];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v98 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v611, v612 & 1);
      v613 = v98._object;
      DefaultStringInterpolation.appendLiteral(_:)(v98);
      swift_bridgeObjectRelease();
      uint64_t v616 = v781;
      uint64_t v615 = v782;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v617 = v99;
      dispatch thunk of Log.notice(_:function:file:line:)();
      unint64_t v100 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v101 = [v761 (SEL)(v619 + 280)];
      (*(void (**)(id))((*v100 & *v620) + 0x380))(v101);
    }
    unsigned __int8 v102 = objc_msgSend(v761, sel_smartRoutingMode);
    v607 = &v902;
    unsigned __int8 v902 = v102;
    v605 = &v901;
    char v901 = 0;
    uint64_t v606 = type metadata accessor for CBSmartRoutingMode();
    unint64_t v608 = lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode();
    if (== infix<A>(_:_:)())
    {
      char v784 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x5D0))();
      char v783 = 1;
      if (== infix<A>(_:_:)())
      {
        type metadata accessor for Log();
        uint64_t v603 = static Log.shared.getter();
        v602 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: smartRoutingMode mismatch - invalid value received, disable SR", 0x50uLL, 1)._object;
        unsigned int v604 = 2;
        dispatch thunk of Log.notice(_:function:file:line:)();
        id v103 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(void))((*v103 & *MEMORY[0x263F8EED0]) + 0x5D8))(v604);
      }
    }
    else
    {
      char v104 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x5D0))();
      v601 = &v900;
      char v900 = v104;
      unsigned __int8 v105 = objc_msgSend(v761, sel_smartRoutingMode);
      v600 = &v899;
      unsigned __int8 v899 = v105;
      lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        Builtin::Word v590 = 0;
        type metadata accessor for Log();
        uint64_t v597 = static Log.shared.getter();
        uint64_t v106 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v593 = &v787;
        uint64_t v787 = v106;
        uint64_t v788 = v107;
        int v591 = 1;
        Swift::String v108 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: smartRoutingMode mismatch - change from ", 0x3AuLL, 1);
        v588 = v108._object;
        DefaultStringInterpolation.appendLiteral(_:)(v108);
        uint64_t v109 = v749;
        uint64_t v110 = swift_bridgeObjectRelease();
        uint64_t v111 = *v109;
        v599 = (void *)MEMORY[0x263F8EED0];
        char v786 = (*(uint64_t (**)(uint64_t))((v111 & *MEMORY[0x263F8EED0]) + 0x5D0))(v110);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v112 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v591 & 1);
        v589 = v112._object;
        DefaultStringInterpolation.appendLiteral(_:)(v112);
        swift_bridgeObjectRelease();
        unint64_t v598 = 0x1F8346000uLL;
        unsigned __int8 v785 = [v761 (SEL)0x1F83463A4];
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v113 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v590, v591 & 1);
        v592 = v113._object;
        DefaultStringInterpolation.appendLiteral(_:)(v113);
        swift_bridgeObjectRelease();
        uint64_t v595 = v787;
        uint64_t v594 = v788;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        uint64_t v596 = v114;
        dispatch thunk of Log.notice(_:function:file:line:)();
        Swift::String v115 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        id v116 = [v761 (SEL)(v598 + 932)];
        (*(void (**)(id))((*v115 & *v599) + 0x5D8))(v116);
      }
    }
    char v898 = 0;
    char v117 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x3A8))();
    v586 = &v897;
    char v897 = v117;
    unsigned __int8 v118 = objc_msgSend(v761, sel_clickHoldModeLeft);
    v584 = &v896;
    unsigned __int8 v896 = v118;
    uint64_t v585 = type metadata accessor for CBPeerUIGestureMode();
    unint64_t v587 = lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
    uint64_t v119 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v119 & 1) == 0)
    {
      Builtin::Word v574 = 0;
      type metadata accessor for Log();
      uint64_t v581 = static Log.shared.getter();
      uint64_t v120 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v577 = &v791;
      uint64_t v791 = v120;
      uint64_t v792 = v121;
      int v575 = 1;
      Swift::String v122 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: clickHoldModeLeft mismatch - change from ", 0x3BuLL, 1);
      v572 = v122._object;
      DefaultStringInterpolation.appendLiteral(_:)(v122);
      unint64_t v123 = v749;
      uint64_t v124 = swift_bridgeObjectRelease();
      uint64_t v125 = *v123;
      v583 = (void *)MEMORY[0x263F8EED0];
      char v790 = (*(uint64_t (**)(uint64_t))((v125 & *MEMORY[0x263F8EED0]) + 0x3A8))(v124);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v126 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v575 & 1);
      v573 = v126._object;
      DefaultStringInterpolation.appendLiteral(_:)(v126);
      swift_bridgeObjectRelease();
      unint64_t v582 = 0x1F647D000uLL;
      unsigned __int8 v789 = [v761 (SEL)0x1F647D918];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v127 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v574, v575 & 1);
      v576 = v127._object;
      DefaultStringInterpolation.appendLiteral(_:)(v127);
      swift_bridgeObjectRelease();
      uint64_t v579 = v791;
      uint64_t v578 = v792;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v580 = v128;
      dispatch thunk of Log.notice(_:function:file:line:)();
      unint64_t v129 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v130 = [v761 (SEL)(v582 + 2328)];
      uint64_t v119 = (*(uint64_t (**)(id))((*v129 & *v583) + 0x3B0))(v130);
      char v898 = 1;
    }
    char v131 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x3D8))(v119);
    v571 = &v895;
    char v895 = v131;
    v894[1] = objc_msgSend(v761, sel_clickHoldModeRight);
    uint64_t v132 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v132 & 1) == 0)
    {
      Builtin::Word v561 = 0;
      type metadata accessor for Log();
      uint64_t v568 = static Log.shared.getter();
      uint64_t v133 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v564 = &v795;
      uint64_t v795 = v133;
      uint64_t v796 = v134;
      int v562 = 1;
      Swift::String v135 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: clickHoldModeRight mismatch - change from ", 0x3CuLL, 1);
      v559 = v135._object;
      DefaultStringInterpolation.appendLiteral(_:)(v135);
      uint64_t v136 = v749;
      uint64_t v137 = swift_bridgeObjectRelease();
      uint64_t v138 = *v136;
      v570 = (void *)MEMORY[0x263F8EED0];
      char v794 = (*(uint64_t (**)(uint64_t))((v138 & *MEMORY[0x263F8EED0]) + 0x3D8))(v137);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v139 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v562 & 1);
      v560 = v139._object;
      DefaultStringInterpolation.appendLiteral(_:)(v139);
      swift_bridgeObjectRelease();
      unint64_t v569 = 0x1F68AD000uLL;
      unsigned __int8 v793 = [v761 (SEL)0x1F68AD537];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v140 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v561, v562 & 1);
      v563 = v140._object;
      DefaultStringInterpolation.appendLiteral(_:)(v140);
      swift_bridgeObjectRelease();
      uint64_t v566 = v795;
      uint64_t v565 = v796;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v567 = v141;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v142 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v143 = [v761 (SEL)(v569 + 1335)];
      uint64_t v132 = (*(uint64_t (**)(id))((*v142 & *v570) + 0x3E0))(v143);
      char v898 = 1;
    }
    if (v898)
    {
      char v144 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x3A8))(v132);
      v556 = &v807;
      char v807 = v144;
      v555 = &v806;
      char v806 = 6;
      unint64_t v557 = lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
      int v558 = == infix<A>(_:_:)();
      uint64_t v145 = v749;
      if (v558)
      {
        int v554 = 1;
      }
      else
      {
        char v805 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x3A8))();
        char v804 = 7;
        int v554 = == infix<A>(_:_:)();
      }
      int v553 = v554;

      uint64_t v146 = v749;
      if (v553)
      {
        int v552 = 1;
      }
      else
      {
        char v803 = (*(uint64_t (**)(uint64_t *))((*v749 & *MEMORY[0x263F8EED0]) + 0x3D8))(v146);
        char v802 = 6;
        int v552 = == infix<A>(_:_:)();
      }
      int v551 = v552;

      unint64_t v147 = v749;
      if (v551)
      {
        int v550 = 1;
      }
      else
      {
        char v801 = (*(uint64_t (**)(uint64_t *))((*v749 & *MEMORY[0x263F8EED0]) + 0x3D8))(v147);
        char v800 = 7;
        int v550 = == infix<A>(_:_:)();
      }
      uint64_t v148 = v749;
      int v538 = v550;

      uint64_t v149 = *v148;
      id v541 = (void *)MEMORY[0x263F8EED0];
      Swift::String v150 = *(void (**)(void))((v149 & *MEMORY[0x263F8EED0]) + 0x638);
      int v543 = 1;
      v150(v538 & 1);
      Builtin::Word v542 = 0;
      type metadata accessor for Log();
      uint64_t v549 = static Log.shared.getter();
      Builtin::Word v539 = 50;
      uint64_t v151 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v545 = &v798;
      uint64_t v798 = v151;
      uint64_t v799 = v152;
      Swift::String v153 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: New volumeControlToggle is now: ", v539, v543 & 1);
      uint64_t v540 = v153._object;
      DefaultStringInterpolation.appendLiteral(_:)(v153);
      uint64_t v154 = v749;
      uint64_t v155 = swift_bridgeObjectRelease();
      char v156 = (*(uint64_t (**)(uint64_t))((*v154 & *v541) + 0x630))(v155);
      char v797 = v156 & v543;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v157 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v542, v543 & 1);
      v544 = v157._object;
      DefaultStringInterpolation.appendLiteral(_:)(v157);
      swift_bridgeObjectRelease();
      uint64_t v547 = v798;
      uint64_t v546 = v799;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v548 = v158;
      dispatch thunk of Log.notice(_:function:file:line:)();
      swift_bridgeObjectRelease();
      uint64_t v132 = swift_release();
    }
    int v537 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x630))(v132);
    uint64_t v159 = v749;
    id v160 = v761;
    if (v537)
    {
      int v536 = 0;
    }
    else
    {
      int v161 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x408))();
      Swift::String v535 = v809;
      v809[0] = v161;
      unsigned int v162 = objc_msgSend(v761, sel_listeningModeConfigs);
      Swift::String v533 = &v808;
      unsigned int v808 = v162;
      uint64_t v534 = type metadata accessor for CBListeningModeConfigs();
      lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
      int v536 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    int v532 = v536;

    if (v532)
    {
      Builtin::Word v522 = 0;
      type metadata accessor for Log();
      uint64_t v529 = static Log.shared.getter();
      uint64_t v164 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      uint64_t v525 = &v811;
      uint64_t v811 = v164;
      uint64_t v812 = v165;
      int v523 = 1;
      Swift::String v166 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: listeningModeConfigs mismatch - change from ", 0x3EuLL, 1);
      char v518 = v166._object;
      DefaultStringInterpolation.appendLiteral(_:)(v166);
      id v167 = v749;
      uint64_t v168 = swift_bridgeObjectRelease();
      uint64_t v169 = *v167;
      char v531 = (void *)MEMORY[0x263F8EED0];
      int v170 = (*(uint64_t (**)(uint64_t))((v169 & *MEMORY[0x263F8EED0]) + 0x408))(v168);
      unsigned __int8 v519 = &v810;
      int v810 = v170;
      uint64_t v521 = type metadata accessor for CBListeningModeConfigs();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v171 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v523 & 1);
      uint64_t v520 = v171._object;
      DefaultStringInterpolation.appendLiteral(_:)(v171);
      swift_bridgeObjectRelease();
      unint64_t v530 = 0x1F7087000uLL;
      v809[1] = [v761 (SEL)0x1F7087546];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v172 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v522, v523 & 1);
      v524 = v172._object;
      DefaultStringInterpolation.appendLiteral(_:)(v172);
      swift_bridgeObjectRelease();
      uint64_t v527 = v811;
      uint64_t v526 = v812;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v528 = v173;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v174 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v175 = [v761 (SEL)(v530 + 1350)];
      uint64_t v163 = (*(uint64_t (**)(id))((*v174 & *v531) + 0x410))(v175);
    }
    char v176 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x4E0))(v163);
    unsigned __int8 v516 = v894;
    v894[0] = v176;
    unsigned __int8 v177 = objc_msgSend(v761, sel_doubleTapActionLeft);
    uint64_t v514 = &v893;
    unsigned __int8 v893 = v177;
    uint64_t v515 = type metadata accessor for CBDoubleTapAction();
    unint64_t v517 = lazy protocol witness table accessor for type CBDoubleTapAction and conformance CBDoubleTapAction();
    uint64_t v178 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v178 & 1) == 0)
    {
      Builtin::Word v504 = 0;
      type metadata accessor for Log();
      uint64_t v511 = static Log.shared.getter();
      uint64_t v179 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      uint64_t v507 = &v815;
      uint64_t v815 = v179;
      uint64_t v816 = v180;
      int v505 = 1;
      Swift::String v181 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: doubleTapActionLeft mismatch - change from ", 0x3DuLL, 1);
      id v502 = v181._object;
      DefaultStringInterpolation.appendLiteral(_:)(v181);
      int v182 = v749;
      uint64_t v183 = swift_bridgeObjectRelease();
      uint64_t v184 = *v182;
      uint64_t v513 = (void *)MEMORY[0x263F8EED0];
      char v814 = (*(uint64_t (**)(uint64_t))((v184 & *MEMORY[0x263F8EED0]) + 0x4E0))(v183);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v185 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v505 & 1);
      uint64_t v503 = v185._object;
      DefaultStringInterpolation.appendLiteral(_:)(v185);
      swift_bridgeObjectRelease();
      unint64_t v512 = 0x1F6C2F000uLL;
      unsigned __int8 v813 = [v761 (SEL)0x1F6C2F218];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v186 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v504, v505 & 1);
      uint64_t v506 = v186._object;
      DefaultStringInterpolation.appendLiteral(_:)(v186);
      swift_bridgeObjectRelease();
      uint64_t v509 = v815;
      uint64_t v508 = v816;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v510 = v187;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v188 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v189 = [v761 (SEL)(v512 + 536)];
      uint64_t v178 = (*(uint64_t (**)(id))((*v188 & *v513) + 0x4E8))(v189);
    }
    char v190 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x510))(v178);
    uint64_t v501 = &v892;
    char v892 = v190;
    v891[1] = objc_msgSend(v761, sel_doubleTapActionRight);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      Builtin::Word v491 = 0;
      type metadata accessor for Log();
      uint64_t v498 = static Log.shared.getter();
      uint64_t v191 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v494 = &v819;
      uint64_t v819 = v191;
      uint64_t v820 = v192;
      int v492 = 1;
      Swift::String v193 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: doubleTapActionRight mismatch - change from ", 0x3EuLL, 1);
      char v489 = v193._object;
      DefaultStringInterpolation.appendLiteral(_:)(v193);
      uint64_t v194 = v749;
      uint64_t v195 = swift_bridgeObjectRelease();
      uint64_t v196 = *v194;
      uint64_t v500 = (void *)MEMORY[0x263F8EED0];
      char v818 = (*(uint64_t (**)(uint64_t))((v196 & *MEMORY[0x263F8EED0]) + 0x510))(v195);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v197 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v492 & 1);
      unsigned __int8 v490 = v197._object;
      DefaultStringInterpolation.appendLiteral(_:)(v197);
      swift_bridgeObjectRelease();
      unint64_t v499 = 0x1F6305000uLL;
      unsigned __int8 v817 = [v761 (SEL)0x1F63052ABLL];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v198 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v491, v492 & 1);
      unsigned __int8 v493 = v198._object;
      DefaultStringInterpolation.appendLiteral(_:)(v198);
      swift_bridgeObjectRelease();
      uint64_t v496 = v819;
      uint64_t v495 = v820;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v497 = v199;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v200 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v201 = [v761 (SEL)(v499 + 683)];
      (*(void (**)(id))((*v200 & *v500) + 0x518))(v201);
    }
    unsigned __int8 v202 = objc_msgSend(v761, sel_crownRotationDirection);
    char v486 = v891;
    v891[0] = v202;
    uint64_t v484 = &v890;
    char v890 = 0;
    uint64_t v485 = type metadata accessor for CBPeerCrownRotationDirection();
    unint64_t v487 = lazy protocol witness table accessor for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection();
    int v488 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v203 = v749;
    id v204 = v761;
    if (v488)
    {
      int v483 = 0;
    }
    else
    {
      char v205 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x540))();
      uint64_t v482 = v822;
      v822[0] = v205;
      unsigned __int8 v821 = objc_msgSend(v761, sel_crownRotationDirection);
      int v483 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    int v481 = v483;

    if (v481)
    {
      Builtin::Word v471 = 0;
      type metadata accessor for Log();
      uint64_t v478 = static Log.shared.getter();
      uint64_t v207 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      uint64_t v474 = &v823;
      uint64_t v823 = v207;
      uint64_t v824 = v208;
      int v472 = 1;
      Swift::String v209 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: crownRotationDirection mismatch - change from ", 0x40uLL, 1);
      char v469 = v209._object;
      DefaultStringInterpolation.appendLiteral(_:)(v209);
      unsigned int v210 = v749;
      uint64_t v211 = swift_bridgeObjectRelease();
      uint64_t v212 = *v210;
      uint64_t v480 = (void *)MEMORY[0x263F8EED0];
      v822[2] = (*(uint64_t (**)(uint64_t))((v212 & *MEMORY[0x263F8EED0]) + 0x540))(v211);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v213 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v472 & 1);
      char v470 = v213._object;
      DefaultStringInterpolation.appendLiteral(_:)(v213);
      swift_bridgeObjectRelease();
      unint64_t v479 = 0x1F6551000uLL;
      v822[1] = [v761 (SEL)0x1F6551518];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v214 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v471, v472 & 1);
      v473 = v214._object;
      DefaultStringInterpolation.appendLiteral(_:)(v214);
      swift_bridgeObjectRelease();
      uint64_t v476 = v823;
      uint64_t v475 = v824;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v477 = v215;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v216 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v217 = [v761 (SEL)(v479 + 1304)];
      uint64_t v206 = (*(uint64_t (**)(id))((*v216 & *v480) + 0x548))(v217);
    }
    if (((*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x570))(v206) & 1) == 1) {
      int v468 = 1;
    }
    else {
      int v468 = 2;
    }
    int v462 = v468;
    char v889 = v468;
    unsigned __int8 v218 = objc_msgSend(v761, sel_placementMode);
    char v465 = &v888;
    unsigned __int8 v888 = v218;
    uint64_t v463 = &v887;
    char v887 = 0;
    uint64_t v464 = type metadata accessor for CBDevicePlacementMode();
    unint64_t v466 = lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode();
    int v467 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v219 = v761;
    if (v467)
    {
      int v461 = 0;
    }
    else
    {
      char v460 = &v826;
      char v826 = v462;
      unsigned __int8 v825 = objc_msgSend(v761, sel_placementMode);
      int v461 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    int v459 = v461;

    if (v459)
    {
      Builtin::Word v448 = 0;
      type metadata accessor for Log();
      uint64_t v455 = static Log.shared.getter();
      uint64_t v221 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v451 = &v829;
      uint64_t v829 = v221;
      uint64_t v830 = v222;
      int v449 = 1;
      Swift::String v223 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: inEarDetection mismatch - change from ", 0x38uLL, 1);
      uint64_t v446 = v223._object;
      DefaultStringInterpolation.appendLiteral(_:)(v223);
      swift_bridgeObjectRelease();
      v828[2] = v462;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v224 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v449 & 1);
      uint64_t v447 = v224._object;
      DefaultStringInterpolation.appendLiteral(_:)(v224);
      swift_bridgeObjectRelease();
      unint64_t v456 = 0x1F8344000uLL;
      v828[1] = [v761 (SEL)0x1F834466ALL];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v225 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v448, v449 & 1);
      id v450 = v225._object;
      DefaultStringInterpolation.appendLiteral(_:)(v225);
      swift_bridgeObjectRelease();
      uint64_t v453 = v829;
      uint64_t v452 = v830;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v454 = v226;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v227 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      unsigned __int8 v228 = [v761 (SEL)(v456 + 1642)];
      uint64_t v458 = v828;
      v828[0] = v228;
      uint64_t v457 = &v827;
      char v827 = 1;
      lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode();
      char v229 = == infix<A>(_:_:)();
      uint64_t v220 = (*(uint64_t (**)(void))((*v227 & *MEMORY[0x263F8EED0]) + 0x578))(v229 & 1);
    }
    char v230 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x600))(v220);
    uint64_t v445 = &v886;
    char v886 = v230;
    unsigned __int8 v231 = objc_msgSend(v761, sel_microphoneMode);
    uint64_t v443 = &v885;
    unsigned __int8 v885 = v231;
    uint64_t v444 = type metadata accessor for CBMicrophoneMode();
    lazy protocol witness table accessor for type CBMicrophoneMode and conformance CBMicrophoneMode();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      Builtin::Word v433 = 0;
      type metadata accessor for Log();
      uint64_t v440 = static Log.shared.getter();
      uint64_t v232 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      unint64_t v436 = &v833;
      uint64_t v833 = v232;
      uint64_t v834 = v233;
      int v434 = 1;
      Swift::String v234 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: microphoneMode mismatch - change from ", 0x38uLL, 1);
      v431 = v234._object;
      DefaultStringInterpolation.appendLiteral(_:)(v234);
      uint64_t v235 = v749;
      uint64_t v236 = swift_bridgeObjectRelease();
      uint64_t v237 = *v235;
      uint64_t v442 = (void *)MEMORY[0x263F8EED0];
      char v832 = (*(uint64_t (**)(uint64_t))((v237 & *MEMORY[0x263F8EED0]) + 0x600))(v236);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v238 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v434 & 1);
      v432 = v238._object;
      DefaultStringInterpolation.appendLiteral(_:)(v238);
      swift_bridgeObjectRelease();
      unint64_t v441 = 0x1F6B5C000uLL;
      unsigned __int8 v831 = [v761 (SEL)0x1F6B5C886];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v239 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v433, v434 & 1);
      unint64_t v435 = v239._object;
      DefaultStringInterpolation.appendLiteral(_:)(v239);
      swift_bridgeObjectRelease();
      uint64_t v438 = v833;
      uint64_t v437 = v834;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v439 = v240;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v241 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      id v242 = [v761 (SEL)(v441 + 2182)];
      (*(void (**)(id))((*v241 & *v442) + 0x608))(v242);
    }
    unsigned int v429 = objc_msgSend(v761, sel_endCallConfig);
    unsigned __int8 v884 = v429;
    unsigned int v430 = objc_msgSend(v761, sel_muteControlConfig);
    unsigned __int8 v883 = v430;
    if (CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v761, sel_muteControlCapability)))
    {
      Swift::String v427 = v846;
      v846[0] = v429;
      id v425 = &v845;
      char v845 = 0;
      uint64_t v426 = type metadata accessor for CBPeerCallConfig();
      unint64_t v428 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      if (== infix<A>(_:_:)())
      {
        int v424 = 1;
      }
      else
      {
        v844[6] = v429;
        v844[5] = 1;
        int v424 = == infix<A>(_:_:)();
      }
      if (v424)
      {
        int v423 = 1;
      }
      else
      {
        v844[4] = v430;
        v844[3] = 0;
        int v423 = == infix<A>(_:_:)();
      }
      if (v423)
      {
        int v422 = 1;
      }
      else
      {
        v844[2] = v430;
        v844[1] = 1;
        int v422 = == infix<A>(_:_:)();
      }
      if (v422)
      {
        unsigned __int8 v884 = 3;
        unsigned __int8 v883 = 2;
      }
      char v243 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x798))();
      Swift::String v419 = v844;
      v844[0] = v243;
      id v418 = &v843;
      unsigned __int8 v843 = v883;
      unint64_t v420 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      int v421 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v244 = v749;
      if (v421)
      {
        char v842 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x768))();
        unsigned __int8 v841 = v884;
        int v417 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
      }
      else
      {
        int v417 = 1;
      }
      int v416 = v417;

      if (v416)
      {
        Builtin::Word v407 = 0;
        type metadata accessor for Log();
        uint64_t v414 = static Log.shared.getter();
        Builtin::Word v405 = 4;
        uint64_t v245 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        unint64_t v410 = &v839;
        uint64_t v839 = v245;
        uint64_t v840 = v246;
        int v408 = 1;
        Swift::String v247 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: muteControlGesture mismatch - change from ", 0x3CuLL, 1);
        int v401 = v247._object;
        DefaultStringInterpolation.appendLiteral(_:)(v247);
        uint64_t v248 = v749;
        uint64_t v249 = swift_bridgeObjectRelease();
        uint64_t v250 = *v248;
        id v415 = (void *)MEMORY[0x263F8EED0];
        char v838 = (*(uint64_t (**)(uint64_t))((v250 & *MEMORY[0x263F8EED0]) + 0x798))(v249);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        unint64_t v404 = " to ";
        Swift::String v251 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", v405, v408 & 1);
        uint64_t v402 = v251._object;
        DefaultStringInterpolation.appendLiteral(_:)(v251);
        swift_bridgeObjectRelease();
        unsigned __int8 v837 = v883;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v252 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" and endCallGesture mismatch - change from ", 0x2BuLL, v408 & 1);
        unint64_t v403 = v252._object;
        DefaultStringInterpolation.appendLiteral(_:)(v252);
        float v253 = v749;
        uint64_t v254 = swift_bridgeObjectRelease();
        char v836 = (*(uint64_t (**)(uint64_t))((*v253 & *v415) + 0x768))(v254);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v255 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v404, v405, v408 & 1);
        id v406 = v255._object;
        DefaultStringInterpolation.appendLiteral(_:)(v255);
        swift_bridgeObjectRelease();
        unsigned __int8 v835 = v884;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v256 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v407, v408 & 1);
        uint64_t v409 = v256._object;
        DefaultStringInterpolation.appendLiteral(_:)(v256);
        swift_bridgeObjectRelease();
        uint64_t v412 = v839;
        uint64_t v411 = v840;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        uint64_t v413 = v257;
        dispatch thunk of Log.notice(_:function:file:line:)();
        uint64_t v258 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(void))((*v258 & *v415) + 0x770))(v884);
        (*(void (**)(void))((*v749 & *v415) + 0x7A0))(v883);
      }
    }
    else if (CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v761, sel_endCallCapability)))
    {
      v399 = v852;
      v852[0] = v429;
      uint64_t v397 = &v851;
      char v851 = 0;
      uint64_t v398 = type metadata accessor for CBPeerCallConfig();
      unint64_t v400 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      if (== infix<A>(_:_:)())
      {
        int v396 = 1;
      }
      else
      {
        v850[2] = v429;
        v850[1] = 1;
        int v396 = == infix<A>(_:_:)();
      }
      if (v396) {
        unsigned __int8 v884 = 2;
      }
      char v259 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x768))();
      uint64_t v395 = v850;
      v850[0] = v259;
      Swift::String v394 = &v849;
      unsigned __int8 v849 = v884;
      lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        Builtin::Word v385 = 0;
        type metadata accessor for Log();
        uint64_t v392 = static Log.shared.getter();
        uint64_t v260 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        unint64_t v388 = &v847;
        uint64_t v847 = v260;
        uint64_t v848 = v261;
        int v386 = 1;
        Swift::String v262 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: endCallGesture mismatch - change from ", 0x38uLL, 1);
        unsigned int v383 = v262._object;
        DefaultStringInterpolation.appendLiteral(_:)(v262);
        uint64_t v263 = v749;
        uint64_t v264 = swift_bridgeObjectRelease();
        uint64_t v265 = *v263;
        uint64_t v393 = (void *)MEMORY[0x263F8EED0];
        v846[2] = (*(uint64_t (**)(uint64_t))((v265 & *MEMORY[0x263F8EED0]) + 0x768))(v264);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v266 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v386 & 1);
        v384 = v266._object;
        DefaultStringInterpolation.appendLiteral(_:)(v266);
        swift_bridgeObjectRelease();
        v846[1] = v884;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        Swift::String v267 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v385, v386 & 1);
        v387 = v267._object;
        DefaultStringInterpolation.appendLiteral(_:)(v267);
        swift_bridgeObjectRelease();
        uint64_t v390 = v847;
        uint64_t v389 = v848;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        uint64_t v391 = v268;
        dispatch thunk of Log.notice(_:function:file:line:)();
        v269 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(void))((*v269 & *v393) + 0x770))(v884);
      }
    }
    if (((*(uint64_t (**)(void))((*v749 & *MEMORY[0x263F8EED0]) + 0x7E0))() & 1) == 1) {
      int v382 = 1;
    }
    else {
      int v382 = 2;
    }
    int v376 = v382;
    char v882 = v382;
    unsigned __int8 v270 = objc_msgSend(v761, sel_selectiveSpeechListeningConfig);
    unint64_t v379 = &v881;
    unsigned __int8 v881 = v270;
    unsigned int v377 = &v880;
    char v880 = 0;
    uint64_t v378 = type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
    unint64_t v380 = lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig();
    int v381 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v271 = v761;
    if (v381)
    {
      int v375 = 0;
    }
    else
    {
      v852[2] = objc_msgSend(v761, sel_selectiveSpeechListeningConfig);
      v852[1] = 3;
      int v375 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    int v374 = v375;

    id v272 = v761;
    if (v374)
    {
      v372 = &v853;
      char v853 = v376;
      v852[3] = objc_msgSend(v761, sel_selectiveSpeechListeningConfig);
      int v373 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      int v373 = 0;
    }
    int v371 = v373;

    if (v371)
    {
      Builtin::Word v360 = 0;
      type metadata accessor for Log();
      uint64_t v367 = static Log.shared.getter();
      uint64_t v274 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      uint64_t v363 = &v856;
      uint64_t v856 = v274;
      uint64_t v857 = v275;
      int v361 = 1;
      Swift::String v276 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: SelectiveSpeechListening mismatch - change from ", 0x42uLL, 1);
      id v358 = v276._object;
      DefaultStringInterpolation.appendLiteral(_:)(v276);
      swift_bridgeObjectRelease();
      v855[2] = v376;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v277 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v361 & 1);
      BOOL v359 = v277._object;
      DefaultStringInterpolation.appendLiteral(_:)(v277);
      swift_bridgeObjectRelease();
      unint64_t v368 = 0x1F8344000uLL;
      v855[1] = [v761 (SEL)0x1F8344B43];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v278 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v360, v361 & 1);
      uint64_t v362 = v278._object;
      DefaultStringInterpolation.appendLiteral(_:)(v278);
      swift_bridgeObjectRelease();
      uint64_t v365 = v856;
      uint64_t v364 = v857;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v366 = v279;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v280 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      unsigned __int8 v281 = [v761 (SEL)(v368 + 2883)];
      v370 = v855;
      v855[0] = v281;
      BOOL v369 = &v854;
      char v854 = 1;
      lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig();
      char v282 = == infix<A>(_:_:)();
      uint64_t v273 = (*(uint64_t (**)(void))((*v280 & *MEMORY[0x263F8EED0]) + 0x7E8))(v282 & 1);
    }
    if (((*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x810))(v273) & 1) == 1) {
      int v357 = 1;
    }
    else {
      int v357 = 2;
    }
    int v351 = v357;
    char v879 = v357;
    unsigned __int8 v283 = objc_msgSend(v761, sel_conversationDetectConfig);
    uint64_t v354 = &v878;
    unsigned __int8 v878 = v283;
    uint64_t v352 = &v877;
    char v877 = 0;
    uint64_t v353 = type metadata accessor for CBPeerConversationDetectConfig();
    unint64_t v355 = lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig();
    int v356 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v284 = v761;
    if (v356)
    {
      int v350 = 0;
    }
    else
    {
      unsigned __int8 v859 = objc_msgSend(v761, sel_conversationDetectConfig);
      char v858 = 3;
      int v350 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    int v349 = v350;

    id v285 = v761;
    if (v349)
    {
      uint32_t v347 = &v861;
      char v861 = v351;
      unsigned __int8 v860 = objc_msgSend(v761, sel_conversationDetectConfig);
      int v348 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      int v348 = 0;
    }
    int v346 = v348;

    if (v346)
    {
      Builtin::Word v335 = 0;
      type metadata accessor for Log();
      uint64_t v342 = static Log.shared.getter();
      uint64_t v287 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      uint64_t v338 = &v864;
      uint64_t v864 = v287;
      uint64_t v865 = v288;
      int v336 = 1;
      Swift::String v289 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: ConversationDetect mismatch - change from ", 0x3CuLL, 1);
      uint64_t v333 = v289._object;
      DefaultStringInterpolation.appendLiteral(_:)(v289);
      swift_bridgeObjectRelease();
      v863[2] = v351;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v290 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v336 & 1);
      uint64_t v334 = v290._object;
      DefaultStringInterpolation.appendLiteral(_:)(v290);
      swift_bridgeObjectRelease();
      unint64_t v343 = 0x1F8343000uLL;
      v863[1] = [v761 (SEL)0x1F8343111];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v291 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v335, v336 & 1);
      uint32_t v337 = v291._object;
      DefaultStringInterpolation.appendLiteral(_:)(v291);
      swift_bridgeObjectRelease();
      uint64_t v340 = v864;
      uint64_t v339 = v865;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v341 = v292;
      dispatch thunk of Log.notice(_:function:file:line:)();
      uint64_t v293 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      unsigned __int8 v294 = [v761 (SEL)(v343 + 273)];
      v345 = v863;
      v863[0] = v294;
      uint64_t v344 = &v862;
      char v862 = 1;
      lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig();
      char v295 = == infix<A>(_:_:)();
      uint64_t v286 = (*(uint64_t (**)(void))((*v293 & *MEMORY[0x263F8EED0]) + 0x818))(v295 & 1);
    }
    if (((*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x263F8EED0]) + 0x840))(v286) & 1) == 1) {
      int v332 = 1;
    }
    else {
      int v332 = 2;
    }
    int v326 = v332;
    char v876 = v332;
    unsigned __int8 v296 = objc_msgSend(v761, sel_adaptiveVolumeConfig);
    id v329 = &v875;
    unsigned __int8 v875 = v296;
    uint64_t v327 = &v874;
    char v874 = 0;
    uint64_t v328 = type metadata accessor for CBPeerAdaptiveVolumeConfig();
    unint64_t v330 = lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig();
    int v331 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v297 = v761;
    if (v331)
    {
      int v325 = 0;
    }
    else
    {
      unsigned __int8 v867 = objc_msgSend(v761, sel_adaptiveVolumeConfig);
      char v866 = 3;
      int v325 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    int v324 = v325;

    id v298 = v761;
    if (v324)
    {
      uint64_t v322 = &v869;
      char v869 = v326;
      unsigned __int8 v868 = objc_msgSend(v761, sel_adaptiveVolumeConfig);
      int v323 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      int v323 = 0;
    }
    int v321 = v323;

    if (v321)
    {
      Builtin::Word v310 = 0;
      type metadata accessor for Log();
      uint64_t v317 = static Log.shared.getter();
      uint64_t v299 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      uint64_t v313 = &v872;
      uint64_t v872 = v299;
      uint64_t v873 = v300;
      int v311 = 1;
      Swift::String v301 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: AdaptiveVolume mismatch - change from ", 0x38uLL, 1);
      v309[3] = v301._object;
      DefaultStringInterpolation.appendLiteral(_:)(v301);
      swift_bridgeObjectRelease();
      v871[2] = v326;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v302 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v311 & 1);
      v309[4] = v302._object;
      DefaultStringInterpolation.appendLiteral(_:)(v302);
      swift_bridgeObjectRelease();
      unint64_t v318 = 0x1F8342000uLL;
      v871[1] = [v761 (SEL)0x1F8342AD7];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      Swift::String v303 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v310, v311 & 1);
      id v312 = v303._object;
      DefaultStringInterpolation.appendLiteral(_:)(v303);
      swift_bridgeObjectRelease();
      uint64_t v315 = v872;
      uint64_t v314 = v873;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v316 = v304;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v305 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      unsigned __int8 v306 = [v761 (SEL)(v318 + 2775)];
      uint64_t v320 = v871;
      v871[0] = v306;
      uint64_t v319 = &v870;
      char v870 = 1;
      lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig();
      char v307 = == infix<A>(_:_:)();
      (*(void (**)(void))((*v305 & *MEMORY[0x263F8EED0]) + 0x848))(v307 & 1);
    }
    return swift_bridgeObjectRelease();
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:)()
{
}

Swift::String __swiftcall HeadphoneDevice.getModelName()()
{
  BOOL v15 = HeadphoneDevice.deviceDelegate.getter() == 0;
  outlined destroy of HeadphoneDeviceDelegate?();
  if (v15) {
    assertionFailure(_:file:line:)();
  }
  type metadata accessor for Log();
  static Log.shared.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deviceDelegate will call isAppleHeadphone", 0x3BuLL, 1);
  uint64_t v5 = 823;
  dispatch thunk of Log.notice(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v14 = HeadphoneDevice.deviceDelegate.getter();
  if (v14)
  {
    uint64_t v13 = (void *)v14;
  }
  else
  {
    LOBYTE(v5) = 2;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t ObjectType = swift_getObjectType();
  id v11 = (id)(*(uint64_t (**)(uint64_t))((*v16 & *MEMORY[0x263F8EED0]) + 0x210))(ObjectType);
  unsigned __int8 v12 = objc_msgSend(v13, sel_isAppleHeadphoneWithCbDevice_, v5);

  swift_unknownObjectRelease();
  if (v12)
  {
    id v9 = (id)(*(uint64_t (**)(void))((*v16 & *MEMORY[0x263F8EED0]) + 0x210))();
    id v10 = objc_msgSend(v9, sel_productName);
    if (v10)
    {
      v7._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7._object = v1;

      Swift::String v8 = v7;
    }
    else
    {
      Swift::String v8 = (Swift::String)0;
    }

    if (v8._object)
    {
      Swift::String v17 = v8;
    }
    else
    {
      Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AirPods", 7uLL, 1);
      outlined destroy of String?();
    }
    Swift::String v6 = v17;
  }
  else
  {
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Not Available", 0xDuLL, 1);
  }
  object = v6._object;
  uint64_t countAndFlagsBits = v6._countAndFlagsBits;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t implicit closure #1 in HeadphoneDevice.getModelName()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deviceDelegate should not be nil here", 0x37uLL, 1)._countAndFlagsBits;
}

Swift::Void __swiftcall HeadphoneDevice.setFindMyStatus()()
{
  uint64_t v51 = 0;
  Swift::String v47 = partial apply for closure #1 in HeadphoneDevice.setFindMyStatus();
  unsigned int v48 = partial apply for closure #2 in HeadphoneDevice.setFindMyStatus();
  id v49 = "setFindMyStatus()";
  unint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v83 = 0;
  uint64_t v81 = 0;
  unint64_t v82 = 0;
  dispatch_group_t v80 = 0;
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v52 - 8;
  unint64_t v55 = (*(void *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v1);
  unsigned int v56 = (char *)v24 - v55;
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = v57 - 8;
  unint64_t v60 = (*(void *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v57, v2);
  uint64_t v61 = (char *)v24 - v60;
  uint64_t v83 = v0;
  uint64_t v3 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
  uint64_t v63 = v3;
  swift_retain();
  (*(void (**)(uint64_t))(*(void *)v3 + 152))(9);
  uint64_t v4 = v62;
  uint64_t v5 = swift_release();
  id v64 = (id)(*(uint64_t (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x210))(v5);
  id v65 = objc_msgSend(v64, sel_btAddressData);
  if (v65)
  {
    id v46 = v65;
    id v41 = v65;
    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v6;

    uint64_t v44 = v42;
    unint64_t v45 = v43;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0xF000000000000000;
  }
  unint64_t v39 = v45;
  uint64_t v40 = v44;
  if ((v45 & 0xF000000000000000) == 0xF000000000000000)
  {

    type metadata accessor for Log();
    v24[2] = static Log.shared.getter();
    v24[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Unable to set FindMyNetwork Status, Invalid BT Address", 0x48uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v37 = v40;
    unint64_t v38 = v39;
    Swift::String v7 = v62;
    unint64_t v36 = v39;
    uint64_t v35 = v40;
    uint64_t v81 = v40;
    unint64_t v82 = v39;

    dispatch_group_t v34 = dispatch_group_create();
    dispatch_group_t v80 = v34;
    dispatch_group_enter(v34);
    uint64_t v8 = *v7;
    float v25 = (void *)MEMORY[0x263F8EED0];
    id v9 = (void *)(*(uint64_t (**)(void))((v8 & *MEMORY[0x263F8EED0]) + 0x2E8))();
    id v10 = v62;
    id v29 = v9;
    swift_getObjectType();
    outlined copy of Data._Representation(v35, v36);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v11 = outlined consume of Data._Representation(v35, v36);
    int v26 = (*(uint64_t (**)(uint64_t))((*v10 & *v25) + 0x2B8))(v11);
    unsigned __int8 v12 = v62;
    uint64_t v13 = v62;
    uint64_t v14 = v34;
    uint64_t v30 = 7;
    uint64_t v15 = swift_allocObject();
    id v16 = v47;
    uint64_t v17 = v15;
    dispatch_group_t v18 = v34;
    *(void *)(v17 + 16) = v62;
    *(void *)(v17 + 24) = v18;
    uint64_t v78 = v16;
    uint64_t v79 = v17;
    uint64_t aBlock = MEMORY[0x263EF8330];
    int v31 = 1107296256;
    int v74 = 1107296256;
    int v75 = 0;
    uint64_t v76 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    uint64_t v77 = &block_descriptor;
    id v27 = _Block_copy(&aBlock);
    swift_release();

    objc_msgSend(v29, sel_setFindMyNetworkStatusForMACAddress_status_completion_, isa, v26 & 1, v27);
    _Block_release(v27);

    swift_unknownObjectRelease();
    type metadata accessor for OS_dispatch_queue();
    id v33 = (id)static OS_dispatch_queue.main.getter();
    uint64_t v19 = v62;
    id v20 = v62;
    uint64_t v21 = swift_allocObject();
    float v22 = v48;
    int v23 = v31;
    *(void *)(v21 + 16) = v62;
    uint64_t v71 = v22;
    uint64_t v72 = v21;
    uint64_t v66 = MEMORY[0x263EF8330];
    int v67 = v23;
    int v68 = 0;
    unsigned int v69 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v70 = &block_descriptor_261;
    float v32 = _Block_copy(&v66);
    default argument 0 of OS_dispatch_group.notify(qos:flags:queue:execute:)();
    default argument 1 of OS_dispatch_group.notify(qos:flags:queue:execute:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v52);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v57);
    _Block_release(v32);
    swift_release();

    outlined consume of Data._Representation(v35, v36);
  }
}

void closure #1 in HeadphoneDevice.setFindMyStatus()(void *a1, void *a2, NSObject *a3)
{
  unint64_t v38 = a1;
  uint64_t v37 = a2;
  unint64_t v36 = a3;
  uint64_t v35 = a1;
  if (a1)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    uint64_t v33 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v34 = v13;
    Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Unable to set FindMyNetwork Status. Error code: ", 0x42uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    id v15 = a1;
    float v32 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v31 = v16;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    uint64_t v28 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v29 = v3;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: FindMyNetwork set to ", 0x27uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    uint64_t v5 = swift_bridgeObjectRelease();
    int v23 = (void *)MEMORY[0x263F8EED0];
    v27[39] = (*(uint64_t (**)(uint64_t))((*a2 & *MEMORY[0x263F8EED0]) + 0x2B8))(v5) & 1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.notice(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t))((*a2 & *v23) + 0x308))(1);
    uint64_t v22 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    uint64_t v7 = swift_retain();
    if ((*(uint64_t (**)(uint64_t))((*a2 & *v23) + 0x2B8))(v7))
    {
      Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
      object = v10._object;
      uint64_t countAndFlagsBits = v10._countAndFlagsBits;
    }
    else
    {
      Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
      object = v11._object;
      uint64_t countAndFlagsBits = v11._countAndFlagsBits;
    }
    uint64_t v20 = countAndFlagsBits;
    uint64_t v21 = object;
    dispatch_group_t v18 = (void (*)(unsigned char *))(*(uint64_t (**)(unsigned char *))(*(void *)v22 + 112))(v27);
    *(void *)(v12 + 224) = v20;
    *(void *)(v12 + 232) = v21;
    swift_bridgeObjectRelease();
    v18(v27);
    swift_release();
    uint64_t v19 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    swift_retain();
    (*(void (**)(uint64_t))(*(void *)v19 + 152))(9);
    swift_release();
  }
  dispatch_group_leave(a3);
}

uint64_t closure #2 in HeadphoneDevice.setFindMyStatus()(void *a1)
{
  if (((*(uint64_t (**)(void))((*a1 & *MEMORY[0x263F8EED0]) + 0x300))() & 1) == 0) {
    (*(void (**)(void))((*a1 & *MEMORY[0x263F8EED0]) + 0xAA8))();
  }
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void))((*a1 & *MEMORY[0x263F8EED0]) + 0x320))(0);
  return (*(uint64_t (**)(void))((*a1 & *v2) + 0x308))(0);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v1 = swift_retain();
  v3(v1);
  return swift_release();
}

uint64_t default argument 0 of OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 1 of OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Void __swiftcall HeadphoneDevice.resetToggle()()
{
  type metadata accessor for Log();
  static Log.shared.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Reset FindMyNetwork toggle", 0x2CuLL, 1);
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  uint64_t v0 = (*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x2A8))(1);
  int v1 = (*(uint64_t (**)(uint64_t))((*v2 & *v3) + 0x2B8))(v0);
  (*(void (**)(void))((*v2 & *v3) + 0x2C0))((v1 ^ 1) & 1);
}

void HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = a1;
  unint64_t v18 = a2;
  uint64_t v21 = partial apply for closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:);
  v14[3] = "fetchFindMyNetworkStatus(btAddr:)";
  v14[4] = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  dispatch_group_t v41 = 0;
  char v33 = 0;
  uint64_t v28 = type metadata accessor for DispatchTime();
  uint64_t v25 = *(void *)(v28 - 8);
  uint64_t v26 = v28 - 8;
  unint64_t v15 = (*(void *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v19, v18);
  id v27 = (char *)v14 - v15;
  unint64_t v16 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v3, v5);
  uint64_t v31 = (char *)v14 - v16;
  uint64_t v43 = v6;
  uint64_t v44 = v7;
  uint64_t v42 = v2;
  dispatch_group_t v17 = dispatch_group_create();
  dispatch_group_t v41 = v17;
  dispatch_group_enter(v17);
  uint64_t v8 = (void *)(*(uint64_t (**)(void))((*v2 & *MEMORY[0x263F8EED0]) + 0x2E8))();
  dispatch_group_t v9 = v17;
  id v24 = v8;
  swift_getObjectType();
  outlined copy of Data._Representation(v19, v18);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v19, v18);
  id v10 = v20;
  Swift::String v11 = v9;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v21;
  *(void *)(v12 + 16) = v20;
  *(void *)(v12 + 24) = v9;
  unint64_t v39 = v13;
  uint64_t v40 = v12;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v35 = 1107296256;
  int v36 = 0;
  uint64_t v37 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  unint64_t v38 = &block_descriptor_267;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v24, sel_fetchFindMyNetworkStatusForMACAddress_completion_, isa, v22);
  _Block_release(v22);

  swift_unknownObjectRelease();
  static DispatchTime.now()();
  MEMORY[0x253385D20](v27, 0.02);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v29 = v25 + 8;
  v30(v27, v28);
  int v32 = MEMORY[0x253386180](v31);
  v30(v31, v28);
  char v33 = v32 & 1;
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    type metadata accessor for Log();
    void v14[2] = static Log.shared.getter();
    v14[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: fetchFindMyNetworkStatus timedout", 0x33uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

void closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(char a1, void *a2, void *a3, NSObject *a4)
{
  if (a2)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: FindMy Status: Fetch Completed: Error code:", 0x3DuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    id v8 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
  }
  else
  {
    id v10 = (void *)MEMORY[0x263F8EED0];
    (*(void (**)(uint64_t))((*a3 & *MEMORY[0x263F8EED0]) + 0x290))(1);
    (*(void (**)(void))((*a3 & *v10) + 0x2C0))(a1 & 1);
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: FindMy Status enabled: ", 0x29uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    uint64_t v5 = swift_bridgeObjectRelease();
    (*(uint64_t (**)(uint64_t))((*a3 & *v10) + 0x2B8))(v5);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.notice(_:function:file:line:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  dispatch_group_leave(a4);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, char a2, void *a3)
{
  Swift::String v7 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v3 = a3;
  if (a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = 0;
  }
  v7(a2 & 1);

  return swift_release();
}

Swift::Void __swiftcall HeadphoneDevice.setCaseSilentMode()()
{
  uint64_t v30 = "setCaseSilentMode()";
  uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v33 = 0;
  int v32 = partial apply for closure #1 in HeadphoneDevice.setCaseSilentMode();
  uint64_t v54 = 0;
  char v52 = 0;
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = v34 - 8;
  unint64_t v37 = (*(void *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v1);
  unint64_t v38 = (char *)v15 - v37;
  uint64_t v39 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = v39 - 8;
  unint64_t v42 = (*(void *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v39, v2);
  uint64_t v43 = (char *)v15 - v42;
  uint64_t v54 = v0;
  uint64_t v53 = (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x708))();
  BOOL v28 = v53 != 0;
  BOOL v27 = v28;
  outlined destroy of BTAirPodsControlServiceClient?((id *)&v53);
  if (v27)
  {
    uint64_t v3 = *v29;
    uint64_t v25 = (void *)MEMORY[0x263F8EED0];
    int v4 = (*(uint64_t (**)(void))((v3 & *MEMORY[0x263F8EED0]) + 0x6D8))();
    int v26 = v4 ^ 1;
    char v52 = (v4 ^ 1) & 1;
    id v51 = (id)(*(uint64_t (**)(void))((*v29 & *v25) + 0x708))();
    if (v51)
    {
      uint64_t v21 = &v51;
      id v22 = v51;
      id v5 = v51;
      outlined destroy of BTAirPodsControlServiceClient?(v21);
      id v24 = objc_msgSend(v22, sel_dispatchQueue);

      Swift::String v6 = v29;
      Swift::String v7 = v29;
      uint64_t v8 = swift_allocObject();
      char v9 = v26;
      id v10 = v32;
      *(void *)(v8 + 16) = v29;
      *(unsigned char *)(v8 + 24) = v9 & 1;
      id v49 = v10;
      uint64_t v50 = v8;
      uint64_t aBlock = MEMORY[0x263EF8330];
      int v45 = 1107296256;
      int v46 = 0;
      Swift::String v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      unsigned int v48 = &block_descriptor_273;
      int v23 = _Block_copy(&aBlock);
      default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)();
      default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)();
      MEMORY[0x2533861D0](0, v43, v38, v23);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
      _Block_release(v23);
      swift_release();
    }
    else
    {
      outlined destroy of BTAirPodsControlServiceClient?(&v51);
    }
  }
  else
  {
    v15[0] = type metadata accessor for Log();
    v15[2] = static Log.shared.getter();
    int v19 = 1;
    v15[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Invalid BTAirPodsControlServiceClient. Unable to set CaseSound ", 0x51uLL, 1)._object;
    v15[3] = 19;
    int v16 = 2;
    v15[4] = 109;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v18 = static Log.shared.getter();
    object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Reset case sound toggle.", 0x2AuLL, v19 & 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    Swift::String v11 = v29;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v12 = *v11;
    id v20 = (void *)MEMORY[0x263F8EED0];
    uint64_t v13 = (*(uint64_t (**)(void))((v12 & *MEMORY[0x263F8EED0]) + 0x728))(v19 & 1);
    int v14 = (*(uint64_t (**)(uint64_t))((*v29 & *v20) + 0x6D8))(v13);
    (*(void (**)(void))((*v29 & *v20) + 0x6E0))((v14 ^ 1) & 1);
  }
}

void closure #1 in HeadphoneDevice.setCaseSilentMode()(void *a1, char a2)
{
  int v19 = a1;
  char v18 = a2 & 1;
  id v17 = (id)(*(uint64_t (**)(void))((*a1 & *MEMORY[0x263F8EED0]) + 0x708))();
  if (v17)
  {
    id v7 = v17;
    id v2 = v17;
    outlined destroy of BTAirPodsControlServiceClient?(&v17);
    uint64_t v3 = a1;
    int v4 = a1;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    unint64_t v15 = partial apply for closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode();
    uint64_t v16 = v5;
    uint64_t aBlock = MEMORY[0x263EF8330];
    int v11 = 1107296256;
    int v12 = 0;
    uint64_t v13 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    int v14 = &block_descriptor_324;
    Swift::String v6 = _Block_copy(&aBlock);
    swift_release();

    objc_msgSend(v7, sel_setSilentMode_completionHandler_, a2 & 1, v6);
    _Block_release(v6);
  }
  else
  {
    outlined destroy of BTAirPodsControlServiceClient?(&v17);
  }
}

uint64_t closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode()(void *a1, void *a2)
{
  uint64_t v39 = a1;
  unint64_t v38 = a2;
  unint64_t v37 = a1;
  if (a1)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    uint64_t v35 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v36 = v12;
    Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Unable to set CaseSound. Error code: ", 0x37uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    id v14 = a1;
    uint64_t v34 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v33 = v15;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    id v20 = (void *)MEMORY[0x263F8EED0];
    (*(void (**)(uint64_t))((*a2 & *MEMORY[0x263F8EED0]) + 0x728))(1);
    static Log.shared.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Reset case sound toggle.", 0x2AuLL, 1);
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_release();
    int v18 = (*(uint64_t (**)(uint64_t))((*a2 & *v20) + 0x6D8))(v17);
    (*(void (**)(void))((*a2 & *v20) + 0x6E0))((v18 ^ 1) & 1);
  }
  else
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    uint64_t v30 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v31 = v2;
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: CaseSound set to ", 0x23uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    uint64_t v4 = swift_bridgeObjectRelease();
    int v26 = (void *)MEMORY[0x263F8EED0];
    v29[39] = (*(uint64_t (**)(uint64_t))((*a2 & *MEMORY[0x263F8EED0]) + 0x6D8))(v4) & 1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.notice(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v25 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    uint64_t v6 = swift_retain();
    if ((*(uint64_t (**)(uint64_t))((*a2 & *v26) + 0x6D8))(v6))
    {
      Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
      object = v9._object;
      uint64_t countAndFlagsBits = v9._countAndFlagsBits;
    }
    else
    {
      Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
      object = v10._object;
      uint64_t countAndFlagsBits = v10._countAndFlagsBits;
    }
    uint64_t v23 = countAndFlagsBits;
    id v24 = object;
    uint64_t v21 = (void (*)(unsigned char *))(*(uint64_t (**)(unsigned char *))(*(void *)v25 + 112))(v29);
    *(void *)(v11 + 8) = v23;
    *(void *)(v11 + 16) = v24;
    swift_bridgeObjectRelease();
    v21(v29);
    swift_release();
    uint64_t v22 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    swift_retain();
    (*(void (**)(uint64_t))(*(void *)v22 + 152))(16);
    swift_release();
  }
  return (*(uint64_t (**)(void))((*a2 & *MEMORY[0x263F8EED0]) + 0x740))(0);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  Swift::String v3 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v1 = swift_retain();
  v3(v1);
  return swift_release();
}

uint64_t default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Bool __swiftcall HeadphoneDevice.isiCloudSignedIn()()
{
  v8[1] = 0;
  id v7 = objc_msgSend(self, sel_defaultStore);
  if (v7)
  {
    id v6 = v7;
  }
  else
  {
    LOBYTE(v1) = 2;
    uint64_t v2 = 916;
    LODWORD(v3) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  id v5 = objc_msgSend(v6, sel_aa_primaryAppleAccount, v1, v2, v3);

  v8[0] = v5;
  outlined destroy of ACAccount?(v8);
  if (v5) {
    return 1;
  }
  type metadata accessor for Log();
  static Log.shared.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: iCloud Account is not signed in", 0x31uLL, 1);
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

Swift::Void __swiftcall HeadphoneDevice.setPressHoldDefaults()()
{
  if ((*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x630))())
  {
    (*(void (**)(void))((*v10 & *MEMORY[0x263F8EED0]) + 0x3A8))();
    type metadata accessor for CBPeerUIGestureMode();
    lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
    char v9 = == infix<A>(_:_:)();
    uint64_t v1 = v10;
    if (v9)
    {
      char v8 = 1;
    }
    else
    {
      (*(void (**)(void))((*v10 & *MEMORY[0x263F8EED0]) + 0x3A8))();
      char v8 = == infix<A>(_:_:)();
    }

    if (v8)
    {
      id v7 = (void *)MEMORY[0x263F8EED0];
      (*(void (**)(uint64_t))((*v10 & *MEMORY[0x263F8EED0]) + 0x3B0))(7);
      (*(void (**)(uint64_t))((*v10 & *v7) + 0x3E0))(6);
    }
  }
  else
  {
    (*(void (**)(void))((*v10 & *MEMORY[0x263F8EED0]) + 0x3A8))();
    type metadata accessor for CBPeerUIGestureMode();
    lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
    char v6 = == infix<A>(_:_:)();
    uint64_t v2 = v10;
    if (v6)
    {
      char v5 = 1;
    }
    else
    {
      (*(void (**)(void))((*v10 & *MEMORY[0x263F8EED0]) + 0x3A8))();
      char v5 = == infix<A>(_:_:)();
    }

    if (v5)
    {
      if ((*(uint64_t (**)(void))((*v10 & *MEMORY[0x263F8EED0]) + 0xB48))())
      {
        uint64_t v4 = (void *)MEMORY[0x263F8EED0];
        (*(void (**)(void))((*v10 & *MEMORY[0x263F8EED0]) + 0x3B0))();
        (*(void (**)(uint64_t))((*v10 & *v4) + 0x3E0))(1);
      }
      else
      {
        uint64_t v3 = (void *)MEMORY[0x263F8EED0];
        (*(void (**)(void))((*v10 & *MEMORY[0x263F8EED0]) + 0x3B0))();
        (*(void (**)(uint64_t))((*v10 & *v3) + 0x3E0))(5);
      }
    }
  }
}

Swift::Void __swiftcall HeadphoneDevice.isSpatialProfileRecordPresent()()
{
  v10[4] = 0;
  id v14 = partial apply for closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent();
  v10[2] = "isSpatialProfileRecordPresent()";
  v10[3] = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v36 = 0;
  id v35 = 0;
  dispatch_group_t v34 = 0;
  char v26 = 0;
  uint64_t v21 = type metadata accessor for DispatchTime();
  uint64_t v18 = *(void *)(v21 - 8);
  uint64_t v19 = v21 - 8;
  unint64_t v11 = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](0, v1);
  id v20 = (char *)v10 - v11;
  unint64_t v12 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, (char *)v10 - v11);
  id v24 = (char *)v10 - v12;
  uint64_t v36 = v0;
  type metadata accessor for BTCloudServicesClient();
  id v16 = BTCloudServicesClient.__allocating_init()();
  id v35 = v16;
  dispatch_group_t v4 = dispatch_group_create();
  dispatch_group_t v13 = v4;
  dispatch_group_t v34 = v4;
  dispatch_group_enter(v4);
  id v5 = v15;
  id v6 = v15;
  id v7 = v4;
  uint64_t v8 = swift_allocObject();
  char v9 = v14;
  *(void *)(v8 + 16) = v15;
  *(void *)(v8 + 24) = v4;
  uint64_t v32 = v9;
  uint64_t v33 = v8;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v28 = 1107296256;
  int v29 = 0;
  uint64_t v30 = thunk for @escaping @callee_guaranteed (@guaranteed BTCloudSoundProfileRecord?, @guaranteed Error?) -> ();
  uint64_t v31 = &block_descriptor_279;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_release();

  objc_msgSend(v16, sel_fetchSoundProfileRecordWithCompletion_, v17);
  _Block_release(v17);
  static DispatchTime.now()();
  MEMORY[0x253385D20](v20, 1.0);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v22 = v18 + 8;
  v23(v20, v21);
  int v25 = MEMORY[0x253386180](v24);
  v23(v24, v21);
  char v26 = v25 & 1;
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    type metadata accessor for Log();
    v10[1] = static Log.shared.getter();
    v10[0] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: fetchSoundProfileRecord timedout", 0x32uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

id BTCloudServicesClient.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc BTCloudServicesClient.init()();
}

void closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent()(uint64_t a1, void *a2, void *a3, NSObject *a4)
{
  if (a2)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: fetchSoundProfileRecord failed with Error code:", 0x41uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    id v5 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    BOOL v7 = a1 == 0;
    type metadata accessor for Log();
    static Log.shared.getter();
    if (v7)
    {
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: soundProfileRecord does not exist", 0x33uLL, 1);
      dispatch thunk of Log.error(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: soundProfileRecord does exist", 0x2FuLL, 1);
      dispatch thunk of Log.notice(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(uint64_t))((*a3 & *MEMORY[0x263F8EED0]) + 0x680))(1);
    }
  }
  dispatch_group_leave(a4);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed BTCloudSoundProfileRecord?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  BOOL v7 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v3 = a2;
  id v4 = a3;
  if (a3) {
    Swift::String v6 = a3;
  }
  else {
    Swift::String v6 = 0;
  }
  v7(a2);

  return swift_release();
}

Swift::Void __swiftcall HeadphoneDevice.removeSpatialProfileRecord()()
{
  uint64_t v12 = 0;
  id v14 = partial apply for closure #1 in HeadphoneDevice.removeSpatialProfileRecord();
  v9[3] = "removeSpatialProfileRecord()";
  v9[4] = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v36 = 0;
  id v35 = 0;
  dispatch_group_t v34 = 0;
  char v26 = 0;
  uint64_t v20 = type metadata accessor for DispatchTime();
  uint64_t v17 = *(void *)(v20 - 8);
  uint64_t v18 = v20 - 8;
  unint64_t v10 = (*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v20, v1);
  uint64_t v19 = (char *)v9 - v10;
  unint64_t v11 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v9 - v10, v3);
  uint64_t v23 = (char *)v9 - v11;
  uint64_t v36 = v0;
  id v4 = *(void (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x680);
  int v25 = 1;
  v4(0);
  type metadata accessor for BTCloudServicesClient();
  id v15 = BTCloudServicesClient.__allocating_init()();
  id v35 = v15;
  dispatch_group_t v5 = dispatch_group_create();
  dispatch_group_t v13 = v5;
  dispatch_group_t v34 = v5;
  dispatch_group_enter(v5);
  Swift::String v6 = v5;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v14;
  *(void *)(v7 + 16) = v5;
  uint64_t v32 = v8;
  uint64_t v33 = v7;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v28 = 1107296256;
  int v29 = 0;
  uint64_t v30 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  uint64_t v31 = &block_descriptor_285;
  id v16 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v15, sel_deleteSoundProfileRecordWithCompletion_, v16);
  _Block_release(v16);
  static DispatchTime.now()();
  MEMORY[0x253385D20](v19, 1.0);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v21 = v17 + 8;
  v22(v19, v20);
  int v24 = MEMORY[0x253386180](v23);
  v22(v23, v20);
  char v26 = v24 & 1;
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    type metadata accessor for Log();
    v9[2] = static Log.shared.getter();
    v9[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deleteSoundProfileRecord timedout", 0x33uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

void closure #1 in HeadphoneDevice.removeSpatialProfileRecord()(void *a1, NSObject *a2)
{
  BOOL v5 = a1 != 0;
  type metadata accessor for Log();
  static Log.shared.getter();
  if (v5)
  {
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deleteSoundProfileRecord failed with Error code:", 0x42uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v2);
    swift_bridgeObjectRelease();
    id v3 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
  }
  else
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Sound Profile Reset Completed", 0x2FuLL, 1);
    dispatch thunk of Log.notice(_:function:file:line:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  dispatch_group_leave(a2);
}

Swift::Void __swiftcall HeadphoneDevice.getCaseSilentMode()()
{
  uint64_t v57 = "getCaseSilentMode()";
  uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  uint64_t v65 = 0;
  uint64_t v59 = partial apply for closure #1 in HeadphoneDevice.getCaseSilentMode();
  uint64_t v88 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = v60 - 8;
  unint64_t v63 = (*(void *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v1);
  id v64 = (char *)v20 - v63;
  uint64_t v66 = type metadata accessor for DispatchQoS();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = v66 - 8;
  unint64_t v69 = (*(void *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v65, v2);
  uint64_t v70 = (char *)v20 - v69;
  uint64_t v88 = v0;
  type metadata accessor for BTAirPodsControlServiceClient();
  id v3 = BTAirPodsControlServiceClient.__allocating_init()();
  uint64_t v4 = *(void *)v71;
  uint64_t v72 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = (*(uint64_t (**)(id))((v4 & *MEMORY[0x263F8EED0]) + 0x710))(v3);
  uint64_t v87 = (*(uint64_t (**)(uint64_t))((*(void *)v71 & *v72) + 0x708))(v5);
  BOOL v56 = v87 != 0;
  BOOL v55 = v56;
  outlined destroy of BTAirPodsControlServiceClient?((id *)&v87);
  if (v55)
  {
    id v53 = (id)(*(uint64_t (**)(void))((*(void *)v71 & *MEMORY[0x263F8EED0]) + 0x210))();
    id v54 = objc_msgSend(v53, sel_serialNumber);
    if (v54)
    {
      id v52 = v54;
      id v47 = v54;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v6;

      uint64_t v50 = v48;
      uint64_t v51 = v49;
    }
    else
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
    }
    uint64_t v45 = v51;
    uint64_t v46 = v50;
    if (v51)
    {
      uint64_t v43 = v46;
      uint64_t v44 = v45;
      uint64_t v7 = v71;
      uint64_t v41 = v45;
      uint64_t v42 = v46;
      uint64_t v82 = v46;
      uint64_t v83 = v45;

      id v81 = (id)(*(uint64_t (**)(void))((*v7 & *MEMORY[0x263F8EED0]) + 0x708))();
      if (v81)
      {
        unint64_t v38 = &v81;
        id v40 = v81;
        id v8 = v81;
        outlined destroy of BTAirPodsControlServiceClient?(v38);
        swift_bridgeObjectRetain();
        id v39 = (id)MEMORY[0x253385EB0](v42, v41);
        swift_bridgeObjectRelease();
        objc_msgSend(v40, sel_setDeviceSN_, v39);
      }
      else
      {
        outlined destroy of BTAirPodsControlServiceClient?(&v81);
      }
      id v14 = v71;
      uint64_t v15 = swift_bridgeObjectRelease();
      id v80 = (id)(*(uint64_t (**)(uint64_t))((*v14 & *MEMORY[0x263F8EED0]) + 0x708))(v15);
      if (v80)
      {
        uint64_t v21 = &v80;
        id v22 = v80;
        id v16 = v80;
        outlined destroy of BTAirPodsControlServiceClient?(v21);
        id v24 = objc_msgSend(v22, sel_dispatchQueue);

        uint64_t v17 = v71;
        uint64_t v18 = swift_allocObject();
        uint64_t v19 = v59;
        *(void *)(v18 + 16) = v71;
        uint64_t v78 = v19;
        uint64_t v79 = v18;
        uint64_t aBlock = MEMORY[0x263EF8330];
        int v74 = 1107296256;
        int v75 = 0;
        uint64_t v76 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        uint64_t v77 = &block_descriptor_291;
        uint64_t v23 = _Block_copy(&aBlock);
        default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)();
        default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)();
        MEMORY[0x2533861D0](0, v70, v64, v23);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v60);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v70, v66);
        _Block_release(v23);
        swift_release();
      }
      else
      {
        outlined destroy of BTAirPodsControlServiceClient?(&v80);
      }
    }
    else
    {

      Builtin::Word v30 = 0;
      type metadata accessor for Log();
      uint64_t v37 = static Log.shared.getter();
      Builtin::Word v25 = 52;
      uint64_t v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      uint64_t v33 = &v85;
      uint64_t v85 = v9;
      uint64_t v86 = v10;
      int v31 = 1;
      Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneSettings: Invalid serial number for device ", v25, 1);
      object = v11._object;
      DefaultStringInterpolation.appendLiteral(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)&v71[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
      uint64_t v28 = *(void *)&v71[OBJC_IVAR___HPMHeadphoneDevice_btAddress + 8];
      swift_bridgeObjectRetain();
      int v29 = v84;
      v84[0] = v27;
      v84[1] = v28;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v30, v31 & 1);
      uint64_t v32 = v12._object;
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v35 = v85;
      uint64_t v34 = v86;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      uint64_t v36 = v13;
      dispatch thunk of Log.error(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    type metadata accessor for Log();
    v20[2] = static Log.shared.getter();
    v20[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneSettings: Failed to initialize BTAirPodsControlServiceClient", 0x45uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

id BTAirPodsControlServiceClient.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc BTAirPodsControlServiceClient.init()();
}

void closure #1 in HeadphoneDevice.getCaseSilentMode()(void *a1)
{
  v14[1] = a1;
  v14[0] = (id)(*(uint64_t (**)(void))((*a1 & *MEMORY[0x263F8EED0]) + 0x708))();
  if (v14[0])
  {
    id v5 = v14[0];
    id v1 = v14[0];
    outlined destroy of BTAirPodsControlServiceClient?(v14);
    uint64_t v2 = a1;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = a1;
    Swift::String v12 = partial apply for closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode();
    uint64_t v13 = v3;
    uint64_t aBlock = MEMORY[0x263EF8330];
    int v8 = 1107296256;
    int v9 = 0;
    uint64_t v10 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    Swift::String v11 = &block_descriptor_318;
    uint64_t v4 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v5, sel_getSilentModeWithCompletionHandler_, v4);
    _Block_release(v4);
  }
  else
  {
    outlined destroy of BTAirPodsControlServiceClient?(v14);
  }
}

uint64_t closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode()(int a1, void *a2, void *a3)
{
  if (a2)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: CaseSound Status: Fetch Completed: Error code:", 0x40uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    id v10 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    object = v11._object;
    uint64_t countAndFlagsBits = v11._countAndFlagsBits;
  }
  else
  {
    Swift::String v12 = (void *)MEMORY[0x263F8EED0];
    (*(void (**)(uint64_t))((*a3 & *MEMORY[0x263F8EED0]) + 0x6B0))(1);
    (*(void (**)(void))((*a3 & *v12) + 0x6E0))((a1 ^ 1) & 1);
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: CaseSound enabled: ", 0x25uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    uint64_t v4 = swift_bridgeObjectRelease();
    (*(uint64_t (**)(uint64_t))((*a3 & *v12) + 0x6D8))(v4);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    object = v7._object;
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
  }
  DefaultStringInterpolation.appendLiteral(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Void __swiftcall HeadphoneDevice.populateSerialNumbers()()
{
  uint64_t v18 = (void *)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x210))();
  id v19 = objc_msgSend(v18, sel_serialNumber);
  if (v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v1;

    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v16 = 0;
  }

  if (v16)
  {
    SerialNumberType.rawValue.getter();
    swift_bridgeObjectRetain();
    id v14 = (void (*)(void))(*(uint64_t (**)(void))((*v17 & *MEMORY[0x263F8EED0]) + 0x7D8))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : String]);
    Dictionary.subscript.setter();
    v14();
    swift_bridgeObjectRelease();
  }
  id v12 = (id)(*(uint64_t (**)(void))((*v17 & *MEMORY[0x263F8EED0]) + 0x210))();
  id v13 = objc_msgSend(v12, sel_serialNumberLeft);
  if (v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v2;

    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
  }

  if (v11)
  {
    SerialNumberType.rawValue.getter();
    swift_bridgeObjectRetain();
    Swift::String v9 = (void (*)(void))(*(uint64_t (**)(void))((*v17 & *MEMORY[0x263F8EED0]) + 0x7D8))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : String]);
    Dictionary.subscript.setter();
    v9();
    swift_bridgeObjectRelease();
  }
  id v7 = (id)(*(uint64_t (**)(void))((*v17 & *MEMORY[0x263F8EED0]) + 0x210))();
  id v8 = objc_msgSend(v7, sel_serialNumberRight);
  if (v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v3;

    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }

  if (v6)
  {
    SerialNumberType.rawValue.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = (void (*)(void))(*(uint64_t (**)(void))((*v17 & *MEMORY[0x263F8EED0]) + 0x7D8))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : String]);
    Dictionary.subscript.setter();
    v4();
    swift_bridgeObjectRelease();
  }
}

Swift::Bool __swiftcall HeadphoneDevice.validatePressHoldCombination()()
{
  BOOL v10 = ((*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x480))() & 1) != 0;
  Swift::Bool result = (*(uint64_t (**)(void))((*v11 & *MEMORY[0x263F8EED0]) + 0x420))();
  BOOL v9 = result;
  BOOL v8 = v10 + v9;
  if (__OFADD__(v10, v9))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  Swift::Bool result = (*(uint64_t (**)(void))((*v11 & *MEMORY[0x263F8EED0]) + 0x450))();
  BOOL v7 = result;
  BOOL v6 = v8 + v7;
  if (__OFADD__(v8, v7)) {
    goto LABEL_15;
  }
  Swift::Bool result = (*(uint64_t (**)(void))((*v11 & *MEMORY[0x263F8EED0]) + 0x4B0))();
  BOOL v5 = result;
  if (!__OFADD__(v6, v5)) {
    return v6 + v5 >= 2;
  }
LABEL_16:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall HeadphoneDevice.shouldShowFindMyNetworkAlert()()
{
  BOOL v7 = ((*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x288))() & 1) != 0;
  uint64_t v1 = v6;
  if (v7)
  {
    char v5 = 0;
  }
  else
  {
    id v3 = (id)(*(uint64_t (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x210))(v1);
    char v4 = checkIsFindMyNetworkSupported(cbDevice:)(v3);

    char v5 = v4;
  }

  return (v5 & 1) != 0;
}

uint64_t HeadphoneDevice.accessorySettingFeatureBitMask.getter()
{
  uint64_t v2 = (unsigned int *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_accessorySettingFeatureBitMask);
  swift_beginAccess();
  unsigned int v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.accessorySettingFeatureBitMask.setter(int a1)
{
  unsigned int v3 = (_DWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_accessorySettingFeatureBitMask);
  swift_beginAccess();
  _DWORD *v3 = a1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.accessorySettingFeatureBitMask : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0xB00))(v2);
}

void key path setter for HeadphoneDevice.accessorySettingFeatureBitMask : HeadphoneDevice(unsigned int *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned int v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0xB08))(v4);
}

uint64_t (*HeadphoneDevice.accessorySettingFeatureBitMask.modify())()
{
  return HeadphoneDevice.accessorySettingFeatureBitMask.modify;
}

uint64_t HeadphoneDevice.accessorySettingFeatureBitMask.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.deviceColor.getter()
{
  id v2 = (unsigned int *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_deviceColor);
  swift_beginAccess();
  unsigned int v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.deviceColor.setter(int a1)
{
  unsigned int v3 = (_DWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_deviceColor);
  swift_beginAccess();
  _DWORD *v3 = a1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.deviceColor : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0xB18))(v2);
}

void key path setter for HeadphoneDevice.deviceColor : HeadphoneDevice(unsigned int *a1, id *a2)
{
  unsigned int v4 = *a1;
  unsigned int v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0xB20))(v4);
}

uint64_t (*HeadphoneDevice.deviceColor.modify())()
{
  return HeadphoneDevice.deviceColor.modify;
}

uint64_t HeadphoneDevice.deviceColor.modify()
{
  return swift_endAccess();
}

Swift::Bool __swiftcall HeadphoneDevice.isServiceSupported(_:)(Swift::UInt32 a1)
{
  return 0;
}

BOOL HeadphoneDevice.forceShowBobble.getter()
{
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  unsigned int v4 = (__CFString *)MEMORY[0x253385EB0](countAndFlagsBits);
  CFPreferencesAppSynchronize(v4);

  swift_bridgeObjectRelease();
  uint64_t v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("forceShowBobble", 0xFuLL, 1)._countAndFlagsBits;
  BOOL v6 = (__CFString *)MEMORY[0x253385EB0](v1);
  uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  char v5 = (__CFString *)MEMORY[0x253385EB0](v2);
  Boolean AppBooleanValue = CFPreferencesGetAppBooleanValue(v6, v5, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return AppBooleanValue != 0;
}

BOOL HeadphoneDevice.forceShowAdaptiveAudio.getter()
{
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  unsigned int v4 = (__CFString *)MEMORY[0x253385EB0](countAndFlagsBits);
  CFPreferencesAppSynchronize(v4);

  swift_bridgeObjectRelease();
  uint64_t v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("forceShowAdaptiveAudio", 0x16uLL, 1)._countAndFlagsBits;
  BOOL v6 = (__CFString *)MEMORY[0x253385EB0](v1);
  uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  char v5 = (__CFString *)MEMORY[0x253385EB0](v2);
  Boolean AppBooleanValue = CFPreferencesGetAppBooleanValue(v6, v5, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return AppBooleanValue != 0;
}

Swift::Bool __swiftcall HeadphoneDevice.pressHoldSupportsSiriOnly()()
{
  char v5 = (*(uint64_t (**)(uint64_t))((*v0 & *MEMORY[0x263F8EED0]) + 0xA70))(2);
  uint64_t v1 = v4;
  if (v5) {
    int v3 = (*(uint64_t (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0xA70))(1) ^ 1;
  }
  else {
    LOBYTE(v3) = 0;
  }

  return v3 & 1;
}

id HeadphoneDevice.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t HeadphoneDevice.init()()
{
  if (!"HeadphoneManager.HeadphoneDevice")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"HeadphoneManager.HeadphoneDevice", 32, (unint64_t)"init()", 6, 2, (unint64_t)"HeadphoneManager/HeadphoneDevice.swift", 38, 2, v1, 0x3BuLL, 0xEuLL);
  __break(1u);
  return result;
}

id HeadphoneDevice.__deallocating_deinit()
{
  int v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HeadphoneDevice();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance HeadphoneDevice@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for HeadphoneDevice();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id @nonobjc UIImage.init(cgImage:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithCGImage_);

  return v4;
}

id @nonobjc SPOwnerInterface.init()()
{
  return objc_msgSend(v0, sel_init);
}

id @nonobjc CBDeviceSettings.init()()
{
  return objc_msgSend(v0, sel_init);
}

id @nonobjc BTCloudServicesClient.init()()
{
  return objc_msgSend(v0, sel_init);
}

id @nonobjc BTAirPodsControlServiceClient.init()()
{
  return objc_msgSend(v0, sel_init);
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance CBListeningModeConfigs@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = CBListeningModeConfigs.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerUIGestureMode@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBPeerUIGestureMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerUIGestureMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerUIGestureMode@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBPeerUIGestureMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerUIGestureMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerCallConfig@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBPeerCallConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerCallConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerCallConfig@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBPeerCallConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerCallConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerCrownRotationDirection@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBPeerCrownRotationDirection.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerCrownRotationDirection.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerCrownRotationDirection@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBPeerCrownRotationDirection.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerCrownRotationDirection.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBDevicePlacementMode@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBDevicePlacementMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBDevicePlacementMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBDevicePlacementMode@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBDevicePlacementMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBDevicePlacementMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBSmartRoutingMode@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBSmartRoutingMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBSmartRoutingMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBSmartRoutingMode@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBSmartRoutingMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBSmartRoutingMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerSelectiveSpeechListeningConfig@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBPeerSelectiveSpeechListeningConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerSelectiveSpeechListeningConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerSelectiveSpeechListeningConfig@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBPeerSelectiveSpeechListeningConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerSelectiveSpeechListeningConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerConversationDetectConfig@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBPeerConversationDetectConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerConversationDetectConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerConversationDetectConfig@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBPeerConversationDetectConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerConversationDetectConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerAdaptiveVolumeConfig@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBPeerAdaptiveVolumeConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerAdaptiveVolumeConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerAdaptiveVolumeConfig@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBPeerAdaptiveVolumeConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerAdaptiveVolumeConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance CBProductFlags@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = CBProductFlags.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance CBDeviceFlags@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CBDeviceFlags.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAFeatureCapability@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAFeatureCapability.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAFeatureCapability.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAFeatureCapability@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAFeatureCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAFeatureCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerUIGestureMode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CBListeningModeConfigs()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance CBListeningModeConfigs()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CBListeningModeConfigs()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBListeningModeConfigs()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBDoubleTapAction()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerAutoAncCapability@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBPeerAutoAncCapability.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerAutoAncCapability.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerAutoAncCapability@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBPeerAutoAncCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerAutoAncCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerCrownRotationDirection()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBDevicePlacementMode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerCallConfig()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerSelectiveSpeechListeningConfig()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerConversationDetectConfig()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerAdaptiveVolumeConfig()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBListeningMode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBSmartRoutingMode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBMicrophoneMode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBListeningModeConfigs@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CBListeningModeConfigs.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBListeningModeConfigs@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CBListeningModeConfigs.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBProductFlags@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CBProductFlags.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBProductFlags@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CBProductFlags.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CBProductFlags()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance CBProductFlags()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CBProductFlags()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CBProductFlags()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CBProductFlags()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CBProductFlags()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance CBProductFlags()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance CBProductFlags()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CBProductFlags()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance CBProductFlags()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CBProductFlags()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CBProductFlags()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CBProductFlags()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CBProductFlags()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance CBProductFlags()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance CBProductFlags()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CBProductFlags()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance CBProductFlags()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBDeviceFlags@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CBDeviceFlags.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBDeviceFlags@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CBDeviceFlags.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CBDeviceFlags()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance CBDeviceFlags()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CBDeviceFlags()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CBDeviceFlags()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CBDeviceFlags()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CBDeviceFlags()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance CBDeviceFlags()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance CBDeviceFlags()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CBDeviceFlags()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance CBDeviceFlags()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CBDeviceFlags()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CBDeviceFlags()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CBDeviceFlags()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CBDeviceFlags()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance CBDeviceFlags()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance CBDeviceFlags()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CBDeviceFlags()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance CBDeviceFlags()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBDoubleTapAction@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBDoubleTapAction.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBDoubleTapAction.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBDoubleTapAction@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBDoubleTapAction.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBDoubleTapAction.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBListeningMode@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CBListeningMode.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t CBListeningMode.init(rawValue:)(int a1)
{
  LODWORD(v2) = a1;
  BYTE4(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBListeningMode@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CBListeningMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBListeningMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBMicrophoneMode@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = CBMicrophoneMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBMicrophoneMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBMicrophoneMode@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CBMicrophoneMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBMicrophoneMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBProductFlags()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CBProductFlags()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBDeviceFlags()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CBDeviceFlags()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for CBListeningModeConfigs()
{
  uint64_t v4 = lazy cache variable for type metadata for CBListeningModeConfigs;
  if (!lazy cache variable for type metadata for CBListeningModeConfigs)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBListeningModeConfigs);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    type metadata accessor for CBListeningModeConfigs();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    type metadata accessor for CBListeningModeConfigs();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    type metadata accessor for CBListeningModeConfigs();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    type metadata accessor for CBListeningModeConfigs();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    type metadata accessor for CBListeningModeConfigs();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for CBProductInfo()
{
  uint64_t v2 = lazy cache variable for type metadata for CBProductInfo;
  if (!lazy cache variable for type metadata for CBProductInfo)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBProductInfo);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for UIImage()
{
  uint64_t v2 = lazy cache variable for type metadata for UIImage;
  if (!lazy cache variable for type metadata for UIImage)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection;
  if (!lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection)
  {
    type metadata accessor for CBPeerCrownRotationDirection();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection;
  if (!lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection)
  {
    type metadata accessor for CBPeerCrownRotationDirection();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for CBDevicePlacementMode()
{
  uint64_t v4 = lazy cache variable for type metadata for CBDevicePlacementMode;
  if (!lazy cache variable for type metadata for CBDevicePlacementMode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDevicePlacementMode);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode;
  if (!lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode)
  {
    type metadata accessor for CBDevicePlacementMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode;
  if (!lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode)
  {
    type metadata accessor for CBDevicePlacementMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode;
  if (!lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode)
  {
    type metadata accessor for CBSmartRoutingMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode;
  if (!lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode)
  {
    type metadata accessor for CBSmartRoutingMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode);
    return WitnessTable;
  }
  return v2;
}

uint64_t CBProductIDIsAirPods(unsigned int a1)
{
  if (a1 <= 0x2002)
  {
    uint64_t v2 = a1 - 8194;
    char v1 = 0;
  }
  else
  {
    uint64_t v2 = a1 - 8194;
    char v1 = 1;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        char v4 = 1;
        return v4 & 1;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 11:
      case 14:
      case 15:
      case 16:
      case 19:
      case 20:
      case 21:
      case 22:
      case 24:
      case 26:
      case 27:
      case 31:
      case 32:
      case 33:
        break;
      case 8:
        char v4 = 1;
        return v4 & 1;
      case 12:
        char v4 = 1;
        return v4 & 1;
      case 13:
        char v4 = 1;
        return v4 & 1;
      case 17:
        char v4 = 1;
        return v4 & 1;
      case 18:
        char v4 = 1;
        return v4 & 1;
      case 23:
        char v4 = 1;
        return v4 & 1;
      case 25:
        char v4 = 1;
        return v4 & 1;
      case 28:
        char v4 = 1;
        return v4 & 1;
      case 29:
        char v4 = 1;
        return v4 & 1;
      case 30:
        char v4 = 1;
        return v4 & 1;
      case 34:
        char v4 = 1;
        return v4 & 1;
      default:
        JUMPOUT(0);
    }
  }
  char v4 = 0;
  return v4 & 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of BTAirPodsControlServiceClient?(id *a1)
{
}

unint64_t type metadata accessor for SPOwnerInterface()
{
  uint64_t v2 = lazy cache variable for type metadata for SPOwnerInterface;
  if (!lazy cache variable for type metadata for SPOwnerInterface)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SPOwnerInterface);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode;
  if (!lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode)
  {
    type metadata accessor for CBPeerUIGestureMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode;
  if (!lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode)
  {
    type metadata accessor for CBPeerUIGestureMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for CBPeerSelectiveSpeechListeningConfig()
{
  uint64_t v4 = lazy cache variable for type metadata for CBPeerSelectiveSpeechListeningConfig;
  if (!lazy cache variable for type metadata for CBPeerSelectiveSpeechListeningConfig)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerSelectiveSpeechListeningConfig);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig;
  if (!lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig)
  {
    type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig;
  if (!lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig)
  {
    type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for CBPeerConversationDetectConfig()
{
  uint64_t v4 = lazy cache variable for type metadata for CBPeerConversationDetectConfig;
  if (!lazy cache variable for type metadata for CBPeerConversationDetectConfig)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerConversationDetectConfig);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig;
  if (!lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig)
  {
    type metadata accessor for CBPeerConversationDetectConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig;
  if (!lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig)
  {
    type metadata accessor for CBPeerConversationDetectConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for CBPeerAdaptiveVolumeConfig()
{
  uint64_t v4 = lazy cache variable for type metadata for CBPeerAdaptiveVolumeConfig;
  if (!lazy cache variable for type metadata for CBPeerAdaptiveVolumeConfig)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerAdaptiveVolumeConfig);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig;
  if (!lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig)
  {
    type metadata accessor for CBPeerAdaptiveVolumeConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig;
  if (!lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig)
  {
    type metadata accessor for CBPeerAdaptiveVolumeConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for CBProductFlags()
{
  uint64_t v4 = lazy cache variable for type metadata for CBProductFlags;
  if (!lazy cache variable for type metadata for CBProductFlags)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBProductFlags);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    type metadata accessor for CBProductFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    type metadata accessor for CBProductFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    type metadata accessor for CBProductFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    type metadata accessor for CBProductFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    type metadata accessor for CBProductFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig;
  if (!lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig)
  {
    type metadata accessor for CBPeerCallConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig;
  if (!lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig)
  {
    type metadata accessor for CBPeerCallConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultStringInterpolation()
{
}

unint64_t lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject)
  {
    type metadata accessor for HeadphoneDevice();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject)
  {
    type metadata accessor for HeadphoneDevice();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for CBDevice()
{
  uint64_t v2 = lazy cache variable for type metadata for CBDevice;
  if (!lazy cache variable for type metadata for CBDevice)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDevice);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBDevice and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CBDevice and conformance NSObject)
  {
    type metadata accessor for CBDevice();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDevice and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CBDevice and conformance NSObject)
  {
    type metadata accessor for CBDevice();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDevice and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t closure #1 in osLogInternal(_:log:type:)partial apply(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  v7[1] = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = a3 - 8;
  v7[0] = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (void (*)(void))MEMORY[0x270FA5388](a1, a2);
  BOOL v10 = (char *)v7 - v7[0];
  v4();
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v13 = v5;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  return v12;
}

uint64_t sub_250C89E74()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HMDeviceRecord]);
  unint64_t v1 = lazy protocol witness table accessor for type [String : HMDeviceRecord] and conformance [A : B]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t sub_250C89F98()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)()
{
  return implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(*(void **)(v0 + 16));
}

uint64_t sub_250C8A0C0()
{
  return swift_deallocObject();
}

unsigned char **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_250C8A0F4()
{
  return swift_deallocObject();
}

uint64_t sub_250C8A128()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_0()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250C8A174()
{
  return swift_deallocObject();
}

void *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250C8A1C0()
{
  return swift_deallocObject();
}

uint64_t sub_250C8A1F4()
{
  return swift_deallocObject();
}

uint64_t sub_250C8A228()
{
  return swift_deallocObject();
}

uint64_t sub_250C8A268()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability;
  if (!lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability)
  {
    type metadata accessor for AAFeatureCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability;
  if (!lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability)
  {
    type metadata accessor for AAFeatureCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for CBDeviceFlags()
{
  uint64_t v4 = lazy cache variable for type metadata for CBDeviceFlags;
  if (!lazy cache variable for type metadata for CBDeviceFlags)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDeviceFlags);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    type metadata accessor for CBDeviceFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    type metadata accessor for CBDeviceFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    type metadata accessor for CBDeviceFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    type metadata accessor for CBDeviceFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    type metadata accessor for CBDeviceFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for CBDeviceSettings()
{
  uint64_t v2 = lazy cache variable for type metadata for CBDeviceSettings;
  if (!lazy cache variable for type metadata for CBDeviceSettings)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDeviceSettings);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for CBPeerAutoAncCapability()
{
  uint64_t v4 = lazy cache variable for type metadata for CBPeerAutoAncCapability;
  if (!lazy cache variable for type metadata for CBPeerAutoAncCapability)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerAutoAncCapability);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability;
  if (!lazy protocol witness table cache variable for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability)
  {
    type metadata accessor for CBPeerAutoAncCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBDoubleTapAction and conformance CBDoubleTapAction()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction;
  if (!lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction)
  {
    type metadata accessor for CBDoubleTapAction();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction;
  if (!lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction)
  {
    type metadata accessor for CBDoubleTapAction();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View()
{
  uint64_t v2 = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SHA256 and conformance SHA256;
  if (!lazy protocol witness table cache variable for type SHA256 and conformance SHA256)
  {
    type metadata accessor for SHA256();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest;
  if (!lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest)
  {
    type metadata accessor for SHA256Digest();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [String]()
{
}

uint64_t sub_250C8AC98()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:)()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:)();
  return result;
}

uint64_t sub_250C8ACE4()
{
  return swift_deallocObject();
}

uint64_t sub_250C8AD18()
{
  return swift_deallocObject();
}

uint64_t sub_250C8AD4C()
{
  return swift_deallocObject();
}

uint64_t sub_250C8AD98()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CBListeningMode and conformance CBListeningMode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode;
  if (!lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode)
  {
    type metadata accessor for CBListeningMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode;
  if (!lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode)
  {
    type metadata accessor for CBListeningMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBMicrophoneMode and conformance CBMicrophoneMode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode;
  if (!lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode)
  {
    type metadata accessor for CBMicrophoneMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode;
  if (!lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode)
  {
    type metadata accessor for CBMicrophoneMode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphoneDeviceDelegate?()
{
}

uint64_t sub_250C8B2B4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.setFindMyStatus()(void *a1)
{
  closure #1 in HeadphoneDevice.setFindMyStatus()(a1, *(void **)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_250C8B324()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in HeadphoneDevice.setFindMyStatus()()
{
  return closure #2 in HeadphoneDevice.setFindMyStatus()(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_259(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_260()
{
  return swift_release();
}

uint64_t sub_250C8B3D0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(char a1, void *a2)
{
  closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(a1 & 1, a2, *(void **)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t block_copy_helper_265(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_266()
{
  return swift_release();
}

uint64_t sub_250C8B48C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.setCaseSilentMode()()
{
  closure #1 in HeadphoneDevice.setCaseSilentMode()(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24) & 1);
}

uint64_t block_copy_helper_271(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_272()
{
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ACAccount?(id *a1)
{
}

unint64_t type metadata accessor for BTCloudServicesClient()
{
  uint64_t v2 = lazy cache variable for type metadata for BTCloudServicesClient;
  if (!lazy cache variable for type metadata for BTCloudServicesClient)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for BTCloudServicesClient);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_250C8B5D4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent()(uint64_t a1, void *a2)
{
  closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent()(a1, a2, *(void **)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t block_copy_helper_277(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_278()
{
  return swift_release();
}

uint64_t sub_250C8B68C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.removeSpatialProfileRecord()(void *a1)
{
  closure #1 in HeadphoneDevice.removeSpatialProfileRecord()(a1, *(NSObject **)(v1 + 16));
}

uint64_t block_copy_helper_283(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_284()
{
  return swift_release();
}

unint64_t type metadata accessor for BTAirPodsControlServiceClient()
{
  uint64_t v2 = lazy cache variable for type metadata for BTAirPodsControlServiceClient;
  if (!lazy cache variable for type metadata for BTAirPodsControlServiceClient)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for BTAirPodsControlServiceClient);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_250C8B7A0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.getCaseSilentMode()()
{
  closure #1 in HeadphoneDevice.getCaseSilentMode()(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_289(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_290()
{
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AudioAccessoryDevice?(id *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of UIImage?(id *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak HeadphoneDeviceDelegate?()
{
}

unint64_t base witness table accessor for Equatable in SerialNumberType()
{
  return lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType();
}

unint64_t lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType;
  if (!lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType;
  if (!lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in HeadphoneDevice.HeadphoneFeatures()
{
  return lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures();
}

unint64_t base witness table accessor for Equatable in HeadphoneDevice.ListeningModeConfigs()
{
  return lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs();
}

unint64_t lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs);
    return WitnessTable;
  }
  return v2;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in HeadphoneDevice()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t dispatch thunk of HeadphoneDeviceConstructable.headphoneDevice(cbDevice:withDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for SerialNumberType()
{
  return &type metadata for SerialNumberType;
}

uint64_t ObjC metadata update function for HeadphoneDevice()
{
  return type metadata accessor for HeadphoneDevice();
}

uint64_t method lookup function for HeadphoneDevice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HeadphoneDevice.cbDevice.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x210))();
}

uint64_t dispatch thunk of HeadphoneDevice.cbDevice.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x218))();
}

uint64_t dispatch thunk of HeadphoneDevice.cbDevice.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x220))();
}

uint64_t dispatch thunk of HeadphoneDevice.productInfo.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x228))();
}

uint64_t dispatch thunk of HeadphoneDevice.productInfo.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x230))();
}

uint64_t dispatch thunk of HeadphoneDevice.productInfo.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x238))();
}

uint64_t dispatch thunk of HeadphoneDevice.aaDevice.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x240))();
}

uint64_t dispatch thunk of HeadphoneDevice.aaDevice.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x248))();
}

uint64_t dispatch thunk of HeadphoneDevice.aaDevice.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x250))();
}

uint64_t dispatch thunk of HeadphoneDevice.isUpdatingDeviceConfig.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x258))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isUpdatingDeviceConfig.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x260))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isUpdatingDeviceConfig.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x268))();
}

uint64_t dispatch thunk of HeadphoneDevice.isAirpods.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x270))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isAirpods.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x278))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isAirpods.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x280))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSupport.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x288))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSupport.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x290))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSupport.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x298))();
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingFindMyNetworkOnError.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2A0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingFindMyNetworkOnError.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x2A8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingFindMyNetworkOnError.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkEnable.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2B8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkEnable.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x2C0))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkEnable.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$findMyNetworkEnable.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$findMyNetworkEnable.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$findMyNetworkEnable.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSession.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSession.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSession.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkValueUpdated.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x300))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkValueUpdated.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x308))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkValueUpdated.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x310))();
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingFindMyNetworkValue.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x318))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingFindMyNetworkValue.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x320))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingFindMyNetworkValue.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x328))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingFindMyNetworkValue.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x330))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingFindMyNetworkValue.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x338))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingFindMyNetworkValue.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x340))();
}

uint64_t dispatch thunk of HeadphoneDevice.name.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x348))();
}

uint64_t dispatch thunk of HeadphoneDevice.name.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x350))();
}

uint64_t dispatch thunk of HeadphoneDevice.name.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x358))();
}

uint64_t dispatch thunk of HeadphoneDevice.$name.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x360))();
}

uint64_t dispatch thunk of HeadphoneDevice.$name.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x368))();
}

uint64_t dispatch thunk of HeadphoneDevice.$name.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x370))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningMode.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x378))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningMode.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x380))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningMode.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x388))();
}

uint64_t dispatch thunk of HeadphoneDevice.$listeningMode.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x390))();
}

uint64_t dispatch thunk of HeadphoneDevice.$listeningMode.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x398))();
}

uint64_t dispatch thunk of HeadphoneDevice.$listeningMode.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x400))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningModeConfigs.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x408))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningModeConfigs.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x410))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningModeConfigs.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x418))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldAuto.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x420))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldAuto.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x428))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldAuto.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x430))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldAuto.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x438))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldAuto.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x440))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldAuto.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x448))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldTransparency.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x450))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldTransparency.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x458))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldTransparency.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x460))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldTransparency.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x468))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldTransparency.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x470))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldTransparency.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x478))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldOff.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x480))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldOff.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x488))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldOff.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x490))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldOff.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x498))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldOff.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldOff.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldNoiseCancel.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4B0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldNoiseCancel.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x4B8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldNoiseCancel.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldNoiseCancel.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldNoiseCancel.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldNoiseCancel.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x500))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x508))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x510))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x518))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x520))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x528))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x530))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x538))();
}

uint64_t dispatch thunk of HeadphoneDevice.crownRotationDirection.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x540))();
}

uint64_t dispatch thunk of HeadphoneDevice.crownRotationDirection.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x548))();
}

uint64_t dispatch thunk of HeadphoneDevice.crownRotationDirection.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x550))();
}

uint64_t dispatch thunk of HeadphoneDevice.$crownRotationDirection.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x558))();
}

uint64_t dispatch thunk of HeadphoneDevice.$crownRotationDirection.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x560))();
}

uint64_t dispatch thunk of HeadphoneDevice.$crownRotationDirection.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x568))();
}

uint64_t dispatch thunk of HeadphoneDevice.inEarDetection.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x570))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.inEarDetection.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x578))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.inEarDetection.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x580))();
}

uint64_t dispatch thunk of HeadphoneDevice.$inEarDetection.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x588))();
}

uint64_t dispatch thunk of HeadphoneDevice.$inEarDetection.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x590))();
}

uint64_t dispatch thunk of HeadphoneDevice.$inEarDetection.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x598))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryCharging.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5A0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.batteryCharging.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x5A8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.batteryCharging.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryCharging.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryCharging.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryCharging.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.smartRoutingMode.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.smartRoutingMode.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.smartRoutingMode.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$smartRoutingMode.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$smartRoutingMode.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$smartRoutingMode.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.microphoneMode.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x600))();
}

uint64_t dispatch thunk of HeadphoneDevice.microphoneMode.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x608))();
}

uint64_t dispatch thunk of HeadphoneDevice.microphoneMode.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x610))();
}

uint64_t dispatch thunk of HeadphoneDevice.$microphoneMode.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x618))();
}

uint64_t dispatch thunk of HeadphoneDevice.$microphoneMode.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x620))();
}

uint64_t dispatch thunk of HeadphoneDevice.$microphoneMode.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x628))();
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlToggle.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x630))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlToggle.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x638))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlToggle.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x640))();
}

uint64_t dispatch thunk of HeadphoneDevice.$volumeControlToggle.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x648))();
}

uint64_t dispatch thunk of HeadphoneDevice.$volumeControlToggle.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x650))();
}

uint64_t dispatch thunk of HeadphoneDevice.$volumeControlToggle.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x658))();
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlView.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x660))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlView.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x668))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlView.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x670))();
}

uint64_t dispatch thunk of HeadphoneDevice.spatialProfileExists.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x678))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.spatialProfileExists.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x680))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.spatialProfileExists.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x688))();
}

uint64_t dispatch thunk of HeadphoneDevice.$spatialProfileExists.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x690))();
}

uint64_t dispatch thunk of HeadphoneDevice.$spatialProfileExists.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x698))();
}

uint64_t dispatch thunk of HeadphoneDevice.$spatialProfileExists.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.isCaseSoundSupported.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6A8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isCaseSoundSupported.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x6B0))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isCaseSoundSupported.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isCaseSoundSupported.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isCaseSoundSupported.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isCaseSoundSupported.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.caseSound.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6D8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.caseSound.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x6E0))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.caseSound.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$caseSound.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$caseSound.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x6F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$caseSound.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x700))();
}

uint64_t dispatch thunk of HeadphoneDevice.airPodsServiceClient.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x708))();
}

uint64_t dispatch thunk of HeadphoneDevice.airPodsServiceClient.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x710))();
}

uint64_t dispatch thunk of HeadphoneDevice.airPodsServiceClient.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x718))();
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingCaseSoundOnError.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x720))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingCaseSoundOnError.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x728))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingCaseSoundOnError.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x730))();
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingCaseSoundValue.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x738))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingCaseSoundValue.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x740))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingCaseSoundValue.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x748))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingCaseSoundValue.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x750))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingCaseSoundValue.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x758))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingCaseSoundValue.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x760))();
}

uint64_t dispatch thunk of HeadphoneDevice.endCallGesture.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x768))();
}

uint64_t dispatch thunk of HeadphoneDevice.endCallGesture.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x770))();
}

uint64_t dispatch thunk of HeadphoneDevice.endCallGesture.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x778))();
}

uint64_t dispatch thunk of HeadphoneDevice.$endCallGesture.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x780))();
}

uint64_t dispatch thunk of HeadphoneDevice.$endCallGesture.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x788))();
}

uint64_t dispatch thunk of HeadphoneDevice.$endCallGesture.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x790))();
}

uint64_t dispatch thunk of HeadphoneDevice.muteControlGesture.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x798))();
}

uint64_t dispatch thunk of HeadphoneDevice.muteControlGesture.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.muteControlGesture.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$muteControlGesture.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$muteControlGesture.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$muteControlGesture.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.serialNumbers.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.serialNumbers.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.serialNumbers.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.selectiveSpeechListening.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7E0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.selectiveSpeechListening.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x7E8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.selectiveSpeechListening.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$selectiveSpeechListening.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x7F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$selectiveSpeechListening.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x800))();
}

uint64_t dispatch thunk of HeadphoneDevice.$selectiveSpeechListening.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x808))();
}

uint64_t dispatch thunk of HeadphoneDevice.conversationDetect.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x810))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.conversationDetect.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x818))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.conversationDetect.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x820))();
}

uint64_t dispatch thunk of HeadphoneDevice.$conversationDetect.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x828))();
}

uint64_t dispatch thunk of HeadphoneDevice.$conversationDetect.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x830))();
}

uint64_t dispatch thunk of HeadphoneDevice.$conversationDetect.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x838))();
}

uint64_t dispatch thunk of HeadphoneDevice.adaptiveVolume.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x840))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.adaptiveVolume.setter(char a1)
{
  return (*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x848))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.adaptiveVolume.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x850))();
}

uint64_t dispatch thunk of HeadphoneDevice.$adaptiveVolume.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x858))();
}

uint64_t dispatch thunk of HeadphoneDevice.$adaptiveVolume.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x860))();
}

uint64_t dispatch thunk of HeadphoneDevice.$adaptiveVolume.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x868))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelMain.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x870))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelMain.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x878))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelMain.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x880))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelMain.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x888))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelMain.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x890))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelMain.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x898))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateMain.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateMain.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateMain.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateMain.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateMain.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateMain.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x8F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x900))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x908))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x910))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x918))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateLeft.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x920))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateLeft.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x928))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x930))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x938))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x940))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x948))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x950))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x958))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x960))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x968))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x970))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x978))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateRight.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x980))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateRight.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x988))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelCase.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x990))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelCase.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x998))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelCase.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelCase.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelCase.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelCase.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateCase.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateCase.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateCase.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateCase.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateCase.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateCase.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.hearingRecord.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.hearingRecord.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x9F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.hearingRecord.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA00))();
}

uint64_t dispatch thunk of HeadphoneDevice.$hearingRecord.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA08))();
}

uint64_t dispatch thunk of HeadphoneDevice.$hearingRecord.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA10))();
}

uint64_t dispatch thunk of HeadphoneDevice.$hearingRecord.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA18))();
}

uint64_t dispatch thunk of HeadphoneDevice.audioAccessoryDevice.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA20))();
}

uint64_t dispatch thunk of HeadphoneDevice.audioAccessoryDevice.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA28))();
}

uint64_t dispatch thunk of HeadphoneDevice.audioAccessoryDevice.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA30))();
}

uint64_t dispatch thunk of HeadphoneDevice.$audioAccessoryDevice.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA38))();
}

uint64_t dispatch thunk of HeadphoneDevice.$audioAccessoryDevice.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA40))();
}

uint64_t dispatch thunk of HeadphoneDevice.$audioAccessoryDevice.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA48))();
}

uint64_t dispatch thunk of HeadphoneDevice.supportsFeature(feature:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA70))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.updateFeatureValues(feature:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA78))();
}

uint64_t dispatch thunk of HeadphoneDevice.getFindMyUrl(hpDevice:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA80))();
}

uint64_t dispatch thunk of HeadphoneDevice.featureUpdateListener(_aaDevice:cbDevice:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA88))();
}

uint64_t dispatch thunk of HeadphoneDevice.featureUpdateListener(cbDevice:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA90))();
}

uint64_t dispatch thunk of HeadphoneDevice.getModelName()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xA98))();
}

uint64_t dispatch thunk of HeadphoneDevice.setFindMyStatus()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAA0))();
}

uint64_t dispatch thunk of HeadphoneDevice.resetToggle()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAA8))();
}

uint64_t dispatch thunk of HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAB0))();
}

uint64_t dispatch thunk of HeadphoneDevice.setCaseSilentMode()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAB8))();
}

uint64_t dispatch thunk of HeadphoneDevice.isiCloudSignedIn()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAC0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.setPressHoldDefaults()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAC8))();
}

uint64_t dispatch thunk of HeadphoneDevice.isSpatialProfileRecordPresent()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAD0))();
}

uint64_t dispatch thunk of HeadphoneDevice.removeSpatialProfileRecord()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAD8))();
}

uint64_t dispatch thunk of HeadphoneDevice.getCaseSilentMode()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAE0))();
}

uint64_t dispatch thunk of HeadphoneDevice.populateSerialNumbers()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAE8))();
}

uint64_t dispatch thunk of HeadphoneDevice.validatePressHoldCombination()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAF0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.shouldShowFindMyNetworkAlert()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xAF8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.accessorySettingFeatureBitMask.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB00))();
}

uint64_t dispatch thunk of HeadphoneDevice.accessorySettingFeatureBitMask.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB08))();
}

uint64_t dispatch thunk of HeadphoneDevice.accessorySettingFeatureBitMask.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB10))();
}

uint64_t dispatch thunk of HeadphoneDevice.deviceColor.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB18))();
}

uint64_t dispatch thunk of HeadphoneDevice.deviceColor.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB20))();
}

uint64_t dispatch thunk of HeadphoneDevice.deviceColor.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB28))();
}

uint64_t dispatch thunk of HeadphoneDevice.isServiceSupported(_:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB30))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.forceShowBobble.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB38))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.forceShowAdaptiveAudio.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB40))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldSupportsSiriOnly()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xB48))() & 1;
}

ValueMetadata *type metadata accessor for HeadphoneDevice.HeadphoneFeatures()
{
  return &type metadata for HeadphoneDevice.HeadphoneFeatures;
}

ValueMetadata *type metadata accessor for HeadphoneDevice.ListeningModeConfigs()
{
  return &type metadata for HeadphoneDevice.ListeningModeConfigs;
}

unint64_t base witness table accessor for Equatable in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for Equatable in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for Equatable in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t base witness table accessor for RawRepresentable in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for SetAlgebra in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for RawRepresentable in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for SetAlgebra in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for RawRepresentable in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t base witness table accessor for SetAlgebra in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
    return WitnessTable;
  }
  return v2;
}

void *outlined init with copy of BTAirPodsControlServiceClient?(id *a1, void *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t result = a2;
  *a2 = v4;
  return result;
}

void *outlined init with copy of AudioAccessoryDevice?(id *a1, void *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t result = a2;
  *a2 = v4;
  return result;
}

uint64_t _ss25_unimplementedInitializer9className04initD04file4line6columns5NeverOs12StaticStringV_A2JS2utFySRys5UInt8VGXEfU_yAMXEfU_TA_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a3, *(void *)(v3 + 64));
}

uint64_t _ss12StaticStringV14withUTF8BufferyxxSRys5UInt8VGXElFxAFXEfU_yt_Tgq5TA_0(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t _ss25_unimplementedInitializer9className04initD04file4line6columns5NeverOs12StaticStringV_A2JS2utFySRys5UInt8VGXEfU_yAMXEfU_yAMXEfU_TA_0(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_250C926D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode()(char a1, void *a2)
{
  return closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode()(a1 & 1, a2, *(void **)(v2 + 16));
}

uint64_t block_copy_helper_316(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_317()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  uint64_t v2 = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_250C92888()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode()(void *a1)
{
  return closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode()(a1, *(void **)(v1 + 16));
}

uint64_t block_copy_helper_322(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_323()
{
  return swift_release();
}

uint64_t _swift_stdlib_has_malloc_size_0()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_0(const void *a1)
{
  return malloc_size(a1);
}

void *outlined init with copy of String(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

void variable initialization expression of AADevice._deviceRemoteSendState(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AADevice._deviceRemoteSendState.getter@<X0>(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t result = swift_endAccess();
  *a1 = v4;
  return result;
}

uint64_t AADevice._deviceRemoteSendState.setter(char *a1)
{
  char v3 = *a1;
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v3;
  return swift_endAccess();
}

uint64_t (*AADevice._deviceRemoteSendState.modify())()
{
  return AADevice._deviceRemoteSendState.modify;
}

uint64_t AADevice._deviceRemoteSendState.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for AADevice.acceptReplyPlayPauseConfig : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 312))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.acceptReplyPlayPauseConfig : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 320))(v3);
  return swift_release();
}

uint64_t AADevice.acceptReplyPlayPauseConfig.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.acceptReplyPlayPauseConfig.setter(char a1)
{
  char v8 = a1;
  BOOL v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.acceptReplyPlayPauseConfig.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.acceptReplyPlayPauseConfig.modify;
}

uint64_t AADevice.acceptReplyPlayPauseConfig.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    BOOL v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._acceptReplyPlayPauseConfig@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAHeadGestureConfig();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig;
  if (!lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig)
  {
    type metadata accessor for AAHeadGestureConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig;
  if (!lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig)
  {
    type metadata accessor for AAHeadGestureConfig();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$acceptReplyPlayPauseConfig.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAHeadGestureConfig>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.autoANCStrength : AADevice@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 344))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.autoANCStrength : AADevice(unsigned int *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 352))(v3);
  return swift_release();
}

uint64_t AADevice.autoANCStrength.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.autoANCStrength.setter(int a1)
{
  int v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  int v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

void (*AADevice.autoANCStrength.modify(void *a1))(void **a1, char a2)
{
  unsigned int v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v2;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v3[1] = KeyPath;
  v3[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(v3 + 3));
  return AADevice.autoANCStrength.modify;
}

void AADevice.autoANCStrength.modify(void **a1, char a2)
{
  int v8 = *a1;
  if (a2)
  {
    uint64_t v2 = (void *)v8[2];
    unsigned int v3 = (void *)v8[1];
    unsigned int v4 = (void *)*v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
  }
  else
  {
    uint64_t v5 = (void *)v8[2];
    int v6 = (void *)v8[1];
    char v7 = (void *)*v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
  }
  swift_release();
  swift_release();
  swift_release();
  free(v8);
}

uint64_t variable initialization expression of AADevice._autoANCStrength@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  int v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAAutoANCStrength();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAAutoANCStrength and conformance AAAutoANCStrength();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type AAAutoANCStrength and conformance AAAutoANCStrength()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength;
  if (!lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength)
  {
    type metadata accessor for AAAutoANCStrength();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength;
  if (!lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength)
  {
    type metadata accessor for AAAutoANCStrength();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$autoANCStrength.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAAutoANCStrength>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.bobbleConfig : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 376))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.bobbleConfig : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 384))(v3);
  return swift_release();
}

uint64_t AADevice.bobbleConfig.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.bobbleConfig.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.bobbleConfig.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.bobbleConfig.modify;
}

uint64_t AADevice.bobbleConfig.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._bobbleConfig@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AABobbleConfiguration();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AABobbleConfiguration and conformance AABobbleConfiguration();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type AABobbleConfiguration and conformance AABobbleConfiguration()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration;
  if (!lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration)
  {
    type metadata accessor for AABobbleConfiguration();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration;
  if (!lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration)
  {
    type metadata accessor for AABobbleConfiguration();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$bobbleConfig.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AABobbleConfiguration>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.declineDismissSkipConfig : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 408))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.declineDismissSkipConfig : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 416))(v3);
  return swift_release();
}

uint64_t AADevice.declineDismissSkipConfig.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.declineDismissSkipConfig.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.declineDismissSkipConfig.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.declineDismissSkipConfig.modify;
}

uint64_t AADevice.declineDismissSkipConfig.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._declineDismissSkipConfig@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAHeadGestureConfig();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$declineDismissSkipConfig.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAHeadGestureConfig>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.headGestureToggle : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 440))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.headGestureToggle : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 448))(v3);
  return swift_release();
}

uint64_t AADevice.headGestureToggle.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.headGestureToggle.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.headGestureToggle.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.headGestureToggle.modify;
}

uint64_t AADevice.headGestureToggle.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._headGestureToggle@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState;
  if (!lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState)
  {
    type metadata accessor for AAMultiState();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState;
  if (!lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState)
  {
    type metadata accessor for AAMultiState();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$headGestureToggle.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.headGestureProxCardShown : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 472))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.headGestureProxCardShown : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 480))(v3);
  return swift_release();
}

uint64_t AADevice.headGestureProxCardShown.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.headGestureProxCardShown.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.headGestureProxCardShown.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.headGestureProxCardShown.modify;
}

uint64_t AADevice.headGestureProxCardShown.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._headGestureProxCardShown@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$headGestureProxCardShown.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hearingAidEnrolled : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 504))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hearingAidEnrolled : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 512))(v3);
  return swift_release();
}

uint64_t AADevice.hearingAidEnrolled.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.hearingAidEnrolled.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hearingAidEnrolled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.hearingAidEnrolled.modify;
}

uint64_t AADevice.hearingAidEnrolled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hearingAidEnrolled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$hearingAidEnrolled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hearingAidGainSwipeEnabled : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 536))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hearingAidGainSwipeEnabled : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 544))(v3);
  return swift_release();
}

uint64_t AADevice.hearingAidGainSwipeEnabled.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.hearingAidGainSwipeEnabled.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hearingAidGainSwipeEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.hearingAidGainSwipeEnabled.modify;
}

uint64_t AADevice.hearingAidGainSwipeEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hearingAidGainSwipeEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$hearingAidGainSwipeEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t variable initialization expression of AADevice.bluetoothAddressData()
{
  return 0;
}

uint64_t key path getter for AADevice.bluetoothAddressData : AADevice@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 568))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for AADevice.bluetoothAddressData : AADevice(uint64_t *a1)
{
  outlined init with copy of Data?(a1, (uint64_t)v4);
  uint64_t v2 = v4[0];
  unint64_t v3 = v4[1];
  swift_retain();
  AADevice.bluetoothAddressData.setter(v2, v3);
  return swift_release();
}

uint64_t AADevice.bluetoothAddressData.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 344);
  outlined copy of Data?(v2, *(void *)(v0 + 352));
  swift_endAccess();
  return v2;
}

uint64_t AADevice.bluetoothAddressData.setter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data?(a1, a2);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 344);
  unint64_t v4 = *(void *)(v2 + 352);
  *(void *)(v2 + 344) = a1;
  *(void *)(v2 + 352) = a2;
  outlined consume of Data?(v3, v4);
  swift_endAccess();
  return outlined consume of Data?(a1, a2);
}

uint64_t (*AADevice.bluetoothAddressData.modify())()
{
  return AADevice.bluetoothAddressData.modify;
}

uint64_t AADevice.bluetoothAddressData.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for AADevice.autoANCCapability : AADevice@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 592))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.autoANCCapability : AADevice(unsigned int *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 600))(v3);
  return swift_release();
}

uint64_t AADevice.autoANCCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.autoANCCapability.setter(int a1)
{
  int v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  int v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

void (*AADevice.autoANCCapability.modify(void *a1))(void **a1, char a2)
{
  unsigned int v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v2;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v3[1] = KeyPath;
  v3[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(v3 + 3));
  return AADevice.autoANCCapability.modify;
}

void AADevice.autoANCCapability.modify(void **a1, char a2)
{
  int v8 = *a1;
  if (a2)
  {
    uint64_t v2 = (void *)v8[2];
    unsigned int v3 = (void *)v8[1];
    unsigned int v4 = (void *)*v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
  }
  else
  {
    uint64_t v5 = (void *)v8[2];
    int v6 = (void *)v8[1];
    char v7 = (void *)*v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
  }
  swift_release();
  swift_release();
  swift_release();
  free(v8);
}

uint64_t variable initialization expression of AADevice._autoANCCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  int v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAAutoANCCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAAutoANCCapability and conformance AAAutoANCCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAAutoANCCapability and conformance AAAutoANCCapability()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability;
  if (!lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability)
  {
    type metadata accessor for AAAutoANCCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability;
  if (!lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability)
  {
    type metadata accessor for AAAutoANCCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$autoANCCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAAutoANCCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.bobbleCapability : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 624))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.bobbleCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 632))(v3);
  return swift_release();
}

uint64_t AADevice.bobbleCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.bobbleCapability.setter(char a1)
{
  char v8 = a1;
  int v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.bobbleCapability.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.bobbleCapability.modify;
}

uint64_t AADevice.bobbleCapability.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    int v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._bobbleCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$bobbleCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.caseSoundCapability : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 656))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.caseSoundCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 664))(v3);
  return swift_release();
}

uint64_t AADevice.caseSoundCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.caseSoundCapability.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.caseSoundCapability.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.caseSoundCapability.modify;
}

uint64_t AADevice.caseSoundCapability.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._caseSoundCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$caseSoundCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.earTipFitTestCapability : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 688))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.earTipFitTestCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 696))(v3);
  return swift_release();
}

uint64_t AADevice.earTipFitTestCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.earTipFitTestCapability.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.earTipFitTestCapability.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.earTipFitTestCapability.modify;
}

uint64_t AADevice.earTipFitTestCapability.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._earTipFitTestCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$earTipFitTestCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.frequencyBand : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 720))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.frequencyBand : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 728))(v3);
  return swift_release();
}

uint64_t AADevice.frequencyBand.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.frequencyBand.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.frequencyBand.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.frequencyBand.modify;
}

uint64_t AADevice.frequencyBand.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._frequencyBand@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAFrequencyBand();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFrequencyBand and conformance AAFrequencyBand();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAFrequencyBand and conformance AAFrequencyBand()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand;
  if (!lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand)
  {
    type metadata accessor for AAFrequencyBand();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand;
  if (!lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand)
  {
    type metadata accessor for AAFrequencyBand();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$frequencyBand.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFrequencyBand>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hearingAidCapability : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 752))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hearingAidCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 760))(v3);
  return swift_release();
}

uint64_t AADevice.hearingAidCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.hearingAidCapability.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hearingAidCapability.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.hearingAidCapability.modify;
}

uint64_t AADevice.hearingAidCapability.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hearingAidCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAHearingAidCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHearingAidCapability and conformance AAHearingAidCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAHearingAidCapability and conformance AAHearingAidCapability()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAHearingAidCapability and conformance AAHearingAidCapability;
  if (!lazy protocol witness table cache variable for type AAHearingAidCapability and conformance AAHearingAidCapability)
  {
    type metadata accessor for AAHearingAidCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHearingAidCapability and conformance AAHearingAidCapability);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAHearingAidCapability and conformance AAHearingAidCapability;
  if (!lazy protocol witness table cache variable for type AAHearingAidCapability and conformance AAHearingAidCapability)
  {
    type metadata accessor for AAHearingAidCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHearingAidCapability and conformance AAHearingAidCapability);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$hearingAidCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAHearingAidCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hearingAidConfig : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 784))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hearingAidConfig : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 792))(v3);
  return swift_release();
}

uint64_t AADevice.hearingAidConfig.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.hearingAidConfig.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hearingAidConfig.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.hearingAidConfig.modify;
}

uint64_t AADevice.hearingAidConfig.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hearingAidConfig@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAHearingAidConfiguration();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration;
  if (!lazy protocol witness table cache variable for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration)
  {
    type metadata accessor for AAHearingAidConfiguration();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration;
  if (!lazy protocol witness table cache variable for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration)
  {
    type metadata accessor for AAHearingAidConfiguration();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$hearingAidConfig.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAHearingAidConfiguration>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hearingTestCapability : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 816))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hearingTestCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 824))(v3);
  return swift_release();
}

uint64_t AADevice.hearingTestCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.hearingTestCapability.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hearingTestCapability.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.hearingTestCapability.modify;
}

uint64_t AADevice.hearingTestCapability.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hearingTestCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAHearingTestCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHearingTestCapability and conformance AAHearingTestCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAHearingTestCapability and conformance AAHearingTestCapability()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAHearingTestCapability and conformance AAHearingTestCapability;
  if (!lazy protocol witness table cache variable for type AAHearingTestCapability and conformance AAHearingTestCapability)
  {
    type metadata accessor for AAHearingTestCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHearingTestCapability and conformance AAHearingTestCapability);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAHearingTestCapability and conformance AAHearingTestCapability;
  if (!lazy protocol witness table cache variable for type AAHearingTestCapability and conformance AAHearingTestCapability)
  {
    type metadata accessor for AAHearingTestCapability();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAHearingTestCapability and conformance AAHearingTestCapability);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$hearingTestCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAHearingTestCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hideOffListeningModeCapability : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 848))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hideOffListeningModeCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 856))(v3);
  return swift_release();
}

uint64_t AADevice.hideOffListeningModeCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.hideOffListeningModeCapability.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hideOffListeningModeCapability.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.hideOffListeningModeCapability.modify;
}

uint64_t AADevice.hideOffListeningModeCapability.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hideOffListeningModeCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$hideOffListeningModeCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.audiogramEnrolledTimestamp : AADevice@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  BOOL v10 = a2;
  uint64_t v6 = a1;
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = (char *)&v5 - v7;
  uint64_t v8 = *(void *)MEMORY[0x270FA5388](v6, v2);
  uint64_t v3 = swift_retain();
  uint64_t v12 = v8;
  uint64_t v11 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 880))(v3);
  outlined init with take of Date?(v9, v10);
  return swift_release();
}

uint64_t key path setter for AADevice.audiogramEnrolledTimestamp : AADevice(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = a1;
  uint64_t v8 = a2;
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (const void *)MEMORY[0x270FA5388](v6, v2);
  uint64_t v9 = (char *)&v5 - v7;
  outlined init with copy of Date?(v3, (char *)&v5 - v7);
  uint64_t v10 = *v8;
  swift_retain();
  uint64_t v12 = v10;
  uint64_t v11 = v10;
  (*(void (**)(char *))(*(void *)v10 + 888))(v9);
  return swift_release();
}

uint64_t AADevice.audiogramEnrolledTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, a1);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AADevice.audiogramEnrolledTimestamp.setter(const void *a1)
{
  uint64_t v11 = a1;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  unint64_t v6 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v7, v1);
  uint64_t v10 = (char *)&v5 - v6;
  uint64_t v13 = v3;
  uint64_t v12 = v2;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v9 = (void *)swift_getKeyPath();
  outlined init with copy of Date?(v11, v10);
  static AADeviceProperty.subscript.setter((uint64_t)v10, v7, KeyPath, v9);
  return outlined destroy of Date?((uint64_t)v11);
}

void *outlined init with copy of Date?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void (*AADevice.audiogramEnrolledTimestamp.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  size_t __size = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                 - 8)
                     + 64);
  v4[1] = malloc(__size);
  uint64_t v7 = malloc(__size);
  void v4[2] = v7;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  void v4[3] = KeyPath;
  v4[4] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)v7);
  return AADevice.audiogramEnrolledTimestamp.modify;
}

void AADevice.audiogramEnrolledTimestamp.modify(uint64_t *a1, char a2)
{
  uint64_t v9 = *a1;
  if (a2)
  {
    uint64_t v2 = *(void **)(v9 + 32);
    uint64_t v3 = *(void **)(v9 + 24);
    uint64_t v5 = *(void **)(v9 + 16);
    uint64_t v6 = *(void **)(v9 + 8);
    uint64_t v4 = *(void **)v9;
    outlined init with copy of Date?(v5, v6);
    static AADeviceProperty.subscript.setter((uint64_t)v6, v4, v3, v2);
    outlined destroy of Date?((uint64_t)v5);
    swift_release();
    swift_release();
    swift_release();
    free(v5);
    free(v6);
  }
  else
  {
    uint64_t v7 = *(void **)(v9 + 16);
    uint64_t v8 = *(void **)(v9 + 8);
    static AADeviceProperty.subscript.setter((uint64_t)v7, *(void **)v9, *(void **)(v9 + 24), *(void **)(v9 + 32));
    swift_release();
    swift_release();
    swift_release();
    free(v7);
    free(v8);
  }
  free((void *)v9);
}

uint64_t variable initialization expression of AADevice._audiogramEnrolledTimestamp@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v4 = (*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10, v3[1]);
  uint64_t v7 = (uint64_t)v3 - v4;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = 0;
  uint64_t v1 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v7, 1);
  uint64_t v9 = type metadata accessor for AADevice();
  uint64_t v8 = &v13;
  char v13 = 1;
  unint64_t v11 = lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type Date? and conformance <A> A?();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, v7, v9, (uint64_t)v8, v9, v10, v6);
}

uint64_t AADevice.$audiogramEnrolledTimestamp.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, Date?>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.heartRateMonitorEnabled : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 912))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.heartRateMonitorEnabled : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 920))(v3);
  return swift_release();
}

uint64_t AADevice.heartRateMonitorEnabled.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.heartRateMonitorEnabled.setter(char a1)
{
  char v8 = a1;
  uint64_t v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.heartRateMonitorEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.heartRateMonitorEnabled.modify;
}

uint64_t AADevice.heartRateMonitorEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    uint64_t v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._heartRateMonitorEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for AADevice();
  uint64_t v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  char v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$heartRateMonitorEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hideEarDetectionCapability : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 944))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hideEarDetectionCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 952))(v3);
  return swift_release();
}

uint64_t AADevice.hideEarDetectionCapability.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.hideEarDetectionCapability.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hideEarDetectionCapability.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.hideEarDetectionCapability.modify;
}

uint64_t AADevice.hideEarDetectionCapability.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hideEarDetectionCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$hideEarDetectionCapability.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t variable initialization expression of AADevice.identifier()
{
  return 0;
}

uint64_t key path getter for AADevice.identifier : AADevice@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 976))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for AADevice.identifier : AADevice(void *a1, uint64_t *a2)
{
  outlined init with copy of String?(a1, v7);
  uint64_t v4 = v7[0];
  uint64_t v6 = v7[1];
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 984))(v4, v6);
  return swift_release();
}

uint64_t AADevice.identifier.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_identifier);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t AADevice.identifier.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_identifier);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*AADevice.identifier.modify())()
{
  return AADevice.identifier.modify;
}

uint64_t AADevice.identifier.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for AADevice.streamStateAoS : AADevice@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 1000))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.streamStateAoS : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 1008))(v3);
  return swift_release();
}

uint64_t AADevice.streamStateAoS.getter()
{
  uint64_t v5 = v0;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)&v4);
  unsigned int v3 = v4;
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

uint64_t AADevice.streamStateAoS.setter(char a1)
{
  char v8 = a1;
  char v7 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v2 = (void *)swift_getKeyPath();
  char v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.streamStateAoS.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  swift_retain();
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return AADevice.streamStateAoS.modify;
}

uint64_t AADevice.streamStateAoS.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 16);
    unsigned __int8 v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void **)a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    char v6 = *(void **)(a1 + 16);
    char v7 = *(void **)(a1 + 8);
    char v8 = *(void **)a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._streamStateAoS@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v7 = 0;
  uint64_t v3 = type metadata accessor for AADevice();
  char v6 = 1;
  uint64_t v4 = type metadata accessor for AAStreamStateAoS();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAStreamStateAoS and conformance AAStreamStateAoS();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAStreamStateAoS and conformance AAStreamStateAoS()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS;
  if (!lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS)
  {
    type metadata accessor for AAStreamStateAoS();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS;
  if (!lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS)
  {
    type metadata accessor for AAStreamStateAoS();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS);
    return WitnessTable;
  }
  return v2;
}

uint64_t AADevice.$streamStateAoS.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAStreamStateAoS>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t variable initialization expression of AADevice.underlyingDevice()
{
  return 0;
}

uint64_t key path getter for AADevice.underlyingDevice : AADevice@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 1032))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.underlyingDevice : AADevice(id *a1, uint64_t *a2)
{
  outlined init with copy of AudioAccessoryDevice?(a1, &v6);
  uint64_t v4 = v6;
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(void *)v5 + 1040))(v4);
  return swift_release();
}

id AADevice.underlyingDevice.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_underlyingDevice);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void AADevice.underlyingDevice.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_underlyingDevice);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*AADevice.underlyingDevice.modify())()
{
  return AADevice.underlyingDevice.modify;
}

uint64_t AADevice.underlyingDevice.modify()
{
  return swift_endAccess();
}

Swift::Void __swiftcall AADevice.updateWithDevice(_:)(AudioAccessoryDevice *a1)
{
  Swift::String v224 = a1;
  uint64_t v221 = 0;
  uint64_t v187 = implicit closure #1 in AADevice.updateWithDevice(_:);
  uint64_t v188 = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_1;
  id v189 = implicit closure #2 in AADevice.updateWithDevice(_:);
  char v190 = _sSiIegd_SiIegr_TRTA_0;
  uint64_t v191 = partial apply for implicit closure #3 in AADevice.updateWithDevice(_:);
  uint64_t v192 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  Swift::String v193 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
  uint64_t v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
  uint64_t v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v198 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  uint64_t v199 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v200 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unsigned __int8 v202 = implicit closure #4 in AADevice.updateWithDevice(_:);
  uint64_t v203 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  id v204 = implicit closure #5 in AADevice.updateWithDevice(_:);
  char v205 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  uint64_t v206 = partial apply for implicit closure #6 in AADevice.updateWithDevice(_:);
  uint64_t v207 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v209 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unsigned int v210 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  Swift::String v214 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v215 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v217 = MEMORY[0x263F8F500];
  unsigned __int8 v218 = &async function pointer to partial apply for closure #2 in AADevice.updateWithDevice(_:);
  id v219 = &async function pointer to partial apply for closure #1 in AADevice.updateWithDevice(_:);
  uint64_t v248 = 0;
  uint64_t v247 = 0;
  uint64_t v246 = 0;
  uint64_t v220 = 0;
  unint64_t v222 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v2);
  Swift::String v223 = (char *)&v93 - v222;
  uint64_t v225 = type metadata accessor for Logger();
  uint64_t v226 = *(void **)(v225 - 8);
  uint64_t v227 = v225 - 8;
  unint64_t v228 = (v226[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v224, v3);
  char v229 = (char *)&v93 - v228;
  unint64_t v230 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4, (char *)&v93 - v228);
  unsigned __int8 v231 = (char *)&v93 - v230;
  uint64_t v248 = v6;
  uint64_t v247 = v1;
  uint64_t v232 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 1032))();
  if (v232)
  {
    Swift::String v185 = v232;
    char v7 = v231;
    id v154 = v232;
    uint64_t v246 = v232;
    uint64_t v8 = Logger.shared.unsafeMutableAddressor();
    uint64_t v155 = (void (*)(char *, uint64_t, uint64_t))v226[2];
    char v156 = v226 + 2;
    v155(v7, v8, v225);
    uint64_t v9 = v224;
    uint64_t v168 = 7;
    uint64_t v169 = swift_allocObject();
    *(void *)(v169 + 16) = v224;
    uint64_t v183 = Logger.logObject.getter();
    int v184 = static os_log_type_t.default.getter();
    uint64_t v159 = &v244;
    uint64_t v167 = 32;
    uint64_t v244 = 32;
    unint64_t v157 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v158 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v160 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v161 = v245;
    uint64_t v165 = 17;
    uint64_t v171 = swift_allocObject();
    int v164 = 32;
    *(unsigned char *)(v171 + 16) = 32;
    uint64_t v172 = swift_allocObject();
    int v166 = 8;
    *(unsigned char *)(v172 + 16) = 8;
    uint64_t v10 = swift_allocObject();
    uint64_t v162 = v10;
    *(void *)(v10 + 16) = v187;
    *(void *)(v10 + 24) = 0;
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v162;
    uint64_t v173 = v11;
    *(void *)(v11 + 16) = v188;
    *(void *)(v11 + 24) = v12;
    uint64_t v174 = swift_allocObject();
    *(unsigned char *)(v174 + 16) = 0;
    uint64_t v175 = swift_allocObject();
    *(unsigned char *)(v175 + 16) = v166;
    uint64_t v13 = swift_allocObject();
    uint64_t v163 = v13;
    *(void *)(v13 + 16) = v189;
    *(void *)(v13 + 24) = 0;
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = v163;
    uint64_t v176 = v14;
    *(void *)(v14 + 16) = v190;
    *(void *)(v14 + 24) = v15;
    uint64_t v177 = swift_allocObject();
    *(unsigned char *)(v177 + 16) = v164;
    uint64_t v178 = swift_allocObject();
    *(unsigned char *)(v178 + 16) = v166;
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = v169;
    uint64_t v170 = v16;
    *(void *)(v16 + 16) = v191;
    *(void *)(v16 + 24) = v17;
    uint64_t v18 = swift_allocObject();
    uint64_t v19 = v170;
    uint64_t v180 = v18;
    *(void *)(v18 + 16) = v192;
    *(void *)(v18 + 24) = v19;
    uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v179 = _allocateUninitializedArray<A>(_:)();
    Swift::String v181 = v20;
    swift_retain();
    uint64_t v21 = v171;
    id v22 = v181;
    *Swift::String v181 = v193;
    v22[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
    swift_retain();
    uint64_t v23 = v172;
    id v24 = v181;
    v181[2] = v194;
    void v24[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
    swift_retain();
    Builtin::Word v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v173;
    char v26 = v181;
    v181[4] = v195;
    v26[5] = v25;
    swift_retain();
    uint64_t v27 = v174;
    uint64_t v28 = v181;
    v181[6] = v196;
    v28[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
    swift_retain();
    uint64_t v29 = v175;
    Builtin::Word v30 = v181;
    v181[8] = v197;
    v30[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
    swift_retain();
    int v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
    uint64_t v32 = v181;
    v181[10] = v198;
    v32[11] = v31;
    swift_retain();
    uint64_t v33 = v177;
    uint64_t v34 = v181;
    v181[12] = v199;
    v34[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33;
    swift_retain();
    uint64_t v35 = v178;
    uint64_t v36 = v181;
    v181[14] = v200;
    v36[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
    swift_retain();
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v180;
    unint64_t v38 = v181;
    v181[16] = v201;
    v38[17] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v183, (os_log_type_t)v184))
    {
      uint64_t v39 = v220;
      unint64_t v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v148 = createStorage<A>(capacity:type:)(0);
      uint64_t v149 = createStorage<A>(capacity:type:)(2);
      Swift::String v150 = &v237;
      uint64_t v237 = v147;
      uint64_t v151 = &v236;
      uint64_t v236 = v148;
      uint64_t v152 = &v235;
      uint64_t v235 = v149;
      serialize(_:at:)(2, &v237);
      serialize(_:at:)(3, v150);
      uint64_t v233 = v193;
      uint64_t v234 = v171;
      closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)v150, (uint64_t)v151, (uint64_t)v152);
      uint64_t v153 = v39;
      if (v39)
      {
        __break(1u);
      }
      else
      {
        uint64_t v233 = v194;
        uint64_t v234 = v172;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v144 = 0;
        uint64_t v41 = v144;
        uint64_t v233 = v195;
        uint64_t v234 = v173;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v143 = v41;
        uint64_t v233 = v196;
        uint64_t v234 = v174;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v142 = 0;
        uint64_t v233 = v197;
        uint64_t v234 = v175;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v141 = 0;
        uint64_t v233 = v198;
        uint64_t v234 = v176;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v140 = 0;
        uint64_t v233 = v199;
        uint64_t v234 = v177;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v139 = 0;
        uint64_t v233 = v200;
        uint64_t v234 = v178;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v138 = 0;
        uint64_t v233 = v201;
        uint64_t v234 = v180;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        uint64_t v137 = 0;
        _os_log_impl(&dword_250C36000, v183, (os_log_type_t)v184, "HeadphoneManager: %s: %ld::: value changed updateDevice: %s", v147, v161);
        destroyStorage<A>(_:count:)(v148, 0, v146);
        destroyStorage<A>(_:count:)(v149, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v147, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v145 = v137;
      }
    }
    else
    {
      uint64_t v40 = v220;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v145 = v40;
    }
    uint64_t v42 = v229;
    uint64_t v112 = v145;

    Swift::String v113 = (void (*)(char *, uint64_t))v226[1];
    uint64_t v114 = v226 + 1;
    v113(v231, v225);
    uint64_t v43 = Logger.shared.unsafeMutableAddressor();
    v155(v42, v43, v225);
    swift_retain();
    Swift::String v135 = Logger.logObject.getter();
    int v136 = static os_log_type_t.default.getter();
    uint64_t v121 = 32;
    v242[1] = (unsigned char *)32;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v115 = v243;
    uint64_t v119 = 17;
    uint64_t v122 = 7;
    uint64_t v124 = swift_allocObject();
    int v118 = 32;
    *(unsigned char *)(v124 + 16) = 32;
    uint64_t v125 = swift_allocObject();
    int v120 = 8;
    *(unsigned char *)(v125 + 16) = 8;
    uint64_t v44 = swift_allocObject();
    uint64_t v116 = v44;
    *(void *)(v44 + 16) = v202;
    *(void *)(v44 + 24) = 0;
    uint64_t v45 = swift_allocObject();
    uint64_t v46 = v116;
    uint64_t v126 = v45;
    *(void *)(v45 + 16) = v203;
    *(void *)(v45 + 24) = v46;
    uint64_t v127 = swift_allocObject();
    *(unsigned char *)(v127 + 16) = 0;
    uint64_t v128 = swift_allocObject();
    *(unsigned char *)(v128 + 16) = v120;
    uint64_t v47 = swift_allocObject();
    uint64_t v117 = v47;
    *(void *)(v47 + 16) = v204;
    *(void *)(v47 + 24) = 0;
    uint64_t v48 = swift_allocObject();
    uint64_t v49 = v117;
    uint64_t v129 = v48;
    *(void *)(v48 + 16) = v205;
    *(void *)(v48 + 24) = v49;
    uint64_t v130 = swift_allocObject();
    *(unsigned char *)(v130 + 16) = v118;
    uint64_t v131 = swift_allocObject();
    *(unsigned char *)(v131 + 16) = v120;
    uint64_t v50 = swift_allocObject();
    uint64_t v51 = v186;
    uint64_t v123 = v50;
    *(void *)(v50 + 16) = v206;
    *(void *)(v50 + 24) = v51;
    uint64_t v52 = swift_allocObject();
    uint64_t v53 = v123;
    uint64_t v133 = v52;
    *(void *)(v52 + 16) = v207;
    *(void *)(v52 + 24) = v53;
    uint64_t v132 = _allocateUninitializedArray<A>(_:)();
    uint64_t v134 = v54;
    swift_retain();
    uint64_t v55 = v124;
    BOOL v56 = v134;
    *uint64_t v134 = v208;
    v56[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v55;
    swift_retain();
    uint64_t v57 = v125;
    uint64_t v58 = v134;
    v134[2] = v209;
    v58[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v57;
    swift_retain();
    uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v126;
    uint64_t v60 = v134;
    v134[4] = v210;
    v60[5] = v59;
    swift_retain();
    uint64_t v61 = v127;
    uint64_t v62 = v134;
    v134[6] = v211;
    v62[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v61;
    swift_retain();
    uint64_t v63 = v128;
    id v64 = v134;
    v134[8] = v212;
    v64[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v63;
    swift_retain();
    uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v129;
    uint64_t v66 = v134;
    v134[10] = v213;
    v66[11] = v65;
    swift_retain();
    uint64_t v67 = v130;
    uint64_t v68 = v134;
    v134[12] = v214;
    v68[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v67;
    swift_retain();
    uint64_t v69 = v131;
    uint64_t v70 = v134;
    v134[14] = v215;
    v70[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v69;
    swift_retain();
    uint64_t v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v133;
    uint64_t v72 = v134;
    v134[16] = v216;
    v72[17] = v71;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v135, (os_log_type_t)v136))
    {
      uint64_t v73 = v112;
      unsigned __int8 v105 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v106 = createStorage<A>(capacity:type:)(0);
      uint64_t v107 = createStorage<A>(capacity:type:)(2);
      Swift::String v108 = v242;
      v242[0] = v105;
      uint64_t v109 = &v241;
      uint64_t v241 = v106;
      uint64_t v110 = &v240;
      uint64_t v240 = v107;
      serialize(_:at:)(2, v242);
      serialize(_:at:)(3, v108);
      Swift::String v238 = v208;
      uint64_t v239 = v124;
      closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v108, (uint64_t)v109, (uint64_t)v110);
      uint64_t v111 = v73;
      if (v73)
      {
        __break(1u);
      }
      else
      {
        Swift::String v238 = v209;
        uint64_t v239 = v125;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        uint64_t v103 = 0;
        uint64_t v74 = v103;
        Swift::String v238 = v210;
        uint64_t v239 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        uint64_t v102 = v74;
        Swift::String v238 = v211;
        uint64_t v239 = v127;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        uint64_t v101 = 0;
        Swift::String v238 = v212;
        uint64_t v239 = v128;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        uint64_t v100 = 0;
        Swift::String v238 = v213;
        uint64_t v239 = v129;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        uint64_t v99 = 0;
        Swift::String v238 = v214;
        uint64_t v239 = v130;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        uint64_t v98 = 0;
        Swift::String v238 = v215;
        uint64_t v239 = v131;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        uint64_t v97 = 0;
        Swift::String v238 = v216;
        uint64_t v239 = v133;
        closure #1 in osLogInternal(_:log:type:)(&v238, (uint64_t)v242, (uint64_t)&v241, (uint64_t)&v240);
        _os_log_impl(&dword_250C36000, v135, (os_log_type_t)v136, "HeadphoneManager: %s: %ld::: value changed underlying: %s", v105, v115);
        destroyStorage<A>(_:count:)(v106, 0, v104);
        destroyStorage<A>(_:count:)(v107, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v105, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    v113(v229, v225);
    uint64_t v95 = 0;
    uint64_t v75 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(void *)(v75 - 8) + 56))(v223, 1);
    swift_retain();
    uint64_t v76 = v224;
    type metadata accessor for MainActor();
    uint64_t v96 = static MainActor.shared.getter();
    uint64_t v77 = swift_allocObject();
    uint64_t v78 = v217;
    uint64_t v79 = v186;
    id v80 = v224;
    uint64_t v81 = (uint64_t)v218;
    uint64_t v82 = (void *)v77;
    uint64_t v83 = (uint64_t)v223;
    v82[2] = v96;
    v82[3] = v78;
    v82[4] = v79;
    v82[5] = v80;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v83, v81, (uint64_t)v82, MEMORY[0x263F8EE60] + 8);
    swift_release();
  }
  else
  {
    uint64_t v93 = 0;
    uint64_t v84 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(void *)(v84 - 8) + 56))(v223, 1);
    swift_retain();
    uint64_t v85 = v224;
    type metadata accessor for MainActor();
    uint64_t v94 = static MainActor.shared.getter();
    uint64_t v86 = swift_allocObject();
    uint64_t v87 = v217;
    uint64_t v88 = v186;
    int v89 = v224;
    uint64_t v90 = (uint64_t)v219;
    uint64_t v91 = (void *)v86;
    uint64_t v92 = (uint64_t)v223;
    v91[2] = v94;
    v91[3] = v87;
    v91[4] = v88;
    v91[5] = v89;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v92, v90, (uint64_t)v91, MEMORY[0x263F8EE60] + 8);
    swift_release();
  }
}

uint64_t closure #1 in AADevice.updateWithDevice(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a5;
  v5[5] = a4;
  v5[2] = v5;
  _DWORD v5[3] = 0;
  v5[4] = 0;
  _DWORD v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in AADevice.updateWithDevice(_:), v8, v6);
}

uint64_t closure #1 in AADevice.updateWithDevice(_:)()
{
  uint64_t v5 = (void *)v0[6];
  uint64_t v1 = v0[5];
  v0[2] = v0;
  id v2 = v5;
  (*(void (**)(void *))(*(void *)v1 + 1040))(v5);
  AADevice.updatePropertiesFor(updatedDevice:)(v5);
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v0[2] + 8);
  return v3();
}

uint64_t sub_250C9C240()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AADevice.updateWithDevice(_:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #1 in AADevice.updateWithDevice(_:);
  return closure #1 in AADevice.updateWithDevice(_:)(a1, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in AADevice.updateWithDevice(_:)()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = type metadata accessor for TaskPriority();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  }
  uint64_t v6 = *(void *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v6)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = a4;
  _DWORD v5[3] = a2;
  v5[4] = a3;
  return swift_task_create();
}

uint64_t implicit closure #1 in AADevice.updateWithDevice(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithDevice(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in AADevice.updateWithDevice(_:)()
{
  return 96;
}

uint64_t implicit closure #3 in AADevice.updateWithDevice(_:)(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_debugDescription);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_250C9C7BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in AADevice.updateWithDevice(_:)()
{
  return implicit closure #3 in AADevice.updateWithDevice(_:)(*(void **)(v0 + 16));
}

uint64_t implicit closure #4 in AADevice.updateWithDevice(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithDevice(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #5 in AADevice.updateWithDevice(_:)()
{
  return 97;
}

uint64_t implicit closure #6 in AADevice.updateWithDevice(_:)(uint64_t a1)
{
  id v3 = (id)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  id v1 = v3;
  id v5 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioAccessoryDevice?);
  uint64_t v4 = Optional.debugDescription.getter();
  outlined destroy of AudioAccessoryDevice?(&v5);

  return v4;
}

uint64_t closure #2 in AADevice.updateWithDevice(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a5;
  v5[5] = a4;
  v5[2] = v5;
  _DWORD v5[3] = 0;
  v5[4] = 0;
  _DWORD v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in AADevice.updateWithDevice(_:), v8, v6);
}

uint64_t closure #2 in AADevice.updateWithDevice(_:)()
{
  id v5 = (void *)v0[6];
  uint64_t v1 = v0[5];
  v0[2] = v0;
  id v2 = v5;
  (*(void (**)(void *))(*(void *)v1 + 1040))(v5);
  AADevice.updatePropertiesFor(updatedDevice:)(v5);
  swift_release();
  id v3 = *(uint64_t (**)(void))(v0[2] + 8);
  return v3();
}

uint64_t AADevice.updatePropertiesFor(updatedDevice:)(void *a1)
{
  id v21 = a1;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v13 - 8;
  unint64_t v16 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v13, v2);
  uint64_t v17 = (char *)&v10 - v16;
  unint64_t v18 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v21, v3);
  uint64_t v19 = (char *)&v10 - v18;
  uint64_t v25 = v4;
  uint64_t v24 = v1;
  char v23 = 2;
  AADevice._deviceRemoteSendState.setter(&v23);
  (*(void (**)(id))(*(void *)v20 + 320))(objc_msgSend(v21, sel_acceptReplyPlayPauseConfig));
  (*(void (**)(id))(*(void *)v20 + 600))(objc_msgSend(v21, sel_autoANCCapability));
  (*(void (**)(id))(*(void *)v20 + 352))(objc_msgSend(v21, sel_autoANCStrength));
  (*(void (**)(id))(*(void *)v20 + 384))(objc_msgSend(v21, sel_bobbleConfig));
  (*(void (**)(id))(*(void *)v20 + 416))(objc_msgSend(v21, sel_declineDismissSkipConfig));
  (*(void (**)(id))(*(void *)v20 + 448))(objc_msgSend(v21, sel_headGestureToggle));
  (*(void (**)(id))(*(void *)v20 + 480))(objc_msgSend(v21, sel_headGestureProxCardShown));
  (*(void (**)(id))(*(void *)v20 + 512))(objc_msgSend(v21, sel_hearingAidEnrolled));
  (*(void (**)(id))(*(void *)v20 + 544))(objc_msgSend(v21, sel_hearingAidGainSwipeEnabled));
  (*(void (**)(id))(*(void *)v20 + 632))(objc_msgSend(v21, sel_bobbleCapability));
  (*(void (**)(id))(*(void *)v20 + 664))(objc_msgSend(v21, sel_caseSoundCapability));
  (*(void (**)(id))(*(void *)v20 + 696))(objc_msgSend(v21, sel_earTipFitTestCapability));
  (*(void (**)(id))(*(void *)v20 + 728))(objc_msgSend(v21, sel_frequencyBand));
  (*(void (**)(id))(*(void *)v20 + 760))(objc_msgSend(v21, sel_hearingAidCapability));
  (*(void (**)(id))(*(void *)v20 + 792))(objc_msgSend(v21, sel_hearingAidConfig));
  (*(void (**)(id))(*(void *)v20 + 824))(objc_msgSend(v21, sel_hearingTestCapability));
  (*(void (**)(id))(*(void *)v20 + 856))(objc_msgSend(v21, sel_hideOffListeningModeCapability));
  id v22 = objc_msgSend(v21, sel_audiogramEnrolledTimestamp);
  if (v22)
  {
    id v12 = v22;
    id v11 = v22;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v17, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v19, 1, 1, v13);
  }
  (*(void (**)(char *))(*(void *)v20 + 888))(v19);
  (*(void (**)(id))(*(void *)v20 + 920))(objc_msgSend(v21, sel_heartRateMonitorEnabled));
  (*(void (**)(id))(*(void *)v20 + 952))(objc_msgSend(v21, sel_hideEarDetectionCapability));
  uint64_t v5 = v20;
  id v10 = objc_msgSend(v21, sel_identifier);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t))(*(void *)v5 + 984))(v6);
  uint64_t v7 = v20;

  (*(void (**)(id))(*(void *)v7 + 1008))(objc_msgSend(v21, sel_streamStateAoS));
  uint64_t v8 = AudioAccessoryDevice.btAddress.getter();
  (*(void (**)(uint64_t))(*(void *)v20 + 1080))(v8);
  return $defer #1 () in AADevice.updatePropertiesFor(updatedDevice:)(v20);
}

uint64_t $defer #1 () in AADevice.updatePropertiesFor(updatedDevice:)(uint64_t a1)
{
  uint64_t v3 = a1;
  char v2 = 0;
  return AADevice._deviceRemoteSendState.setter(&v2);
}

uint64_t variable initialization expression of AADevice.btAddress()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t key path getter for AADevice.btAddress : AADevice@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 1072))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for AADevice.btAddress : AADevice(void *a1, uint64_t *a2)
{
  outlined init with copy of String(a1, v7);
  uint64_t v4 = v7[0];
  uint64_t v6 = v7[1];
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 1080))(v4, v6);
  return swift_release();
}

uint64_t AADevice.btAddress.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_btAddress);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t AADevice.btAddress.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_btAddress);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*AADevice.btAddress.modify())()
{
  return AADevice.btAddress.modify;
}

uint64_t AADevice.btAddress.modify()
{
  return swift_endAccess();
}

uint64_t AADevice.deinit()
{
  outlined destroy of AADeviceProperty<AADevice, AAHeadGestureConfig>();
  outlined destroy of AADeviceProperty<AADevice, AAAutoANCStrength>();
  outlined destroy of AADeviceProperty<AADevice, AABobbleConfiguration>();
  outlined destroy of AADeviceProperty<AADevice, AAHeadGestureConfig>();
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of Data?(v0 + 344);
  outlined destroy of AADeviceProperty<AADevice, AAAutoANCCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFrequencyBand>();
  outlined destroy of AADeviceProperty<AADevice, AAHearingAidCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAHearingAidConfiguration>();
  outlined destroy of AADeviceProperty<AADevice, AAHearingTestCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of AADeviceProperty<AADevice, Date?>(v0 + OBJC_IVAR____TtC16HeadphoneManager8AADevice__audiogramEnrolledTimestamp);
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of String?();
  outlined destroy of AADeviceProperty<AADevice, AAStreamStateAoS>();
  outlined destroy of AudioAccessoryDevice?((id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_underlyingDevice));
  outlined destroy of String();
  return v2;
}

uint64_t AADevice.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AADevice.__allocating_init()()
{
  return AADevice.init()();
}

uint64_t AADevice.init()()
{
  uint64_t v133 = 0;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v11 = (*(void *)(*(void *)(v60 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v60, v70);
  uint64_t v58 = (uint64_t)&v10 - v11;
  uint64_t v133 = v0;
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = &v132;
  char v132 = 0;
  uint64_t v79 = 0;
  uint64_t v75 = type metadata accessor for AADevice();
  uint64_t v24 = type metadata accessor for AAHeadGestureConfig();
  unint64_t v77 = lazy protocol witness table accessor for type AADevice and conformance AADevice();
  unint64_t v25 = lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v131);
  char v130 = v131;
  AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)v13, v75, (uint64_t)&v130, v75, v24, v0 + 24);
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = &v129;
  int v129 = 0;
  uint64_t v16 = type metadata accessor for AAAutoANCStrength();
  unint64_t v17 = lazy protocol witness table accessor for type AAAutoANCStrength and conformance AAAutoANCStrength();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v128);
  char v127 = v128;
  AADeviceProperty.init(_:_:_:_:)(v14, (uint64_t)v15, v75, (uint64_t)&v127, v75, v16, v0 + 64);
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = &v126;
  char v126 = 0;
  uint64_t v20 = type metadata accessor for AABobbleConfiguration();
  unint64_t v21 = lazy protocol witness table accessor for type AABobbleConfiguration and conformance AABobbleConfiguration();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v125);
  char v124 = v125;
  AADeviceProperty.init(_:_:_:_:)(v18, (uint64_t)v19, v75, (uint64_t)&v124, v75, v20, v0 + 104);
  uint64_t v22 = swift_getKeyPath();
  char v23 = &v123;
  char v123 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v122);
  char v121 = v122;
  AADeviceProperty.init(_:_:_:_:)(v22, (uint64_t)v23, v75, (uint64_t)&v121, v75, v24, v0 + 144);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = &v120;
  char v120 = 0;
  uint64_t v65 = type metadata accessor for AAMultiState();
  unint64_t v66 = lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v119);
  char v118 = v119;
  AADeviceProperty.init(_:_:_:_:)(v26, (uint64_t)v27, v75, (uint64_t)&v118, v75, v65, v0 + 184);
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = &v117;
  char v117 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v116);
  char v115 = v116;
  AADeviceProperty.init(_:_:_:_:)(v28, (uint64_t)v29, v75, (uint64_t)&v115, v75, v65, v0 + 224);
  uint64_t v30 = swift_getKeyPath();
  int v31 = &v114;
  char v114 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v113);
  char v112 = v113;
  AADeviceProperty.init(_:_:_:_:)(v30, (uint64_t)v31, v75, (uint64_t)&v112, v75, v65, v0 + 264);
  uint64_t v32 = swift_getKeyPath();
  uint64_t v33 = &v111;
  char v111 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v110);
  char v109 = v110;
  AADeviceProperty.init(_:_:_:_:)(v32, (uint64_t)v33, v75, (uint64_t)&v109, v75, v65, v0 + 304);
  *(void *)(v0 + 344) = 0;
  *(void *)(v0 + 352) = 0xF000000000000000;
  uint64_t v37 = swift_getKeyPath();
  uint64_t v34 = &v108;
  int v108 = 0;
  uint64_t v35 = &v107;
  int v71 = 1;
  char v107 = 1;
  uint64_t v36 = type metadata accessor for AAAutoANCCapability();
  lazy protocol witness table accessor for type AAAutoANCCapability and conformance AAAutoANCCapability();
  AADeviceProperty.init(_:_:_:_:)(v37, (uint64_t)v34, v75, (uint64_t)v35, v75, v36, v0 + 360);
  uint64_t v40 = swift_getKeyPath();
  unint64_t v38 = &v106;
  char v106 = 0;
  uint64_t v39 = &v105;
  char v105 = v71;
  uint64_t v68 = type metadata accessor for AAFeatureCapability();
  unint64_t v69 = lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  AADeviceProperty.init(_:_:_:_:)(v40, (uint64_t)v38, v75, (uint64_t)v39, v75, v68, v0 + 400);
  uint64_t v1 = swift_getKeyPath();
  char v104 = 0;
  char v103 = v71;
  AADeviceProperty.init(_:_:_:_:)(v1, (uint64_t)&v104, v75, (uint64_t)&v103, v75, v68, v0 + 440);
  uint64_t v2 = swift_getKeyPath();
  char v102 = 0;
  char v101 = v71;
  AADeviceProperty.init(_:_:_:_:)(v2, (uint64_t)&v102, v75, (uint64_t)&v101, v75, v68, v0 + 480);
  uint64_t v44 = swift_getKeyPath();
  uint64_t v41 = &v100;
  char v100 = 0;
  uint64_t v42 = &v99;
  char v99 = v71;
  uint64_t v43 = type metadata accessor for AAFrequencyBand();
  lazy protocol witness table accessor for type AAFrequencyBand and conformance AAFrequencyBand();
  AADeviceProperty.init(_:_:_:_:)(v44, (uint64_t)v41, v75, (uint64_t)v42, v75, v43, v0 + 520);
  uint64_t v48 = swift_getKeyPath();
  uint64_t v45 = &v98;
  char v98 = 0;
  uint64_t v46 = &v97;
  char v97 = v71;
  uint64_t v47 = type metadata accessor for AAHearingAidCapability();
  lazy protocol witness table accessor for type AAHearingAidCapability and conformance AAHearingAidCapability();
  AADeviceProperty.init(_:_:_:_:)(v48, (uint64_t)v45, v75, (uint64_t)v46, v75, v47, v0 + 560);
  uint64_t v52 = swift_getKeyPath();
  uint64_t v49 = &v96;
  char v96 = 0;
  uint64_t v50 = &v95;
  char v95 = v71;
  uint64_t v51 = type metadata accessor for AAHearingAidConfiguration();
  lazy protocol witness table accessor for type AAHearingAidConfiguration and conformance AAHearingAidConfiguration();
  AADeviceProperty.init(_:_:_:_:)(v52, (uint64_t)v49, v75, (uint64_t)v50, v75, v51, v0 + 600);
  uint64_t v56 = swift_getKeyPath();
  uint64_t v53 = &v94;
  char v94 = 0;
  id v54 = &v93;
  char v93 = v71;
  uint64_t v55 = type metadata accessor for AAHearingTestCapability();
  lazy protocol witness table accessor for type AAHearingTestCapability and conformance AAHearingTestCapability();
  AADeviceProperty.init(_:_:_:_:)(v56, (uint64_t)v53, v75, (uint64_t)v54, v75, v55, v0 + 640);
  uint64_t v3 = swift_getKeyPath();
  char v92 = 0;
  char v91 = v71;
  AADeviceProperty.init(_:_:_:_:)(v3, (uint64_t)&v92, v75, (uint64_t)&v91, v75, v68, v0 + 680);
  uint64_t v57 = OBJC_IVAR____TtC16HeadphoneManager8AADevice__audiogramEnrolledTimestamp;
  uint64_t v61 = swift_getKeyPath();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(type metadata accessor for Date() - 8) + 56);
  int v80 = 1;
  v4(v58, 1);
  uint64_t v59 = &v90;
  char v90 = v71;
  lazy protocol witness table accessor for type Date? and conformance <A> A?();
  AADeviceProperty.init(_:_:_:_:)(v61, v58, v75, (uint64_t)v59, v75, v60, v0 + v57);
  uint64_t v62 = OBJC_IVAR____TtC16HeadphoneManager8AADevice__heartRateMonitorEnabled;
  uint64_t v63 = swift_getKeyPath();
  id v64 = &v89;
  char v89 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v88);
  char v87 = v88;
  AADeviceProperty.init(_:_:_:_:)(v63, (uint64_t)v64, v75, (uint64_t)&v87, v75, v65, v0 + v62);
  uint64_t v67 = OBJC_IVAR____TtC16HeadphoneManager8AADevice__hideEarDetectionCapability;
  uint64_t v5 = swift_getKeyPath();
  char v86 = 0;
  char v85 = v71;
  AADeviceProperty.init(_:_:_:_:)(v5, (uint64_t)&v86, v75, (uint64_t)&v85, v75, v68, v0 + v67);
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_identifier);
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v72 = OBJC_IVAR____TtC16HeadphoneManager8AADevice__streamStateAoS;
  uint64_t v78 = swift_getKeyPath();
  uint64_t v73 = &v84;
  char v84 = 0;
  uint64_t v74 = &v83;
  char v83 = v71;
  uint64_t v76 = type metadata accessor for AAStreamStateAoS();
  lazy protocol witness table accessor for type AAStreamStateAoS and conformance AAStreamStateAoS();
  AADeviceProperty.init(_:_:_:_:)(v78, (uint64_t)v73, v75, (uint64_t)v74, v75, v76, v0 + v72);
  char v7 = v80;
  *(void *)(v0 + OBJC_IVAR____TtC16HeadphoneManager8AADevice_underlyingDevice) = v79;
  uint64_t v81 = OBJC_IVAR____TtC16HeadphoneManager8AADevice_btAddress;
  Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unknown", 7uLL, v7 & 1);
  uint64_t result = v82;
  *(Swift::String *)(v82 + v81) = v8;
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance AADevice@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AADevice();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t AADevice.deviceRemoteSendState.getter@<X0>(unsigned char *a1@<X8>)
{
  return AADevice._deviceRemoteSendState.getter(a1);
}

uint64_t protocol witness for AADeviceConfigurable.underlyingDevice.getter in conformance AADevice()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1032))();
}

uint64_t protocol witness for AADeviceConfigurable.btAddress.getter in conformance AADevice()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1072))();
}

uint64_t protocol witness for AADeviceConfigurable.deviceRemoteSendState.getter in conformance AADevice@<X0>(unsigned char *a1@<X8>)
{
  return AADevice.deviceRemoteSendState.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAHeadGestureConfig()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAAutoANCStrength()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AABobbleConfiguration()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAMultiState()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAAutoANCCapability()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAFeatureCapability()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAFrequencyBand()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAHearingAidCapability()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAHearingAidConfiguration()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAHearingTestCapability()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAStreamStateAoS()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAHeadGestureConfig@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAHeadGestureConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAHeadGestureConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAHeadGestureConfig@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAHeadGestureConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAHeadGestureConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAAutoANCStrength@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AAAutoANCStrength.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t AAAutoANCStrength.init(rawValue:)(int a1)
{
  LODWORD(v2) = a1;
  BYTE4(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAAutoANCStrength@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AAAutoANCStrength.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAAutoANCStrength.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AABobbleConfiguration@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AABobbleConfiguration.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AABobbleConfiguration.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AABobbleConfiguration@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AABobbleConfiguration.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AABobbleConfiguration.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAMultiState@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAMultiState.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAMultiState.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAMultiState@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAMultiState.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAMultiState.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAAutoANCCapability@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AAAutoANCCapability.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t AAAutoANCCapability.init(rawValue:)(int a1)
{
  LODWORD(v2) = a1;
  BYTE4(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAAutoANCCapability@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AAAutoANCCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAFrequencyBand@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAFrequencyBand.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAFrequencyBand.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAFrequencyBand@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAFrequencyBand.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAFrequencyBand.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAHearingAidCapability@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAHearingAidCapability.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAHearingAidCapability.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAHearingAidCapability@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAHearingAidCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAHearingAidCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAHearingAidConfiguration@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAHearingAidConfiguration.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAHearingAidConfiguration.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAHearingAidConfiguration@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAHearingAidConfiguration.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAHearingAidConfiguration.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAHearingTestCapability@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAHearingTestCapability.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAHearingTestCapability.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAHearingTestCapability@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAHearingTestCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAHearingTestCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAStreamStateAoS@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AAStreamStateAoS.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAStreamStateAoS.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAStreamStateAoS@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AAStreamStateAoS.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAStreamStateAoS.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR(uint64_t a1, int *a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t sub_250C9F278()
{
  return swift_deallocObject();
}

unsigned char **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_250C9F2AC()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F2E0()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_1()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250C9F32C()
{
  return swift_deallocObject();
}

void *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250C9F378()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F3AC()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F3E0()
{
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_0@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_250C9F42C()
{
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

uint64_t sub_250C9F4E0()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F514()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F548()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F594()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in AADevice.updateWithDevice(_:)()
{
  return implicit closure #6 in AADevice.updateWithDevice(_:)(v0);
}

uint64_t sub_250C9F5E8()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F61C()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F650()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F69C()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F6E8()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F71C()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F750()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F79C()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F850()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F884()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F8B8()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F904()
{
  return swift_deallocObject();
}

uint64_t sub_250C9F950()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AADevice.updateWithDevice(_:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #2 in AADevice.updateWithDevice(_:);
  return closure #2 in AADevice.updateWithDevice(_:)(a1, v6, v7, v8, v9);
}

uint64_t partial apply for closure #2 in AADevice.updateWithDevice(_:)()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAHeadGestureConfig>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAAutoANCStrength>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AABobbleConfiguration>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAMultiState>()
{
}

uint64_t outlined destroy of Data?(uint64_t a1)
{
  if ((*(void *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000) {
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  }
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAAutoANCCapability>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAFrequencyBand>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAHearingAidCapability>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAHearingAidConfiguration>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAHearingTestCapability>()
{
}

uint64_t outlined destroy of AADeviceProperty<AADevice, Date?>(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, Date?>);
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAStreamStateAoS>()
{
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in AADevice()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t ObjC metadata update function for AADevice()
{
  return type metadata accessor for AADevice();
}

uint64_t method lookup function for AADevice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AADevice.acceptReplyPlayPauseConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of AADevice.acceptReplyPlayPauseConfig.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of AADevice.acceptReplyPlayPauseConfig.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of AADevice.$acceptReplyPlayPauseConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of AADevice.autoANCStrength.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of AADevice.autoANCStrength.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of AADevice.autoANCStrength.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of AADevice.$autoANCStrength.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of AADevice.bobbleConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of AADevice.bobbleConfig.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of AADevice.bobbleConfig.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of AADevice.$bobbleConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of AADevice.declineDismissSkipConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of AADevice.declineDismissSkipConfig.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of AADevice.declineDismissSkipConfig.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of AADevice.$declineDismissSkipConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of AADevice.headGestureToggle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of AADevice.headGestureToggle.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of AADevice.headGestureToggle.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of AADevice.$headGestureToggle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of AADevice.headGestureProxCardShown.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of AADevice.headGestureProxCardShown.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of AADevice.headGestureProxCardShown.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of AADevice.$headGestureProxCardShown.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of AADevice.hearingAidEnrolled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of AADevice.hearingAidEnrolled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of AADevice.hearingAidEnrolled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of AADevice.$hearingAidEnrolled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of AADevice.hearingAidGainSwipeEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of AADevice.hearingAidGainSwipeEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of AADevice.hearingAidGainSwipeEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of AADevice.$hearingAidGainSwipeEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of AADevice.bluetoothAddressData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of AADevice.autoANCCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of AADevice.autoANCCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of AADevice.autoANCCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of AADevice.$autoANCCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of AADevice.bobbleCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of AADevice.bobbleCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of AADevice.bobbleCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of AADevice.$bobbleCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of AADevice.caseSoundCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of AADevice.caseSoundCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of AADevice.caseSoundCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of AADevice.$caseSoundCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of AADevice.earTipFitTestCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of AADevice.earTipFitTestCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of AADevice.earTipFitTestCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of AADevice.$earTipFitTestCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of AADevice.frequencyBand.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of AADevice.frequencyBand.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of AADevice.frequencyBand.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of AADevice.$frequencyBand.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of AADevice.hearingAidCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of AADevice.hearingAidCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of AADevice.hearingAidCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of AADevice.$hearingAidCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of AADevice.hearingAidConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of AADevice.hearingAidConfig.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of AADevice.hearingAidConfig.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of AADevice.$hearingAidConfig.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of AADevice.hearingTestCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of AADevice.hearingTestCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of AADevice.hearingTestCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of AADevice.$hearingTestCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of AADevice.hideOffListeningModeCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of AADevice.hideOffListeningModeCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of AADevice.hideOffListeningModeCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of AADevice.$hideOffListeningModeCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of AADevice.audiogramEnrolledTimestamp.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of AADevice.audiogramEnrolledTimestamp.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of AADevice.audiogramEnrolledTimestamp.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of AADevice.$audiogramEnrolledTimestamp.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of AADevice.heartRateMonitorEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of AADevice.heartRateMonitorEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 920))();
}

uint64_t dispatch thunk of AADevice.heartRateMonitorEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 928))();
}

uint64_t dispatch thunk of AADevice.$heartRateMonitorEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 936))();
}

uint64_t dispatch thunk of AADevice.hideEarDetectionCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 944))();
}

uint64_t dispatch thunk of AADevice.hideEarDetectionCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 952))();
}

uint64_t dispatch thunk of AADevice.hideEarDetectionCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 960))();
}

uint64_t dispatch thunk of AADevice.$hideEarDetectionCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 968))();
}

uint64_t dispatch thunk of AADevice.identifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 976))();
}

uint64_t dispatch thunk of AADevice.identifier.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 984))();
}

uint64_t dispatch thunk of AADevice.identifier.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 992))();
}

uint64_t dispatch thunk of AADevice.streamStateAoS.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1000))();
}

uint64_t dispatch thunk of AADevice.streamStateAoS.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1008))();
}

uint64_t dispatch thunk of AADevice.streamStateAoS.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1016))();
}

uint64_t dispatch thunk of AADevice.$streamStateAoS.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1024))();
}

uint64_t dispatch thunk of AADevice.underlyingDevice.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1032))();
}

uint64_t dispatch thunk of AADevice.underlyingDevice.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1040))();
}

uint64_t dispatch thunk of AADevice.underlyingDevice.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1048))();
}

uint64_t dispatch thunk of AADevice.updateWithDevice(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1056))();
}

uint64_t dispatch thunk of AADevice.btAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1072))();
}

uint64_t dispatch thunk of AADevice.btAddress.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1080))();
}

uint64_t dispatch thunk of AADevice.btAddress.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1088))();
}

void *outlined init with copy of String?(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

uint64_t outlined init with copy of Data?(uint64_t *a1, uint64_t a2)
{
  if ((a1[1] & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
  }
  else
  {
    uint64_t v3 = *a1;
    unint64_t v4 = a1[1];
    outlined copy of Data._Representation(*a1, v4);
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
  }
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size_1()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_1(const void *a1)
{
  return malloc_size(a1);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_250CA204C()
{
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  uint64_t v6 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v7 = *(int **)(v1 + 24);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v3;
  void *v3 = *(void *)(v6 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_;
  uint64_t v4 = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + v4))(a1, v7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

Swift::Int *deviceNameTextFieldCharacterLimit.unsafeMutableAddressor()
{
  return &deviceNameTextFieldCharacterLimit;
}

uint64_t deviceNameTextFieldCharacterLimit.getter()
{
  return 62;
}

id getDeviceIcon(symbolName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v18 = "Fatal error";
  uint64_t v19 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v20 = "HeadphoneManager/HeadphoneUtils.swift";
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  id v46 = 0;
  id v45 = 0;
  id v44 = 0;
  id v43 = 0;
  id v42 = 0;
  unint64_t v21 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v24 = (uint64_t)&v15 - v21;
  uint64_t v47 = MEMORY[0x270FA5388](v22, v23);
  uint64_t v48 = v2;
  uint64_t v25 = 0;
  type metadata accessor for IFSymbol();
  swift_bridgeObjectRetain();
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v24, 1);
  id v39 = IFSymbol.__allocating_init(symbolName:bundleURL:)(v22, v23, v24);
  id v46 = v39;
  unint64_t v32 = type metadata accessor for IFColor();
  id v26 = IFColor.__allocating_init(systemColor:)(11);
  id v45 = v26;
  id v33 = IFColor.__allocating_init(systemColor:)(13);
  id v44 = v33;
  type metadata accessor for IFGraphicSymbolDescriptor();
  id v40 = IFGraphicSymbolDescriptor.__allocating_init()();
  id v43 = v40;
  uint64_t v31 = 1;
  uint64_t v28 = specialized _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v4;
  id v5 = v26;
  id v6 = v26;
  uint64_t v7 = v27;
  uint64_t v8 = v28;
  v27[3] = v32;
  void *v7 = v6;
  uint64_t v36 = MEMORY[0x263F8EE58] + 8;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v29 = v8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_setSymbolColors_, isa);

  uint64_t v35 = specialized _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v9;
  id v10 = v33;
  id v11 = v33;
  id v12 = v34;
  uint64_t v13 = v35;
  v34[3] = v32;
  *id v12 = v11;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v37 = v13;
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_setEnclosureColors_, v38);

  objc_msgSend(v40, sel_setRenderingMode_, 2);
  id v41 = objc_msgSend(v39, sel_imageForGraphicSymbolDescriptor_, v40);
  if (v41)
  {
    id v17 = v41;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  id v16 = v17;
  id v42 = v17;

  return v16;
}

unint64_t type metadata accessor for IFSymbol()
{
  uint64_t v2 = lazy cache variable for type metadata for IFSymbol;
  if (!lazy cache variable for type metadata for IFSymbol)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for IFSymbol);
    return ObjCClassMetadata;
  }
  return v2;
}

id IFSymbol.__allocating_init(symbolName:bundleURL:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc IFSymbol.init(symbolName:bundleURL:)(a1, a2, a3);
}

unint64_t type metadata accessor for IFColor()
{
  uint64_t v2 = lazy cache variable for type metadata for IFColor;
  if (!lazy cache variable for type metadata for IFColor)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for IFColor);
    return ObjCClassMetadata;
  }
  return v2;
}

id IFColor.__allocating_init(systemColor:)(uint64_t a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc IFColor.init(systemColor:)(a1);
}

unint64_t type metadata accessor for IFGraphicSymbolDescriptor()
{
  uint64_t v2 = lazy cache variable for type metadata for IFGraphicSymbolDescriptor;
  if (!lazy cache variable for type metadata for IFGraphicSymbolDescriptor)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for IFGraphicSymbolDescriptor);
    return ObjCClassMetadata;
  }
  return v2;
}

id IFGraphicSymbolDescriptor.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc IFGraphicSymbolDescriptor.init()();
}

uint64_t getSystemPrefsImage()()
{
  return Image.init(systemName:)();
}

uint64_t implicit closure #1 in getSystemPrefsImage()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

uint64_t getBluetoothImage()()
{
  return Image.init(systemName:)();
}

uint64_t implicit closure #1 in getBluetoothImage()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

uint64_t fetchFindMyIcon()()
{
  return Image.init(systemName:)();
}

uint64_t implicit closure #1 in fetchFindMyIcon()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

UIImage_optional __swiftcall getIcon(bundleID:)(Swift::String bundleID)
{
  assertionFailure(_:file:line:)();
  uint64_t v2 = 0;
  result.value.super.Class isa = v2;
  result.is_nil = v1;
  return result;
}

uint64_t implicit closure #1 in getIcon(bundleID:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

id getUTType(hpDevice:)(void *a1)
{
  uint64_t v9 = (void *)(*(uint64_t (**)(void))((*a1 & *MEMORY[0x263F8EED0]) + 0x210))();
  unsigned int v10 = objc_msgSend(v9, sel_productID);

  type metadata accessor for CBProductID();
  lazy protocol witness table accessor for type CBProductID and conformance CBProductID();
  if (== infix<A>(_:_:)()) {
    unsigned int v10 = 8209;
  }
  if (== infix<A>(_:_:)()) {
    unsigned int v10 = 8201;
  }
  type metadata accessor for UTType();
  id v5 = (id)(*(uint64_t (**)(void))((*a1 & *MEMORY[0x263F8EED0]) + 0x228))();
  unsigned __int16 v6 = (unsigned __int16)objc_msgSend(v5, sel_vendorIDBluetooth);

  id v7 = @nonobjc UTType.init(_bluetoothProductID:vendorID:)(v10, v6);
  if (v7) {
    return v7;
  }
  type metadata accessor for Log();
  static Log.shared.getter();
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneSettings: Invalid PID: ", 0x20uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", using regular headphone", 0x19uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.beats-headphones", 0x1AuLL, 1);
  return @nonobjc UTType.__allocating_init(_:)();
}

uint64_t type metadata accessor for CBProductID()
{
  uint64_t v4 = lazy cache variable for type metadata for CBProductID;
  if (!lazy cache variable for type metadata for CBProductID)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBProductID);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBProductID and conformance CBProductID()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBProductID and conformance CBProductID;
  if (!lazy protocol witness table cache variable for type CBProductID and conformance CBProductID)
  {
    type metadata accessor for CBProductID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBProductID and conformance CBProductID);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for UTType()
{
  uint64_t v2 = lazy cache variable for type metadata for UTType;
  if (!lazy cache variable for type metadata for UTType)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for UTType);
    return ObjCClassMetadata;
  }
  return v2;
}

id @nonobjc UTType.__allocating_init(_:)()
{
  id v1 = (id)MEMORY[0x253385EB0]();
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_typeWithIdentifier_, v1);

  swift_bridgeObjectRelease();
  return v2;
}

id @nonobjc UTType.init(_bluetoothProductID:vendorID:)(unsigned int a1, unsigned __int16 a2)
{
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__typeWithBluetoothProductID_vendorID_, a1, a2);
  return v2;
}

uint64_t checkIsFindMyNetworkSupported(cbDevice:)(void *a1)
{
  objc_msgSend(a1, sel_productID);
  type metadata accessor for CBProductID();
  lazy protocol witness table accessor for type CBProductID and conformance CBProductID();
  if (== infix<A>(_:_:)()) {
    char v5 = 1;
  }
  else {
    char v5 = == infix<A>(_:_:)();
  }
  if (v5) {
    char v4 = 1;
  }
  else {
    char v4 = == infix<A>(_:_:)();
  }
  if (v4) {
    char v3 = 1;
  }
  else {
    char v3 = == infix<A>(_:_:)();
  }
  if (v3) {
    char v2 = 1;
  }
  else {
    char v2 = == infix<A>(_:_:)();
  }
  return v2 & 1;
}

void *one-time initialization function for shared()
{
  type metadata accessor for HPSDeviceAnalytics();
  UIImage_optional result = HPSDeviceAnalytics.__allocating_init()();
  static HPSDeviceAnalytics.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for HPSDeviceAnalytics()
{
  return self;
}

void *HPSDeviceAnalytics.__allocating_init()()
{
  return HPSDeviceAnalytics.init()();
}

uint64_t *HPSDeviceAnalytics.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static HPSDeviceAnalytics.shared;
}

uint64_t static HPSDeviceAnalytics.shared.getter()
{
  uint64_t v1 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
  swift_retain();
  return v1;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.featureName()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureName.getter()
{
  uint64_t v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureName.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *uint64_t v2 = a1;
  v2[1] = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.keyValuePair.featureName.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.featureName.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.featureValue()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureValue.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureValue.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.keyValuePair.featureValue.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.featureValue.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.pid()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.keyValuePair.pid.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t HPSDeviceAnalytics.keyValuePair.pid.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

void (*HPSDeviceAnalytics.keyValuePair.pid.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.pid.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

void (*HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.modify;
}

void __swiftcall HPSDeviceAnalytics.keyValuePair.init()(HeadphoneManager::HPSDeviceAnalytics::keyValuePair *__return_ptr retstr)
{
  memset(__b, 0, sizeof(__b));
  __b[0] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  object = __b[0]._object;
  retstr->featureName._uint64_t countAndFlagsBits = __b[0]._countAndFlagsBits;
  retstr->featureName._object = object;
  retstr->featureValue = v1;
  retstr->pid = 0;
  retstr->adaptiveModeSupported = 0;
}

uint64_t default argument 0 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 1 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 2 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return 0;
}

uint64_t default argument 3 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return 0;
}

void __swiftcall HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)(HeadphoneManager::HPSDeviceAnalytics::keyValuePair *__return_ptr retstr, Swift::String featureName, Swift::String featureValue, Swift::Int pid, Swift::Int adaptiveModeSupported)
{
  retstr->featureName = featureName;
  retstr->featureValue = featureValue;
  retstr->pid = pid;
  retstr->adaptiveModeSupported = adaptiveModeSupported;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.caseSound()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSound.getter()
{
  return *(void *)v0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSound.setter(uint64_t result)
{
  *Swift::String v1 = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.caseSound.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.caseSound.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.crownRotation()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotation.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotation.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.crownRotation.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.crownRotation.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.deviceName()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.deviceName.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.deviceName.setter(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.deviceName.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.deviceName.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.disconnect()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.disconnect.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.disconnect.setter(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.disconnect.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.disconnect.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.doubleTap()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTap.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTap.setter(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.doubleTap.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.doubleTap.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.entryPoint()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("macOS_Sidebar", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.entryPoint.getter()
{
  uint64_t v2 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.entryPoint.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.entryPoint.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.entryPoint.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.getter()
{
  return *(void *)(v0 + 168);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.setter(uint64_t result)
{
  *(void *)(v1 + 168) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.endCallGesture()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.setter(uint64_t result)
{
  *(void *)(v1 + 192) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 200);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 200) = a1;
  *(void *)(v2 + 208) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.getter()
{
  return *(void *)(v0 + 216);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.setter(uint64_t result)
{
  *(void *)(v1 + 216) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 224);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 224) = a1;
  *(void *)(v2 + 232) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.forgetDevice()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.getter()
{
  return *(void *)(v0 + 240);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.setter(uint64_t result)
{
  *(void *)(v1 + 240) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.getter()
{
  return *(void *)(v0 + 248);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.setter(uint64_t result)
{
  *(void *)(v1 + 248) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 256);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 256) = a1;
  *(void *)(v2 + 264) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.listeningMode()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningMode.getter()
{
  return *(void *)(v0 + 272);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningMode.setter(uint64_t result)
{
  *(void *)(v1 + 272) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.listeningMode.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.listeningMode.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 280);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 280) = a1;
  *(void *)(v2 + 288) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.getter()
{
  return *(void *)(v0 + 296);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.setter(uint64_t result)
{
  *(void *)(v1 + 296) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 304);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 304) = a1;
  *(void *)(v2 + 312) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.getter()
{
  return *(void *)(v0 + 320);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.setter(uint64_t result)
{
  *(void *)(v1 + 320) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 328);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 328) = a1;
  *(void *)(v2 + 336) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.getter()
{
  return *(void *)(v0 + 344);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.setter(uint64_t result)
{
  *(void *)(v1 + 344) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 352);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 352) = a1;
  *(void *)(v2 + 360) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.getter()
{
  return *(void *)(v0 + 368);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.setter(uint64_t result)
{
  *(void *)(v1 + 368) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 376);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 376) = a1;
  *(void *)(v2 + 384) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.pressHold()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHold.getter()
{
  return *(void *)(v0 + 392);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHold.setter(uint64_t result)
{
  *(void *)(v1 + 392) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.pressHold.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.pressHold.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 400);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 400) = a1;
  *(void *)(v2 + 408) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 416);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 416) = a1;
  *(void *)(v2 + 424) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.smartRouting()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRouting.getter()
{
  return *(void *)(v0 + 432);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRouting.setter(uint64_t result)
{
  *(void *)(v1 + 432) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.smartRouting.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.smartRouting.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 440);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 440) = a1;
  *(void *)(v2 + 448) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.getter()
{
  return *(void *)(v0 + 456);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.setter(uint64_t result)
{
  *(void *)(v1 + 456) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.getter()
{
  return *(void *)(v0 + 464);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.setter(uint64_t result)
{
  *(void *)(v1 + 464) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.getter()
{
  return *(void *)(v0 + 472);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.setter(uint64_t result)
{
  *(void *)(v1 + 472) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.getter()
{
  return *(void *)(v0 + 480);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.setter(uint64_t result)
{
  *(void *)(v1 + 480) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 488);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 488) = a1;
  *(void *)(v2 + 496) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.conversationDetect()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.getter()
{
  return *(void *)(v0 + 504);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.setter(uint64_t result)
{
  *(void *)(v1 + 504) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 512);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 512) = a1;
  *(void *)(v2 + 520) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.getter()
{
  return *(void *)(v0 + 528);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.setter(uint64_t result)
{
  *(void *)(v1 + 528) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.getter()
{
  uint64_t v2 = *(void *)(v0 + 536);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  *(void *)(v2 + 536) = a1;
  *(void *)(v2 + 544) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.modify;
}

void __swiftcall HPSDeviceAnalytics.headphoneFeatureList.init()(HeadphoneManager::HPSDeviceAnalytics::headphoneFeatureList *__return_ptr retstr)
{
  bzero(v2, 0x228uLL);
  *(void *)uint64_t v2 = 0;
  *(Swift::String *)&v2[8] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[24] = 0;
  *(Swift::String *)&v2[32] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[48] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[64] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[80] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  memset(&v2[96], 0, 24);
  *(Swift::String *)&v2[120] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[136] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[152] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("macOS_Sidebar", 0xDuLL, 1);
  *(void *)&v2[168] = 0;
  *(Swift::String *)&v2[176] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(void *)&v2[192] = 0;
  *(Swift::String *)&v2[200] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[216] = 0;
  *(Swift::String *)&v2[224] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[240] = 0;
  *(void *)&v2[248] = 0;
  *(Swift::String *)&v2[256] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[272] = 0;
  *(Swift::String *)&v2[280] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[296] = 0;
  *(Swift::String *)&v2[304] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(void *)&v2[320] = 0;
  *(Swift::String *)&v2[328] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[344] = 0;
  *(Swift::String *)&v2[352] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(void *)&v2[368] = 0;
  *(Swift::String *)&v2[376] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(void *)&v2[392] = 0;
  *(Swift::String *)&v2[400] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[416] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[432] = 0;
  *(Swift::String *)&v2[440] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  memset(&v2[456], 0, 32);
  *(Swift::String *)&v2[488] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[504] = 0;
  *(Swift::String *)&v2[512] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(void *)&v2[528] = 0;
  *(Swift::String *)&v2[536] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  memcpy(__dst, v2, sizeof(__dst));
  memcpy(retstr, __dst, sizeof(HeadphoneManager::HPSDeviceAnalytics::headphoneFeatureList));
}

uint64_t default argument 0 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 1 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 2 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 3 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 4 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 5 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 6 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 7 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 8 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 9 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 10 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 11 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 12 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("macOS_Sidebar", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t default argument 13 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 14 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 15 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 16 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 17 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 18 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 19 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 20 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 21 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 22 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 23 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 24 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 25 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 26 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 27 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 28 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 29 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 30 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 31 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 32 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 33 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 34 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 35 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 36 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 37 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 38 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 39 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 40 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 41 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 42 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 43 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 44 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 45 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *a9 = a1;
  uint64_t result = a61;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  a9[10] = a12;
  a9[11] = a13;
  a9[12] = a14;
  a9[13] = a15;
  a9[14] = a16;
  a9[15] = a17;
  a9[16] = a18;
  a9[17] = a19;
  a9[18] = a20;
  a9[19] = a21;
  a9[20] = a22;
  a9[21] = a23;
  a9[22] = a24;
  a9[23] = a25;
  a9[24] = a26;
  a9[25] = a27;
  a9[26] = a28;
  a9[27] = a29;
  a9[28] = a30;
  a9[29] = a31;
  a9[30] = a32;
  a9[31] = a33;
  a9[32] = a34;
  a9[33] = a35;
  a9[34] = a36;
  a9[35] = a37;
  a9[36] = a38;
  a9[37] = a39;
  a9[38] = a40;
  a9[39] = a41;
  a9[40] = a42;
  a9[41] = a43;
  a9[42] = a44;
  a9[43] = a45;
  a9[44] = a46;
  a9[45] = a47;
  a9[46] = a48;
  a9[47] = a49;
  a9[48] = a50;
  a9[49] = a51;
  a9[50] = a52;
  a9[51] = a53;
  a9[52] = a54;
  a9[53] = a55;
  a9[54] = a56;
  a9[55] = a57;
  a9[56] = a58;
  a9[57] = a59;
  a9[58] = a60;
  a9[59] = a61;
  a9[60] = a62;
  a9[61] = a63;
  a9[62] = a64;
  a9[63] = a65;
  a9[64] = a66;
  a9[65] = a67;
  a9[66] = a68;
  a9[67] = a69;
  a9[68] = a70;
  return result;
}

void *HPSDeviceAnalytics.featureList.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  memcpy(__dst, (const void *)(v1 + 16), sizeof(__dst));
  outlined retain of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)__dst);
  swift_endAccess();
  return memcpy(a1, __dst, 0x228uLL);
}

uint64_t HPSDeviceAnalytics.featureList.setter(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  outlined retain of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)__dst);
  swift_beginAccess();
  memcpy(v4, (const void *)(v1 + 16), sizeof(v4));
  memcpy((void *)(v1 + 16), __dst, 0x228uLL);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v4);
  swift_endAccess();
  return outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)__dst);
}

uint64_t (*HPSDeviceAnalytics.featureList.modify())()
{
  return HPSDeviceAnalytics.featureList.modify;
}

uint64_t HPSDeviceAnalytics.featureList.modify()
{
  return swift_endAccess();
}

uint64_t HPSDeviceAnalytics.eventV2.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[71];
  uint64_t v4 = v1[72];
  uint64_t v5 = v1[73];
  uint64_t v6 = v1[74];
  uint64_t v7 = v1[75];
  uint64_t v9 = v1[76];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_endAccess();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v9;
  return result;
}

uint64_t HPSDeviceAnalytics.eventV2.setter(void *a1)
{
  memset(__b, 0, sizeof(__b));
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  __b[0] = *a1;
  uint64_t v4 = __b[0];
  __b[1] = v8;
  __b[2] = v5;
  Swift::String __b[3] = v9;
  __b[4] = v6;
  __b[5] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v1[71] = v4;
  v1[72] = v8;
  v1[73] = v5;
  v1[74] = v9;
  v1[75] = v6;
  v1[76] = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*HPSDeviceAnalytics.eventV2.modify())()
{
  return HPSDeviceAnalytics.eventV2.modify;
}

uint64_t HPSDeviceAnalytics.eventV2.modify()
{
  return swift_endAccess();
}

void *HPSDeviceAnalytics.init()()
{
  uint64_t v10 = v0;
  HPSDeviceAnalytics.headphoneFeatureList.init()(&v9);
  memcpy(__dst, &v9, sizeof(__dst));
  memcpy((void *)(v0 + 16), __dst, 0x228uLL);
  HPSDeviceAnalytics.keyValuePair.init()(&v8);
  uint64_t result = v7;
  object = v8.featureName._object;
  uint64_t countAndFlagsBits = v8.featureValue._countAndFlagsBits;
  uint64_t v4 = v8.featureValue._object;
  Swift::Int pid = v8.pid;
  Swift::Int adaptiveModeSupported = v8.adaptiveModeSupported;
  v7[71] = v8.featureName._countAndFlagsBits;
  v7[72] = object;
  v7[73] = countAndFlagsBits;
  v7[74] = v4;
  v7[75] = pid;
  v7[76] = adaptiveModeSupported;
  return result;
}

uint64_t outlined retain of HPSDeviceAnalytics.headphoneFeatureList(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of HPSDeviceAnalytics.headphoneFeatureList(uint64_t a1)
{
  return a1;
}

uint64_t HPSDeviceAnalytics.updateFeatureCount(feature:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  uint64_t v216 = result;
  uint64_t v215 = v2;
  uint64_t v214 = result;
  if (result)
  {
    uint64_t v5 = result;
    char v4 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    char v4 = 0;
  }
  if (v4)
  {
    uint64_t v213 = result;
    uint64_t v9 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
  }
  else
  {
    switch(v5)
    {
      case 0:
        uint64_t v177 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v178 = (void (*)(void))(*(uint64_t (**)(unsigned char *))(*(void *)v177 + 112))(v180);
        uint64_t v7 = *(void *)(v6 + 96);
        uint64_t v179 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_132;
        }
        *(void *)(v6 + 96) = v179;
        v178();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 1:
        uint64_t v174 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v175 = (void (*)(void))(*(uint64_t (**)(unsigned char *))(*(void *)v174 + 112))(v184);
        uint64_t v11 = *(void *)(v10 + 272);
        uint64_t v176 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_131;
        }
        *(void *)(v10 + 272) = v176;
        v175();
        uint64_t v13 = swift_release();
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v2 + 120))(v183, v13);
        BOOL v173 = v183[5] != 1;
        swift_bridgeObjectRelease();
        uint64_t v9 = swift_bridgeObjectRelease();
        if (v173) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
        }
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v9);
        uint64_t v170 = v182;
        swift_bridgeObjectRetain();
        outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
        uint64_t v171 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *(void *)(v14 + 16) = v181;
        *(void *)(v14 + 24) = v170;
        swift_bridgeObjectRelease();
        v171();
        Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ListeningModeV2", 0xFuLL, 1);
        uint64_t v172 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        Swift::String *v16 = v15;
        swift_bridgeObjectRelease();
        uint64_t v17 = v172();
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v17);
        break;
      case 2:
        uint64_t v167 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v168 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v167 + 112))(&v194);
        uint64_t v19 = *(void *)(v18 + 392);
        uint64_t v169 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_130;
        }
        *(void *)(v18 + 392) = v169;
        v168();
        uint64_t v21 = swift_release();
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v2 + 120))(v193, v21);
        BOOL v166 = v193[5] != 1;
        swift_bridgeObjectRelease();
        uint64_t v9 = swift_bridgeObjectRelease();
        if (v166) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
        }
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v9);
        memcpy(v192, v191, sizeof(v192));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        swift_bridgeObjectRetain();
        unsigned int v165 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v192);
        uint64_t v22 = v165;
        if ((v165 & 1) == 0)
        {
          (*(void (**)(void))(*(void *)v2 + 96))();
          uint64_t v162 = v186;
          swift_bridgeObjectRetain();
          outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
          uint64_t v163 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
          *(void *)(v23 + 16) = v185;
          *(void *)(v23 + 24) = v162;
          swift_bridgeObjectRelease();
          v163();
          Swift::String v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenV2LeftBud", 0x15uLL, 1);
          int v164 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
          Swift::String *v25 = v24;
          swift_bridgeObjectRelease();
          uint64_t v26 = v164();
          uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v26);
        }
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v22);
        memcpy(__dst, v189, sizeof(__dst));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        swift_bridgeObjectRetain();
        unsigned int v161 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)__dst);
        uint64_t result = v161;
        if ((v161 & 1) == 0)
        {
          (*(void (**)(void))(*(void *)v2 + 96))();
          uint64_t v158 = v188;
          swift_bridgeObjectRetain();
          outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
          uint64_t v159 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
          *(void *)(v27 + 16) = v187;
          *(void *)(v27 + 24) = v158;
          swift_bridgeObjectRelease();
          v159();
          Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenV2RightBud", 0x16uLL, 1);
          unint64_t v160 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
          *uint64_t v29 = v28;
          swift_bridgeObjectRelease();
          uint64_t v30 = v160();
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v30);
        }
        break;
      case 3:
        uint64_t v155 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        char v156 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v155 + 112))(&v195);
        uint64_t v32 = *(void *)(v31 + 112);
        uint64_t v157 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          goto LABEL_129;
        }
        *(void *)(v31 + 112) = v157;
        v156();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 4:
        uint64_t v152 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v153 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v152 + 112))(&v196);
        uint64_t v35 = *(void *)(v34 + 24);
        uint64_t v154 = v35 + 1;
        if (__OFADD__(v35, 1)) {
          goto LABEL_128;
        }
        *(void *)(v34 + 24) = v154;
        v153();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 5:
        uint64_t v149 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v150 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v149 + 112))(&v197);
        uint64_t v38 = *(void *)(v37 + 248);
        uint64_t v151 = v38 + 1;
        if (__OFADD__(v38, 1)) {
          goto LABEL_127;
        }
        *(void *)(v37 + 248) = v151;
        v150();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 6:
        uint64_t v146 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        unint64_t v147 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v146 + 112))(&v198);
        uint64_t v41 = *(void *)(v40 + 432);
        uint64_t v148 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_126;
        }
        *(void *)(v40 + 432) = v148;
        v147();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 7:
        uint64_t v143 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v144 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v143 + 112))(&v199);
        uint64_t v44 = *(void *)(v43 + 320);
        uint64_t v145 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          goto LABEL_125;
        }
        *(void *)(v43 + 320) = v145;
        v144();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 8:
        uint64_t v140 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v141 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v140 + 112))(&v200);
        uint64_t v47 = *(void *)(v46 + 368);
        uint64_t v142 = v47 + 1;
        if (__OFADD__(v47, 1)) {
          goto LABEL_124;
        }
        *(void *)(v46 + 368) = v142;
        v141();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 9:
        uint64_t v137 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        uint64_t v138 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v137 + 112))(&v201);
        uint64_t v50 = *(void *)(v49 + 216);
        uint64_t v139 = v50 + 1;
        if (__OFADD__(v50, 1)) {
          goto LABEL_123;
        }
        *(void *)(v49 + 216) = v139;
        v138();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 10:
        uint64_t v134 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        Swift::String v135 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v134 + 112))(&v202);
        uint64_t v53 = *(void *)(v52 + 472);
        uint64_t v136 = v53 + 1;
        if (__OFADD__(v53, 1)) {
          goto LABEL_122;
        }
        *(void *)(v52 + 472) = v136;
        v135();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 11:
      case 12:
      case 21:
      case 22:
        return result;
      case 13:
        uint64_t v131 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        char v132 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v131 + 112))(&v203);
        uint64_t v56 = *(void *)(v55 + 104);
        uint64_t v133 = v56 + 1;
        if (__OFADD__(v56, 1)) {
          goto LABEL_121;
        }
        *(void *)(v55 + 104) = v133;
        v132();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 14:
        uint64_t v128 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        int v129 = (void (*)(void))(*(uint64_t (**)(void *))(*(void *)v128 + 112))(v204);
        uint64_t v59 = *(void *)(v58 + 240);
        uint64_t v130 = v59 + 1;
        if (__OFADD__(v59, 1)) {
          goto LABEL_120;
        }
        *(void *)(v58 + 240) = v130;
        v129();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 15:
        uint64_t v113 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        char v114 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v113 + 112))(&v209);
        uint64_t v77 = *(void *)(v76 + 456);
        uint64_t v115 = v77 + 1;
        if (__OFADD__(v77, 1)) {
          goto LABEL_117;
        }
        *(void *)(v76 + 456) = v115;
        v114();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 16:
        uint64_t v116 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        char v117 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v116 + 112))(&v208);
        if (__OFADD__(*v74, 1)) {
          goto LABEL_118;
        }
        ++*v74;
        v117();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 17:
        uint64_t v125 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        char v126 = (void (*)(void))(*(uint64_t (**)(uint64_t *))(*(void *)v125 + 112))(&v206);
        uint64_t v62 = *(void *)(v61 + 192);
        uint64_t v127 = v62 + 1;
        if (__OFADD__(v62, 1)) {
          goto LABEL_119;
        }
        *(void *)(v61 + 192) = v127;
        v126();
        uint64_t v64 = swift_release();
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v64);
        memcpy(v207, v205, sizeof(v207));
        BOOL v124 = v207[43] == 0;
        uint64_t v9 = outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v207);
        if (v124) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
        }
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v9);
        uint64_t v118 = v204[134];
        swift_bridgeObjectRetain();
        outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
        char v119 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *(void *)(v65 + 16) = v204[133];
        *(void *)(v65 + 24) = v118;
        swift_bridgeObjectRelease();
        v119();
        Swift::String v66 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MuteCall", 8uLL, 1);
        char v120 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *uint64_t v67 = v66;
        swift_bridgeObjectRelease();
        uint64_t v68 = v120();
        uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v68);
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v69);
        uint64_t v121 = v204[38];
        swift_bridgeObjectRetain();
        outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
        char v122 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *(void *)(v70 + 16) = v204[37];
        *(void *)(v70 + 24) = v121;
        swift_bridgeObjectRelease();
        v122();
        Swift::String v71 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EndCall", 7uLL, 1);
        char v123 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *uint64_t v72 = v71;
        swift_bridgeObjectRelease();
        uint64_t v73 = v123();
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v73);
        break;
      case 18:
        uint64_t v110 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        char v111 = (void (*)(void))(*(uint64_t (**)(void *))(*(void *)v110 + 112))(v210);
        uint64_t v80 = *(void *)(v79 + 480);
        uint64_t v112 = v80 + 1;
        if (__OFADD__(v80, 1)) {
          goto LABEL_116;
        }
        *(void *)(v79 + 480) = v112;
        v111();
        uint64_t v9 = swift_release();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v9);
      case 19:
        uint64_t v107 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        int v108 = (void (*)(void))(*(uint64_t (**)(void *))(*(void *)v107 + 112))(v211);
        uint64_t v83 = *(void *)(v82 + 504);
        uint64_t v109 = v83 + 1;
        if (__OFADD__(v83, 1)) {
          goto LABEL_115;
        }
        *(void *)(v82 + 504) = v109;
        v108();
        uint64_t v85 = swift_release();
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v85);
        uint64_t v104 = v210[77];
        swift_bridgeObjectRetain();
        outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
        char v105 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *(void *)(v86 + 16) = v210[76];
        *(void *)(v86 + 24) = v104;
        swift_bridgeObjectRelease();
        v105();
        Swift::String v87 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpeechDetection", 0xFuLL, 1);
        char v106 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *char v88 = v87;
        swift_bridgeObjectRelease();
        uint64_t v89 = v106();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v89);
      case 20:
        uint64_t v101 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
        swift_retain();
        char v102 = (void (*)(void))(*(uint64_t (**)(unsigned char *))(*(void *)v101 + 112))(v212);
        uint64_t v91 = *(void *)(v90 + 528);
        uint64_t v103 = v91 + 1;
        if (__OFADD__(v91, 1))
        {
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          JUMPOUT(0x250CA8D18);
        }
        *(void *)(v90 + 528) = v103;
        v102();
        uint64_t v93 = swift_release();
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v93);
        uint64_t v98 = v211[80];
        swift_bridgeObjectRetain();
        outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
        char v99 = (void (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *(void *)(v94 + 16) = v211[79];
        *(void *)(v94 + 24) = v98;
        swift_bridgeObjectRelease();
        v99();
        Swift::String v95 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AdaptiveVolume", 0xEuLL, 1);
        char v100 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)v2 + 136))();
        *char v96 = v95;
        swift_bridgeObjectRelease();
        uint64_t v97 = v100();
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v97);
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HPSDeviceAnalytics.headphoneFeatureList()
{
}

Swift::Void __swiftcall HPSDeviceAnalytics.sendEventV2()()
{
  uint64_t v11 = v0;
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneSettings.FeatureInfo", 0x27uLL, 1)._countAndFlagsBits;
  id v3 = (id)MEMORY[0x253385EB0](countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v9 = partial apply for closure #1 in HPSDeviceAnalytics.sendEventV2();
  uint64_t v10 = v0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v5 = 1107296256;
  int v6 = 0;
  uint64_t v7 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  HeadphoneManager::HPSDeviceAnalytics::keyValuePair v8 = &block_descriptor_0;
  uint64_t v2 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v2);
}

uint64_t closure #1 in HPSDeviceAnalytics.sendEventV2()(uint64_t a1)
{
  v11[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NSObject));
  _allocateUninitializedArray<A>(_:)();
  int v6 = v1;
  *uint64_t v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureChangeCount", 0x12uLL, 1);
  type metadata accessor for NSNumber();
  v6[1]._uint64_t countAndFlagsBits = (uint64_t)NSNumber.init(integerLiteral:)(1).super.super.isa;
  *(Swift::String *)((char *)v6 + 24) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureName", 0xBuLL, 1);
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 120))(v11);
  uint64_t v3 = v11[0];
  uint64_t v8 = v11[1];
  swift_bridgeObjectRetain();
  v6[2]._object = (void *)MEMORY[0x253385EB0](v3, v8);
  v6[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureValue", 0xCuLL, 1);
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 120))(v10);
  uint64_t v5 = v10[2];
  uint64_t v7 = v10[3];
  swift_bridgeObjectRetain();
  v6[4]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v5, v7);
  *(Swift::String *)((char *)v6 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphonePID", 0xCuLL, 1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 120))(&v9);
  v6[5]._object = Int._bridgeToObjectiveC()().super.super.isa;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject();
  return Dictionary.init(dictionaryLiteral:)();
}

Swift::Void __swiftcall HPSDeviceAnalytics.sendEvent()()
{
  uint64_t v13 = v0;
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneSettings", 0x1BuLL, 1)._countAndFlagsBits;
  id v3 = (id)MEMORY[0x253385EB0](countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v11 = partial apply for closure #1 in HPSDeviceAnalytics.sendEvent();
  uint64_t v12 = v0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v7 = 1107296256;
  int v8 = 0;
  uint64_t v9 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  uint64_t v10 = &block_descriptor_49;
  uint64_t v2 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v2);

  HPSDeviceAnalytics.headphoneFeatureList.init()(&v5);
  memcpy(__dst, &v5, sizeof(__dst));
  memcpy(v4, __dst, sizeof(v4));
  (*(void (**)(unsigned char *))(*(void *)v0 + 104))(v4);
}

uint64_t closure #1 in HPSDeviceAnalytics.sendEvent()(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v98 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NSObject));
  _allocateUninitializedArray<A>(_:)();
  Swift::String v28 = v2;
  *uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CaseSound", 9uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v99, v97, sizeof(v99));
  v28[1]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 24) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CaseSoundValue", 0xEuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v100, v96, sizeof(v100));
  uint64_t v4 = v100[1];
  uint64_t v51 = v100[2];
  swift_bridgeObjectRetain();
  v28[2]._object = (void *)MEMORY[0x253385EB0](v4, v51);
  v28[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CrownRotation", 0xDuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v101, v95, sizeof(v101));
  v28[4]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CrownRotationValue", 0x12uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v102, v94, sizeof(v102));
  uint64_t v5 = v102[4];
  uint64_t v50 = v102[5];
  swift_bridgeObjectRetain();
  v28[5]._object = (void *)MEMORY[0x253385EB0](v5, v50);
  v28[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenLeftBudValue", 0x18uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v103, v93, sizeof(v103));
  uint64_t v6 = v103[6];
  uint64_t v49 = v103[7];
  swift_bridgeObjectRetain();
  v28[7]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v6, v49);
  *(Swift::String *)((char *)v28 + 120) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenRightBudValue", 0x19uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v104, v92, sizeof(v104));
  uint64_t v7 = v104[8];
  uint64_t v48 = v104[9];
  swift_bridgeObjectRetain();
  v28[8]._object = (void *)MEMORY[0x253385EB0](v7, v48);
  v28[9] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenSingleValue", 0x17uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v105, v91, sizeof(v105));
  uint64_t v8 = v105[10];
  uint64_t v47 = v105[11];
  swift_bridgeObjectRetain();
  v28[10]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v8, v47);
  *(Swift::String *)((char *)v28 + 168) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DeviceName", 0xAuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v106, v90, sizeof(v106));
  v28[11]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[12] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Disconnect", 0xAuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v107, v89, sizeof(v107));
  v28[13]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 216) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DoubleTap", 9uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v108, v88, sizeof(v108));
  v28[14]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[15] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DoubleTapLeftValue", 0x12uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v109, v87, sizeof(v109));
  uint64_t v9 = v109[15];
  uint64_t v46 = v109[16];
  swift_bridgeObjectRetain();
  v28[16]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v9, v46);
  *(Swift::String *)((char *)v28 + 264) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DoubleTapRightValue", 0x13uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v110, v86, sizeof(v110));
  uint64_t v10 = v110[17];
  uint64_t v45 = v110[18];
  swift_bridgeObjectRetain();
  v28[17]._object = (void *)MEMORY[0x253385EB0](v10, v45);
  v28[18] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EarTipFitTest", 0xDuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v111, v85, sizeof(v111));
  v28[19]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 312) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EarTipFitTestValue", 0x12uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v112, v84, sizeof(v112));
  uint64_t v11 = v112[22];
  uint64_t v44 = v112[23];
  swift_bridgeObjectRetain();
  v28[20]._object = (void *)MEMORY[0x253385EB0](v11, v44);
  v28[21] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EntryPoint", 0xAuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v113, v83, sizeof(v113));
  uint64_t v12 = v113[19];
  uint64_t v43 = v113[20];
  swift_bridgeObjectRetain();
  v28[22]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v12, v43);
  *(Swift::String *)((char *)v28 + 360) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EndCallGesture", 0xEuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v114, v82, sizeof(v114));
  v28[23]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[24] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EndCallGestureValue", 0x13uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v115, v81, sizeof(v115));
  uint64_t v13 = v115[25];
  uint64_t v42 = v115[26];
  swift_bridgeObjectRetain();
  v28[25]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v13, v42);
  *(Swift::String *)((char *)v28 + 408) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FindMyNetwork", 0xDuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v116, v80, sizeof(v116));
  v28[26]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[27] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FindMyNetworkValue", 0x12uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v117, v79, sizeof(v117));
  uint64_t v14 = v117[28];
  uint64_t v41 = v117[29];
  swift_bridgeObjectRetain();
  v28[28]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v14, v41);
  *(Swift::String *)((char *)v28 + 456) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ForgetDevice", 0xCuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v118, v78, sizeof(v118));
  v28[29]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[30] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InEarOnHeadDetection", 0x14uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v119, v77, sizeof(v119));
  v28[31]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 504) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InEarOnHeadDetectionValue", 0x19uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v120, v76, sizeof(v120));
  uint64_t v15 = v120[32];
  uint64_t v40 = v120[33];
  swift_bridgeObjectRetain();
  v28[32]._object = (void *)MEMORY[0x253385EB0](v15, v40);
  v28[33] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ListeningMode", 0xDuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v121, v75, sizeof(v121));
  v28[34]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 552) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ListeningModeValue", 0x12uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v122, v74, sizeof(v122));
  uint64_t v16 = v122[35];
  uint64_t v39 = v122[36];
  swift_bridgeObjectRetain();
  v28[35]._object = (void *)MEMORY[0x253385EB0](v16, v39);
  v28[36] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MagneticEarbudDetect", 0x14uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v123, v73, sizeof(v123));
  v28[37]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 600) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MagneticEarbudDetectValue", 0x19uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v124, v72, sizeof(v124));
  uint64_t v17 = v124[38];
  uint64_t v38 = v124[39];
  swift_bridgeObjectRetain();
  v28[38]._object = (void *)MEMORY[0x253385EB0](v17, v38);
  v28[39] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MicrophoneSwitch", 0x10uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v125, v71, sizeof(v125));
  v28[40]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 648) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MicrophoneSwitchValue", 0x15uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v126, v70, sizeof(v126));
  uint64_t v18 = v126[41];
  uint64_t v37 = v126[42];
  swift_bridgeObjectRetain();
  v28[41]._object = (void *)MEMORY[0x253385EB0](v18, v37);
  v28[42] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MuteControlGesture", 0x12uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v127, v69, sizeof(v127));
  v28[43]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 696) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MuteControlGestureValue", 0x17uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v128, v68, sizeof(v128));
  uint64_t v19 = v128[44];
  uint64_t v36 = v128[45];
  swift_bridgeObjectRetain();
  v28[44]._object = (void *)MEMORY[0x253385EB0](v19, v36);
  v28[45] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("OptimizedBudCharging", 0x14uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v129, v67, sizeof(v129));
  v28[46]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 744) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("OptimizedBudChargingValue", 0x19uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v130, v66, sizeof(v130));
  uint64_t v20 = v130[47];
  uint64_t v35 = v130[48];
  swift_bridgeObjectRetain();
  v28[47]._object = (void *)MEMORY[0x253385EB0](v20, v35);
  v28[48] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressHold", 9uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v131, v65, sizeof(v131));
  v28[49]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 792) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressHoldLeftBudValue", 0x15uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v132, v64, sizeof(v132));
  uint64_t v21 = v132[50];
  uint64_t v34 = v132[51];
  swift_bridgeObjectRetain();
  v28[50]._object = (void *)MEMORY[0x253385EB0](v21, v34);
  v28[51] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressHoldRightBudValue", 0x16uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v133, v63, sizeof(v133));
  uint64_t v22 = v133[52];
  uint64_t v33 = v133[53];
  swift_bridgeObjectRetain();
  v28[52]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v22, v33);
  *(Swift::String *)((char *)v28 + 840) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SmartRouting", 0xCuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v134, v62, sizeof(v134));
  v28[53]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[54] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SmartRoutingValue", 0x11uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v135, v61, sizeof(v135));
  uint64_t v23 = v135[55];
  uint64_t v32 = v135[56];
  swift_bridgeObjectRetain();
  v28[55]._uint64_t countAndFlagsBits = MEMORY[0x253385EB0](v23, v32);
  *(Swift::String *)((char *)v28 + 888) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpatialAudioProfile", 0x13uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v136, v60, sizeof(v136));
  v28[56]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[57] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpatialAudioTutorial", 0x14uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v137, v59, sizeof(v137));
  v28[58]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 936) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ViewInFindMy", 0xCuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v138, v58, sizeof(v138));
  v28[59]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[60] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ConversationBoost", 0x11uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v139, v57, sizeof(v139));
  v28[61]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 984) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ConversationBoostValue", 0x16uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v140, v56, sizeof(v140));
  uint64_t v24 = v140[61];
  uint64_t v31 = v140[62];
  swift_bridgeObjectRetain();
  v28[62]._object = (void *)MEMORY[0x253385EB0](v24, v31);
  v28[63] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpeechDetection", 0xFuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v141, v55, sizeof(v141));
  v28[64]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 1032) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpeechDetectionValue", 0x14uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v142, v54, sizeof(v142));
  uint64_t v25 = v142[64];
  uint64_t v30 = v142[65];
  swift_bridgeObjectRetain();
  v28[65]._object = (void *)MEMORY[0x253385EB0](v25, v30);
  v28[66] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AutomaticallyAdjustVolume", 0x19uLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v143, v53, sizeof(v143));
  v28[67]._uint64_t countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 1080) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AutomaticallyAdjustVolumeValue", 0x1EuLL, 1);
  (*(void (**)(uint64_t))(*(void *)v26 + 96))(v26);
  memcpy(v144, v52, sizeof(v144));
  uint64_t v27 = v144[67];
  uint64_t v29 = v144[68];
  swift_bridgeObjectRetain();
  v28[68]._object = (void *)MEMORY[0x253385EB0](v27, v29);
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v144);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v143);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v142);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v141);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v140);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v139);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v138);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v137);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v136);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v135);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v134);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v133);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v132);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v131);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v130);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v129);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v128);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v127);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v126);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v125);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v124);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v123);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v122);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v121);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v120);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v119);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v118);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v117);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v116);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v115);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v114);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v113);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v112);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v111);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v110);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v109);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v108);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v107);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v106);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v105);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v104);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v103);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v102);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v101);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v100);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v99);
  type metadata accessor for NSObject();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t HPSDeviceAnalytics.deinit()
{
  outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
  outlined destroy of HPSDeviceAnalytics.keyValuePair();
  return v1;
}

uint64_t HPSDeviceAnalytics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id @nonobjc IFSymbol.init(symbolName:bundleURL:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v10 = (id)MEMORY[0x253385EB0]();
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  BOOL v3 = (*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(a3, 1) == 1;
  if (v3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()((NSURL *)v3);
    uint64_t v7 = v4;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
    uint64_t v8 = v7;
  }
  id v6 = objc_msgSend(v9, sel_initWithSymbolName_bundleURL_, v10);

  swift_bridgeObjectRelease();
  return v6;
}

id @nonobjc IFColor.init(systemColor:)(uint64_t a1)
{
  return objc_msgSend(v1, sel_initWithSystemColor_, a1);
}

id @nonobjc IFGraphicSymbolDescriptor.init()()
{
  return objc_msgSend(v0, sel_init);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBProductID@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CBProductID.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBProductID@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CBProductID.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in HPSDeviceAnalytics.sendEventV2()()
{
  return closure #1 in HPSDeviceAnalytics.sendEventV2()(v0);
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in HPSDeviceAnalytics.sendEvent()(uint64_t a1, uint64_t a2)
{
  return closure #1 in HPSDeviceAnalytics.sendEvent()(v2, a2);
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HPSDeviceAnalytics.keyValuePair()
{
}

uint64_t method lookup function for HPSDeviceAnalytics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HPSDeviceAnalytics.updateFeatureCount(feature:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t initializeBufferWithCopyOfBuffer for HPSDeviceAnalytics.keyValuePair(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for HPSDeviceAnalytics.keyValuePair()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for HPSDeviceAnalytics.keyValuePair(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  a1[2] = a2[2];
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  a1[3] = v5;
  a1[4] = a2[4];
  a1[5] = a2[5];
  return result;
}

void *assignWithCopy for HPSDeviceAnalytics.keyValuePair(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v4 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v4;
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  a1[4] = a2[4];
  a1[5] = a2[5];
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
}

void *assignWithTake for HPSDeviceAnalytics.keyValuePair(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  a1[4] = a2[4];
  a1[5] = a2[5];
  return result;
}

uint64_t getEnumTagSinglePayload for HPSDeviceAnalytics.keyValuePair(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)(a1 + 8))) {
        int v3 = *(void *)(a1 + 8);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HPSDeviceAnalytics.keyValuePair(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)uint64_t result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 48) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 48) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)(result + 8) = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPSDeviceAnalytics.keyValuePair()
{
  return &type metadata for HPSDeviceAnalytics.keyValuePair;
}

uint64_t initializeBufferWithCopyOfBuffer for HPSDeviceAnalytics.headphoneFeatureList(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for HPSDeviceAnalytics.headphoneFeatureList()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for HPSDeviceAnalytics.headphoneFeatureList(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v3;
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v4 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v4;
  a1[6] = a2[6];
  uint64_t v5 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v5;
  a1[8] = a2[8];
  uint64_t v6 = a2[9];
  swift_bridgeObjectRetain();
  a1[9] = v6;
  a1[10] = a2[10];
  uint64_t v7 = a2[11];
  swift_bridgeObjectRetain();
  a1[11] = v7;
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  uint64_t v8 = a2[16];
  swift_bridgeObjectRetain();
  a1[16] = v8;
  a1[17] = a2[17];
  uint64_t v9 = a2[18];
  swift_bridgeObjectRetain();
  a1[18] = v9;
  a1[19] = a2[19];
  uint64_t v10 = a2[20];
  swift_bridgeObjectRetain();
  a1[20] = v10;
  a1[21] = a2[21];
  a1[22] = a2[22];
  uint64_t v11 = a2[23];
  swift_bridgeObjectRetain();
  a1[23] = v11;
  a1[24] = a2[24];
  a1[25] = a2[25];
  uint64_t v12 = a2[26];
  swift_bridgeObjectRetain();
  a1[26] = v12;
  a1[27] = a2[27];
  a1[28] = a2[28];
  uint64_t v13 = a2[29];
  swift_bridgeObjectRetain();
  a1[29] = v13;
  a1[30] = a2[30];
  a1[31] = a2[31];
  a1[32] = a2[32];
  uint64_t v14 = a2[33];
  swift_bridgeObjectRetain();
  a1[33] = v14;
  a1[34] = a2[34];
  a1[35] = a2[35];
  uint64_t v15 = a2[36];
  swift_bridgeObjectRetain();
  a1[36] = v15;
  a1[37] = a2[37];
  a1[38] = a2[38];
  uint64_t v16 = a2[39];
  swift_bridgeObjectRetain();
  a1[39] = v16;
  a1[40] = a2[40];
  a1[41] = a2[41];
  uint64_t v17 = a2[42];
  swift_bridgeObjectRetain();
  a1[42] = v17;
  a1[43] = a2[43];
  a1[44] = a2[44];
  uint64_t v18 = a2[45];
  swift_bridgeObjectRetain();
  a1[45] = v18;
  a1[46] = a2[46];
  a1[47] = a2[47];
  uint64_t v19 = a2[48];
  swift_bridgeObjectRetain();
  a1[48] = v19;
  a1[49] = a2[49];
  a1[50] = a2[50];
  uint64_t v20 = a2[51];
  swift_bridgeObjectRetain();
  a1[51] = v20;
  a1[52] = a2[52];
  uint64_t v21 = a2[53];
  swift_bridgeObjectRetain();
  a1[53] = v21;
  a1[54] = a2[54];
  a1[55] = a2[55];
  uint64_t v22 = a2[56];
  swift_bridgeObjectRetain();
  a1[56] = v22;
  a1[57] = a2[57];
  a1[58] = a2[58];
  a1[59] = a2[59];
  a1[60] = a2[60];
  a1[61] = a2[61];
  uint64_t v23 = a2[62];
  swift_bridgeObjectRetain();
  a1[62] = v23;
  a1[63] = a2[63];
  a1[64] = a2[64];
  uint64_t v24 = a2[65];
  swift_bridgeObjectRetain();
  a1[65] = v24;
  a1[66] = a2[66];
  a1[67] = a2[67];
  uint64_t v27 = a2[68];
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  a1[68] = v27;
  return result;
}

void *assignWithCopy for HPSDeviceAnalytics.headphoneFeatureList(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v3;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v4 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v4;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v5 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v5;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  uint64_t v6 = a2[9];
  swift_bridgeObjectRetain();
  a1[9] = v6;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  uint64_t v7 = a2[11];
  swift_bridgeObjectRetain();
  a1[11] = v7;
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  uint64_t v8 = a2[16];
  swift_bridgeObjectRetain();
  a1[16] = v8;
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  uint64_t v9 = a2[18];
  swift_bridgeObjectRetain();
  a1[18] = v9;
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  uint64_t v10 = a2[20];
  swift_bridgeObjectRetain();
  a1[20] = v10;
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  uint64_t v11 = a2[23];
  swift_bridgeObjectRetain();
  a1[23] = v11;
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  uint64_t v12 = a2[26];
  swift_bridgeObjectRetain();
  a1[26] = v12;
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  uint64_t v13 = a2[29];
  swift_bridgeObjectRetain();
  a1[29] = v13;
  swift_bridgeObjectRelease();
  a1[30] = a2[30];
  a1[31] = a2[31];
  a1[32] = a2[32];
  uint64_t v14 = a2[33];
  swift_bridgeObjectRetain();
  a1[33] = v14;
  swift_bridgeObjectRelease();
  a1[34] = a2[34];
  a1[35] = a2[35];
  uint64_t v15 = a2[36];
  swift_bridgeObjectRetain();
  a1[36] = v15;
  swift_bridgeObjectRelease();
  a1[37] = a2[37];
  a1[38] = a2[38];
  uint64_t v16 = a2[39];
  swift_bridgeObjectRetain();
  a1[39] = v16;
  swift_bridgeObjectRelease();
  a1[40] = a2[40];
  a1[41] = a2[41];
  uint64_t v17 = a2[42];
  swift_bridgeObjectRetain();
  a1[42] = v17;
  swift_bridgeObjectRelease();
  a1[43] = a2[43];
  a1[44] = a2[44];
  uint64_t v18 = a2[45];
  swift_bridgeObjectRetain();
  a1[45] = v18;
  swift_bridgeObjectRelease();
  a1[46] = a2[46];
  a1[47] = a2[47];
  uint64_t v19 = a2[48];
  swift_bridgeObjectRetain();
  a1[48] = v19;
  swift_bridgeObjectRelease();
  a1[49] = a2[49];
  a1[50] = a2[50];
  uint64_t v20 = a2[51];
  swift_bridgeObjectRetain();
  a1[51] = v20;
  swift_bridgeObjectRelease();
  a1[52] = a2[52];
  uint64_t v21 = a2[53];
  swift_bridgeObjectRetain();
  a1[53] = v21;
  swift_bridgeObjectRelease();
  a1[54] = a2[54];
  a1[55] = a2[55];
  uint64_t v22 = a2[56];
  swift_bridgeObjectRetain();
  a1[56] = v22;
  swift_bridgeObjectRelease();
  a1[57] = a2[57];
  a1[58] = a2[58];
  a1[59] = a2[59];
  a1[60] = a2[60];
  a1[61] = a2[61];
  uint64_t v23 = a2[62];
  swift_bridgeObjectRetain();
  a1[62] = v23;
  swift_bridgeObjectRelease();
  a1[63] = a2[63];
  a1[64] = a2[64];
  uint64_t v24 = a2[65];
  swift_bridgeObjectRetain();
  a1[65] = v24;
  swift_bridgeObjectRelease();
  a1[66] = a2[66];
  a1[67] = a2[67];
  uint64_t v26 = a2[68];
  swift_bridgeObjectRetain();
  a1[68] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy552_8(void *a1, const void *a2)
{
}

void *assignWithTake for HPSDeviceAnalytics.headphoneFeatureList(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  a1[29] = a2[29];
  swift_bridgeObjectRelease();
  a1[30] = a2[30];
  a1[31] = a2[31];
  a1[32] = a2[32];
  a1[33] = a2[33];
  swift_bridgeObjectRelease();
  a1[34] = a2[34];
  a1[35] = a2[35];
  a1[36] = a2[36];
  swift_bridgeObjectRelease();
  a1[37] = a2[37];
  a1[38] = a2[38];
  a1[39] = a2[39];
  swift_bridgeObjectRelease();
  a1[40] = a2[40];
  a1[41] = a2[41];
  a1[42] = a2[42];
  swift_bridgeObjectRelease();
  a1[43] = a2[43];
  a1[44] = a2[44];
  a1[45] = a2[45];
  swift_bridgeObjectRelease();
  a1[46] = a2[46];
  a1[47] = a2[47];
  a1[48] = a2[48];
  swift_bridgeObjectRelease();
  a1[49] = a2[49];
  a1[50] = a2[50];
  a1[51] = a2[51];
  swift_bridgeObjectRelease();
  a1[52] = a2[52];
  a1[53] = a2[53];
  swift_bridgeObjectRelease();
  a1[54] = a2[54];
  a1[55] = a2[55];
  a1[56] = a2[56];
  swift_bridgeObjectRelease();
  a1[57] = a2[57];
  a1[58] = a2[58];
  a1[59] = a2[59];
  a1[60] = a2[60];
  a1[61] = a2[61];
  a1[62] = a2[62];
  swift_bridgeObjectRelease();
  a1[63] = a2[63];
  a1[64] = a2[64];
  a1[65] = a2[65];
  swift_bridgeObjectRelease();
  a1[66] = a2[66];
  a1[67] = a2[67];
  a1[68] = a2[68];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HPSDeviceAnalytics.headphoneFeatureList(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 552))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)(a1 + 16))) {
        int v3 = *(void *)(a1 + 16);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

void *storeEnumTagSinglePayload for HPSDeviceAnalytics.headphoneFeatureList(void *result, int a2, int a3)
{
  int v3 = result + 69;
  if (a2 < 0)
  {
    result[63] = 0;
    result[62] = 0;
    result[61] = 0;
    result[60] = 0;
    result[59] = 0;
    result[58] = 0;
    result[57] = 0;
    result[56] = 0;
    result[55] = 0;
    result[54] = 0;
    result[53] = 0;
    result[52] = 0;
    result[51] = 0;
    result[50] = 0;
    result[49] = 0;
    result[48] = 0;
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *uint64_t result = a2 + 0x80000000;
    result[67] = 0;
    result[66] = 0;
    result[65] = 0;
    result[64] = 0;
    result[68] = 0;
    if (a3 < 0) {
      unsigned char *v3 = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      unsigned char *v3 = 0;
    }
    if (a2) {
      result[2] = (a2 - 1);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPSDeviceAnalytics.headphoneFeatureList()
{
  return &type metadata for HPSDeviceAnalytics.headphoneFeatureList;
}

unint64_t type metadata accessor for NSObject()
{
  uint64_t v2 = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSNumber()
{
  uint64_t v2 = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t HeadphoneDeviceDataReplayable.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  uint64_t v16 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  unint64_t v10 = (*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v9, v8);
  uint64_t v13 = (uint64_t)&v7 - v10;
  uint64_t v15 = v11;
  uint64_t v14 = v3;
  (*(void (**)(uint64_t))(v5 + 280))(v4);
  lazy protocol witness table accessor for type UUID? and conformance <A> A?();
  Hasher.combine<A>(_:)();
  return outlined destroy of UUID?(v13);
}

unint64_t lazy protocol witness table accessor for type UUID? and conformance <A> A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UUID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UUID? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UUID?);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UUID? and conformance <A> A?);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t HeadphoneDeviceDataReplayable.description.getter(uint64_t a1, void (**a2)(void))
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\tclass: ", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_getDynamicType();
  swift_getMetatypeMetadata();
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tproductID:", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  a2[5](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateCase:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  a2[8](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateLeft:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  a2[11](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateRight:", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  a2[14](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateMain:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  a2[17](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelCase:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  a2[20](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelLeft:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  a2[23](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelRight:", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  a2[26](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelMain:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  a2[29](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tdeviceColor:", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  a2[32](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t HeadphoneDeviceDataReplayable.customizableKeyPaths.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  _allocateUninitializedArray<A>(_:)();
  Swift::String v6 = v0;
  uint64_t v1 = ReplayData.kProductIdKey.unsafeMutableAddressor();
  uint64_t v4 = *(void *)v1;
  Swift::String v5 = (void *)*((void *)v1 + 1);
  swift_bridgeObjectRetain();
  v6->_uint64_t countAndFlagsBits = v4;
  v6->_object = v5;
  swift_getKeyPath();
  v6[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateCase", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  void v6[2] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateLeft", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateRight", 0x11uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[4] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateMain", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[5] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelCase", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelLeft", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[7] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelRight", 0x11uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[8] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelMain", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[9] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceColor", 0xBuLL, 1);
  swift_release();
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  lazy protocol witness table accessor for type [String?] and conformance [A]();
  Sequence.compactMap<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v3 = Set.init<A>(_:)();
  swift_bridgeObjectRelease();
  return v3;
}

long long *ReplayData.kProductIdKey.unsafeMutableAddressor()
{
  if (one-time initialization token for kProductIdKey != -1) {
    swift_once();
  }
  return &static ReplayData.kProductIdKey;
}

void closure #1 in HeadphoneDeviceDataReplayable.customizableKeyPaths.getter(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *a1;
  swift_bridgeObjectRetain();
  if (*((void *)&v3 + 1))
  {
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    outlined destroy of String?();
  }
}

unint64_t lazy protocol witness table accessor for type [String?] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [String?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t static ReplayData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v36 = a2;
  uint64_t v3 = v2;
  uint64_t v4 = v25;
  uint64_t v35 = v3;
  uint64_t v49 = 0;
  uint64_t v48 = 0;
  uint64_t v47 = 0;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v43 - 8);
  uint64_t v42 = v43 - 8;
  unint64_t v26 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v43, v5);
  uint64_t v27 = &v17[-v26];
  unint64_t v28 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v17[-v26], v7);
  uint64_t v29 = &v17[-v28];
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  unint64_t v30 = (*(void *)(*(void *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v37, v8);
  uint64_t v44 = &v17[-v30];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  unint64_t v31 = (*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9, v36);
  uint64_t v32 = &v17[-v31];
  unint64_t v33 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v17[-v31], v11);
  uint64_t v40 = &v17[-v33];
  unint64_t v34 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v17[-v33], v13);
  uint64_t v38 = &v17[-v34];
  uint64_t v49 = v4;
  uint64_t v48 = v14;
  uint64_t v47 = v35;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 448))(v4);
  (*(void (**)(uint64_t))(*(void *)v36 + 448))(v15);
  uint64_t v39 = *(int *)(v37 + 48);
  outlined init with copy of UUID?(v38, v44);
  outlined init with copy of UUID?(v40, &v44[v39]);
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  uint64_t v46 = v41 + 48;
  if (v45(v44, 1, v43) == 1)
  {
    if (v45(&v44[v39], 1, v43) != 1) {
      goto LABEL_8;
    }
    outlined destroy of UUID?((uint64_t)v44);
    int v24 = 1;
  }
  else
  {
    outlined init with copy of UUID?(v44, v32);
    if (v45(&v44[v39], 1, v43) == 1)
    {
      (*(void (**)(unsigned char *, uint64_t))(v41 + 8))(v32, v43);
LABEL_8:
      outlined destroy of (UUID?, UUID?)((uint64_t)v44);
      int v24 = 0;
      goto LABEL_7;
    }
    uint64_t v20 = *(void (**)(unsigned char *, char *, uint64_t))(v41 + 32);
    uint64_t v19 = v41 + 32;
    v20(v29, v32, v43);
    v20(v27, &v44[v39], v43);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    int v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
    uint64_t v21 = v41 + 8;
    v22(v27, v43);
    v22(v29, v43);
    outlined destroy of UUID?((uint64_t)v44);
    int v24 = v23;
  }
LABEL_7:
  int v18 = v24;
  outlined destroy of UUID?((uint64_t)v40);
  outlined destroy of UUID?((uint64_t)v38);
  return v18 & 1;
}

uint64_t one-time initialization function for kProductIdKey()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("productId", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static ReplayData.kProductIdKey = (__int128)v1;
  return result;
}

void *outlined init with copy of UUID?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (UUID?, UUID?)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(void))(v5 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v6)(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?))
              + 48);
  if (!v6()) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  }
  return a1;
}

uint64_t static ReplayData.kProductIdKey.getter()
{
  uint64_t v1 = *(void *)ReplayData.kProductIdKey.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t variable initialization expression of ReplayData.productId()
{
  return 0;
}

uint64_t key path getter for ReplayData.productId : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  *(void *)a2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 184))(v2);
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.productId : ReplayData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, void))(*(void *)v4 + 192))(v3, v5 & 1);
  return swift_release();
}

uint64_t ReplayData.productId.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.productId.setter(uint64_t a1, char a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.productId.modify())()
{
  return ReplayData.productId.modify;
}

uint64_t ReplayData.productId.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateCase()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateCase : ReplayData@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 208))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateCase : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 216))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateCase.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 25);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateCase.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 25) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateCase.modify())()
{
  return ReplayData.batteryStateCase.modify;
}

uint64_t ReplayData.batteryStateCase.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateLeft()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateLeft : ReplayData@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 232))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateLeft : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 240))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateLeft.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 26);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateLeft.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 26) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateLeft.modify())()
{
  return ReplayData.batteryStateLeft.modify;
}

uint64_t ReplayData.batteryStateLeft.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateRight()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateRight : ReplayData@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateRight : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 264))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateRight.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 27);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateRight.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 27) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateRight.modify())()
{
  return ReplayData.batteryStateRight.modify;
}

uint64_t ReplayData.batteryStateRight.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateMain()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateMain : ReplayData@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 280))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateMain : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 288))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateMain.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 28);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateMain.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 28) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateMain.modify())()
{
  return ReplayData.batteryStateMain.modify;
}

uint64_t ReplayData.batteryStateMain.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelCase()
{
  LODWORD(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
  BYTE4(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelCase : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 304))(v2);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelCase : ReplayData(int *a1, uint64_t *a2)
{
  int v4 = *a1;
  char v5 = *((unsigned char *)a1 + 4);
  uint64_t v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(void *)v3 + 312))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelCase.getter()
{
  swift_beginAccess();
  int v2 = *(_DWORD *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 36);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelCase.setter(uint64_t a1)
{
  int v3 = a1;
  char v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 32) = v3;
  *(unsigned char *)(v1 + 36) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelCase.modify())()
{
  return ReplayData.batteryLevelCase.modify;
}

uint64_t ReplayData.batteryLevelCase.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelLeft()
{
  LODWORD(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
  BYTE4(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelLeft : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 328))(v2);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelLeft : ReplayData(int *a1, uint64_t *a2)
{
  int v4 = *a1;
  char v5 = *((unsigned char *)a1 + 4);
  uint64_t v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(void *)v3 + 336))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelLeft.getter()
{
  swift_beginAccess();
  int v2 = *(_DWORD *)(v0 + 40);
  char v3 = *(unsigned char *)(v0 + 44);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelLeft.setter(uint64_t a1)
{
  int v3 = a1;
  char v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 40) = v3;
  *(unsigned char *)(v1 + 44) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelLeft.modify())()
{
  return ReplayData.batteryLevelLeft.modify;
}

uint64_t ReplayData.batteryLevelLeft.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelRight()
{
  LODWORD(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
  BYTE4(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelRight : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 352))(v2);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelRight : ReplayData(int *a1, uint64_t *a2)
{
  int v4 = *a1;
  char v5 = *((unsigned char *)a1 + 4);
  uint64_t v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(void *)v3 + 360))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelRight.getter()
{
  swift_beginAccess();
  int v2 = *(_DWORD *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 52);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelRight.setter(uint64_t a1)
{
  int v3 = a1;
  char v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 52) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelRight.modify())()
{
  return ReplayData.batteryLevelRight.modify;
}

uint64_t ReplayData.batteryLevelRight.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelMain()
{
  LODWORD(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
  BYTE4(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelMain : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 376))(v2);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelMain : ReplayData(int *a1, uint64_t *a2)
{
  int v4 = *a1;
  char v5 = *((unsigned char *)a1 + 4);
  uint64_t v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(void *)v3 + 384))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelMain.getter()
{
  swift_beginAccess();
  int v2 = *(_DWORD *)(v0 + 56);
  char v3 = *(unsigned char *)(v0 + 60);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelMain.setter(uint64_t a1)
{
  int v3 = a1;
  char v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 56) = v3;
  *(unsigned char *)(v1 + 60) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelMain.modify())()
{
  return ReplayData.batteryLevelMain.modify;
}

uint64_t ReplayData.batteryLevelMain.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.deviceName()
{
  return 0;
}

uint64_t key path getter for ReplayData.deviceName : ReplayData@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 400))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for ReplayData.deviceName : ReplayData(void *a1, uint64_t *a2)
{
  outlined init with copy of String?(a1, v7);
  uint64_t v4 = v7[0];
  uint64_t v6 = v7[1];
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 408))(v4, v6);
  return swift_release();
}

uint64_t ReplayData.deviceName.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.deviceName.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplayData.deviceName.modify())()
{
  return ReplayData.deviceName.modify;
}

uint64_t ReplayData.deviceName.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.deviceColor()
{
  LODWORD(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
  BYTE4(vString.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.deviceColor : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 424))(v2);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.deviceColor : ReplayData(int *a1, uint64_t *a2)
{
  int v4 = *a1;
  char v5 = *((unsigned char *)a1 + 4);
  uint64_t v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(void *)v3 + 432))(v6);
  return swift_release();
}

uint64_t ReplayData.deviceColor.getter()
{
  swift_beginAccess();
  int v2 = *(_DWORD *)(v0 + 80);
  char v3 = *(unsigned char *)(v0 + 84);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.deviceColor.setter(uint64_t a1)
{
  int v3 = a1;
  char v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 80) = v3;
  *(unsigned char *)(v1 + 84) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.deviceColor.modify())()
{
  return ReplayData.deviceColor.modify;
}

uint64_t ReplayData.deviceColor.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.randomHexAddress@<X0>(uint64_t a1@<X8>)
{
  UUID.init()();
  uint64_t v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(a1, 0, 1);
}

uint64_t key path getter for ReplayData.randomHexAddress : ReplayData@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = a2;
  uint64_t v6 = a1;
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = (char *)&v5 - v7;
  uint64_t v8 = *(void *)MEMORY[0x270FA5388](v6, v2);
  uint64_t v3 = swift_retain();
  uint64_t v12 = v8;
  uint64_t v11 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 448))(v3);
  outlined init with take of UUID?(v9, v10);
  return swift_release();
}

uint64_t key path setter for ReplayData.randomHexAddress : ReplayData(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = a1;
  uint64_t v8 = a2;
  unint64_t v7 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (const void *)MEMORY[0x270FA5388](v6, v2);
  uint64_t v9 = (char *)&v5 - v7;
  outlined init with copy of UUID?(v3, (char *)&v5 - v7);
  uint64_t v10 = *v8;
  swift_retain();
  uint64_t v12 = v10;
  uint64_t v11 = v10;
  (*(void (**)(char *))(*(void *)v10 + 456))(v9);
  return swift_release();
}

uint64_t ReplayData.randomHexAddress.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
  swift_beginAccess();
  outlined init with copy of UUID?(v3, a1);
  return swift_endAccess();
}

uint64_t ReplayData.randomHexAddress.setter(uint64_t a1)
{
  uint64_t v8 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  unint64_t v4 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (char *)&v4 - v4;
  uint64_t v11 = (const void *)MEMORY[0x270FA5388](v8, v2);
  uint64_t v10 = v1;
  outlined init with copy of UUID?(v11, (char *)&v4 - v4);
  uint64_t v6 = (void *)(v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
  unint64_t v7 = &v9;
  swift_beginAccess();
  outlined assign with take of UUID?(v5, v6);
  swift_endAccess();
  return outlined destroy of UUID?(v8);
}

void *outlined assign with take of UUID?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  char v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t (*ReplayData.randomHexAddress.modify())()
{
  return ReplayData.randomHexAddress.modify;
}

uint64_t ReplayData.randomHexAddress.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of ReplayData.listeners@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v6[1] = a1;
  swift_bridgeObjectRetain();
  v6[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AnyCancellable>);
  CodableIgnored.init(wrappedValue:)(v6, v2, a2);
  return swift_bridgeObjectRelease();
}

uint64_t ReplayData.listeners.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t ReplayData.listeners.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplayData.listeners.modify())()
{
  return ReplayData.listeners.modify;
}

uint64_t ReplayData.listeners.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData._listeners()
{
  return Set.init()();
}

uint64_t ReplayData.__allocating_init()()
{
  return ReplayData.init()();
}

uint64_t ReplayData.init()()
{
  uint64_t v8 = v0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(unsigned char *)(v0 + 25) = 2;
  *(unsigned char *)(v0 + 26) = 2;
  *(unsigned char *)(v0 + 27) = 2;
  *(unsigned char *)(v0 + 28) = 2;
  *(_DWORD *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 36) = 1;
  *(_DWORD *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 44) = 1;
  *(_DWORD *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 52) = 1;
  *(_DWORD *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 60) = 1;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  *(_DWORD *)(v0 + 80) = 0;
  *(unsigned char *)(v0 + 84) = 1;
  uint64_t v4 = v0 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress;
  UUID.init()();
  uint64_t v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 56))(v4, 0, 1);
  uint64_t v5 = OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  uint64_t v2 = Set.init()();
  property wrapper backing initializer of ReplayData.listeners(v2, &v7);
  uint64_t result = v6;
  *(void *)(v6 + v5) = v7;
  return result;
}

BOOL static ReplayData.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = 1;
      break;
    case 2:
      uint64_t v4 = 2;
      break;
    case 3:
      uint64_t v4 = 3;
      break;
    case 4:
      uint64_t v4 = 4;
      break;
    case 5:
      uint64_t v4 = 5;
      break;
    case 6:
      uint64_t v4 = 6;
      break;
    case 7:
      uint64_t v4 = 7;
      break;
    case 8:
      uint64_t v4 = 8;
      break;
    case 9:
      uint64_t v4 = 9;
      break;
    case 10:
      uint64_t v4 = 10;
      break;
    case 11:
      uint64_t v4 = 11;
      break;
    case 12:
      uint64_t v4 = 12;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 1;
      break;
    case 2:
      uint64_t v3 = 2;
      break;
    case 3:
      uint64_t v3 = 3;
      break;
    case 4:
      uint64_t v3 = 4;
      break;
    case 5:
      uint64_t v3 = 5;
      break;
    case 6:
      uint64_t v3 = 6;
      break;
    case 7:
      uint64_t v3 = 7;
      break;
    case 8:
      uint64_t v3 = 8;
      break;
    case 9:
      uint64_t v3 = 9;
      break;
    case 10:
      uint64_t v3 = 10;
      break;
    case 11:
      uint64_t v3 = 11;
      break;
    case 12:
      uint64_t v3 = 12;
      break;
    default:
      uint64_t v3 = 0;
      break;
  }
  return v4 == v3;
}

uint64_t ReplayData.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ReplayData.CodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("productId", 9uLL, 1);
  swift_bridgeObjectRetain();
  char v14 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 0;
LABEL_28:
    swift_bridgeObjectRelease();
    return v15;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateCase", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  char v13 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 1;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateLeft", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  char v12 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 2;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateRight", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  char v11 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 3;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateMain", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  char v10 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 4;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelCase", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  char v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 5;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelLeft", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 6;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelRight", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  char v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 7;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelMain", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  char v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 8;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceName", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 9;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceColor", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  char v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 10;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("randomHexAddress", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  char v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 11;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("listeners", 9uLL, 1);
  swift_bridgeObjectRetain();
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = 12;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 13;
}

uint64_t ReplayData.CodingKeys.init(intValue:)()
{
  return 13;
}

uint64_t ReplayData.CodingKeys.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return WitnessTable;
  }
  return v2;
}

uint64_t ReplayData.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ReplayData.CodingKeys.stringValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateCase", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateLeft", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateRight", 0x11uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateMain", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelCase", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelLeft", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 7:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelRight", 0x11uLL, 1)._countAndFlagsBits;
      break;
    case 8:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelMain", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 9:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceName", 0xAuLL, 1)._countAndFlagsBits;
      break;
    case 10:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceColor", 0xBuLL, 1)._countAndFlagsBits;
      break;
    case 11:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("randomHexAddress", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 12:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("listeners", 9uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("productId", 9uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ReplayData.CodingKeys(char *a1, char *a2)
{
  return static ReplayData.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReplayData.CodingKeys()
{
  return ReplayData.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReplayData.CodingKeys()
{
  return ReplayData.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReplayData.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReplayData.CodingKeys()
{
  return ReplayData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReplayData.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ReplayData.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ReplayData.CodingKeys()
{
  return ReplayData.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ReplayData.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ReplayData.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReplayData.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReplayData.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t ReplayData.deinit()
{
  outlined destroy of String?();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
  outlined destroy of CodableIgnored<Set<AnyCancellable>>();
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CodableIgnored<Set<AnyCancellable>>()
{
}

uint64_t ReplayData.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ReplayData.encode(to:)(uint64_t a1)
{
  uint64_t v93 = (uint64_t *)v126;
  uint64_t v94 = a1;
  uint64_t v128 = 0;
  uint64_t v127 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  unint64_t v91 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v3);
  uint64_t v92 = (uint64_t)v45 - v91;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReplayData.CodingKeys>);
  uint64_t v95 = *(void *)(v102 - 8);
  uint64_t v96 = v102 - 8;
  unint64_t v97 = (*(void *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  char v5 = (void *)MEMORY[0x270FA5388](v94, v4);
  uint64_t v101 = (char *)v45 - v97;
  *(void *)(v6 + 48) = v5;
  *(void *)(v6 + 40) = v1;
  uint64_t v98 = v5[3];
  uint64_t v99 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v98);
  lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
  uint64_t v7 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(void *)v100 + 184))(v7);
  uint64_t v8 = v103;
  v126[39] = 0;
  uint64_t v9 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v104 = v8;
  uint64_t v105 = v8;
  if (v8)
  {
    uint64_t v56 = v105;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
    uint64_t v57 = v56;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v100 + 208))(v9);
    uint64_t v10 = v104;
    v126[38] = 1;
    uint64_t v11 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v89 = v10;
    uint64_t v90 = v10;
    if (v10)
    {
      uint64_t v55 = v90;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
      uint64_t v57 = v55;
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)v100 + 232))(v11);
      uint64_t v12 = v89;
      v126[37] = 2;
      uint64_t v13 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      uint64_t v87 = v12;
      uint64_t v88 = v12;
      if (v12)
      {
        uint64_t v54 = v88;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
        uint64_t v57 = v54;
      }
      else
      {
        (*(void (**)(uint64_t))(*(void *)v100 + 256))(v13);
        uint64_t v14 = v87;
        v126[36] = 3;
        uint64_t v15 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
        uint64_t v85 = v14;
        uint64_t v86 = v14;
        if (v14)
        {
          uint64_t v53 = v86;
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
          uint64_t v57 = v53;
        }
        else
        {
          (*(void (**)(uint64_t))(*(void *)v100 + 280))(v15);
          uint64_t v16 = v85;
          v126[35] = 4;
          uint64_t v17 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
          uint64_t v83 = v16;
          uint64_t v84 = v16;
          if (v16)
          {
            uint64_t v52 = v84;
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
            uint64_t v57 = v52;
          }
          else
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 304))(v17);
            uint64_t v19 = v93;
            uint64_t v20 = v83;
            v93[3] = v18;
            int v21 = *((_DWORD *)v19 + 6);
            char v22 = v126[28];
            v126[23] = 5;
            *((_DWORD *)v19 + 2) = v21;
            v126[12] = v22 & 1;
            uint64_t v23 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
            uint64_t v81 = v20;
            uint64_t v82 = v20;
            if (v20)
            {
              uint64_t v51 = v82;
              uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
              uint64_t v57 = v51;
            }
            else
            {
              uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 328))(v23);
              uint64_t v25 = v93;
              uint64_t v26 = v81;
              *uint64_t v93 = v24;
              int v27 = *(_DWORD *)v25;
              char v125 = 6;
              int v123 = v27;
              char v124 = v126[4] & 1;
              uint64_t v28 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
              uint64_t v79 = v26;
              uint64_t v80 = v26;
              if (v26)
              {
                uint64_t v50 = v80;
                uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
                uint64_t v57 = v50;
              }
              else
              {
                uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 352))(v28);
                uint64_t v30 = v79;
                uint64_t v122 = v29;
                char v121 = 7;
                int v119 = v29;
                char v120 = BYTE4(v29) & 1;
                uint64_t v31 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                uint64_t v77 = v30;
                uint64_t v78 = v30;
                if (v30)
                {
                  uint64_t v49 = v78;
                  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
                  uint64_t v57 = v49;
                }
                else
                {
                  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 376))(v31);
                  uint64_t v33 = v77;
                  uint64_t v118 = v32;
                  char v117 = 8;
                  int v115 = v32;
                  char v116 = BYTE4(v32) & 1;
                  uint64_t v34 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                  uint64_t v75 = v33;
                  uint64_t v76 = v33;
                  if (v33)
                  {
                    uint64_t v48 = v76;
                    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
                    uint64_t v57 = v48;
                  }
                  else
                  {
                    (*(void (**)(uint64_t))(*(void *)v100 + 400))(v34);
                    uint64_t v35 = v75;
                    uint64_t v72 = v36;
                    char v114 = 9;
                    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                    uint64_t v73 = v35;
                    uint64_t v74 = v35;
                    if (v35)
                    {
                      uint64_t v47 = v74;
                      swift_bridgeObjectRelease();
                      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
                      uint64_t v57 = v47;
                    }
                    else
                    {
                      uint64_t v37 = v100;
                      uint64_t v38 = swift_bridgeObjectRelease();
                      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 424))(v38);
                      uint64_t v40 = v73;
                      uint64_t v113 = v39;
                      char v112 = 10;
                      int v110 = v39;
                      char v111 = BYTE4(v39) & 1;
                      uint64_t v41 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                      uint64_t v70 = v40;
                      uint64_t v71 = v40;
                      if (v40)
                      {
                        uint64_t v46 = v71;
                        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
                        uint64_t v57 = v46;
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(void *)v100 + 448))(v41);
                        Swift::String v66 = &v109;
                        char v109 = 11;
                        uint64_t v67 = type metadata accessor for UUID();
                        lazy protocol witness table accessor for type UUID and conformance UUID();
                        uint64_t v42 = v70;
                        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
                        uint64_t v68 = v42;
                        uint64_t v69 = v42;
                        if (v42)
                        {
                          v45[2] = v69;
                          outlined destroy of UUID?(v92);
                          return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
                        }
                        else
                        {
                          outlined destroy of UUID?(v92);
                          uint64_t v58 = (uint64_t *)(v100 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
                          uint64_t v59 = &v108;
                          swift_beginAccess();
                          uint64_t v60 = *v58;
                          swift_bridgeObjectRetain();
                          swift_endAccess();
                          uint64_t v63 = &v107;
                          uint64_t v107 = v60;
                          uint64_t v61 = &v106;
                          char v106 = 12;
                          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
                          lazy protocol witness table accessor for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>();
                          uint64_t v43 = v68;
                          KeyedEncodingContainer.encode<A>(_:forKey:)();
                          uint64_t v64 = v43;
                          uint64_t v65 = v43;
                          if (v43) {
                            v45[1] = v65;
                          }
                          outlined destroy of CodableIgnored<Set<AnyCancellable>>();
                          return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v101, v102);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0) {
    return (void *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>;
  if (!lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>;
  if (!lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t ReplayData.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ReplayData and conformance ReplayData()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    type metadata accessor for ReplayData();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    type metadata accessor for ReplayData();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    type metadata accessor for ReplayData();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    type metadata accessor for ReplayData();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    type metadata accessor for ReplayData();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return WitnessTable;
  }
  return v2;
}

uint64_t ReplayData.__allocating_init(from:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v5 = ReplayData.init(from:)(a1);
  if (v3) {
    return v2;
  }
  else {
    return v5;
  }
}

uint64_t ReplayData.init(from:)(uint64_t a1)
{
  uint64_t v159 = (void *)a1;
  uint64_t v190 = 0;
  uint64_t v189 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  unint64_t v146 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v3);
  unint64_t v147 = (char *)v49 - v146;
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReplayData.CodingKeys>);
  uint64_t v149 = *(void *)(v148 - 8);
  uint64_t v150 = v148 - 8;
  unint64_t v151 = (*(void *)(v149 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v159, v4);
  unint64_t v160 = (char *)v49 - v151;
  uint64_t v190 = v5;
  uint64_t v189 = v1;
  uint64_t v156 = 0;
  *(void *)(v1 + 16) = 0;
  unsigned int v152 = 1;
  *(unsigned char *)(v1 + 24) = 1;
  *(unsigned char *)(v1 + 25) = 2;
  *(unsigned char *)(v1 + 26) = 2;
  *(unsigned char *)(v1 + 27) = 2;
  *(unsigned char *)(v1 + 28) = 2;
  unsigned int v153 = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 36) = 1;
  *(_DWORD *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 44) = 1;
  *(_DWORD *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 52) = 1;
  *(_DWORD *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 60) = 1;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = 0;
  *(unsigned char *)(v1 + 84) = 1;
  uint64_t v154 = v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress;
  UUID.init()();
  uint64_t v155 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, void, void))(*(void *)(v155 - 8) + 56))(v154, v153, v152);
  uint64_t v158 = OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners;
  uint64_t v157 = type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  uint64_t v6 = Set.init()();
  property wrapper backing initializer of ReplayData.listeners(v6, &v188);
  uint64_t v7 = v159;
  *(void *)(v1 + v158) = v188;
  uint64_t v162 = v7[3];
  uint64_t v163 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v162);
  lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
  uint64_t v8 = v161;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v164 = v8;
  uint64_t v165 = v8;
  if (v8)
  {
    uint64_t v62 = v165;
  }
  else
  {
    v187[31] = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v141 = 0;
    uint64_t v142 = v9;
    int v143 = v10;
    uint64_t v144 = 0;
    int v135 = v10;
    uint64_t v134 = v9;
    uint64_t v136 = v187;
    swift_beginAccess();
    char v11 = v135;
    uint64_t v12 = v145;
    *(void *)(v145 + 16) = v134;
    int v137 = 1;
    *(unsigned char *)(v12 + 24) = v11 & 1;
    swift_endAccess();
    uint64_t v13 = v141;
    v186[31] = v137;
    int v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v138 = v13;
    int v139 = v14;
    uint64_t v140 = v13;
    if (v13)
    {
      uint64_t v61 = v140;
      (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
      uint64_t v62 = v61;
    }
    else
    {
      int v129 = v139;
      uint64_t v130 = v186;
      swift_beginAccess();
      *(unsigned char *)(v145 + 25) = v129;
      swift_endAccess();
      uint64_t v15 = v138;
      v185[31] = 2;
      int v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v131 = v15;
      int v132 = v16;
      uint64_t v133 = v15;
      if (v15)
      {
        uint64_t v60 = v133;
        (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
        uint64_t v62 = v60;
      }
      else
      {
        int v124 = v132;
        char v125 = v185;
        swift_beginAccess();
        *(unsigned char *)(v145 + 26) = v124;
        swift_endAccess();
        uint64_t v17 = v131;
        v184[31] = 3;
        int v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        uint64_t v126 = v17;
        int v127 = v18;
        uint64_t v128 = v17;
        if (v17)
        {
          uint64_t v59 = v128;
          (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
          uint64_t v62 = v59;
        }
        else
        {
          int v119 = v127;
          char v120 = v184;
          swift_beginAccess();
          *(unsigned char *)(v145 + 27) = v119;
          swift_endAccess();
          uint64_t v19 = v126;
          v183[31] = 4;
          int v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          uint64_t v121 = v19;
          int v122 = v20;
          uint64_t v123 = v19;
          if (v19)
          {
            uint64_t v58 = v123;
            (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
            uint64_t v62 = v58;
          }
          else
          {
            int v113 = v122;
            char v114 = v183;
            swift_beginAccess();
            *(unsigned char *)(v145 + 28) = v113;
            swift_endAccess();
            uint64_t v21 = v121;
            char v182 = 5;
            uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
            uint64_t v115 = v21;
            uint64_t v181 = v22;
            int v116 = v22;
            int v117 = BYTE4(v22);
            uint64_t v118 = v21;
            if (v21)
            {
              uint64_t v57 = v118;
              (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
              uint64_t v62 = v57;
            }
            else
            {
              int v107 = v117;
              int v106 = v116;
              char v108 = &v180;
              swift_beginAccess();
              char v23 = v107;
              uint64_t v24 = v145;
              *(_DWORD *)(v145 + 32) = v106;
              *(unsigned char *)(v24 + 36) = v23 & 1;
              swift_endAccess();
              uint64_t v25 = v115;
              char v179 = 6;
              uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              uint64_t v109 = v25;
              v178[3] = v26;
              int v110 = v26;
              int v111 = BYTE4(v26);
              uint64_t v112 = v25;
              if (v25)
              {
                uint64_t v56 = v112;
                (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                uint64_t v62 = v56;
              }
              else
              {
                int v100 = v111;
                int v99 = v110;
                uint64_t v101 = v178;
                swift_beginAccess();
                char v27 = v100;
                uint64_t v28 = v145;
                *(_DWORD *)(v145 + 40) = v99;
                *(unsigned char *)(v28 + 44) = v27 & 1;
                swift_endAccess();
                uint64_t v29 = v109;
                char v177 = 7;
                uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                uint64_t v102 = v29;
                v176[3] = v30;
                int v103 = v30;
                int v104 = BYTE4(v30);
                uint64_t v105 = v29;
                if (v29)
                {
                  uint64_t v55 = v105;
                  (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                  uint64_t v62 = v55;
                }
                else
                {
                  int v93 = v104;
                  int v92 = v103;
                  uint64_t v94 = v176;
                  swift_beginAccess();
                  char v31 = v93;
                  uint64_t v32 = v145;
                  *(_DWORD *)(v145 + 48) = v92;
                  *(unsigned char *)(v32 + 52) = v31 & 1;
                  swift_endAccess();
                  uint64_t v33 = v102;
                  char v175 = 8;
                  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                  uint64_t v95 = v33;
                  v174[3] = v34;
                  int v96 = v34;
                  int v97 = BYTE4(v34);
                  uint64_t v98 = v33;
                  if (v33)
                  {
                    uint64_t v54 = v98;
                    (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                    uint64_t v62 = v54;
                  }
                  else
                  {
                    int v86 = v97;
                    int v85 = v96;
                    uint64_t v87 = v174;
                    swift_beginAccess();
                    char v35 = v86;
                    uint64_t v36 = v145;
                    *(_DWORD *)(v145 + 56) = v85;
                    *(unsigned char *)(v36 + 60) = v35 & 1;
                    swift_endAccess();
                    uint64_t v37 = v95;
                    v173[31] = 9;
                    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                    uint64_t v88 = v37;
                    uint64_t v89 = v38;
                    uint64_t v90 = v39;
                    uint64_t v91 = v37;
                    if (v37)
                    {
                      uint64_t v53 = v91;
                      (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                      uint64_t v62 = v53;
                    }
                    else
                    {
                      uint64_t v79 = v90;
                      uint64_t v78 = v89;
                      uint64_t v80 = v173;
                      swift_beginAccess();
                      uint64_t v40 = v145;
                      uint64_t v41 = v79;
                      *(void *)(v145 + 64) = v78;
                      *(void *)(v40 + 72) = v41;
                      swift_bridgeObjectRelease();
                      swift_endAccess();
                      uint64_t v42 = v88;
                      char v172 = 10;
                      uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                      uint64_t v81 = v42;
                      v171[3] = v43;
                      int v82 = v43;
                      int v83 = BYTE4(v43);
                      uint64_t v84 = v42;
                      if (v42)
                      {
                        uint64_t v52 = v84;
                        (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                        uint64_t v62 = v52;
                      }
                      else
                      {
                        int v73 = v83;
                        int v72 = v82;
                        uint64_t v74 = v171;
                        swift_beginAccess();
                        char v44 = v73;
                        uint64_t v45 = v145;
                        *(_DWORD *)(v145 + 80) = v72;
                        *(unsigned char *)(v45 + 84) = v44 & 1;
                        swift_endAccess();
                        uint64_t v75 = &v170;
                        char v170 = 11;
                        lazy protocol witness table accessor for type UUID and conformance UUID();
                        uint64_t v46 = v81;
                        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                        uint64_t v76 = v46;
                        uint64_t v77 = v46;
                        if (v46)
                        {
                          uint64_t v51 = v77;
                          (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                          uint64_t v62 = v51;
                        }
                        else
                        {
                          Swift::String v66 = (void *)(v145 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
                          uint64_t v67 = &v169;
                          swift_beginAccess();
                          outlined assign with take of UUID?(v147, v66);
                          swift_endAccess();
                          uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
                          uint64_t v68 = &v167;
                          char v167 = 12;
                          lazy protocol witness table accessor for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>();
                          uint64_t v47 = v76;
                          KeyedDecodingContainer.decode<A>(_:forKey:)();
                          uint64_t v70 = v47;
                          uint64_t v71 = v47;
                          if (!v47)
                          {
                            uint64_t v64 = v168;
                            uint64_t v63 = (void *)(v145 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
                            uint64_t v65 = &v166;
                            swift_beginAccess();
                            void *v63 = v64;
                            swift_bridgeObjectRelease();
                            swift_endAccess();
                            (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
                            return v145;
                          }
                          uint64_t v50 = v71;
                          (*(void (**)(char *, uint64_t))(v149 + 8))(v160, v148);
                          uint64_t v62 = v50;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v49[1] = v62;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
  return v49[2];
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.productId.getter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.productId.setter in conformance ReplayData(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(**(void **)v2 + 192))(a1, a2 & 1);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.productId.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 200))();
  return protocol witness for HeadphoneDeviceDataReplayable.productId.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.productId.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.getter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.setter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 224))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.getter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.setter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 248))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.getter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.setter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 272))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.getter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.setter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 296))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.getter in conformance ReplayData()
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v0 + 304))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.setter in conformance ReplayData(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(void **)v1 + 312))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 320))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.getter in conformance ReplayData()
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v0 + 328))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.setter in conformance ReplayData(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(void **)v1 + 336))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 344))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.getter in conformance ReplayData()
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v0 + 352))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.setter in conformance ReplayData(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(void **)v1 + 360))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 368))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.getter in conformance ReplayData()
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v0 + 376))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.setter in conformance ReplayData(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(void **)v1 + 384))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 392))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.deviceColor.getter in conformance ReplayData()
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v0 + 424))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.deviceColor.setter in conformance ReplayData(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(void **)v1 + 432))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.deviceColor.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 440))();
  return protocol witness for HeadphoneDeviceDataReplayable.deviceColor.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.deviceColor.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.getter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 448))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.setter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 456))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.modify in conformance ReplayData(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 464))();
  return protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.modify in conformance ReplayData(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReplayData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 520))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 504))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReplayData(uint64_t a1)
{
  unint64_t WitnessTable = (void (**)(void))swift_getWitnessTable();
  return HeadphoneDeviceDataReplayable.description.getter(a1, WitnessTable);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReplayData()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 512))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReplayData(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return HeadphoneDeviceDataReplayable.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReplayData(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReplayData(uint64_t *a1, uint64_t *a2)
{
  return static ReplayData.== infix(_:_:)(*a1, *a2) & 1;
}

unint64_t instantiation function for generic protocol witness table for ReplayData(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  a1[2] = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  a1[3] = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  unint64_t result = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  a1[4] = result;
  return result;
}

unint64_t base witness table accessor for Equatable in ReplayData()
{
  return lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.productId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.productId.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 48))(a1, a2 & 1);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.productId.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateCase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateCase.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateCase.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateLeft.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateLeft.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateLeft.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateRight.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateRight.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateRight.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateMain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateMain.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateMain.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelCase.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 160))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelCase.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 168))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelCase.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelLeft.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 184))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelLeft.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 192))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelLeft.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelRight.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 208))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelRight.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 216))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelRight.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelMain.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 232))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelMain.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 240))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelMain.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 248))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.deviceColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 256))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.deviceColor.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 264))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.deviceColor.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 272))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.randomHexAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.randomHexAddress.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 288))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.randomHexAddress.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 296))();
}

uint64_t ObjC metadata update function for ReplayData()
{
  return type metadata accessor for ReplayData();
}

uint64_t method lookup function for ReplayData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplayData.productId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ReplayData.productId.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 192))(a1, a2 & 1);
}

uint64_t dispatch thunk of ReplayData.productId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ReplayData.batteryStateCase.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ReplayData.batteryStateCase.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ReplayData.batteryStateCase.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of ReplayData.batteryStateLeft.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ReplayData.batteryStateLeft.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ReplayData.batteryStateLeft.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of ReplayData.batteryStateRight.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ReplayData.batteryStateRight.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ReplayData.batteryStateRight.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of ReplayData.batteryStateMain.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of ReplayData.batteryStateMain.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of ReplayData.batteryStateMain.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelCase.getter()
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v0 + 304))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelCase.setter(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 312))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelCase.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelLeft.getter()
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v0 + 328))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelLeft.setter(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelLeft.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelRight.getter()
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v0 + 352))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelRight.setter(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 360))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelRight.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelMain.getter()
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v0 + 376))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelMain.setter(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelMain.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of ReplayData.deviceName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of ReplayData.deviceName.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of ReplayData.deviceName.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of ReplayData.deviceColor.getter()
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v0 + 424))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.deviceColor.setter(uint64_t a1)
{
  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 432))(v3);
}

uint64_t dispatch thunk of ReplayData.deviceColor.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of ReplayData.randomHexAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of ReplayData.randomHexAddress.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of ReplayData.randomHexAddress.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of ReplayData.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of ReplayData.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of ReplayData.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of ReplayData.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t getEnumTagSinglePayload for ReplayData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF3) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 12) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 243;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 13;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplayData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF3)
  {
    unsigned int v5 = ((a3 + 12) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF3)
  {
    unsigned int v4 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
      }
    }
    if (a2) {
      *unint64_t result = a2 + 12;
    }
  }
  return result;
}

uint64_t getEnumTag for ReplayData.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ReplayData.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReplayData.CodingKeys()
{
  return &type metadata for ReplayData.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in ReplayData.CodingKeys()
{
  return lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in ReplayData.CodingKeys()
{
  return lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
}

unint64_t base witness table accessor for Equatable in ReplayData.CodingKeys()
{
  return lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
}

void *outlined init with take of UUID?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

BOOL static HearingRecordPropertyRemoteSendState.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  switch(*a1)
  {
    case 1:
      uint64_t v4 = 1;
      break;
    case 2:
      uint64_t v4 = 2;
      break;
    case 3:
      uint64_t v4 = 3;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  switch(*a2)
  {
    case 1:
      uint64_t v3 = 1;
      break;
    case 2:
      uint64_t v3 = 2;
      break;
    case 3:
      uint64_t v3 = 3;
      break;
    default:
      uint64_t v3 = 0;
      break;
  }
  return v4 == v3;
}

uint64_t HearingRecordPropertyRemoteSendState.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HearingRecordPropertyRemoteSendState.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState);
    return WitnessTable;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HearingRecordPropertyRemoteSendState(unsigned char *a1, unsigned char *a2)
{
  return static HearingRecordPropertyRemoteSendState.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HearingRecordPropertyRemoteSendState()
{
  return HearingRecordPropertyRemoteSendState.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HearingRecordPropertyRemoteSendState()
{
  return HearingRecordPropertyRemoteSendState.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HearingRecordPropertyRemoteSendState(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

unint64_t base witness table accessor for Equatable in HearingRecordPropertyRemoteSendState()
{
  return lazy protocol witness table accessor for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState();
}

uint64_t getEnumTagSinglePayload for HearingRecordPropertyRemoteSendState(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFC) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 3) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 4;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HearingRecordPropertyRemoteSendState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFC)
  {
    unsigned int v5 = ((a3 + 3) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFC)
  {
    unsigned int v4 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
      }
    }
    if (a2) {
      *unint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t getEnumTag for HearingRecordPropertyRemoteSendState(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for HearingRecordPropertyRemoteSendState(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HearingRecordPropertyRemoteSendState()
{
  return &type metadata for HearingRecordPropertyRemoteSendState;
}

uint64_t dispatch thunk of HMDeviceConfigurable.deviceRemoteSendState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of HMDeviceConfigurable.bluetoothUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HMDeviceConfigurable.deviceConfigFor<A>(keyPath:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t sub_250CB7E10()
{
  return swift_deallocObject();
}

void closure #1 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  uint64_t v57 = a1;
  uint64_t v67 = implicit closure #1 in closure #1 in Headphone_Manager.configHearingModeClient();
  uint64_t v68 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  int v72 = implicit closure #2 in closure #1 in Headphone_Manager.configHearingModeClient();
  uint64_t v75 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v104 = 0;
  uint64_t v56 = 0;
  uint64_t v62 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v62 - 8);
  uint64_t v61 = v62 - 8;
  unint64_t v58 = (*(void *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  int v2 = (char *)&v31 - v58;
  uint64_t v59 = (char *)&v31 - v58;
  uint64_t v104 = MEMORY[0x270FA5388](v57, v1) + 16;
  uint64_t v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v2, v3, v62);
  int v92 = Logger.logObject.getter();
  int v93 = static os_log_type_t.error.getter();
  uint64_t v65 = &v102;
  uint64_t v102 = 22;
  unint64_t v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v64 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v66 = v103;
  uint64_t v70 = 17;
  uint64_t v74 = 7;
  uint64_t v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 32;
  uint64_t v80 = swift_allocObject();
  int v71 = 8;
  *(unsigned char *)(v80 + 16) = 8;
  uint64_t v73 = 32;
  uint64_t v4 = swift_allocObject();
  uint64_t v69 = v4;
  *(void *)(v4 + 16) = v67;
  *(void *)(v4 + 24) = 0;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v69;
  uint64_t v82 = v5;
  *(void *)(v5 + 16) = v68;
  *(void *)(v5 + 24) = v6;
  uint64_t v84 = swift_allocObject();
  *(unsigned char *)(v84 + 16) = 0;
  uint64_t v86 = swift_allocObject();
  *(unsigned char *)(v86 + 16) = v71;
  uint64_t v7 = swift_allocObject();
  uint64_t v76 = v7;
  *(void *)(v7 + 16) = v72;
  *(void *)(v7 + 24) = 0;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v76;
  uint64_t v89 = v8;
  *(void *)(v8 + 16) = v75;
  *(void *)(v8 + 24) = v9;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v87 = _allocateUninitializedArray<A>(_:)();
  uint64_t v90 = v10;
  swift_retain();
  uint64_t v11 = v78;
  uint64_t v12 = v90;
  *uint64_t v90 = v77;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v80;
  int v14 = v90;
  v90[2] = v79;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
  int v16 = v90;
  v90[4] = v81;
  v16[5] = v15;
  swift_retain();
  uint64_t v17 = v84;
  int v18 = v90;
  v90[6] = v83;
  v18[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  swift_retain();
  uint64_t v19 = v86;
  int v20 = v90;
  v90[8] = v85;
  v20[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
  swift_retain();
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v89;
  uint64_t v22 = v90;
  v90[10] = v88;
  v22[11] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v92, (os_log_type_t)v93))
  {
    uint64_t v23 = v56;
    uint64_t v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v49 = createStorage<A>(capacity:type:)(0);
    uint64_t v50 = createStorage<A>(capacity:type:)(1);
    uint64_t v52 = &v98;
    uint64_t v98 = v48;
    uint64_t v53 = &v97;
    uint64_t v97 = v49;
    uint64_t v54 = &v96;
    uint64_t v96 = v50;
    unsigned int v51 = 2;
    serialize(_:at:)(2, &v98);
    serialize(_:at:)(v51, v52);
    uint64_t v94 = v77;
    uint64_t v95 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54);
    uint64_t v55 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      uint64_t v94 = v79;
      uint64_t v95 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
      uint64_t v46 = 0;
      uint64_t v24 = v46;
      uint64_t v94 = v81;
      uint64_t v95 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
      uint64_t v45 = v24;
      uint64_t v94 = v83;
      uint64_t v95 = v84;
      closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
      uint64_t v44 = 0;
      uint64_t v94 = v85;
      uint64_t v95 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
      uint64_t v43 = 0;
      uint64_t v94 = v88;
      uint64_t v95 = v89;
      closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
      _os_log_impl(&dword_250C36000, v92, (os_log_type_t)v93, "HeadphoneManager: %s: %ld hearing client interrupted! Retrying to standup discovery stack", v48, v66);
      destroyStorage<A>(_:count:)(v49, 0, v47);
      destroyStorage<A>(_:count:)(v50, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v48, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v62);
  uint64_t v42 = v57 + 16;
  swift_beginAccess();
  uint64_t v101 = (void *)MEMORY[0x253386C10](v42);
  if (v101)
  {
    uint64_t v38 = (id *)&v101;
    uint64_t v25 = v101;
    id v41 = v101;
    uint64_t v26 = v101;
    outlined destroy of Headphone_Manager?(v38);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, HMDeviceRecord));
    uint64_t v39 = 0;
    uint64_t v40 = _allocateUninitializedArray<A>(_:)();
    type metadata accessor for HMDeviceRecord();
    uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v25 & *MEMORY[0x263F8EED0]) + 0x158))(v27);
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v101);
    swift_endAccess();
  }
  uint64_t v37 = v57 + 16;
  swift_beginAccess();
  int v100 = (void *)MEMORY[0x253386C10](v37);
  if (v100)
  {
    char v35 = (id *)&v100;
    uint64_t v36 = v100;
    uint64_t v28 = v100;
    outlined destroy of Headphone_Manager?(v35);
    swift_endAccess();
    type metadata accessor for HMServiceClient();
    id v29 = HMServiceClient.__allocating_init()();
    (*(void (**)(id))((*v36 & *MEMORY[0x263F8EED0]) + 0x140))(v29);
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v100);
    swift_endAccess();
  }
  uint64_t v34 = v57 + 16;
  swift_beginAccess();
  id v99 = (id)MEMORY[0x253386C10](v34);
  if (v99)
  {
    uint64_t v32 = &v99;
    id v33 = v99;
    id v30 = v99;
    outlined destroy of Headphone_Manager?(v32);
    swift_endAccess();
    Headphone_Manager.configHearingModeClient()();
  }
  else
  {
    outlined destroy of Headphone_Manager?(&v99);
    swift_endAccess();
  }
}

void partial apply for closure #1 in Headphone_Manager.configHearingModeClient()()
{
  closure #1 in Headphone_Manager.configHearingModeClient()(v0);
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.configHearingModeClient()()
{
  return 16;
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void closure #2 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  uint64_t v48 = a1;
  unint64_t v58 = implicit closure #1 in closure #2 in Headphone_Manager.configHearingModeClient();
  uint64_t v59 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  unint64_t v63 = implicit closure #2 in closure #2 in Headphone_Manager.configHearingModeClient();
  uint32_t v66 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v93 = 0;
  uint64_t v47 = 0;
  uint64_t v53 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v53 - 8);
  uint64_t v52 = v53 - 8;
  unint64_t v49 = (*(void *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  int v2 = (char *)&v28 - v49;
  uint64_t v50 = (char *)&v28 - v49;
  uint64_t v93 = MEMORY[0x270FA5388](v48, v1) + 16;
  uint64_t v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v2, v3, v53);
  int v83 = Logger.logObject.getter();
  int v84 = static os_log_type_t.error.getter();
  uint64_t v56 = &v91;
  uint64_t v91 = 22;
  unint64_t v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v55 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v57 = v92;
  uint64_t v61 = 17;
  uint64_t v65 = 7;
  uint64_t v69 = swift_allocObject();
  *(unsigned char *)(v69 + 16) = 32;
  uint64_t v71 = swift_allocObject();
  int v62 = 8;
  *(unsigned char *)(v71 + 16) = 8;
  uint64_t v64 = 32;
  uint64_t v4 = swift_allocObject();
  uint64_t v60 = v4;
  *(void *)(v4 + 16) = v58;
  *(void *)(v4 + 24) = 0;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v60;
  uint64_t v73 = v5;
  *(void *)(v5 + 16) = v59;
  *(void *)(v5 + 24) = v6;
  uint64_t v75 = swift_allocObject();
  *(unsigned char *)(v75 + 16) = 0;
  uint64_t v77 = swift_allocObject();
  *(unsigned char *)(v77 + 16) = v62;
  uint64_t v7 = swift_allocObject();
  uint64_t v67 = v7;
  *(void *)(v7 + 16) = v63;
  *(void *)(v7 + 24) = 0;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v67;
  uint64_t v80 = v8;
  *(void *)(v8 + 16) = v66;
  *(void *)(v8 + 24) = v9;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v78 = _allocateUninitializedArray<A>(_:)();
  uint64_t v81 = v10;
  swift_retain();
  uint64_t v11 = v69;
  uint64_t v12 = v81;
  *uint64_t v81 = v68;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11;
  swift_retain();
  uint64_t v13 = v71;
  int v14 = v81;
  v81[2] = v70;
  v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  swift_retain();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v73;
  int v16 = v81;
  v81[4] = v72;
  v16[5] = v15;
  swift_retain();
  uint64_t v17 = v75;
  int v18 = v81;
  v81[6] = v74;
  v18[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  swift_retain();
  uint64_t v19 = v77;
  int v20 = v81;
  v81[8] = v76;
  v20[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
  swift_retain();
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v80;
  uint64_t v22 = v81;
  v81[10] = v79;
  v22[11] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v83, (os_log_type_t)v84))
  {
    uint64_t v23 = v47;
    uint64_t v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v40 = createStorage<A>(capacity:type:)(0);
    uint64_t v41 = createStorage<A>(capacity:type:)(1);
    uint64_t v43 = &v89;
    uint64_t v89 = v39;
    uint64_t v44 = &v88;
    uint64_t v88 = v40;
    uint64_t v45 = &v87;
    uint64_t v87 = v41;
    unsigned int v42 = 2;
    serialize(_:at:)(2, &v89);
    serialize(_:at:)(v42, v43);
    int v85 = v68;
    uint64_t v86 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)v43, (uint64_t)v44, (uint64_t)v45);
    uint64_t v46 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      int v85 = v70;
      uint64_t v86 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v89, (uint64_t)&v88, (uint64_t)&v87);
      uint64_t v37 = 0;
      uint64_t v24 = v37;
      int v85 = v72;
      uint64_t v86 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v89, (uint64_t)&v88, (uint64_t)&v87);
      uint64_t v36 = v24;
      int v85 = v74;
      uint64_t v86 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v89, (uint64_t)&v88, (uint64_t)&v87);
      uint64_t v35 = 0;
      int v85 = v76;
      uint64_t v86 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v89, (uint64_t)&v88, (uint64_t)&v87);
      uint64_t v34 = 0;
      int v85 = v79;
      uint64_t v86 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v89, (uint64_t)&v88, (uint64_t)&v87);
      _os_log_impl(&dword_250C36000, v83, (os_log_type_t)v84, "HeadphoneManager: %s: %ld hearing client invalidated! Retrying to standup discovery stack", v39, v57);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v39, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v53);
  uint64_t v33 = v48 + 16;
  swift_beginAccess();
  uint64_t v90 = (void *)MEMORY[0x253386C10](v33);
  if (v90)
  {
    id v29 = (id *)&v90;
    uint64_t v25 = v90;
    id v32 = v90;
    uint64_t v26 = v90;
    outlined destroy of Headphone_Manager?(v29);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, HMDeviceRecord));
    uint64_t v30 = 0;
    uint64_t v31 = _allocateUninitializedArray<A>(_:)();
    type metadata accessor for HMDeviceRecord();
    uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v25 & *MEMORY[0x263F8EED0]) + 0x158))(v27);
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v90);
    swift_endAccess();
  }
}

void partial apply for closure #2 in Headphone_Manager.configHearingModeClient()()
{
  closure #2 in Headphone_Manager.configHearingModeClient()(v0);
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

{
  return swift_release();
}

uint64_t implicit closure #1 in closure #2 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #2 in Headphone_Manager.configHearingModeClient()()
{
  return 24;
}

void closure #1 in closure #3 in Headphone_Manager.configHearingModeClient()(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v7 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((**a1 & *MEMORY[0x263F8EED0]) + 0x9F0))();
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t))((*v5 & *v7) + 0x520))(a2);

  uint64_t v8 = (void *)(*(uint64_t (**)(void))((*v4 & *v7) + 0x9F0))();
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t))((*v8 & *v7) + 0x550))(a3);
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t closure #4 in Headphone_Manager.configHearingModeClient()(void *a1, uint64_t a2)
{
  id v323 = a1;
  uint64_t v322 = a2;
  uint64_t v333 = 0;
  Swift::String v276 = implicit closure #6 in closure #4 in Headphone_Manager.configHearingModeClient();
  Swift::String v277 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  Swift::String v278 = implicit closure #7 in closure #4 in Headphone_Manager.configHearingModeClient();
  uint64_t v279 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  uint64_t v280 = partial apply for implicit closure #8 in closure #4 in Headphone_Manager.configHearingModeClient();
  unsigned __int8 v281 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
  char v282 = partial apply for implicit closure #9 in closure #4 in Headphone_Manager.configHearingModeClient();
  unsigned __int8 v283 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  id v284 = partial apply for implicit closure #10 in closure #4 in Headphone_Manager.configHearingModeClient();
  id v285 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v287 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v288 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v290 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v291 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v292 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v293 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unsigned __int8 v294 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  char v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unsigned __int8 v296 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v297 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v298 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v299 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Swift::String v301 = implicit closure #2 in closure #4 in Headphone_Manager.configHearingModeClient();
  Swift::String v302 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  Swift::String v303 = implicit closure #3 in closure #4 in Headphone_Manager.configHearingModeClient();
  uint64_t v304 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  v305 = partial apply for implicit closure #4 in closure #4 in Headphone_Manager.configHearingModeClient();
  unsigned __int8 v306 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  char v307 = partial apply for implicit closure #5 in closure #4 in Headphone_Manager.configHearingModeClient();
  uint64_t v308 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Builtin::Word v310 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v311 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v312 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v313 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v314 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v315 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v316 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v317 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v319 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v320 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v376 = 0;
  uint64_t v375 = 0;
  uint64_t v370 = 0;
  uint64_t v371 = 0;
  Swift::String v365 = (Swift::String)0;
  uint64_t v342 = 0;
  uint64_t v321 = 0;
  uint64_t v353 = 0;
  uint64_t v324 = type metadata accessor for Logger();
  uint64_t v325 = *(void *)(v324 - 8);
  uint64_t v326 = v324 - 8;
  unint64_t v327 = (*(void *)(v325 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v323, v322);
  uint64_t v328 = (char *)&v135 - v327;
  unint64_t v329 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (void *)MEMORY[0x270FA5388](v2, v4);
  unint64_t v330 = (char *)&v135 - v329;
  int v376 = v5;
  uint64_t v343 = v6 + 16;
  uint64_t v375 = v6 + 16;
  id v339 = objc_msgSend(v5, sel_bluetoothAddress);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v338 = v374;
  v374[0] = v7;
  v374[1] = v8;
  Builtin::Word v331 = 1;
  int v334 = 1;
  Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(":", 1uLL, 1);
  uint32_t v337 = &v373;
  Swift::String v373 = v9;
  Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", v331, v334 & 1);
  int v336 = &v372;
  Swift::String v372 = v10;
  unint64_t v332 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v335 = MEMORY[0x263F8D310];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v340 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v341 = v11;
  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();

  uint64_t v370 = v340;
  uint64_t v371 = v341;
  swift_beginAccess();
  BOOL v369 = (void *)MEMORY[0x253386C10](v343);
  if (v369)
  {
    v269 = (id *)&v369;
    uint64_t v12 = v369;
    id v271 = v369;
    uint64_t v13 = v369;
    outlined destroy of Headphone_Manager?(v269);
    swift_endAccess();
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v272 = (*(uint64_t (**)(uint64_t))((*v12 & *MEMORY[0x263F8EED0]) + 0x180))(v14);
    unsigned __int8 v270 = v344;
    v344[0] = v340;
    v344[1] = v341;
    uint64_t v15 = type metadata accessor for HeadphoneDevice();
    MEMORY[0x253385E50](&v345, v270, v272, MEMORY[0x263F8D310], v15, MEMORY[0x263F8D320]);
    outlined destroy of String();
    uint64_t v273 = v345;

    swift_bridgeObjectRelease();
    uint64_t v275 = v273;
  }
  else
  {
    uint64_t v274 = 0;
    outlined destroy of Headphone_Manager?((id *)&v369);
    swift_endAccess();
    uint64_t v275 = v274;
  }
  uint64_t v268 = v275;
  if (v275)
  {
    Swift::String v267 = v268;
    int v16 = v330;
    id v227 = v268;
    uint64_t v353 = v268;
    uint64_t v17 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v325 + 16))(v16, v17, v324);
    id v18 = v227;
    uint64_t v228 = 24;
    uint64_t v243 = 7;
    uint64_t v19 = swift_allocObject();
    id v20 = v227;
    uint64_t v235 = v19;
    *(void *)(v19 + 16) = v227;
    id v21 = v20;
    uint64_t v22 = swift_allocObject();
    id v23 = v323;
    uint64_t v237 = v22;
    *(void *)(v22 + 16) = v227;
    id v24 = v23;
    uint64_t v244 = swift_allocObject();
    *(void *)(v244 + 16) = v323;
    uint64_t v264 = Logger.logObject.getter();
    int v265 = static os_log_type_t.default.getter();
    unsigned __int8 v231 = &v351;
    uint64_t v351 = 52;
    unint64_t v229 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v230 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v232 = v352;
    uint64_t v240 = 17;
    uint64_t v246 = swift_allocObject();
    int v239 = 32;
    *(unsigned char *)(v246 + 16) = 32;
    uint64_t v247 = swift_allocObject();
    int v241 = 8;
    *(unsigned char *)(v247 + 16) = 8;
    uint64_t v242 = 32;
    uint64_t v25 = swift_allocObject();
    uint64_t v233 = v25;
    *(void *)(v25 + 16) = v276;
    *(void *)(v25 + 24) = 0;
    uint64_t v26 = swift_allocObject();
    uint64_t v27 = v233;
    uint64_t v248 = v26;
    *(void *)(v26 + 16) = v277;
    *(void *)(v26 + 24) = v27;
    uint64_t v249 = swift_allocObject();
    *(unsigned char *)(v249 + 16) = 0;
    uint64_t v250 = swift_allocObject();
    *(unsigned char *)(v250 + 16) = v241;
    uint64_t v28 = swift_allocObject();
    uint64_t v234 = v28;
    *(void *)(v28 + 16) = v278;
    *(void *)(v28 + 24) = 0;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v234;
    uint64_t v251 = v29;
    *(void *)(v29 + 16) = v279;
    *(void *)(v29 + 24) = v30;
    uint64_t v252 = swift_allocObject();
    *(unsigned char *)(v252 + 16) = 64;
    uint64_t v253 = swift_allocObject();
    *(unsigned char *)(v253 + 16) = v241;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v235;
    uint64_t v236 = v31;
    *(void *)(v31 + 16) = v280;
    *(void *)(v31 + 24) = v32;
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v236;
    uint64_t v254 = v33;
    *(void *)(v33 + 16) = v281;
    *(void *)(v33 + 24) = v34;
    uint64_t v255 = swift_allocObject();
    *(unsigned char *)(v255 + 16) = v239;
    uint64_t v256 = swift_allocObject();
    *(unsigned char *)(v256 + 16) = v241;
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v237;
    uint64_t v238 = v35;
    *(void *)(v35 + 16) = v282;
    *(void *)(v35 + 24) = v36;
    uint64_t v37 = swift_allocObject();
    uint64_t v38 = v238;
    uint64_t v257 = v37;
    *(void *)(v37 + 16) = v283;
    *(void *)(v37 + 24) = v38;
    uint64_t v258 = swift_allocObject();
    *(unsigned char *)(v258 + 16) = v239;
    uint64_t v259 = swift_allocObject();
    *(unsigned char *)(v259 + 16) = v241;
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v244;
    uint64_t v245 = v39;
    *(void *)(v39 + 16) = v284;
    *(void *)(v39 + 24) = v40;
    uint64_t v41 = swift_allocObject();
    uint64_t v42 = v245;
    uint64_t v261 = v41;
    *(void *)(v41 + 16) = v285;
    *(void *)(v41 + 24) = v42;
    uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v260 = _allocateUninitializedArray<A>(_:)();
    Swift::String v262 = v43;
    swift_retain();
    uint64_t v44 = v246;
    uint64_t v45 = v262;
    *Swift::String v262 = v286;
    v45[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
    swift_retain();
    uint64_t v46 = v247;
    uint64_t v47 = v262;
    v262[2] = v287;
    v47[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46;
    swift_retain();
    uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v248;
    unint64_t v49 = v262;
    v262[4] = v288;
    v49[5] = v48;
    swift_retain();
    uint64_t v50 = v249;
    uint64_t v51 = v262;
    v262[6] = v289;
    v51[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v50;
    swift_retain();
    uint64_t v52 = v250;
    uint64_t v53 = v262;
    v262[8] = v290;
    v53[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
    swift_retain();
    unint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v251;
    unint64_t v55 = v262;
    v262[10] = v291;
    v55[11] = v54;
    swift_retain();
    uint64_t v56 = v252;
    uint32_t v57 = v262;
    v262[12] = v292;
    v57[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
    swift_retain();
    uint64_t v58 = v253;
    uint64_t v59 = v262;
    v262[14] = v293;
    v59[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v58;
    swift_retain();
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v254;
    uint64_t v61 = v262;
    v262[16] = v294;
    v61[17] = v60;
    swift_retain();
    uint64_t v62 = v255;
    unint64_t v63 = v262;
    v262[18] = v295;
    v63[19] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62;
    swift_retain();
    uint64_t v64 = v256;
    uint64_t v65 = v262;
    v262[20] = v296;
    v65[21] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v64;
    swift_retain();
    uint32_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v257;
    uint64_t v67 = v262;
    v262[22] = v297;
    v67[23] = v66;
    swift_retain();
    uint64_t v68 = v258;
    uint64_t v69 = v262;
    v262[24] = v298;
    v69[25] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
    swift_retain();
    uint64_t v70 = v259;
    uint64_t v71 = v262;
    v262[26] = v299;
    v71[27] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
    swift_retain();
    int v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v261;
    uint64_t v73 = v262;
    v262[28] = v300;
    v73[29] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v264, (os_log_type_t)v265))
    {
      uint64_t v74 = v321;
      uint64_t v220 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v221 = createStorage<A>(capacity:type:)(1);
      uint64_t v222 = createStorage<A>(capacity:type:)(3);
      Swift::String v223 = &v350;
      int v350 = v220;
      Swift::String v224 = &v349;
      uint64_t v349 = v221;
      uint64_t v225 = &v348;
      uint64_t v348 = v222;
      serialize(_:at:)(2, &v350);
      serialize(_:at:)(5, v223);
      int v346 = v286;
      uint64_t v347 = v246;
      closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)v223, (uint64_t)v224, (uint64_t)v225);
      uint64_t v226 = v74;
      if (v74)
      {
        __break(1u);
      }
      else
      {
        int v346 = v287;
        uint64_t v347 = v247;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v218 = 0;
        uint64_t v75 = v218;
        int v346 = v288;
        uint64_t v347 = v248;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v217 = v75;
        int v346 = v289;
        uint64_t v347 = v249;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v216 = 0;
        int v346 = v290;
        uint64_t v347 = v250;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v215 = 0;
        int v346 = v291;
        uint64_t v347 = v251;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v214 = 0;
        int v346 = v292;
        uint64_t v347 = v252;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v213 = 0;
        int v346 = v293;
        uint64_t v347 = v253;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v212 = 0;
        int v346 = v294;
        uint64_t v347 = v254;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v211 = 0;
        int v346 = v295;
        uint64_t v347 = v255;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v210 = 0;
        int v346 = v296;
        uint64_t v347 = v256;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v209 = 0;
        int v346 = v297;
        uint64_t v347 = v257;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v208 = 0;
        int v346 = v298;
        uint64_t v347 = v258;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v207 = 0;
        int v346 = v299;
        uint64_t v347 = v259;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        uint64_t v206 = 0;
        int v346 = v300;
        uint64_t v347 = v261;
        closure #1 in osLogInternal(_:log:type:)(&v346, (uint64_t)&v350, (uint64_t)&v349, (uint64_t)&v348);
        _os_log_impl(&dword_250C36000, v264, (os_log_type_t)v265, "HeadphoneManager: %s: %ld device: %@::%s updateWithRecord %s", v220, v232);
        destroyStorage<A>(_:count:)(v221, 1, v219);
        destroyStorage<A>(_:count:)(v222, 3, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v220, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v76 = (uint64_t *)v227;

    uint64_t v77 = (*(uint64_t (**)(char *, uint64_t))(v325 + 8))(v330, v324);
    uint64_t v78 = *v76;
    id v204 = (void *)MEMORY[0x263F8EED0];
    char v205 = (void *)(*(uint64_t (**)(uint64_t))((v78 & *MEMORY[0x263F8EED0]) + 0x9F0))(v77);
    (*(void (**)(id))((*v205 & *v204) + 0x590))(v323);

    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v266 = v322 + 16;
    swift_beginAccess();
    uint64_t v367 = (void *)MEMORY[0x253386C10](v266);
    if (v367)
    {
      uint64_t v194 = (id *)&v367;
      uint64_t v80 = v367;
      id v195 = v367;
      uint64_t v81 = v367;
      outlined destroy of Headphone_Manager?(v194);
      uint64_t v82 = swift_endAccess();
      uint64_t v196 = (*(uint64_t (**)(uint64_t))((*v80 & *MEMORY[0x263F8EED0]) + 0x180))(v82);

      uint64_t v198 = type metadata accessor for HeadphoneDevice();
      uint64_t v197 = MEMORY[0x263F8D310];
      uint64_t v199 = MEMORY[0x263F8D320];
      uint64_t v200 = swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v201._uint64_t countAndFlagsBits = Dictionary.Keys.debugDescription.getter();
      v201._object = v83;
      swift_bridgeObjectRelease();
      Swift::String v203 = v201;
    }
    else
    {
      uint64_t v202 = 0;
      outlined destroy of Headphone_Manager?((id *)&v367);
      swift_endAccess();
      v203._uint64_t countAndFlagsBits = (uint64_t)v202;
      v203._object = v202;
    }
    Swift::String v366 = v203;
    if (v203._object)
    {
      Swift::String v368 = v366;
    }
    else
    {
      Swift::String v368 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("none", 4uLL, 1);
      outlined destroy of String?();
    }
    int v84 = v328;
    Swift::String v161 = v368;
    Swift::String v365 = v368;
    uint64_t v85 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v325 + 16))(v84, v85, v324);
    swift_bridgeObjectRetain();
    uint64_t v173 = 32;
    uint64_t v174 = 7;
    uint64_t v86 = swift_allocObject();
    uint64_t v87 = v341;
    uint64_t v168 = v86;
    *(void *)(v86 + 16) = v340;
    *(void *)(v86 + 24) = v87;
    swift_bridgeObjectRetain();
    uint64_t v88 = swift_allocObject();
    object = v161._object;
    uint64_t v175 = v88;
    *(void *)(v88 + 16) = v161._countAndFlagsBits;
    *(void *)(v88 + 24) = object;
    uint64_t v192 = Logger.logObject.getter();
    int v193 = static os_log_type_t.error.getter();
    uint64_t v164 = &v363;
    uint64_t v363 = 42;
    unint64_t v162 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v163 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v165 = v364;
    uint64_t v171 = 17;
    uint64_t v177 = swift_allocObject();
    int v170 = 32;
    *(unsigned char *)(v177 + 16) = 32;
    uint64_t v178 = swift_allocObject();
    int v172 = 8;
    *(unsigned char *)(v178 + 16) = 8;
    uint64_t v90 = swift_allocObject();
    uint64_t v166 = v90;
    *(void *)(v90 + 16) = v301;
    *(void *)(v90 + 24) = 0;
    uint64_t v91 = swift_allocObject();
    uint64_t v92 = v166;
    uint64_t v179 = v91;
    *(void *)(v91 + 16) = v302;
    *(void *)(v91 + 24) = v92;
    uint64_t v180 = swift_allocObject();
    *(unsigned char *)(v180 + 16) = 0;
    uint64_t v181 = swift_allocObject();
    *(unsigned char *)(v181 + 16) = v172;
    uint64_t v93 = swift_allocObject();
    uint64_t v167 = v93;
    *(void *)(v93 + 16) = v303;
    *(void *)(v93 + 24) = 0;
    uint64_t v94 = swift_allocObject();
    uint64_t v95 = v167;
    uint64_t v182 = v94;
    *(void *)(v94 + 16) = v304;
    *(void *)(v94 + 24) = v95;
    uint64_t v183 = swift_allocObject();
    *(unsigned char *)(v183 + 16) = v170;
    uint64_t v184 = swift_allocObject();
    *(unsigned char *)(v184 + 16) = v172;
    uint64_t v96 = swift_allocObject();
    uint64_t v97 = v168;
    uint64_t v169 = v96;
    *(void *)(v96 + 16) = v305;
    *(void *)(v96 + 24) = v97;
    uint64_t v98 = swift_allocObject();
    uint64_t v99 = v169;
    uint64_t v185 = v98;
    *(void *)(v98 + 16) = v306;
    *(void *)(v98 + 24) = v99;
    uint64_t v186 = swift_allocObject();
    *(unsigned char *)(v186 + 16) = v170;
    uint64_t v187 = swift_allocObject();
    *(unsigned char *)(v187 + 16) = v172;
    uint64_t v100 = swift_allocObject();
    uint64_t v101 = v175;
    uint64_t v176 = v100;
    *(void *)(v100 + 16) = v307;
    *(void *)(v100 + 24) = v101;
    uint64_t v102 = swift_allocObject();
    uint64_t v103 = v176;
    uint64_t v189 = v102;
    *(void *)(v102 + 16) = v308;
    *(void *)(v102 + 24) = v103;
    uint64_t v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v188 = _allocateUninitializedArray<A>(_:)();
    uint64_t v190 = v104;
    swift_retain();
    uint64_t v105 = v177;
    int v106 = v190;
    *uint64_t v190 = v309;
    v106[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v105;
    swift_retain();
    uint64_t v107 = v178;
    char v108 = v190;
    v190[2] = v310;
    v108[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v107;
    swift_retain();
    uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v179;
    int v110 = v190;
    v190[4] = v311;
    v110[5] = v109;
    swift_retain();
    uint64_t v111 = v180;
    uint64_t v112 = v190;
    v190[6] = v312;
    v112[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v111;
    swift_retain();
    uint64_t v113 = v181;
    char v114 = v190;
    v190[8] = v313;
    v114[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v113;
    swift_retain();
    uint64_t v115 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v182;
    int v116 = v190;
    v190[10] = v314;
    v116[11] = v115;
    swift_retain();
    uint64_t v117 = v183;
    uint64_t v118 = v190;
    v190[12] = v315;
    v118[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v117;
    swift_retain();
    uint64_t v119 = v184;
    char v120 = v190;
    v190[14] = v316;
    v120[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v119;
    swift_retain();
    uint64_t v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v185;
    int v122 = v190;
    v190[16] = v317;
    v122[17] = v121;
    swift_retain();
    uint64_t v123 = v186;
    int v124 = v190;
    v190[18] = v318;
    v124[19] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v123;
    swift_retain();
    uint64_t v125 = v187;
    uint64_t v126 = v190;
    v190[20] = v319;
    v126[21] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v125;
    swift_retain();
    int v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v189;
    uint64_t v128 = v190;
    v190[22] = v320;
    v128[23] = v127;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v192, (os_log_type_t)v193))
    {
      uint64_t v129 = v321;
      uint64_t v154 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v155 = createStorage<A>(capacity:type:)(0);
      uint64_t v156 = createStorage<A>(capacity:type:)(3);
      uint64_t v157 = &v358;
      id v358 = v154;
      uint64_t v158 = &v357;
      uint64_t v357 = v155;
      uint64_t v159 = &v356;
      uint64_t v356 = v156;
      serialize(_:at:)(2, &v358);
      serialize(_:at:)(4, v157);
      uint64_t v354 = v309;
      uint64_t v355 = v177;
      closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)v157, (uint64_t)v158, (uint64_t)v159);
      uint64_t v160 = v129;
      if (v129)
      {
        __break(1u);
      }
      else
      {
        uint64_t v354 = v310;
        uint64_t v355 = v178;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v152 = 0;
        uint64_t v130 = v152;
        uint64_t v354 = v311;
        uint64_t v355 = v179;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v151 = v130;
        uint64_t v354 = v312;
        uint64_t v355 = v180;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v150 = 0;
        uint64_t v354 = v313;
        uint64_t v355 = v181;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v149 = 0;
        uint64_t v354 = v314;
        uint64_t v355 = v182;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v148 = 0;
        uint64_t v354 = v315;
        uint64_t v355 = v183;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v147 = 0;
        uint64_t v354 = v316;
        uint64_t v355 = v184;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v146 = 0;
        uint64_t v354 = v317;
        uint64_t v355 = v185;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v145 = 0;
        uint64_t v354 = v318;
        uint64_t v355 = v186;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v144 = 0;
        uint64_t v354 = v319;
        uint64_t v355 = v187;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        uint64_t v143 = 0;
        uint64_t v354 = v320;
        uint64_t v355 = v189;
        closure #1 in osLogInternal(_:log:type:)(&v354, (uint64_t)&v358, (uint64_t)&v357, (uint64_t)&v356);
        _os_log_impl(&dword_250C36000, v192, (os_log_type_t)v193, "HeadphoneManager: %s: %ld headphoneDevice with bt address not found %s %s", v154, v165);
        destroyStorage<A>(_:count:)(v155, 0, v153);
        destroyStorage<A>(_:count:)(v156, 3, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v154, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v325 + 8))(v328, v324);
    uint64_t v142 = v322 + 16;
    swift_beginAccess();
    v362[0] = (id)MEMORY[0x253386C10](v142);
    if (v362[0])
    {
      uint64_t v136 = v362;
      uint64_t v131 = v362[0];
      id v141 = v362[0];
      id v132 = v362[0];
      outlined destroy of Headphone_Manager?(v136);
      swift_endAccess();
      swift_bridgeObjectRetain();
      id v133 = v323;
      uint64_t v138 = &v361;
      id v361 = v323;
      int v137 = v360;
      v360[0] = v340;
      v360[1] = v341;
      uint64_t v134 = *(uint64_t (**)(void))((*v131 & *MEMORY[0x263F8EED0]) + 0x160);
      int v139 = &v359;
      uint64_t v140 = (void (*)(void))v134();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HMDeviceRecord]);
      Dictionary.subscript.setter();
      v140();
    }
    else
    {
      outlined destroy of Headphone_Manager?(v362);
      swift_endAccess();
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t partial apply for closure #4 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  return closure #4 in Headphone_Manager.configHearingModeClient()(a1, v1);
}

uint64_t implicit closure #2 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #3 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return 44;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #4 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #5 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
}

uint64_t implicit closure #6 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #7 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return 49;
}

void *implicit closure #8 in closure #4 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t implicit closure #9 in closure #4 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%p", 2uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  uint64_t v5 = v1;
  id v2 = a1;
  _DWORD v5[3] = type metadata accessor for HeadphoneDevice();
  v5[4] = lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
  *uint64_t v5 = a1;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v6 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t implicit closure #10 in closure #4 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_debugDescription);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HMDeviceRecord) -> ()(uint64_t a1, void *a2)
{
  id v4 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v2 = a2;
  v4(a2);

  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t implicit closure #1 in closure #5 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #5 in Headphone_Manager.configHearingModeClient()()
{
  return 56;
}

uint64_t ~= infix<A>(_:_:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v9 = *(void *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v14 = v9;
  uint64_t v6 = *(void *)(v9 - 8);
  uint64_t v7 = v9 - 8;
  unint64_t v4 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v8 = (char *)&v4 - v4;
  uint64_t v13 = v5;
  uint64_t v12 = v2;
  (*(void (**)(void))(v6 + 16))();
  swift_retain();
  swift_getAtKeyPath();
  int v10 = v11;
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v9);
  return v10 & 1;
}

id HearingRecord.deviceConfigFor<A>(keyPath:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v158 = a1;
  uint64_t v125 = a2;
  uint64_t v124 = a3;
  uint64_t v126 = 0;
  uint64_t v118 = partial apply for implicit closure #12 in HearingRecord.deviceConfigFor<A>(keyPath:value:);
  uint64_t v119 = _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_0;
  char v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
  uint64_t v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_0;
  uint64_t v233 = 0;
  uint64_t v232 = 0;
  uint64_t v231 = 0;
  id v230 = 0;
  uint64_t v123 = 0;
  uint64_t v234 = a3;
  uint64_t v127 = type metadata accessor for Logger();
  uint64_t v128 = *(void *)(v127 - 8);
  uint64_t v129 = v127 - 8;
  unint64_t v130 = (*(void *)(v128 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](0, v125);
  uint64_t v131 = (char *)v63 - v130;
  uint64_t v132 = *(void *)(v5 - 8);
  uint64_t v133 = v5 - 8;
  uint64_t v153 = *(void *)(v132 + 64);
  unint64_t v134 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v4, v6);
  uint64_t v135 = (char *)v63 - v134;
  unint64_t v136 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7, v8);
  int v137 = (char *)v63 - v136;
  unint64_t v138 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v9, v10);
  int v139 = (char *)v63 - v138;
  unint64_t v140 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  id v141 = (char *)v63 - v140;
  unint64_t v142 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13, v14);
  uint64_t v143 = (char *)v63 - v142;
  unint64_t v144 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15, v16);
  uint64_t v145 = (char *)v63 - v144;
  unint64_t v146 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v17, v18);
  uint64_t v147 = (char *)v63 - v146;
  unint64_t v148 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = MEMORY[0x270FA5388](v19, v20);
  uint64_t v149 = (char *)v63 - v148;
  unint64_t v150 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = MEMORY[0x270FA5388](v21, v22);
  uint64_t v151 = (char *)v63 - v150;
  unint64_t v152 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = MEMORY[0x270FA5388](v23, v24);
  uint64_t v154 = (char *)v63 - v152;
  unint64_t v155 = (v153 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v25, v26);
  uint64_t v156 = (char *)v63 - v155;
  uint64_t v233 = v27;
  uint64_t v232 = v28;
  uint64_t v231 = v3;
  type metadata accessor for HMDeviceConfigurations();
  id v157 = HMDeviceConfigurations.__allocating_init()();
  id v230 = v157;
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v160 = &v229;
  uint64_t v229 = KeyPath;
  uint64_t v159 = &v228;
  uint64_t v228 = v158;
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<HearingRecordModel>);
  int v162 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v162)
  {
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v156, v125, v124);
    type metadata accessor for NSNumber();
    if (swift_dynamicCast()) {
      id v116 = v163[1];
    }
    else {
      id v116 = 0;
    }
    v163[0] = v116;
    id v30 = v157;
    if (v163[0])
    {
      id v164 = v163[0];
    }
    else
    {
      id v164 = objc_msgSend(v157, sel_amplification);
      outlined destroy of NSNumber?(v163);
    }

    id v115 = v164;
    objc_msgSend(v157, sel_setAmplification_);
  }
  else
  {
    swift_release();
    swift_retain();
    uint64_t v227 = swift_getKeyPath();
    uint64_t v226 = v158;
    int v114 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if (v114)
    {
      swift_release();
      (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v154, v125, v124);
      type metadata accessor for NSNumber();
      if (swift_dynamicCast()) {
        id v113 = v165[1];
      }
      else {
        id v113 = 0;
      }
      v165[0] = v113;
      id v31 = v157;
      if (v165[0])
      {
        id v166 = v165[0];
      }
      else
      {
        id v166 = objc_msgSend(v157, sel_balance);
        outlined destroy of NSNumber?(v165);
      }

      id v112 = v166;
      objc_msgSend(v157, sel_setBalance_);
    }
    else
    {
      swift_release();
      swift_retain();
      uint64_t v225 = swift_getKeyPath();
      uint64_t v224 = v158;
      int v111 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      if (v111)
      {
        swift_release();
        (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v151, v125, v124);
        type metadata accessor for NSNumber();
        if (swift_dynamicCast()) {
          id v110 = v167[1];
        }
        else {
          id v110 = 0;
        }
        v167[0] = v110;
        id v32 = v157;
        if (v167[0])
        {
          id v168 = v167[0];
        }
        else
        {
          id v168 = objc_msgSend(v157, sel_beamFormer);
          outlined destroy of NSNumber?(v167);
        }

        id v109 = v168;
        objc_msgSend(v157, sel_setBeamFormer_);
      }
      else
      {
        swift_release();
        swift_retain();
        uint64_t v223 = swift_getKeyPath();
        uint64_t v222 = v158;
        int v108 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        if (v108)
        {
          swift_release();
          (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v149, v125, v124);
          type metadata accessor for NSNumber();
          if (swift_dynamicCast()) {
            id v107 = v169[1];
          }
          else {
            id v107 = 0;
          }
          v169[0] = v107;
          id v33 = v157;
          if (v169[0])
          {
            id v170 = v169[0];
          }
          else
          {
            id v170 = objc_msgSend(v157, sel_noiseSuppression);
            outlined destroy of NSNumber?(v169);
          }

          id v106 = v170;
          objc_msgSend(v157, sel_setNoiseSuppression_);
        }
        else
        {
          swift_release();
          swift_retain();
          uint64_t v221 = swift_getKeyPath();
          uint64_t v220 = v158;
          int v105 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          if (v105)
          {
            swift_release();
            (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v147, v125, v124);
            type metadata accessor for NSNumber();
            if (swift_dynamicCast()) {
              id v104 = v171[1];
            }
            else {
              id v104 = 0;
            }
            v171[0] = v104;
            id v34 = v157;
            if (v171[0])
            {
              id v172 = v171[0];
            }
            else
            {
              id v172 = objc_msgSend(v157, sel_tone);
              outlined destroy of NSNumber?(v171);
            }

            id v103 = v172;
            objc_msgSend(v157, sel_setTone_);
          }
          else
          {
            swift_release();
            swift_retain();
            uint64_t v219 = swift_getKeyPath();
            uint64_t v218 = v158;
            int v102 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            if (v102)
            {
              swift_release();
              (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v145, v125, v124);
              type metadata accessor for HMMultiState();
              if (swift_dynamicCast()) {
                uint64_t v101 = v175;
              }
              else {
                uint64_t v101 = 0x100000000;
              }
              signed __int8 v173 = v101;
              char v174 = BYTE4(v101) & 1;
              id v35 = v157;
              if (v174) {
                signed __int8 v176 = objc_msgSend(v157, sel_enableHearingAssist);
              }
              else {
                signed __int8 v176 = v173;
              }

              objc_msgSend(v157, sel_setEnableHearingAssist_, v176);
            }
            else
            {
              swift_release();
              swift_retain();
              uint64_t v217 = swift_getKeyPath();
              uint64_t v216 = v158;
              int v100 = dispatch thunk of static Equatable.== infix(_:_:)();
              swift_release();
              if (v100)
              {
                swift_release();
                (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v143, v125, v124);
                type metadata accessor for HMMultiState();
                if (swift_dynamicCast()) {
                  uint64_t v99 = v179;
                }
                else {
                  uint64_t v99 = 0x100000000;
                }
                signed __int8 v177 = v99;
                char v178 = BYTE4(v99) & 1;
                id v36 = v157;
                if (v178) {
                  signed __int8 v180 = objc_msgSend(v157, sel_enableMediaAssist);
                }
                else {
                  signed __int8 v180 = v177;
                }

                objc_msgSend(v157, sel_setEnableMediaAssist_, v180);
              }
              else
              {
                swift_release();
                swift_retain();
                uint64_t v215 = swift_getKeyPath();
                uint64_t v214 = v158;
                int v98 = dispatch thunk of static Equatable.== infix(_:_:)();
                swift_release();
                if (v98)
                {
                  swift_release();
                  (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v141, v125, v124);
                  type metadata accessor for HMMultiState();
                  if (swift_dynamicCast()) {
                    uint64_t v97 = v183;
                  }
                  else {
                    uint64_t v97 = 0x100000000;
                  }
                  signed __int8 v181 = v97;
                  char v182 = BYTE4(v97) & 1;
                  id v37 = v157;
                  if (v182) {
                    signed __int8 v184 = objc_msgSend(v157, sel_enableSwipeGain);
                  }
                  else {
                    signed __int8 v184 = v181;
                  }

                  objc_msgSend(v157, sel_setEnableSwipeGain_, v184);
                }
                else
                {
                  swift_release();
                  swift_retain();
                  uint64_t v213 = swift_getKeyPath();
                  uint64_t v212 = v158;
                  int v96 = dispatch thunk of static Equatable.== infix(_:_:)();
                  swift_release();
                  if (v96)
                  {
                    uint64_t v38 = v117;
                    uint64_t v39 = swift_release();
                    char v40 = (*(uint64_t (**)(uint64_t))((*v38 & *MEMORY[0x263F8EED0]) + 0x290))(v39);
                    objc_msgSend(v157, sel_setEnableHearingAid_, v40);
                  }
                  else
                  {
                    swift_release();
                    swift_retain();
                    uint64_t v211 = swift_getKeyPath();
                    uint64_t v210 = v158;
                    int v95 = dispatch thunk of static Equatable.== infix(_:_:)();
                    swift_release();
                    if (v95)
                    {
                      swift_release();
                      (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v139, v125, v124);
                      type metadata accessor for HMMultiState();
                      if (swift_dynamicCast()) {
                        uint64_t v94 = v187;
                      }
                      else {
                        uint64_t v94 = 0x100000000;
                      }
                      signed __int8 v185 = v94;
                      char v186 = BYTE4(v94) & 1;
                      id v41 = v157;
                      if (v186) {
                        signed __int8 v188 = objc_msgSend(v157, sel_enableHearingProtection);
                      }
                      else {
                        signed __int8 v188 = v185;
                      }

                      objc_msgSend(v157, sel_setEnableHearingProtection_, v188);
                    }
                    else
                    {
                      swift_release();
                      swift_retain();
                      uint64_t v209 = swift_getKeyPath();
                      uint64_t v208 = v158;
                      int v93 = dispatch thunk of static Equatable.== infix(_:_:)();
                      swift_release();
                      if (v93)
                      {
                        swift_release();
                        (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v137, v125, v124);
                        type metadata accessor for HMMultiState();
                        if (swift_dynamicCast()) {
                          uint64_t v92 = v191;
                        }
                        else {
                          uint64_t v92 = 0x100000000;
                        }
                        signed __int8 v189 = v92;
                        char v190 = BYTE4(v92) & 1;
                        id v42 = v157;
                        if (v190) {
                          signed __int8 v192 = objc_msgSend(v157, sel_allowListeningModeOff);
                        }
                        else {
                          signed __int8 v192 = v189;
                        }

                        objc_msgSend(v157, sel_setAllowListeningModeOff_, v192);
                      }
                      else
                      {
                        swift_release();
                        swift_retain();
                        uint64_t v207 = swift_getKeyPath();
                        uint64_t v206 = v158;
                        int v91 = dispatch thunk of static Equatable.== infix(_:_:)();
                        swift_release();
                        if (v91)
                        {
                          swift_release();
                          (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v135, v125, v124);
                          type metadata accessor for HMMultiState();
                          if (swift_dynamicCast()) {
                            uint64_t v90 = v195;
                          }
                          else {
                            uint64_t v90 = 0x100000000;
                          }
                          signed __int8 v193 = v90;
                          char v194 = BYTE4(v90) & 1;
                          id v43 = v157;
                          if (v194) {
                            signed __int8 v196 = objc_msgSend(v157, sel_enablePMEVoice);
                          }
                          else {
                            signed __int8 v196 = v193;
                          }

                          objc_msgSend(v157, sel_setEnablePMEVoice_, v196);
                        }
                        else
                        {
                          swift_release();
                          swift_retain();
                          uint64_t v205 = swift_getKeyPath();
                          uint64_t v204 = v158;
                          int v89 = dispatch thunk of static Equatable.== infix(_:_:)();
                          swift_release();
                          if (v89)
                          {
                            uint64_t v44 = v117;
                            uint64_t v45 = swift_release();
                            char v46 = (*(uint64_t (**)(uint64_t))((*v44 & *MEMORY[0x263F8EED0]) + 0x210))(v45);
                            objc_msgSend(v157, sel_setEnablePMEMedia_, v46);
                          }
                          else
                          {
                            swift_release();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v47 = v131;
  uint64_t v48 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v47, v48, v127);
  id v49 = v157;
  uint64_t v78 = 7;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = v157;
  uint64_t v87 = Logger.logObject.getter();
  int v88 = static os_log_type_t.default.getter();
  uint64_t v74 = &v202;
  uint64_t v202 = 12;
  unint64_t v72 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v73 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v75 = v203;
  uint64_t v76 = 17;
  uint64_t v81 = swift_allocObject();
  *(unsigned char *)(v81 + 16) = 64;
  uint64_t v82 = swift_allocObject();
  *(unsigned char *)(v82 + 16) = 8;
  uint64_t v77 = 32;
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v79;
  uint64_t v80 = v50;
  *(void *)(v50 + 16) = v118;
  *(void *)(v50 + 24) = v51;
  uint64_t v52 = swift_allocObject();
  uint64_t v53 = v80;
  uint64_t v84 = v52;
  *(void *)(v52 + 16) = v119;
  *(void *)(v52 + 24) = v53;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v83 = _allocateUninitializedArray<A>(_:)();
  uint64_t v85 = v54;
  swift_retain();
  uint64_t v55 = v81;
  uint64_t v56 = v85;
  AudioAccessoryDevice *v85 = v120;
  v56[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v55;
  swift_retain();
  uint64_t v57 = v82;
  uint64_t v58 = v85;
  v85[2] = v121;
  v58[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v57;
  swift_retain();
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v84;
  uint64_t v60 = v85;
  v85[4] = v122;
  v60[5] = v59;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v87, (os_log_type_t)v88))
  {
    uint64_t v61 = v123;
    uint64_t v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v66 = createStorage<A>(capacity:type:)(1);
    uint64_t v67 = createStorage<A>(capacity:type:)(0);
    uint64_t v68 = &v201;
    Swift::String v201 = v65;
    uint64_t v69 = &v200;
    uint64_t v200 = v66;
    uint64_t v70 = &v199;
    uint64_t v199 = v67;
    serialize(_:at:)(2, &v201);
    serialize(_:at:)(1, v68);
    uint64_t v197 = v120;
    uint64_t v198 = v81;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)v68, (uint64_t)v69, (uint64_t)v70);
    uint64_t v71 = v61;
    if (v61)
    {
      __break(1u);
    }
    else
    {
      uint64_t v197 = v121;
      uint64_t v198 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v201, (uint64_t)&v200, (uint64_t)&v199);
      v63[1] = 0;
      uint64_t v197 = v122;
      uint64_t v198 = v84;
      closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v201, (uint64_t)&v200, (uint64_t)&v199);
      _os_log_impl(&dword_250C36000, v87, (os_log_type_t)v88, "HeadphoneManager: CONFIG created: %@ ", v65, v75);
      destroyStorage<A>(_:count:)(v66, 1, v64);
      destroyStorage<A>(_:count:)(v67, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v65, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v128 + 8))(v131, v127);
  return v157;
}

unint64_t type metadata accessor for HMDeviceConfigurations()
{
  uint64_t v2 = lazy cache variable for type metadata for HMDeviceConfigurations;
  if (!lazy cache variable for type metadata for HMDeviceConfigurations)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HMDeviceConfigurations);
    return ObjCClassMetadata;
  }
  return v2;
}

id HMDeviceConfigurations.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HMDeviceConfigurations.init()();
}

uint64_t key path getter for HearingRecordModel.amplification : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 328))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.amplification : HearingRecordModel(id *a1, uint64_t *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  swift_retain();
  (*(void (**)(id))(*(void *)v6 + 336))(v4);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.balance : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 352))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.balance : HearingRecordModel(id *a1, uint64_t *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  swift_retain();
  (*(void (**)(id))(*(void *)v6 + 360))(v4);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.beamFormer : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 376))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.beamFormer : HearingRecordModel(id *a1, uint64_t *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  swift_retain();
  (*(void (**)(id))(*(void *)v6 + 384))(v4);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.noiseSuppression : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 688))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.noiseSuppression : HearingRecordModel(id *a1, uint64_t *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  swift_retain();
  (*(void (**)(id))(*(void *)v6 + 696))(v4);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.tone : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 760))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.tone : HearingRecordModel(id *a1, uint64_t *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  swift_retain();
  (*(void (**)(id))(*(void *)v6 + 768))(v4);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.hearingAssistEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 496))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingAssistEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 504))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.mediaAssistEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 472))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.mediaAssistEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 480))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.swipeGainEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 832))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.swipeGainEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 840))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.hearingAidEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 664))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingAidEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 672))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.hearingProtectionEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 616))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingProtectionEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 624))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.listeningModeOffAllowed : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 856))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.listeningModeOffAllowed : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 864))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.pmeVoiceEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 712))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.pmeVoiceEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 720))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.pmeMediaEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 736))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.pmeMediaEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 744))(v3);
  return swift_release();
}

void *implicit closure #12 in HearingRecord.deviceConfigFor<A>(keyPath:value:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t sub_250CBE6E0()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #12 in HearingRecord.deviceConfigFor<A>(keyPath:value:)()
{
  return implicit closure #12 in HearingRecord.deviceConfigFor<A>(keyPath:value:)(*(void **)(v0 + 16));
}

id @nonobjc HMDeviceConfigurations.init()()
{
  return objc_msgSend(v0, sel_init);
}

uint64_t sub_250CBE74C()
{
  return swift_deallocObject();
}

unsigned char **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_250CBE780()
{
  return swift_deallocObject();
}

uint64_t sub_250CBE7B4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBE7F4()
{
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSNumber?(id *a1)
{
}

uint64_t sub_250CBE860()
{
  return swift_deallocObject();
}

uint64_t sub_250CBE894()
{
  return swift_deallocObject();
}

uint64_t sub_250CBE8C8()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_2()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CBE914()
{
  return swift_deallocObject();
}

void *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250CBE960()
{
  return swift_deallocObject();
}

uint64_t sub_250CBE994()
{
  return swift_deallocObject();
}

uint64_t sub_250CBE9C8()
{
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_1@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_250CBEA14()
{
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

uint64_t _swift_stdlib_has_malloc_size_2()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_2(const void *a1)
{
  return malloc_size(a1);
}

uint64_t sub_250CBEAFC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #4 in closure #4 in Headphone_Manager.configHearingModeClient()();
  return result;
}

uint64_t sub_250CBEB48()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #5 in closure #4 in Headphone_Manager.configHearingModeClient()();
  return result;
}

uint64_t sub_250CBEB94()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEBC8()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEBFC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEC48()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEC94()
{
  return swift_deallocObject();
}

uint64_t sub_250CBECC8()
{
  return swift_deallocObject();
}

uint64_t sub_250CBECFC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBED48()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEDFC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEE30()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEE64()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEEB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEEFC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEF30()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEF64()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEFB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBEFFC()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #8 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return implicit closure #8 in closure #4 in Headphone_Manager.configHearingModeClient()(*(void **)(v0 + 16));
}

uint64_t sub_250CBF044()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return implicit closure #9 in closure #4 in Headphone_Manager.configHearingModeClient()(*(void **)(v0 + 16));
}

uint64_t sub_250CBF08C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return implicit closure #10 in closure #4 in Headphone_Manager.configHearingModeClient()(*(void **)(v0 + 16));
}

uint64_t sub_250CBF0D4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF108()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF13C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF188()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF1D4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF208()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF23C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF288()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF33C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF370()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF3A4()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CBF3F0()
{
  return swift_deallocObject();
}

void closure #1 in OSLogArguments.append(_:)partial apply(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250CBF43C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF470()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF4A4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF4F0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF53C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF570()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF5A4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF5F0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF63C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF67C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF6BC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF6E8()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF714()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF754()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF794()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF7C0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF7EC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF82C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF86C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF898()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF8C4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF904()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF944()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF970()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF99C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBF9DC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #3 in Headphone_Manager.configHearingModeClient()(void **a1)
{
  closure #1 in closure #3 in Headphone_Manager.configHearingModeClient()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_250CBFA48()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFA7C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFAB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFAFC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFB48()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFB7C()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFBB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFBFC()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFCB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFCE4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFD18()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFD64()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFDB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFDE4()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFE18()
{
  return swift_deallocObject();
}

uint64_t sub_250CBFE64()
{
  return swift_deallocObject();
}

uint64_t static HearingRecordConfig.subscript.getter@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*a1 + *MEMORY[0x263F8E100] + 8);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v5 = (void (*)(void))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(void *)(v3 - 8) + 16))(a2);
  v5();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t static HearingRecordConfig.subscript.setter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), void *a3, void *a4)
{
  v592 = v616;
  uint64_t v595 = a1;
  uint64_t v578 = a2;
  v556 = a3;
  uint64_t v581 = a4;
  uint64_t v586 = 0;
  uint64_t v484 = partial apply for implicit closure #3 in static HearingRecordConfig.subscript.setter;
  uint64_t v485 = implicit closure #1 in static HearingRecordConfig.subscript.setter;
  char v486 = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_3;
  unint64_t v487 = partial apply for implicit closure #2 in static HearingRecordConfig.subscript.setter;
  int v488 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  char v489 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
  unsigned __int8 v490 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  Builtin::Word v491 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
  int v492 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unsigned __int8 v493 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
  v494 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v495 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v496 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v497 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v498 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v499 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v500 = partial apply for implicit closure #7 in static HearingRecordConfig.subscript.setter;
  uint64_t v501 = implicit closure #5 in static HearingRecordConfig.subscript.setter;
  id v502 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v503 = partial apply for implicit closure #6 in static HearingRecordConfig.subscript.setter;
  Builtin::Word v504 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  int v505 = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  uint64_t v506 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v507 = partial apply for implicit closure #8 in static HearingRecordConfig.subscript.setter;
  uint64_t v508 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v509 = partial apply for implicit closure #9 in static HearingRecordConfig.subscript.setter;
  uint64_t v510 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v511 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v512 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v513 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v514 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v515 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unsigned __int8 v516 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v517 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  char v518 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unsigned __int8 v519 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v520 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v521 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Builtin::Word v522 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v523 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v524 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v526 = partial apply for implicit closure #12 in static HearingRecordConfig.subscript.setter;
  uint64_t v527 = implicit closure #10 in static HearingRecordConfig.subscript.setter;
  uint64_t v528 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v529 = partial apply for implicit closure #11 in static HearingRecordConfig.subscript.setter;
  unint64_t v530 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  char v531 = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  int v532 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  Swift::String v533 = partial apply for implicit closure #13 in static HearingRecordConfig.subscript.setter;
  uint64_t v534 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  Swift::String v535 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v536 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v537 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v538 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Builtin::Word v539 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v540 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v541 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  Builtin::Word v542 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v543 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v544 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  v545 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v546 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v547 = partial apply for closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v637 = 0;
  uint64_t v636 = 0;
  uint64_t v635 = 0;
  uint64_t v634 = 0;
  uint64_t v633 = 0;
  uint64_t v632 = 0;
  uint64_t v629 = 0;
  uint64_t v630 = 0;
  uint64_t v548 = 0;
  uint64_t v615 = 0;
  id v612 = 0;
  uint64_t v549 = *a3;
  uint64_t v4 = *a4;
  uint64_t v568 = (void *)MEMORY[0x263F8E100];
  v593 = *(int **)(v4 + *MEMORY[0x263F8E100] + 8);
  uint64_t v550 = *((void *)v593 + 4);
  uint64_t v551 = *(void *)(v550 + 8);
  uint64_t v5 = *MEMORY[0x263F8E100];
  uint64_t v569 = v549;
  uint64_t v552 = *(void *)(v549 + v5);
  uint64_t v638 = v552;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v554 = (*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v6);
  v555 = (char *)v297 - v554;
  uint64_t v557 = type metadata accessor for Logger();
  uint64_t v558 = *(void *)(v557 - 8);
  uint64_t v559 = v557 - 8;
  uint64_t v563 = *(void *)(v558 + 64);
  unint64_t v560 = (v563 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v593, v578);
  Builtin::Word v561 = (char *)v297 - v560;
  unint64_t v562 = (v563 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7, v8);
  v564 = (char *)v297 - v562;
  unint64_t v565 = (v563 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v9, v10);
  uint64_t v566 = (char *)v297 - v565;
  unint64_t v567 = (*(void *)(*(void *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  uint64_t v588 = (uint64_t)v297 - v567;
  uint64_t v14 = *(void *)(v569 + *v568 + 8);
  uint64_t v596 = v14;
  *(void *)(v15 + 272) = v14;
  uint64_t v582 = *(void *)(v14 - 8);
  uint64_t v583 = v14 - 8;
  uint64_t v570 = v582;
  uint64_t v574 = *(void *)(v582 + 64);
  unint64_t v571 = (v574 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v13, v16);
  v572 = (char *)v297 - v571;
  unint64_t v573 = (v574 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v17, v18);
  int v575 = (char *)v297 - v573;
  unint64_t v576 = (v574 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v19, v20);
  uint64_t v21 = v595;
  uint64_t v594 = (char *)v297 - v576;
  v22[33] = (char *)v297 - v576;
  v22[32] = v21;
  v22[31] = v23;
  v22[30] = v24;
  v22[29] = v25;
  uint64_t v577 = swift_allocBox();
  uint64_t v587 = v26;
  v592[28] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
  swift_unknownObjectRetain();
  swift_retain();
  v592[27] = v578;
  uint64_t v580 = &v631;
  uint64_t v579 = (void (*)(void))swift_readAtKeyPath();
  outlined init with copy of HearingRecordConfig<A, B>(v27, v587, v596, v593);
  v579();
  swift_unknownObjectRelease();
  swift_release();
  v584 = *(void (**)(char *, uint64_t, uint64_t))(v582 + 16);
  uint64_t v585 = v582 + 16;
  v584(v594, v587, v596);
  type metadata accessor for HearingRecordModel();
  outlined init with copy of HearingRecordConfig<A, B>(v587, v588, v596, v593);
  uint64_t v589 = *(void *)(v588 + v593[17]);
  swift_retain();
  outlined destroy of HearingRecordConfig<A, B>(v588, v596);
  uint64_t v590 = static HearingRecordModel.debugStringForModifyPath(keyPath:)();
  int v591 = v28;
  swift_release();
  uint64_t v29 = v591;
  id v30 = v592;
  id v31 = v593;
  v592[21] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v590;
  v30[22] = v29;
  uint64_t v597 = *((void *)v31 + 6);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    uint64_t v218 = v561;
    uint64_t v219 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v558 + 16))(v218, v219, v557);
    swift_bridgeObjectRetain();
    uint64_t v320 = 32;
    uint64_t v321 = 7;
    uint64_t v220 = swift_allocObject();
    uint64_t v221 = v591;
    uint64_t v222 = v595;
    uint64_t v223 = v584;
    uint64_t v224 = v596;
    uint64_t v225 = v220;
    uint64_t v226 = v575;
    uint64_t v315 = v225;
    *(void *)(v225 + 16) = v590;
    *(void *)(v225 + 24) = v221;
    v223(v226, v222, v224);
    unint64_t v307 = (*(unsigned __int8 *)(v570 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v570 + 80);
    uint64_t v227 = (void *)swift_allocObject();
    uint64_t v228 = v550;
    uint64_t v229 = v593;
    uint64_t v230 = v597;
    unint64_t v231 = v307;
    uint64_t v232 = v582;
    uint64_t v233 = v575;
    uint64_t v234 = v596;
    v309 = v227;
    v227[2] = v552;
    v227[3] = v234;
    v227[4] = v228;
    uint64_t v308 = *((void *)v229 + 5);
    v227[5] = v308;
    v227[6] = v230;
    (*(void (**)(char *, char *))(v232 + 32))((char *)v227 + v231, v233);
    swift_retain();
    uint64_t v235 = swift_allocObject();
    uint64_t v236 = v308;
    uint64_t v237 = v484;
    uint64_t v238 = (void *)v235;
    int v239 = v309;
    uint64_t v322 = v238;
    v238[2] = v596;
    v238[3] = v236;
    v238[4] = v237;
    v238[5] = v239;
    swift_release();
    int v336 = Logger.logObject.getter();
    int v337 = static os_log_type_t.debug.getter();
    id v312 = &v628;
    v592[19] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v320;
    unint64_t v310 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v311 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v313 = *((_DWORD *)v592 + 41);
    uint64_t v318 = 17;
    uint64_t v324 = swift_allocObject();
    int v317 = 32;
    *(unsigned char *)(v324 + 16) = 32;
    uint64_t v325 = swift_allocObject();
    int v319 = 8;
    *(unsigned char *)(v325 + 16) = 8;
    uint64_t v240 = swift_allocObject();
    uint64_t v314 = v240;
    *(void *)(v240 + 16) = v485;
    *(void *)(v240 + 24) = 0;
    uint64_t v241 = swift_allocObject();
    uint64_t v242 = v314;
    uint64_t v326 = v241;
    *(void *)(v241 + 16) = v486;
    *(void *)(v241 + 24) = v242;
    uint64_t v327 = swift_allocObject();
    *(unsigned char *)(v327 + 16) = v317;
    uint64_t v328 = swift_allocObject();
    *(unsigned char *)(v328 + 16) = v319;
    uint64_t v243 = swift_allocObject();
    uint64_t v244 = v315;
    uint64_t v316 = v243;
    *(void *)(v243 + 16) = v487;
    *(void *)(v243 + 24) = v244;
    uint64_t v245 = swift_allocObject();
    uint64_t v246 = v316;
    uint64_t v329 = v245;
    *(void *)(v245 + 16) = v488;
    *(void *)(v245 + 24) = v246;
    uint64_t v330 = swift_allocObject();
    *(unsigned char *)(v330 + 16) = v317;
    uint64_t v331 = swift_allocObject();
    *(unsigned char *)(v331 + 16) = v319;
    uint64_t v247 = swift_allocObject();
    uint64_t v248 = v322;
    uint64_t v323 = v247;
    *(void *)(v247 + 16) = v489;
    *(void *)(v247 + 24) = v248;
    uint64_t v249 = swift_allocObject();
    uint64_t v250 = v323;
    uint64_t v333 = v249;
    *(void *)(v249 + 16) = v490;
    *(void *)(v249 + 24) = v250;
    uint64_t v335 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v332 = _allocateUninitializedArray<A>(_:)();
    int v334 = v251;
    swift_retain();
    uint64_t v252 = v324;
    uint64_t v253 = v334;
    void *v334 = v491;
    v253[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v252;
    swift_retain();
    uint64_t v254 = v325;
    uint64_t v255 = v334;
    v334[2] = v492;
    v255[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v254;
    swift_retain();
    uint64_t v256 = v326;
    uint64_t v257 = v334;
    v334[4] = v493;
    v257[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v256;
    swift_retain();
    uint64_t v258 = v327;
    uint64_t v259 = v334;
    v334[6] = v494;
    v259[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v258;
    swift_retain();
    uint64_t v260 = v328;
    uint64_t v261 = v334;
    v334[8] = v495;
    v261[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v260;
    swift_retain();
    uint64_t v262 = v329;
    uint64_t v263 = v334;
    v334[10] = v496;
    v263[11] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v262;
    swift_retain();
    uint64_t v264 = v330;
    int v265 = v334;
    v334[12] = v497;
    v265[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v264;
    swift_retain();
    uint64_t v266 = v331;
    Swift::String v267 = v334;
    v334[14] = v498;
    v267[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v266;
    swift_retain();
    uint64_t v268 = v333;
    v269 = v334;
    v334[16] = v499;
    v269[17] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v268;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v336, (os_log_type_t)v337))
    {
      uint64_t v270 = v548;
      uint64_t v300 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v301 = createStorage<A>(capacity:type:)(0);
      uint64_t v271 = createStorage<A>(capacity:type:)(3);
      uint64_t v272 = v301;
      uint64_t v273 = v592;
      uint64_t v302 = v271;
      Swift::String v303 = &v627;
      v592[18] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v300;
      uint64_t v304 = v626;
      v273[17] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v272;
      v305 = v625;
      v273[16] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v271;
      serialize(_:at:)(2, &v627);
      serialize(_:at:)(3, v303);
      uint64_t v274 = v324;
      uint64_t v275 = v592;
      Swift::String v276 = v303;
      uint64_t v277 = (uint64_t)v304;
      uint64_t v278 = (uint64_t)v305;
      v592[14] = v491;
      v275[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v274;
      closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)v276, v277, v278);
      uint64_t v306 = v270;
      if (v270)
      {
        __break(1u);
      }
      else
      {
        uint64_t v279 = v592;
        uint64_t v280 = v325;
        v592[14] = v492;
        v279[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v280;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        uint64_t v298 = 0;
        uint64_t v281 = v298;
        char v282 = v592;
        unsigned __int8 v283 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v326;
        v592[14] = v493;
        v282[15] = v283;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        v297[5] = v281;
        id v284 = v592;
        uint64_t v285 = v327;
        v592[14] = v494;
        v284[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v285;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        v297[4] = 0;
        uint64_t v286 = v592;
        uint64_t v287 = v328;
        v592[14] = v495;
        v286[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v287;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        v297[3] = 0;
        uint64_t v288 = v592;
        Swift::String v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v329;
        v592[14] = v496;
        v288[15] = v289;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        v297[2] = 0;
        Swift::String v290 = v592;
        uint64_t v291 = v330;
        v592[14] = v497;
        v290[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v291;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        v297[1] = 0;
        uint64_t v292 = v592;
        uint64_t v293 = v331;
        v592[14] = v498;
        v292[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v293;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        v297[0] = 0;
        unsigned __int8 v294 = v592;
        char v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v333;
        v592[14] = v499;
        v294[15] = v295;
        closure #1 in osLogInternal(_:log:type:)(v624, (uint64_t)&v627, (uint64_t)v626, (uint64_t)v625);
        _os_log_impl(&dword_250C36000, v336, (os_log_type_t)v337, "HeadphoneManager: %s: (Set) value same skiping update %s %s", v300, v313);
        destroyStorage<A>(_:count:)(v301, 0, v299);
        destroyStorage<A>(_:count:)(v302, 3, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v300, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v558 + 8))(v561, v557);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v582 + 8))(v594, v596);
    swift_release();
  }
  else
  {
    id v32 = v578;
    swift_unknownObjectRetain();
    swift_retain();
    v584(v575, v595, v596);
    v592[13] = v32;
    int v483 = (char *)v623 + 4;
    uint64_t v482 = (void (*)(void))swift_modifyAtReferenceWritableKeyPath();
    (*(void (**)(uint64_t, char *, uint64_t))(v582 + 40))(v33, v575, v596);
    v482();
    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(char *__return_ptr, uint64_t))(v550 + 16))((char *)v623 + 3, v552);
    BYTE2(v623[0]) = BYTE3(v623[0]);
    BYTE1(v623[0]) = 0;
    if (static HearingRecordPropertyRemoteSendState.== infix(_:_:)((unsigned char *)v623 + 2, (unsigned char *)v623 + 1))
    {
      outlined init with copy of HearingRecordConfig<A, B>(v587, v588, v596, v593);
      int v478 = *(unsigned __int8 *)(v588 + v593[18]);
      outlined destroy of HearingRecordConfig<A, B>(v588, v596);
      uint64_t v480 = &v599;
      char v599 = v478;
      unint64_t v479 = &v598;
      char v598 = 1;
      lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState();
      int v481 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      int v481 = 0;
    }
    if (v481)
    {
      id v34 = v566;
      uint64_t v35 = Logger.shared.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v558 + 16))(v34, v35, v557);
      swift_bridgeObjectRetain();
      uint64_t v457 = 32;
      uint64_t v458 = 7;
      uint64_t v36 = swift_allocObject();
      id v37 = v591;
      uint64_t v38 = v595;
      uint64_t v39 = v584;
      uint64_t v40 = v596;
      uint64_t v41 = v36;
      id v42 = v575;
      uint64_t v450 = v41;
      *(void *)(v41 + 16) = v590;
      *(void *)(v41 + 24) = v37;
      v39(v42, v38, v40);
      uint64_t v439 = *(unsigned int *)(v570 + 80);
      unint64_t v440 = (v439 + 56) & ~(unint64_t)v439;
      id v43 = (void *)swift_allocObject();
      uint64_t v44 = v593;
      unint64_t v45 = v440;
      uint64_t v46 = v582;
      uint64_t v47 = v575;
      uint64_t v48 = v596;
      uint64_t v49 = v550;
      uint64_t v50 = v597;
      uint64_t v443 = v43;
      v43[2] = v552;
      v43[3] = v48;
      v43[4] = v49;
      uint64_t v444 = *((void *)v44 + 5);
      v43[5] = v444;
      v43[6] = v50;
      unint64_t v441 = *(void (**)(char *, char *))(v46 + 32);
      uint64_t v442 = v46 + 32;
      v441((char *)v43 + v45, v47);
      swift_retain();
      uint64_t v51 = swift_allocObject();
      uint64_t v52 = v526;
      uint64_t v53 = v444;
      unint64_t v54 = (void *)v51;
      uint64_t v55 = v443;
      uint64_t v452 = v54;
      v54[2] = v596;
      v54[3] = v53;
      v54[4] = v52;
      v54[5] = v55;
      swift_release();
      swift_unknownObjectRetain();
      uint64_t v56 = (void *)swift_allocObject();
      uint64_t v57 = v596;
      uint64_t v58 = v550;
      uint64_t v59 = v444;
      uint64_t v60 = v597;
      uint64_t v61 = v578;
      int v459 = v56;
      v56[2] = v552;
      v56[3] = v57;
      v56[4] = v58;
      v56[5] = v59;
      v56[6] = v60;
      v56[7] = v61;
      uint64_t v476 = Logger.logObject.getter();
      int v477 = static os_log_type_t.default.getter();
      uint64_t v447 = &v613;
      uint64_t v613 = 42;
      unint64_t v445 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v446 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v448 = v614;
      uint64_t v455 = 17;
      uint64_t v461 = swift_allocObject();
      int v454 = 32;
      *(unsigned char *)(v461 + 16) = 32;
      uint64_t v462 = swift_allocObject();
      int v456 = 8;
      *(unsigned char *)(v462 + 16) = 8;
      uint64_t v62 = swift_allocObject();
      uint64_t v449 = v62;
      *(void *)(v62 + 16) = v527;
      *(void *)(v62 + 24) = 0;
      uint64_t v63 = swift_allocObject();
      uint64_t v64 = v449;
      uint64_t v463 = v63;
      *(void *)(v63 + 16) = v528;
      *(void *)(v63 + 24) = v64;
      uint64_t v464 = swift_allocObject();
      *(unsigned char *)(v464 + 16) = v454;
      uint64_t v465 = swift_allocObject();
      *(unsigned char *)(v465 + 16) = v456;
      uint64_t v65 = swift_allocObject();
      uint64_t v66 = v450;
      uint64_t v451 = v65;
      *(void *)(v65 + 16) = v529;
      *(void *)(v65 + 24) = v66;
      uint64_t v67 = swift_allocObject();
      uint64_t v68 = v451;
      uint64_t v466 = v67;
      *(void *)(v67 + 16) = v530;
      *(void *)(v67 + 24) = v68;
      uint64_t v467 = swift_allocObject();
      *(unsigned char *)(v467 + 16) = v454;
      uint64_t v468 = swift_allocObject();
      *(unsigned char *)(v468 + 16) = v456;
      uint64_t v69 = swift_allocObject();
      uint64_t v70 = v452;
      uint64_t v453 = v69;
      *(void *)(v69 + 16) = v531;
      *(void *)(v69 + 24) = v70;
      uint64_t v71 = swift_allocObject();
      uint64_t v72 = v453;
      uint64_t v469 = v71;
      *(void *)(v71 + 16) = v532;
      *(void *)(v71 + 24) = v72;
      uint64_t v470 = swift_allocObject();
      *(unsigned char *)(v470 + 16) = v454;
      uint64_t v471 = swift_allocObject();
      *(unsigned char *)(v471 + 16) = v456;
      uint64_t v73 = swift_allocObject();
      uint64_t v74 = v459;
      uint64_t v460 = v73;
      *(void *)(v73 + 16) = v533;
      *(void *)(v73 + 24) = v74;
      uint64_t v75 = swift_allocObject();
      uint64_t v76 = v460;
      uint64_t v473 = v75;
      *(void *)(v75 + 16) = v534;
      *(void *)(v75 + 24) = v76;
      uint64_t v475 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v472 = _allocateUninitializedArray<A>(_:)();
      uint64_t v474 = v77;
      swift_retain();
      uint64_t v78 = v461;
      uint64_t v79 = v474;
      *uint64_t v474 = v535;
      v79[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v78;
      swift_retain();
      uint64_t v80 = v462;
      uint64_t v81 = v474;
      v474[2] = v536;
      v81[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v80;
      swift_retain();
      uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v463;
      uint64_t v83 = v474;
      v474[4] = v537;
      v83[5] = v82;
      swift_retain();
      uint64_t v84 = v464;
      uint64_t v85 = v474;
      v474[6] = v538;
      v85[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v84;
      swift_retain();
      uint64_t v86 = v465;
      uint64_t v87 = v474;
      v474[8] = v539;
      v87[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v86;
      swift_retain();
      int v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v466;
      int v89 = v474;
      v474[10] = v540;
      v89[11] = v88;
      swift_retain();
      uint64_t v90 = v467;
      int v91 = v474;
      v474[12] = v541;
      v91[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v90;
      swift_retain();
      uint64_t v92 = v468;
      int v93 = v474;
      v474[14] = v542;
      v93[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
      swift_retain();
      uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v469;
      int v95 = v474;
      v474[16] = v543;
      v95[17] = v94;
      swift_retain();
      uint64_t v96 = v470;
      uint64_t v97 = v474;
      v474[18] = v544;
      v97[19] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v96;
      swift_retain();
      uint64_t v98 = v471;
      uint64_t v99 = v474;
      v474[20] = v545;
      v99[21] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98;
      swift_retain();
      int v100 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v473;
      uint64_t v101 = v474;
      v474[22] = v546;
      v101[23] = v100;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v476, (os_log_type_t)v477))
      {
        uint64_t v102 = v548;
        v432 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v431 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v433 = createStorage<A>(capacity:type:)(0);
        uint64_t v434 = createStorage<A>(capacity:type:)(4);
        unint64_t v435 = &v604;
        unsigned int v604 = v432;
        unint64_t v436 = &v603;
        uint64_t v603 = v433;
        uint64_t v437 = &v602;
        uint64_t v602 = v434;
        serialize(_:at:)(2, &v604);
        serialize(_:at:)(4, v435);
        v600 = v535;
        uint64_t v601 = v461;
        closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)v435, (uint64_t)v436, (uint64_t)v437);
        uint64_t v438 = v102;
        if (v102)
        {
          __break(1u);
        }
        else
        {
          v600 = v536;
          uint64_t v601 = v462;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v430 = 0;
          uint64_t v103 = v430;
          v600 = v537;
          uint64_t v601 = v463;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v429 = v103;
          v600 = v538;
          uint64_t v601 = v464;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v428 = 0;
          v600 = v539;
          uint64_t v601 = v465;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v427 = 0;
          v600 = v540;
          uint64_t v601 = v466;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v426 = 0;
          v600 = v541;
          uint64_t v601 = v467;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v425 = 0;
          v600 = v542;
          uint64_t v601 = v468;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v424 = 0;
          v600 = v543;
          uint64_t v601 = v469;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v423 = 0;
          v600 = v544;
          uint64_t v601 = v470;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v422 = 0;
          v600 = v545;
          uint64_t v601 = v471;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          uint64_t v421 = 0;
          v600 = v546;
          uint64_t v601 = v473;
          closure #1 in osLogInternal(_:log:type:)(&v600, (uint64_t)&v604, (uint64_t)&v603, (uint64_t)&v602);
          _os_log_impl(&dword_250C36000, v476, (os_log_type_t)v477, "HeadphoneManager: %s: PropertyWrapper (Set Remote) %s value:%s id: %s", v432, v448);
          destroyStorage<A>(_:count:)(v433, 0, v431);
          destroyStorage<A>(_:count:)(v434, 4, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x253386220](v432, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v558 + 8))(v566, v557);
      outlined init with copy of HearingRecordConfig<A, B>(v587, v588, v596, v593);
      uint64_t v409 = *(void *)(v588 + v593[17]);
      swift_retain();
      outlined destroy of HearingRecordConfig<A, B>(v588, v596);
      id v420 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v550 + 32))(v409, v595, v596, v552);
      swift_release();
      id v612 = v420;
      unint64_t v410 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
      id v104 = v410;
      int v105 = v410;
      id v419 = (id)(*(uint64_t (**)(void *))((*v104 & *MEMORY[0x263F8EED0]) + 0x138))(v105);

      uint64_t v106 = (*(uint64_t (**)(uint64_t))(v550 + 24))(v552);
      uint64_t v411 = v107;
      id v418 = (id)MEMORY[0x253385EB0](v106);
      swift_bridgeObjectRelease();
      swift_retain();
      v584(v575, (uint64_t)v594, v596);
      id v108 = v420;
      v584(v572, v595, v596);
      swift_unknownObjectRetain();
      uint64_t v109 = v439;
      uint64_t v412 = (v109 + 64) & ~v109;
      unint64_t v413 = (v412 + v574 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v414 = (v413 + 8 + v109) & ~v109;
      unint64_t v415 = (v414 + v574 + 7) & 0xFFFFFFFFFFFFFFF8;
      id v110 = (void *)swift_allocObject();
      uint64_t v111 = v550;
      uint64_t v112 = v444;
      uint64_t v113 = v597;
      uint64_t v114 = v412;
      id v115 = v575;
      id v116 = v441;
      uint64_t v117 = v596;
      uint64_t v118 = v577;
      int v416 = (char *)v110;
      v110[2] = v552;
      v110[3] = v117;
      v110[4] = v111;
      v110[5] = v112;
      v110[6] = v113;
      v110[7] = v118;
      v116((char *)v110 + v114, v115);
      uint64_t v119 = v414;
      char v120 = v572;
      uint64_t v121 = (void (*)(char *, char *, uint64_t))v441;
      uint64_t v122 = v596;
      uint64_t v123 = v416;
      *(void *)&v416[v413] = v420;
      v121(&v123[v119], v120, v122);
      uint64_t v124 = v547;
      uint64_t v125 = v416;
      *(void *)&v416[v415] = v578;
      v610 = v124;
      Builtin::Word v611 = v125;
      uint64_t v605 = MEMORY[0x263EF8330];
      int v606 = 1107296256;
      int v607 = 0;
      unint64_t v608 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
      v609 = &block_descriptor_2;
      int v417 = _Block_copy(&v605);
      swift_release();
      objc_msgSend(v419, sel_modifyDeviceConfig_identifier_completion_, v420, v418, v417);
      _Block_release(v417);

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v582 + 8))(v594, v596);
      swift_release();
    }
    else
    {
      (*(void (**)(void *__return_ptr, uint64_t))(v550 + 16))(v623, v552);
      int v408 = &v622;
      char v622 = v623[0];
      Builtin::Word v407 = &v621;
      char v621 = 3;
      lazy protocol witness table accessor for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState();
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v582 + 8))(v594, v596);
        swift_release();
      }
      else
      {
        id v406 = (uint64_t *)(v587 + v593[15]);
        if (*v406)
        {
          uint64_t v405 = *v406;
          swift_retain();
          CurrentValueSubject.send(_:)();
          swift_release();
        }
        dispatch thunk of ObservableObject.objectWillChange.getter();
        type metadata accessor for ObservableObjectPublisher();
        if (swift_dynamicCast()) {
          unint64_t v404 = v592[7];
        }
        else {
          unint64_t v404 = 0;
        }
        unint64_t v403 = v404;
        if (v404)
        {
          uint64_t v402 = v403;
          int v401 = v403;
          uint64_t v615 = v403;
          ObservableObjectPublisher.send()();
          swift_release();
        }
        uint64_t v126 = v564;
        uint64_t v127 = Logger.shared.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v558 + 16))(v126, v127, v557);
        swift_bridgeObjectRetain();
        uint64_t v377 = 32;
        uint64_t v378 = 7;
        uint64_t v128 = swift_allocObject();
        uint64_t v129 = v591;
        uint64_t v130 = v595;
        uint64_t v131 = v584;
        uint64_t v132 = v596;
        uint64_t v133 = v128;
        unint64_t v134 = v575;
        uint64_t v368 = v133;
        *(void *)(v133 + 16) = v590;
        *(void *)(v133 + 24) = v129;
        v131(v134, v130, v132);
        unint64_t v359 = (*(unsigned __int8 *)(v570 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v570 + 80);
        uint64_t v135 = (void *)swift_allocObject();
        unint64_t v136 = v593;
        unint64_t v137 = v359;
        uint64_t v138 = v582;
        int v139 = v575;
        uint64_t v140 = v596;
        uint64_t v141 = v550;
        uint64_t v142 = v597;
        Builtin::Word v360 = v135;
        v135[2] = v552;
        v135[3] = v140;
        v135[4] = v141;
        uint64_t v362 = *((void *)v136 + 5);
        v135[5] = v362;
        v135[6] = v142;
        (*(void (**)(char *, char *))(v138 + 32))((char *)v135 + v137, v139);
        swift_retain();
        uint64_t v143 = swift_allocObject();
        unint64_t v144 = v500;
        uint64_t v145 = v362;
        unint64_t v146 = (void *)v143;
        uint64_t v147 = v360;
        uint64_t v370 = v146;
        v146[2] = v596;
        v146[3] = v145;
        v146[4] = v144;
        v146[5] = v147;
        swift_release();
        swift_unknownObjectRetain();
        uint64_t v361 = 64;
        unint64_t v148 = (void *)swift_allocObject();
        uint64_t v149 = v578;
        uint64_t v150 = v596;
        uint64_t v151 = v550;
        uint64_t v152 = v362;
        uint64_t v153 = v597;
        Swift::String v372 = v148;
        v148[2] = v552;
        v148[3] = v150;
        v148[4] = v151;
        v148[5] = v152;
        v148[6] = v153;
        v148[7] = v149;
        swift_retain();
        uint64_t v154 = (void *)swift_allocObject();
        uint64_t v155 = v596;
        uint64_t v156 = v550;
        uint64_t v157 = v362;
        uint64_t v158 = v597;
        uint64_t v159 = v577;
        unint64_t v379 = v154;
        v154[2] = v552;
        v154[3] = v155;
        v154[4] = v156;
        v154[5] = v157;
        v154[6] = v158;
        v154[7] = v159;
        v399 = Logger.logObject.getter();
        int v400 = static os_log_type_t.default.getter();
        Swift::String v365 = &v620;
        v592[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))52;
        unint64_t v363 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v364 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v366 = *((_DWORD *)v592 + 13);
        uint64_t v375 = 17;
        uint64_t v381 = swift_allocObject();
        int v374 = 32;
        *(unsigned char *)(v381 + 16) = 32;
        uint64_t v382 = swift_allocObject();
        int v376 = 8;
        *(unsigned char *)(v382 + 16) = 8;
        uint64_t v160 = swift_allocObject();
        uint64_t v367 = v160;
        *(void *)(v160 + 16) = v501;
        *(void *)(v160 + 24) = 0;
        uint64_t v161 = swift_allocObject();
        uint64_t v162 = v367;
        unsigned int v383 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v161;
        *(void *)(v161 + 16) = v502;
        *(void *)(v161 + 24) = v162;
        uint64_t v384 = swift_allocObject();
        *(unsigned char *)(v384 + 16) = v374;
        uint64_t v385 = swift_allocObject();
        *(unsigned char *)(v385 + 16) = v376;
        uint64_t v163 = swift_allocObject();
        uint64_t v164 = v368;
        uint64_t v369 = v163;
        *(void *)(v163 + 16) = v503;
        *(void *)(v163 + 24) = v164;
        uint64_t v165 = swift_allocObject();
        uint64_t v166 = v369;
        int v386 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v165;
        *(void *)(v165 + 16) = v504;
        *(void *)(v165 + 24) = v166;
        uint64_t v387 = swift_allocObject();
        *(unsigned char *)(v387 + 16) = v374;
        uint64_t v388 = swift_allocObject();
        *(unsigned char *)(v388 + 16) = v376;
        uint64_t v167 = swift_allocObject();
        id v168 = v370;
        uint64_t v371 = v167;
        *(void *)(v167 + 16) = v505;
        *(void *)(v167 + 24) = v168;
        uint64_t v169 = swift_allocObject();
        uint64_t v170 = v371;
        uint64_t v389 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v169;
        *(void *)(v169 + 16) = v506;
        *(void *)(v169 + 24) = v170;
        uint64_t v390 = swift_allocObject();
        *(unsigned char *)(v390 + 16) = v374;
        uint64_t v391 = swift_allocObject();
        *(unsigned char *)(v391 + 16) = v376;
        uint64_t v171 = swift_allocObject();
        id v172 = v372;
        uint64_t v373 = v171;
        *(void *)(v171 + 16) = v507;
        *(void *)(v171 + 24) = v172;
        uint64_t v173 = swift_allocObject();
        uint64_t v174 = v373;
        uint64_t v392 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v173;
        *(void *)(v173 + 16) = v508;
        *(void *)(v173 + 24) = v174;
        uint64_t v393 = swift_allocObject();
        *(unsigned char *)(v393 + 16) = v374;
        uint64_t v394 = swift_allocObject();
        *(unsigned char *)(v394 + 16) = v376;
        uint64_t v175 = swift_allocObject();
        signed __int8 v176 = v379;
        uint64_t v380 = v175;
        *(void *)(v175 + 16) = v509;
        *(void *)(v175 + 24) = v176;
        uint64_t v177 = swift_allocObject();
        uint64_t v178 = v380;
        int v396 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v177;
        *(void *)(v177 + 16) = v510;
        *(void *)(v177 + 24) = v178;
        uint64_t v398 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v395 = _allocateUninitializedArray<A>(_:)();
        uint64_t v397 = v179;
        swift_retain();
        uint64_t v180 = v381;
        signed __int8 v181 = v397;
        *uint64_t v397 = v511;
        v181[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v180;
        swift_retain();
        uint64_t v182 = v382;
        unsigned __int8 v183 = v397;
        v397[2] = v512;
        v183[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v182;
        swift_retain();
        signed __int8 v184 = v383;
        signed __int8 v185 = v397;
        v397[4] = v513;
        v185[5] = v184;
        swift_retain();
        uint64_t v186 = v384;
        unsigned __int8 v187 = v397;
        v397[6] = v514;
        v187[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v186;
        swift_retain();
        uint64_t v188 = v385;
        signed __int8 v189 = v397;
        v397[8] = v515;
        v189[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v188;
        swift_retain();
        char v190 = v386;
        unsigned __int8 v191 = v397;
        v397[10] = v516;
        v191[11] = v190;
        swift_retain();
        uint64_t v192 = v387;
        signed __int8 v193 = v397;
        v397[12] = v517;
        v193[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v192;
        swift_retain();
        uint64_t v194 = v388;
        unsigned __int8 v195 = v397;
        v397[14] = v518;
        v195[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v194;
        swift_retain();
        signed __int8 v196 = v389;
        uint64_t v197 = v397;
        v397[16] = v519;
        v197[17] = v196;
        swift_retain();
        uint64_t v198 = v390;
        uint64_t v199 = v397;
        v397[18] = v520;
        v199[19] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v198;
        swift_retain();
        uint64_t v200 = v391;
        Swift::String v201 = v397;
        v397[20] = v521;
        v201[21] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v200;
        swift_retain();
        uint64_t v202 = v392;
        uint32_t v203 = v397;
        v397[22] = v522;
        v203[23] = v202;
        swift_retain();
        uint64_t v204 = v393;
        uint64_t v205 = v397;
        v397[24] = v523;
        v205[25] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v204;
        swift_retain();
        uint64_t v206 = v394;
        uint64_t v207 = v397;
        v397[26] = v524;
        v207[27] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v206;
        swift_retain();
        uint64_t v208 = v396;
        uint64_t v209 = v397;
        v397[28] = v525;
        v209[29] = v208;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v399, (os_log_type_t)v400))
        {
          uint64_t v210 = v548;
          uint32_t v352 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v351 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v353 = createStorage<A>(capacity:type:)(0);
          uint64_t v211 = createStorage<A>(capacity:type:)(5);
          uint64_t v212 = v353;
          uint64_t v213 = v592;
          uint64_t v354 = v211;
          uint64_t v355 = &v619;
          v592[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v352;
          uint64_t v356 = &v618;
          v213[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v212;
          uint64_t v357 = &v617;
          v213[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v211;
          serialize(_:at:)(2, &v619);
          serialize(_:at:)(5, v355);
          uint64_t v214 = v355;
          uint64_t v215 = (uint64_t)v356;
          uint64_t v216 = (uint64_t)v357;
          v616[0] = v511;
          v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v381;
          closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)v214, v215, v216);
          uint64_t v358 = v210;
          if (v210)
          {
            __break(1u);
          }
          else
          {
            v616[0] = v512;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v382;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v350 = 0;
            uint64_t v217 = v350;
            v616[0] = v513;
            v592[1] = v383;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v349 = v217;
            v616[0] = v514;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v384;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v348 = 0;
            v616[0] = v515;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v385;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v347 = 0;
            v616[0] = v516;
            v592[1] = v386;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v346 = 0;
            v616[0] = v517;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v387;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v345 = 0;
            v616[0] = v518;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v388;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v344 = 0;
            v616[0] = v519;
            v592[1] = v389;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v343 = 0;
            v616[0] = v520;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v390;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v342 = 0;
            v616[0] = v521;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v391;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v341 = 0;
            v616[0] = v522;
            v592[1] = v392;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v340 = 0;
            v616[0] = v523;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v393;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v339 = 0;
            v616[0] = v524;
            v592[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v394;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            uint64_t v338 = 0;
            v616[0] = v525;
            v592[1] = v396;
            closure #1 in osLogInternal(_:log:type:)(v616, (uint64_t)&v619, (uint64_t)&v618, (uint64_t)&v617);
            _os_log_impl(&dword_250C36000, v399, (os_log_type_t)v400, "HeadphoneManager: %s: PropertyWrapper (Set) %s value:%s id: %s %s", v352, v366);
            destroyStorage<A>(_:count:)(v353, 0, v351);
            destroyStorage<A>(_:count:)(v354, 5, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x253386220](v352, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }

        (*(void (**)(char *, uint64_t))(v558 + 8))(v564, v557);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v582 + 8))(v594, v596);
        swift_release();
      }
    }
  }
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v582 + 8))(v595, v596);
}

uint64_t outlined init with copy of HearingRecordConfig<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  (*(void (**)(void))(*(void *)(a3 - 8) + 16))();
  uint64_t v5 = a4[15];
  uint64_t v6 = *(void *)(a1 + v5);
  swift_retain();
  *(void *)(a2 + v5) = v6;
  uint64_t v7 = a4[16];
  uint64_t v8 = *(void *)(a1 + v7);
  swift_retain();
  *(void *)(a2 + v7) = v8;
  uint64_t v10 = a4[17];
  uint64_t v11 = *(void *)(a1 + v10);
  swift_retain();
  uint64_t result = a2;
  *(void *)(a2 + v10) = v11;
  *(unsigned char *)(a2 + a4[18]) = *(unsigned char *)(a1 + a4[18]);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HearingRecordConfig<A, B>(uint64_t a1, uint64_t a2)
{
}

uint64_t implicit closure #1 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #2 in static HearingRecordConfig.subscript.setter()
{
}

uint64_t sub_250CC3824()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in static HearingRecordConfig.subscript.setter()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #2 in static HearingRecordConfig.subscript.setter();
  return result;
}

uint64_t implicit closure #3 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_250CC38C0()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X8>)
{
  return implicit closure #3 in static HearingRecordConfig.subscript.setter(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)), *(void *)(v1 + 24), a1);
}

uint64_t implicit closure #5 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #6 in static HearingRecordConfig.subscript.setter()
{
}

uint64_t implicit closure #7 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1);
}

uint64_t implicit closure #8 in static HearingRecordConfig.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(a4 + 24))(a2);
}

uint64_t implicit closure #9 in static HearingRecordConfig.subscript.setter()
{
  uint64_t v1 = type metadata accessor for HearingRecordConfig();
  uint64_t v2 = swift_projectBox();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + *(int *)(v1 + 60));
  swift_retain();
  swift_endAccess();
  outlined destroy of HeadphonePropertyWrapperPublisher<B>?();
  if (v3) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("publisher exists", 0x10uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("no publisher", 0xCuLL, 1)._countAndFlagsBits;
  }
}

uint64_t implicit closure #10 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #11 in static HearingRecordConfig.subscript.setter()
{
}

uint64_t implicit closure #12 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1);
}

uint64_t implicit closure #13 in static HearingRecordConfig.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(a4 + 24))(a2);
}

uint64_t closure #1 in static HearingRecordConfig.subscript.setter(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v268 = a1;
  uint64_t v261 = a2;
  uint64_t v263 = a3;
  id v264 = a4;
  uint64_t v265 = a5;
  uint64_t v266 = a6;
  uint64_t v248 = a7;
  uint64_t v249 = a8;
  uint64_t v258 = a9;
  uint64_t v259 = a10;
  uint64_t v250 = a11;
  uint64_t v251 = 0;
  uint64_t v204 = implicit closure #1 in closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v205 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v206 = implicit closure #2 in closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v207 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  uint64_t v208 = partial apply for implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v209 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v210 = partial apply for implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v211 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v214 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v215 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v221 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v224 = implicit closure #5 in closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v225 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v226 = implicit closure #6 in closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v227 = _sSiIegd_SiIegr_TRTA_2;
  uint64_t v228 = partial apply for implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter;
  uint64_t v229 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v231 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v232 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v234 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
  uint64_t v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v238 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v297 = 0;
  uint64_t v291 = 0;
  uint64_t v290 = 0;
  id v289 = 0;
  uint64_t v288 = 0;
  uint64_t v287 = 0;
  uint64_t v283 = 0;
  uint64_t v239 = 0;
  id v277 = 0;
  uint64_t v299 = a7;
  uint64_t v298 = a8;
  uint64_t v240 = *(void *)(a9 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v242 = (*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = MEMORY[0x270FA5388](0, v11);
  uint64_t v243 = (char *)v103 - v242;
  uint64_t v244 = *(void *)(v13 - 8);
  uint64_t v245 = v13 - 8;
  unint64_t v246 = (*(void *)(v244 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v12, (char *)v103 - v242);
  uint64_t v247 = (char *)v103 - v246;
  uint64_t v252 = type metadata accessor for Logger();
  uint64_t v253 = *(void *)(v252 - 8);
  uint64_t v254 = v252 - 8;
  uint64_t v256 = *(void *)(v253 + 64);
  unint64_t v255 = (v256 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v251, v14);
  uint64_t v257 = (char *)v103 - v255;
  MEMORY[0x270FA5388](v15, (char *)v103 - v255);
  uint64_t v260 = (char *)v103 - v16;
  id v297 = v268;
  uint64_t v292 = v17;
  uint64_t v293 = v18;
  uint64_t v294 = v258;
  uint64_t v295 = v259;
  uint64_t v296 = v19;
  uint64_t v262 = type metadata accessor for HearingRecordConfig();
  uint64_t v267 = swift_projectBox();
  uint64_t v291 = v267;
  uint64_t v290 = v263;
  id v289 = v264;
  uint64_t v288 = v265;
  uint64_t v287 = v266;
  id v20 = v268;
  if (v268)
  {
    id v203 = v268;
    uint64_t v53 = v257;
    id v142 = v268;
    id v277 = v268;
    (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v247, v263, v249);
    uint64_t v141 = &v276;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v244 + 40))(v267, v247, v249);
    swift_endAccess();
    uint64_t v54 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v253 + 16))(v53, v54, v252);
    id v55 = v142;
    uint64_t v143 = 24;
    uint64_t v156 = 7;
    uint64_t v56 = swift_allocObject();
    id v57 = v264;
    uint64_t v150 = v56;
    *(void *)(v56 + 16) = v142;
    id v58 = v57;
    uint64_t v157 = swift_allocObject();
    *(void *)(v157 + 16) = v264;
    uint64_t v174 = Logger.logObject.getter();
    int v175 = static os_log_type_t.error.getter();
    unint64_t v146 = &v274;
    uint64_t v274 = 42;
    unint64_t v144 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v145 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v147 = v275;
    uint64_t v153 = 17;
    uint64_t v159 = swift_allocObject();
    int v152 = 32;
    *(unsigned char *)(v159 + 16) = 32;
    uint64_t v160 = swift_allocObject();
    int v154 = 8;
    *(unsigned char *)(v160 + 16) = 8;
    uint64_t v155 = 32;
    uint64_t v59 = swift_allocObject();
    uint64_t v148 = v59;
    *(void *)(v59 + 16) = v204;
    *(void *)(v59 + 24) = 0;
    uint64_t v60 = swift_allocObject();
    uint64_t v61 = v148;
    uint64_t v161 = v60;
    *(void *)(v60 + 16) = v205;
    *(void *)(v60 + 24) = v61;
    uint64_t v162 = swift_allocObject();
    *(unsigned char *)(v162 + 16) = 0;
    uint64_t v163 = swift_allocObject();
    *(unsigned char *)(v163 + 16) = v154;
    uint64_t v62 = swift_allocObject();
    uint64_t v149 = v62;
    *(void *)(v62 + 16) = v206;
    *(void *)(v62 + 24) = 0;
    uint64_t v63 = swift_allocObject();
    uint64_t v64 = v149;
    uint64_t v164 = v63;
    *(void *)(v63 + 16) = v207;
    *(void *)(v63 + 24) = v64;
    uint64_t v165 = swift_allocObject();
    *(unsigned char *)(v165 + 16) = v152;
    uint64_t v166 = swift_allocObject();
    *(unsigned char *)(v166 + 16) = v154;
    uint64_t v65 = swift_allocObject();
    uint64_t v66 = v150;
    uint64_t v151 = v65;
    *(void *)(v65 + 16) = v208;
    *(void *)(v65 + 24) = v66;
    uint64_t v67 = swift_allocObject();
    uint64_t v68 = v151;
    uint64_t v167 = v67;
    *(void *)(v67 + 16) = v209;
    *(void *)(v67 + 24) = v68;
    uint64_t v168 = swift_allocObject();
    *(unsigned char *)(v168 + 16) = v152;
    uint64_t v169 = swift_allocObject();
    *(unsigned char *)(v169 + 16) = v154;
    uint64_t v69 = swift_allocObject();
    uint64_t v70 = v157;
    uint64_t v158 = v69;
    *(void *)(v69 + 16) = v210;
    *(void *)(v69 + 24) = v70;
    uint64_t v71 = swift_allocObject();
    uint64_t v72 = v158;
    uint64_t v171 = v71;
    *(void *)(v71 + 16) = v211;
    *(void *)(v71 + 24) = v72;
    uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v170 = _allocateUninitializedArray<A>(_:)();
    id v172 = v73;
    swift_retain();
    uint64_t v74 = v159;
    uint64_t v75 = v172;
    *id v172 = v212;
    v75[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v74;
    swift_retain();
    uint64_t v76 = v160;
    uint64_t v77 = v172;
    void v172[2] = v213;
    v77[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v76;
    swift_retain();
    uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v161;
    uint64_t v79 = v172;
    v172[4] = v214;
    v79[5] = v78;
    swift_retain();
    uint64_t v80 = v162;
    uint64_t v81 = v172;
    v172[6] = v215;
    v81[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v80;
    swift_retain();
    uint64_t v82 = v163;
    uint64_t v83 = v172;
    v172[8] = v216;
    v83[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
    swift_retain();
    uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v164;
    uint64_t v85 = v172;
    v172[10] = v217;
    v85[11] = v84;
    swift_retain();
    uint64_t v86 = v165;
    uint64_t v87 = v172;
    v172[12] = v218;
    v87[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v86;
    swift_retain();
    uint64_t v88 = v166;
    int v89 = v172;
    v172[14] = v219;
    v89[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
    swift_retain();
    uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v167;
    int v91 = v172;
    v172[16] = v220;
    v91[17] = v90;
    swift_retain();
    uint64_t v92 = v168;
    int v93 = v172;
    v172[18] = v221;
    v93[19] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
    swift_retain();
    uint64_t v94 = v169;
    int v95 = v172;
    v172[20] = v222;
    v95[21] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v94;
    swift_retain();
    uint64_t v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v171;
    uint64_t v97 = v172;
    v172[22] = v223;
    v97[23] = v96;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v174, (os_log_type_t)v175))
    {
      uint64_t v98 = v239;
      unint64_t v134 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v135 = createStorage<A>(capacity:type:)(0);
      uint64_t v136 = createStorage<A>(capacity:type:)(3);
      unint64_t v137 = &v273;
      uint64_t v273 = v134;
      uint64_t v138 = &v272;
      uint64_t v272 = v135;
      int v139 = &v271;
      uint64_t v271 = v136;
      serialize(_:at:)(2, &v273);
      serialize(_:at:)(4, v137);
      v269 = v212;
      uint64_t v270 = v159;
      closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)v137, (uint64_t)v138, (uint64_t)v139);
      uint64_t v140 = v98;
      if (v98)
      {
        __break(1u);
      }
      else
      {
        v269 = v213;
        uint64_t v270 = v160;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v132 = 0;
        uint64_t v99 = v132;
        v269 = v214;
        uint64_t v270 = v161;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v131 = v99;
        v269 = v215;
        uint64_t v270 = v162;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v130 = 0;
        v269 = v216;
        uint64_t v270 = v163;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v129 = 0;
        v269 = v217;
        uint64_t v270 = v164;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v128 = 0;
        v269 = v218;
        uint64_t v270 = v165;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v127 = 0;
        v269 = v219;
        uint64_t v270 = v166;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v126 = 0;
        v269 = v220;
        uint64_t v270 = v167;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v125 = 0;
        v269 = v221;
        uint64_t v270 = v168;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v124 = 0;
        v269 = v222;
        uint64_t v270 = v169;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        uint64_t v123 = 0;
        v269 = v223;
        uint64_t v270 = v171;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        _os_log_impl(&dword_250C36000, v174, (os_log_type_t)v175, "HeadphoneManager: %s: %ld Failed to update AAD Device Config, Error: %s %s", v134, v147);
        destroyStorage<A>(_:count:)(v135, 0, v133);
        destroyStorage<A>(_:count:)(v136, 3, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v134, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v253 + 8))(v257, v252);
  }
  else
  {
    uint64_t v21 = v260;
    uint64_t v22 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v253 + 16))(v21, v22, v252);
    id v23 = v264;
    uint64_t v186 = 7;
    uint64_t v187 = swift_allocObject();
    *(void *)(v187 + 16) = v264;
    Swift::String v201 = Logger.logObject.getter();
    int v202 = static os_log_type_t.default.getter();
    uint64_t v178 = &v285;
    uint64_t v185 = 32;
    uint64_t v285 = 32;
    unint64_t v176 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v177 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v179 = v286;
    uint64_t v183 = 17;
    uint64_t v189 = swift_allocObject();
    int v182 = 32;
    *(unsigned char *)(v189 + 16) = 32;
    uint64_t v190 = swift_allocObject();
    int v184 = 8;
    *(unsigned char *)(v190 + 16) = 8;
    uint64_t v24 = swift_allocObject();
    uint64_t v180 = v24;
    *(void *)(v24 + 16) = v224;
    *(void *)(v24 + 24) = 0;
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v180;
    uint64_t v191 = v25;
    *(void *)(v25 + 16) = v225;
    *(void *)(v25 + 24) = v26;
    uint64_t v192 = swift_allocObject();
    *(unsigned char *)(v192 + 16) = 0;
    uint64_t v193 = swift_allocObject();
    *(unsigned char *)(v193 + 16) = v184;
    uint64_t v27 = swift_allocObject();
    uint64_t v181 = v27;
    *(void *)(v27 + 16) = v226;
    *(void *)(v27 + 24) = 0;
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v181;
    uint64_t v194 = v28;
    *(void *)(v28 + 16) = v227;
    *(void *)(v28 + 24) = v29;
    uint64_t v195 = swift_allocObject();
    *(unsigned char *)(v195 + 16) = v182;
    uint64_t v196 = swift_allocObject();
    *(unsigned char *)(v196 + 16) = v184;
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = v187;
    uint64_t v188 = v30;
    *(void *)(v30 + 16) = v228;
    *(void *)(v30 + 24) = v31;
    uint64_t v32 = swift_allocObject();
    uint64_t v33 = v188;
    uint64_t v198 = v32;
    *(void *)(v32 + 16) = v229;
    *(void *)(v32 + 24) = v33;
    uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v197 = _allocateUninitializedArray<A>(_:)();
    uint64_t v199 = v34;
    swift_retain();
    uint64_t v35 = v189;
    uint64_t v36 = v199;
    *uint64_t v199 = v230;
    v36[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
    swift_retain();
    uint64_t v37 = v190;
    uint64_t v38 = v199;
    v199[2] = v231;
    v38[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
    swift_retain();
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v191;
    uint64_t v40 = v199;
    v199[4] = v232;
    v40[5] = v39;
    swift_retain();
    uint64_t v41 = v192;
    id v42 = v199;
    v199[6] = v233;
    v42[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
    swift_retain();
    uint64_t v43 = v193;
    uint64_t v44 = v199;
    v199[8] = v234;
    v44[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
    swift_retain();
    unint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v194;
    uint64_t v46 = v199;
    v199[10] = v235;
    v46[11] = v45;
    swift_retain();
    uint64_t v47 = v195;
    uint64_t v48 = v199;
    v199[12] = v236;
    v48[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
    swift_retain();
    uint64_t v49 = v196;
    uint64_t v50 = v199;
    v199[14] = v237;
    v50[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v49;
    swift_retain();
    uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v198;
    uint64_t v52 = v199;
    v199[16] = v238;
    v52[17] = v51;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v201, (os_log_type_t)v202))
    {
      uint64_t v100 = v239;
      id v116 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v117 = createStorage<A>(capacity:type:)(0);
      uint64_t v118 = createStorage<A>(capacity:type:)(2);
      uint64_t v119 = &v282;
      char v282 = v116;
      char v120 = &v281;
      uint64_t v281 = v117;
      uint64_t v121 = &v280;
      uint64_t v280 = v118;
      serialize(_:at:)(2, &v282);
      serialize(_:at:)(3, v119);
      uint64_t v278 = v230;
      uint64_t v279 = v189;
      closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)v119, (uint64_t)v120, (uint64_t)v121);
      uint64_t v122 = v100;
      if (v100)
      {
        __break(1u);
      }
      else
      {
        uint64_t v278 = v231;
        uint64_t v279 = v190;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        uint64_t v114 = 0;
        uint64_t v101 = v114;
        uint64_t v278 = v232;
        uint64_t v279 = v191;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        uint64_t v113 = v101;
        uint64_t v278 = v233;
        uint64_t v279 = v192;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        uint64_t v112 = 0;
        uint64_t v278 = v234;
        uint64_t v279 = v193;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        uint64_t v111 = 0;
        uint64_t v278 = v235;
        uint64_t v279 = v194;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        uint64_t v110 = 0;
        uint64_t v278 = v236;
        uint64_t v279 = v195;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        uint64_t v109 = 0;
        uint64_t v278 = v237;
        uint64_t v279 = v196;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        uint64_t v108 = 0;
        uint64_t v278 = v238;
        uint64_t v279 = v198;
        closure #1 in osLogInternal(_:log:type:)(&v278, (uint64_t)&v282, (uint64_t)&v281, (uint64_t)&v280);
        _os_log_impl(&dword_250C36000, v201, (os_log_type_t)v202, "HeadphoneManager: %s: %ld  Successfully Updated AAD Device Config: %s", v116, v179);
        destroyStorage<A>(_:count:)(v117, 0, v115);
        destroyStorage<A>(_:count:)(v118, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v116, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v253 + 8))(v260, v252);
  }
  swift_beginAccess();
  uint64_t v107 = (uint64_t *)(v267 + *(int *)(v262 + 60));
  if (*v107)
  {
    uint64_t v106 = *v107;
    swift_retain();
    swift_endAccess();
    CurrentValueSubject.send(_:)();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
  dispatch thunk of ObservableObject.objectWillChange.getter();
  type metadata accessor for ObservableObjectPublisher();
  uint64_t result = swift_dynamicCast();
  if (result) {
    uint64_t v105 = v284;
  }
  else {
    uint64_t v105 = 0;
  }
  uint64_t v104 = v105;
  if (v105)
  {
    v103[1] = v104;
    v103[0] = v104;
    uint64_t v283 = v104;
    ObservableObjectPublisher.send()();
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #1 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return 59;
}

uint64_t implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_debugDescription);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t implicit closure #5 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #6 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return 61;
}

uint64_t implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_debugDescription);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

void (*static HearingRecordConfig.subscript.modify(void *a1, uint64_t a2, void *a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v8 = malloc(0x38uLL);
  *a1 = v8;
  id v8[2] = a4;
  v8[1] = a3;
  void *v8 = a2;
  uint64_t v4 = *(void *)(*a3 + *MEMORY[0x263F8E100] + 8);
  void v8[3] = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  v8[4] = v6;
  size_t __size = *(void *)(v6 + 64);
  v8[5] = malloc(__size);
  uint64_t v13 = malloc(__size);
  v8[6] = v13;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(a3, (uint64_t)v13);
  return static HearingRecordConfig.subscript.modify;
}

void static HearingRecordConfig.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v11 = *a1;
  if (a2)
  {
    uint64_t v7 = *(void **)(v11 + 48);
    uint64_t v8 = *(void **)(v11 + 40);
    uint64_t v3 = *(void *)(v11 + 24);
    uint64_t v4 = *(void **)(v11 + 16);
    uint64_t v5 = *(void **)(v11 + 8);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v11;
    uint64_t v2 = *(void *)(v11 + 32);
    (*(void (**)(void))(v2 + 16))();
    static HearingRecordConfig.subscript.setter((uint64_t)v8, v6, v5, v4);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v7, v3);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    free(v7);
    free(v8);
  }
  else
  {
    uint64_t v9 = *(void **)(v11 + 48);
    uint64_t v10 = *(void **)(v11 + 40);
    static HearingRecordConfig.subscript.setter((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v11, *(void **)(v11 + 8), *(void **)(v11 + 16));
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    free(v9);
    free(v10);
  }
  free((void *)v11);
}

void HearingRecordConfig.wrappedValue.getter()
{
}

void key path getter for HearingRecordConfig.wrappedValue : <A, B>HearingRecordConfig<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v14 = a1;
  uint64_t v4 = (uint64_t *)(a2 + a3 - 40);
  uint64_t v29 = *v4;
  uint64_t v20 = v4[1];
  uint64_t v28 = v20;
  uint64_t v12 = v4[2];
  uint64_t v13 = v4[3];
  uint64_t v16 = *(void *)(v20 - 8);
  uint64_t v17 = v20 - 8;
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v19 = (char *)&v12 - v5;
  uint64_t v23 = v6;
  uint64_t v24 = v20;
  uint64_t v25 = v12;
  uint64_t v26 = v13;
  uint64_t v27 = v7;
  uint64_t v21 = type metadata accessor for HearingRecordConfig();
  unint64_t v15 = (*(void *)(*(void *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v14, v8);
  uint64_t v22 = (char *)&v12 - v15;
  outlined init with copy of HearingRecordConfig<A, B>(v9, (uint64_t)&v12 - v15, v10, v11);
  HearingRecordConfig.wrappedValue.getter();
}

uint64_t sub_250CC5D94()
{
  (*(void (**)(void, void, void))(*(void *)(v0 - 128) + 32))(*(void *)(v0 - 112), *(void *)(v0 - 104), *(void *)(v0 - 96));
  uint64_t result = *(void *)(v0 - 80);
  outlined destroy of HearingRecordConfig<A, B>(result, *(void *)(v0 - 96));
  return result;
}

void key path setter for HearingRecordConfig.wrappedValue : <A, B>HearingRecordConfig<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  uint64_t v4 = (uint64_t *)(a3 + a4 - 40);
  uint64_t v8 = *v4;
  uint64_t v20 = v8;
  uint64_t v9 = v4[1];
  uint64_t v19 = v9;
  uint64_t v10 = v4[2];
  uint64_t v11 = v4[3];
  uint64_t v12 = v4[4];
  uint64_t v7 = *(void *)(v9 - 8);
  unint64_t v6 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v13 = (char *)&v5 - v6;
  (*(void (**)(char *))(v7 + 16))((char *)&v5 - v6);
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t v18 = v12;
  type metadata accessor for HearingRecordConfig();
  HearingRecordConfig.wrappedValue.setter();
}

void HearingRecordConfig.wrappedValue.setter()
{
}

void HearingRecordConfig.wrappedValue.modify(void *a1, uint64_t a2)
{
  unint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[1] = v2;
  *unint64_t v6 = a2;
  uint64_t v3 = *(void *)(a2 + 24);
  void v6[2] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v6[3] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[4] = malloc(__size);
  v6[5] = malloc(__size);
  HearingRecordConfig.wrappedValue.getter();
}

void (*sub_250CC6088())(uint64_t a1, char a2)
{
  return HearingRecordConfig.wrappedValue.modify;
}

void HearingRecordConfig.wrappedValue.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    HearingRecordConfig.wrappedValue.setter();
  }
  (*(void (**)(void))(*(void *)(*(void *)a1 + 24) + 16))();
  HearingRecordConfig.wrappedValue.setter();
}

void sub_250CC6174(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  (*(void (**)(uint64_t, uint64_t))(a12 + 8))(a13, a14);
  free(a15);
  free(a16);
  free(*(void **)(v16 - 48));
}

void variable initialization expression of HearingRecordConfig.publisher(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of HearingRecordConfig.objectWillChange()
{
  return 0;
}

uint64_t HearingRecordConfig.objectWillChange.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 64));
  swift_retain();
  return v3;
}

uint64_t HearingRecordConfig.objectWillChange.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  *(void *)(v2 + *(int *)(a2 + 64)) = a1;
  swift_release();
  return swift_release();
}

void (*HearingRecordConfig.objectWillChange.modify())()
{
  return HearingRecordConfig.objectWillChange.modify;
}

uint64_t HearingRecordConfig.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v11 = a3;
  uint64_t v12 = a1;
  uint64_t v14 = "Fatal error";
  uint64_t v15 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v16 = "HeadphoneManager/HearingRecordConfigurationPropertyWrapper.swift";
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v26 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v17 - 8;
  unint64_t v20 = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v21 = (uint64_t)&v6 - v20;
  uint64_t v25 = v3;
  v24[1] = *(void *)(v4 + 16);
  uint64_t v22 = *(void *)(v3 + *(int *)(v4 + 60));
  swift_retain();
  if (v22)
  {
    uint64_t v10 = v22;
    uint64_t v9 = v22;
    uint64_t v23 = v22;
    swift_retain();
    void *v11 = v9;
    return swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21, v13, v17);
    HeadphonePropertyWrapperPublisher.init(_:)(v21, v17, v24);
    *(void *)(v13 + *(int *)(v12 + 60)) = v24[0];
    swift_release();
    uint64_t v8 = *(void *)(v13 + *(int *)(v12 + 60));
    uint64_t result = swift_retain();
    if (v8)
    {
      uint64_t v7 = v8;
    }
    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    void *v11 = v7;
  }
  return result;
}

void default argument 2 of HearingRecordConfig.init(_:_:_:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t HearingRecordConfig.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a6;
  uint64_t v37 = a1;
  uint64_t v36 = a2;
  uint64_t v28 = a3;
  uint64_t v39 = a5;
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  uint64_t v42 = 0;
  char v41 = 0;
  uint64_t v51 = a4;
  uint64_t v50 = a5;
  uint64_t v34 = *(void *)(a5 - 8);
  uint64_t v35 = a5 - 8;
  unint64_t v27 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v31 = (char *)&v26 - v27;
  uint64_t v45 = v6;
  uint64_t v46 = v7;
  uint64_t v47 = v8;
  uint64_t v48 = v9;
  uint64_t v49 = v10;
  uint64_t v29 = 0;
  uint64_t v40 = (int *)type metadata accessor for HearingRecordConfig();
  unint64_t v30 = (*(void *)(*((void *)v40 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v37, v36);
  uint64_t v12 = v40;
  uint64_t v13 = (char *)&v26 - v30;
  uint64_t v38 = v13;
  uint64_t v44 = (char *)&v26 - v30;
  uint64_t v43 = v11;
  uint64_t v42 = v14;
  int v32 = *v15;
  char v41 = v32;
  *(void *)&v13[v40[15]] = v16;
  *(void *)&v13[v12[16]] = v16;
  swift_retain();
  uint64_t v17 = v31;
  uint64_t v18 = v34;
  uint64_t v19 = v36;
  uint64_t v20 = v39;
  *(void *)&v38[v40[17]] = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v19, v20);
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v38, v31, v39);
  uint64_t v21 = v33;
  uint64_t v22 = v39;
  uint64_t v23 = v40;
  uint64_t v24 = (uint64_t)v38;
  v38[v40[18]] = v32;
  outlined init with copy of HearingRecordConfig<A, B>(v24, v21, v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v39);
  swift_release();
  uint64_t result = (uint64_t)v38;
  outlined destroy of HearingRecordConfig<A, B>((uint64_t)v38, v39);
  return result;
}

uint64_t sub_250CC675C()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t implicit closure #1 in default argument 0 of fatalError(_:file:line:)()
{
  return 0;
}

uint64_t sub_250CC67FC()
{
  return swift_deallocObject();
}

unsigned char **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_250CC6830()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6864()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_3()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CC68B0()
{
  return swift_deallocObject();
}

void *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250CC68FC()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6930()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6964()
{
  return swift_deallocObject();
}

uint64_t sub_250CC69B0()
{
  return swift_deallocObject();
}

uint64_t sub_250CC69FC()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6A30()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6A64()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6AB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6AFC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in static HearingRecordConfig.subscript.setter()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #6 in static HearingRecordConfig.subscript.setter();
  return result;
}

uint64_t sub_250CC6B48()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X8>)
{
  return implicit closure #7 in static HearingRecordConfig.subscript.setter(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)), *(void *)(v1 + 24), a1);
}

uint64_t sub_250CC6C84()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v0[4], v0[5], v0[2], v0[3]);
}

{
  uint64_t *v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_250CC6CEC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in static HearingRecordConfig.subscript.setter()
{
  return implicit closure #8 in static HearingRecordConfig.subscript.setter(v0[7], v0[2], v0[3], v0[4]);
}

uint64_t sub_250CC6D68()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in static HearingRecordConfig.subscript.setter()
{
  return implicit closure #9 in static HearingRecordConfig.subscript.setter();
}

uint64_t sub_250CC6DE4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6E18()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6E4C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6E98()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6EE4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6F18()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6F4C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6F98()
{
  return swift_deallocObject();
}

uint64_t sub_250CC6FE4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7018()
{
  return swift_deallocObject();
}

uint64_t sub_250CC704C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7098()
{
  return swift_deallocObject();
}

uint64_t sub_250CC70E4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7118()
{
  return swift_deallocObject();
}

uint64_t sub_250CC714C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7198()
{
  return swift_deallocObject();
}

uint64_t sub_250CC71E4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7218()
{
  return swift_deallocObject();
}

uint64_t sub_250CC724C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7298()
{
  return swift_deallocObject();
}

uint64_t sub_250CC72E4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #11 in static HearingRecordConfig.subscript.setter()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #11 in static HearingRecordConfig.subscript.setter();
  return result;
}

uint64_t sub_250CC7330()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X8>)
{
  return implicit closure #12 in static HearingRecordConfig.subscript.setter(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)), *(void *)(v1 + 24), a1);
}

uint64_t sub_250CC746C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC74D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #13 in static HearingRecordConfig.subscript.setter()
{
  return implicit closure #13 in static HearingRecordConfig.subscript.setter(v0[7], v0[2], v0[3], v0[4]);
}

uint64_t sub_250CC7550()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7584()
{
  return swift_deallocObject();
}

uint64_t sub_250CC75B8()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7604()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7650()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7684()
{
  return swift_deallocObject();
}

uint64_t sub_250CC76B8()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7704()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7750()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7784()
{
  return swift_deallocObject();
}

uint64_t sub_250CC77B8()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7804()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7850()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7884()
{
  return swift_deallocObject();
}

uint64_t sub_250CC78B8()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7904()
{
  return swift_deallocObject();
}

uint64_t sub_250CC7950()
{
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v8 - 8);
  uint64_t v1 = *(_DWORD *)(v3 + 80);
  uint64_t v4 = (v1 + 64) & ~v1;
  unint64_t v5 = (v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (v5 + 8 + v1) & ~v1;
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v0 + v4, v8);

  v7(v0 + v6, v8);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  uint64_t v8 = v1[3];
  uint64_t v2 = *(void *)(v8 - 8);
  unint64_t v3 = (*(_DWORD *)(v2 + 80) + 64) & ~(unint64_t)*(_DWORD *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  unint64_t v5 = (v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 8 + *(_DWORD *)(v2 + 80)) & ~(unint64_t)*(_DWORD *)(v2 + 80);
  return closure #1 in static HearingRecordConfig.subscript.setter(a1, v1[7], (uint64_t)v1 + v3, *(void **)((char *)v1 + v5), (uint64_t)v1 + v6, *(uint64_t *)((char *)v1 + ((v6 + v4 + 7) & 0xFFFFFFFFFFFFFFF8)), v1[2], v8, v1[4], v1[5], v1[6]);
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t type metadata accessor for HearingRecordConfig()
{
  return swift_getGenericMetadata();
}

uint64_t sub_250CC7C00()
{
  return 40;
}

void *sub_250CC7C2C(const void *a1, void *__dst)
{
  return memcpy(__dst, a1, 0x28uLL);
}

uint64_t type metadata instantiation function for HearingRecordConfig()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for HearingRecordConfig()
{
  uint64_t v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for HearingRecordConfig(void *a1, void *a2, uint64_t a3)
{
  int v15 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v15 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    swift_retain();
    *a1 = v10;
    return *a1 + ((v15 + 16) & ~(unint64_t)v15);
  }
  else
  {
    (*(void (**)(void *, void *))(*(void *)(*(void *)(a3 + 24) - 8) + 16))(a1, a2);
    uint64_t v4 = *(int *)(a3 + 60);
    uint64_t v5 = *(void *)((char *)a2 + v4);
    swift_retain();
    *(void *)((char *)a1 + v4) = v5;
    uint64_t v6 = *(int *)(a3 + 64);
    uint64_t v7 = *(void *)((char *)a2 + v6);
    swift_retain();
    *(void *)((char *)a1 + v6) = v7;
    uint64_t v8 = *(int *)(a3 + 68);
    uint64_t v9 = *(void *)((char *)a2 + v8);
    swift_retain();
    *(void *)((char *)a1 + v8) = v9;
    *((unsigned char *)a1 + *(int *)(a3 + 72)) = *((unsigned char *)a2 + *(int *)(a3 + 72));
    return (unint64_t)a1;
  }
}

uint64_t destroy for HearingRecordConfig(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 16))();
  uint64_t v4 = *(int *)(a3 + 60);
  uint64_t v5 = *(void *)(a2 + v4);
  swift_retain();
  *(void *)(a1 + v4) = v5;
  uint64_t v6 = *(int *)(a3 + 64);
  uint64_t v7 = *(void *)(a2 + v6);
  swift_retain();
  *(void *)(a1 + v6) = v7;
  uint64_t v9 = *(int *)(a3 + 68);
  uint64_t v10 = *(void *)(a2 + v9);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + v9) = v10;
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t assignWithCopy for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 24))();
  uint64_t v3 = *(int *)(a3 + 60);
  uint64_t v6 = (void *)(a1 + v3);
  uint64_t v7 = *(void *)(a2 + v3);
  swift_retain();
  *uint64_t v6 = v7;
  swift_release();
  uint64_t v4 = *(int *)(a3 + 64);
  uint64_t v8 = (void *)(a1 + v4);
  uint64_t v9 = *(void *)(a2 + v4);
  swift_retain();
  void *v8 = v9;
  swift_release();
  uint64_t v10 = *(int *)(a3 + 68);
  uint64_t v11 = *(void *)(a2 + v10);
  swift_retain();
  *(void *)(a1 + v10) = v11;
  swift_release();
  uint64_t result = a1;
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t initializeWithTake for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 32))();
  uint64_t result = a1;
  *(void *)(a1 + *(int *)(a3 + 60)) = *(void *)(a2 + *(int *)(a3 + 60));
  *(void *)(a1 + *(int *)(a3 + 64)) = *(void *)(a2 + *(int *)(a3 + 64));
  *(void *)(a1 + *(int *)(a3 + 68)) = *(void *)(a2 + *(int *)(a3 + 68));
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t assignWithTake for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 40))();
  *(void *)(a1 + *(int *)(a3 + 60)) = *(void *)(a2 + *(int *)(a3 + 60));
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 64)) = *(void *)(a2 + *(int *)(a3 + 64));
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 68)) = *(void *)(a2 + *(int *)(a3 + 68));
  swift_release();
  uint64_t result = a1;
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t getEnumTagSinglePayload for HearingRecordConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_250CC8410(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  if (a2 == *(_DWORD *)(*(void *)(v6 - 8) + 84))
  {
    return (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 48))(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    int v4 = -1;
    if (*(void *)(a1 + *(int *)(a3 + 68)) < 0x100000000uLL) {
      int v4 = *(void *)(a1 + *(int *)(a3 + 68));
    }
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for HearingRecordConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_250CC855C(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 24);
  if (a3 == *(_DWORD *)(*(void *)(v4 - 8) + 84)) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)(v4 - 8) + 56))(result, a2, a2, v4);
  }
  if (a3 == 0x7FFFFFFF) {
    *(void *)(result + *(int *)(a4 + 68)) = a2 - 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_250CC8654()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_250CC869C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC86D0()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8704()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8750()
{
  return swift_deallocObject();
}

uint64_t sub_250CC879C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC87D0()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8804()
{
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_2@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_250CC8850()
{
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

uint64_t sub_250CC8904()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8938()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8964()
{
  return swift_deallocObject();
}

uint64_t sub_250CC89B0()
{
  return swift_deallocObject();
}

uint64_t sub_250CC89FC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_250CC8A44()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_250CC8A8C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8AC0()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8AF4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8B40()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8B8C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8BC0()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8BF4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8C40()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8CF4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8D28()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8D5C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8DA8()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8DF4()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8E28()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8E5C()
{
  return swift_deallocObject();
}

uint64_t sub_250CC8EA8()
{
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphonePropertyWrapperPublisher<B>?()
{
}

{
  swift_release();
}

uint64_t _swift_stdlib_has_malloc_size_3()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_3(const void *a1)
{
  return malloc_size(a1);
}

void variable initialization expression of HearingRecord.deviceRemoteSendState(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void key path getter for HearingRecord.deviceRemoteSendState : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  uint64_t v6 = v3;
  (*(void (**)(char *__return_ptr, id))((*v3 & *MEMORY[0x263F8EED0]) + 0x138))(&v5, v2);
  *a2 = v5;
}

void key path setter for HearingRecord.deviceRemoteSendState : HearingRecord(char *a1, id *a2)
{
  char v4 = *a1;
  uint64_t v3 = *a2;
  id v2 = *a2;
  uint64_t v6 = v3;
  char v5 = v4;
  (*(void (**)(char *))((*v3 & *MEMORY[0x263F8EED0]) + 0x140))(&v5);
}

uint64_t HearingRecord.deviceRemoteSendState.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRemoteSendState);
  swift_beginAccess();
  char v5 = *v3;
  uint64_t result = swift_endAccess();
  *a1 = v5;
  return result;
}

uint64_t HearingRecord.deviceRemoteSendState.setter(char *a1)
{
  char v4 = *a1;
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRemoteSendState);
  swift_beginAccess();
  unsigned char *v3 = v4;
  return swift_endAccess();
}

uint64_t (*HearingRecord.deviceRemoteSendState.modify())()
{
  return HearingRecord.deviceRemoteSendState.modify;
}

uint64_t HearingRecord.deviceRemoteSendState.modify()
{
  return swift_endAccess();
}

float HearingRecord.amplification.getter()
{
  uint64_t v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  float v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.amplification.setter(float a1)
{
  float v9 = a1;
  uint64_t v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v3 = (void *)swift_getKeyPath();
  float v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.amplification : HearingRecord(id *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x150))(v2);
}

void key path setter for HearingRecord.amplification : HearingRecord(float *a1, id *a2)
{
  float v4 = *a1;
  uint64_t v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x158))(v2, v4);
}

void (*HearingRecord.amplification.modify(void *a1))(void **a1, char a2)
{
  float v5 = malloc(0x28uLL);
  *a1 = v5;
  *float v5 = v4;
  id v1 = v4;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v5[1] = KeyPath;
  v5[2] = swift_getKeyPath();
  id v2 = v4;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(v5 + 3));
  return HearingRecord.amplification.modify;
}

void HearingRecord.amplification.modify(void **a1, char a2)
{
  uint64_t v8 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))*a1;
  if (a2)
  {
    id v2 = v8[2];
    uint64_t v3 = v8[1];
    id v4 = *v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    float v5 = v8[2];
    uint64_t v6 = v8[1];
    float v7 = *v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
    swift_release();
    swift_release();
  }
  free(v8);
}

uint64_t variable initialization expression of HearingRecord._amplification@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  int v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  uint64_t v5 = MEMORY[0x263F8D5C8];
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord;
  if (!lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord)
  {
    type metadata accessor for HearingRecord();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord;
  if (!lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord)
  {
    type metadata accessor for HearingRecord();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord);
    return WitnessTable;
  }
  return v2;
}

uint64_t HearingRecord.$amplification.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, Float>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

float HearingRecord.balance.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  float v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.balance.setter(float a1)
{
  float v9 = a1;
  int v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v3 = (void *)swift_getKeyPath();
  float v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.balance : HearingRecord(id *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x170))(v2);
}

void key path setter for HearingRecord.balance : HearingRecord(float *a1, id *a2)
{
  float v4 = *a1;
  uint64_t v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x178))(v2, v4);
}

void (*HearingRecord.balance.modify(void *a1))(void **a1, char a2)
{
  float v5 = malloc(0x28uLL);
  *a1 = v5;
  *float v5 = v4;
  id v1 = v4;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v5[1] = KeyPath;
  v5[2] = swift_getKeyPath();
  id v2 = v4;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(v5 + 3));
  return HearingRecord.balance.modify;
}

void HearingRecord.balance.modify(void **a1, char a2)
{
  int v8 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))*a1;
  if (a2)
  {
    id v2 = v8[2];
    uint64_t v3 = v8[1];
    id v4 = *v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    float v5 = v8[2];
    char v6 = v8[1];
    float v7 = *v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
    swift_release();
    swift_release();
  }
  free(v8);
}

uint64_t variable initialization expression of HearingRecord._balance@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  int v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  uint64_t v5 = MEMORY[0x263F8D5C8];
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$balance.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, Float>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

float HearingRecord.beamFormer.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  float v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.beamFormer.setter(float a1)
{
  float v9 = a1;
  int v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v3 = (void *)swift_getKeyPath();
  float v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.beamFormer : HearingRecord(id *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x190))(v2);
}

void key path setter for HearingRecord.beamFormer : HearingRecord(float *a1, id *a2)
{
  float v4 = *a1;
  uint64_t v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x198))(v2, v4);
}

void (*HearingRecord.beamFormer.modify(void *a1))(void **a1, char a2)
{
  float v5 = malloc(0x28uLL);
  *a1 = v5;
  *float v5 = v4;
  id v1 = v4;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v5[1] = KeyPath;
  v5[2] = swift_getKeyPath();
  id v2 = v4;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(v5 + 3));
  return HearingRecord.beamFormer.modify;
}

void HearingRecord.beamFormer.modify(void **a1, char a2)
{
  int v8 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))*a1;
  if (a2)
  {
    id v2 = v8[2];
    uint64_t v3 = v8[1];
    id v4 = *v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    float v5 = v8[2];
    char v6 = v8[1];
    float v7 = *v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
    swift_release();
    swift_release();
  }
  free(v8);
}

uint64_t variable initialization expression of HearingRecord._beamFormer@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  int v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  uint64_t v5 = MEMORY[0x263F8D5C8];
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$beamFormer.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, Float>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

float HearingRecord.noiseSuppression.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  float v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.noiseSuppression.setter(float a1)
{
  float v9 = a1;
  int v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v3 = (void *)swift_getKeyPath();
  float v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.noiseSuppression : HearingRecord(id *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x1B0))(v2);
}

void key path setter for HearingRecord.noiseSuppression : HearingRecord(float *a1, id *a2)
{
  float v4 = *a1;
  uint64_t v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x1B8))(v2, v4);
}

void (*HearingRecord.noiseSuppression.modify(void *a1))(void **a1, char a2)
{
  float v5 = malloc(0x28uLL);
  *a1 = v5;
  *float v5 = v4;
  id v1 = v4;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v5[1] = KeyPath;
  v5[2] = swift_getKeyPath();
  id v2 = v4;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(v5 + 3));
  return HearingRecord.noiseSuppression.modify;
}

void HearingRecord.noiseSuppression.modify(void **a1, char a2)
{
  int v8 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))*a1;
  if (a2)
  {
    id v2 = v8[2];
    uint64_t v3 = v8[1];
    id v4 = *v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    float v5 = v8[2];
    char v6 = v8[1];
    float v7 = *v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
    swift_release();
    swift_release();
  }
  free(v8);
}

uint64_t variable initialization expression of HearingRecord._noiseSuppression@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  int v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  uint64_t v5 = MEMORY[0x263F8D5C8];
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$noiseSuppression.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, Float>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

float HearingRecord.tone.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  float v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.tone.setter(float a1)
{
  float v9 = a1;
  int v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v3 = (void *)swift_getKeyPath();
  float v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.tone : HearingRecord(id *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x1D0))(v2);
}

void key path setter for HearingRecord.tone : HearingRecord(float *a1, id *a2)
{
  float v4 = *a1;
  uint64_t v3 = *a2;
  id v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x263F8EED0]) + 0x1D8))(v2, v4);
}

void (*HearingRecord.tone.modify(void *a1))(void **a1, char a2)
{
  float v5 = malloc(0x28uLL);
  *a1 = v5;
  *float v5 = v4;
  id v1 = v4;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v5[1] = KeyPath;
  v5[2] = swift_getKeyPath();
  id v2 = v4;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(v5 + 3));
  return HearingRecord.tone.modify;
}

void HearingRecord.tone.modify(void **a1, char a2)
{
  int v8 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))*a1;
  if (a2)
  {
    id v2 = v8[2];
    uint64_t v3 = v8[1];
    id v4 = *v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    float v5 = v8[2];
    char v6 = v8[1];
    float v7 = *v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static HearingRecordConfig.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
    swift_release();
    swift_release();
  }
  free(v8);
}

uint64_t variable initialization expression of HearingRecord._tone@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  int v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  uint64_t v5 = MEMORY[0x263F8D5C8];
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$tone.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, Float>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.pmeVoiceEnabled.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.pmeVoiceEnabled.setter(char a1)
{
  char v9 = a1;
  int v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.pmeVoiceEnabled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x1F0))(v2);
}

void key path setter for HearingRecord.pmeVoiceEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  uint64_t v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x1F8))(v4);
}

void (*HearingRecord.pmeVoiceEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  id v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return HearingRecord.pmeVoiceEnabled.modify;
}

void HearingRecord.pmeVoiceEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    id v3 = *(void **)(a1 + 8);
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 16);
    char v6 = *(void **)(a1 + 8);
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, v7, v6, v5);
    swift_release();
    swift_release();
  }
}

uint64_t variable initialization expression of HearingRecord._pmeVoiceEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState;
  if (!lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState)
  {
    type metadata accessor for HMMultiState();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState;
  if (!lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState)
  {
    type metadata accessor for HMMultiState();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState;
  if (!lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState)
  {
    type metadata accessor for HMMultiState();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState);
    return WitnessTable;
  }
  return v2;
}

uint64_t HearingRecord.$pmeVoiceEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.pmeMediaEnabled.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.pmeMediaEnabled.setter(char a1)
{
  char v9 = a1;
  char v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  id v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.pmeMediaEnabled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x210))(v2);
}

void key path setter for HearingRecord.pmeMediaEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x218))(v4);
}

void (*HearingRecord.pmeMediaEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  id v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return HearingRecord.pmeMediaEnabled.modify;
}

void HearingRecord.pmeMediaEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    id v3 = *(void **)(a1 + 8);
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 16);
    char v6 = *(void **)(a1 + 8);
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, v7, v6, v5);
    swift_release();
    swift_release();
  }
}

uint64_t variable initialization expression of HearingRecord._pmeMediaEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$pmeMediaEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.mediaAssistEnabled.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.mediaAssistEnabled.setter(char a1)
{
  char v9 = a1;
  char v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  id v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.mediaAssistEnabled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x230))(v2);
}

void key path setter for HearingRecord.mediaAssistEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x238))(v4);
}

void (*HearingRecord.mediaAssistEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  id v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return HearingRecord.mediaAssistEnabled.modify;
}

void HearingRecord.mediaAssistEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    id v3 = *(void **)(a1 + 8);
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 16);
    char v6 = *(void **)(a1 + 8);
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, v7, v6, v5);
    swift_release();
    swift_release();
  }
}

uint64_t variable initialization expression of HearingRecord._mediaAssistEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$mediaAssistEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.hearingAssistEnabled.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.hearingAssistEnabled.setter(char a1)
{
  char v9 = a1;
  char v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  id v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.hearingAssistEnabled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x250))(v2);
}

void key path setter for HearingRecord.hearingAssistEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x258))(v4);
}

void (*HearingRecord.hearingAssistEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  id v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return HearingRecord.hearingAssistEnabled.modify;
}

void HearingRecord.hearingAssistEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    id v3 = *(void **)(a1 + 8);
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 16);
    char v6 = *(void **)(a1 + 8);
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, v7, v6, v5);
    swift_release();
    swift_release();
  }
}

uint64_t variable initialization expression of HearingRecord._hearingAssistEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$hearingAssistEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.swipeGainEnabled.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.swipeGainEnabled.setter(char a1)
{
  char v9 = a1;
  char v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  id v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.swipeGainEnabled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x270))(v2);
}

void key path setter for HearingRecord.swipeGainEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x278))(v4);
}

void (*HearingRecord.swipeGainEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  id v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return HearingRecord.swipeGainEnabled.modify;
}

void HearingRecord.swipeGainEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    id v3 = *(void **)(a1 + 8);
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 16);
    char v6 = *(void **)(a1 + 8);
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, v7, v6, v5);
    swift_release();
    swift_release();
  }
}

uint64_t variable initialization expression of HearingRecord._swipeGainEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$swipeGainEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.hearingAidEnabled.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.hearingAidEnabled.setter(char a1)
{
  char v9 = a1;
  char v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  id v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.hearingAidEnabled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x290))(v2);
}

void key path setter for HearingRecord.hearingAidEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  unsigned int v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  (*(void (**)(void))((*v3 & *MEMORY[0x263F8EED0]) + 0x298))(v4);
}

void (*HearingRecord.hearingAidEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  id v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return HearingRecord.hearingAidEnabled.modify;
}

void HearingRecord.hearingAidEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    id v3 = *(void **)(a1 + 8);
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 16);
    char v6 = *(void **)(a1 + 8);
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, v7, v6, v5);
    swift_release();
    swift_release();
  }
}

uint64_t variable initialization expression of HearingRecord._hearingAidEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$hearingAidEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.listeningModeOffAllowed.getter()
{
  char v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

char *keypath_get_selector_listeningModeOffAllowed()
{
  return sel_listeningModeOffAllowed;
}

uint64_t HearingRecord.listeningModeOffAllowed.setter(char a1)
{
  char v9 = a1;
  char v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  id v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void key path getter for HearingRecord.listeningModeOffAllowed : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = objc_msgSend(v3, sel_listeningModeOffAllowed);
}

void key path setter for HearingRecord.listeningModeOffAllowed : HearingRecord(char *a1, id *a2)
{
  unsigned int v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  objc_msgSend(v3, sel_setListeningModeOffAllowed_, v4);
}

uint64_t variable initialization expression of HearingRecord._listeningModeOffAllowed@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$listeningModeOffAllowed.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HearingRecord.bluetoothAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v7[2] = a1;
  v7[3] = a2;
  swift_bridgeObjectRetain();
  v7[0] = a1;
  v7[1] = a2;
  Published.init(wrappedValue:)((uint64_t)v7, MEMORY[0x263F8D310], a3);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.bluetoothAddress : HearingRecord(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v4 & *MEMORY[0x263F8EED0]) + 0x2B8))(v2);
  a2[1] = v3;
}

void key path setter for HearingRecord.bluetoothAddress : HearingRecord(void *a1, id *a2)
{
  outlined init with copy of String(a1, &v5);
  id v4 = *a2;
  id v2 = *a2;
  HearingRecord.bluetoothAddress.setter();
}

uint64_t HearingRecord.bluetoothAddress.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.bluetoothAddress.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.bluetoothAddress.modify(void *a1))(uint64_t *a1, char a2)
{
  id v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.bluetoothAddress.modify;
}

void HearingRecord.bluetoothAddress.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._bluetoothAddress()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

void key path getter for HearingRecord.$bluetoothAddress : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  char v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x2D0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$bluetoothAddress : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$bluetoothAddress.setter(v9);
}

uint64_t HearingRecord.$bluetoothAddress.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$bluetoothAddress.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$bluetoothAddress.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$bluetoothAddress.getter();
  return HearingRecord.$bluetoothAddress.modify;
}

void HearingRecord.$bluetoothAddress.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$bluetoothAddress.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$bluetoothAddress.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.bluetoothUUID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v7[2] = a1;
  v7[3] = a2;
  swift_bridgeObjectRetain();
  v7[0] = a1;
  v7[1] = a2;
  Published.init(wrappedValue:)((uint64_t)v7, MEMORY[0x263F8D310], a3);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.bluetoothUUID : HearingRecord(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v4 & *MEMORY[0x263F8EED0]) + 0x2E8))(v2);
  a2[1] = v3;
}

void key path setter for HearingRecord.bluetoothUUID : HearingRecord(void *a1, id *a2)
{
  outlined init with copy of String(a1, &v5);
  id v4 = *a2;
  id v2 = *a2;
  HearingRecord.bluetoothUUID.setter();
}

uint64_t HearingRecord.bluetoothUUID.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.bluetoothUUID.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.bluetoothUUID.modify(void *a1))(uint64_t *a1, char a2)
{
  id v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.bluetoothUUID.modify;
}

void HearingRecord.bluetoothUUID.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._bluetoothUUID()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

void key path getter for HearingRecord.$bluetoothUUID : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x300))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$bluetoothUUID : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$bluetoothUUID.setter(v9);
}

uint64_t HearingRecord.$bluetoothUUID.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$bluetoothUUID.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$bluetoothUUID.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$bluetoothUUID.getter();
  return HearingRecord.$bluetoothUUID.modify;
}

void HearingRecord.$bluetoothUUID.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$bluetoothUUID.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$bluetoothUUID.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.hideOffModeCapability@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMMultiState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hideOffModeCapability : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x318))(v2);
}

void key path setter for HearingRecord.hideOffModeCapability : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hideOffModeCapability.setter();
}

uint64_t HearingRecord.hideOffModeCapability.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hideOffModeCapability.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hideOffModeCapability.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hideOffModeCapability.modify;
}

void HearingRecord.hideOffModeCapability.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hideOffModeCapability()
{
  return 0;
}

void key path getter for HearingRecord.$hideOffModeCapability : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x330))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hideOffModeCapability : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hideOffModeCapability.setter(v9);
}

uint64_t HearingRecord.$hideOffModeCapability.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hideOffModeCapability.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hideOffModeCapability.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hideOffModeCapability.getter();
  return HearingRecord.$hideOffModeCapability.modify;
}

void HearingRecord.$hideOffModeCapability.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hideOffModeCapability.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hideOffModeCapability.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.hearingAssistCapability@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMMultiState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hearingAssistCapability : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x348))(v2);
}

void key path setter for HearingRecord.hearingAssistCapability : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingAssistCapability.setter();
}

uint64_t HearingRecord.hearingAssistCapability.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hearingAssistCapability.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hearingAssistCapability.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hearingAssistCapability.modify;
}

void HearingRecord.hearingAssistCapability.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hearingAssistCapability()
{
  return 0;
}

void key path getter for HearingRecord.$hearingAssistCapability : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x360))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hearingAssistCapability : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hearingAssistCapability.setter(v9);
}

uint64_t HearingRecord.$hearingAssistCapability.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hearingAssistCapability.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hearingAssistCapability.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hearingAssistCapability.getter();
  return HearingRecord.$hearingAssistCapability.modify;
}

void HearingRecord.$hearingAssistCapability.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hearingAssistCapability.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hearingAssistCapability.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.hearingAssistEnrolled@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMMultiState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hearingAssistEnrolled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x378))(v2);
}

void key path setter for HearingRecord.hearingAssistEnrolled : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingAssistEnrolled.setter();
}

uint64_t HearingRecord.hearingAssistEnrolled.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hearingAssistEnrolled.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hearingAssistEnrolled.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hearingAssistEnrolled.modify;
}

void HearingRecord.hearingAssistEnrolled.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hearingAssistEnrolled()
{
  return 0;
}

void key path getter for HearingRecord.$hearingAssistEnrolled : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x390))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hearingAssistEnrolled : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hearingAssistEnrolled.setter(v9);
}

uint64_t HearingRecord.$hearingAssistEnrolled.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hearingAssistEnrolled.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hearingAssistEnrolled.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hearingAssistEnrolled.getter();
  return HearingRecord.$hearingAssistEnrolled.modify;
}

void HearingRecord.$hearingAssistEnrolled.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hearingAssistEnrolled.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hearingAssistEnrolled.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.hearingAssistRegionStatus@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMRegionStatus();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hearingAssistRegionStatus : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x3A8))(v2);
}

void key path setter for HearingRecord.hearingAssistRegionStatus : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingAssistRegionStatus.setter();
}

uint64_t HearingRecord.hearingAssistRegionStatus.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hearingAssistRegionStatus.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hearingAssistRegionStatus.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hearingAssistRegionStatus.modify;
}

void HearingRecord.hearingAssistRegionStatus.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hearingAssistRegionStatus()
{
  return 0;
}

void key path getter for HearingRecord.$hearingAssistRegionStatus : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x3C0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hearingAssistRegionStatus : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hearingAssistRegionStatus.setter(v9);
}

uint64_t HearingRecord.$hearingAssistRegionStatus.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hearingAssistRegionStatus.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hearingAssistRegionStatus.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hearingAssistRegionStatus.getter();
  return HearingRecord.$hearingAssistRegionStatus.modify;
}

void HearingRecord.$hearingAssistRegionStatus.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hearingAssistRegionStatus.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hearingAssistRegionStatus.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.hearingProtectionRegionStatus@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMRegionStatus();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hearingProtectionRegionStatus : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x3D8))(v2);
}

void key path setter for HearingRecord.hearingProtectionRegionStatus : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingProtectionRegionStatus.setter();
}

uint64_t HearingRecord.hearingProtectionRegionStatus.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hearingProtectionRegionStatus.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hearingProtectionRegionStatus.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hearingProtectionRegionStatus.modify;
}

void HearingRecord.hearingProtectionRegionStatus.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hearingProtectionRegionStatus()
{
  return 0;
}

void key path getter for HearingRecord.$hearingProtectionRegionStatus : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x3F0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hearingProtectionRegionStatus : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hearingProtectionRegionStatus.setter(v9);
}

uint64_t HearingRecord.$hearingProtectionRegionStatus.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hearingProtectionRegionStatus.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hearingProtectionRegionStatus.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hearingProtectionRegionStatus.getter();
  return HearingRecord.$hearingProtectionRegionStatus.modify;
}

void HearingRecord.$hearingProtectionRegionStatus.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hearingProtectionRegionStatus.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hearingProtectionRegionStatus.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.hearingProtectionCapability@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMMultiState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hearingProtectionCapability : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x408))(v2);
}

void key path setter for HearingRecord.hearingProtectionCapability : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingProtectionCapability.setter();
}

uint64_t HearingRecord.hearingProtectionCapability.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hearingProtectionCapability.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hearingProtectionCapability.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hearingProtectionCapability.modify;
}

void HearingRecord.hearingProtectionCapability.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hearingProtectionCapability()
{
  return 0;
}

void key path getter for HearingRecord.$hearingProtectionCapability : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x420))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hearingProtectionCapability : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hearingProtectionCapability.setter(v9);
}

uint64_t HearingRecord.$hearingProtectionCapability.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hearingProtectionCapability.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hearingProtectionCapability.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hearingProtectionCapability.getter();
  return HearingRecord.$hearingProtectionCapability.modify;
}

void HearingRecord.$hearingProtectionCapability.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hearingProtectionCapability.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hearingProtectionCapability.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

void key path getter for HearingRecord.hearingProtectionEnabled : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x438))(v2);
}

void key path setter for HearingRecord.hearingProtectionEnabled : HearingRecord(char *a1, id *a2)
{
  char v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingProtectionEnabled.setter(v4);
}

uint64_t HearingRecord.hearingProtectionEnabled.getter()
{
  uint64_t v6 = v0;
  id v1 = v0;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getKeyPath();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)&v5);
  unsigned int v4 = v5;
  swift_release();
  swift_release();

  return v4;
}

uint64_t HearingRecord.hearingProtectionEnabled.setter(char a1)
{
  char v9 = a1;
  uint64_t v8 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  id v3 = (void *)swift_getKeyPath();
  char v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1, KeyPath, v3);
}

void (*HearingRecord.hearingProtectionEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  id v2 = v1;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  a1[1] = KeyPath;
  a1[2] = swift_getKeyPath();
  id v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(KeyPath, (uint64_t)(a1 + 3));
  return HearingRecord.hearingProtectionEnabled.modify;
}

void HearingRecord.hearingProtectionEnabled.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    id v3 = *(void **)(a1 + 8);
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 16);
    uint64_t v6 = *(void **)(a1 + 8);
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1;
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, v7, v6, v5);
    swift_release();
    swift_release();
  }
}

uint64_t variable initialization expression of HearingRecord._hearingProtectionEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v4 = type metadata accessor for HearingRecord();
  uint64_t v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  char v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$hearingProtectionEnabled.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HearingRecord.hearingTestRegionStatus@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMRegionStatus();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hearingTestRegionStatus : HearingRecord(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x458))(v2);
}

void key path setter for HearingRecord.hearingTestRegionStatus : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingTestRegionStatus.setter();
}

uint64_t HearingRecord.hearingTestRegionStatus.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hearingTestRegionStatus.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hearingTestRegionStatus.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hearingTestRegionStatus.modify;
}

void HearingRecord.hearingTestRegionStatus.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hearingTestRegionStatus()
{
  return 0;
}

void key path getter for HearingRecord.$hearingTestRegionStatus : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  char v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x470))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hearingTestRegionStatus : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hearingTestRegionStatus.setter(v9);
}

uint64_t HearingRecord.$hearingTestRegionStatus.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hearingTestRegionStatus.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hearingTestRegionStatus.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hearingTestRegionStatus.getter();
  return HearingRecord.$hearingTestRegionStatus.modify;
}

void HearingRecord.$hearingTestRegionStatus.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hearingTestRegionStatus.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hearingTestRegionStatus.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.earLossArrayLeft@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v6[1] = a1;
  swift_bridgeObjectRetain();
  v6[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
  Published.init(wrappedValue:)((uint64_t)v6, v2, a2);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.earLossArrayLeft : HearingRecord(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x488))(v2);
}

void key path setter for HearingRecord.earLossArrayLeft : HearingRecord(uint64_t *a1, id *a2)
{
  outlined init with copy of [NSNumber](a1, &v5);
  id v4 = *a2;
  id v2 = *a2;
  HearingRecord.earLossArrayLeft.setter();
}

uint64_t HearingRecord.earLossArrayLeft.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.earLossArrayLeft.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.earLossArrayLeft.modify(void *a1))(uint64_t *a1, char a2)
{
  id v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.earLossArrayLeft.modify;
}

void HearingRecord.earLossArrayLeft.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._earLossArrayLeft()
{
  return _allocateUninitializedArray<A>(_:)();
}

void key path getter for HearingRecord.$earLossArrayLeft : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x4A0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$earLossArrayLeft : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$earLossArrayLeft.setter(v9);
}

uint64_t HearingRecord.$earLossArrayLeft.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$earLossArrayLeft.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$earLossArrayLeft.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$earLossArrayLeft.getter();
  return HearingRecord.$earLossArrayLeft.modify;
}

void HearingRecord.$earLossArrayLeft.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$earLossArrayLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$earLossArrayLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.earLossArrayRight@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v6[1] = a1;
  swift_bridgeObjectRetain();
  v6[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
  Published.init(wrappedValue:)((uint64_t)v6, v2, a2);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.earLossArrayRight : HearingRecord(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x4B8))(v2);
}

void key path setter for HearingRecord.earLossArrayRight : HearingRecord(uint64_t *a1, id *a2)
{
  outlined init with copy of [NSNumber](a1, &v5);
  id v4 = *a2;
  id v2 = *a2;
  HearingRecord.earLossArrayRight.setter();
}

uint64_t HearingRecord.earLossArrayRight.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.earLossArrayRight.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.earLossArrayRight.modify(void *a1))(uint64_t *a1, char a2)
{
  id v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.earLossArrayRight.modify;
}

void HearingRecord.earLossArrayRight.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._earLossArrayRight()
{
  return _allocateUninitializedArray<A>(_:)();
}

void key path getter for HearingRecord.$earLossArrayRight : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x4D0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$earLossArrayRight : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$earLossArrayRight.setter(v9);
}

uint64_t HearingRecord.$earLossArrayRight.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$earLossArrayRight.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$earLossArrayRight.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$earLossArrayRight.getter();
  return HearingRecord.$earLossArrayRight.modify;
}

void HearingRecord.$earLossArrayRight.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$earLossArrayRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$earLossArrayRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.hearingProtectionOcclusionResult@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  v5[1] = a1;
  v5[0] = a1;
  uint64_t v2 = type metadata accessor for HMOcclusionResult();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

void key path getter for HearingRecord.hearingProtectionOcclusionResult : HearingRecord(id *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x4E8))(v2);
}

void key path setter for HearingRecord.hearingProtectionOcclusionResult : HearingRecord(uint64_t a1, id *a2)
{
  id v3 = *a2;
  id v2 = *a2;
  HearingRecord.hearingProtectionOcclusionResult.setter();
}

uint64_t HearingRecord.hearingProtectionOcclusionResult.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.hearingProtectionOcclusionResult.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void (*HearingRecord.hearingProtectionOcclusionResult.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.hearingProtectionOcclusionResult.modify;
}

void HearingRecord.hearingProtectionOcclusionResult.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._hearingProtectionOcclusionResult()
{
  return 0;
}

void key path getter for HearingRecord.$hearingProtectionOcclusionResult : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMOcclusionResult>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x500))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$hearingProtectionOcclusionResult : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMOcclusionResult>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  id v8 = *v7;
  id v3 = v8;
  id v11 = v8;
  id v10 = v8;
  HearingRecord.$hearingProtectionOcclusionResult.setter(v9);
}

uint64_t HearingRecord.$hearingProtectionOcclusionResult.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$hearingProtectionOcclusionResult.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMOcclusionResult>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMOcclusionResult>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$hearingProtectionOcclusionResult.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMOcclusionResult>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$hearingProtectionOcclusionResult.getter();
  return HearingRecord.$hearingProtectionOcclusionResult.modify;
}

void HearingRecord.$hearingProtectionOcclusionResult.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$hearingProtectionOcclusionResult.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$hearingProtectionOcclusionResult.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.validAudiograms@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v6[1] = a1;
  swift_bridgeObjectRetain();
  v6[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKAudiogramSample]);
  Published.init(wrappedValue:)((uint64_t)v6, v2, a2);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.validAudiograms : HearingRecord(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x518))(v2);
}

void key path setter for HearingRecord.validAudiograms : HearingRecord(uint64_t *a1, id *a2)
{
  outlined init with copy of [HKAudiogramSample](a1, &v6);
  uint64_t v5 = v6;
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x520))(v5);
}

uint64_t HearingRecord.validAudiograms.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.validAudiograms.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.validAudiograms.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.validAudiograms.modify;
}

void HearingRecord.validAudiograms.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._validAudiograms()
{
  return _allocateUninitializedArray<A>(_:)();
}

void key path getter for HearingRecord.$validAudiograms : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x530))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$validAudiograms : HearingRecord(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x538))(v9);
}

uint64_t HearingRecord.$validAudiograms.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$validAudiograms.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$validAudiograms.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$validAudiograms.getter();
  return HearingRecord.$validAudiograms.modify;
}

void HearingRecord.$validAudiograms.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$validAudiograms.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$validAudiograms.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.invalidAudiograms@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v6[1] = a1;
  swift_bridgeObjectRetain();
  v6[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKAudiogramSample]);
  Published.init(wrappedValue:)((uint64_t)v6, v2, a2);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.invalidAudiograms : HearingRecord(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x548))(v2);
}

void key path setter for HearingRecord.invalidAudiograms : HearingRecord(uint64_t *a1, id *a2)
{
  outlined init with copy of [HKAudiogramSample](a1, &v6);
  uint64_t v5 = v6;
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x550))(v5);
}

uint64_t HearingRecord.invalidAudiograms.getter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.invalidAudiograms.setter()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.invalidAudiograms.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v3;
  id v1 = v3;
  v4[5] = swift_getKeyPath();
  v4[6] = swift_getKeyPath();
  v4[7] = static Published.subscript.modify();
  return HearingRecord.invalidAudiograms.modify;
}

void HearingRecord.invalidAudiograms.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  else
  {
    id v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, void))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();
  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._invalidAudiograms()
{
  return _allocateUninitializedArray<A>(_:)();
}

void key path getter for HearingRecord.$invalidAudiograms : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v4 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  unint64_t v5 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v6 = *(void **)MEMORY[0x270FA5388](v4, v2);
  id v3 = v6;
  uint64_t v13 = v6;
  id v12 = v6;
  (*(void (**)(void *))((*v6 & *MEMORY[0x263F8EED0]) + 0x560))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v9, v10, v11);
}

void key path setter for HearingRecord.$invalidAudiograms : HearingRecord(uint64_t a1, void **a2)
{
  uint64_t v4 = a1;
  uint64_t v7 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v9 = (char *)&v4 - v5;
  (*(void (**)(void))(v6 + 16))();
  uint64_t v8 = *v7;
  id v3 = v8;
  uint64_t v11 = v8;
  id v10 = v8;
  (*(void (**)(char *))((*v8 & *MEMORY[0x263F8EED0]) + 0x568))(v9);
}

uint64_t HearingRecord.$invalidAudiograms.getter()
{
  return swift_endAccess();
}

uint64_t HearingRecord.$invalidAudiograms.setter(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  uint64_t v5 = *(void *)(v8 - 8);
  uint64_t v6 = v8 - 8;
  v4[0] = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8, v7);
  v4[1] = (char *)v4 - v4[0];
  uint64_t v11 = v2;
  uint64_t v10 = v1;
  (*(void (**)(void))(v5 + 16))();
  void v4[2] = &v9;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
}

void (*HearingRecord.$invalidAudiograms.modify(void *a1))(void **a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>.Publisher);
  v6[1] = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  void v6[2] = v4;
  size_t __size = *(void *)(v4 + 64);
  v6[3] = malloc(__size);
  v6[4] = malloc(__size);
  HearingRecord.$invalidAudiograms.getter();
  return HearingRecord.$invalidAudiograms.modify;
}

void HearingRecord.$invalidAudiograms.modify(void **a1, char a2)
{
  uint64_t v8 = *a1;
  if (a2)
  {
    uint64_t v4 = (void *)v8[4];
    uint64_t v5 = (void *)v8[3];
    uint64_t v3 = v8[1];
    uint64_t v2 = v8[2];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$invalidAudiograms.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    uint64_t v6 = (void *)v8[4];
    uint64_t v7 = (void *)v8[3];
    HearingRecord.$invalidAudiograms.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HearingRecord.deviceRecord()
{
  return 0;
}

void key path getter for HearingRecord.deviceRecord : HearingRecord(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x578))(v2);
}

void key path setter for HearingRecord.deviceRecord : HearingRecord(id *a1, id *a2)
{
  outlined init with copy of HMDeviceRecord?(a1, &v6);
  uint64_t v5 = v6;
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x580))(v5);
}

id HearingRecord.deviceRecord.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRecord);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void HearingRecord.deviceRecord.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRecord);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*HearingRecord.deviceRecord.modify())()
{
  return HearingRecord.deviceRecord.modify;
}

uint64_t HearingRecord.deviceRecord.modify()
{
  return swift_endAccess();
}

uint64_t HearingRecord.updateWithRecord(_:)(void *a1)
{
  id v114 = a1;
  uint64_t v111 = 0;
  uint64_t v97 = implicit closure #1 in HearingRecord.updateWithRecord(_:);
  uint64_t v98 = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_4;
  uint64_t v99 = partial apply for implicit closure #2 in HearingRecord.updateWithRecord(_:);
  uint64_t v100 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4;
  uint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4;
  uint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v107 = MEMORY[0x263F8F500];
  uint64_t v108 = &async function pointer to partial apply for closure #2 in HearingRecord.updateWithRecord(_:);
  uint64_t v109 = &async function pointer to partial apply for closure #1 in HearingRecord.updateWithRecord(_:);
  uint64_t v129 = 0;
  uint64_t v128 = 0;
  uint64_t v110 = 0;
  unint64_t v112 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v2);
  uint64_t v113 = (char *)&v55 - v112;
  uint64_t v115 = type metadata accessor for Logger();
  uint64_t v116 = *(void *)(v115 - 8);
  uint64_t v117 = v115 - 8;
  unint64_t v118 = (*(void *)(v116 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v114, v3);
  uint64_t v119 = (char *)&v55 - v118;
  uint64_t v129 = v4;
  uint64_t v128 = v1;
  id v120 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x578))();
  if (v120)
  {
    id v95 = v120;
    uint64_t v5 = v119;

    uint64_t v6 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v5, v6, v115);
    id v7 = v114;
    uint64_t v81 = 7;
    uint64_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = v114;
    int v93 = Logger.logObject.getter();
    int v94 = static os_log_type_t.default.getter();
    uint64_t v74 = &v126;
    uint64_t v126 = 22;
    unint64_t v72 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v73 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v75 = v127;
    uint64_t v78 = 17;
    uint64_t v84 = swift_allocObject();
    int v77 = 32;
    *(unsigned char *)(v84 + 16) = 32;
    uint64_t v85 = swift_allocObject();
    int v79 = 8;
    *(unsigned char *)(v85 + 16) = 8;
    uint64_t v80 = 32;
    uint64_t v8 = swift_allocObject();
    uint64_t v76 = v8;
    *(void *)(v8 + 16) = v97;
    *(void *)(v8 + 24) = 0;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v76;
    uint64_t v86 = v9;
    *(void *)(v9 + 16) = v98;
    *(void *)(v9 + 24) = v10;
    uint64_t v87 = swift_allocObject();
    *(unsigned char *)(v87 + 16) = v77;
    uint64_t v88 = swift_allocObject();
    *(unsigned char *)(v88 + 16) = v79;
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v82;
    uint64_t v83 = v11;
    *(void *)(v11 + 16) = v99;
    *(void *)(v11 + 24) = v12;
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v83;
    uint64_t v90 = v13;
    *(void *)(v13 + 16) = v100;
    *(void *)(v13 + 24) = v14;
    uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v89 = _allocateUninitializedArray<A>(_:)();
    int v91 = v15;
    swift_retain();
    uint64_t v16 = v84;
    uint64_t v17 = v91;
    *int v91 = v101;
    v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
    swift_retain();
    uint64_t v18 = v85;
    uint64_t v19 = v91;
    v91[2] = v102;
    v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
    swift_retain();
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v86;
    uint64_t v21 = v91;
    v91[4] = v103;
    v21[5] = v20;
    swift_retain();
    uint64_t v22 = v87;
    uint64_t v23 = v91;
    v91[6] = v104;
    v23[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
    swift_retain();
    uint64_t v24 = v88;
    uint64_t v25 = v91;
    v91[8] = v105;
    v25[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
    swift_retain();
    uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v90;
    unint64_t v27 = v91;
    v91[10] = v106;
    v27[11] = v26;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v93, (os_log_type_t)v94))
    {
      uint64_t v28 = v110;
      uint64_t v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v65 = createStorage<A>(capacity:type:)(0);
      uint64_t v66 = createStorage<A>(capacity:type:)(2);
      uint64_t v68 = &v125;
      uint64_t v125 = v64;
      uint64_t v69 = &v124;
      uint64_t v124 = v65;
      uint64_t v70 = &v123;
      uint64_t v123 = v66;
      unsigned int v67 = 2;
      serialize(_:at:)(2, &v125);
      serialize(_:at:)(v67, v68);
      uint64_t v121 = v101;
      uint64_t v122 = v84;
      closure #1 in osLogInternal(_:log:type:)(&v121, (uint64_t)v68, (uint64_t)v69, (uint64_t)v70);
      uint64_t v71 = v28;
      if (v28)
      {
        __break(1u);
      }
      else
      {
        uint64_t v121 = v102;
        uint64_t v122 = v85;
        closure #1 in osLogInternal(_:log:type:)(&v121, (uint64_t)&v125, (uint64_t)&v124, (uint64_t)&v123);
        uint64_t v62 = 0;
        uint64_t v29 = v62;
        uint64_t v121 = v103;
        uint64_t v122 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v121, (uint64_t)&v125, (uint64_t)&v124, (uint64_t)&v123);
        uint64_t v61 = v29;
        uint64_t v121 = v104;
        uint64_t v122 = v87;
        closure #1 in osLogInternal(_:log:type:)(&v121, (uint64_t)&v125, (uint64_t)&v124, (uint64_t)&v123);
        uint64_t v60 = 0;
        uint64_t v121 = v105;
        uint64_t v122 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v121, (uint64_t)&v125, (uint64_t)&v124, (uint64_t)&v123);
        uint64_t v59 = 0;
        uint64_t v121 = v106;
        uint64_t v122 = v90;
        closure #1 in osLogInternal(_:log:type:)(&v121, (uint64_t)&v125, (uint64_t)&v124, (uint64_t)&v123);
        _os_log_impl(&dword_250C36000, v93, (os_log_type_t)v94, "HeadphoneManager: %s: value changed  update: %s", v64, v75);
        destroyStorage<A>(_:count:)(v65, 0, v63);
        destroyStorage<A>(_:count:)(v66, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v64, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    unint64_t v30 = v96;

    (*(void (**)(char *, uint64_t))(v116 + 8))(v119, v115);
    id v31 = v114;
    (*(void (**)(id))((*v30 & *MEMORY[0x263F8EED0]) + 0x580))(v114);
    uint64_t v57 = 0;
    uint64_t v32 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 56))(v113, 1);
    uint64_t v33 = v96;
    id v34 = v114;
    type metadata accessor for MainActor();
    uint64_t v58 = static MainActor.shared.getter();
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v107;
    id v37 = v96;
    id v38 = v114;
    uint64_t v39 = (uint64_t)v108;
    uint64_t v40 = (void *)v35;
    uint64_t v41 = (uint64_t)v113;
    v40[2] = v58;
    v40[3] = v36;
    v40[4] = v37;
    v40[5] = v38;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v41, v39, (uint64_t)v40, MEMORY[0x263F8EE60] + 8);
    return swift_release();
  }
  else
  {
    uint64_t v43 = v96;
    id v44 = v114;
    (*(void (**)(id))((*v43 & *MEMORY[0x263F8EED0]) + 0x580))(v114);
    uint64_t v55 = 0;
    uint64_t v45 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(void *)(v45 - 8) + 56))(v113, 1);
    uint64_t v46 = v96;
    id v47 = v114;
    type metadata accessor for MainActor();
    uint64_t v56 = static MainActor.shared.getter();
    uint64_t v48 = swift_allocObject();
    uint64_t v49 = v107;
    id v50 = v96;
    id v51 = v114;
    uint64_t v52 = (uint64_t)v109;
    uint64_t v53 = (void *)v48;
    uint64_t v54 = (uint64_t)v113;
    v53[2] = v56;
    v53[3] = v49;
    v53[4] = v50;
    v53[5] = v51;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v54, v52, (uint64_t)v53, MEMORY[0x263F8EE60] + 8);
    return swift_release();
  }
}

uint64_t closure #1 in HearingRecord.updateWithRecord(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a5;
  v5[6] = a4;
  v5[2] = v5;
  _DWORD v5[3] = 0;
  v5[4] = 0;
  uint64_t v6 = type metadata accessor for Logger();
  v5[8] = v6;
  unsigned char v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  _DWORD v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in HearingRecord.updateWithRecord(_:), v11, v7);
}

uint64_t closure #1 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v38 = v0;
  uint64_t v14 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v16 = *(void *)(v0 + 64);
  id v17 = *(id *)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  default argument 1 of HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(&v31);
  char v32 = v31;
  HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(v17, (uint64_t)&v32);
  uint64_t v1 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v1, v16);
  id v2 = v17;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v17;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  *(void *)(v0 + 40) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 96);
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = 32;
  uint64_t v23 = swift_allocObject();
  *(unsigned char *)(v23 + 16) = 8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = implicit closure #1 in closure #1 in HearingRecord.updateWithRecord(_:);
  *(void *)(v19 + 24) = 0;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(void *)(v24 + 24) = v19;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 32;
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = partial apply for implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:);
  *(void *)(v21 + 24) = v20;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(void *)(v27 + 24) = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v28 = v3;
  swift_retain();
  void *v28 = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[1] = v22;
  swift_retain();
  v28[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[3] = v23;
  swift_retain();
  v28[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[5] = v24;
  swift_retain();
  v28[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[7] = v25;
  swift_retain();
  v28[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[9] = v26;
  swift_retain();
  v28[10] = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[11] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(2);
    uint64_t v33 = buf;
    uint64_t v34 = v11;
    uint64_t v35 = v12;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(2, &v33);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v37 = v22;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v37 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v37 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v37 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v37 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_250C36000, v29, v30, "HeadphoneManager: %s: deviceRecord set: %s", buf, size);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x253386220](buf, MEMORY[0x263F8E778]);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = v13[10];
  uint64_t v7 = v13[8];
  uint64_t v6 = v13[9];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  swift_release();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v13[2] + 8);
  return v4();
}

uint64_t sub_250CD8558()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HearingRecord.updateWithRecord(_:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #1 in HearingRecord.updateWithRecord(_:);
  return closure #1 in HearingRecord.updateWithRecord(_:)(a1, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

void default argument 1 of HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t implicit closure #1 in closure #1 in HearingRecord.updateWithRecord(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithRecord(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:)(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_debugDescription);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t implicit closure #1 in HearingRecord.updateWithRecord(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithRecord(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in HearingRecord.updateWithRecord(_:)(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_debugDescription);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_250CD88F8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in HearingRecord.updateWithRecord(_:)()
{
  return implicit closure #2 in HearingRecord.updateWithRecord(_:)(*(void **)(v0 + 16));
}

uint64_t closure #2 in HearingRecord.updateWithRecord(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a5;
  v5[5] = a4;
  v5[2] = v5;
  _DWORD v5[3] = 0;
  v5[4] = 0;
  _DWORD v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #2 in HearingRecord.updateWithRecord(_:), v8, v6);
}

uint64_t closure #2 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v6 = v0;
  uint64_t v3 = *(void **)(v0 + 48);
  *(void *)(v0 + 16) = v0;
  default argument 1 of HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(&v4);
  char v5 = v4;
  HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(v3, (uint64_t)&v5);
  swift_release();
  id v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(void *a1, uint64_t a2)
{
  id v87 = a1;
  uint64_t v66 = a2;
  uint64_t v82 = 0;
  uint64_t v96 = implicit closure #1 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:);
  uint64_t v97 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v102 = partial apply for implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:);
  uint64_t v106 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v116 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v135 = 0;
  char v134 = 0;
  uint64_t v133 = 0;
  uint64_t v65 = 0;
  uint64_t v90 = type metadata accessor for Logger();
  uint64_t v88 = *(void *)(v90 - 8);
  uint64_t v89 = v90 - 8;
  unint64_t v67 = (*(void *)(v88 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v86 = (char *)v54 - v67;
  uint64_t v135 = MEMORY[0x270FA5388](v87, v66);
  char v134 = *v3;
  uint64_t v133 = v2;
  char v132 = v134;
  uint64_t v4 = *v2;
  int v79 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(char *))((v4 & *MEMORY[0x263F8EED0]) + 0x140))(&v132);
  char v5 = v91;
  id v68 = objc_msgSend(v87, sel_tone);
  unint64_t v76 = 0x1F6659000uLL;
  [v68 (SEL)0x1F6659331];
  float v69 = v6;

  (*(void (**)(float))((*v5 & *v79) + 0x1D8))(v69);
  uint64_t v7 = v91;
  id v70 = objc_msgSend(v87, sel_amplification);
  [v70 (SEL)(v76 + 817)];
  float v71 = v8;

  (*(void (**)(float))((*v7 & *v79) + 0x158))(v71);
  uint64_t v9 = v91;
  id v72 = objc_msgSend(v87, sel_balance);
  [v72 (SEL)(v76 + 817)];
  float v73 = v10;

  (*(void (**)(float))((*v9 & *v79) + 0x178))(v73);
  uint64_t v11 = v91;
  id v74 = objc_msgSend(v87, sel_beamFormer);
  [v74 (SEL)(v76 + 817)];
  float v75 = v12;

  (*(void (**)(float))((*v11 & *v79) + 0x198))(v75);
  uint64_t v13 = v91;
  id v77 = objc_msgSend(v87, sel_noiseSuppression);
  [v77 (SEL)(v76 + 817)];
  float v78 = v14;

  (*(void (**)(float))((*v13 & *v79) + 0x1B8))(v78);
  uint64_t v15 = v91;
  id v16 = objc_msgSend(v87, sel_pmeVoiceEnabled);
  (*(void (**)(id))((*v15 & *v79) + 0x1F8))(v16);
  id v17 = v91;
  id v18 = objc_msgSend(v87, sel_pmeMediaEnabled);
  (*(void (**)(id))((*v17 & *v79) + 0x218))(v18);
  uint64_t v19 = v91;
  id v20 = objc_msgSend(v87, sel_hearingAssistEnabled);
  (*(void (**)(id))((*v19 & *v79) + 0x258))(v20);
  uint64_t v21 = v91;
  id v22 = objc_msgSend(v87, sel_mediaAssistEnabled);
  (*(void (**)(id))((*v21 & *v79) + 0x238))(v22);
  uint64_t v23 = v91;
  id v24 = objc_msgSend(v87, sel_swipeGainEnabled);
  (*(void (**)(id))((*v23 & *v79) + 0x278))(v24);
  uint64_t v25 = v91;
  id v26 = objc_msgSend(v87, sel_hearingAidEnabled);
  (*(void (**)(id))((*v25 & *v79) + 0x298))(v26);
  id v80 = objc_msgSend(v87, sel_bluetoothAddress);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  HearingRecord.bluetoothAddress.setter();

  id v81 = objc_msgSend(v87, sel_bluetoothUUID);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  HearingRecord.bluetoothUUID.setter();

  objc_msgSend(v87, sel_hearingAssistCapability);
  HearingRecord.hearingAssistCapability.setter();
  objc_msgSend(v87, sel_hearingAssistEnrolled);
  HearingRecord.hearingAssistEnrolled.setter();
  objc_msgSend(v87, sel_hearingAssistRegionStatus);
  HearingRecord.hearingAssistRegionStatus.setter();
  objc_msgSend(v87, sel_hearingProtectionRegionStatus);
  HearingRecord.hearingProtectionRegionStatus.setter();
  objc_msgSend(v87, sel_hearingProtectionCapability);
  HearingRecord.hearingProtectionCapability.setter();
  HearingRecord.hearingProtectionEnabled.setter((char)objc_msgSend(v87, sel_hearingProtectionEnabled));
  objc_msgSend(v87, sel_hearingTestRegionStatus);
  HearingRecord.hearingTestRegionStatus.setter();
  id v83 = objc_msgSend(v87, sel_earLossArrayLeft);
  unint64_t v84 = type metadata accessor for NSNumber();
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  HearingRecord.earLossArrayLeft.setter();

  id v85 = objc_msgSend(v87, sel_earLossArrayRight);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  HearingRecord.earLossArrayRight.setter();

  objc_msgSend(v87, sel_hearingProtectionOcclusionResult);
  HearingRecord.hearingProtectionOcclusionResult.setter();
  objc_msgSend(v87, sel_hideOffModeCapability);
  HearingRecord.hideOffModeCapability.setter();
  uint64_t v27 = v86;
  signed __int8 v28 = objc_msgSend(v87, sel_listeningModeOffAllowed);
  objc_msgSend(v91, sel_setListeningModeOffAllowed_, v28);
  uint64_t v29 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v27, v29, v90);
  os_log_type_t v30 = v91;
  uint64_t v104 = 7;
  uint64_t v105 = swift_allocObject();
  *(void *)(v105 + 16) = v91;
  uint64_t v123 = Logger.logObject.getter();
  int v124 = static os_log_type_t.default.getter();
  int v94 = &v130;
  uint64_t v130 = 22;
  unint64_t v92 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v93 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v95 = v131;
  uint64_t v100 = 17;
  uint64_t v109 = swift_allocObject();
  int v99 = 32;
  *(unsigned char *)(v109 + 16) = 32;
  uint64_t v111 = swift_allocObject();
  int v101 = 8;
  *(unsigned char *)(v111 + 16) = 8;
  uint64_t v103 = 32;
  uint64_t v31 = swift_allocObject();
  uint64_t v98 = v31;
  *(void *)(v31 + 16) = v96;
  *(void *)(v31 + 24) = 0;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v98;
  uint64_t v113 = v32;
  *(void *)(v32 + 16) = v97;
  *(void *)(v32 + 24) = v33;
  uint64_t v115 = swift_allocObject();
  *(unsigned char *)(v115 + 16) = v99;
  uint64_t v117 = swift_allocObject();
  *(unsigned char *)(v117 + 16) = v101;
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v105;
  uint64_t v107 = v34;
  *(void *)(v34 + 16) = v102;
  *(void *)(v34 + 24) = v35;
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = v107;
  uint64_t v120 = v36;
  *(void *)(v36 + 16) = v106;
  *(void *)(v36 + 24) = v37;
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v118 = _allocateUninitializedArray<A>(_:)();
  uint64_t v121 = v38;
  swift_retain();
  uint64_t v39 = v109;
  uint64_t v40 = v121;
  *uint64_t v121 = v108;
  v40[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v39;
  swift_retain();
  uint64_t v41 = v111;
  uint64_t v42 = v121;
  v121[2] = v110;
  v42[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
  swift_retain();
  uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v113;
  id v44 = v121;
  v121[4] = v112;
  v44[5] = v43;
  swift_retain();
  uint64_t v45 = v115;
  uint64_t v46 = v121;
  v121[6] = v114;
  v46[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v45;
  swift_retain();
  uint64_t v47 = v117;
  uint64_t v48 = v121;
  v121[8] = v116;
  v48[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
  swift_retain();
  uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v120;
  id v50 = v121;
  v121[10] = v119;
  v50[11] = v49;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v123, (os_log_type_t)v124))
  {
    uint64_t v51 = v65;
    uint64_t v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v58 = createStorage<A>(capacity:type:)(0);
    uint64_t v59 = createStorage<A>(capacity:type:)(2);
    uint64_t v61 = &v129;
    uint64_t v129 = v57;
    uint64_t v62 = &v128;
    uint64_t v128 = v58;
    uint64_t v63 = &v127;
    uint64_t v127 = v59;
    unsigned int v60 = 2;
    serialize(_:at:)(2, &v129);
    serialize(_:at:)(v60, v61);
    uint64_t v125 = v108;
    uint64_t v126 = v109;
    closure #1 in osLogInternal(_:log:type:)(&v125, (uint64_t)v61, (uint64_t)v62, (uint64_t)v63);
    uint64_t v64 = v51;
    if (v51)
    {
      __break(1u);
    }
    else
    {
      uint64_t v125 = v110;
      uint64_t v126 = v111;
      closure #1 in osLogInternal(_:log:type:)(&v125, (uint64_t)&v129, (uint64_t)&v128, (uint64_t)&v127);
      uint64_t v55 = 0;
      uint64_t v52 = v55;
      uint64_t v125 = v112;
      uint64_t v126 = v113;
      closure #1 in osLogInternal(_:log:type:)(&v125, (uint64_t)&v129, (uint64_t)&v128, (uint64_t)&v127);
      v54[2] = v52;
      uint64_t v125 = v114;
      uint64_t v126 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v125, (uint64_t)&v129, (uint64_t)&v128, (uint64_t)&v127);
      v54[1] = 0;
      uint64_t v125 = v116;
      uint64_t v126 = v117;
      closure #1 in osLogInternal(_:log:type:)(&v125, (uint64_t)&v129, (uint64_t)&v128, (uint64_t)&v127);
      v54[0] = 0;
      uint64_t v125 = v119;
      uint64_t v126 = v120;
      closure #1 in osLogInternal(_:log:type:)(&v125, (uint64_t)&v129, (uint64_t)&v128, (uint64_t)&v127);
      _os_log_impl(&dword_250C36000, v123, (os_log_type_t)v124, "HeadphoneManager: %s: updated VM set: %s", v57, v95);
      destroyStorage<A>(_:count:)(v58, 0, v56);
      destroyStorage<A>(_:count:)(v59, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v57, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v90);
  return $defer #1 () in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(v91);
}

uint64_t $defer #1 () in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(void *a1)
{
  uint64_t v3 = a1;
  char v2 = 0;
  return (*(uint64_t (**)(char *))((*a1 & *MEMORY[0x263F8EED0]) + 0x140))(&v2);
}

uint64_t implicit closure #1 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updatePropertiesFor(updateRecord:remoteSendState:)", 0x32uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_debugDescription);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::Void __swiftcall HearingRecord.setPublishedAudiogram(_:)(HKAudiogramSample a1)
{
  Class isa = a1.super.super.super.isa;
  id v74 = partial apply for closure #1 in HearingRecord.setPublishedAudiogram(_:);
  float v75 = implicit closure #1 in HearingRecord.setPublishedAudiogram(_:);
  unint64_t v76 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  id v77 = implicit closure #2 in HearingRecord.setPublishedAudiogram(_:);
  float v78 = _sSiIegd_SiIegr_TRTA_3;
  int v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
  uint64_t v110 = 0;
  uint64_t v109 = 0;
  uint64_t v85 = 0;
  int v101 = 0;
  id v100 = 0;
  uint64_t v87 = type metadata accessor for Logger();
  uint64_t v88 = *(void *)(v87 - 8);
  uint64_t v89 = v87 - 8;
  unint64_t v90 = (*(void *)(v88 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  int v91 = (char *)v33 - v90;
  uint64_t v110 = MEMORY[0x270FA5388](isa, v2);
  uint64_t v109 = v1;
  unint64_t v92 = (void *)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x578))();
  if (v92)
  {
    float v73 = v92;
    id v72 = v92;
    int v101 = v92;
    type metadata accessor for HMDeviceConfigurations();
    id v71 = HMDeviceConfigurations.__allocating_init()();
    id v100 = v71;
    objc_msgSend(v71, sel_setSelectedAudiogram_, isa);
    uint64_t v65 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
    uint64_t v3 = v65;
    uint64_t v4 = v65;
    id v70 = (id)(*(uint64_t (**)(void *))((*v3 & *MEMORY[0x263F8EED0]) + 0x138))(v4);

    id v67 = objc_msgSend(v72, sel_bluetoothUUID);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v6;
    id v69 = (id)MEMORY[0x253385EB0](v5);
    swift_bridgeObjectRelease();

    uint64_t v7 = isa;
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = v74;
    *(void *)(v8 + 16) = isa;
    uint64_t v98 = v9;
    uint64_t v99 = v8;
    uint64_t aBlock = MEMORY[0x263EF8330];
    int v94 = 1107296256;
    int v95 = 0;
    uint64_t v96 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    uint64_t v97 = &block_descriptor_3;
    id v68 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v70, sel_modifyDeviceConfig_identifier_completion_, v71, v69, v68);
    _Block_release(v68);
  }
  else
  {
    float v10 = v91;
    uint64_t v11 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v10, v11, v87);
    uint64_t v63 = Logger.logObject.getter();
    int v64 = static os_log_type_t.error.getter();
    uint64_t v46 = &v107;
    uint64_t v107 = 22;
    unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v47 = v108;
    uint64_t v49 = 17;
    uint64_t v52 = 7;
    uint64_t v54 = swift_allocObject();
    *(unsigned char *)(v54 + 16) = 32;
    uint64_t v55 = swift_allocObject();
    int v50 = 8;
    *(unsigned char *)(v55 + 16) = 8;
    uint64_t v51 = 32;
    uint64_t v12 = swift_allocObject();
    uint64_t v48 = v12;
    *(void *)(v12 + 16) = v75;
    *(void *)(v12 + 24) = 0;
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v48;
    uint64_t v56 = v13;
    *(void *)(v13 + 16) = v76;
    *(void *)(v13 + 24) = v14;
    uint64_t v57 = swift_allocObject();
    *(unsigned char *)(v57 + 16) = 0;
    uint64_t v58 = swift_allocObject();
    *(unsigned char *)(v58 + 16) = v50;
    uint64_t v15 = swift_allocObject();
    uint64_t v53 = v15;
    *(void *)(v15 + 16) = v77;
    *(void *)(v15 + 24) = 0;
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = v53;
    uint64_t v60 = v16;
    *(void *)(v16 + 16) = v78;
    *(void *)(v16 + 24) = v17;
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v59 = _allocateUninitializedArray<A>(_:)();
    uint64_t v61 = v18;
    swift_retain();
    uint64_t v19 = v54;
    id v20 = v61;
    *uint64_t v61 = v79;
    v20[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
    swift_retain();
    uint64_t v21 = v55;
    id v22 = v61;
    v61[2] = v80;
    v22[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
    swift_retain();
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
    id v24 = v61;
    v61[4] = v81;
    v24[5] = v23;
    swift_retain();
    uint64_t v25 = v57;
    id v26 = v61;
    v61[6] = v82;
    v26[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
    swift_retain();
    uint64_t v27 = v58;
    signed __int8 v28 = v61;
    v61[8] = v83;
    v28[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
    swift_retain();
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v60;
    os_log_type_t v30 = v61;
    v61[10] = v84;
    v30[11] = v29;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v63, (os_log_type_t)v64))
    {
      uint64_t v31 = v85;
      uint64_t v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v37 = createStorage<A>(capacity:type:)(0);
      uint64_t v38 = createStorage<A>(capacity:type:)(1);
      uint64_t v40 = &v106;
      uint64_t v106 = v36;
      uint64_t v41 = &v105;
      uint64_t v105 = v37;
      uint64_t v42 = &v104;
      uint64_t v104 = v38;
      unsigned int v39 = 2;
      serialize(_:at:)(2, &v106);
      serialize(_:at:)(v39, v40);
      uint64_t v102 = v79;
      uint64_t v103 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42);
      uint64_t v43 = v31;
      if (v31)
      {
        __break(1u);
      }
      else
      {
        uint64_t v102 = v80;
        uint64_t v103 = v55;
        closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v106, (uint64_t)&v105, (uint64_t)&v104);
        uint64_t v34 = 0;
        uint64_t v32 = v34;
        uint64_t v102 = v81;
        uint64_t v103 = v56;
        closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v106, (uint64_t)&v105, (uint64_t)&v104);
        v33[2] = v32;
        uint64_t v102 = v82;
        uint64_t v103 = v57;
        closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v106, (uint64_t)&v105, (uint64_t)&v104);
        v33[1] = 0;
        uint64_t v102 = v83;
        uint64_t v103 = v58;
        closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v106, (uint64_t)&v105, (uint64_t)&v104);
        v33[0] = 0;
        uint64_t v102 = v84;
        uint64_t v103 = v60;
        closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v106, (uint64_t)&v105, (uint64_t)&v104);
        _os_log_impl(&dword_250C36000, v63, (os_log_type_t)v64, "HeadphoneManager: %s: %ld unable to set audiogram without device record!", v36, v47);
        destroyStorage<A>(_:count:)(v37, 0, v35);
        destroyStorage<A>(_:count:)(v38, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v36, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v87);
  }
}

uint64_t implicit closure #1 in HearingRecord.setPublishedAudiogram(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("setPublishedAudiogram(_:)", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in HearingRecord.setPublishedAudiogram(_:)()
{
  return 162;
}

void closure #1 in HearingRecord.setPublishedAudiogram(_:)(void *a1, void *a2)
{
  Swift::String v201 = a1;
  id v193 = a2;
  uint64_t v161 = implicit closure #1 in closure #1 in HearingRecord.setPublishedAudiogram(_:);
  uint64_t v162 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v163 = implicit closure #2 in closure #1 in HearingRecord.setPublishedAudiogram(_:);
  uint64_t v164 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  uint64_t v165 = partial apply for implicit closure #3 in closure #1 in HearingRecord.setPublishedAudiogram(_:);
  uint64_t v166 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  uint64_t v167 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v169 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v170 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v174 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v177 = implicit closure #4 in closure #1 in HearingRecord.setPublishedAudiogram(_:);
  uint64_t v178 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint32_t v179 = implicit closure #5 in closure #1 in HearingRecord.setPublishedAudiogram(_:);
  uint64_t v180 = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  uint64_t v181 = partial apply for implicit closure #6 in closure #1 in HearingRecord.setPublishedAudiogram(_:);
  int v182 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
  uint64_t v183 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v188 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
  uint64_t v189 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v218 = 0;
  uint64_t v217 = 0;
  uint64_t v192 = 0;
  uint64_t v209 = 0;
  uint64_t v194 = type metadata accessor for Logger();
  uint64_t v195 = *(void *)(v194 - 8);
  uint64_t v196 = v194 - 8;
  unint64_t v197 = (*(void *)(v195 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v201, v193);
  uint64_t v198 = (char *)v78 - v197;
  unint64_t v199 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (void *)MEMORY[0x270FA5388](v2, v4);
  uint64_t v200 = (char *)v78 - v199;
  uint64_t v218 = v5;
  uint64_t v217 = v6;
  id v7 = v5;
  if (v201)
  {
    uint64_t v160 = v201;
    uint64_t v40 = v198;
    id v106 = v201;
    uint64_t v209 = v201;
    uint64_t v41 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v40, v41, v194);
    id v42 = v106;
    uint64_t v117 = 7;
    uint64_t v115 = swift_allocObject();
    *(void *)(v115 + 16) = v106;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    char v132 = Logger.logObject.getter();
    int v133 = static os_log_type_t.default.getter();
    uint64_t v109 = &v207;
    uint64_t v116 = 32;
    uint64_t v207 = 32;
    unint64_t v107 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v108 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v110 = v208;
    uint64_t v113 = 17;
    uint64_t v120 = swift_allocObject();
    *(unsigned char *)(v120 + 16) = 32;
    uint64_t v121 = swift_allocObject();
    int v114 = 8;
    *(unsigned char *)(v121 + 16) = 8;
    uint64_t v43 = swift_allocObject();
    uint64_t v111 = v43;
    *(void *)(v43 + 16) = v161;
    *(void *)(v43 + 24) = 0;
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v111;
    uint64_t v122 = v44;
    *(void *)(v44 + 16) = v162;
    *(void *)(v44 + 24) = v45;
    uint64_t v123 = swift_allocObject();
    *(unsigned char *)(v123 + 16) = 0;
    uint64_t v124 = swift_allocObject();
    *(unsigned char *)(v124 + 16) = v114;
    uint64_t v46 = swift_allocObject();
    uint64_t v112 = v46;
    *(void *)(v46 + 16) = v163;
    *(void *)(v46 + 24) = 0;
    uint64_t v47 = swift_allocObject();
    uint64_t v48 = v112;
    uint64_t v125 = v47;
    *(void *)(v47 + 16) = v164;
    *(void *)(v47 + 24) = v48;
    uint64_t v126 = swift_allocObject();
    *(unsigned char *)(v126 + 16) = 64;
    uint64_t v127 = swift_allocObject();
    *(unsigned char *)(v127 + 16) = v114;
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = v115;
    uint64_t v118 = v49;
    *(void *)(v49 + 16) = v165;
    *(void *)(v49 + 24) = v50;
    uint64_t v51 = swift_allocObject();
    uint64_t v52 = v118;
    uint64_t v119 = v51;
    *(void *)(v51 + 16) = v166;
    *(void *)(v51 + 24) = v52;
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = v119;
    uint64_t v129 = v53;
    *(void *)(v53 + 16) = v167;
    *(void *)(v53 + 24) = v54;
    uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v128 = _allocateUninitializedArray<A>(_:)();
    uint64_t v130 = v55;
    swift_retain();
    uint64_t v56 = v120;
    uint64_t v57 = v130;
    *uint64_t v130 = v168;
    v57[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
    swift_retain();
    uint64_t v58 = v121;
    uint64_t v59 = v130;
    v130[2] = v169;
    v59[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v58;
    swift_retain();
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v122;
    uint64_t v61 = v130;
    v130[4] = v170;
    v61[5] = v60;
    swift_retain();
    uint64_t v62 = v123;
    uint64_t v63 = v130;
    v130[6] = v171;
    v63[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62;
    swift_retain();
    uint64_t v64 = v124;
    uint64_t v65 = v130;
    v130[8] = v172;
    v65[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v64;
    swift_retain();
    uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v125;
    id v67 = v130;
    v130[10] = v173;
    v67[11] = v66;
    swift_retain();
    uint64_t v68 = v126;
    id v69 = v130;
    v130[12] = v174;
    v69[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
    swift_retain();
    uint64_t v70 = v127;
    id v71 = v130;
    v130[14] = v175;
    v71[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
    swift_retain();
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v129;
    float v73 = v130;
    v130[16] = v176;
    v73[17] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v132, (os_log_type_t)v133))
    {
      uint64_t v74 = v192;
      uint64_t v99 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v98 = 1;
      uint64_t v100 = createStorage<A>(capacity:type:)(1);
      uint64_t v101 = createStorage<A>(capacity:type:)(v98);
      uint64_t v102 = &v206;
      uint64_t v206 = v99;
      uint64_t v103 = &v205;
      uint64_t v205 = v100;
      uint64_t v104 = &v204;
      uint64_t v204 = v101;
      serialize(_:at:)(2, &v206);
      serialize(_:at:)(3, v102);
      int v202 = v168;
      uint64_t v203 = v120;
      closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)v102, (uint64_t)v103, (uint64_t)v104);
      uint64_t v105 = v74;
      if (v74)
      {
        __break(1u);
      }
      else
      {
        int v202 = v169;
        uint64_t v203 = v121;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        uint64_t v96 = 0;
        uint64_t v75 = v96;
        int v202 = v170;
        uint64_t v203 = v122;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        uint64_t v95 = v75;
        int v202 = v171;
        uint64_t v203 = v123;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        uint64_t v94 = 0;
        int v202 = v172;
        uint64_t v203 = v124;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        uint64_t v93 = 0;
        int v202 = v173;
        uint64_t v203 = v125;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        uint64_t v92 = 0;
        int v202 = v174;
        uint64_t v203 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        uint64_t v91 = 0;
        int v202 = v175;
        uint64_t v203 = v127;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        uint64_t v90 = 0;
        int v202 = v176;
        uint64_t v203 = v129;
        closure #1 in osLogInternal(_:log:type:)(&v202, (uint64_t)&v206, (uint64_t)&v205, (uint64_t)&v204);
        _os_log_impl(&dword_250C36000, v132, (os_log_type_t)v133, "HeadphoneManager: %s: %ld failed to set published audiogram! %@", v99, v110);
        uint64_t v89 = 1;
        destroyStorage<A>(_:count:)(v100, 1, v97);
        destroyStorage<A>(_:count:)(v101, v89, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v99, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v195 + 8))(v198, v194);
  }
  else
  {
    uint64_t v8 = v200;
    uint64_t v9 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v8, v9, v194);
    id v10 = v193;
    uint64_t v143 = 7;
    uint64_t v144 = swift_allocObject();
    *(void *)(v144 + 16) = v193;
    uint64_t v158 = Logger.logObject.getter();
    int v159 = static os_log_type_t.default.getter();
    uint64_t v136 = &v215;
    uint64_t v142 = 32;
    uint64_t v215 = 32;
    unint64_t v134 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v135 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v137 = v216;
    uint64_t v140 = 17;
    uint64_t v146 = swift_allocObject();
    *(unsigned char *)(v146 + 16) = 32;
    uint64_t v147 = swift_allocObject();
    int v141 = 8;
    *(unsigned char *)(v147 + 16) = 8;
    uint64_t v11 = swift_allocObject();
    uint64_t v138 = v11;
    *(void *)(v11 + 16) = v177;
    *(void *)(v11 + 24) = 0;
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = v138;
    uint64_t v148 = v12;
    *(void *)(v12 + 16) = v178;
    *(void *)(v12 + 24) = v13;
    uint64_t v149 = swift_allocObject();
    *(unsigned char *)(v149 + 16) = 0;
    uint64_t v150 = swift_allocObject();
    *(unsigned char *)(v150 + 16) = v141;
    uint64_t v14 = swift_allocObject();
    uint64_t v139 = v14;
    *(void *)(v14 + 16) = v179;
    *(void *)(v14 + 24) = 0;
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v139;
    uint64_t v151 = v15;
    *(void *)(v15 + 16) = v180;
    *(void *)(v15 + 24) = v16;
    uint64_t v152 = swift_allocObject();
    *(unsigned char *)(v152 + 16) = 64;
    uint64_t v153 = swift_allocObject();
    *(unsigned char *)(v153 + 16) = v141;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v144;
    uint64_t v145 = v17;
    *(void *)(v17 + 16) = v181;
    *(void *)(v17 + 24) = v18;
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = v145;
    uint64_t v155 = v19;
    *(void *)(v19 + 16) = v182;
    *(void *)(v19 + 24) = v20;
    uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v154 = _allocateUninitializedArray<A>(_:)();
    uint64_t v156 = v21;
    swift_retain();
    uint64_t v22 = v146;
    uint64_t v23 = v156;
    char *v156 = v183;
    v23[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
    swift_retain();
    uint64_t v24 = v147;
    uint64_t v25 = v156;
    v156[2] = v184;
    v25[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
    swift_retain();
    id v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
    uint64_t v27 = v156;
    v156[4] = v185;
    v27[5] = v26;
    swift_retain();
    uint64_t v28 = v149;
    uint64_t v29 = v156;
    v156[6] = v186;
    v29[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28;
    swift_retain();
    uint64_t v30 = v150;
    uint64_t v31 = v156;
    v156[8] = v187;
    v31[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v30;
    swift_retain();
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v151;
    uint64_t v33 = v156;
    v156[10] = v188;
    v33[11] = v32;
    swift_retain();
    uint64_t v34 = v152;
    uint64_t v35 = v156;
    v156[12] = v189;
    v35[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = v153;
    uint64_t v37 = v156;
    v156[14] = v190;
    v37[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
    swift_retain();
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v155;
    unsigned int v39 = v156;
    v156[16] = v191;
    v39[17] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v158, (os_log_type_t)v159))
    {
      uint64_t v76 = v192;
      uint64_t v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v81 = 1;
      uint64_t v83 = createStorage<A>(capacity:type:)(1);
      uint64_t v84 = createStorage<A>(capacity:type:)(v81);
      uint64_t v85 = &v214;
      uint64_t v214 = v82;
      uint64_t v86 = &v213;
      uint64_t v213 = v83;
      uint64_t v87 = &v212;
      uint64_t v212 = v84;
      serialize(_:at:)(2, &v214);
      serialize(_:at:)(3, v85);
      uint64_t v210 = v183;
      uint64_t v211 = v146;
      closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)v85, (uint64_t)v86, (uint64_t)v87);
      uint64_t v88 = v76;
      if (v76)
      {
        __break(1u);
      }
      else
      {
        uint64_t v210 = v184;
        uint64_t v211 = v147;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        uint64_t v79 = 0;
        uint64_t v77 = v79;
        uint64_t v210 = v185;
        uint64_t v211 = v148;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        v78[6] = v77;
        uint64_t v210 = v186;
        uint64_t v211 = v149;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        v78[5] = 0;
        uint64_t v210 = v187;
        uint64_t v211 = v150;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        v78[4] = 0;
        uint64_t v210 = v188;
        uint64_t v211 = v151;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        v78[3] = 0;
        uint64_t v210 = v189;
        uint64_t v211 = v152;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        v78[2] = 0;
        uint64_t v210 = v190;
        uint64_t v211 = v153;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        v78[1] = 0;
        uint64_t v210 = v191;
        uint64_t v211 = v155;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        _os_log_impl(&dword_250C36000, v158, (os_log_type_t)v159, "HeadphoneManager: %s: %ld sucessfully set published audiogram! %@", v82, v137);
        v78[0] = 1;
        destroyStorage<A>(_:count:)(v83, 1, v80);
        destroyStorage<A>(_:count:)(v84, v78[0], MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v82, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v195 + 8))(v200, v194);
  }
}

uint64_t implicit closure #1 in closure #1 in HearingRecord.setPublishedAudiogram(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("setPublishedAudiogram(_:)", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in HearingRecord.setPublishedAudiogram(_:)()
{
  return 173;
}

void *implicit closure #3 in closure #1 in HearingRecord.setPublishedAudiogram(_:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t implicit closure #4 in closure #1 in HearingRecord.setPublishedAudiogram(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("setPublishedAudiogram(_:)", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #5 in closure #1 in HearingRecord.setPublishedAudiogram(_:)()
{
  return 176;
}

void *implicit closure #6 in closure #1 in HearingRecord.setPublishedAudiogram(_:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t HearingRecord.resetHearingAidTunings(completion:)(uint64_t a1, uint64_t a2)
{
  id v30 = 0;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v32 = v2;
  char v31 = 2;
  uint64_t v14 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(char *))((*v2 & *MEMORY[0x263F8EED0]) + 0x140))(&v31);
  type metadata accessor for HMDeviceConfigurations();
  id v21 = HMDeviceConfigurations.__allocating_init()();
  id v30 = v21;
  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(floatLiteral:)(0.5).super.super.isa;
  objc_msgSend(v21, sel_setBalance_);

  Class v9 = NSNumber.init(floatLiteral:)(0.5).super.super.isa;
  objc_msgSend(v21, sel_setTone_);

  Class v10 = NSNumber.init(integerLiteral:)(0).super.super.isa;
  objc_msgSend(v21, sel_setBeamFormer_);

  Class v11 = NSNumber.init(integerLiteral:)(0).super.super.isa;
  objc_msgSend(v21, sel_setNoiseSuppression_);

  Class v12 = NSNumber.init(floatLiteral:)(0.5).super.super.isa;
  objc_msgSend(v21, sel_setAmplification_);

  uint64_t v13 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
  uint64_t v20 = (void *)(*(uint64_t (**)(void *))((*v13 & *v14) + 0x138))(v13);

  uint64_t v3 = (*(uint64_t (**)(void))((*v22 & *v14) + 0x2E8))();
  uint64_t v19 = (void *)MEMORY[0x253385EB0](v3);
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_allocObject();
  uint64_t v4 = v22;
  swift_unknownObjectWeakInit();

  swift_retain();
  swift_retain();
  id v5 = v21;
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = a1;
  v6[3] = a2;
  v6[4] = v17;
  v6[5] = v21;
  uint64_t v28 = partial apply for closure #1 in HearingRecord.resetHearingAidTunings(completion:);
  uint64_t v29 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v24 = 1107296256;
  int v25 = 0;
  id v26 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  uint64_t v27 = &block_descriptor_257;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_release();
  swift_release();
  objc_msgSend(v20, sel_modifyDeviceConfig_identifier_completion_, v21, v19, v18);
  _Block_release(v18);

  return $defer #1 () in HearingRecord.resetHearingAidTunings(completion:)(v22);
}

uint64_t $defer #1 () in HearingRecord.resetHearingAidTunings(completion:)(void *a1)
{
  uint64_t v3 = a1;
  char v2 = 0;
  return (*(uint64_t (**)(char *))((*a1 & *MEMORY[0x263F8EED0]) + 0x140))(&v2);
}

uint64_t closure #1 in HearingRecord.resetHearingAidTunings(completion:)(void *a1, void (*a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v149 = a1;
  uint64_t v143 = a2;
  uint64_t v140 = a3;
  uint64_t v141 = a4;
  id v142 = a5;
  uint64_t v128 = implicit closure #1 in closure #1 in HearingRecord.resetHearingAidTunings(completion:);
  uint64_t v129 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v130 = partial apply for implicit closure #2 in closure #1 in HearingRecord.resetHearingAidTunings(completion:);
  uint64_t v131 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  char v132 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  int v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint32_t v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v171 = 0;
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  uint64_t v168 = 0;
  uint64_t v167 = 0;
  uint64_t v157 = 0;
  uint64_t v139 = 0;
  uint64_t v144 = type metadata accessor for Logger();
  uint64_t v145 = *(void *)(v144 - 8);
  uint64_t v146 = v144 - 8;
  unint64_t v147 = (*(void *)(v145 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v148 = (char *)&v57 - v147;
  id v171 = (id)MEMORY[0x270FA5388](v149, v143);
  uint64_t v169 = v5;
  uint64_t v170 = v6;
  uint64_t v168 = v7 + 16;
  uint64_t v167 = v8;
  id v9 = v171;
  if (v149)
  {
    uint64_t v127 = v149;
    Class v10 = v148;
    id v102 = v149;
    uint64_t v157 = v149;
    uint64_t v11 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v10, v11, v144);
    id v12 = v102;
    uint64_t v112 = 7;
    uint64_t v110 = swift_allocObject();
    *(void *)(v110 + 16) = v102;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    uint64_t v124 = Logger.logObject.getter();
    int v125 = static os_log_type_t.error.getter();
    uint64_t v105 = &v155;
    uint64_t v155 = 22;
    unint64_t v103 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v104 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v106 = v156;
    uint64_t v108 = 17;
    uint64_t v115 = swift_allocObject();
    *(unsigned char *)(v115 + 16) = 32;
    uint64_t v116 = swift_allocObject();
    int v109 = 8;
    *(unsigned char *)(v116 + 16) = 8;
    uint64_t v111 = 32;
    uint64_t v13 = swift_allocObject();
    uint64_t v107 = v13;
    *(void *)(v13 + 16) = v128;
    *(void *)(v13 + 24) = 0;
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = v107;
    uint64_t v117 = v14;
    *(void *)(v14 + 16) = v129;
    *(void *)(v14 + 24) = v15;
    uint64_t v118 = swift_allocObject();
    *(unsigned char *)(v118 + 16) = 64;
    uint64_t v119 = swift_allocObject();
    *(unsigned char *)(v119 + 16) = v109;
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = v110;
    uint64_t v113 = v16;
    *(void *)(v16 + 16) = v130;
    *(void *)(v16 + 24) = v17;
    uint64_t v18 = swift_allocObject();
    uint64_t v19 = v113;
    uint64_t v114 = v18;
    *(void *)(v18 + 16) = v131;
    *(void *)(v18 + 24) = v19;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v114;
    uint64_t v121 = v20;
    *(void *)(v20 + 16) = v132;
    *(void *)(v20 + 24) = v21;
    uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v120 = _allocateUninitializedArray<A>(_:)();
    uint64_t v122 = v22;
    swift_retain();
    uint64_t v23 = v115;
    int v24 = v122;
    *uint64_t v122 = v133;
    v24[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
    swift_retain();
    uint64_t v25 = v116;
    id v26 = v122;
    v122[2] = v134;
    v26[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
    swift_retain();
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v117;
    uint64_t v28 = v122;
    v122[4] = v135;
    v28[5] = v27;
    swift_retain();
    uint64_t v29 = v118;
    id v30 = v122;
    v122[6] = v136;
    v30[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
    swift_retain();
    uint64_t v31 = v119;
    uint64_t v32 = v122;
    v122[8] = v137;
    v32[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
    swift_retain();
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v121;
    uint64_t v34 = v122;
    v122[10] = v138;
    v34[11] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v124, (os_log_type_t)v125))
    {
      uint64_t v35 = v139;
      uint64_t v94 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v93 = 1;
      uint64_t v95 = createStorage<A>(capacity:type:)(1);
      uint64_t v96 = createStorage<A>(capacity:type:)(v93);
      uint64_t v98 = &v154;
      uint64_t v154 = v94;
      uint64_t v99 = &v153;
      uint64_t v153 = v95;
      uint64_t v100 = &v152;
      uint64_t v152 = v96;
      unsigned int v97 = 2;
      serialize(_:at:)(2, &v154);
      serialize(_:at:)(v97, v98);
      uint64_t v150 = v133;
      uint64_t v151 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100);
      uint64_t v101 = v35;
      if (v35)
      {
        __break(1u);
      }
      else
      {
        uint64_t v150 = v134;
        uint64_t v151 = v116;
        closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v154, (uint64_t)&v153, (uint64_t)&v152);
        uint64_t v91 = 0;
        uint64_t v36 = v91;
        uint64_t v150 = v135;
        uint64_t v151 = v117;
        closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v154, (uint64_t)&v153, (uint64_t)&v152);
        uint64_t v90 = v36;
        uint64_t v150 = v136;
        uint64_t v151 = v118;
        closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v154, (uint64_t)&v153, (uint64_t)&v152);
        uint64_t v89 = 0;
        uint64_t v150 = v137;
        uint64_t v151 = v119;
        closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v154, (uint64_t)&v153, (uint64_t)&v152);
        uint64_t v88 = 0;
        uint64_t v150 = v138;
        uint64_t v151 = v121;
        closure #1 in osLogInternal(_:log:type:)(&v150, (uint64_t)&v154, (uint64_t)&v153, (uint64_t)&v152);
        _os_log_impl(&dword_250C36000, v124, (os_log_type_t)v125, "HeadphoneManager: %s:  reset HearingAid Tunings failed ... restoring %@", v94, v106);
        uint64_t v87 = 1;
        destroyStorage<A>(_:count:)(v95, 1, v92);
        destroyStorage<A>(_:count:)(v96, v87, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v94, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v145 + 8))(v148, v144);
    return $defer #1 () in closure #1 in HearingRecord.resetHearingAidTunings(completion:)(v143);
  }
  else
  {
    uint64_t v126 = v141 + 16;
    swift_beginAccess();
    uint64_t v166 = (void *)MEMORY[0x253386C10](v126);
    if (v166)
    {
      uint64_t v85 = (id *)&v166;
      uint64_t v38 = v166;
      id v86 = v166;
      unsigned int v39 = v166;
      outlined destroy of HearingRecord?(v85);
      swift_endAccess();
      char v158 = 2;
      (*(void (**)(char *))((*v38 & *MEMORY[0x263F8EED0]) + 0x140))(&v158);
    }
    else
    {
      outlined destroy of HearingRecord?((id *)&v166);
      swift_endAccess();
    }
    uint64_t v84 = v141 + 16;
    swift_beginAccess();
    uint64_t v165 = (void *)MEMORY[0x253386C10](v84);
    if (v165)
    {
      uint64_t v80 = (id *)&v165;
      uint64_t v40 = v165;
      id v83 = v165;
      uint64_t v41 = v165;
      outlined destroy of HearingRecord?(v80);
      swift_endAccess();
      id v81 = objc_msgSend(v142, sel_amplification);
      objc_msgSend(v81, sel_floatValue);
      float v82 = v42;

      (*(void (**)(float))((*v40 & *MEMORY[0x263F8EED0]) + 0x158))(v82);
    }
    else
    {
      outlined destroy of HearingRecord?((id *)&v165);
      swift_endAccess();
    }
    uint64_t v79 = v141 + 16;
    swift_beginAccess();
    uint64_t v164 = (void *)MEMORY[0x253386C10](v79);
    if (v164)
    {
      uint64_t v75 = (id *)&v164;
      uint64_t v43 = v164;
      id v78 = v164;
      uint64_t v44 = v164;
      outlined destroy of HearingRecord?(v75);
      swift_endAccess();
      id v76 = objc_msgSend(v142, sel_balance);
      objc_msgSend(v76, sel_floatValue);
      float v77 = v45;

      (*(void (**)(float))((*v43 & *MEMORY[0x263F8EED0]) + 0x178))(v77);
    }
    else
    {
      outlined destroy of HearingRecord?((id *)&v164);
      swift_endAccess();
    }
    uint64_t v74 = v141 + 16;
    swift_beginAccess();
    uint64_t v163 = (void *)MEMORY[0x253386C10](v74);
    if (v163)
    {
      uint64_t v70 = (id *)&v163;
      uint64_t v46 = v163;
      id v73 = v163;
      uint64_t v47 = v163;
      outlined destroy of HearingRecord?(v70);
      swift_endAccess();
      id v71 = objc_msgSend(v142, sel_beamFormer);
      objc_msgSend(v71, sel_floatValue);
      float v72 = v48;

      (*(void (**)(float))((*v46 & *MEMORY[0x263F8EED0]) + 0x198))(v72);
    }
    else
    {
      outlined destroy of HearingRecord?((id *)&v163);
      swift_endAccess();
    }
    uint64_t v69 = v141 + 16;
    swift_beginAccess();
    uint64_t v162 = (void *)MEMORY[0x253386C10](v69);
    if (v162)
    {
      uint64_t v65 = (id *)&v162;
      uint64_t v49 = v162;
      id v68 = v162;
      uint64_t v50 = v162;
      outlined destroy of HearingRecord?(v65);
      swift_endAccess();
      id v66 = objc_msgSend(v142, sel_noiseSuppression);
      objc_msgSend(v66, sel_floatValue);
      float v67 = v51;

      (*(void (**)(float))((*v49 & *MEMORY[0x263F8EED0]) + 0x1B8))(v67);
    }
    else
    {
      outlined destroy of HearingRecord?((id *)&v162);
      swift_endAccess();
    }
    uint64_t v64 = v141 + 16;
    swift_beginAccess();
    uint64_t v161 = (void *)MEMORY[0x253386C10](v64);
    if (v161)
    {
      uint64_t v60 = (id *)&v161;
      uint64_t v52 = v161;
      id v63 = v161;
      uint64_t v53 = v161;
      outlined destroy of HearingRecord?(v60);
      swift_endAccess();
      id v61 = objc_msgSend(v142, sel_tone);
      objc_msgSend(v61, sel_floatValue);
      float v62 = v54;

      (*(void (**)(float))((*v52 & *MEMORY[0x263F8EED0]) + 0x1D8))(v62);
    }
    else
    {
      outlined destroy of HearingRecord?((id *)&v161);
      swift_endAccess();
    }
    uint64_t v59 = v141 + 16;
    swift_beginAccess();
    v160[0] = (id)MEMORY[0x253386C10](v59);
    if (v160[0])
    {
      uint64_t v57 = v160;
      uint64_t v55 = v160[0];
      id v58 = v160[0];
      id v56 = v160[0];
      outlined destroy of HearingRecord?(v57);
      swift_endAccess();
      char v159 = 0;
      (*(void (**)(char *))((*v55 & *MEMORY[0x263F8EED0]) + 0x140))(&v159);
    }
    else
    {
      outlined destroy of HearingRecord?(v160);
      swift_endAccess();
    }
    return $defer #1 () in closure #1 in HearingRecord.resetHearingAidTunings(completion:)(v143);
  }
}

uint64_t $defer #1 () in closure #1 in HearingRecord.resetHearingAidTunings(completion:)(void (*a1)(void))
{
  return swift_release();
}

uint64_t implicit closure #1 in closure #1 in HearingRecord.resetHearingAidTunings(completion:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("resetHearingAidTunings(completion:)", 0x23uLL, 1)._countAndFlagsBits;
}

void *implicit closure #2 in closure #1 in HearingRecord.resetHearingAidTunings(completion:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v72 = a1;
  uint64_t v66 = a2;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  id v78 = partial apply for implicit closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:);
  float v82 = _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_1;
  uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_1;
  id v61 = partial apply for closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:);
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v110 = 0;
  uint64_t v62 = 0;
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v71 - 8);
  uint64_t v70 = v71 - 8;
  unint64_t v67 = (*(void *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (char *)&v41 - v67;
  id v68 = (char *)&v41 - v67;
  uint64_t v114 = MEMORY[0x270FA5388](v72, v66);
  uint64_t v113 = v5;
  uint64_t v111 = v6;
  uint64_t v112 = v7;
  uint64_t v110 = v8;
  uint64_t v9 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v4, v9, v71);
  id v10 = v72;
  uint64_t v80 = 7;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = v72;
  uint64_t v93 = Logger.logObject.getter();
  int v94 = static os_log_type_t.default.getter();
  uint64_t v75 = &v108;
  uint64_t v108 = 12;
  unint64_t v73 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v74 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v76 = v109;
  uint64_t v77 = 17;
  uint64_t v85 = swift_allocObject();
  *(unsigned char *)(v85 + 16) = 64;
  uint64_t v87 = swift_allocObject();
  *(unsigned char *)(v87 + 16) = 8;
  uint64_t v79 = 32;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v81;
  uint64_t v83 = v11;
  *(void *)(v11 + 16) = v78;
  *(void *)(v11 + 24) = v12;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v83;
  uint64_t v90 = v13;
  *(void *)(v13 + 16) = v82;
  *(void *)(v13 + 24) = v14;
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v88 = _allocateUninitializedArray<A>(_:)();
  uint64_t v91 = v15;
  swift_retain();
  uint64_t v16 = v85;
  uint64_t v17 = v91;
  *uint64_t v91 = v84;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  swift_retain();
  uint64_t v18 = v87;
  uint64_t v19 = v91;
  v91[2] = v86;
  v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
  swift_retain();
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v90;
  uint64_t v21 = v91;
  v91[4] = v89;
  v21[5] = v20;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v93, (os_log_type_t)v94))
  {
    uint64_t v22 = v62;
    float v54 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v55 = createStorage<A>(capacity:type:)(1);
    uint64_t v56 = createStorage<A>(capacity:type:)(0);
    uint64_t v57 = &v99;
    uint64_t v99 = v54;
    id v58 = &v98;
    uint64_t v98 = v55;
    uint64_t v59 = &v97;
    uint64_t v97 = v56;
    serialize(_:at:)(2, &v99);
    serialize(_:at:)(1, v57);
    uint64_t v95 = v84;
    uint64_t v96 = v85;
    closure #1 in osLogInternal(_:log:type:)(&v95, (uint64_t)v57, (uint64_t)v58, (uint64_t)v59);
    uint64_t v60 = v22;
    if (v22)
    {
      __break(1u);
    }
    else
    {
      uint64_t v95 = v86;
      uint64_t v96 = v87;
      closure #1 in osLogInternal(_:log:type:)(&v95, (uint64_t)&v99, (uint64_t)&v98, (uint64_t)&v97);
      uint64_t v52 = 0;
      uint64_t v95 = v89;
      uint64_t v96 = v90;
      closure #1 in osLogInternal(_:log:type:)(&v95, (uint64_t)&v99, (uint64_t)&v98, (uint64_t)&v97);
      _os_log_impl(&dword_250C36000, v93, (os_log_type_t)v94, "HeadphoneManager: group config set: %@", v54, v76);
      destroyStorage<A>(_:count:)(v55, 1, v53);
      destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v54, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v23 = v65;

  (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v71);
  char v107 = 2;
  uint64_t v24 = *v23;
  uint64_t v43 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(char *))((v24 & *MEMORY[0x263F8EED0]) + 0x140))(&v107);
  float v42 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
  uint64_t v25 = v42;
  id v26 = v42;
  uint64_t v27 = (void *)(*(uint64_t (**)(void *))((*v25 & *v43) + 0x138))(v26);
  uint64_t v28 = v65;
  id v51 = v27;

  uint64_t v29 = (*(uint64_t (**)(void))((*v28 & *v43) + 0x2E8))();
  uint64_t v44 = v30;
  id v50 = (id)MEMORY[0x253385EB0](v29);
  swift_bridgeObjectRelease();
  uint64_t v47 = 7;
  uint64_t v48 = swift_allocObject();
  uint64_t v45 = v48 + 16;
  uint64_t v31 = v65;
  uint64_t v46 = v65;
  swift_unknownObjectWeakInit();

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v32 = v72;
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v64;
  uint64_t v35 = v66;
  uint64_t v36 = v61;
  id v37 = v72;
  uint64_t v38 = (void *)v33;
  uint64_t v39 = v48;
  v38[2] = v63;
  v38[3] = v34;
  v38[4] = v39;
  v38[5] = v35;
  v38[6] = v37;
  uint64_t v105 = v36;
  uint32_t v106 = v38;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v101 = 1107296256;
  int v102 = 0;
  unint64_t v103 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  unint64_t v104 = &block_descriptor_281;
  uint64_t v49 = _Block_copy(&aBlock);
  swift_release();
  swift_release();
  objc_msgSend(v51, sel_modifyDeviceConfig_identifier_completion_, v72, v50, v49);
  _Block_release(v49);

  return $defer #1 () in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(v65);
}

void *implicit closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t $defer #1 () in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void *a1)
{
  uint64_t v3 = a1;
  char v2 = 0;
  return (*(uint64_t (**)(char *))((*a1 & *MEMORY[0x263F8EED0]) + 0x140))(&v2);
}

uint64_t closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void *a1, void (*a2)(void), uint64_t a3, id *a4, void *a5, void *a6)
{
  uint64_t v121 = a1;
  uint64_t v115 = a2;
  uint64_t v111 = a3;
  uint64_t v112 = a4;
  uint64_t v113 = a5;
  id v114 = a6;
  uint64_t v98 = implicit closure #1 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:);
  uint64_t v99 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v100 = partial apply for implicit closure #2 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:);
  int v101 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  int v102 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  unint64_t v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  unint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint32_t v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  char v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint32_t v109 = partial apply for closure #1 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:);
  id v139 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  uint64_t v136 = 0;
  uint64_t v135 = 0;
  uint64_t v134 = 0;
  uint64_t v110 = 0;
  uint64_t v129 = 0;
  uint64_t v116 = type metadata accessor for Logger();
  uint64_t v117 = *(void *)(v116 - 8);
  uint64_t v118 = v116 - 8;
  unint64_t v119 = (*(void *)(v117 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v120 = (char *)&v49 - v119;
  id v139 = (id)MEMORY[0x270FA5388](v121, v115);
  uint64_t v137 = v6;
  uint64_t v138 = v7;
  uint64_t v136 = v8 + 16;
  uint64_t v135 = v9;
  uint64_t v134 = v10;
  id v11 = v139;
  if (v121)
  {
    uint64_t v97 = v121;
    uint64_t v12 = v120;
    id v72 = v121;
    uint64_t v129 = v121;
    uint64_t v13 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v12, v13, v116);
    id v14 = v72;
    uint64_t v82 = 7;
    uint64_t v80 = swift_allocObject();
    *(void *)(v80 + 16) = v72;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    int v94 = Logger.logObject.getter();
    int v95 = static os_log_type_t.error.getter();
    uint64_t v75 = &v127;
    uint64_t v127 = 22;
    unint64_t v73 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v74 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v76 = v128;
    uint64_t v78 = 17;
    uint64_t v85 = swift_allocObject();
    *(unsigned char *)(v85 + 16) = 32;
    uint64_t v86 = swift_allocObject();
    int v79 = 8;
    *(unsigned char *)(v86 + 16) = 8;
    uint64_t v81 = 32;
    uint64_t v15 = swift_allocObject();
    uint64_t v77 = v15;
    *(void *)(v15 + 16) = v98;
    *(void *)(v15 + 24) = 0;
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = v77;
    uint64_t v87 = v16;
    *(void *)(v16 + 16) = v99;
    *(void *)(v16 + 24) = v17;
    uint64_t v88 = swift_allocObject();
    *(unsigned char *)(v88 + 16) = 64;
    uint64_t v89 = swift_allocObject();
    *(unsigned char *)(v89 + 16) = v79;
    uint64_t v18 = swift_allocObject();
    uint64_t v19 = v80;
    uint64_t v83 = v18;
    *(void *)(v18 + 16) = v100;
    *(void *)(v18 + 24) = v19;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v83;
    uint64_t v84 = v20;
    *(void *)(v20 + 16) = v101;
    *(void *)(v20 + 24) = v21;
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v84;
    uint64_t v91 = v22;
    *(void *)(v22 + 16) = v102;
    *(void *)(v22 + 24) = v23;
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v90 = _allocateUninitializedArray<A>(_:)();
    uint64_t v92 = v24;
    swift_retain();
    uint64_t v25 = v85;
    id v26 = v92;
    *uint64_t v92 = v103;
    v26[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
    swift_retain();
    uint64_t v27 = v86;
    uint64_t v28 = v92;
    v92[2] = v104;
    v28[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
    swift_retain();
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v87;
    uint64_t v30 = v92;
    v92[4] = v105;
    v30[5] = v29;
    swift_retain();
    uint64_t v31 = v88;
    id v32 = v92;
    v92[6] = v106;
    v32[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
    swift_retain();
    uint64_t v33 = v89;
    uint64_t v34 = v92;
    v92[8] = v107;
    v34[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33;
    swift_retain();
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91;
    uint64_t v36 = v92;
    v92[10] = v108;
    v36[11] = v35;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v94, (os_log_type_t)v95))
    {
      uint64_t v37 = v110;
      uint64_t v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v63 = 1;
      uint64_t v65 = createStorage<A>(capacity:type:)(1);
      uint64_t v66 = createStorage<A>(capacity:type:)(v63);
      id v68 = &v126;
      uint64_t v126 = v64;
      uint64_t v69 = &v125;
      uint64_t v125 = v65;
      uint64_t v70 = &v124;
      uint64_t v124 = v66;
      unsigned int v67 = 2;
      serialize(_:at:)(2, &v126);
      serialize(_:at:)(v67, v68);
      uint64_t v122 = v103;
      uint64_t v123 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)v68, (uint64_t)v69, (uint64_t)v70);
      uint64_t v71 = v37;
      if (v37)
      {
        __break(1u);
      }
      else
      {
        uint64_t v122 = v104;
        uint64_t v123 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v126, (uint64_t)&v125, (uint64_t)&v124);
        uint64_t v61 = 0;
        uint64_t v38 = v61;
        uint64_t v122 = v105;
        uint64_t v123 = v87;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v126, (uint64_t)&v125, (uint64_t)&v124);
        uint64_t v60 = v38;
        uint64_t v122 = v106;
        uint64_t v123 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v126, (uint64_t)&v125, (uint64_t)&v124);
        uint64_t v59 = 0;
        uint64_t v122 = v107;
        uint64_t v123 = v89;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v126, (uint64_t)&v125, (uint64_t)&v124);
        uint64_t v58 = 0;
        uint64_t v122 = v108;
        uint64_t v123 = v91;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v126, (uint64_t)&v125, (uint64_t)&v124);
        _os_log_impl(&dword_250C36000, v94, (os_log_type_t)v95, "HeadphoneManager: %s:  (Set) updateGroupValues failed ... restoring %@", v64, v76);
        uint64_t v57 = 1;
        destroyStorage<A>(_:count:)(v65, 1, v62);
        destroyStorage<A>(_:count:)(v66, v57, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v64, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v117 + 8))(v120, v116);
    return $defer #1 () in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(v115);
  }
  else
  {
    uint64_t v96 = v112 + 2;
    swift_beginAccess();
    int v133 = (void *)MEMORY[0x253386C10](v96);
    if (v133)
    {
      uint64_t v55 = (id *)&v133;
      uint64_t v40 = v133;
      id v56 = v133;
      uint64_t v41 = v133;
      outlined destroy of HearingRecord?(v55);
      swift_endAccess();
      char v130 = 2;
      (*(void (**)(char *))((*v40 & *MEMORY[0x263F8EED0]) + 0x140))(&v130);
    }
    else
    {
      outlined destroy of HearingRecord?((id *)&v133);
      swift_endAccess();
    }
    uint64_t v42 = v110;
    v132[4] = v113;
    swift_retain();
    id v43 = v114;
    uint64_t v52 = &v49;
    MEMORY[0x270FA5388](&v49, v44);
    uint64_t v45 = &v49 - 4;
    uint64_t v53 = &v49 - 4;
    v45[2] = v112;
    void v45[3] = v46;
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PartialKeyPath<HearingRecordModel>]);
    lazy protocol witness table accessor for type [PartialKeyPath<HearingRecordModel>] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v42)
    {
      __break(1u);
    }
    else
    {
      swift_release();

      id v51 = v112 + 2;
      swift_beginAccess();
      v132[0] = (id)MEMORY[0x253386C10](v51);
      if (v132[0])
      {
        uint64_t v49 = v132;
        uint64_t v47 = v132[0];
        id v50 = v132[0];
        id v48 = v132[0];
        outlined destroy of HearingRecord?(v49);
        swift_endAccess();
        char v131 = 0;
        (*(void (**)(char *))((*v47 & *MEMORY[0x263F8EED0]) + 0x140))(&v131);
      }
      else
      {
        outlined destroy of HearingRecord?(v132);
        swift_endAccess();
      }
      return $defer #1 () in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(v115);
    }
  }
  return result;
}

uint64_t $defer #1 () in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void (*a1)(void))
{
  return swift_release();
}

uint64_t implicit closure #1 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateGroupValues(config:configurationKeyPaths:completion:)", 0x3BuLL, 1)._countAndFlagsBits;
}

void *implicit closure #2 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void *a1)
{
  id v1 = a1;
  return a1;
}

void closure #1 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void **a1, uint64_t a2, void *a3)
{
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v85 = 0;
  uint64_t v87 = *a1;
  uint64_t v86 = a2 + 16;
  uint64_t v85 = a3;
  swift_retain();
  v84[27] = (id)swift_getKeyPath();
  v84[26] = v87;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<HearingRecordModel>);
  char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v72)
  {
    swift_release();
    swift_beginAccess();
    id v73 = (id)MEMORY[0x253386C10](a2 + 16);
    if (v73)
    {
      uint64_t v3 = v73;
      id v69 = v73;
      id v4 = v73;
      outlined destroy of HearingRecord?(&v73);
      swift_endAccess();
      id v67 = objc_msgSend(a3, sel_amplification);
      objc_msgSend(v67, sel_floatValue);
      float v68 = v5;

      (*(void (**)(float))((*v3 & *MEMORY[0x263F8EED0]) + 0x158))(v68);
    }
    else
    {
      outlined destroy of HearingRecord?(&v73);
      swift_endAccess();
    }
  }
  else
  {
    swift_release();
    swift_retain();
    v84[25] = (id)swift_getKeyPath();
    v84[24] = v87;
    char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if (v66)
    {
      swift_release();
      swift_beginAccess();
      id v74 = (id)MEMORY[0x253386C10](a2 + 16);
      if (v74)
      {
        uint64_t v6 = v74;
        id v65 = v74;
        id v7 = v74;
        outlined destroy of HearingRecord?(&v74);
        swift_endAccess();
        id v63 = objc_msgSend(a3, sel_balance);
        objc_msgSend(v63, sel_floatValue);
        float v64 = v8;

        (*(void (**)(float))((*v6 & *MEMORY[0x263F8EED0]) + 0x178))(v64);
      }
      else
      {
        outlined destroy of HearingRecord?(&v74);
        swift_endAccess();
      }
    }
    else
    {
      swift_release();
      swift_retain();
      v84[23] = (id)swift_getKeyPath();
      v84[22] = v87;
      char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      if (v62)
      {
        swift_release();
        swift_beginAccess();
        id v75 = (id)MEMORY[0x253386C10](a2 + 16);
        if (v75)
        {
          uint64_t v9 = v75;
          id v61 = v75;
          id v10 = v75;
          outlined destroy of HearingRecord?(&v75);
          swift_endAccess();
          id v59 = objc_msgSend(a3, sel_beamFormer);
          objc_msgSend(v59, sel_floatValue);
          float v60 = v11;

          (*(void (**)(float))((*v9 & *MEMORY[0x263F8EED0]) + 0x198))(v60);
        }
        else
        {
          outlined destroy of HearingRecord?(&v75);
          swift_endAccess();
        }
      }
      else
      {
        swift_release();
        swift_retain();
        v84[21] = (id)swift_getKeyPath();
        v84[20] = v87;
        char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        if (v58)
        {
          swift_release();
          swift_beginAccess();
          id v76 = (id)MEMORY[0x253386C10](a2 + 16);
          if (v76)
          {
            uint64_t v12 = v76;
            id v57 = v76;
            id v13 = v76;
            outlined destroy of HearingRecord?(&v76);
            swift_endAccess();
            id v55 = objc_msgSend(a3, sel_noiseSuppression);
            objc_msgSend(v55, sel_floatValue);
            float v56 = v14;

            (*(void (**)(float))((*v12 & *MEMORY[0x263F8EED0]) + 0x1B8))(v56);
          }
          else
          {
            outlined destroy of HearingRecord?(&v76);
            swift_endAccess();
          }
        }
        else
        {
          swift_release();
          swift_retain();
          v84[19] = (id)swift_getKeyPath();
          v84[18] = v87;
          char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          if (v54)
          {
            swift_release();
            swift_beginAccess();
            id v77 = (id)MEMORY[0x253386C10](a2 + 16);
            if (v77)
            {
              uint64_t v15 = v77;
              id v53 = v77;
              id v16 = v77;
              outlined destroy of HearingRecord?(&v77);
              swift_endAccess();
              id v17 = objc_msgSend(a3, sel_enablePMEVoice);
              (*(void (**)(id))((*v15 & *MEMORY[0x263F8EED0]) + 0x1F8))(v17);
            }
            else
            {
              outlined destroy of HearingRecord?(&v77);
              swift_endAccess();
            }
          }
          else
          {
            swift_release();
            swift_retain();
            v84[17] = (id)swift_getKeyPath();
            v84[16] = v87;
            char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            if (v52)
            {
              swift_release();
              swift_beginAccess();
              id v78 = (id)MEMORY[0x253386C10](a2 + 16);
              if (v78)
              {
                uint64_t v18 = v78;
                id v51 = v78;
                id v19 = v78;
                outlined destroy of HearingRecord?(&v78);
                swift_endAccess();
                id v20 = objc_msgSend(a3, sel_enablePMEMedia);
                (*(void (**)(id))((*v18 & *MEMORY[0x263F8EED0]) + 0x218))(v20);
              }
              else
              {
                outlined destroy of HearingRecord?(&v78);
                swift_endAccess();
              }
            }
            else
            {
              swift_release();
              swift_retain();
              v84[15] = (id)swift_getKeyPath();
              v84[14] = v87;
              char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
              swift_release();
              if (v50)
              {
                swift_release();
                swift_beginAccess();
                id v79 = (id)MEMORY[0x253386C10](a2 + 16);
                if (v79)
                {
                  uint64_t v21 = v79;
                  id v49 = v79;
                  id v22 = v79;
                  outlined destroy of HearingRecord?(&v79);
                  swift_endAccess();
                  id v47 = objc_msgSend(a3, sel_tone);
                  objc_msgSend(v47, sel_floatValue);
                  float v48 = v23;

                  (*(void (**)(float))((*v21 & *MEMORY[0x263F8EED0]) + 0x1D8))(v48);
                }
                else
                {
                  outlined destroy of HearingRecord?(&v79);
                  swift_endAccess();
                }
              }
              else
              {
                swift_release();
                swift_retain();
                v84[13] = (id)swift_getKeyPath();
                v84[12] = v87;
                char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
                swift_release();
                if (v46)
                {
                  swift_release();
                  swift_beginAccess();
                  id v80 = (id)MEMORY[0x253386C10](a2 + 16);
                  if (v80)
                  {
                    uint64_t v24 = v80;
                    id v45 = v80;
                    id v25 = v80;
                    outlined destroy of HearingRecord?(&v80);
                    swift_endAccess();
                    id v26 = objc_msgSend(a3, sel_enableHearingAssist);
                    (*(void (**)(id))((*v24 & *MEMORY[0x263F8EED0]) + 0x258))(v26);
                  }
                  else
                  {
                    outlined destroy of HearingRecord?(&v80);
                    swift_endAccess();
                  }
                }
                else
                {
                  swift_release();
                  swift_retain();
                  v84[11] = (id)swift_getKeyPath();
                  v84[10] = v87;
                  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
                  swift_release();
                  if (v44)
                  {
                    swift_release();
                    swift_beginAccess();
                    id v81 = (id)MEMORY[0x253386C10](a2 + 16);
                    if (v81)
                    {
                      uint64_t v27 = v81;
                      id v43 = v81;
                      id v28 = v81;
                      outlined destroy of HearingRecord?(&v81);
                      swift_endAccess();
                      id v29 = objc_msgSend(a3, sel_enableMediaAssist);
                      (*(void (**)(id))((*v27 & *MEMORY[0x263F8EED0]) + 0x238))(v29);
                    }
                    else
                    {
                      outlined destroy of HearingRecord?(&v81);
                      swift_endAccess();
                    }
                  }
                  else
                  {
                    swift_release();
                    swift_retain();
                    v84[9] = (id)swift_getKeyPath();
                    v84[8] = v87;
                    char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
                    swift_release();
                    if (v42)
                    {
                      swift_release();
                      swift_beginAccess();
                      id v82 = (id)MEMORY[0x253386C10](a2 + 16);
                      if (v82)
                      {
                        uint64_t v30 = v82;
                        id v41 = v82;
                        id v31 = v82;
                        outlined destroy of HearingRecord?(&v82);
                        swift_endAccess();
                        id v32 = objc_msgSend(a3, sel_enableHearingAid);
                        (*(void (**)(id))((*v30 & *MEMORY[0x263F8EED0]) + 0x298))(v32);
                      }
                      else
                      {
                        outlined destroy of HearingRecord?(&v82);
                        swift_endAccess();
                      }
                    }
                    else
                    {
                      swift_release();
                      swift_retain();
                      v84[7] = (id)swift_getKeyPath();
                      v84[6] = v87;
                      char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
                      swift_release();
                      if (v40)
                      {
                        swift_release();
                        swift_beginAccess();
                        id v83 = (id)MEMORY[0x253386C10](a2 + 16);
                        if (v83)
                        {
                          uint64_t v33 = v83;
                          id v39 = v83;
                          id v34 = v83;
                          outlined destroy of HearingRecord?(&v83);
                          swift_endAccess();
                          id v35 = objc_msgSend(a3, sel_enableSwipeGain);
                          (*(void (**)(id))((*v33 & *MEMORY[0x263F8EED0]) + 0x278))(v35);
                        }
                        else
                        {
                          outlined destroy of HearingRecord?(&v83);
                          swift_endAccess();
                        }
                      }
                      else
                      {
                        swift_release();
                        swift_retain();
                        v84[5] = (id)swift_getKeyPath();
                        v84[4] = v87;
                        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
                        swift_release();
                        if (v38)
                        {
                          swift_release();
                          swift_beginAccess();
                          v84[0] = (id)MEMORY[0x253386C10](a2 + 16);
                          if (v84[0])
                          {
                            id v37 = v84[0];
                            id v36 = v84[0];
                            outlined destroy of HearingRecord?(v84);
                            swift_endAccess();
                            HearingRecord.hearingProtectionEnabled.setter((char)objc_msgSend(a3, sel_enableHearingProtection));
                          }
                          else
                          {
                            outlined destroy of HearingRecord?(v84);
                            swift_endAccess();
                          }
                        }
                        else
                        {
                          swift_release();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t HearingRecord.debugDescription.getter()
{
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" tone: ", 7uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  uint64_t v2 = swift_bridgeObjectRelease();
  uint64_t v116 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((*v115 & *MEMORY[0x263F8EED0]) + 0x1D0))(v2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v4 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v0._countAndFlagsBits, v0._object, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" amplification: ", 0x10uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  uint64_t v7 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x150))(v7);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v9 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v5._countAndFlagsBits, v5._object, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" balance: ", 0xAuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  uint64_t v12 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x170))(v12);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v14 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v10._countAndFlagsBits, v10._object, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" beamFormer: ", 0xDuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v16);
  uint64_t v17 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x190))(v17);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v19 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v15._countAndFlagsBits, v15._object, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" noiseSuppression: ", 0x13uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v21);
  uint64_t v22 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x1B0))(v22);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v24 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v20._countAndFlagsBits, v20._object, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" pmeVoiceEnabled: ", 0x12uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v26);
  uint64_t v27 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x1F0))(v27);
  type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v29 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v25._countAndFlagsBits, v25._object, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" pmeMediaEnabled: ", 0x12uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x210))(v32);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v34 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v30._countAndFlagsBits, v30._object, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingAssistEnabled: ", 0x17uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v36);
  uint64_t v37 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x250))(v37);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v39 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v35._countAndFlagsBits, v35._object, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" mediaAssistEnabled: ", 0x15uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v41);
  uint64_t v42 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x230))(v42);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v43 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v44 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v40._countAndFlagsBits, v40._object, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" swipeGainEnabled: ", 0x13uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v46);
  uint64_t v47 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x270))(v47);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v49 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v45._countAndFlagsBits, v45._object, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingAidEnabled: ", 0x14uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v51);
  uint64_t v52 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x290))(v52);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v54 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v50._countAndFlagsBits, v50._object, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingAssistCapability: ", 0x1AuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v56);
  uint64_t v57 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x348))(v57);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v59 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v55._countAndFlagsBits, v55._object, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingAssistEnrolled: ", 0x18uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v61);
  uint64_t v62 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x378))(v62);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v63 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v64 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v60._countAndFlagsBits, v60._object, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v65 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingAssistRegionStatus: ", 0x1CuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v66 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v66);
  uint64_t v67 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x3A8))(v67);
  type metadata accessor for HMRegionStatus();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v68 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v69 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v65._countAndFlagsBits, v65._object, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v70 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingProtectionRegionStatus: ", 0x20uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v71 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v71);
  uint64_t v72 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x3D8))(v72);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v73 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v74 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v70._countAndFlagsBits, v70._object, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v75 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingProtectionCapability: ", 0x1EuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v76 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v76);
  uint64_t v77 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x408))(v77);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v78 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v79 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v75._countAndFlagsBits, v75._object, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v80 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingProtectionEnabled: ", 0x1BuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v81 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v81);
  uint64_t v82 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x438))(v82);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v83 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v83);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v84 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v80._countAndFlagsBits, v80._object, v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingTestRegionStatus: ", 0x1AuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v86);
  uint64_t v87 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x458))(v87);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v88 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v89 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v85._countAndFlagsBits, v85._object, v89);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v90 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hearingProtectionOcclusionResult: ", 0x23uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v91 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v91);
  uint64_t v92 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x4E8))(v92);
  type metadata accessor for HMOcclusionResult();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v93 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v94 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v90._countAndFlagsBits, v90._object, v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v95 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" hideOffModeCapability: ", 0x18uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v96 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v96);
  uint64_t v97 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x318))(v97);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v98 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v99 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v95._countAndFlagsBits, v95._object, v99);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v100 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" listeningModeOffAllowed: ", 0x1AuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v101 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v101);
  swift_bridgeObjectRelease();
  objc_msgSend(v115, sel_listeningModeOffAllowed);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v102 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v102);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v103 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v100._countAndFlagsBits, v100._object, v103);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v104 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" bluetoothAddress: ", 0x13uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v105 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v105);
  uint64_t v106 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x2B8))(v106);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v107 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v108 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v104._countAndFlagsBits, v104._object, v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v109 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" bluetoothUUID: ", 0x10uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v110 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v110);
  uint64_t v111 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v115 & *v116) + 0x2E8))(v111);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  Swift::String v112 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v113 = String.init(stringInterpolation:)();
  MEMORY[0x253385F30](v109._countAndFlagsBits, v109._object, v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String();
  return countAndFlagsBits;
}

id HearingRecord.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HearingRecord.init()()
{
  id v195 = 0;
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[HKAudiogramSample]>);
  uint64_t v142 = *(void *)(v148 - 8);
  uint64_t v143 = v148 - 8;
  unint64_t v45 = (*(void *)(v142 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v148, v1);
  uint64_t v147 = (uint64_t)&v45 - v45;
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMOcclusionResult>);
  uint64_t v137 = *(void *)(v141 - 8);
  uint64_t v138 = v141 - 8;
  unint64_t v46 = (*(void *)(v137 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v141, v2);
  uint64_t v140 = (uint64_t)&v45 - v46;
  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NSNumber]>);
  uint64_t v127 = *(void *)(v133 - 8);
  uint64_t v128 = v133 - 8;
  unint64_t v47 = (*(void *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v133, v3);
  uint64_t v132 = (uint64_t)&v45 - v47;
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMRegionStatus>);
  uint64_t v106 = *(void *)(v124 - 8);
  uint64_t v107 = v124 - 8;
  unint64_t v48 = (*(void *)(v106 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v124, v4);
  uint64_t v123 = (uint64_t)&v45 - v48;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HMMultiState>);
  uint64_t v101 = *(void *)(v112 - 8);
  uint64_t v102 = v112 - 8;
  unint64_t v49 = (*(void *)(v101 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v112, v5);
  uint64_t v111 = (uint64_t)&v45 - v49;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  uint64_t v91 = *(void *)(v98 - 8);
  uint64_t v92 = v98 - 8;
  unint64_t v50 = (*(void *)(v91 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v98, v6);
  uint64_t v97 = (uint64_t)&v45 - v50;
  uint64_t v7 = v0;
  Swift::String v8 = v0;
  uint64_t v9 = v0;
  Swift::String v10 = v0;
  Swift::String v11 = v0;
  uint64_t v12 = v0;
  Swift::String v13 = v0;
  uint64_t v14 = v0;
  Swift::String v15 = v0;
  Swift::String v16 = v0;
  uint64_t v17 = v0;
  Swift::String v18 = v0;
  uint64_t v19 = v0;
  Swift::String v20 = v0;
  Swift::String v21 = v0;
  uint64_t v22 = v0;
  Swift::String v23 = v0;
  uint64_t v24 = v0;
  Swift::String v25 = v0;
  Swift::String v26 = v0;
  uint64_t v27 = v0;
  Swift::String v28 = v0;
  uint64_t v29 = v0;
  Swift::String v30 = v0;
  Swift::String v31 = v0;
  uint64_t v32 = v0;
  Swift::String v33 = v0;
  uint64_t v34 = v0;
  Swift::String v35 = v0;
  id v195 = v0;
  v0[OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRemoteSendState] = 0;

  uint64_t v51 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__amplification;
  uint64_t KeyPath = swift_getKeyPath();
  Swift::String v53 = &v194;
  int v63 = 0;
  int v194 = 0;
  Builtin::Word v151 = 0;
  uint64_t v153 = (objc_class *)type metadata accessor for HearingRecord();
  unint64_t v119 = lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  uint64_t v67 = MEMORY[0x263F8D5C8];
  uint64_t v68 = MEMORY[0x263F8D638];
  uint64_t v69 = MEMORY[0x263F8D5F8];
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v193);
  char v192 = v193;
  HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)v53, (uint64_t)&v192, (uint64_t)v153, v67, (uint64_t)&v0[v51]);

  uint64_t v54 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__balance;
  uint64_t v55 = swift_getKeyPath();
  Swift::String v56 = &v191;
  int v191 = v63;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v190);
  char v189 = v190;
  HearingRecordConfig.init(_:_:_:)(v55, (uint64_t)v56, (uint64_t)&v189, (uint64_t)v153, v67, (uint64_t)&v0[v54]);

  uint64_t v57 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__beamFormer;
  uint64_t v58 = swift_getKeyPath();
  uint64_t v59 = &v188;
  int v188 = v63;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v187);
  char v186 = v187;
  HearingRecordConfig.init(_:_:_:)(v58, (uint64_t)v59, (uint64_t)&v186, (uint64_t)v153, v67, (uint64_t)&v0[v57]);

  uint64_t v60 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__noiseSuppression;
  uint64_t v61 = swift_getKeyPath();
  uint64_t v62 = &v185;
  int v185 = v63;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v184);
  char v183 = v184;
  HearingRecordConfig.init(_:_:_:)(v61, (uint64_t)v62, (uint64_t)&v183, (uint64_t)v153, v67, (uint64_t)&v0[v60]);

  uint64_t v64 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__tone;
  uint64_t v65 = swift_getKeyPath();
  Swift::String v66 = &v182;
  int v182 = v63;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v181);
  char v180 = v181;
  HearingRecordConfig.init(_:_:_:)(v65, (uint64_t)v66, (uint64_t)&v180, (uint64_t)v153, v67, (uint64_t)&v0[v64]);

  uint64_t v70 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__pmeVoiceEnabled;
  uint64_t v71 = swift_getKeyPath();
  uint64_t v72 = &v179;
  char v179 = 0;
  uint64_t v118 = type metadata accessor for HMMultiState();
  unint64_t v120 = lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  unint64_t v121 = lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v178);
  char v177 = v178;
  HearingRecordConfig.init(_:_:_:)(v71, (uint64_t)v72, (uint64_t)&v177, (uint64_t)v153, v118, (uint64_t)&v0[v70]);

  uint64_t v73 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__pmeMediaEnabled;
  uint64_t v74 = swift_getKeyPath();
  Swift::String v75 = &v176;
  char v176 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v175);
  char v174 = v175;
  HearingRecordConfig.init(_:_:_:)(v74, (uint64_t)v75, (uint64_t)&v174, (uint64_t)v153, v118, (uint64_t)&v0[v73]);

  uint64_t v76 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__mediaAssistEnabled;
  uint64_t v77 = swift_getKeyPath();
  Swift::String v78 = &v173;
  char v173 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v172);
  char v171 = v172;
  HearingRecordConfig.init(_:_:_:)(v77, (uint64_t)v78, (uint64_t)&v171, (uint64_t)v153, v118, (uint64_t)&v0[v76]);

  uint64_t v79 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingAssistEnabled;
  uint64_t v80 = swift_getKeyPath();
  Swift::String v81 = &v170;
  char v170 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v169);
  char v168 = v169;
  HearingRecordConfig.init(_:_:_:)(v80, (uint64_t)v81, (uint64_t)&v168, (uint64_t)v153, v118, (uint64_t)&v0[v79]);

  uint64_t v82 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__swipeGainEnabled;
  uint64_t v83 = swift_getKeyPath();
  uint64_t v84 = &v167;
  char v167 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v166);
  char v165 = v166;
  HearingRecordConfig.init(_:_:_:)(v83, (uint64_t)v84, (uint64_t)&v165, (uint64_t)v153, v118, (uint64_t)&v0[v82]);

  uint64_t v85 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingAidEnabled;
  uint64_t v86 = swift_getKeyPath();
  uint64_t v87 = &v164;
  char v164 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v163);
  char v162 = v163;
  HearingRecordConfig.init(_:_:_:)(v86, (uint64_t)v87, (uint64_t)&v162, (uint64_t)v153, v118, (uint64_t)&v0[v85]);

  uint64_t v88 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__listeningModeOffAllowed;
  uint64_t v89 = swift_getKeyPath();
  Swift::String v90 = &v161;
  char v161 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v160);
  char v159 = v160;
  HearingRecordConfig.init(_:_:_:)(v89, (uint64_t)v90, (uint64_t)&v159, (uint64_t)v153, v118, (uint64_t)&v0[v88]);

  uint64_t v93 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__bluetoothAddress;
  uint64_t v94 = "";
  int v95 = 1;
  Swift::String v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v151, 1);
  property wrapper backing initializer of HearingRecord.bluetoothAddress(v36._countAndFlagsBits, (uint64_t)v36._object, v97);
  Swift::String v100 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 32);
  uint64_t v99 = v91 + 32;
  v100(&v0[v93], v97, v98);

  uint64_t v96 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__bluetoothUUID;
  Swift::String v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v94, v151, v95 & 1);
  property wrapper backing initializer of HearingRecord.bluetoothUUID(v37._countAndFlagsBits, (uint64_t)v37._object, v97);
  v100(&v0[v96], v97, v98);

  uint64_t v103 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hideOffModeCapability;
  int v136 = 0;
  property wrapper backing initializer of HearingRecord.hideOffModeCapability(0, v111);
  id v114 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 32);
  uint64_t v113 = v101 + 32;
  v114(&v0[v103], v111, v112);

  uint64_t v104 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingAssistCapability;
  property wrapper backing initializer of HearingRecord.hearingAssistCapability(v136, v111);
  v114(&v0[v104], v111, v112);

  uint64_t v105 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingAssistEnrolled;
  property wrapper backing initializer of HearingRecord.hearingAssistEnrolled(v136, v111);
  v114(&v0[v105], v111, v112);

  uint64_t v108 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingAssistRegionStatus;
  property wrapper backing initializer of HearingRecord.hearingAssistRegionStatus(v136, v123);
  uint64_t v126 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 32);
  uint64_t v125 = v106 + 32;
  v126(&v0[v108], v123, v124);

  uint64_t v109 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingProtectionRegionStatus;
  property wrapper backing initializer of HearingRecord.hearingProtectionRegionStatus(v136, v123);
  v126(&v0[v109], v123, v124);

  uint64_t v110 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingProtectionCapability;
  property wrapper backing initializer of HearingRecord.hearingProtectionCapability(v136, v111);
  v114(&v0[v110], v111, v112);

  uint64_t v115 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingProtectionEnabled;
  uint64_t v116 = swift_getKeyPath();
  uint64_t v117 = &v158;
  char v158 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v157);
  char v156 = v157;
  HearingRecordConfig.init(_:_:_:)(v116, (uint64_t)v117, (uint64_t)&v156, (uint64_t)v153, v118, (uint64_t)&v0[v115]);

  uint64_t v122 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingTestRegionStatus;
  property wrapper backing initializer of HearingRecord.hearingTestRegionStatus(v136, v123);
  v126(&v0[v122], v123, v124);

  uint64_t v129 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__earLossArrayLeft;
  unint64_t v130 = type metadata accessor for NSNumber();
  uint64_t v38 = _allocateUninitializedArray<A>(_:)();
  property wrapper backing initializer of HearingRecord.earLossArrayLeft(v38, v132);
  uint64_t v135 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 32);
  uint64_t v134 = v127 + 32;
  v135(&v0[v129], v132, v133);

  uint64_t v131 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__earLossArrayRight;
  uint64_t v39 = _allocateUninitializedArray<A>(_:)();
  property wrapper backing initializer of HearingRecord.earLossArrayRight(v39, v132);
  v135(&v0[v131], v132, v133);

  uint64_t v139 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__hearingProtectionOcclusionResult;
  property wrapper backing initializer of HearingRecord.hearingProtectionOcclusionResult(v136, v140);
  (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(&v0[v139], v140, v141);

  uint64_t v144 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__validAudiograms;
  unint64_t v145 = type metadata accessor for HKAudiogramSample();
  uint64_t v40 = _allocateUninitializedArray<A>(_:)();
  property wrapper backing initializer of HearingRecord.validAudiograms(v40, v147);
  uint64_t v150 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 32);
  uint64_t v149 = v142 + 32;
  v150(&v0[v144], v147, v148);

  uint64_t v146 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__invalidAudiograms;
  uint64_t v41 = _allocateUninitializedArray<A>(_:)();
  property wrapper backing initializer of HearingRecord.invalidAudiograms(v41, v147);
  v150(&v0[v146], v147, v148);

  id v42 = v152;
  *(void *)&v152[OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRecord] = v151;

  v155.receiver = v195;
  v155.super_class = v153;
  id v154 = objc_msgSendSuper2(&v155, sel_init);
  id v43 = v154;
  id v195 = v154;

  return v154;
}

id HearingRecord.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HearingRecord();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance HearingRecord@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for HearingRecord();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for HMDeviceConfigurable.deviceRemoteSendState.getter in conformance HearingRecord()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x138))();
}

uint64_t protocol witness for HMDeviceConfigurable.bluetoothUUID.getter in conformance HearingRecord()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2E8))();
}

id protocol witness for HMDeviceConfigurable.deviceConfigFor<A>(keyPath:value:) in conformance HearingRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HearingRecord.deviceConfigFor<A>(keyPath:value:)(a1, a2, a3);
}

uint64_t variable initialization expression of HearingRecordModel.bluetoothAddress()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t key path getter for HearingRecordModel.bluetoothAddress : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 280))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.bluetoothAddress : HearingRecordModel(void *a1, uint64_t *a2)
{
  outlined init with copy of String(a1, v7);
  uint64_t v4 = v7[0];
  uint64_t v6 = v7[1];
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 288))(v4, v6);
  return swift_release();
}

uint64_t HearingRecordModel.bluetoothAddress.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.bluetoothAddress.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.bluetoothAddress.modify())()
{
  return HearingRecordModel.bluetoothAddress.modify;
}

uint64_t HearingRecordModel.bluetoothAddress.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.bluetoothUUID()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t key path getter for HearingRecordModel.bluetoothUUID : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 304))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.bluetoothUUID : HearingRecordModel(void *a1, uint64_t *a2)
{
  outlined init with copy of String(a1, v7);
  uint64_t v4 = v7[0];
  uint64_t v6 = v7[1];
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 312))(v4, v6);
  return swift_release();
}

uint64_t HearingRecordModel.bluetoothUUID.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.bluetoothUUID.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.bluetoothUUID.modify())()
{
  return HearingRecordModel.bluetoothUUID.modify;
}

uint64_t HearingRecordModel.bluetoothUUID.modify()
{
  return swift_endAccess();
}

NSNumber variable initialization expression of HearingRecordModel.amplification()
{
  return NSNumber.init(integerLiteral:)(0);
}

void *HearingRecordModel.amplification.getter()
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 48);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HearingRecordModel.amplification.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = a1;

  swift_endAccess();
}

uint64_t (*HearingRecordModel.amplification.modify())()
{
  return HearingRecordModel.amplification.modify;
}

uint64_t HearingRecordModel.amplification.modify()
{
  return swift_endAccess();
}

NSNumber variable initialization expression of HearingRecordModel.balance()
{
  return NSNumber.init(integerLiteral:)(0);
}

void *HearingRecordModel.balance.getter()
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 56);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HearingRecordModel.balance.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = a1;

  swift_endAccess();
}

uint64_t (*HearingRecordModel.balance.modify())()
{
  return HearingRecordModel.balance.modify;
}

uint64_t HearingRecordModel.balance.modify()
{
  return swift_endAccess();
}

NSNumber variable initialization expression of HearingRecordModel.beamFormer()
{
  return NSNumber.init(integerLiteral:)(0);
}

void *HearingRecordModel.beamFormer.getter()
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 64);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HearingRecordModel.beamFormer.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = a1;

  swift_endAccess();
}

uint64_t (*HearingRecordModel.beamFormer.modify())()
{
  return HearingRecordModel.beamFormer.modify;
}

uint64_t HearingRecordModel.beamFormer.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.earLossArrayLeft()
{
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t key path getter for HearingRecordModel.earLossArrayLeft : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.earLossArrayLeft : HearingRecordModel(uint64_t *a1, uint64_t *a2)
{
  outlined init with copy of [NSNumber](a1, &v6);
  uint64_t v4 = v6;
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(void *)v5 + 408))(v4);
  return swift_release();
}

uint64_t HearingRecordModel.earLossArrayLeft.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.earLossArrayLeft.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 72) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.earLossArrayLeft.modify())()
{
  return HearingRecordModel.earLossArrayLeft.modify;
}

uint64_t HearingRecordModel.earLossArrayLeft.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.earLossArrayRight()
{
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t key path getter for HearingRecordModel.earLossArrayRight : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 424))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.earLossArrayRight : HearingRecordModel(uint64_t *a1, uint64_t *a2)
{
  outlined init with copy of [NSNumber](a1, &v6);
  uint64_t v4 = v6;
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(void *)v5 + 432))(v4);
  return swift_release();
}

uint64_t HearingRecordModel.earLossArrayRight.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.earLossArrayRight.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.earLossArrayRight.modify())()
{
  return HearingRecordModel.earLossArrayRight.modify;
}

uint64_t HearingRecordModel.earLossArrayRight.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingAssistCapability()
{
  return 0;
}

uint64_t key path getter for HearingRecordModel.hearingAssistCapability : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 448))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingAssistCapability : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 456))(v3);
  return swift_release();
}

uint64_t HearingRecordModel.hearingAssistCapability.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 88);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingAssistCapability.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 88) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingAssistCapability.modify())()
{
  return HearingRecordModel.hearingAssistCapability.modify;
}

uint64_t HearingRecordModel.hearingAssistCapability.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.mediaAssistEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.mediaAssistEnabled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 89);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.mediaAssistEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 89) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.mediaAssistEnabled.modify())()
{
  return HearingRecordModel.mediaAssistEnabled.modify;
}

uint64_t HearingRecordModel.mediaAssistEnabled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingAssistEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.hearingAssistEnabled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 90);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingAssistEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 90) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingAssistEnabled.modify())()
{
  return HearingRecordModel.hearingAssistEnabled.modify;
}

uint64_t HearingRecordModel.hearingAssistEnabled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingAssistEnrolled()
{
  return 0;
}

uint64_t key path getter for HearingRecordModel.hearingAssistEnrolled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 520))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingAssistEnrolled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 528))(v3);
  return swift_release();
}

uint64_t HearingRecordModel.hearingAssistEnrolled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 91);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingAssistEnrolled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 9String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingAssistEnrolled.modify())()
{
  return HearingRecordModel.hearingAssistEnrolled.modify;
}

uint64_t HearingRecordModel.hearingAssistEnrolled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingAssistRegionStatus()
{
  return 0;
}

uint64_t key path getter for HearingRecordModel.hearingAssistRegionStatus : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 544))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingAssistRegionStatus : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 552))(v3);
  return swift_release();
}

uint64_t HearingRecordModel.hearingAssistRegionStatus.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 92);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingAssistRegionStatus.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 92) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingAssistRegionStatus.modify())()
{
  return HearingRecordModel.hearingAssistRegionStatus.modify;
}

uint64_t HearingRecordModel.hearingAssistRegionStatus.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingProtectionRegionStatus()
{
  return 0;
}

uint64_t key path getter for HearingRecordModel.hearingProtectionRegionStatus : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 568))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingProtectionRegionStatus : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 576))(v3);
  return swift_release();
}

uint64_t HearingRecordModel.hearingProtectionRegionStatus.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 93);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingProtectionRegionStatus.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 93) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingProtectionRegionStatus.modify())()
{
  return HearingRecordModel.hearingProtectionRegionStatus.modify;
}

uint64_t HearingRecordModel.hearingProtectionRegionStatus.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingProtectionCapability()
{
  return 0;
}

uint64_t key path getter for HearingRecordModel.hearingProtectionCapability : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 592))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingProtectionCapability : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 600))(v3);
  return swift_release();
}

uint64_t HearingRecordModel.hearingProtectionCapability.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 94);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingProtectionCapability.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 94) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingProtectionCapability.modify())()
{
  return HearingRecordModel.hearingProtectionCapability.modify;
}

uint64_t HearingRecordModel.hearingProtectionCapability.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingProtectionEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.hearingProtectionEnabled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 95);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingProtectionEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 95) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingProtectionEnabled.modify())()
{
  return HearingRecordModel.hearingProtectionEnabled.modify;
}

uint64_t HearingRecordModel.hearingProtectionEnabled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingTestRegionStatus()
{
  return 0;
}

uint64_t key path getter for HearingRecordModel.hearingTestRegionStatus : HearingRecordModel@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 640))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.hearingTestRegionStatus : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v4 + 648))(v3);
  return swift_release();
}

uint64_t HearingRecordModel.hearingTestRegionStatus.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 96);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingTestRegionStatus.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 96) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingTestRegionStatus.modify())()
{
  return HearingRecordModel.hearingTestRegionStatus.modify;
}

uint64_t HearingRecordModel.hearingTestRegionStatus.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.hearingAidEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.hearingAidEnabled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 97);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.hearingAidEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 97) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.hearingAidEnabled.modify())()
{
  return HearingRecordModel.hearingAidEnabled.modify;
}

uint64_t HearingRecordModel.hearingAidEnabled.modify()
{
  return swift_endAccess();
}

NSNumber variable initialization expression of HearingRecordModel.noiseSuppression()
{
  return NSNumber.init(integerLiteral:)(0);
}

void *HearingRecordModel.noiseSuppression.getter()
{
  swift_beginAccess();
  unsigned int v3 = *(void **)(v0 + 104);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HearingRecordModel.noiseSuppression.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  unsigned int v3 = *(void **)(v1 + 104);
  *(void *)(v1 + 104) = a1;

  swift_endAccess();
}

uint64_t (*HearingRecordModel.noiseSuppression.modify())()
{
  return HearingRecordModel.noiseSuppression.modify;
}

uint64_t HearingRecordModel.noiseSuppression.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.pmeVoiceEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.pmeVoiceEnabled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 112);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.pmeVoiceEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 112) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.pmeVoiceEnabled.modify())()
{
  return HearingRecordModel.pmeVoiceEnabled.modify;
}

uint64_t HearingRecordModel.pmeVoiceEnabled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.pmeMediaEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.pmeMediaEnabled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 113);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.pmeMediaEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 113) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.pmeMediaEnabled.modify())()
{
  return HearingRecordModel.pmeMediaEnabled.modify;
}

uint64_t HearingRecordModel.pmeMediaEnabled.modify()
{
  return swift_endAccess();
}

NSNumber variable initialization expression of HearingRecordModel.tone()
{
  return NSNumber.init(integerLiteral:)(0);
}

void *HearingRecordModel.tone.getter()
{
  swift_beginAccess();
  unsigned int v3 = *(void **)(v0 + 120);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HearingRecordModel.tone.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  unsigned int v3 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = a1;

  swift_endAccess();
}

uint64_t (*HearingRecordModel.tone.modify())()
{
  return HearingRecordModel.tone.modify;
}

uint64_t HearingRecordModel.tone.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.validAudiograms()
{
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t key path getter for HearingRecordModel.validAudiograms : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 784))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.validAudiograms : HearingRecordModel(uint64_t *a1, uint64_t *a2)
{
  outlined init with copy of [HKAudiogramSample](a1, &v6);
  uint64_t v4 = v6;
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(void *)v5 + 792))(v4);
  return swift_release();
}

uint64_t HearingRecordModel.validAudiograms.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.validAudiograms.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.validAudiograms.modify())()
{
  return HearingRecordModel.validAudiograms.modify;
}

uint64_t HearingRecordModel.validAudiograms.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.invalidAudiograms()
{
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t key path getter for HearingRecordModel.invalidAudiograms : HearingRecordModel@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 808))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.invalidAudiograms : HearingRecordModel(uint64_t *a1, uint64_t *a2)
{
  outlined init with copy of [HKAudiogramSample](a1, &v6);
  uint64_t v4 = v6;
  uint64_t v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(void *)v5 + 816))(v4);
  return swift_release();
}

uint64_t HearingRecordModel.invalidAudiograms.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.invalidAudiograms.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 136) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.invalidAudiograms.modify())()
{
  return HearingRecordModel.invalidAudiograms.modify;
}

uint64_t HearingRecordModel.invalidAudiograms.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.swipeGainEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.swipeGainEnabled.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 144);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.swipeGainEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 144) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.swipeGainEnabled.modify())()
{
  return HearingRecordModel.swipeGainEnabled.modify;
}

uint64_t HearingRecordModel.swipeGainEnabled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.listeningModeOffAllowed()
{
  return 0;
}

uint64_t HearingRecordModel.listeningModeOffAllowed.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 145);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.listeningModeOffAllowed.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 145) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.listeningModeOffAllowed.modify())()
{
  return HearingRecordModel.listeningModeOffAllowed.modify;
}

uint64_t HearingRecordModel.listeningModeOffAllowed.modify()
{
  return swift_endAccess();
}

uint64_t static HearingRecordModel.debugStringForModifyPath(keyPath:)()
{
  swift_retain();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<HearingRecordModel>);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v15)
  {
    swift_release();
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("amplification", 0xDuLL, 1)._countAndFlagsBits;
  }
  else
  {
    swift_release();
    swift_retain();
    swift_getKeyPath();
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if (v13)
    {
      swift_release();
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("balance", 7uLL, 1)._countAndFlagsBits;
    }
    else
    {
      swift_release();
      swift_retain();
      swift_getKeyPath();
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      if (v12)
      {
        swift_release();
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("beamFormer", 0xAuLL, 1)._countAndFlagsBits;
      }
      else
      {
        swift_release();
        swift_retain();
        swift_getKeyPath();
        char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        if (v11)
        {
          swift_release();
          return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("noiseSuppression", 0x10uLL, 1)._countAndFlagsBits;
        }
        else
        {
          swift_release();
          swift_retain();
          swift_getKeyPath();
          char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          if (v10)
          {
            swift_release();
            return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pmeVoiceEnabled", 0xFuLL, 1)._countAndFlagsBits;
          }
          else
          {
            swift_release();
            swift_retain();
            swift_getKeyPath();
            char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            if (v9)
            {
              swift_release();
              return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pmeMediaEnabled", 0xFuLL, 1)._countAndFlagsBits;
            }
            else
            {
              swift_release();
              swift_retain();
              swift_getKeyPath();
              char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
              swift_release();
              if (v8)
              {
                swift_release();
                return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("tone", 4uLL, 1)._countAndFlagsBits;
              }
              else
              {
                swift_release();
                swift_retain();
                swift_getKeyPath();
                char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
                swift_release();
                if (v7)
                {
                  swift_release();
                  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hearingAssistEnabled", 0x14uLL, 1)._countAndFlagsBits;
                }
                else
                {
                  swift_release();
                  swift_retain();
                  swift_getKeyPath();
                  char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
                  swift_release();
                  if (v6)
                  {
                    swift_release();
                    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("mediaAssistEnabled", 0x12uLL, 1)._countAndFlagsBits;
                  }
                  else
                  {
                    swift_release();
                    swift_retain();
                    swift_getKeyPath();
                    char v5 = dispatch thunk of static Equatable.== infix(_:_:)();
                    swift_release();
                    if (v5)
                    {
                      swift_release();
                      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hearingAidEnabled", 0x11uLL, 1)._countAndFlagsBits;
                    }
                    else
                    {
                      swift_release();
                      swift_retain();
                      swift_getKeyPath();
                      char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
                      swift_release();
                      if (v4)
                      {
                        swift_release();
                        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("swipeGainEnabled", 0x10uLL, 1)._countAndFlagsBits;
                      }
                      else
                      {
                        swift_release();
                        swift_retain();
                        swift_getKeyPath();
                        char v3 = dispatch thunk of static Equatable.== infix(_:_:)();
                        swift_release();
                        if (v3)
                        {
                          swift_release();
                          return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hearingProtectionEnabled", 0x18uLL, 1)._countAndFlagsBits;
                        }
                        else
                        {
                          swift_release();
                          swift_retain();
                          swift_getKeyPath();
                          char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
                          swift_release();
                          swift_release();
                          if (v2) {
                            return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("listeningModeOffAllowed:", 0x18uLL, 1)._countAndFlagsBits;
                          }
                          else {
                            return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNKNOWN", 7uLL, 1)._countAndFlagsBits;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t HearingRecordModel.deinit()
{
  outlined destroy of String();
  outlined destroy of String();

  outlined destroy of [NSNumber]();
  outlined destroy of [NSNumber]();

  outlined destroy of [HKAudiogramSample]();
  outlined destroy of [HKAudiogramSample]();
  return v2;
}

uint64_t HearingRecordModel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t HearingRecordModel.__allocating_init()()
{
  return HearingRecordModel.init()();
}

uint64_t HearingRecordModel.init()()
{
  v0[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v0[2] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  type metadata accessor for NSNumber();
  *(NSNumber *)(v3 + 48) = NSNumber.init(integerLiteral:)(0);
  *(NSNumber *)(v3 + 56) = NSNumber.init(integerLiteral:)(0);
  *(NSNumber *)(v3 + 64) = NSNumber.init(integerLiteral:)(0);
  *(void *)(v3 + 72) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v3 + 80) = _allocateUninitializedArray<A>(_:)();
  *(unsigned char *)(v3 + 88) = 0;
  *(unsigned char *)(v3 + 89) = 0;
  *(unsigned char *)(v3 + 90) = 0;
  *(unsigned char *)(v3 + 9String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
  *(unsigned char *)(v3 + 92) = 0;
  *(unsigned char *)(v3 + 93) = 0;
  *(unsigned char *)(v3 + 94) = 0;
  *(unsigned char *)(v3 + 95) = 0;
  *(unsigned char *)(v3 + 96) = 0;
  *(unsigned char *)(v3 + 97) = 0;
  *(NSNumber *)(v3 + 104) = NSNumber.init(integerLiteral:)(0);
  *(unsigned char *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 113) = 0;
  *(NSNumber *)(v3 + 120) = NSNumber.init(integerLiteral:)(0);
  type metadata accessor for HKAudiogramSample();
  *(void *)(v3 + 128) = _allocateUninitializedArray<A>(_:)();
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  uint64_t result = v3;
  *(void *)(v3 + 136) = v1;
  *(unsigned char *)(v3 + 144) = 0;
  *(unsigned char *)(v3 + 145) = 0;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HMMultiState()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HMMultiState@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = HMMultiState.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t HMMultiState.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HMMultiState@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = HMMultiState.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t HMMultiState.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0__0()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  uint64_t v3 = (void *)_swift_stdlib_bridgeErrorToNSError();
  id v1 = v3;
  swift_unknownObjectRelease();
  return v3;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_250CE83A0()
{
  return swift_deallocObject();
}

unsigned char **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_250CE83D4()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8408()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_4()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CE8454()
{
  return swift_deallocObject();
}

void *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250CE84A0()
{
  return swift_deallocObject();
}

uint64_t sub_250CE84D4()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8508()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8554()
{
  return swift_deallocObject();
}

uint64_t sub_250CE85A0()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in HearingRecord.updateWithRecord(_:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #2 in HearingRecord.updateWithRecord(_:);
  return closure #2 in HearingRecord.updateWithRecord(_:)(a1, v6, v7, v8, v9);
}

uint64_t partial apply for closure #2 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t sub_250CE8800()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)()
{
  return implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(*(void **)(v0 + 16));
}

uint64_t sub_250CE8848()
{
  return swift_deallocObject();
}

uint64_t sub_250CE887C()
{
  return swift_deallocObject();
}

uint64_t sub_250CE88B0()
{
  return swift_deallocObject();
}

uint64_t sub_250CE88FC()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8948()
{
  return swift_deallocObject();
}

uint64_t sub_250CE897C()
{
  return swift_deallocObject();
}

uint64_t sub_250CE89B0()
{
  return swift_deallocObject();
}

uint64_t sub_250CE89FC()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8A48()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8A7C()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8AB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8AFC()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8B48()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8B7C()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8BB0()
{
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_3@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_250CE8BFC()
{
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

uint64_t sub_250CE8CB0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in HearingRecord.setPublishedAudiogram(_:)(void *a1)
{
  closure #1 in HearingRecord.setPublishedAudiogram(_:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_250CE8D14()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8D54()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HearingRecord.resetHearingAidTunings(completion:)(void *a1)
{
  return closure #1 in HearingRecord.resetHearingAidTunings(completion:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t block_copy_helper_255(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_256()
{
  return swift_release();
}

uint64_t sub_250CE8E1C()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)()
{
  return implicit closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(*(void **)(v0 + 16));
}

uint64_t sub_250CE8E64()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8E98()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8EC4()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8F04()
{
  return swift_deallocObject();
}

uint64_t sub_250CE8F44()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void *a1)
{
  return closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(id **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t block_copy_helper_279(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_280()
{
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HearingRecordConfig<HearingRecord, Float>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HearingRecordConfig<HearingRecord, HMMultiState>()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HMDeviceRecord?(id *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [NSNumber]()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [HKAudiogramSample]()
{
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in HearingRecord()
{
  return MEMORY[0x263EFDDD8];
}

unint64_t instantiation function for generic protocol witness table for HearingRecord(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t ObjC metadata update function for HearingRecord()
{
  return type metadata accessor for HearingRecord();
}

uint64_t method lookup function for HearingRecord()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HearingRecord.deviceRemoteSendState.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x138))();
}

uint64_t dispatch thunk of HearingRecord.deviceRemoteSendState.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x140))();
}

uint64_t dispatch thunk of HearingRecord.deviceRemoteSendState.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x148))();
}

uint64_t dispatch thunk of HearingRecord.amplification.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x150))();
}

uint64_t dispatch thunk of HearingRecord.amplification.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x158))();
}

uint64_t dispatch thunk of HearingRecord.amplification.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x160))();
}

uint64_t dispatch thunk of HearingRecord.$amplification.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x168))();
}

uint64_t dispatch thunk of HearingRecord.balance.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x170))();
}

uint64_t dispatch thunk of HearingRecord.balance.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x178))();
}

uint64_t dispatch thunk of HearingRecord.balance.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x180))();
}

uint64_t dispatch thunk of HearingRecord.$balance.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x188))();
}

uint64_t dispatch thunk of HearingRecord.beamFormer.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x190))();
}

uint64_t dispatch thunk of HearingRecord.beamFormer.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x198))();
}

uint64_t dispatch thunk of HearingRecord.beamFormer.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1A0))();
}

uint64_t dispatch thunk of HearingRecord.$beamFormer.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1A8))();
}

uint64_t dispatch thunk of HearingRecord.noiseSuppression.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1B0))();
}

uint64_t dispatch thunk of HearingRecord.noiseSuppression.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1B8))();
}

uint64_t dispatch thunk of HearingRecord.noiseSuppression.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1C0))();
}

uint64_t dispatch thunk of HearingRecord.$noiseSuppression.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1C8))();
}

uint64_t dispatch thunk of HearingRecord.tone.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1D0))();
}

uint64_t dispatch thunk of HearingRecord.tone.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1D8))();
}

uint64_t dispatch thunk of HearingRecord.tone.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1E0))();
}

uint64_t dispatch thunk of HearingRecord.$tone.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1E8))();
}

uint64_t dispatch thunk of HearingRecord.pmeVoiceEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1F0))();
}

uint64_t dispatch thunk of HearingRecord.pmeVoiceEnabled.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1F8))();
}

uint64_t dispatch thunk of HearingRecord.pmeVoiceEnabled.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x200))();
}

uint64_t dispatch thunk of HearingRecord.$pmeVoiceEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x208))();
}

uint64_t dispatch thunk of HearingRecord.pmeMediaEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x210))();
}

uint64_t dispatch thunk of HearingRecord.pmeMediaEnabled.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x218))();
}

uint64_t dispatch thunk of HearingRecord.pmeMediaEnabled.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x220))();
}

uint64_t dispatch thunk of HearingRecord.$pmeMediaEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x228))();
}

uint64_t dispatch thunk of HearingRecord.mediaAssistEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x230))();
}

uint64_t dispatch thunk of HearingRecord.mediaAssistEnabled.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x238))();
}

uint64_t dispatch thunk of HearingRecord.mediaAssistEnabled.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x240))();
}

uint64_t dispatch thunk of HearingRecord.$mediaAssistEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x248))();
}

uint64_t dispatch thunk of HearingRecord.hearingAssistEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x250))();
}

uint64_t dispatch thunk of HearingRecord.hearingAssistEnabled.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x258))();
}

uint64_t dispatch thunk of HearingRecord.hearingAssistEnabled.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x260))();
}

uint64_t dispatch thunk of HearingRecord.$hearingAssistEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x268))();
}

uint64_t dispatch thunk of HearingRecord.swipeGainEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x270))();
}

uint64_t dispatch thunk of HearingRecord.swipeGainEnabled.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x278))();
}

uint64_t dispatch thunk of HearingRecord.swipeGainEnabled.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x280))();
}

uint64_t dispatch thunk of HearingRecord.$swipeGainEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x288))();
}

uint64_t dispatch thunk of HearingRecord.hearingAidEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x290))();
}

uint64_t dispatch thunk of HearingRecord.hearingAidEnabled.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x298))();
}

uint64_t dispatch thunk of HearingRecord.hearingAidEnabled.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2A0))();
}

uint64_t dispatch thunk of HearingRecord.$hearingAidEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2A8))();
}

uint64_t dispatch thunk of HearingRecord.$listeningModeOffAllowed.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2B0))();
}

uint64_t dispatch thunk of HearingRecord.bluetoothAddress.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2B8))();
}

uint64_t dispatch thunk of HearingRecord.$bluetoothAddress.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2D0))();
}

uint64_t dispatch thunk of HearingRecord.bluetoothUUID.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x2E8))();
}

uint64_t dispatch thunk of HearingRecord.$bluetoothUUID.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x300))();
}

uint64_t dispatch thunk of HearingRecord.hideOffModeCapability.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x318))();
}

uint64_t dispatch thunk of HearingRecord.$hideOffModeCapability.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x330))();
}

uint64_t dispatch thunk of HearingRecord.hearingAssistCapability.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x348))();
}

uint64_t dispatch thunk of HearingRecord.$hearingAssistCapability.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x360))();
}

uint64_t dispatch thunk of HearingRecord.hearingAssistEnrolled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x378))();
}

uint64_t dispatch thunk of HearingRecord.$hearingAssistEnrolled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x390))();
}

uint64_t dispatch thunk of HearingRecord.hearingAssistRegionStatus.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3A8))();
}

uint64_t dispatch thunk of HearingRecord.$hearingAssistRegionStatus.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3C0))();
}

uint64_t dispatch thunk of HearingRecord.hearingProtectionRegionStatus.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3D8))();
}

uint64_t dispatch thunk of HearingRecord.$hearingProtectionRegionStatus.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x3F0))();
}

uint64_t dispatch thunk of HearingRecord.hearingProtectionCapability.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x408))();
}

uint64_t dispatch thunk of HearingRecord.$hearingProtectionCapability.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x420))();
}

uint64_t dispatch thunk of HearingRecord.hearingProtectionEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x438))();
}

uint64_t dispatch thunk of HearingRecord.$hearingProtectionEnabled.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x450))();
}

uint64_t dispatch thunk of HearingRecord.hearingTestRegionStatus.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x458))();
}

uint64_t dispatch thunk of HearingRecord.$hearingTestRegionStatus.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x470))();
}

uint64_t dispatch thunk of HearingRecord.earLossArrayLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x488))();
}

uint64_t dispatch thunk of HearingRecord.$earLossArrayLeft.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4A0))();
}

uint64_t dispatch thunk of HearingRecord.earLossArrayRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4B8))();
}

uint64_t dispatch thunk of HearingRecord.$earLossArrayRight.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4D0))();
}

uint64_t dispatch thunk of HearingRecord.hearingProtectionOcclusionResult.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x4E8))();
}

uint64_t dispatch thunk of HearingRecord.$hearingProtectionOcclusionResult.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x500))();
}

uint64_t dispatch thunk of HearingRecord.validAudiograms.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x518))();
}

uint64_t dispatch thunk of HearingRecord.validAudiograms.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x520))();
}

uint64_t dispatch thunk of HearingRecord.validAudiograms.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x528))();
}

uint64_t dispatch thunk of HearingRecord.$validAudiograms.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x530))();
}

uint64_t dispatch thunk of HearingRecord.$validAudiograms.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x538))();
}

uint64_t dispatch thunk of HearingRecord.$validAudiograms.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x540))();
}

uint64_t dispatch thunk of HearingRecord.invalidAudiograms.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x548))();
}

uint64_t dispatch thunk of HearingRecord.invalidAudiograms.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x550))();
}

uint64_t dispatch thunk of HearingRecord.invalidAudiograms.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x558))();
}

uint64_t dispatch thunk of HearingRecord.$invalidAudiograms.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x560))();
}

uint64_t dispatch thunk of HearingRecord.$invalidAudiograms.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x568))();
}

uint64_t dispatch thunk of HearingRecord.$invalidAudiograms.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x570))();
}

uint64_t dispatch thunk of HearingRecord.deviceRecord.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x578))();
}

uint64_t dispatch thunk of HearingRecord.deviceRecord.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x580))();
}

uint64_t dispatch thunk of HearingRecord.deviceRecord.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x588))();
}

uint64_t dispatch thunk of HearingRecord.updateWithRecord(_:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x590))();
}

uint64_t dispatch thunk of HearingRecord.setPublishedAudiogram(_:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5A0))();
}

uint64_t dispatch thunk of HearingRecord.resetHearingAidTunings(completion:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5A8))();
}

uint64_t dispatch thunk of HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x5B0))();
}

uint64_t type metadata accessor for HearingRecordModel()
{
  return self;
}

uint64_t method lookup function for HearingRecordModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothAddress.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothAddress.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothUUID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothUUID.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothUUID.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of HearingRecordModel.amplification.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of HearingRecordModel.amplification.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of HearingRecordModel.amplification.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of HearingRecordModel.balance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of HearingRecordModel.balance.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of HearingRecordModel.balance.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of HearingRecordModel.beamFormer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of HearingRecordModel.beamFormer.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of HearingRecordModel.beamFormer.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of HearingRecordModel.earLossArrayLeft.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of HearingRecordModel.earLossArrayLeft.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of HearingRecordModel.earLossArrayLeft.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of HearingRecordModel.earLossArrayRight.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of HearingRecordModel.earLossArrayRight.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of HearingRecordModel.earLossArrayRight.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of HearingRecordModel.mediaAssistEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of HearingRecordModel.mediaAssistEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of HearingRecordModel.mediaAssistEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistEnrolled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistEnrolled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistEnrolled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistRegionStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistRegionStatus.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAssistRegionStatus.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionRegionStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionRegionStatus.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionRegionStatus.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionCapability.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionCapability.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionCapability.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingProtectionEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingTestRegionStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingTestRegionStatus.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingTestRegionStatus.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAidEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAidEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of HearingRecordModel.hearingAidEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of HearingRecordModel.noiseSuppression.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of HearingRecordModel.noiseSuppression.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of HearingRecordModel.noiseSuppression.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeVoiceEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeVoiceEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeVoiceEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeMediaEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeMediaEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeMediaEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of HearingRecordModel.tone.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of HearingRecordModel.tone.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of HearingRecordModel.tone.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of HearingRecordModel.validAudiograms.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of HearingRecordModel.validAudiograms.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of HearingRecordModel.validAudiograms.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of HearingRecordModel.invalidAudiograms.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of HearingRecordModel.invalidAudiograms.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of HearingRecordModel.invalidAudiograms.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of HearingRecordModel.swipeGainEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of HearingRecordModel.swipeGainEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of HearingRecordModel.swipeGainEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of HearingRecordModel.listeningModeOffAllowed.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of HearingRecordModel.listeningModeOffAllowed.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of HearingRecordModel.listeningModeOffAllowed.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

void *outlined init with copy of [HKAudiogramSample](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain();
  unint64_t result = a2;
  *a2 = v4;
  return result;
}

void *outlined init with copy of [NSNumber](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain();
  unint64_t result = a2;
  *a2 = v4;
  return result;
}

void *outlined init with copy of HMDeviceRecord?(id *a1, void *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  unint64_t result = a2;
  *a2 = v4;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HearingRecord?(id *a1)
{
}

void partial apply for closure #1 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(void **a1)
{
  closure #1 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type [PartialKeyPath<HearingRecordModel>] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [PartialKeyPath<HearingRecordModel>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PartialKeyPath<HearingRecordModel>] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PartialKeyPath<HearingRecordModel>]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PartialKeyPath<HearingRecordModel>] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_250CEC6F4()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)()
{
  return implicit closure #2 in closure #1 in HearingRecord.updateGroupValues(config:configurationKeyPaths:completion:)(*(void **)(v0 + 16));
}

uint64_t sub_250CEC73C()
{
  return swift_deallocObject();
}

uint64_t sub_250CEC770()
{
  return swift_deallocObject();
}

uint64_t sub_250CEC7A4()
{
  return swift_deallocObject();
}

uint64_t sub_250CEC7F0()
{
  return swift_deallocObject();
}

uint64_t sub_250CEC83C()
{
  return swift_deallocObject();
}

uint64_t sub_250CEC870()
{
  return swift_deallocObject();
}

uint64_t sub_250CEC8A4()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_250CEC8F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CEC93C()
{
  return swift_deallocObject();
}

uint64_t sub_250CEC988()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in closure #1 in HearingRecord.resetHearingAidTunings(completion:)()
{
  return implicit closure #2 in closure #1 in HearingRecord.resetHearingAidTunings(completion:)(*(void **)(v0 + 16));
}

uint64_t sub_250CEC9D0()
{
  return swift_deallocObject();
}

uint64_t sub_250CECA04()
{
  return swift_deallocObject();
}

uint64_t sub_250CECA38()
{
  return swift_deallocObject();
}

uint64_t sub_250CECA84()
{
  return swift_deallocObject();
}

uint64_t sub_250CECAD0()
{
  return swift_deallocObject();
}

uint64_t sub_250CECB04()
{
  return swift_deallocObject();
}

uint64_t sub_250CECB38()
{
  return swift_deallocObject();
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_250CECB84()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CECBD0()
{
  return swift_deallocObject();
}

uint64_t sub_250CECC1C()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #6 in closure #1 in HearingRecord.setPublishedAudiogram(_:)()
{
  return implicit closure #6 in closure #1 in HearingRecord.setPublishedAudiogram(_:)(*(void **)(v0 + 16));
}

uint64_t sub_250CECC64()
{
  return swift_deallocObject();
}

uint64_t sub_250CECC98()
{
  return swift_deallocObject();
}

uint64_t sub_250CECCCC()
{
  return swift_deallocObject();
}

uint64_t sub_250CECD18()
{
  return swift_deallocObject();
}

uint64_t sub_250CECD64()
{
  return swift_deallocObject();
}

uint64_t sub_250CECD98()
{
  return swift_deallocObject();
}

uint64_t sub_250CECDCC()
{
  return swift_deallocObject();
}

uint64_t sub_250CECE18()
{
  return swift_deallocObject();
}

uint64_t sub_250CECECC()
{
  return swift_deallocObject();
}

uint64_t sub_250CECF00()
{
  return swift_deallocObject();
}

uint64_t sub_250CECF34()
{
  return swift_deallocObject();
}

uint64_t sub_250CECF80()
{
  return swift_deallocObject();
}

uint64_t sub_250CECFCC()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #3 in closure #1 in HearingRecord.setPublishedAudiogram(_:)()
{
  return implicit closure #3 in closure #1 in HearingRecord.setPublishedAudiogram(_:)(*(void **)(v0 + 16));
}

uint64_t sub_250CED014()
{
  return swift_deallocObject();
}

uint64_t sub_250CED048()
{
  return swift_deallocObject();
}

uint64_t sub_250CED07C()
{
  return swift_deallocObject();
}

uint64_t sub_250CED0C8()
{
  return swift_deallocObject();
}

uint64_t sub_250CED114()
{
  return swift_deallocObject();
}

uint64_t sub_250CED148()
{
  return swift_deallocObject();
}

uint64_t sub_250CED17C()
{
  return swift_deallocObject();
}

uint64_t sub_250CED1C8()
{
  return swift_deallocObject();
}

uint64_t sub_250CED27C()
{
  return swift_deallocObject();
}

uint64_t sub_250CED2B0()
{
  return swift_deallocObject();
}

uint64_t sub_250CED2E4()
{
  return swift_deallocObject();
}

uint64_t sub_250CED330()
{
  return swift_deallocObject();
}

uint64_t sub_250CED37C()
{
  return swift_deallocObject();
}

uint64_t _swift_stdlib_has_malloc_size_4()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_4(const void *a1)
{
  return malloc_size(a1);
}

uint64_t sub_250CED3FC()
{
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA_0(uint64_t a1)
{
  uint64_t v6 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v7 = *(int **)(v1 + 24);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v3;
  void *v3 = *(void *)(v6 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0__0;
  uint64_t v4 = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + v4))(a1, v7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0__0()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t sub_250CED664()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:)()
{
  return implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:)(*(void **)(v0 + 16));
}

uint64_t sub_250CED6AC()
{
  return swift_deallocObject();
}

uint64_t sub_250CED6E0()
{
  return swift_deallocObject();
}

uint64_t sub_250CED714()
{
  return swift_deallocObject();
}

uint64_t sub_250CED760()
{
  return swift_deallocObject();
}

uint64_t sub_250CED7AC()
{
  return swift_deallocObject();
}

uint64_t sub_250CED7E0()
{
  return swift_deallocObject();
}

uint64_t sub_250CED814()
{
  return swift_deallocObject();
}

uint64_t sub_250CED860()
{
  return swift_deallocObject();
}

uint64_t static Logger.subsystem.getter()
{
  uint64_t v1 = Logger.subsystem.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t static Logger.subsystem.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Logger.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*static Logger.subsystem.modify())()
{
  return static Logger.subsystem.modify;
}

uint64_t static Logger.subsystem.modify()
{
  return swift_endAccess();
}

uint64_t static Logger.shared.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = Logger.shared.unsafeMutableAddressor();
  uint64_t v1 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(a1, v3);
}

BOOL static HeadphoneFeatures.== infix(_:_:)(char a1, char a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = 2;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v4 == v3;
}

uint64_t HeadphoneFeatures.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HeadphoneFeatures.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HeadphoneFeatures(char *a1, char *a2)
{
  return static HeadphoneFeatures.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HeadphoneFeatures()
{
  return HeadphoneFeatures.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HeadphoneFeatures()
{
  return HeadphoneFeatures.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HeadphoneFeatures(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t variable initialization expression of Headphone_Manager.dispatchQueue()
{
  uint64_t v12 = 0;
  unint64_t v5 = (*(void *)(*(void *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0, v0);
  uint64_t v11 = (uint64_t)&v4 - v5;
  unint64_t v6 = (*(void *)(*(void *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v12, v1);
  uint64_t v10 = (char *)&v4 - v6;
  unint64_t v7 = (*(void *)(*(void *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v12, v2);
  uint64_t v9 = (char *)&v4 - v7;
  type metadata accessor for OS_dispatch_queue();
  Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneManager", 0x1AuLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v11);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

void *Headphone_Manager.dispatchQueue.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___HPMHeadphoneManager_dispatchQueue);
  id v1 = v3;
  return v3;
}

uint64_t variable initialization expression of Headphone_Manager._topLevelUIHandler()
{
  return 0;
}

uint64_t Headphone_Manager._topLevelUIHandler.getter()
{
  uint64_t v2 = v0 + OBJC_IVAR___HPMHeadphoneManager__topLevelUIHandler;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x253386C10](v2);
  swift_endAccess();
  return v3;
}

void (*Headphone_Manager._topLevelUIHandler.modify(void *a1))(void **a1, char a2)
{
  unint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  v5[4] = v1;
  uint64_t v2 = OBJC_IVAR___HPMHeadphoneManager__topLevelUIHandler;
  v5[5] = OBJC_IVAR___HPMHeadphoneManager__topLevelUIHandler;
  uint64_t v4 = v1 + v2;
  swift_beginAccess();
  _DWORD v5[3] = MEMORY[0x253386C10](v4);
  return Headphone_Manager._topLevelUIHandler.modify;
}

void Headphone_Manager._topLevelUIHandler.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  swift_endAccess();
  free(v2);
}

uint64_t Headphone_Manager.topLevelUIHandler.getter()
{
  uint64_t v32 = _s2os0A11LogInternal_3log4typeyAA12OSLogMessageV_So03OS_a1_D0CSo0a1_d1_E2_tatFyySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcXEfU_TA_0;
  uint64_t v46 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = v34 - 8;
  unint64_t v37 = (*(void *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v34, v1);
  uint64_t v38 = (char *)&v10 - v37;
  uint64_t v46 = v0;
  uint64_t v45 = Headphone_Manager._topLevelUIHandler.getter();
  BOOL v31 = v45 == 0;
  BOOL v30 = v31;
  outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  if (v30)
  {
    uint64_t v2 = v38;
    uint64_t v3 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v2, v3, v34);
    Swift::String v28 = Logger.logObject.getter();
    int v27 = static os_log_type_t.error.getter();
    Swift::String v25 = &v43;
    uint64_t v43 = 2;
    unint64_t v23 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v24 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v26 = v44;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v29 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v28, (os_log_type_t)v27))
    {
      uint64_t v4 = v33;
      char v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v12 = 0;
      uint64_t v14 = createStorage<A>(capacity:type:)(0);
      uint64_t v15 = createStorage<A>(capacity:type:)(v12);
      uint64_t v19 = &v42;
      id v42 = v13;
      Swift::String v20 = &v41;
      uint64_t v41 = v14;
      uint64_t v17 = &v40;
      uint64_t v40 = v15;
      unsigned int v16 = 0;
      serialize(_:at:)(0, &v42);
      serialize(_:at:)(v16, v19);
      uint64_t v39 = v29;
      Swift::String v18 = &v10;
      MEMORY[0x270FA5388](&v10, v5);
      unint64_t v6 = v20;
      unint64_t v7 = &v10 - 6;
      Swift::String v21 = &v10 - 6;
      void v7[2] = (uint64_t)v19;
      v7[3] = (uint64_t)v6;
      void v7[4] = v8;
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v4)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_250C36000, v28, (os_log_type_t)v27, "HeadphoneManager: deviceDiscoveryHandler unset", v13, v26);
        uint64_t v10 = 0;
        destroyStorage<A>(_:count:)(v14, 0, v11);
        destroyStorage<A>(_:count:)(v15, v10, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v13, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
  }
  return Headphone_Manager._topLevelUIHandler.getter();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?()
{
}

void key path getter for Headphone_Manager.topLevelUIHandler : Headphone_Manager(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0xC0))(v2);
}

void key path setter for Headphone_Manager.topLevelUIHandler : Headphone_Manager(uint64_t *a1, id *a2)
{
  outlined init with copy of HeadphoneMangerTopLevelEntryUIHandling?(a1, &v6);
  uint64_t v5 = v6;
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0xC8))(v5);
}

uint64_t (*Headphone_Manager.topLevelUIHandler.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = Headphone_Manager.topLevelUIHandler.getter();
  return Headphone_Manager.topLevelUIHandler.modify;
}

uint64_t Headphone_Manager.topLevelUIHandler.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return Headphone_Manager.topLevelUIHandler.setter();
  }
  swift_unknownObjectRetain();
  Headphone_Manager.topLevelUIHandler.setter();
  uint64_t result = a1;
  outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  return result;
}

id variable initialization expression of Headphone_Manager.cbDiscovery()
{
  return CBDiscovery.__allocating_init()();
}

id Headphone_Manager.cbDiscovery.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_cbDiscovery);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void Headphone_Manager.cbDiscovery.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_cbDiscovery);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.cbDiscovery.modify())()
{
  return Headphone_Manager.cbDiscovery.modify;
}

uint64_t Headphone_Manager.cbDiscovery.modify()
{
  return swift_endAccess();
}

id variable initialization expression of Headphone_Manager.controller()
{
  return CBController.__allocating_init()();
}

id Headphone_Manager.controller.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_controller);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void Headphone_Manager.controller.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_controller);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.controller.modify())()
{
  return Headphone_Manager.controller.modify;
}

uint64_t Headphone_Manager.controller.modify()
{
  return swift_endAccess();
}

id variable initialization expression of Headphone_Manager.connection()
{
  return CBConnection.__allocating_init()();
}

id Headphone_Manager.connection.getter()
{
  uint64_t v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_connection);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void Headphone_Manager.connection.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_connection);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.connection.modify())()
{
  return Headphone_Manager.connection.modify;
}

uint64_t Headphone_Manager.connection.modify()
{
  return swift_endAccess();
}

id variable initialization expression of Headphone_Manager.deviceManger()
{
  return AADeviceManager.__allocating_init()();
}

void Headphone_Manager.deviceManger.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_deviceManger);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.deviceManger.modify())()
{
  return Headphone_Manager.deviceManger.modify;
}

uint64_t Headphone_Manager.deviceManger.modify()
{
  return swift_endAccess();
}

void key path getter for Headphone_Manager.hmsClient : Headphone_Manager(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x138))(v2);
}

void key path setter for Headphone_Manager.hmsClient : Headphone_Manager(id *a1, id *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  uint64_t v6 = *a2;
  id v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x263F8EED0]) + 0x140))(v4);
}

void Headphone_Manager.hmsClient.setter(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient);
  swift_beginAccess();
  id v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

void (*Headphone_Manager.hmsClient.modify(id *a1))(id *a1, char a2)
{
  a1[1] = v1;
  *a1 = Headphone_Manager.hmsClient.getter();
  return Headphone_Manager.hmsClient.modify;
}

void Headphone_Manager.hmsClient.modify(id *a1, char a2)
{
  if (a2)
  {
    id v3 = *a1;
    id v2 = *a1;
    Headphone_Manager.hmsClient.setter(v3);
  }
  else
  {
    Headphone_Manager.hmsClient.setter(*a1);
  }
}

uint64_t variable initialization expression of Headphone_Manager.$__lazy_storage_$_hmsClient()
{
  return 0;
}

uint64_t variable initialization expression of Headphone_Manager.connectedRecords()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Headphone_Manager.connectedRecords.getter()
{
  id v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneManager_connectedRecords);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager.connectedRecords.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___HPMHeadphoneManager_connectedRecords);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for Headphone_Manager.connectedRecords : Headphone_Manager(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x150))(v2);
}

void key path setter for Headphone_Manager.connectedRecords : Headphone_Manager(uint64_t *a1, id *a2)
{
  outlined init with copy of [String : HMDeviceRecord](a1, &v6);
  uint64_t v5 = v6;
  id v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x158))(v5);
}

uint64_t (*Headphone_Manager.connectedRecords.modify())()
{
  return Headphone_Manager.connectedRecords.modify;
}

uint64_t Headphone_Manager.connectedRecords.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of Headphone_Manager.deviceConnectionListener()
{
  return 0;
}

uint64_t Headphone_Manager.deviceConnectionListener.getter()
{
  uint64_t v2 = v0 + OBJC_IVAR___HPMHeadphoneManager_deviceConnectionListener;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x253386C10](v2);
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager.deviceConnectionListener.setter()
{
  return swift_unknownObjectRelease();
}

void key path getter for Headphone_Manager.deviceConnectionListener : Headphone_Manager(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x168))(v2);
}

void key path setter for Headphone_Manager.deviceConnectionListener : Headphone_Manager(uint64_t *a1, id *a2)
{
  outlined init with copy of CBDeviceReporting?(a1, &v6);
  uint64_t v5 = v6;
  id v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x170))(v5);
}

void (*Headphone_Manager.deviceConnectionListener.modify(void *a1))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  v5[4] = v1;
  uint64_t v2 = OBJC_IVAR___HPMHeadphoneManager_deviceConnectionListener;
  v5[5] = OBJC_IVAR___HPMHeadphoneManager_deviceConnectionListener;
  uint64_t v4 = v1 + v2;
  swift_beginAccess();
  _DWORD v5[3] = MEMORY[0x253386C10](v4);
  return Headphone_Manager.deviceConnectionListener.modify;
}

void Headphone_Manager.deviceConnectionListener.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of CBDeviceReporting?();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  swift_endAccess();
  free(v2);
}

uint64_t variable initialization expression of Headphone_Manager.connectedHeadphones()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Headphone_Manager.connectedHeadphones.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___HPMHeadphoneManager_connectedHeadphones);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for Headphone_Manager.connectedHeadphones : Headphone_Manager(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x180))(v2);
}

void key path setter for Headphone_Manager.connectedHeadphones : Headphone_Manager(uint64_t *a1, id *a2)
{
  outlined init with copy of [String : HeadphoneDevice](a1, &v6);
  uint64_t v5 = v6;
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x188))(v5);
}

uint64_t (*Headphone_Manager.connectedHeadphones.modify())()
{
  return Headphone_Manager.connectedHeadphones.modify;
}

uint64_t Headphone_Manager.connectedHeadphones.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of Headphone_Manager.pendingConnectedHeadphones()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Headphone_Manager.pendingConnectedHeadphones.getter()
{
  id v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneManager_pendingConnectedHeadphones);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager.pendingConnectedHeadphones.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___HPMHeadphoneManager_pendingConnectedHeadphones);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for Headphone_Manager.pendingConnectedHeadphones : Headphone_Manager(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x263F8EED0]) + 0x198))(v2);
}

void key path setter for Headphone_Manager.pendingConnectedHeadphones : Headphone_Manager(uint64_t *a1, id *a2)
{
  outlined init with copy of [String : HeadphoneDevice](a1, &v6);
  uint64_t v5 = v6;
  uint64_t v4 = *a2;
  id v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x263F8EED0]) + 0x1A0))(v5);
}

uint64_t (*Headphone_Manager.pendingConnectedHeadphones.modify())()
{
  return Headphone_Manager.pendingConnectedHeadphones.modify;
}

uint64_t Headphone_Manager.pendingConnectedHeadphones.modify()
{
  return swift_endAccess();
}

id Headphone_Manager.__deallocating_deinit()
{
  uint64_t v15 = 0;
  uint64_t v6 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_deviceManger];
  swift_beginAccess();
  id v7 = *v6;
  id v1 = *v6;
  swift_endAccess();
  [v7 (SEL)0x1F6435F98];

  uint64_t v8 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_cbDiscovery];
  swift_beginAccess();
  id v9 = *v8;
  id v2 = *v8;
  swift_endAccess();
  [v9 (SEL)0x1F6435F98];

  uint64_t v10 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_controller];
  swift_beginAccess();
  id v11 = *v10;
  id v3 = *v10;
  swift_endAccess();
  [v11 (SEL)0x1F6435F98];

  uint64_t v12 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_connection];
  swift_beginAccess();
  id v13 = *v12;
  id v4 = *v12;
  swift_endAccess();
  [v13 (SEL)0x1F6435F98];

  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for Headphone_Manager();
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

void closure #1 in Headphone_Manager.configCBDiscovery()(void *a1, void *a2)
{
  id v270 = a1;
  uint64_t v290 = a2;
  uint64_t v271 = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery();
  uint64_t v272 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v273 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v274 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint32_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v276 = closure #1 in osLogInternal(_:log:type:)partial apply;
  id v277 = partial apply for implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery();
  uint64_t v278 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
  uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v280 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v281 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  char v282 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v283 = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery();
  uint64_t v284 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
  uint64_t v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint32_t v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v287 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v288 = thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()partial apply;
  uint64_t v348 = 0;
  uint64_t v347 = 0;
  uint64_t v289 = 0;
  id v339 = 0;
  uint64_t v330 = 0;
  unint64_t v331 = 0;
  uint64_t v326 = 0;
  uint64_t v327 = 0;
  uint64_t v320 = 0;
  uint64_t v321 = 0;
  unint64_t v310 = 0;
  uint64_t v291 = type metadata accessor for Logger();
  uint64_t v292 = *(void **)(v291 - 8);
  uint64_t v293 = v291 - 8;
  unint64_t v294 = (v292[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v291, v290);
  uint64_t v295 = (char *)&v105 - v294;
  unint64_t v296 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v105 - v294, v4);
  id v297 = (char *)&v105 - v296;
  unint64_t v298 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v105 - v296, v6);
  uint64_t v299 = (char *)&v105 - v298;
  unint64_t v300 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v105 - v298, v8);
  uint64_t v301 = (char *)&v105 - v300;
  unint64_t v302 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v105 - v300, v10);
  Swift::String v303 = (char *)&v105 - v302;
  uint64_t v348 = a1;
  uint64_t v347 = v11;
  id v304 = AudioAccessoryDevice.cbDeviceValidator(aaDevice:)(a1);
  if (v304)
  {
    id v269 = v304;
    uint32_t v26 = v301;
    id v233 = v304;
    id v339 = v304;
    uint64_t v27 = Logger.shared.unsafeMutableAddressor();
    unint64_t v231 = (void (*)(char *, uint64_t, uint64_t))v292[2];
    uint64_t v232 = v292 + 2;
    v231(v26, v27, v291);
    id v28 = v233;
    uint64_t v241 = 7;
    uint64_t v242 = swift_allocObject();
    *(void *)(v242 + 16) = v233;
    uint64_t v250 = Logger.logObject.getter();
    int v251 = static os_log_type_t.default.getter();
    uint64_t v236 = &v337;
    uint64_t v337 = 12;
    unint64_t v234 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v235 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v237 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v238 = v338;
    uint64_t v239 = 17;
    uint64_t v244 = swift_allocObject();
    *(unsigned char *)(v244 + 16) = 32;
    uint64_t v245 = swift_allocObject();
    *(unsigned char *)(v245 + 16) = 8;
    uint64_t v240 = 32;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v242;
    uint64_t v243 = v29;
    *(void *)(v29 + 16) = v271;
    *(void *)(v29 + 24) = v30;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v243;
    uint64_t v247 = v31;
    *(void *)(v31 + 16) = v272;
    *(void *)(v31 + 24) = v32;
    uint64_t v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v246 = _allocateUninitializedArray<A>(_:)();
    uint64_t v248 = v33;
    swift_retain();
    uint64_t v34 = v244;
    uint64_t v35 = v248;
    void *v248 = v273;
    v35[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = v245;
    unint64_t v37 = v248;
    v248[2] = v274;
    v37[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
    swift_retain();
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v247;
    uint64_t v39 = v248;
    v248[4] = v275;
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v250, (os_log_type_t)v251))
    {
      uint64_t v40 = v289;
      uint64_t v224 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v225 = createStorage<A>(capacity:type:)(0);
      uint64_t v226 = createStorage<A>(capacity:type:)(1);
      uint64_t v227 = &v309;
      v309 = v224;
      uint64_t v228 = &v308;
      uint64_t v308 = v225;
      uint64_t v229 = &v307;
      uint64_t v307 = v226;
      serialize(_:at:)(2, &v309);
      serialize(_:at:)(1, v227);
      v305 = v273;
      uint64_t v306 = v244;
      closure #1 in osLogInternal(_:log:type:)(&v305, (uint64_t)v227, (uint64_t)v228, (uint64_t)v229);
      uint64_t v230 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        v305 = v274;
        uint64_t v306 = v245;
        closure #1 in osLogInternal(_:log:type:)(&v305, (uint64_t)&v309, (uint64_t)&v308, (uint64_t)&v307);
        uint64_t v221 = 0;
        uint64_t v42 = v221;
        v305 = v275;
        uint64_t v306 = v247;
        closure #1 in osLogInternal(_:log:type:)(&v305, (uint64_t)&v309, (uint64_t)&v308, (uint64_t)&v307);
        uint64_t v220 = v42;
        _os_log_impl(&dword_250C36000, v250, (os_log_type_t)v251, "HeadphoneManager: AAF Device Found: %s", v224, v238);
        destroyStorage<A>(_:count:)(v225, 0, v223);
        destroyStorage<A>(_:count:)(v226, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v224, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v222 = v220;
      }
    }
    else
    {
      uint64_t v41 = v289;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v222 = v41;
    }
    uint64_t v216 = v222;

    uint64_t v217 = (void (*)(char *, uint64_t))v292[1];
    uint64_t v218 = v292 + 1;
    v217(v301, v291);
    id v219 = objc_msgSend(v233, sel_btAddressData);
    if (v219)
    {
      id v215 = v219;
      id v210 = v219;
      uint64_t v211 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v212 = v43;

      uint64_t v213 = v211;
      unint64_t v214 = v212;
    }
    else
    {
      uint64_t v213 = 0;
      unint64_t v214 = 0xF000000000000000;
    }
    unint64_t v208 = v214;
    uint64_t v209 = v213;
    if ((v214 & 0xF000000000000000) == 0xF000000000000000)
    {
      uint32_t v44 = v299;
      uint64_t v45 = Logger.shared.unsafeMutableAddressor();
      v231(v44, v45, v291);
      uint64_t v204 = Logger.logObject.getter();
      int v203 = static os_log_type_t.error.getter();
      v335[1] = (unsigned char *)2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v202 = v336;
      uint64_t v205 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v204, (os_log_type_t)v203))
      {
        uint64_t v99 = v216;
        uint64_t v117 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v116 = 0;
        uint64_t v118 = createStorage<A>(capacity:type:)(0);
        uint64_t v119 = createStorage<A>(capacity:type:)(v116);
        uint64_t v123 = v335;
        v335[0] = v117;
        uint64_t v124 = &v334;
        uint64_t v334 = v118;
        unint64_t v121 = &v333;
        uint64_t v333 = v119;
        unsigned int v120 = 0;
        serialize(_:at:)(0, v335);
        serialize(_:at:)(v120, v123);
        uint64_t v332 = v205;
        uint64_t v122 = &v105;
        MEMORY[0x270FA5388](&v105, v100);
        uint64_t v101 = v124;
        uint64_t v102 = &v105 - 6;
        uint64_t v125 = &v105 - 6;
        v102[2] = (uint64_t)v123;
        v102[3] = (uint64_t)v101;
        v102[4] = v103;
        uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v99)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_250C36000, v204, (os_log_type_t)v203, "HeadphoneManager: Invalid BT Address", v117, v202);
          uint64_t v114 = 0;
          destroyStorage<A>(_:count:)(v118, 0, v115);
          destroyStorage<A>(_:count:)(v119, v114, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x253386220](v117, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      v217(v299, v291);
    }
    else
    {
      uint64_t v206 = v209;
      unint64_t v207 = v208;
      unint64_t v200 = v208;
      uint64_t v201 = v209;
      uint64_t v330 = v209;
      unint64_t v331 = v208;
      if (Data.count.getter() != 6)
      {
        Swift::String v90 = v295;
        uint64_t v91 = Logger.shared.unsafeMutableAddressor();
        v231(v90, v91, v291);
        char v160 = Logger.logObject.getter();
        int v159 = static os_log_type_t.error.getter();
        v328[1] = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v158 = v329;
        uint64_t v161 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v160, (os_log_type_t)v159))
        {
          uint64_t v92 = v216;
          uint64_t v148 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v147 = 0;
          uint64_t v149 = createStorage<A>(capacity:type:)(0);
          uint64_t v150 = createStorage<A>(capacity:type:)(v147);
          id v154 = &v325;
          uint64_t v325 = v148;
          objc_super v155 = &v324;
          uint64_t v324 = v149;
          uint64_t v152 = &v323;
          uint64_t v323 = v150;
          unsigned int v151 = 0;
          serialize(_:at:)(0, &v325);
          serialize(_:at:)(v151, v154);
          uint64_t v322 = v161;
          uint64_t v153 = &v105;
          MEMORY[0x270FA5388](&v105, v93);
          uint64_t v94 = v155;
          int v95 = &v105 - 6;
          char v156 = &v105 - 6;
          v95[2] = (uint64_t)v154;
          v95[3] = (uint64_t)v94;
          v95[4] = v96;
          uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v92)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_250C36000, v160, (os_log_type_t)v159, "HeadphoneManager: Invalid BT Address Length", v148, v158);
            uint64_t v145 = 0;
            destroyStorage<A>(_:count:)(v149, 0, v146);
            destroyStorage<A>(_:count:)(v150, v145, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x253386220](v148, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v89 = ((uint64_t (*)(char *, uint64_t))v217)(v295, v291);
      }
      else
      {
        unint64_t v47 = v290;
        Swift::String v197 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X-%02X-%02X-%02X-%02X-%02X", 0x1DuLL, 1);
        uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
        uint64_t v196 = _allocateUninitializedArray<A>(_:)();
        int v194 = v48;
        char v49 = Data.subscript.getter();
        unint64_t v50 = v194;
        uint64_t v192 = MEMORY[0x263F8E778];
        v194[3] = MEMORY[0x263F8E778];
        uint64_t v193 = MEMORY[0x263F8E7C0];
        v50[4] = MEMORY[0x263F8E7C0];
        *(unsigned char *)unint64_t v50 = v49;
        char v51 = Data.subscript.getter();
        uint64_t v52 = v193;
        Swift::String v53 = v194;
        v194[8] = v192;
        v53[9] = v52;
        *((unsigned char *)v53 + 40) = v51;
        char v54 = Data.subscript.getter();
        uint64_t v55 = v193;
        Swift::String v56 = v194;
        v194[13] = v192;
        v56[14] = v55;
        *((unsigned char *)v56 + 80) = v54;
        char v57 = Data.subscript.getter();
        uint64_t v58 = v193;
        uint64_t v59 = v194;
        v194[18] = v192;
        v59[19] = v58;
        *((unsigned char *)v59 + 120) = v57;
        char v60 = Data.subscript.getter();
        uint64_t v61 = v193;
        uint64_t v62 = v194;
        v194[23] = v192;
        v62[24] = v61;
        *((unsigned char *)v62 + 160) = v60;
        char v63 = Data.subscript.getter();
        uint64_t v64 = v193;
        uint64_t v65 = v194;
        v194[28] = v192;
        v65[29] = v64;
        *((unsigned char *)v65 + 200) = v63;
        _finalizeUninitializedArray<A>(_:)();
        uint64_t v198 = String.init(format:_:)();
        uint64_t v199 = v66;
        swift_bridgeObjectRelease();
        uint64_t v320 = v198;
        uint64_t v321 = v199;
        if ((*(uint64_t (**)(id))((*v47 & *MEMORY[0x263F8EED0]) + 0x1B8))(v233))
        {
          uint64_t v67 = v290;
          uint64_t v68 = swift_bridgeObjectRetain();
          uint64_t v189 = (*(uint64_t (**)(uint64_t))((*v67 & *MEMORY[0x263F8EED0]) + 0x180))(v68);
          char v190 = v312;
          v312[0] = v198;
          v312[1] = v199;
          uint64_t v69 = type metadata accessor for HeadphoneDevice();
          MEMORY[0x253385E50](&v313, v190, v189, MEMORY[0x263F8D310], v69, MEMORY[0x263F8D320]);
          outlined destroy of String();
          int v191 = v313;
          if (v313)
          {
            int v188 = v191;
            uint64_t v72 = v191;
            id v187 = v191;
            unint64_t v310 = v191;
            swift_bridgeObjectRelease();
            (*(void (**)(id, id))((*v72 & *MEMORY[0x263F8EED0]) + 0xA88))(v270, v233);
          }
          else
          {
            uint64_t v70 = v290;
            uint64_t v71 = swift_bridgeObjectRelease();
            unint64_t v311 = (void *)(*(uint64_t (**)(uint64_t))((*v70 & *MEMORY[0x263F8EED0]) + 0xC0))(v71);
            if (v311)
            {
              char v184 = &v311;
              id v186 = v311;
              swift_unknownObjectRetain();
              outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
              swift_getObjectType();
              uint64_t v73 = v290;
              id v185 = objc_msgSend(v270, sel_headphoneDeviceWithCbDevice_withDelegate_, v233, v290);
              swift_unknownObjectRelease();
              objc_msgSend(v186, sel_addTopLevelEntryWithHpDevice_, v185);

              swift_unknownObjectRelease();
            }
            else
            {
              outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
            }
          }
        }
        else
        {
          uint64_t v74 = v297;
          uint64_t v75 = Logger.shared.unsafeMutableAddressor();
          v231(v74, v75, v291);
          id v76 = v233;
          uint64_t v174 = 7;
          uint64_t v175 = swift_allocObject();
          *(void *)(v175 + 16) = v233;
          int v182 = Logger.logObject.getter();
          int v183 = static os_log_type_t.error.getter();
          v318[1] = (unsigned char *)12;
          UnsignedInteger<>.init<A>(_:)();
          uint32_t v171 = v319;
          uint64_t v172 = 17;
          uint64_t v177 = swift_allocObject();
          *(unsigned char *)(v177 + 16) = 64;
          uint64_t v178 = swift_allocObject();
          *(unsigned char *)(v178 + 16) = 8;
          uint64_t v173 = 32;
          uint64_t v77 = swift_allocObject();
          uint64_t v78 = v175;
          uint64_t v176 = v77;
          *(void *)(v77 + 16) = v277;
          *(void *)(v77 + 24) = v78;
          uint64_t v79 = swift_allocObject();
          uint64_t v80 = v176;
          uint64_t v180 = v79;
          *(void *)(v79 + 16) = v278;
          *(void *)(v79 + 24) = v80;
          uint64_t v179 = _allocateUninitializedArray<A>(_:)();
          char v181 = v81;
          swift_retain();
          uint64_t v82 = v177;
          uint64_t v83 = v181;
          *char v181 = v279;
          v83[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82;
          swift_retain();
          uint64_t v84 = v178;
          uint64_t v85 = v181;
          v181[2] = v280;
          v85[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v84;
          swift_retain();
          uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v180;
          uint64_t v87 = v181;
          v181[4] = v281;
          v87[5] = v86;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v182, (os_log_type_t)v183))
          {
            uint64_t v88 = v216;
            char v164 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v165 = createStorage<A>(capacity:type:)(1);
            uint64_t v166 = createStorage<A>(capacity:type:)(0);
            char v167 = v318;
            v318[0] = v164;
            char v168 = &v317;
            uint64_t v317 = v165;
            char v169 = &v316;
            uint64_t v316 = v166;
            serialize(_:at:)(2, v318);
            serialize(_:at:)(1, v167);
            uint64_t v314 = v279;
            uint64_t v315 = v177;
            closure #1 in osLogInternal(_:log:type:)(&v314, (uint64_t)v167, (uint64_t)v168, (uint64_t)v169);
            uint64_t v170 = v88;
            if (v88)
            {
              __break(1u);
            }
            else
            {
              uint64_t v314 = v280;
              uint64_t v315 = v178;
              closure #1 in osLogInternal(_:log:type:)(&v314, (uint64_t)v318, (uint64_t)&v317, (uint64_t)&v316);
              uint64_t v162 = 0;
              uint64_t v314 = v281;
              uint64_t v315 = v180;
              closure #1 in osLogInternal(_:log:type:)(&v314, (uint64_t)v318, (uint64_t)&v317, (uint64_t)&v316);
              _os_log_impl(&dword_250C36000, v182, (os_log_type_t)v183, "HeadphoneManager: Not Supported Apple Headphone %@", v164, v171);
              destroyStorage<A>(_:count:)(v165, 1, v163);
              destroyStorage<A>(_:count:)(v166, 0, MEMORY[0x263F8EE58] + 8);
              MEMORY[0x253386220](v164, MEMORY[0x263F8E778]);
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
          }

          v217(v297, v291);
        }
        uint64_t v89 = swift_bridgeObjectRelease();
      }
      v328[0] = (*(uint64_t (**)(uint64_t))((*v290 & *MEMORY[0x263F8EED0]) + 0x168))(v89);
      if (v328[0])
      {
        uint64_t v139 = v328;
        id v140 = (id)v328[0];
        swift_unknownObjectRetain();
        outlined destroy of CBDeviceReporting?();
        swift_getObjectType();
        id v141 = objc_msgSend(v140, sel_deviceFoundHandler);
        if (v141)
        {
          id v138 = v141;
          id v135 = v141;
          uint64_t v97 = swift_allocObject();
          uint64_t v98 = v288;
          *(void *)(v97 + 16) = v135;
          int v136 = v98;
          uint64_t v137 = v97;
        }
        else
        {
          int v136 = 0;
          uint64_t v137 = 0;
        }
        uint64_t v134 = v137;
        uint64_t v133 = v136;
        swift_unknownObjectRelease();
        uint64_t v143 = v133;
        uint64_t v144 = (void (*)(void))v134;
      }
      else
      {
        uint64_t v142 = 0;
        outlined destroy of CBDeviceReporting?();
        uint64_t v143 = v142;
        uint64_t v144 = (void (*)(void))v142;
      }
      uint64_t v131 = v144;
      uint64_t v132 = v143;
      if (v143)
      {
        uint64_t v129 = v132;
        unint64_t v130 = v131;
        uint64_t v128 = v131;
        uint64_t v127 = v132;
        uint64_t v326 = v132;
        uint64_t v327 = v131;
        swift_retain();
        v127((uint64_t)v233);
        swift_release();
        swift_release();
      }
      outlined consume of Data._Representation(v201, v200);
    }
  }
  else
  {
    uint64_t v12 = v303;
    uint64_t v13 = Logger.shared.unsafeMutableAddressor();
    ((void (*)(char *, uint64_t, uint64_t))v292[2])(v12, v13, v291);
    id v14 = v270;
    uint64_t v258 = 7;
    uint64_t v259 = swift_allocObject();
    *(void *)(v259 + 16) = v270;
    uint64_t v267 = Logger.logObject.getter();
    int v268 = static os_log_type_t.error.getter();
    uint64_t v254 = &v345;
    uint64_t v345 = 12;
    unint64_t v252 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v253 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v255 = v346;
    uint64_t v256 = 17;
    uint64_t v261 = swift_allocObject();
    *(unsigned char *)(v261 + 16) = 64;
    uint64_t v262 = swift_allocObject();
    *(unsigned char *)(v262 + 16) = 8;
    uint64_t v257 = 32;
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v259;
    uint64_t v260 = v15;
    *(void *)(v15 + 16) = v283;
    *(void *)(v15 + 24) = v16;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v260;
    uint64_t v264 = v17;
    *(void *)(v17 + 16) = v284;
    *(void *)(v17 + 24) = v18;
    uint64_t v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v263 = _allocateUninitializedArray<A>(_:)();
    uint64_t v265 = v19;
    swift_retain();
    uint64_t v20 = v261;
    Swift::String v21 = v265;
    *uint64_t v265 = v285;
    v21[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
    swift_retain();
    uint64_t v22 = v262;
    unint64_t v23 = v265;
    v265[2] = v286;
    v23[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
    swift_retain();
    unint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v264;
    Swift::String v25 = v265;
    v265[4] = v287;
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v267, (os_log_type_t)v268))
    {
      uint64_t v104 = v289;
      uint64_t v107 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v108 = createStorage<A>(capacity:type:)(1);
      uint64_t v109 = createStorage<A>(capacity:type:)(0);
      uint64_t v110 = &v344;
      uint64_t v344 = v107;
      uint64_t v111 = &v343;
      uint64_t v343 = v108;
      uint64_t v112 = &v342;
      uint64_t v342 = v109;
      serialize(_:at:)(2, &v344);
      serialize(_:at:)(1, v110);
      uint64_t v340 = v285;
      uint64_t v341 = v261;
      closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)v110, (uint64_t)v111, (uint64_t)v112);
      uint64_t v113 = v104;
      if (v104)
      {
        __break(1u);
      }
      else
      {
        uint64_t v340 = v286;
        uint64_t v341 = v262;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v344, (uint64_t)&v343, (uint64_t)&v342);
        uint64_t v105 = 0;
        uint64_t v340 = v287;
        uint64_t v341 = v264;
        closure #1 in osLogInternal(_:log:type:)(&v340, (uint64_t)&v344, (uint64_t)&v343, (uint64_t)&v342);
        _os_log_impl(&dword_250C36000, v267, (os_log_type_t)v268, "HeadphoneManager: AAF Device: %@ is missing cbDevice early exit found handler", v107, v255);
        destroyStorage<A>(_:count:)(v108, 1, v106);
        destroyStorage<A>(_:count:)(v109, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v107, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    ((void (*)(char *, uint64_t))v292[1])(v303, v291);
  }
}

void *implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v7 = objc_msgSend(a1, sel_name);
  if (v7)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v1;

    uint64_t v5 = v3;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v6) {
    return v5;
  }
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, 1)._countAndFlagsBits;
  outlined destroy of String?();
  return countAndFlagsBits;
}

void *implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v2 = a2;
  v4(a2);

  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void closure #2 in Headphone_Manager.configCBDiscovery()(void *a1, void *a2)
{
  id v254 = a1;
  id v270 = a2;
  uint32_t v255 = partial apply for implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery();
  uint64_t v256 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v257 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v258 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v259 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v260 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v261 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v262 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v263 = partial apply for implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery();
  uint64_t v264 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
  uint64_t v265 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v266 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v267 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v268 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ();
  uint64_t v327 = 0;
  uint64_t v326 = 0;
  uint64_t v269 = 0;
  id v318 = 0;
  uint64_t v309 = 0;
  unint64_t v310 = 0;
  v305 = 0;
  uint64_t v306 = 0;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v291 = 0;
  uint64_t v271 = type metadata accessor for Logger();
  uint64_t v272 = *(void **)(v271 - 8);
  uint64_t v273 = v271 - 8;
  unint64_t v274 = (v272[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v271, v270);
  uint32_t v275 = (char *)v94 - v274;
  unint64_t v276 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v94 - v274, v4);
  id v277 = (char *)v94 - v276;
  unint64_t v278 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v94 - v276, v6);
  uint64_t v279 = (char *)v94 - v278;
  unint64_t v280 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v94 - v278, v8);
  uint64_t v281 = (char *)v94 - v280;
  unint64_t v282 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v94 - v280, v10);
  uint64_t v283 = (char *)v94 - v282;
  uint64_t v327 = a1;
  uint64_t v326 = v11;
  id v284 = AudioAccessoryDevice.cbDeviceValidator(aaDevice:)(a1);
  if (v284)
  {
    id v253 = v284;
    uint32_t v26 = v281;
    id v217 = v284;
    id v318 = v284;
    uint64_t v27 = Logger.shared.unsafeMutableAddressor();
    id v215 = (void (*)(char *, uint64_t, uint64_t))v272[2];
    uint64_t v216 = v272 + 2;
    v215(v26, v27, v271);
    id v28 = v217;
    uint64_t v225 = 7;
    uint64_t v226 = swift_allocObject();
    *(void *)(v226 + 16) = v217;
    unint64_t v234 = Logger.logObject.getter();
    int v235 = static os_log_type_t.default.getter();
    uint64_t v220 = &v316;
    uint64_t v316 = 12;
    unint64_t v218 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v219 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v221 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v222 = v317;
    uint64_t v223 = 17;
    uint64_t v228 = swift_allocObject();
    *(unsigned char *)(v228 + 16) = 32;
    uint64_t v229 = swift_allocObject();
    *(unsigned char *)(v229 + 16) = 8;
    uint64_t v224 = 32;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v226;
    uint64_t v227 = v29;
    *(void *)(v29 + 16) = v255;
    *(void *)(v29 + 24) = v30;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v227;
    uint64_t v231 = v31;
    *(void *)(v31 + 16) = v256;
    *(void *)(v31 + 24) = v32;
    uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v230 = _allocateUninitializedArray<A>(_:)();
    uint64_t v232 = v33;
    swift_retain();
    uint64_t v34 = v228;
    uint64_t v35 = v232;
    void *v232 = v257;
    v35[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = v229;
    unint64_t v37 = v232;
    v232[2] = v258;
    v37[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
    swift_retain();
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v231;
    uint64_t v39 = v232;
    v232[4] = v259;
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v234, (os_log_type_t)v235))
    {
      uint64_t v40 = v269;
      unint64_t v208 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v209 = createStorage<A>(capacity:type:)(0);
      uint64_t v210 = createStorage<A>(capacity:type:)(1);
      uint64_t v211 = &v289;
      uint64_t v289 = v208;
      unint64_t v212 = &v288;
      uint64_t v288 = v209;
      uint64_t v213 = &v287;
      uint64_t v287 = v210;
      serialize(_:at:)(2, &v289);
      serialize(_:at:)(1, v211);
      uint64_t v285 = v257;
      uint64_t v286 = v228;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v211, (uint64_t)v212, (uint64_t)v213);
      uint64_t v214 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        uint64_t v285 = v258;
        uint64_t v286 = v229;
        closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)&v289, (uint64_t)&v288, (uint64_t)&v287);
        uint64_t v205 = 0;
        uint64_t v42 = v205;
        uint64_t v285 = v259;
        uint64_t v286 = v231;
        closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)&v289, (uint64_t)&v288, (uint64_t)&v287);
        uint64_t v204 = v42;
        _os_log_impl(&dword_250C36000, v234, (os_log_type_t)v235, "HeadphoneManager: AAF Device Lost: %s", v208, v222);
        destroyStorage<A>(_:count:)(v209, 0, v207);
        destroyStorage<A>(_:count:)(v210, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v208, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        uint64_t v206 = v204;
      }
    }
    else
    {
      uint64_t v41 = v269;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v206 = v41;
    }
    uint64_t v200 = v206;

    uint64_t v201 = (void (*)(char *, uint64_t))v272[1];
    uint32_t v202 = v272 + 1;
    v201(v281, v271);
    id v203 = objc_msgSend(v217, sel_btAddressData);
    if (v203)
    {
      id v199 = v203;
      id v194 = v203;
      uint64_t v195 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v196 = v43;

      uint64_t v197 = v195;
      unint64_t v198 = v196;
    }
    else
    {
      uint64_t v197 = 0;
      unint64_t v198 = 0xF000000000000000;
    }
    unint64_t v192 = v198;
    uint64_t v193 = v197;
    if ((v198 & 0xF000000000000000) == 0xF000000000000000)
    {
      uint32_t v44 = v279;
      uint64_t v45 = Logger.shared.unsafeMutableAddressor();
      v215(v44, v45, v271);
      int v188 = Logger.logObject.getter();
      int v187 = static os_log_type_t.error.getter();
      v314[1] = (unsigned char *)2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v186 = v315;
      uint64_t v189 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v188, (os_log_type_t)v187))
      {
        uint64_t v88 = v200;
        uint64_t v106 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v105 = 0;
        uint64_t v107 = createStorage<A>(capacity:type:)(0);
        uint64_t v108 = createStorage<A>(capacity:type:)(v105);
        uint64_t v112 = v314;
        v314[0] = v106;
        uint64_t v113 = &v313;
        uint64_t v313 = v107;
        uint64_t v110 = &v312;
        uint64_t v312 = v108;
        unsigned int v109 = 0;
        serialize(_:at:)(0, v314);
        serialize(_:at:)(v109, v112);
        uint64_t v311 = v189;
        uint64_t v111 = v94;
        MEMORY[0x270FA5388](v94, v89);
        Swift::String v90 = v113;
        uint64_t v91 = &v94[-6];
        uint64_t v114 = &v94[-6];
        v91[2] = v112;
        v91[3] = v90;
        v91[4] = v92;
        uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v88)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_250C36000, v188, (os_log_type_t)v187, "HeadphoneManager: Invalid BT Address", v106, v186);
          uint64_t v103 = 0;
          destroyStorage<A>(_:count:)(v107, 0, v104);
          destroyStorage<A>(_:count:)(v108, v103, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x253386220](v106, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      v201(v279, v271);
    }
    else
    {
      uint64_t v190 = v193;
      unint64_t v191 = v192;
      unint64_t v184 = v192;
      uint64_t v185 = v193;
      uint64_t v309 = v193;
      unint64_t v310 = v192;
      if (Data.count.getter() != 6)
      {
        uint64_t v79 = v275;
        uint64_t v80 = Logger.shared.unsafeMutableAddressor();
        v215(v79, v80, v271);
        uint64_t v149 = Logger.logObject.getter();
        int v148 = static os_log_type_t.error.getter();
        v307[1] = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v147 = v308;
        uint64_t v150 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v149, (os_log_type_t)v148))
        {
          uint64_t v81 = v200;
          uint64_t v137 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v136 = 0;
          uint64_t v138 = createStorage<A>(capacity:type:)(0);
          uint64_t v139 = createStorage<A>(capacity:type:)(v136);
          uint64_t v143 = &v304;
          id v304 = v137;
          uint64_t v144 = &v303;
          uint64_t v303 = v138;
          id v141 = &v302;
          uint64_t v302 = v139;
          unsigned int v140 = 0;
          serialize(_:at:)(0, &v304);
          serialize(_:at:)(v140, v143);
          uint64_t v301 = v150;
          uint64_t v142 = v94;
          MEMORY[0x270FA5388](v94, v82);
          uint64_t v83 = v144;
          uint64_t v84 = &v94[-6];
          uint64_t v145 = &v94[-6];
          void v84[2] = v143;
          v84[3] = v83;
          v84[4] = v85;
          uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v81)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_250C36000, v149, (os_log_type_t)v148, "HeadphoneManager: Invalid BT Address Length", v137, v147);
            uint64_t v134 = 0;
            destroyStorage<A>(_:count:)(v138, 0, v135);
            destroyStorage<A>(_:count:)(v139, v134, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x253386220](v137, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v78 = ((uint64_t (*)(char *, uint64_t))v201)(v275, v271);
      }
      else
      {
        unint64_t v47 = v270;
        Swift::String v177 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X-%02X-%02X-%02X-%02X-%02X", 0x1DuLL, 1);
        uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CVarArg);
        uint64_t v176 = _allocateUninitializedArray<A>(_:)();
        uint64_t v174 = v48;
        uint64_t v180 = 0;
        char v49 = Data.subscript.getter();
        unint64_t v50 = v174;
        uint64_t v172 = MEMORY[0x263F8E778];
        v174[3] = MEMORY[0x263F8E778];
        uint64_t v173 = MEMORY[0x263F8E7C0];
        v50[4] = MEMORY[0x263F8E7C0];
        *(unsigned char *)unint64_t v50 = v49;
        char v51 = Data.subscript.getter();
        uint64_t v52 = v173;
        Swift::String v53 = v174;
        v174[8] = v172;
        v53[9] = v52;
        *((unsigned char *)v53 + 40) = v51;
        char v54 = Data.subscript.getter();
        uint64_t v55 = v173;
        Swift::String v56 = v174;
        v174[13] = v172;
        v56[14] = v55;
        *((unsigned char *)v56 + 80) = v54;
        char v57 = Data.subscript.getter();
        uint64_t v58 = v173;
        uint64_t v59 = v174;
        v174[18] = v172;
        v59[19] = v58;
        *((unsigned char *)v59 + 120) = v57;
        char v60 = Data.subscript.getter();
        uint64_t v61 = v173;
        uint64_t v62 = v174;
        v174[23] = v172;
        v62[24] = v61;
        *((unsigned char *)v62 + 160) = v60;
        char v63 = Data.subscript.getter();
        uint64_t v64 = v173;
        uint64_t v65 = v174;
        v174[28] = v172;
        v65[29] = v64;
        *((unsigned char *)v65 + 200) = v63;
        _finalizeUninitializedArray<A>(_:)();
        uint64_t v178 = String.init(format:_:)();
        uint64_t v179 = v66;
        swift_bridgeObjectRelease();
        uint64_t v299 = v178;
        uint64_t v300 = v179;
        uint64_t v67 = swift_bridgeObjectRetain();
        uint64_t v181 = (*(uint64_t (**)(uint64_t))((*v47 & *MEMORY[0x263F8EED0]) + 0x180))(v67);
        int v182 = v297;
        v297[0] = v178;
        v297[1] = v179;
        uint64_t v68 = type metadata accessor for HeadphoneDevice();
        MEMORY[0x253385E50](&v298, v182, v181, MEMORY[0x263F8D310], v68, MEMORY[0x263F8D320]);
        outlined destroy of String();
        int v183 = v298;
        if (v298)
        {
          uint32_t v171 = v183;
          uint64_t v71 = v270;
          id v166 = v183;
          uint64_t v291 = v183;
          uint64_t v72 = swift_bridgeObjectRelease();
          uint64_t v290 = (void *)(*(uint64_t (**)(uint64_t))((*v71 & *MEMORY[0x263F8EED0]) + 0xC0))(v72);
          if (v290)
          {
            char v164 = &v290;
            id v165 = v290;
            swift_unknownObjectRetain();
            outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
            swift_getObjectType();
            objc_msgSend(v165, sel_removeTopLevelEntryWithHpDevice_, v166);
            swift_unknownObjectRelease();
          }
          else
          {
            outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
          }
        }
        else
        {
          uint64_t v69 = v277;
          swift_bridgeObjectRelease();
          uint64_t v70 = Logger.shared.unsafeMutableAddressor();
          v215(v69, v70, v271);
          char v169 = Logger.logObject.getter();
          int v168 = static os_log_type_t.error.getter();
          v295[1] = (unsigned char *)2;
          UnsignedInteger<>.init<A>(_:)();
          uint32_t v167 = v296;
          uint64_t v170 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v169, (os_log_type_t)v168))
          {
            uint64_t v73 = v200;
            id v154 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v153 = 0;
            uint64_t v155 = createStorage<A>(capacity:type:)(0);
            uint64_t v156 = createStorage<A>(capacity:type:)(v153);
            char v160 = v295;
            v295[0] = v154;
            uint64_t v161 = &v294;
            uint64_t v294 = v155;
            uint32_t v158 = &v293;
            uint64_t v293 = v156;
            unsigned int v157 = 0;
            serialize(_:at:)(0, v295);
            serialize(_:at:)(v157, v160);
            uint64_t v292 = v170;
            int v159 = v94;
            MEMORY[0x270FA5388](v94, v74);
            uint64_t v75 = v161;
            id v76 = &v94[-6];
            uint64_t v162 = &v94[-6];
            v76[2] = v160;
            v76[3] = v75;
            v76[4] = v77;
            uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            if (v73)
            {
              __break(1u);
            }
            else
            {
              _os_log_impl(&dword_250C36000, v169, (os_log_type_t)v168, "HeadphoneManager: Failed to remove the device", v154, v167);
              uint64_t v151 = 0;
              destroyStorage<A>(_:count:)(v155, 0, v152);
              destroyStorage<A>(_:count:)(v156, v151, MEMORY[0x263F8EE58] + 8);
              MEMORY[0x253386220](v154, MEMORY[0x263F8E778]);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }

          v201(v277, v271);
        }
        uint64_t v78 = swift_bridgeObjectRelease();
      }
      v307[0] = (*(uint64_t (**)(uint64_t))((*v270 & *MEMORY[0x263F8EED0]) + 0x168))(v78);
      if (v307[0])
      {
        uint64_t v128 = v307;
        id v129 = (id)v307[0];
        swift_unknownObjectRetain();
        outlined destroy of CBDeviceReporting?();
        swift_getObjectType();
        id v130 = objc_msgSend(v129, sel_deviceLostHandler);
        if (v130)
        {
          id v127 = v130;
          id v124 = v130;
          uint64_t v86 = swift_allocObject();
          uint64_t v87 = v268;
          *(void *)(v86 + 16) = v124;
          uint64_t v125 = v87;
          uint64_t v126 = v86;
        }
        else
        {
          uint64_t v125 = 0;
          uint64_t v126 = 0;
        }
        uint64_t v123 = v126;
        uint64_t v122 = v125;
        swift_unknownObjectRelease();
        uint64_t v132 = v122;
        uint64_t v133 = (void (*)(void))v123;
      }
      else
      {
        uint64_t v131 = 0;
        outlined destroy of CBDeviceReporting?();
        uint64_t v132 = v131;
        uint64_t v133 = (void (*)(void))v131;
      }
      unsigned int v120 = v133;
      unint64_t v121 = v132;
      if (v132)
      {
        uint64_t v118 = v121;
        uint64_t v119 = v120;
        uint64_t v117 = v120;
        uint64_t v116 = v121;
        v305 = v121;
        uint64_t v306 = v120;
        swift_retain();
        v116((uint64_t)v217);
        swift_release();
        swift_release();
      }
      outlined consume of Data._Representation(v185, v184);
    }
  }
  else
  {
    uint64_t v12 = v283;
    uint64_t v13 = Logger.shared.unsafeMutableAddressor();
    ((void (*)(char *, uint64_t, uint64_t))v272[2])(v12, v13, v271);
    id v14 = v254;
    uint64_t v242 = 7;
    uint64_t v243 = swift_allocObject();
    *(void *)(v243 + 16) = v254;
    int v251 = Logger.logObject.getter();
    int v252 = static os_log_type_t.error.getter();
    uint32_t v238 = &v324;
    uint64_t v324 = 12;
    unint64_t v236 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v237 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v239 = v325;
    uint64_t v240 = 17;
    uint64_t v245 = swift_allocObject();
    *(unsigned char *)(v245 + 16) = 64;
    uint64_t v246 = swift_allocObject();
    *(unsigned char *)(v246 + 16) = 8;
    uint64_t v241 = 32;
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v243;
    uint64_t v244 = v15;
    *(void *)(v15 + 16) = v263;
    *(void *)(v15 + 24) = v16;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v244;
    uint64_t v248 = v17;
    *(void *)(v17 + 16) = v264;
    *(void *)(v17 + 24) = v18;
    uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v247 = _allocateUninitializedArray<A>(_:)();
    uint64_t v249 = v19;
    swift_retain();
    uint64_t v20 = v245;
    Swift::String v21 = v249;
    char *v249 = v265;
    v21[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
    swift_retain();
    uint64_t v22 = v246;
    unint64_t v23 = v249;
    v249[2] = v266;
    v23[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
    swift_retain();
    unint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v248;
    Swift::String v25 = v249;
    v249[4] = v267;
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v251, (os_log_type_t)v252))
    {
      uint64_t v93 = v269;
      uint64_t v96 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v97 = createStorage<A>(capacity:type:)(1);
      uint64_t v98 = createStorage<A>(capacity:type:)(0);
      uint64_t v99 = &v323;
      uint64_t v323 = v96;
      uint64_t v100 = &v322;
      uint64_t v322 = v97;
      uint64_t v101 = &v321;
      uint64_t v321 = v98;
      serialize(_:at:)(2, &v323);
      serialize(_:at:)(1, v99);
      uint32_t v319 = v265;
      uint64_t v320 = v245;
      closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)v99, (uint64_t)v100, (uint64_t)v101);
      uint64_t v102 = v93;
      if (v93)
      {
        __break(1u);
      }
      else
      {
        uint32_t v319 = v266;
        uint64_t v320 = v246;
        closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)&v323, (uint64_t)&v322, (uint64_t)&v321);
        v94[1] = 0;
        uint32_t v319 = v267;
        uint64_t v320 = v248;
        closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)&v323, (uint64_t)&v322, (uint64_t)&v321);
        _os_log_impl(&dword_250C36000, v251, (os_log_type_t)v252, "HeadphoneManager: AAF Device: %@ is missing cbDevice early exit lost handler", v96, v239);
        destroyStorage<A>(_:count:)(v97, 1, v95);
        destroyStorage<A>(_:count:)(v98, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v96, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    ((void (*)(char *, uint64_t))v272[1])(v283, v271);
  }
}

void *implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v7 = objc_msgSend(a1, sel_name);
  if (v7)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v1;

    uint64_t v5 = v3;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v6) {
    return v5;
  }
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, 1)._countAndFlagsBits;
  outlined destroy of String?();
  return countAndFlagsBits;
}

void closure #3 in Headphone_Manager.configCBDiscovery()(uint64_t a1)
{
  uint64_t v57 = a1;
  uint64_t v67 = 0;
  char v54 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v55 = partial apply for closure #1 in closure #3 in Headphone_Manager.configCBDiscovery();
  uint64_t v81 = 0;
  uint64_t v56 = 0;
  uint64_t v62 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v62 - 8);
  uint64_t v61 = v62 - 8;
  unint64_t v58 = (*(void *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v2 = (char *)&v21 - v58;
  uint64_t v59 = (char *)&v21 - v58;
  uint64_t v81 = MEMORY[0x270FA5388](v57, v1) + 16;
  uint64_t v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v2, v3, v62);
  uint64_t v69 = Logger.logObject.getter();
  int v68 = static os_log_type_t.error.getter();
  uint64_t v65 = &v79;
  uint64_t v79 = 2;
  unint64_t v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v64 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v66 = v80;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v70 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v69, (os_log_type_t)v68))
  {
    uint64_t v4 = v56;
    unint64_t v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v42 = 0;
    uint64_t v44 = createStorage<A>(capacity:type:)(0);
    uint64_t v45 = createStorage<A>(capacity:type:)(v42);
    char v49 = (id *)v74;
    v74[0] = v43;
    unint64_t v50 = &v73;
    uint64_t v73 = v44;
    unint64_t v47 = &v72;
    uint64_t v72 = v45;
    unsigned int v46 = 0;
    serialize(_:at:)(0, v74);
    serialize(_:at:)(v46, (unsigned char **)v49);
    uint64_t v71 = v70;
    unint64_t v48 = &v21;
    MEMORY[0x270FA5388](&v21, v5);
    uint64_t v6 = v50;
    id v7 = &v21 - 6;
    char v51 = &v21 - 6;
    void v7[2] = v49;
    v7[3] = (id *)v6;
    void v7[4] = v8;
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    uint64_t v53 = v4;
    if (v4)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_250C36000, v69, (os_log_type_t)v68, "HeadphoneManager: AAF interruptionHandler! Retrying to standup discovery stack", v43, v66);
      uint64_t v39 = 0;
      destroyStorage<A>(_:count:)(v44, 0, v41);
      destroyStorage<A>(_:count:)(v45, v39, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v43, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      uint64_t v40 = v53;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = v56;
  }
  uint64_t v37 = v40;

  (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v62);
  uint64_t v38 = v57 + 16;
  swift_beginAccess();
  uint64_t v78 = (void *)MEMORY[0x253386C10](v38);
  if (v78)
  {
    uint64_t v9 = v37;
    uint64_t v32 = (id *)&v78;
    uint64_t v10 = v78;
    id v34 = v78;
    uint64_t v11 = v78;
    outlined destroy of Headphone_Manager?(v32);
    uint64_t v12 = swift_endAccess();
    uint64_t v33 = (*(uint64_t (**)(uint64_t))((*v10 & *MEMORY[0x263F8EED0]) + 0x180))(v12);
    type metadata accessor for HeadphoneDevice();
    uint64_t v35 = (unsigned char *)Dictionary.values.getter();

    v74[1] = v35;
    swift_retain();
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HeadphoneDevice].Values);
    lazy protocol witness table accessor for type [String : HeadphoneDevice].Values and conformance [A : B].Values();
    Sequence.forEach(_:)();
    if (v9)
    {
      __break(1u);
      return;
    }
    swift_release();
    outlined destroy of [String : HeadphoneDevice].Values();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v78);
    swift_endAccess();
  }
  uint64_t v31 = v57 + 16;
  swift_beginAccess();
  uint64_t v77 = (void *)MEMORY[0x253386C10](v31);
  if (v77)
  {
    uint64_t v27 = (id *)&v77;
    uint64_t v13 = v77;
    id v30 = v77;
    id v14 = v77;
    outlined destroy of Headphone_Manager?(v27);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
    uint64_t v28 = 0;
    uint64_t v29 = _allocateUninitializedArray<A>(_:)();
    type metadata accessor for HeadphoneDevice();
    uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v13 & *MEMORY[0x263F8EED0]) + 0x188))(v15);
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v77);
    swift_endAccess();
  }
  uint64_t v26 = v57 + 16;
  swift_beginAccess();
  id v76 = (id)MEMORY[0x253386C10](v26);
  if (v76)
  {
    unint64_t v24 = &v76;
    id v25 = v76;
    id v16 = v76;
    outlined destroy of Headphone_Manager?(v24);
    swift_endAccess();
    type metadata accessor for AADeviceManager();
    id v17 = AADeviceManager.__allocating_init()();
    Headphone_Manager.deviceManger.setter(v17);
  }
  else
  {
    outlined destroy of Headphone_Manager?(&v76);
    swift_endAccess();
  }
  uint64_t v23 = v57 + 16;
  swift_beginAccess();
  uint64_t v75 = (void *)MEMORY[0x253386C10](v23);
  if (v75)
  {
    Swift::String v21 = (id *)&v75;
    uint64_t v18 = v75;
    id v22 = v75;
    uint64_t v19 = v75;
    outlined destroy of Headphone_Manager?(v21);
    uint64_t v20 = swift_endAccess();
    (*(void (**)(uint64_t))((*v18 & *MEMORY[0x263F8EED0]) + 0x1B0))(v20);
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v75);
    swift_endAccess();
  }
}

void closure #1 in closure #3 in Headphone_Manager.configCBDiscovery()(void **a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  id v17 = 0;
  uint64_t v19 = *a1;
  uint64_t v18 = a2 + 16;
  uint64_t v13 = (*(uint64_t (**)(void))((*v19 & *MEMORY[0x263F8EED0]) + 0xA20))();
  id v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 1032))(v13);
  if (v14)
  {
    id v17 = v14;
    swift_release();
    swift_beginAccess();
    id v16 = (void *)MEMORY[0x253386C10](a2 + 16);
    if (v16)
    {
      id v2 = v16;
      id v9 = v16;
      uint64_t v3 = v16;
      outlined destroy of Headphone_Manager?((id *)&v16);
      uint64_t v4 = swift_endAccess();
      id v10 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x120))(v4);

      id v11 = objc_msgSend(v10, sel_deviceLostHandler);
      if (v11)
      {
        uint64_t v5 = swift_allocObject();
        *(void *)(v5 + 16) = v11;
        id v7 = thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply;
        uint64_t v8 = v5;
      }
      else
      {
        id v7 = 0;
        uint64_t v8 = 0;
      }
      v15[0] = v7;
      v15[1] = v8;
      if (v7)
      {
        uint64_t v6 = (void (*)(void *))v15[0];
        swift_retain();
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);

        v6(v14);
        swift_release();
      }
      else
      {
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);
      }
    }
    else
    {
      outlined destroy of Headphone_Manager?((id *)&v16);
      swift_endAccess();
    }
  }
  else
  {
    swift_release();
  }
}

void closure #4 in Headphone_Manager.configCBDiscovery()(uint64_t a1)
{
  uint64_t v44 = a1;
  uint64_t v54 = 0;
  uint64_t v41 = closure #1 in osLogInternal(_:log:type:)partial apply;
  uint64_t v42 = partial apply for closure #1 in closure #4 in Headphone_Manager.configCBDiscovery();
  uint64_t v66 = 0;
  uint64_t v43 = 0;
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v47 = *(void *)(v49 - 8);
  uint64_t v48 = v49 - 8;
  unint64_t v45 = (*(void *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v2 = (char *)v16 - v45;
  unsigned int v46 = (char *)v16 - v45;
  uint64_t v66 = MEMORY[0x270FA5388](v44, v1) + 16;
  uint64_t v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v2, v3, v49);
  uint64_t v56 = Logger.logObject.getter();
  int v55 = static os_log_type_t.error.getter();
  uint64_t v52 = &v64;
  uint64_t v64 = 2;
  unint64_t v50 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v53 = v65;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v57 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v56, (os_log_type_t)v55))
  {
    uint64_t v4 = v43;
    id v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v29 = 0;
    uint64_t v31 = createStorage<A>(capacity:type:)(0);
    uint64_t v32 = createStorage<A>(capacity:type:)(v29);
    uint64_t v36 = (id *)v61;
    v61[0] = v30;
    uint64_t v37 = &v60;
    uint64_t v60 = v31;
    id v34 = &v59;
    uint64_t v59 = v32;
    unsigned int v33 = 0;
    serialize(_:at:)(0, v61);
    serialize(_:at:)(v33, (unsigned char **)v36);
    uint64_t v58 = v57;
    uint64_t v35 = v16;
    MEMORY[0x270FA5388](v16, v5);
    uint64_t v6 = v37;
    id v7 = &v16[-6];
    uint64_t v38 = &v16[-6];
    void v7[2] = v36;
    v7[3] = (id *)v6;
    void v7[4] = v8;
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    uint64_t v40 = v4;
    if (v4)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_250C36000, v56, (os_log_type_t)v55, "HeadphoneManager: AAF invalidationHandler! Retrying to standup discovery stack", v30, v53);
      uint64_t v26 = 0;
      destroyStorage<A>(_:count:)(v31, 0, v28);
      destroyStorage<A>(_:count:)(v32, v26, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v30, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      uint64_t v27 = v40;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v43;
  }
  uint64_t v24 = v27;

  (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v49);
  uint64_t v25 = v44 + 16;
  swift_beginAccess();
  unint64_t v63 = (void *)MEMORY[0x253386C10](v25);
  if (v63)
  {
    uint64_t v9 = v24;
    uint64_t v19 = (id *)&v63;
    id v10 = v63;
    id v21 = v63;
    id v11 = v63;
    outlined destroy of Headphone_Manager?(v19);
    uint64_t v12 = swift_endAccess();
    uint64_t v20 = (*(uint64_t (**)(uint64_t))((*v10 & *MEMORY[0x263F8EED0]) + 0x180))(v12);
    type metadata accessor for HeadphoneDevice();
    id v22 = (unsigned char *)Dictionary.values.getter();

    v61[1] = v22;
    swift_retain();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HeadphoneDevice].Values);
    lazy protocol witness table accessor for type [String : HeadphoneDevice].Values and conformance [A : B].Values();
    Sequence.forEach(_:)();
    if (v9)
    {
      __break(1u);
      return;
    }
    swift_release();
    outlined destroy of [String : HeadphoneDevice].Values();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v63);
    swift_endAccess();
  }
  uint64_t v18 = v44 + 16;
  swift_beginAccess();
  uint64_t v62 = (void *)MEMORY[0x253386C10](v18);
  if (v62)
  {
    v16[0] = (id *)&v62;
    uint64_t v13 = v62;
    id v17 = v62;
    id v14 = v62;
    outlined destroy of Headphone_Manager?(v16[0]);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
    v16[1] = 0;
    v16[2] = (id *)_allocateUninitializedArray<A>(_:)();
    type metadata accessor for HeadphoneDevice();
    uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v13 & *MEMORY[0x263F8EED0]) + 0x188))(v15);
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v62);
    swift_endAccess();
  }
}

void closure #1 in closure #4 in Headphone_Manager.configCBDiscovery()(void **a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  id v17 = 0;
  uint64_t v19 = *a1;
  uint64_t v18 = a2 + 16;
  uint64_t v13 = (*(uint64_t (**)(void))((*v19 & *MEMORY[0x263F8EED0]) + 0xA20))();
  id v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 1032))(v13);
  if (v14)
  {
    id v17 = v14;
    swift_release();
    swift_beginAccess();
    id v16 = (void *)MEMORY[0x253386C10](a2 + 16);
    if (v16)
    {
      id v2 = v16;
      id v9 = v16;
      uint64_t v3 = v16;
      outlined destroy of Headphone_Manager?((id *)&v16);
      uint64_t v4 = swift_endAccess();
      id v10 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x263F8EED0]) + 0x120))(v4);

      id v11 = objc_msgSend(v10, sel_deviceLostHandler);
      if (v11)
      {
        uint64_t v5 = swift_allocObject();
        *(void *)(v5 + 16) = v11;
        id v7 = thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply;
        uint64_t v8 = v5;
      }
      else
      {
        id v7 = 0;
        uint64_t v8 = 0;
      }
      v15[0] = v7;
      v15[1] = v8;
      if (v7)
      {
        uint64_t v6 = (void (*)(void *))v15[0];
        swift_retain();
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);

        v6(v14);
        swift_release();
      }
      else
      {
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);
      }
    }
    else
    {
      outlined destroy of Headphone_Manager?((id *)&v16);
      swift_endAccess();
    }
  }
  else
  {
    swift_release();
  }
}

void *implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t Headphone_Manager.isAppleHeadphone(cbDevice:)(void *a1)
{
  BOOL v5 = CBProductIDIsAppleHeadphone(objc_msgSend(a1, sel_productID));
  id v1 = a1;
  if (v5)
  {
    objc_msgSend(a1, sel_vendorID);
    type metadata accessor for CBVendorID();
    lazy protocol witness table accessor for type CBVendorID and conformance CBVendorID();
    char v3 = == infix<A>(_:_:)();
  }
  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

void Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(char *a1, void *a2)
{
  uint64_t v107 = a1;
  id v118 = a2;
  uint64_t v125 = partial apply for implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
  id v129 = _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_2;
  uint64_t v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5;
  uint64_t v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_2;
  uint64_t v99 = partial apply for closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
  uint64_t v100 = partial apply for implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
  uint64_t v101 = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_5;
  uint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5;
  uint64_t v167 = 0;
  uint64_t v166 = 0;
  uint64_t v165 = 0;
  uint64_t v105 = 0;
  uint64_t v115 = type metadata accessor for Logger();
  uint64_t v113 = *(void **)(v115 - 8);
  uint64_t v114 = v115 - 8;
  uint64_t v109 = v113[8];
  unint64_t v108 = (v109 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v107, v118);
  uint64_t v110 = (char *)&v51 - v108;
  unint64_t v111 = v108;
  uint64_t v4 = MEMORY[0x270FA5388](v2, v3);
  BOOL v5 = (char *)&v51 - v111;
  uint64_t v112 = (char *)&v51 - v111;
  uint64_t v167 = v4;
  uint64_t v166 = v6;
  uint64_t v165 = v7;
  uint64_t v8 = Logger.shared.unsafeMutableAddressor();
  uint64_t v116 = (void (*)(char *, uint64_t, uint64_t))v113[2];
  uint64_t v117 = v113 + 2;
  v116(v5, v8, v115);
  id v9 = v118;
  uint64_t v127 = 7;
  uint64_t v128 = swift_allocObject();
  *(void *)(v128 + 16) = v118;
  unsigned int v140 = Logger.logObject.getter();
  int v141 = static os_log_type_t.default.getter();
  unint64_t v121 = &v163;
  uint64_t v163 = 12;
  unint64_t v119 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v120 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v122 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v123 = v164;
  uint64_t v124 = 17;
  uint64_t v132 = swift_allocObject();
  *(unsigned char *)(v132 + 16) = 64;
  uint64_t v134 = swift_allocObject();
  *(unsigned char *)(v134 + 16) = 8;
  uint64_t v126 = 32;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v128;
  uint64_t v130 = v10;
  *(void *)(v10 + 16) = v125;
  *(void *)(v10 + 24) = v11;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v130;
  uint64_t v137 = v12;
  *(void *)(v12 + 16) = v129;
  *(void *)(v12 + 24) = v13;
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v135 = _allocateUninitializedArray<A>(_:)();
  uint64_t v138 = v14;
  swift_retain();
  uint64_t v15 = v132;
  id v16 = v138;
  *uint64_t v138 = v131;
  v16[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
  swift_retain();
  uint64_t v17 = v134;
  uint64_t v18 = v138;
  void v138[2] = v133;
  v18[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  swift_retain();
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v137;
  uint64_t v20 = v138;
  v138[4] = v136;
  v20[5] = v19;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v140, (os_log_type_t)v141))
  {
    uint64_t v21 = v105;
    uint64_t v92 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v93 = createStorage<A>(capacity:type:)(1);
    uint64_t v94 = createStorage<A>(capacity:type:)(0);
    uint64_t v95 = &v146;
    uint64_t v146 = v92;
    uint64_t v96 = &v145;
    uint64_t v145 = v93;
    uint64_t v97 = &v144;
    uint64_t v144 = v94;
    serialize(_:at:)(2, &v146);
    serialize(_:at:)(1, v95);
    uint64_t v142 = v131;
    uint64_t v143 = v132;
    closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)v95, (uint64_t)v96, (uint64_t)v97);
    uint64_t v98 = v21;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      uint64_t v142 = v133;
      uint64_t v143 = v134;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
      uint64_t v89 = 0;
      uint64_t v23 = v89;
      uint64_t v142 = v136;
      uint64_t v143 = v137;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144);
      uint64_t v88 = v23;
      _os_log_impl(&dword_250C36000, v140, (os_log_type_t)v141, "HeadphoneManager: Update Device Config: %@", v92, v123);
      destroyStorage<A>(_:count:)(v93, 1, v91);
      destroyStorage<A>(_:count:)(v94, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x253386220](v92, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v90 = v88;
    }
  }
  else
  {
    uint64_t v22 = v105;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v90 = v22;
  }
  uint64_t v24 = (uint64_t *)v107;
  uint64_t v80 = v90;

  uint64_t v81 = (void (*)(char *, uint64_t))v113[1];
  uint64_t v82 = v113 + 1;
  v81(v112, v115);
  uint64_t v25 = *v24;
  uint64_t v83 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(uint64_t))((v25 & *MEMORY[0x263F8EED0]) + 0x260))(1);
  uint64_t v26 = v106;
  uint64_t v84 = *(void *)&v107[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
  uint64_t v85 = *(void *)&v107[OBJC_IVAR___HPMHeadphoneDevice_btAddress + 8];
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v86 = (*(uint64_t (**)(uint64_t))((*v26 & *v83) + 0x180))(v27);
  uint64_t v87 = v161;
  v161[0] = v84;
  v161[1] = v85;
  uint64_t v28 = type metadata accessor for HeadphoneDevice();
  MEMORY[0x253385E50](&v162, v87, v86, MEMORY[0x263F8D310], v28, MEMORY[0x263F8D320]);
  outlined destroy of String();
  id v160 = v162;
  BOOL v79 = v162 == 0;
  BOOL v78 = v79;
  outlined destroy of HeadphoneDevice?(&v160);
  uint64_t v29 = swift_bridgeObjectRelease();
  if (v78)
  {
    id v30 = v110;
    uint64_t v31 = Logger.shared.unsafeMutableAddressor();
    v116(v30, v31, v115);
    uint64_t v32 = v107;
    uint64_t v68 = 7;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = v107;
    id v76 = Logger.logObject.getter();
    int v77 = static os_log_type_t.error.getter();
    v151[1] = (unsigned char *)12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v65 = v152;
    uint64_t v66 = 17;
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = 32;
    uint64_t v72 = swift_allocObject();
    *(unsigned char *)(v72 + 16) = 8;
    uint64_t v67 = 32;
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v69;
    uint64_t v70 = v33;
    *(void *)(v33 + 16) = v100;
    *(void *)(v33 + 24) = v34;
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v70;
    uint64_t v74 = v35;
    *(void *)(v35 + 16) = v101;
    *(void *)(v35 + 24) = v36;
    uint64_t v73 = _allocateUninitializedArray<A>(_:)();
    uint64_t v75 = v37;
    swift_retain();
    uint64_t v38 = v71;
    uint64_t v39 = v75;
    *uint64_t v75 = v102;
    v39[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    swift_retain();
    uint64_t v40 = v72;
    uint64_t v41 = v75;
    v75[2] = v103;
    v41[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v40;
    swift_retain();
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v74;
    uint64_t v43 = v75;
    v75[4] = v104;
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v76, (os_log_type_t)v77))
    {
      uint64_t v44 = v80;
      uint64_t v58 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v59 = createStorage<A>(capacity:type:)(0);
      uint64_t v60 = createStorage<A>(capacity:type:)(1);
      uint64_t v61 = v151;
      v151[0] = v58;
      uint64_t v62 = &v150;
      uint64_t v150 = v59;
      unint64_t v63 = &v149;
      uint64_t v149 = v60;
      serialize(_:at:)(2, v151);
      serialize(_:at:)(1, v61);
      uint32_t v147 = v102;
      uint64_t v148 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)v61, (uint64_t)v62, (uint64_t)v63);
      uint64_t v64 = v44;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        uint32_t v147 = v103;
        uint64_t v148 = v72;
        closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)v151, (uint64_t)&v150, (uint64_t)&v149);
        uint64_t v56 = 0;
        uint32_t v147 = v104;
        uint64_t v148 = v74;
        closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)v151, (uint64_t)&v150, (uint64_t)&v149);
        _os_log_impl(&dword_250C36000, v76, (os_log_type_t)v77, "HeadphoneManager: Update Device Config, Device Not Connected with UUID: %s", v58, v65);
        destroyStorage<A>(_:count:)(v59, 0, v57);
        destroyStorage<A>(_:count:)(v60, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v58, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v81(v110, v115);
  }
  else
  {
    uint64_t v45 = *v106;
    uint64_t v52 = (void *)MEMORY[0x263F8EED0];
    id v55 = (id)(*(uint64_t (**)(uint64_t))((v45 & *MEMORY[0x263F8EED0]) + 0xF0))(v29);
    id v54 = (id)(*(uint64_t (**)(void))((*(void *)v107 & *v52) + 0x210))();
    id v46 = v118;
    uint64_t v47 = v107;
    uint64_t v48 = swift_allocObject();
    uint64_t v49 = v107;
    unint64_t v50 = v99;
    *(void *)(v48 + 16) = v118;
    *(void *)(v48 + 24) = v49;
    uint32_t v158 = v50;
    uint64_t v159 = v48;
    uint64_t aBlock = MEMORY[0x263EF8330];
    int v154 = 1107296256;
    int v155 = 0;
    uint64_t v156 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    unsigned int v157 = &block_descriptor_51;
    uint32_t v53 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v55, sel_modifyDevice_settings_completion_, v54, v118, v53);
    _Block_release(v53);
  }
}

void *implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR___HPMHeadphoneDevice_btAddress);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1, void *a2, void *a3)
{
  uint64_t v115 = a1;
  id v107 = a2;
  uint64_t v106 = a3;
  uint64_t v95 = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
  uint64_t v96 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v100 = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
  uint64_t v101 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
  uint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v133 = 0;
  uint64_t v132 = 0;
  uint64_t v131 = 0;
  uint64_t v105 = 0;
  uint32_t v123 = 0;
  uint64_t v108 = type metadata accessor for Logger();
  uint64_t v109 = *(void *)(v108 - 8);
  uint64_t v110 = v108 - 8;
  unint64_t v111 = (*(void *)(v109 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v115, v107);
  uint64_t v112 = (char *)&v41 - v111;
  unint64_t v113 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = (void *)MEMORY[0x270FA5388](v3, v5);
  uint64_t v114 = (char *)&v41 - v113;
  uint64_t v133 = v6;
  uint64_t v132 = v7;
  uint64_t v131 = v8;
  id v9 = v6;
  if (v115)
  {
    uint64_t v94 = v115;
    uint64_t v24 = v112;
    id v59 = v115;
    uint32_t v123 = v115;
    uint64_t v25 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v24, v25, v108);
    id v26 = v59;
    uint64_t v66 = 7;
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = v59;
    uint64_t v75 = Logger.logObject.getter();
    int v76 = static os_log_type_t.error.getter();
    uint64_t v62 = &v121;
    uint64_t v121 = 12;
    unint64_t v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v61 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v63 = v122;
    uint64_t v64 = 17;
    uint64_t v69 = swift_allocObject();
    *(unsigned char *)(v69 + 16) = 32;
    uint64_t v70 = swift_allocObject();
    *(unsigned char *)(v70 + 16) = 8;
    uint64_t v65 = 32;
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v67;
    uint64_t v68 = v27;
    *(void *)(v27 + 16) = v95;
    *(void *)(v27 + 24) = v28;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v68;
    uint64_t v72 = v29;
    *(void *)(v29 + 16) = v96;
    *(void *)(v29 + 24) = v30;
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v71 = _allocateUninitializedArray<A>(_:)();
    uint64_t v73 = v31;
    swift_retain();
    uint64_t v32 = v69;
    uint64_t v33 = v73;
    *uint64_t v73 = v97;
    v33[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v32;
    swift_retain();
    uint64_t v34 = v70;
    uint64_t v35 = v73;
    v73[2] = v98;
    v35[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v72;
    uint64_t v37 = v73;
    v73[4] = v99;
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v75, (os_log_type_t)v76))
    {
      uint64_t v38 = v105;
      uint64_t v52 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v53 = createStorage<A>(capacity:type:)(0);
      uint64_t v54 = createStorage<A>(capacity:type:)(1);
      id v55 = &v120;
      unint64_t v120 = v52;
      uint64_t v56 = &v119;
      uint64_t v119 = v53;
      uint64_t v57 = &v118;
      uint64_t v118 = v54;
      serialize(_:at:)(2, &v120);
      serialize(_:at:)(1, v55);
      uint64_t v116 = v97;
      uint64_t v117 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v116, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57);
      uint64_t v58 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        uint64_t v116 = v98;
        uint64_t v117 = v70;
        closure #1 in osLogInternal(_:log:type:)(&v116, (uint64_t)&v120, (uint64_t)&v119, (uint64_t)&v118);
        uint64_t v50 = 0;
        uint64_t v116 = v99;
        uint64_t v117 = v72;
        closure #1 in osLogInternal(_:log:type:)(&v116, (uint64_t)&v120, (uint64_t)&v119, (uint64_t)&v118);
        _os_log_impl(&dword_250C36000, v75, (os_log_type_t)v76, "HeadphoneManager: Update Device Config Failed, Error: %s", v52, v63);
        destroyStorage<A>(_:count:)(v53, 0, v51);
        destroyStorage<A>(_:count:)(v54, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v52, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v109 + 8))(v112, v108);
  }
  else
  {
    uint64_t v10 = v114;
    uint64_t v11 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v10, v11, v108);
    id v12 = v107;
    uint64_t v83 = 7;
    uint64_t v84 = swift_allocObject();
    *(void *)(v84 + 16) = v107;
    uint64_t v92 = Logger.logObject.getter();
    int v93 = static os_log_type_t.default.getter();
    BOOL v79 = &v129;
    uint64_t v129 = 12;
    unint64_t v77 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v78 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v80 = v130;
    uint64_t v81 = 17;
    uint64_t v86 = swift_allocObject();
    *(unsigned char *)(v86 + 16) = 64;
    uint64_t v87 = swift_allocObject();
    *(unsigned char *)(v87 + 16) = 8;
    uint64_t v82 = 32;
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v84;
    uint64_t v85 = v13;
    *(void *)(v13 + 16) = v100;
    *(void *)(v13 + 24) = v14;
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v85;
    uint64_t v89 = v15;
    *(void *)(v15 + 16) = v101;
    *(void *)(v15 + 24) = v16;
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v88 = _allocateUninitializedArray<A>(_:)();
    uint64_t v90 = v17;
    swift_retain();
    uint64_t v18 = v86;
    uint64_t v19 = v90;
    *uint64_t v90 = v102;
    v19[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
    swift_retain();
    uint64_t v20 = v87;
    uint64_t v21 = v90;
    v90[2] = v103;
    v21[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
    swift_retain();
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v89;
    uint64_t v23 = v90;
    v90[4] = v104;
    v23[5] = v22;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v92, (os_log_type_t)v93))
    {
      uint64_t v39 = v105;
      uint64_t v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v44 = createStorage<A>(capacity:type:)(1);
      uint64_t v45 = createStorage<A>(capacity:type:)(0);
      id v46 = &v128;
      uint64_t v128 = v43;
      uint64_t v47 = &v127;
      uint64_t v127 = v44;
      uint64_t v48 = &v126;
      uint64_t v126 = v45;
      serialize(_:at:)(2, &v128);
      serialize(_:at:)(1, v46);
      uint64_t v124 = v102;
      uint64_t v125 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)v46, (uint64_t)v47, (uint64_t)v48);
      uint64_t v49 = v39;
      if (v39)
      {
        __break(1u);
      }
      else
      {
        uint64_t v124 = v103;
        uint64_t v125 = v87;
        closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)&v128, (uint64_t)&v127, (uint64_t)&v126);
        uint64_t v41 = 0;
        uint64_t v124 = v104;
        uint64_t v125 = v89;
        closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)&v128, (uint64_t)&v127, (uint64_t)&v126);
        _os_log_impl(&dword_250C36000, v92, (os_log_type_t)v93, "HeadphoneManager: Successfully Updated Device Config: %@", v43, v80);
        destroyStorage<A>(_:count:)(v44, 1, v42);
        destroyStorage<A>(_:count:)(v45, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v43, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v109 + 8))(v114, v108);
  }
  return (*(uint64_t (**)(void))((*v106 & *MEMORY[0x263F8EED0]) + 0x260))(0);
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

void *implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  id v1 = a1;
  return a1;
}

void Headphone_Manager.disconnect(hpDevice:)(void *a1)
{
  uint64_t v21 = a1;
  uint64_t v20 = v1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  id v5 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0x108))();
  id v6 = (id)(*(uint64_t (**)(void))((*a1 & *v8) + 0x210))();
  objc_msgSend(v5, sel_setPeerDevice_);

  id v7 = (id)(*(uint64_t (**)(void))((*v9 & *v8) + 0x108))();
  objc_msgSend(v7, sel_setServiceFlags_, 0xFFFFFFFFLL);

  id v12 = (id)(*(uint64_t (**)(void))((*v9 & *v8) + 0x108))();
  uint64_t v2 = a1;
  uint64_t v3 = v9;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v9;
  uint64_t v18 = partial apply for closure #1 in Headphone_Manager.disconnect(hpDevice:);
  uint64_t v19 = v4;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v14 = 1107296256;
  int v15 = 0;
  uint64_t v16 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  uint64_t v17 = &block_descriptor_74;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v12, sel_disconnectWithCompletion_, v11);
  _Block_release(v11);
}

void closure #1 in Headphone_Manager.disconnect(hpDevice:)(void *a1, void *a2, void *a3)
{
  uint64_t v118 = a1;
  id v110 = a2;
  uint64_t v109 = a3;
  uint64_t v98 = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:);
  uint64_t v99 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v100 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v103 = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:);
  uint64_t v104 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  id v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v136 = 0;
  uint64_t v135 = 0;
  uint64_t v134 = 0;
  uint64_t v108 = 0;
  uint64_t v126 = 0;
  uint64_t v111 = type metadata accessor for Logger();
  uint64_t v112 = *(void *)(v111 - 8);
  uint64_t v113 = v111 - 8;
  unint64_t v114 = (*(void *)(v112 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v118, v110);
  uint64_t v115 = (char *)&v42 - v114;
  unint64_t v116 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v6 = (void *)MEMORY[0x270FA5388](v3, v5);
  uint64_t v117 = (char *)&v42 - v116;
  uint64_t v136 = v6;
  uint64_t v135 = v7;
  uint64_t v134 = v8;
  id v9 = v6;
  if (v118)
  {
    uint64_t v97 = v118;
    uint64_t v24 = v115;
    id v62 = v118;
    uint64_t v126 = v118;
    uint64_t v25 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v24, v25, v111);
    id v26 = v62;
    uint64_t v69 = 7;
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = v62;
    unint64_t v78 = Logger.logObject.getter();
    int v79 = static os_log_type_t.error.getter();
    uint64_t v65 = &v124;
    uint64_t v124 = 12;
    unint64_t v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v64 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v66 = v125;
    uint64_t v67 = 17;
    uint64_t v72 = swift_allocObject();
    *(unsigned char *)(v72 + 16) = 32;
    uint64_t v73 = swift_allocObject();
    *(unsigned char *)(v73 + 16) = 8;
    uint64_t v68 = 32;
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v70;
    uint64_t v71 = v27;
    *(void *)(v27 + 16) = v98;
    *(void *)(v27 + 24) = v28;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v71;
    uint64_t v75 = v29;
    *(void *)(v29 + 16) = v99;
    *(void *)(v29 + 24) = v30;
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v74 = _allocateUninitializedArray<A>(_:)();
    int v76 = v31;
    swift_retain();
    uint64_t v32 = v72;
    uint64_t v33 = v76;
    *int v76 = v100;
    v33[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v32;
    swift_retain();
    uint64_t v34 = v73;
    uint64_t v35 = v76;
    v76[2] = v101;
    v35[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
    uint64_t v37 = v76;
    v76[4] = v102;
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v78, (os_log_type_t)v79))
    {
      uint64_t v38 = v108;
      id v55 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v56 = createStorage<A>(capacity:type:)(0);
      uint64_t v57 = createStorage<A>(capacity:type:)(1);
      uint64_t v58 = &v123;
      uint32_t v123 = v55;
      id v59 = &v122;
      uint64_t v122 = v56;
      unint64_t v60 = &v121;
      uint64_t v121 = v57;
      serialize(_:at:)(2, &v123);
      serialize(_:at:)(1, v58);
      uint64_t v119 = v100;
      uint64_t v120 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)v58, (uint64_t)v59, (uint64_t)v60);
      uint64_t v61 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        uint64_t v119 = v101;
        uint64_t v120 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)&v123, (uint64_t)&v122, (uint64_t)&v121);
        uint64_t v53 = 0;
        uint64_t v119 = v102;
        uint64_t v120 = v75;
        closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)&v123, (uint64_t)&v122, (uint64_t)&v121);
        _os_log_impl(&dword_250C36000, v78, (os_log_type_t)v79, "HeadphoneManager: Disconnect Failed, Error: %s", v55, v66);
        destroyStorage<A>(_:count:)(v56, 0, v54);
        destroyStorage<A>(_:count:)(v57, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v55, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v112 + 8))(v115, v111);
  }
  else
  {
    uint64_t v10 = v117;
    uint64_t v11 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v10, v11, v111);
    id v12 = v110;
    uint64_t v86 = 7;
    uint64_t v87 = swift_allocObject();
    *(void *)(v87 + 16) = v110;
    uint64_t v95 = Logger.logObject.getter();
    int v96 = static os_log_type_t.default.getter();
    uint64_t v82 = &v132;
    uint64_t v132 = 12;
    unint64_t v80 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v81 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v83 = v133;
    uint64_t v84 = 17;
    uint64_t v89 = swift_allocObject();
    *(unsigned char *)(v89 + 16) = 32;
    uint64_t v90 = swift_allocObject();
    *(unsigned char *)(v90 + 16) = 8;
    uint64_t v85 = 32;
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v87;
    uint64_t v88 = v13;
    *(void *)(v13 + 16) = v103;
    *(void *)(v13 + 24) = v14;
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v88;
    uint64_t v92 = v15;
    *(void *)(v15 + 16) = v104;
    *(void *)(v15 + 24) = v16;
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v91 = _allocateUninitializedArray<A>(_:)();
    int v93 = v17;
    swift_retain();
    uint64_t v18 = v89;
    uint64_t v19 = v93;
    *int v93 = v105;
    v19[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
    swift_retain();
    uint64_t v20 = v90;
    uint64_t v21 = v93;
    v93[2] = v106;
    v21[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v20;
    swift_retain();
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
    uint64_t v23 = v93;
    v93[4] = v107;
    v23[5] = v22;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v95, (os_log_type_t)v96))
    {
      uint64_t v39 = v108;
      id v46 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v47 = createStorage<A>(capacity:type:)(0);
      uint64_t v48 = createStorage<A>(capacity:type:)(1);
      uint64_t v49 = &v131;
      uint64_t v131 = v46;
      uint64_t v50 = &v130;
      uint64_t v130 = v47;
      uint64_t v51 = &v129;
      uint64_t v129 = v48;
      serialize(_:at:)(2, &v131);
      serialize(_:at:)(1, v49);
      uint64_t v127 = v105;
      uint64_t v128 = v89;
      closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)v49, (uint64_t)v50, (uint64_t)v51);
      uint64_t v52 = v39;
      if (v39)
      {
        __break(1u);
      }
      else
      {
        uint64_t v127 = v106;
        uint64_t v128 = v90;
        closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v131, (uint64_t)&v130, (uint64_t)&v129);
        uint64_t v44 = 0;
        uint64_t v127 = v107;
        uint64_t v128 = v92;
        closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v131, (uint64_t)&v130, (uint64_t)&v129);
        _os_log_impl(&dword_250C36000, v95, (os_log_type_t)v96, "HeadphoneManager: Disconnected from %s", v46, v83);
        destroyStorage<A>(_:count:)(v47, 0, v45);
        destroyStorage<A>(_:count:)(v48, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v46, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v40 = v109;

    uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v117, v111);
    id v43 = (id)(*(uint64_t (**)(uint64_t))((*v40 & *MEMORY[0x263F8EED0]) + 0x108))(v41);
    objc_msgSend(v43, sel_invalidate);
  }
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(void *a1)
{
  return String.init<A>(describing:)();
}

void Headphone_Manager.unpair(hpDevice:)(void *a1)
{
  uint64_t v17 = a1;
  uint64_t v16 = v1;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  id v8 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0xF0))();
  id v7 = (id)(*(uint64_t (**)(void))((*a1 & *v4) + 0x210))();
  uint64_t v2 = a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v14 = partial apply for closure #1 in Headphone_Manager.unpair(hpDevice:);
  uint64_t v15 = v3;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v10 = 1107296256;
  int v11 = 0;
  id v12 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  uint64_t v13 = &block_descriptor_80;
  id v6 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v8, sel_deleteDevice_completion_, v7, v6);
  _Block_release(v6);
}

void closure #1 in Headphone_Manager.unpair(hpDevice:)(void *a1, void *a2)
{
  uint64_t v111 = a1;
  id v103 = a2;
  uint64_t v92 = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:);
  int v93 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  int v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v97 = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:);
  uint64_t v98 = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v100 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v128 = 0;
  uint64_t v127 = 0;
  uint64_t v102 = 0;
  uint64_t v119 = 0;
  uint64_t v104 = type metadata accessor for Logger();
  uint64_t v105 = *(void *)(v104 - 8);
  uint64_t v106 = v104 - 8;
  unint64_t v107 = (*(void *)(v105 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v111, v103);
  uint64_t v108 = (char *)&v38 - v107;
  unint64_t v109 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (void *)MEMORY[0x270FA5388](v2, v4);
  id v110 = (char *)&v38 - v109;
  uint64_t v128 = v5;
  uint64_t v127 = v6;
  id v7 = v5;
  if (v111)
  {
    uint64_t v91 = v111;
    uint64_t v22 = v108;
    id v56 = v111;
    uint64_t v119 = v111;
    uint64_t v23 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v22, v23, v104);
    id v24 = v56;
    uint64_t v63 = 7;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = v56;
    uint64_t v72 = Logger.logObject.getter();
    int v73 = static os_log_type_t.error.getter();
    id v59 = &v117;
    uint64_t v117 = 12;
    unint64_t v57 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v60 = v118;
    uint64_t v61 = 17;
    uint64_t v66 = swift_allocObject();
    *(unsigned char *)(v66 + 16) = 32;
    uint64_t v67 = swift_allocObject();
    *(unsigned char *)(v67 + 16) = 8;
    uint64_t v62 = 32;
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v64;
    uint64_t v65 = v25;
    *(void *)(v25 + 16) = v92;
    *(void *)(v25 + 24) = v26;
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v65;
    uint64_t v69 = v27;
    *(void *)(v27 + 16) = v93;
    *(void *)(v27 + 24) = v28;
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v68 = _allocateUninitializedArray<A>(_:)();
    uint64_t v70 = v29;
    swift_retain();
    uint64_t v30 = v66;
    uint64_t v31 = v70;
    *uint64_t v70 = v94;
    v31[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v30;
    swift_retain();
    uint64_t v32 = v67;
    uint64_t v33 = v70;
    v70[2] = v95;
    void v33[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v32;
    swift_retain();
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v69;
    uint64_t v35 = v70;
    v70[4] = v96;
    v35[5] = v34;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v72, (os_log_type_t)v73))
    {
      uint64_t v36 = v102;
      uint64_t v49 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v50 = createStorage<A>(capacity:type:)(0);
      uint64_t v51 = createStorage<A>(capacity:type:)(1);
      uint64_t v52 = &v116;
      unint64_t v116 = v49;
      uint64_t v53 = &v115;
      uint64_t v115 = v50;
      uint64_t v54 = &v114;
      uint64_t v114 = v51;
      serialize(_:at:)(2, &v116);
      serialize(_:at:)(1, v52);
      uint64_t v112 = v94;
      uint64_t v113 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54);
      uint64_t v55 = v36;
      if (v36)
      {
        __break(1u);
      }
      else
      {
        uint64_t v112 = v95;
        uint64_t v113 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v116, (uint64_t)&v115, (uint64_t)&v114);
        uint64_t v47 = 0;
        uint64_t v112 = v96;
        uint64_t v113 = v69;
        closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v116, (uint64_t)&v115, (uint64_t)&v114);
        _os_log_impl(&dword_250C36000, v72, (os_log_type_t)v73, "HeadphoneManager: Forget this device Failed, Error: %s", v49, v60);
        destroyStorage<A>(_:count:)(v50, 0, v48);
        destroyStorage<A>(_:count:)(v51, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v49, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v108, v104);
  }
  else
  {
    id v8 = v110;
    uint64_t v9 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v8, v9, v104);
    id v10 = v103;
    uint64_t v80 = 7;
    uint64_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = v103;
    uint64_t v89 = Logger.logObject.getter();
    int v90 = static os_log_type_t.default.getter();
    int v76 = &v125;
    uint64_t v125 = 12;
    unint64_t v74 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v75 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v77 = v126;
    uint64_t v78 = 17;
    uint64_t v83 = swift_allocObject();
    *(unsigned char *)(v83 + 16) = 32;
    uint64_t v84 = swift_allocObject();
    *(unsigned char *)(v84 + 16) = 8;
    uint64_t v79 = 32;
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v81;
    uint64_t v82 = v11;
    *(void *)(v11 + 16) = v97;
    *(void *)(v11 + 24) = v12;
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v82;
    uint64_t v86 = v13;
    *(void *)(v13 + 16) = v98;
    *(void *)(v13 + 24) = v14;
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v85 = _allocateUninitializedArray<A>(_:)();
    uint64_t v87 = v15;
    swift_retain();
    uint64_t v16 = v83;
    uint64_t v17 = v87;
    void *v87 = v99;
    v17[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
    swift_retain();
    uint64_t v18 = v84;
    uint64_t v19 = v87;
    v87[2] = v100;
    v19[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
    swift_retain();
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v86;
    uint64_t v21 = v87;
    v87[4] = v101;
    v21[5] = v20;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v89, (os_log_type_t)v90))
    {
      uint64_t v37 = v102;
      uint64_t v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v41 = createStorage<A>(capacity:type:)(0);
      uint64_t v42 = createStorage<A>(capacity:type:)(1);
      id v43 = &v124;
      uint64_t v124 = v40;
      uint64_t v44 = &v123;
      uint64_t v123 = v41;
      uint64_t v45 = &v122;
      uint64_t v122 = v42;
      serialize(_:at:)(2, &v124);
      serialize(_:at:)(1, v43);
      uint64_t v120 = v99;
      uint64_t v121 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)v43, (uint64_t)v44, (uint64_t)v45);
      uint64_t v46 = v37;
      if (v37)
      {
        __break(1u);
      }
      else
      {
        uint64_t v120 = v100;
        uint64_t v121 = v84;
        closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v124, (uint64_t)&v123, (uint64_t)&v122);
        uint64_t v38 = 0;
        uint64_t v120 = v101;
        uint64_t v121 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v120, (uint64_t)&v124, (uint64_t)&v123, (uint64_t)&v122);
        _os_log_impl(&dword_250C36000, v89, (os_log_type_t)v90, "HeadphoneManager: Forget %s", v40, v77);
        destroyStorage<A>(_:count:)(v41, 0, v39);
        destroyStorage<A>(_:count:)(v42, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x253386220](v40, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v110, v104);
  }
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance Headphone_Manager@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Headphone_Manager();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall Headphone_Manager.updateTitleBar()()
{
  id v1 = (void *)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xC0))();
  if (v1)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v1, sel_updateTitleBar);
    swift_unknownObjectRelease();
  }
  else
  {
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
}

id *Headphone_Manager.addTopLevelEntry(hpDevice:)(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v5 = v1;
  id v4 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0xC0))();
  if (v4)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v4, sel_addTopLevelEntryWithHpDevice_, a1);
    return (id *)swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = &v4;
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  return result;
}

id *Headphone_Manager.updateTopLevelEntry(hpDevice:)(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v5 = v1;
  id v4 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0xC0))();
  if (v4)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v4, sel_updateTopLevelEntryWithHpDevice_, a1);
    return (id *)swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = &v4;
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  return result;
}

id *Headphone_Manager.removeTopLevelEntry(hpDevice:)(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v5 = v1;
  id v4 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x263F8EED0]) + 0xC0))();
  if (v4)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v4, sel_removeTopLevelEntryWithHpDevice_, a1);
    return (id *)swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = &v4;
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBVendorID@<X0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CBVendorID.init(rawValue:)(*a1);
  *(_WORD *)a2 = result;
  *(unsigned char *)(a2 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t CBVendorID.init(rawValue:)(__int16 a1)
{
  LOWORD(v2) = a1;
  BYTE2(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBVendorID@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = CBVendorID.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBVendorID.rawValue.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t _s2os0A11LogInternal_3log4typeyAA12OSLogMessageV_So03OS_a1_D0CSo0a1_d1_E2_tatFyySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcXEfU_TA_0(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CBDeviceReporting?()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak HeadphoneMangerTopLevelEntryUIHandling?()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HMServiceClient?(id *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak CBDeviceReporting?()
{
}

uint64_t sub_250CFA0BC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  closure #1 in Headphone_Manager.configCBDiscovery()(a1, *(void **)(v1 + 16));
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_250CFA120()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  closure #2 in Headphone_Manager.configCBDiscovery()(a1, *(void **)(v1 + 16));
}

uint64_t block_destroy_helper_7_0()
{
  return swift_release();
}

uint64_t sub_250CFA184()
{
  return swift_deallocObject();
}

void partial apply for closure #3 in Headphone_Manager.configCBDiscovery()()
{
  closure #3 in Headphone_Manager.configCBDiscovery()(v0);
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

void partial apply for closure #4 in Headphone_Manager.configCBDiscovery()()
{
  closure #4 in Headphone_Manager.configCBDiscovery()(v0);
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t sub_250CFA20C()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_250CFA254()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(void *)(v1 + 16));
}

BOOL CBProductIDIsAppleHeadphone(unsigned int a1)
{
  return CBProductIDIsWx(a1) || CBProductIDIsMTK(a1);
}

uint64_t type metadata accessor for CBVendorID()
{
  uint64_t v4 = lazy cache variable for type metadata for CBVendorID;
  if (!lazy cache variable for type metadata for CBVendorID)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBVendorID);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBVendorID and conformance CBVendorID()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CBVendorID and conformance CBVendorID;
  if (!lazy protocol witness table cache variable for type CBVendorID and conformance CBVendorID)
  {
    type metadata accessor for CBVendorID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CBVendorID and conformance CBVendorID);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_250CFA478()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  return implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(void **)(v0 + 16));
}

uint64_t sub_250CFA4C0()
{
  return swift_deallocObject();
}

unsigned char **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_250CFA4F4()
{
  return swift_deallocObject();
}

uint64_t sub_250CFA528()
{
  return swift_deallocObject();
}

uint64_t sub_250CFA568()
{
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphoneDevice?(id *a1)
{
}

uint64_t sub_250CFA5D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  return closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t sub_250CFA68C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  return implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(void *)(v0 + 16));
}

uint64_t sub_250CFA6D4()
{
  return swift_deallocObject();
}

uint64_t sub_250CFA708()
{
  return swift_deallocObject();
}

uint64_t sub_250CFA73C()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_5()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CFA788()
{
  return swift_deallocObject();
}

void *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_250CFA7D4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Headphone_Manager.disconnect(hpDevice:)(void *a1)
{
  closure #1 in Headphone_Manager.disconnect(hpDevice:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_72(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_73()
{
  return swift_release();
}

uint64_t sub_250CFA88C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Headphone_Manager.unpair(hpDevice:)(void *a1)
{
  closure #1 in Headphone_Manager.unpair(hpDevice:)(a1, *(void **)(v1 + 16));
}

uint64_t block_copy_helper_78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_79()
{
  return swift_release();
}

unint64_t base witness table accessor for Equatable in HeadphoneFeatures()
{
  return lazy protocol witness table accessor for type HeadphoneFeatures and conformance HeadphoneFeatures();
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in Headphone_Manager()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t getEnumTagSinglePayload for HeadphoneFeatures(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFD) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 2) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 3;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HeadphoneFeatures(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFD)
  {
    unsigned int v5 = ((a3 + 2) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFD)
  {
    unsigned int v4 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for HeadphoneFeatures(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for HeadphoneFeatures(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HeadphoneFeatures()
{
  return &type metadata for HeadphoneFeatures;
}

uint64_t method lookup function for Headphone_Manager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Headphone_Manager.topLevelUIHandler.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xC0))();
}

uint64_t dispatch thunk of Headphone_Manager.topLevelUIHandler.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xC8))();
}

uint64_t dispatch thunk of Headphone_Manager.topLevelUIHandler.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0xD0))();
}

uint64_t dispatch thunk of Headphone_Manager.hmsClient.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x138))();
}

uint64_t dispatch thunk of Headphone_Manager.hmsClient.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x140))();
}

uint64_t dispatch thunk of Headphone_Manager.hmsClient.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x148))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedRecords.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x150))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedRecords.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x158))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedRecords.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x160))();
}

uint64_t dispatch thunk of Headphone_Manager.deviceConnectionListener.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x168))();
}

uint64_t dispatch thunk of Headphone_Manager.deviceConnectionListener.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x170))();
}

uint64_t dispatch thunk of Headphone_Manager.deviceConnectionListener.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x178))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedHeadphones.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x180))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedHeadphones.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x188))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedHeadphones.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x190))();
}

uint64_t dispatch thunk of Headphone_Manager.pendingConnectedHeadphones.getter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x198))();
}

uint64_t dispatch thunk of Headphone_Manager.pendingConnectedHeadphones.setter()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1A0))();
}

uint64_t dispatch thunk of Headphone_Manager.pendingConnectedHeadphones.modify()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1A8))();
}

uint64_t dispatch thunk of Headphone_Manager.isAppleHeadphone(cbDevice:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1B8))() & 1;
}

uint64_t dispatch thunk of Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1C0))();
}

uint64_t dispatch thunk of Headphone_Manager.disconnect(hpDevice:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1C8))();
}

uint64_t dispatch thunk of Headphone_Manager.unpair(hpDevice:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x263F8EED0]) + 0x1D0))();
}

void *outlined init with copy of CBDeviceReporting?(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_unknownObjectRetain();
  uint64_t result = a2;
  *a2 = v4;
  return result;
}

void *outlined init with copy of HeadphoneMangerTopLevelEntryUIHandling?(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_unknownObjectRetain();
  uint64_t result = a2;
  *a2 = v4;
  return result;
}

uint64_t sub_250CFB628()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:)()
{
  return implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:)(*(void **)(v0 + 16));
}

uint64_t sub_250CFB670()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB6A4()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB6D8()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB724()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB770()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:)()
{
  return implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:)(*(void **)(v0 + 16));
}

uint64_t sub_250CFB7B8()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB7EC()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB820()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB86C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB8B8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:)()
{
  return implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(*(void **)(v0 + 16));
}

uint64_t sub_250CFB900()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB934()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB968()
{
  return swift_deallocObject();
}

uint64_t sub_250CFB9B4()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBA00()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:)()
{
  return implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(*(void **)(v0 + 16));
}

uint64_t sub_250CFBA48()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBA7C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBAB0()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBAFC()
{
  return swift_deallocObject();
}

uint64_t _swift_stdlib_has_malloc_size_5()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_5(const void *a1)
{
  return malloc_size(a1);
}

uint64_t sub_250CFBB7C()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  return implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(void **)(v0 + 16));
}

uint64_t sub_250CFBBC4()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBBF8()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBC2C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBC78()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBCC4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  return implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(void **)(v0 + 16));
}

uint64_t sub_250CFBD0C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBD40()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBD74()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBDC0()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBE0C()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery()()
{
  return implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_250CFBE54()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBE88()
{
  return swift_deallocObject();
}

uint64_t sub_250CFBEBC()
{
  return swift_deallocObject();
}

void *_s2os18OSLogInterpolationV06appendC0_7privacy10attributesys5Error_pyXA_AA0B7PrivacyVSStFSo8NSObjectCycfu_TA_0()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_250CFBF08()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacy10attributesySo8NSObjectCyXA_AA0B7PrivacyVSStFAHSgycfu_TA_0()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_250CFBF54()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #4 in Headphone_Manager.configCBDiscovery()(void **a1)
{
  closure #1 in closure #4 in Headphone_Manager.configCBDiscovery()(a1, v1);
}

void *outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(void *a1)
{
  if (*a1) {
    swift_release();
  }
  return a1;
}

uint64_t sub_250CFC03C()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #3 in Headphone_Manager.configCBDiscovery()(void **a1)
{
  closure #1 in closure #3 in Headphone_Manager.configCBDiscovery()(a1, v1);
}

uint64_t sub_250CFC0D8()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_250CFC120()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery()()
{
  return implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_250CFC168()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC19C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC1D0()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC21C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC268()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery()()
{
  return implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_250CFC2B0()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC2E4()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC318()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC364()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC3E0()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_250CFC488()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery()()
{
  return implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_250CFC4D0()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC504()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC538()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC584()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC5D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery()()
{
  return implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_250CFC618()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC64C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC680()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC6CC()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC748()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()partial apply(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_250CFC7C0()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery()()
{
  return implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_250CFC808()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC83C()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC870()
{
  return swift_deallocObject();
}

uint64_t sub_250CFC8BC()
{
  return swift_deallocObject();
}

BOOL CBProductIDIsWx(unsigned int a1)
{
  return (CBProductIDIsW1(a1) & 1) != 0 || (CBProductIDIsW2(a1) & 1) != 0 || (CBProductIDIsW3(a1) & 1) != 0;
}

BOOL CBProductIDIsMTK(int a1)
{
  switch(a1)
  {
    case 8209:
      BOOL v2 = 1;
      break;
    case 8214:
      BOOL v2 = 1;
      break;
    case 8215:
      BOOL v2 = 1;
      break;
    case 8230:
      BOOL v2 = 1;
      break;
    default:
      BOOL v2 = a1 == 8229 || a1 == 8218;
      break;
  }
  return v2;
}

uint64_t CBProductIDIsW1(unsigned int a1)
{
  if (a1 <= 0x2002)
  {
    uint64_t v2 = a1 - 8194;
    char v1 = 0;
  }
  else
  {
    uint64_t v2 = a1 - 8194;
    char v1 = 1;
  }
  if ((v1 & 1) == 0)
  {
    switch(v2)
    {
      case 0:
        char v4 = 1;
        return v4 & 1;
      case 1:
        char v4 = 1;
        return v4 & 1;
      case 2:
      case 5:
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
        break;
      case 3:
        char v4 = 1;
        return v4 & 1;
      case 4:
        char v4 = 1;
        return v4 & 1;
      case 7:
        char v4 = 1;
        return v4 & 1;
      case 14:
        char v4 = 1;
        return v4 & 1;
      default:
        JUMPOUT(0);
    }
  }
  char v4 = 0;
  return v4 & 1;
}