uint64_t ot::Message::Read<ot::Ip6::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x28u);
}

{
  return ot::Message::Read<ot::Ip6::Header>(a1, a2, a3);
}

BOOL ot::Ip6::Option::IsPadding(ot::Ip6::Option *this)
{
  BOOL v2 = 1;
  if (*(unsigned char *)this) {
    return *(unsigned char *)this == 1;
  }
  return v2;
}

{
  return ot::Ip6::Option::IsPadding(this);
}

uint64_t ot::Ip6::Option::GetType(ot::Ip6::Option *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Ip6::Option::GetType(this);
}

uint64_t ot::Ip6::Option::GetLength(ot::Ip6::Option *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Ip6::Option::GetLength(this);
}

uint64_t ot::Ip6::ExtensionHeader::GetNextHeader(ot::Ip6::ExtensionHeader *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Ip6::ExtensionHeader::GetNextHeader(this);
}

uint64_t ot::Message::Write<ot::Ip6::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0x28u);
}

{
  return ot::Message::Write<ot::Ip6::Header>(a1, a2, a3);
}

uint64_t ot::Ip6::Ip6::EnqueueDatagram(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  return ot::Tasklet::Post((ot::Ip6::Ip6 *)((char *)this + 72));
}

uint64_t ot::Ip6::Ip6::SendDatagram(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  v44 = this;
  v43 = a2;
  v42 = a3;
  unsigned __int8 v41 = a4;
  unsigned int v40 = 0;
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (v41 == 17
    && (v33 = (ot::Tmf::Agent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this),
        SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v42),
        PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v42),
        unsigned __int16 PeerPort = ot::Ip6::MessageInfo::GetPeerPort(v42),
        (ot::Tmf::Agent::IsTmfMessage(v33, SockAddr, PeerAddr, PeerPort) & 1) != 0))
  {
    char Priority = ot::Message::GetPriority(v43);
    unsigned __int8 v38 = ot::Tmf::Agent::PriorityToDscp(Priority);
  }
  else
  {
    unsigned __int8 v6 = ot::Message::GetPriority(v43);
    unsigned __int8 v38 = ot::Ip6::Ip6::PriorityToDscp(v6);
  }
  ot::Ip6::Header::InitVersionTrafficClassFlow((ot::Ip6::Header *)v39);
  ot::Ip6::Header::SetDscp((ot::Ip6::Header *)v39, v38);
  char Ecn = ot::Ip6::MessageInfo::GetEcn(v42);
  ot::Ip6::Header::SetEcn((uint64_t)v39, Ecn);
  ot::Ip6::Header::SetPayloadLength((ot::Ip6::Header *)v39, Length);
  ot::Ip6::Header::SetNextHeader((uint64_t)v39, v41);
  if (ot::Ip6::MessageInfo::GetHopLimit(v42)
    || (ot::Ip6::MessageInfo::ShouldAllowZeroHopLimit(v42) & 1) != 0)
  {
    char HopLimit = ot::Ip6::MessageInfo::GetHopLimit(v42);
    ot::Ip6::Header::SetHopLimit((uint64_t)v39, HopLimit);
  }
  else
  {
    ot::Ip6::Header::SetHopLimit((uint64_t)v39, 64);
  }
  v9 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v42);
  if (ot::Ip6::Address::IsUnspecified(v9)
    || (v10 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v42), ot::Ip6::Address::IsMulticast(v10)))
  {
    v11 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v42);
    v36 = (ot::Ip6::Address *)ot::Ip6::Ip6::SelectSourceAddress(this, v11);
    if (!v36) {
      return 20;
    }
    ot::Ip6::Header::SetSource((ot::Ip6::Header *)v39, (__n128 *)v36);
  }
  else
  {
    v12 = (__n128 *)ot::Ip6::MessageInfo::GetSockAddr(v42);
    ot::Ip6::Header::SetSource((ot::Ip6::Header *)v39, v12);
  }
  v13 = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(v42);
  ot::Ip6::Header::SetDestination((ot::Ip6::Header *)v39, v13);
  v14 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v42);
  if (!ot::Ip6::Address::IsRealmLocalMulticast(v14)
    || (unsigned int v40 = ot::Ip6::Ip6::AddMplOption(this, v43, (ot::Ip6::Header *)v39)) == 0)
  {
    unsigned int v40 = ot::Message::Prepend<ot::Ip6::Header>(v43, v39);
    if (!v40)
    {
      v30 = v43;
      Source = (ot::Message *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v39);
      Destination = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v39);
      ot::Checksum::UpdateMessageChecksum(v30, Source, Destination, (const ot::Ip6::Address *)v41);
      v16 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v42);
      if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v16)) {
        goto LABEL_24;
      }
      v28 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      v17 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v39);
      if (ot::ChildTable::HasSleepyChildWithAddress(v28, v17))
      {
        v35 = ot::Message::Clone(v43);
        if (v35)
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Ip6", "Message copy for indirect transmission to sleepy children", v18, v19, v20, v21, v22, v23, v26);
          ot::Ip6::Ip6::EnqueueDatagram(this, v35);
        }
        else
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "No enough buffer for message copy for indirect transmission to sleepy children", v18, v19, v20, v21, v22, v23, v26);
        }
      }
      unsigned int v40 = ot::Ip6::Ip6::AddTunneledMplOption(this, v43, (ot::Ip6::Header *)v39);
      if (!v40)
      {
LABEL_24:
        v27 = v43;
        char MulticastLoop = ot::Ip6::MessageInfo::GetMulticastLoop(v42);
        ot::Message::SetMulticastLoop(v27, MulticastLoop & 1);
        if ((unsigned __int16)ot::Message::GetLength(v43) <= 0x500u) {
          ot::Ip6::Ip6::EnqueueDatagram(this, v43);
        }
        else {
          return ot::Ip6::Ip6::FragmentDatagram(this, v43);
        }
      }
    }
  }
  return v40;
}

uint64_t ot::Ip6::Header::SetDscp(ot::Ip6::Header *this, unsigned __int8 a2)
{
  __int16 v2 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(v2 & 0xF03F | (a2 << 6) & 0xFC0u));
  *(_WORD *)this = result;
  return result;
}

{
  return ot::Ip6::Header::SetDscp(this, a2);
}

uint64_t ot::Ip6::Header::SetEcn(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1) = *(unsigned char *)(result + 1) & 0xCF | (16 * a2) & 0x30;
  return result;
}

{
  return ot::Ip6::Header::SetEcn(result, a2);
}

uint64_t ot::Ip6::MessageInfo::GetEcn(ot::Ip6::MessageInfo *this)
{
  return *((unsigned char *)this + 49) & 3;
}

{
  return ot::Ip6::MessageInfo::GetEcn(this);
}

uint64_t ot::Ip6::MessageInfo::ShouldAllowZeroHopLimit(ot::Ip6::MessageInfo *this)
{
  return (*((unsigned __int8 *)this + 49) >> 3) & 1;
}

{
  return ot::Ip6::MessageInfo::ShouldAllowZeroHopLimit(this);
}

__n128 ot::Ip6::Header::SetDestination(ot::Ip6::Header *this, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)((char *)this + 24) = *a2;
  return result;
}

uint64_t ot::Message::SetMulticastLoop(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xBFFF | ((v3 & 1) << 14);
  return result;
}

{
  return ot::Message::SetMulticastLoop(this, a2);
}

uint64_t ot::Ip6::Ip6::FragmentDatagram(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  return 0;
}

uint64_t ot::Ip6::Ip6::HandleOptions(ot::Ip6::Ip6 *this, ot::Message *a2, ot::Ip6::Header *a3, char a4, BOOL *a5)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  v17 = a3;
  char v16 = a4 & 1;
  v15 = a5;
  unsigned int v14 = 0;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  unsigned int v14 = ot::Message::Read<ot::Ip6::HopByHopHeader>(v18, Offset, v13);
  if (!v14)
  {
    unsigned __int16 v9 = Offset + ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v13);
    if (v9 <= (int)(unsigned __int16)ot::Message::GetLength(v18))
    {
      for (unsigned __int16 i = Offset + 2; i < (int)v9; i += ot::Ip6::Option::GetSize((ot::Ip6::Option *)v12))
      {
        unsigned int v14 = ot::Ip6::Option::ParseFrom((ot::Ip6::Option *)v12, v18, i, v9);
        if (v14) {
          return v14;
        }
        if (!ot::Ip6::Option::IsPadding((ot::Ip6::Option *)v12))
        {
          if (ot::Ip6::Option::GetType((ot::Ip6::Option *)v12) == 109)
          {
            v7 = v18;
            Source = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource(v17);
            unsigned int v14 = ot::Ip6::Mpl::ProcessOption((ot::Ip6::Ip6 *)((char *)this + 136), v7, i, Source, v16 & 1, v15);
            if (v14) {
              return v14;
            }
          }
          else if (ot::Ip6::Option::GetAction((ot::Ip6::Option *)v12))
          {
            return 2;
          }
        }
      }
      ot::Message::SetOffset(v18, i);
    }
    else
    {
      return 6;
    }
  }
  return v14;
}

uint64_t ot::Ip6::Option::GetAction(ot::Ip6::Option *this)
{
  return *(unsigned char *)this & 0xC0;
}

{
  return ot::Ip6::Option::GetAction(this);
}

uint64_t ot::Ip6::Ip6::HandleFragment(uint64_t a1, ot::Message *a2, char a3, uint64_t a4)
{
  uint64_t v12 = a1;
  v11 = a2;
  char v10 = a3;
  uint64_t v9 = a4;
  unsigned int v8 = 0;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  unsigned int v8 = ot::Message::Read<ot::Ip6::FragmentHeader>(a2, Offset, v7);
  if (!v8)
  {
    if ((unsigned __int16)ot::Ip6::FragmentHeader::GetOffset((ot::Ip6::FragmentHeader *)v7)
      || ot::Ip6::FragmentHeader::IsMoreFlagSet((ot::Ip6::FragmentHeader *)v7))
    {
      return 2;
    }
    else
    {
      ot::Message::MoveOffset(v11, 8);
    }
  }
  return v8;
}

uint64_t ot::Message::Read<ot::Ip6::FragmentHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return ot::Message::Read<ot::Ip6::FragmentHeader>(a1, a2, a3);
}

uint64_t ot::Ip6::FragmentHeader::GetOffset(ot::Ip6::FragmentHeader *this)
{
  return (int)(ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0xFFF8) >> 3;
}

{
  return ot::Ip6::FragmentHeader::GetOffset(this);
}

BOOL ot::Ip6::FragmentHeader::IsMoreFlagSet(ot::Ip6::FragmentHeader *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 1) != 0;
}

{
  return ot::Ip6::FragmentHeader::IsMoreFlagSet(this);
}

uint64_t ot::Ip6::Ip6::HandleExtensionHeaders(ot::InstanceLocator *a1, ot::Message *a2, unsigned __int8 a3, ot::Ip6::MessageInfo *a4, ot::Ip6::Header *a5, unsigned __int8 *a6, BOOL *a7)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  unsigned __int8 v20 = a3;
  uint64_t v19 = a4;
  uint64_t v18 = a5;
  v17 = a6;
  char v16 = a7;
  v15[4] = 0;
  *(_DWORD *)v15 = a3 != 0;
  while (1)
  {
    BOOL v12 = 1;
    if (!*v16) {
      BOOL v12 = *v17 == 0;
    }
    if (!v12) {
      break;
    }
    v11 = v21;
    unsigned __int16 Offset = ot::Message::GetOffset(v21);
    *(_DWORD *)&v15[1] = ot::Message::Read<ot::Ip6::ExtensionHeader>(v11, Offset, v14);
    if (*(_DWORD *)&v15[1]) {
      break;
    }
    int v10 = *v17;
    if (*v17)
    {
      switch(v10)
      {
        case ')':
          return *(unsigned int *)&v15[1];
        case '+':
LABEL_20:
          *(_DWORD *)&v15[1] = 2;
          return *(unsigned int *)&v15[1];
        case ',':
          ot::Ip6::Ip6::PassToHost(a1, v21, v20, v19, *v17, 0, 1u);
          IgnoreError();
          *(_DWORD *)&v15[1] = ot::Ip6::Ip6::HandleFragment((uint64_t)a1, v21, v20, (uint64_t)v19);
          if (*(_DWORD *)&v15[1]) {
            return *(unsigned int *)&v15[1];
          }
          break;
        case ';':
          goto LABEL_20;
        case '<':
          *(_DWORD *)&v15[1] = ot::Ip6::Ip6::HandleOptions(a1, v21, v18, v15[0] & 1, v16);
          if (*(_DWORD *)&v15[1]) {
            return *(unsigned int *)&v15[1];
          }
          break;
        default:
          return *(unsigned int *)&v15[1];
      }
    }
    else
    {
      *(_DWORD *)&v15[1] = ot::Ip6::Ip6::HandleOptions(a1, v21, v18, v15[0] & 1, v16);
      if (*(_DWORD *)&v15[1]) {
        return *(unsigned int *)&v15[1];
      }
    }
    unsigned __int8 NextHeader = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v14);
    unsigned __int8 *v17 = NextHeader;
  }
  return *(unsigned int *)&v15[1];
}

uint64_t ot::Message::Read<ot::Ip6::ExtensionHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return ot::Message::Read<ot::Ip6::ExtensionHeader>(a1, a2, a3);
}

uint64_t ot::Ip6::Ip6::PassToHost(ot::InstanceLocator *a1, ot::Message *a2, unsigned __int8 a3, ot::Ip6::MessageInfo *a4, unsigned __int8 a5, char a6, unsigned __int8 a7)
{
  v98 = a1;
  v97 = a2;
  unsigned __int8 v96 = a3;
  v95 = a4;
  unsigned __int8 v94 = a5;
  unsigned __int8 v93 = a6 & 1;
  unsigned __int8 v92 = a7;
  v83 = a1;
  unsigned __int16 DestinationPort = 0;
  BOOL ShouldUsePlatformUdp = 0;
  char v89 = 0;
  unsigned int v88 = 0;
  v87 = 0;
  if (!a7) {
    v87 = v97;
  }
  if (v96 == 1)
  {
    unsigned int v88 = 4;
    goto LABEL_35;
  }
  if (!ot::CallbackBase<void (*)(otMessage *,void *)>::IsSet((void *)v83 + 1))
  {
    unsigned int v88 = 4;
    goto LABEL_35;
  }
  if ((unsigned __int16)ot::Message::GetLength(v97) > 0x500u)
  {
    unsigned int v88 = 2;
    goto LABEL_35;
  }
  if (*(unsigned char *)v83 & 1) != 0 && (v93)
  {
    BOOL v86 = 0;
    v81 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(v83);
    SockAddr = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v95);
    BOOL IsLocator = 0;
    if (ot::Mle::Mle::IsMeshLocalAddress(v81, SockAddr))
    {
      unsigned int v8 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v95);
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v8);
      BOOL IsLocator = ot::Ip6::InterfaceIdentifier::IsLocator(Iid);
    }
    BOOL v86 = IsLocator;
    if (IsLocator)
    {
      int v10 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v95);
      v11 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v10);
      if (!ot::Ip6::InterfaceIdentifier::IsAnycastServiceLocator(v11))
      {
        BOOL v12 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v95);
        v13 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v12);
        if (!ot::Ip6::InterfaceIdentifier::IsRoutingLocator(v13))
        {
          unsigned int v88 = 4;
          goto LABEL_35;
        }
      }
    }
    int v80 = v94;
    if (v94 == 17)
    {
      v74 = v97;
      unsigned __int16 Offset = ot::Message::GetOffset(v97);
      v76 = v84;
      ot::Message::Read<ot::Ip6::Udp::Header>(v97, Offset, v84);
      IgnoreError();
      unsigned __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      v75 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83);
      unsigned __int16 v23 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      BOOL ShouldUsePlatformUdp = ot::Ip6::Udp::ShouldUsePlatformUdp(v75, v23);
      v77 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83);
      __int16 v24 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      char v89 = ot::Ip6::Udp::IsPortInUse(v77, v24) & 1;
      v73 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83);
      unsigned __int16 v25 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84);
      if (!ot::Ip6::Udp::ShouldUsePlatformUdp(v73, v25)
        || (v72 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(v83),
            __int16 v26 = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v84),
            (ot::Ip6::Udp::IsPortInUse(v72, v26) & 1) != 0))
      {
        unsigned int v88 = 4;
        goto LABEL_35;
      }
    }
    else if (v80 == 58 && ot::Ip6::Icmp::ShouldHandleEchoRequest((ot::InstanceLocator *)((char *)v83 + 88), v95))
    {
      v78 = v97;
      unsigned __int16 v14 = ot::Message::GetOffset(v97);
      v79 = v85;
      ot::Message::Read<ot::Ip6::Icmp::Header>(v97, v14, v85);
      IgnoreError();
      if (ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v85) == 128)
      {
        char Type = ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v85);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "PassToHost drop ICMP as header type is not EchoRequest:%d", v16, v17, v18, v19, v20, v21, Type);
      }
      if (ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v85) == 128)
      {
        unsigned int v88 = 2;
        goto LABEL_35;
      }
    }
  }
  int v71 = v92;
  if (v92 && v71 == 1 && (v87 = ot::Message::Clone(v97)) == 0)
  {
    char Length = ot::Message::GetLength(v97);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "No buff to clone msg (len: %d) to pass to host", v28, v29, v30, v31, v32, v33, Length);
    unsigned int v88 = 3;
  }
  else
  {
    v70 = &v87;
    ot::Ip6::Ip6::RemoveMplOption(v83, v87);
    IgnoreError();
    ot::Callback<void (*)(otMessage *,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Message *&>((uint64_t)v83 + 8, &v87);
    v87 = 0;
  }
LABEL_35:
  if (v88)
  {
    if (v94 == 17)
    {
      if (ShouldUsePlatformUdp)
      {
        v57 = ot::ErrorToString(v88);
        int v58 = ot::Message::GetLength(v97);
        int v59 = v94;
        int v60 = v92;
        int v61 = v93;
        int v62 = v96;
        v63 = &v47;
        uint64_t v48 = (unsigned __int16)v58;
        uint64_t v49 = v94;
        uint64_t v50 = v92;
        uint64_t v51 = v93 & 1;
        uint64_t v52 = v96;
        BOOL IsSet = ot::CallbackBase<void (*)(otMessage *,void *)>::IsSet((void *)v83 + 1);
        uint64_t v54 = DestinationPort;
        BOOL v55 = ShouldUsePlatformUdp;
        uint64_t v56 = v89 & 1;
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "Error in passToHost UDP error:%s, length:%d, aIpProto:%d, takeCustody:%d, applyFilter:%d, aOrigin:%d, rxCallbackIsSet:%d, udpPort:%d, shouldHandlePlatformUdp:%d, isPortInUse:%d", v40, v41, v42, v43, v44, v45, (char)v57);
      }
    }
    else
    {
      v64 = ot::ErrorToString(v88);
      int v65 = ot::Message::GetLength(v97);
      int v66 = v94;
      int v67 = v92;
      int v68 = v93;
      int v69 = v96;
      uint64_t v48 = (unsigned __int16)v65;
      uint64_t v49 = v94;
      uint64_t v50 = v92;
      uint64_t v51 = v93 & 1;
      uint64_t v52 = v96;
      BOOL IsSet = ot::CallbackBase<void (*)(otMessage *,void *)>::IsSet((void *)v83 + 1);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "Error in passToHost error:%s, length:%d, aIpProto:%d, takeCustody:%d, applyFilter:%d, aOrigin:%d, rxCallbackIsSet:%d, ", v34, v35, v36, v37, v38, v39, (char)v64);
    }
  }
  if (v87) {
    ot::Message::Free(v87);
  }
  return v88;
}

uint64_t ot::Ip6::Ip6::HandlePayload(uint64_t a1, uint64_t a2, ot::Message *a3, ot::Ip6::MessageInfo *a4, char a5, char a6)
{
  unsigned int v24 = 0;
  if (a6) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = a3;
  }
  unsigned __int16 v23 = v21;
  if (a5 == 17 || a5 == 58)
  {
    if (a6 == 1) {
      unsigned __int16 v23 = ot::Message::Clone(a3);
    }
    if (v23)
    {
      if (a5 == 17)
      {
        unsigned int v24 = ot::Ip6::Udp::HandleMessage((ot::Ip6::Udp *)(a1 + 104), v23, a4);
        if (v24 == 2) {
          ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"Ip6", "Error UDP Checksum", v6, v7, v8, v9, v10, v11, v20);
        }
      }
      else if (a5 == 58)
      {
        unsigned int v24 = ot::Ip6::Icmp::HandleMessage((ot::Ip6::Icmp *)(a1 + 88), v23, a4);
      }
    }
    else
    {
      unsigned int v24 = 3;
    }
  }
  if (v24)
  {
    char v12 = ot::ErrorToString(v24);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"Ip6", "Failed to handle payload: %s", v13, v14, v15, v16, v17, v18, v12);
  }
  if (v23) {
    ot::Message::Free(v23);
  }
  return v24;
}

BOOL ot::CallbackBase<void (*)(otMessage *,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otMessage *,void *)>::IsSet(a1);
}

uint64_t ot::Message::Read<ot::Ip6::Udp::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return ot::Message::Read<ot::Ip6::Udp::Header>(a1, a2, a3);
}

uint64_t ot::Ip6::Udp::Header::GetDestinationPort(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::Ip6::Udp::Header::GetDestinationPort(this);
}

uint64_t ot::Callback<void (*)(otMessage *,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Message *&>(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otMessage *,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Message *&>(a1, a2);
}

uint64_t ot::Ip6::Ip6::SendRaw(ot::Ip6::Ip6 *this, ot::Message *a2, char a3)
{
  uint64_t v13 = this;
  char v12 = a2;
  char v11 = a3 & 1;
  unsigned int inserted = 0;
  char v8 = 0;
  unsigned int inserted = ot::Ip6::Header::ParseFrom((ot::Ip6::Header *)v9, a2);
  if (!inserted)
  {
    Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v9);
    if (ot::Ip6::Address::IsMulticast(Source))
    {
      unsigned int inserted = 20;
    }
    else
    {
      Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v9);
      if (!ot::Ip6::Address::IsMulticast(Destination)
        || (unsigned int inserted = ot::Ip6::Ip6::InsertMplOption(this, v12, (ot::Ip6::Header *)v9)) == 0)
      {
        if (v11) {
          unsigned __int8 v5 = 2;
        }
        else {
          unsigned __int8 v5 = 1;
        }
        unsigned int inserted = ot::Ip6::Ip6::HandleDatagram(this, v12, v5, 0, 0);
        char v8 = 1;
      }
    }
  }
  if ((v8 & 1) == 0) {
    ot::Message::Free(v12);
  }
  return inserted;
}

uint64_t ot::Ip6::Ip6::extractAddressAndportfromHeader(ot::Ip6::Ip6 *this, ot::Message *a2, char *a3)
{
  uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  memcpy(__dst, a2, sizeof(__dst));
  return ot::MeshForwarder::GetAddressAndPortInfo(v4, (ot::Message *)__dst, a3, 0);
}

uint64_t ot::Ip6::MessageInfo::SetEcn(uint64_t result, char a2)
{
  *(unsigned char *)(result + 49) = *(unsigned char *)(result + 49) & 0xFC | a2 & 3;
  return result;
}

{
  return ot::Ip6::MessageInfo::SetEcn(result, a2);
}

uint64_t ot::Ip6::Header::GetEcn(ot::Ip6::Header *this)
{
  return (*((unsigned char *)this + 1) & 0x30) >> 4;
}

{
  return ot::Ip6::Header::GetEcn(this);
}

uint64_t ot::Ip6::MessageInfo::SetLinkInfo(uint64_t this, const void *a2)
{
  *(void *)(this + 40) = a2;
  return this;
}

{
  return ot::Ip6::MessageInfo::SetLinkInfo(this, a2);
}

uint64_t ot::Message::GetMulticastLoop(ot::Message *this)
{
  return (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 14) & 1;
}

{
  return ot::Message::GetMulticastLoop(this);
}

uint64_t ot::Ip6::Ip6::IsOnLink(ot::Ip6::Ip6 *this, const ot::Ip6::Address *a2)
{
  uint64_t v13 = this;
  char v12 = a2;
  char v11 = 0;
  __int16 v2 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  if (ot::NetworkData::LeaderBase::IsOnMesh(v2, v12))
  {
    char v11 = 1;
  }
  else
  {
    char v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::GetUnicastAddresses(v3);
    v10[1] = v4;
    v10[0] = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v4);
    uint64_t v9 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
    while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v10, &v9))
    {
      char v8 = (unsigned __int8 *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v10);
      Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)v8);
      if (v8[16] <= (int)ot::Ip6::Address::PrefixMatch(Address, v12))
      {
        char v11 = 1;
        return v11 & 1;
      }
      ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v10);
    }
  }
  return v11 & 1;
}

uint64_t ot::Ip6::Ip6::RouteLookup(ot::Ip6::Ip6 *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  unsigned int v16 = 0;
  unsigned __int16 v15 = 0;
  char v3 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  unsigned int v16 = ot::NetworkData::LeaderBase::RouteLookup(v3, v18, v17, &v15);
  if (v16)
  {
    ot::Ip6::Address::ToString(v17, (ot::StringWriter *)v20);
    char v5 = ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"Ip6", "Failed to find valid route for: %s", v6, v7, v8, v9, v10, v11, v5);
  }
  else
  {
    int v13 = v15;
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (v13 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v4)) {
      return 4;
    }
  }
  return v16;
}

BOOL ot::Mle::Mle::IsMinimalEndDevice(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::IsMinimalEndDevice((ot::Mle::Mle *)((char *)this + 240));
}

{
  return ot::Mle::Mle::IsMinimalEndDevice(this);
}

uint64_t ot::Message::Write<unsigned char>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 1u);
}

{
  return ot::Message::Write<unsigned char>(a1, a2, a3);
}

uint64_t ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Ip6 *this, ot::Ip6::MessageInfo *a2)
{
  unsigned int v6 = 0;
  PeerAddr = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
  char v5 = (ot::Ip6::Address *)ot::Ip6::Ip6::SelectSourceAddress(this, PeerAddr);
  if (v5) {
    ot::Ip6::MessageInfo::SetSockAddr((__n128 *)a2, (__n128 *)v5);
  }
  else {
    return 23;
  }
  return v6;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(uint64_t a1)
{
  uint64_t Head = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*(a1);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(a1);
}

uint64_t ot::Ip6::Ip6::IpProtoToString(ot::Ip6::Ip6 *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::Stringify::Lookup<(unsigned short)9>(this, ot::Ip6::Ip6::IpProtoToString(unsigned char)::kIpProtoTable, (uint64_t)"Unknown", a4, a5, a6);
}

uint64_t ot::Stringify::Lookup<(unsigned short)9>(__int16 a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  __int16 v10 = a1;
  uint64_t v8 = ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)9>((ot::BinarySearch *)&v10, a2, a3, a4, a5, a6);
  if (v8) {
    return *((void *)v8 + 1);
  }
  else {
    return a3;
  }
}

{
  return ot::Stringify::Lookup<(unsigned short)9>(a1, a2, a3, a4, a5, a6);
}

char *ot::Ip6::Ip6::EcnToString(unsigned __int8 a1)
{
  return ot::Ip6::Ip6::EcnToString(ot::Ip6::Ecn)::kEcnStrings[a1];
}

uint64_t ot::Ip6::Headers::ParseFrom(ot::Ip6::Headers *this, const ot::Message *a2)
{
  unsigned int v5 = 6;
  ot::Clearable<ot::Ip6::Headers>::Clear(this);
  if (ot::Ip6::Header::ParseFrom(this, a2)) {
    return v5;
  }
  int NextHeader = ot::Ip6::Header::GetNextHeader(this);
  if (NextHeader == 6)
  {
    if (ot::Message::Read<ot::Ip6::Tcp::Header>(a2, 0x28u, (char *)this + 40)) {
      return v5;
    }
    goto LABEL_7;
  }
  if (NextHeader == 17)
  {
    if (ot::Message::Read<ot::Ip6::Udp::Header>(a2, 0x28u, (char *)this + 40)) {
      return v5;
    }
LABEL_7:
    ot::Ip6::Headers::ParseMatterFrom(this, a2);
    return 0;
  }
  if (NextHeader != 58 || !ot::Message::Read<ot::Ip6::Icmp::Header>(a2, 0x28u, (char *)this + 40)) {
    return 0;
  }
  return v5;
}

void *ot::Clearable<ot::Ip6::Headers>::Clear(void *a1)
{
  return memset(a1, 0, 0x46uLL);
}

{
  return ot::Clearable<ot::Ip6::Headers>::Clear(a1);
}

void ot::Ip6::Headers::ParseMatterFrom(ot::Ip6::Headers *this, const ot::Message *a2)
{
  int v12 = 0;
  if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort(this) == 5540
    || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort(this) == 5540)
  {
    if (ot::Ip6::Headers::IsUdp(this))
    {
      int v12 = ot::Message::Read<ot::Ip6::Matter::Header>(a2, 0x30u, (char *)this + 62);
    }
    else if (ot::Ip6::Headers::IsTcp(this))
    {
      int v12 = ot::Message::Read<unsigned short>(a2, 0x3Cu, (char *)this + 60);
      if (!v12) {
        int v12 = ot::Message::Read<ot::Ip6::Matter::Header>(a2, 0x3Eu, (char *)this + 62);
      }
    }
  }
  if (v12)
  {
    char Checksum = ot::Ip6::Headers::GetChecksum(this);
    SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(this);
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v15);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
    DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(this);
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v14);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v14);
    ot::ErrorToString(v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "Matter header can not be parsed (MsgType:kTypeIp6), chksum=%04x, src=[%s], dst=[%s], error=%s", v4, v5, v6, v7, v8, v9, Checksum);
  }
}

uint64_t ot::Message::Read<ot::Ip6::Tcp::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x14u);
}

{
  return ot::Message::Read<ot::Ip6::Tcp::Header>(a1, a2, a3);
}

uint64_t ot::Ip6::Headers::GetSourcePort(ot::Ip6::Headers *this)
{
  unsigned __int16 v4 = 0;
  int IpProto = ot::Ip6::Headers::GetIpProto(this);
  if (IpProto == 6)
  {
    return (unsigned __int16)ot::Ip6::Tcp::Header::GetSourcePort((ot::Ip6::Headers *)((char *)this + 40));
  }
  else if (IpProto == 17)
  {
    return (unsigned __int16)ot::Ip6::Udp::Header::GetSourcePort((ot::Ip6::Headers *)((char *)this + 40));
  }
  return v4;
}

uint64_t ot::Ip6::Headers::GetDestinationPort(ot::Ip6::Headers *this)
{
  unsigned __int16 v4 = 0;
  int IpProto = ot::Ip6::Headers::GetIpProto(this);
  if (IpProto == 6)
  {
    return (unsigned __int16)ot::Ip6::Tcp::Header::GetDestinationPort((ot::Ip6::Headers *)((char *)this + 40));
  }
  else if (IpProto == 17)
  {
    return (unsigned __int16)ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Headers *)((char *)this + 40));
  }
  return v4;
}

uint64_t ot::Message::Read<ot::Ip6::Matter::Header>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return ot::Message::Read<ot::Ip6::Matter::Header>(a1, a2, a3);
}

BOOL ot::Ip6::Headers::IsTcp(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 6;
}

{
  return ot::Ip6::Headers::IsTcp(this);
}

uint64_t ot::Ip6::Headers::GetChecksum(ot::Ip6::Headers *this)
{
  unsigned __int16 v4 = 0;
  int IpProto = ot::Ip6::Headers::GetIpProto(this);
  switch(IpProto)
  {
    case 6:
      return (unsigned __int16)ot::Ip6::Tcp::Header::GetChecksum((ot::Ip6::Headers *)((char *)this + 40));
    case 17:
      return (unsigned __int16)ot::Ip6::Udp::Header::GetChecksum((ot::Ip6::Headers *)((char *)this + 40));
    case 58:
      return (unsigned __int16)ot::Ip6::Icmp::Header::GetChecksum((ot::Ip6::Headers *)((char *)this + 40));
  }
  return v4;
}

void ot::Ip6::Headers::ParseMatterFrom(ot::Ip6::Headers *this, ot::FrameData *a2)
{
  int v12 = 0;
  if (((unsigned __int16)ot::Ip6::Headers::GetSourcePort(this) == 5540
     || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort(this) == 5540)
    && (ot::Ip6::Headers::IsUdp(this)
     || ot::Ip6::Headers::IsTcp(this) && (int v12 = ot::FrameData::Read<unsigned short>(a2, (char *)this + 60)) == 0))
  {
    int v12 = ot::FrameData::Read<ot::Ip6::Matter::Header>(a2, (char *)this + 62);
  }
  if (v12)
  {
    char Checksum = ot::Ip6::Headers::GetChecksum(this);
    SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(this);
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v15);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
    DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(this);
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v14);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v14);
    ot::ErrorToString(v12);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Ip6", "Matter header can not be parsed (MsgType:kType6lowpan), chksum=%04x, src=[%s], dst=[%s], error=%s", v4, v5, v6, v7, v8, v9, Checksum);
  }
}

uint64_t ot::FrameData::Read<ot::Ip6::Matter::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return ot::FrameData::Read<ot::Ip6::Matter::Header>(a1, a2);
}

uint64_t ot::FrameData::Read<unsigned short>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 2u);
}

{
  return ot::FrameData::Read<unsigned short>(a1, a2);
}

uint64_t ot::Ip6::Headers::DecompressFrom(ot::Ip6::Headers *this, const ot::Message *a2, unsigned __int16 a3, const ot::Mac::Addresses *a4)
{
  int v13 = this;
  int v12 = a2;
  unsigned __int16 v11 = a3;
  __int16 v10 = a4;
  __int16 Bytes = ot::Message::ReadBytes(a2, a3, v14, 0x4Bu);
  ot::Data<(ot::DataLengthType)1>::Init((uint64_t)v8, (uint64_t)v14, Bytes);
  uint64_t v6 = v10;
  Instance = (ot::Instance *)ot::Message::GetInstance(v12);
  return ot::Ip6::Headers::DecompressFrom(this, (const ot::FrameData *)v8, v6, Instance);
}

uint64_t ot::Ip6::Headers::DecompressFrom(ot::Ip6::Headers *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3, ot::Instance *a4)
{
  uint64_t v17 = this;
  unsigned int v16 = a2;
  unsigned __int16 v15 = a3;
  uint64_t v14 = a4;
  unsigned int v13 = 0;
  long long v12 = *(_OWORD *)a2;
  BOOL v10 = 0;
  if (!ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v11, (ot::FrameData *)&v12)
    && (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v11))
  {
    return 23;
  }
  if (!ot::Lowpan::Lowpan::IsLowpanHc((uint64_t)&v12, v4)) {
    return 23;
  }
  uint64_t v5 = (ot::Lowpan::Lowpan *)ot::Instance::Get<ot::Lowpan::Lowpan>((uint64_t)v14);
  unsigned int v13 = ot::Lowpan::Lowpan::DecompressBaseHeader(v5, this, &v10, v15, (ot::FrameData *)&v12);
  if (v13) {
    return v13;
  }
  int NextHeader = ot::Ip6::Header::GetNextHeader(this);
  switch(NextHeader)
  {
    case 6:
      unsigned int v13 = ot::FrameData::Read<ot::Ip6::Tcp::Header>((ot::FrameData *)&v12, (char *)this + 40);
      if (v13) {
        return v13;
      }
      goto LABEL_17;
    case 17:
      if (v10)
      {
        uint64_t v6 = (ot::Lowpan::Lowpan *)ot::Instance::Get<ot::Lowpan::Lowpan>((uint64_t)v14);
        unsigned int v13 = ot::Lowpan::Lowpan::DecompressUdpHeader(v6, (ot::Ip6::Headers *)((char *)this + 40), (ot::FrameData *)&v12);
        if (v13) {
          return v13;
        }
      }
      else
      {
        unsigned int v13 = ot::FrameData::Read<ot::Ip6::Udp::Header>((ot::FrameData *)&v12, (char *)this + 40);
        if (v13) {
          return v13;
        }
      }
LABEL_17:
      ot::Ip6::Headers::ParseMatterFrom(this, (ot::FrameData *)&v12);
      return v13;
    case 58:
      return ot::FrameData::Read<ot::Ip6::Icmp::Header>((ot::FrameData *)&v12, (char *)this + 40);
  }
  return v13;
}

uint64_t ot::Lowpan::FragmentHeader::GetDatagramOffset(ot::Lowpan::FragmentHeader *this)
{
  return *((unsigned __int16 *)this + 2);
}

{
  return ot::Lowpan::FragmentHeader::GetDatagramOffset(this);
}

BOOL ot::Lowpan::Lowpan::IsLowpanHc(uint64_t a1)
{
  __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(a1);
  if (v2 | (Length == 0)) {
    char v3 = 1;
  }
  else {
    char v3 = 0;
  }
  BOOL v7 = 0;
  if ((v3 & 1) == 0)
  {
    __int16 Bytes = (ot::Lowpan::Lowpan *)ot::Data<(ot::DataLengthType)1>::GetBytes(a1);
    return ot::Lowpan::Lowpan::IsLowpanHc(Bytes, v5);
  }
  return v7;
}

uint64_t ot::Instance::Get<ot::Lowpan::Lowpan>(uint64_t a1)
{
  return a1 + 88160;
}

{
  return ot::Instance::Get<ot::Lowpan::Lowpan>(a1);
}

uint64_t ot::FrameData::Read<ot::Ip6::Udp::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return ot::FrameData::Read<ot::Ip6::Udp::Header>(a1, a2);
}

uint64_t ot::FrameData::Read<ot::Ip6::Tcp::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 0x14u);
}

{
  return ot::FrameData::Read<ot::Ip6::Tcp::Header>(a1, a2);
}

uint64_t ot::FrameData::Read<ot::Ip6::Icmp::Header>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return ot::FrameData::Read<ot::Ip6::Icmp::Header>(a1, a2);
}

uint64_t ot::Ip6::Udp::Header::GetSourcePort(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::Ip6::Udp::Header::GetSourcePort(this);
}

uint64_t ot::Ip6::Tcp::Header::GetSourcePort(ot::Ip6::Tcp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::Ip6::Tcp::Header::GetSourcePort(this);
}

uint64_t ot::Ip6::Tcp::Header::GetDestinationPort(ot::Ip6::Tcp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::Ip6::Tcp::Header::GetDestinationPort(this);
}

uint64_t ot::Ip6::Udp::Header::GetChecksum(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 3));
}

{
  return ot::Ip6::Udp::Header::GetChecksum(this);
}

uint64_t ot::Ip6::Tcp::Header::GetChecksum(ot::Ip6::Tcp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 8));
}

{
  return ot::Ip6::Tcp::Header::GetChecksum(this);
}

uint64_t ot::Ip6::Icmp::Header::GetChecksum(ot::Ip6::Icmp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::Ip6::Icmp::Header::GetChecksum(this);
}

double ot::Clearable<ot::PriorityQueue>::Clear(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

{
  return ot::Clearable<ot::PriorityQueue>::Clear(a1);
}

uint64_t ot::Ip6::Header::SetVerionTrafficClassFlow(ot::Ip6::Header *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)this = result;
  return result;
}

{
  return ot::Ip6::Header::SetVerionTrafficClassFlow(this, a2);
}

BOOL ot::Lowpan::Lowpan::IsLowpanHc(ot::Lowpan::Lowpan *this, const unsigned __int8 *a2)
{
  return (*(unsigned char *)this & 0xE0) == 96;
}

{
  return ot::Lowpan::Lowpan::IsLowpanHc(this, a2);
}

uint64_t ot::TaskletIn<ot::Ip6::Ip6,&ot::Ip6::Ip6::HandleSendQueue>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
  return ((uint64_t (*)(uint64_t))ot::Ip6::Ip6::HandleSendQueue)(v2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(*a1);
  *a1 = result;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator::Advance(a1);
}

char *ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)9>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)9, 0x10u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<unsigned short,ot::Stringify::Entry>, a6);
}

{
  return ot::BinarySearch::Find<unsigned short,ot::Stringify::Entry,(unsigned short)9>(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Ip6::NetworkPrefix::GenerateRandomUla(ot::Ip6::NetworkPrefix *this)
{
  *(unsigned char *)this = -3;
  return ot::Random::Crypto::FillBuffer((ot::Ip6::NetworkPrefix *)((char *)this + 1), (unsigned __int8 *)7);
}

void *ot::Ip6::Prefix::Set(ot::Ip6::Prefix *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned __int8 v3 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
  uint64_t result = memcpy(this, a2, v3);
  *((unsigned char *)this + 16) = a3;
  return result;
}

uint64_t ot::Ip6::Prefix::SizeForLength(ot::Ip6::Prefix *this)
{
  return ((this + 7) / 8);
}

{
  return ot::Ip6::Prefix::SizeForLength(this);
}

BOOL ot::Ip6::Prefix::IsLinkLocal(ot::Ip6::Prefix *this)
{
  BOOL v4 = 0;
  if (*((unsigned __int8 *)this + 16) >= 0xAu)
  {
    __int16 v2 = *(_WORD *)this;
    int v3 = (unsigned __int16)(v2 & ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFFC0));
    return v3 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
  }
  return v4;
}

BOOL ot::Ip6::Prefix::IsMulticast(ot::Ip6::Prefix *this)
{
  BOOL v2 = 0;
  if (*((unsigned __int8 *)this + 16) >= 8u) {
    return *(unsigned __int8 *)this == 255;
  }
  return v2;
}

BOOL ot::Ip6::Prefix::IsUniqueLocal(ot::Ip6::Prefix *this)
{
  BOOL v2 = 0;
  if (*((unsigned __int8 *)this + 16) >= 7u) {
    return (*(unsigned char *)this & 0xFE) == 252;
  }
  return v2;
}

BOOL ot::Ip6::Prefix::IsEqual(ot::Ip6::Prefix *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v8 = 0;
  if (*((unsigned __int8 *)this + 16) == a3)
  {
    ot::Ip6::Prefix::GetBytes(this);
    uint64_t v6 = v3;
    unsigned __int8 BytesSize = ot::Ip6::Prefix::GetBytesSize(this);
    return *((unsigned __int8 *)this + 16) <= (int)ot::Ip6::Prefix::MatchLength(v6, a2, (const unsigned __int8 *)BytesSize);
  }
  return v8;
}

uint64_t ot::Ip6::Prefix::MatchLength(ot::Ip6::Prefix *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  unsigned __int8 v6 = 0;
  if (a3 > 0x10u) {
    __assert_rtn("MatchLength", "ip6_address.cpp", 145, "aMaxSize <= Address::kSize");
  }
  for (unsigned __int8 i = 0; i < (int)a3; ++i)
  {
    char v4 = *((unsigned char *)this + i) ^ a2[i];
    if (v4)
    {
      while (v4 >= 0)
      {
        ++v6;
        v4 *= 2;
      }
      return v6;
    }
    v6 += 8;
  }
  return v6;
}

uint64_t ot::Ip6::Prefix::GetBytesSize(ot::Ip6::Prefix *this)
{
  return ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 16));
}

{
  return ot::Ip6::Prefix::GetBytesSize(this);
}

BOOL ot::Ip6::Prefix::ContainsPrefix(ot::Ip6::Prefix *this, const ot::Ip6::Prefix *a2)
{
  BOOL v9 = 0;
  if (*((unsigned __int8 *)this + 16) >= (int)*((unsigned __int8 *)a2 + 16))
  {
    ot::Ip6::Prefix::GetBytes(this);
    BOOL v7 = v2;
    ot::Ip6::Prefix::GetBytes(a2);
    unsigned __int8 v6 = v3;
    unsigned __int8 BytesSize = ot::Ip6::Prefix::GetBytesSize(a2);
    int matched = ot::Ip6::Prefix::MatchLength(v7, v6, (const unsigned __int8 *)BytesSize);
    return matched >= ot::Ip6::Prefix::GetLength(a2);
  }
  return v9;
}

BOOL ot::Ip6::Prefix::ContainsPrefix(unsigned __int8 *a1, const unsigned __int8 *a2)
{
  BOOL v4 = 0;
  if (a1[16] >= 0x40u)
  {
    ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)a1);
    return ot::Ip6::Prefix::MatchLength(v2, a2, (const unsigned __int8 *)8) >= 0x40u;
  }
  return v4;
}

uint64_t ot::Ip6::Prefix::Tidy(ot::Ip6::Prefix *this)
{
  unsigned __int8 BytesSize = ot::Ip6::Prefix::GetBytesSize(this);
  if (BytesSize) {
    *((unsigned char *)this + BytesSize - 1) &= ~((1 << (8 * BytesSize - *((unsigned char *)this + 16))) - 1);
  }
  for (unsigned __int16 i = BytesSize; ; ++i)
  {
    uint64_t result = ot::GetArrayLength<unsigned char,(unsigned short)16>();
    if (i >= (int)(unsigned __int16)result) {
      break;
    }
    *((unsigned char *)this + i) = 0;
  }
  return result;
}

uint64_t ot::GetArrayLength<unsigned char,(unsigned short)16>()
{
  return 16;
}

{
  return ot::GetArrayLength<unsigned char,(unsigned short)16>();
}

BOOL ot::Ip6::Prefix::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v10 = 0;
  if (a1[16] == a2[16])
  {
    ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)a1);
    BOOL v7 = v2;
    ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)a2);
    unsigned __int8 v6 = v3;
    unsigned __int8 BytesSize = ot::Ip6::Prefix::GetBytesSize((ot::Ip6::Prefix *)a1);
    int matched = ot::Ip6::Prefix::MatchLength(v7, v6, (const unsigned __int8 *)BytesSize);
    return matched >= ot::Ip6::Prefix::GetLength((ot::Ip6::Prefix *)a1);
  }
  return v10;
}

BOOL ot::Ip6::Prefix::operator<(ot::Ip6::Prefix *a1, ot::Ip6::Prefix *a2)
{
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a1);
  unsigned __int8 v2 = ot::Ip6::Prefix::GetLength(a2);
  unsigned __int8 v16 = ot::Min<unsigned char>(Length, v2);
  ot::Ip6::Prefix::GetBytes(a1);
  uint64_t v14 = v3;
  ot::Ip6::Prefix::GetBytes(a2);
  unsigned int v13 = v4;
  unsigned __int8 v5 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)v16);
  unsigned __int8 matched = ot::Ip6::Prefix::MatchLength(v14, v13, (const unsigned __int8 *)v5);
  if (matched < (int)v16)
  {
    ot::Ip6::Prefix::GetBytes(a1);
    int v9 = *(unsigned __int8 *)(v6 + matched / 8);
    ot::Ip6::Prefix::GetBytes(a2);
    return v9 < *(unsigned __int8 *)(v7 + matched / 8);
  }
  else
  {
    int v10 = ot::Ip6::Prefix::GetLength(a1);
    return v10 < ot::Ip6::Prefix::GetLength(a2);
  }
}

BOOL ot::Ip6::Prefix::IsValidNat64PrefixLength(ot::Ip6::Prefix *this)
{
  BOOL v2 = 1;
  if (this != 32)
  {
    BOOL v2 = 1;
    if (this != 40)
    {
      BOOL v2 = 1;
      if (this != 48)
      {
        BOOL v2 = 1;
        if (this != 56)
        {
          BOOL v2 = 1;
          if (this != 64) {
            return this == 96;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t ot::Ip6::Prefix::FromString(const char **this, ot *a2)
{
  int v10 = this;
  int v9 = a2;
  char v8 = 47;
  char v7 = 0;
  unsigned int v6 = 6;
  unsigned __int8 v5 = 0;
  if (a2)
  {
    unsigned __int8 v5 = ot::StringFind(v9, (const char *)0x2F);
    if (v5)
    {
      BOOL v2 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>((uint64_t)this);
      if (!ot::Ip6::Address::ParseFrom(v2, (const char *)v9, 47))
      {
        unsigned __int8 v5 = (ot *)((char *)v5 + 1);
        if (!ot::StringParseUint8((ot *)&v5, this + 2, (unsigned __int8 *)0x80) && !*(unsigned char *)v5) {
          return 0;
        }
      }
    }
  }
  return v6;
}

uint64_t ot::Ip6::Address::ParseFrom(ot::Ip6::Address *this, const char *a2, char a3)
{
  unsigned __int16 v25 = this;
  unsigned int v24 = a2;
  char v23 = a3;
  char v22 = -1;
  char v21 = 58;
  char v20 = 46;
  unsigned int v19 = 6;
  unsigned __int8 v18 = 0;
  unsigned __int8 v17 = 8;
  unsigned __int8 v16 = -1;
  char v15 = 0;
  if (*a2 == 58)
  {
    if (*++v24 != 58) {
      return v19;
    }
    ++v24;
    unsigned __int8 v16 = v18;
  }
  while (2)
  {
    if (*v24 == v23) {
      goto LABEL_30;
    }
    uint64_t v14 = v24;
    unsigned int v13 = 0;
    while (1)
    {
      char v12 = 0;
      char v12 = *v24;
      unsigned __int8 v11 = 0;
      if (v12 < 65 || v12 > 70) {
        break;
      }
      unsigned __int8 v11 = v12 - 55;
LABEL_16:
      ++v24;
      unsigned int v13 = v11 + 16 * v13;
      if (v13 >= 0x10000) {
        return v19;
      }
    }
    if (v12 >= 97 && v12 <= 102)
    {
      unsigned __int8 v11 = v12 - 87;
      goto LABEL_16;
    }
    if (v12 >= 48 && v12 <= 57)
    {
      unsigned __int8 v11 = v12 - 48;
      goto LABEL_16;
    }
    if (v24 == v14) {
      return v19;
    }
    if (*v24 != 46)
    {
      if (*v24 != 58 && *v24 != v23 || v18 >= (int)v17) {
        return v19;
      }
      __int16 v3 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(unsigned __int16)v13);
      uint64_t v4 = v18++;
      *((_WORD *)this + v4) = v3;
      if (*v24 == 58 && *++v24 == 58)
      {
        if (v16 == 255)
        {
          unsigned __int8 v16 = v18;
          ++v24;
          continue;
        }
        return v19;
      }
      continue;
    }
    break;
  }
  unsigned int v24 = v14;
  char v15 = 1;
  v17 -= 2;
  if (v18 <= (int)v17)
  {
LABEL_30:
    if (v18 >= (int)v17) {
      goto LABEL_33;
    }
    char v10 = 0;
    if (v16 != 255)
    {
      char v10 = v18 - v16;
      memmove((char *)this + 2 * (v17 - (v18 - v16)), (char *)this + 2 * v16, 2 * (v18 - v16));
      bzero((char *)this + 2 * v16, 2 * (v17 - v18));
LABEL_33:
      if (v15)
      {
        unsigned int v19 = ot::Ip4::Address::FromString((ot::Ip4::Address *)v9, v24, (unsigned __int8 *)v23);
        if (!v19)
        {
          uint64_t Array = ot::GetArrayEnd<unsigned char,(unsigned short)16>((uint64_t)this);
          ot::Ip4::Address::GetBytes((ot::Ip4::Address *)v9);
          *(_DWORD *)(Array - 4) = *v5;
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v19;
}

ot::StringWriter *ot::Ip6::Prefix::ToString@<X0>(ot::Ip6::Prefix *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip6::Prefix::ToString(this, a2);
}

ot::StringWriter *ot::Ip6::Prefix::ToString(ot::Ip6::Prefix *this, ot::StringWriter *a2)
{
  int v9 = this;
  char v8 = a2;
  unsigned __int8 v7 = ((unint64_t)ot::Ip6::Prefix::GetBytesSize(this) + 1) / 2;
  long long v5 = *(_OWORD *)this;
  char v6 = *((unsigned char *)this + 16);
  ot::Ip6::Prefix::Tidy((ot::Ip6::Prefix *)&v5);
  BOOL v2 = (ot::StringWriter *)ot::AsCoreType<otIp6Address>((uint64_t)&v5);
  ot::Ip6::Address::AppendHexWords(v2, v8, v7);
  if (ot::Ip6::Prefix::GetBytesSize(this) < 0xFu) {
    ot::StringWriter::Append(v8, "::");
  }
  return ot::StringWriter::Append(v8, "/%d", *((unsigned __int8 *)this + 16));
}

ot::StringWriter *ot::Ip6::Prefix::ToString(ot::Ip6::Prefix *this, char *a2, __int16 a3)
{
  char v8 = this;
  unsigned __int8 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip6::Prefix::ToString(this, (ot::StringWriter *)v5);
}

ot::StringWriter *ot::Ip6::Address::AppendHexWords(ot::StringWriter *this, ot::StringWriter *a2, unsigned __int8 a3)
{
  uint64_t v4 = this;
  for (unsigned __int8 i = 0; i < (int)a3; ++i)
  {
    if (i) {
      ot::StringWriter::Append(a2, ":");
    }
    unsigned __int16 v3 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)v4 + i));
    this = ot::StringWriter::Append(a2, "%x", v3);
  }
  return this;
}

BOOL ot::Ip6::InterfaceIdentifier::IsUnspecified(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v2 = 0;
  if (!*(_DWORD *)this) {
    return *((_DWORD *)this + 1) == 0;
  }
  return v2;
}

BOOL ot::Ip6::InterfaceIdentifier::IsReserved(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v3 = 1;
  if (!ot::Ip6::InterfaceIdentifier::IsSubnetRouterAnycast(this))
  {
    BOOL v3 = 1;
    if (!ot::Ip6::InterfaceIdentifier::IsReservedSubnetAnycast(this)) {
      return ot::Ip6::InterfaceIdentifier::IsAnycastLocator(this);
    }
  }
  return v3;
}

BOOL ot::Ip6::InterfaceIdentifier::IsSubnetRouterAnycast(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v2 = 0;
  if (!*(_DWORD *)this) {
    return *((_DWORD *)this + 1) == 0;
  }
  return v2;
}

BOOL ot::Ip6::InterfaceIdentifier::IsReservedSubnetAnycast(ot::Ip6::InterfaceIdentifier *this)
{
  int v4 = *(_DWORD *)this;
  BOOL v5 = 0;
  if (v4 == ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFDFFFFFFLL))
  {
    int v2 = *((unsigned __int16 *)this + 2);
    BOOL v5 = 0;
    if (v2 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFFFF))
    {
      BOOL v5 = 0;
      if (*((unsigned __int8 *)this + 6) == 255) {
        return *((unsigned __int8 *)this + 7) >= 0x80u;
      }
    }
  }
  return v5;
}

BOOL ot::Ip6::InterfaceIdentifier::IsAnycastLocator(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsLocator(this)) {
    return *((unsigned __int8 *)this + 6) == 252;
  }
  return v3;
}

uint64_t ot::Ip6::InterfaceIdentifier::GenerateRandom(ot::Ip6::InterfaceIdentifier *this)
{
  uint64_t result = ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)8);
  if (result) {
    __assert_rtn("GenerateRandom", "ip6_address.cpp", 258, "false");
  }
  return result;
}

void *ot::Ip6::InterfaceIdentifier::SetBytes(void *this, const unsigned __int8 *a2)
{
  *this = *(void *)a2;
  return this;
}

char *ot::Ip6::InterfaceIdentifier::SetFromExtAddress(ot::Ip6::InterfaceIdentifier *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t v4 = *(void *)a2;
  ot::Mac::ExtAddress::ToggleLocal(&v4);
  return ot::Mac::ExtAddress::CopyTo(&v4, (char *)this, 0);
}

unsigned char *ot::Mac::ExtAddress::ToggleLocal(unsigned char *this)
{
  *this ^= 2u;
  return this;
}

{
  return ot::Mac::ExtAddress::ToggleLocal(this);
}

unsigned char *ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Ip6::InterfaceIdentifier *this, ot::Mac::ExtAddress *a2)
{
  return ot::Mac::ExtAddress::ToggleLocal(a2);
}

unsigned char *ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(ot::Ip6::InterfaceIdentifier *this, ot::Mac::Address *a2)
{
  ot::Mac::Address::SetExtended((char *)a2, this, 0);
  ot::Mac::Address::GetExtended(a2);
  return ot::Mac::ExtAddress::ToggleLocal(v2);
}

uint64_t ot::Ip6::InterfaceIdentifier::SetToLocator(ot::Ip6::InterfaceIdentifier *this, unsigned __int16 a2)
{
  *(_DWORD *)this = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFF);
  *((_WORD *)this + 2) = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE00);
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3) = result;
  return result;
}

BOOL ot::Ip6::InterfaceIdentifier::IsLocator(ot::Ip6::InterfaceIdentifier *this)
{
  int v4 = *(_DWORD *)this;
  BOOL v5 = 0;
  if (v4 == ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFF))
  {
    int v2 = *((unsigned __int16 *)this + 2);
    return v2 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE00);
  }
  return v5;
}

BOOL ot::Ip6::InterfaceIdentifier::IsRoutingLocator(ot::Ip6::InterfaceIdentifier *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsLocator(this))
  {
    BOOL v3 = 0;
    if (*((unsigned __int8 *)this + 6) < 0xFCu) {
      return (*((unsigned char *)this + 6) & 2) == 0;
    }
  }
  return v3;
}

BOOL ot::Ip6::InterfaceIdentifier::IsAnycastServiceLocator(ot::Ip6::InterfaceIdentifier *this)
{
  unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(this);
  BOOL v3 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsLocator(this))
  {
    BOOL v3 = 0;
    if (Locator >= 0xFC10u) {
      return Locator <= 0xFC2Fu;
    }
  }
  return v3;
}

void *ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::InterfaceIdentifier *this, const ot::Ip6::Prefix *a2)
{
  uint64_t result = (void *)ot::Ip6::Prefix::GetLength(a2);
  if (result > 0x40u)
  {
    ot::Ip6::Prefix::GetBytes(a2);
    BOOL v5 = (unsigned __int8 *)(v3 + 8);
    char Length = ot::Ip6::Prefix::GetLength(a2);
    return ot::Ip6::Address::CopyBits(this, v5, (const unsigned __int8 *)(Length - 64));
  }
  return result;
}

void *ot::Ip6::Address::CopyBits(ot::Ip6::Address *this, unsigned __int8 *a2, const unsigned __int8 *a3)
{
  unsigned __int8 __n = a3 / 8;
  char v5 = a3 % 8;
  uint64_t result = memcpy(this, a2, __n);
  if (v5)
  {
    char v4 = (128 >> (v5 - 1)) - 1;
    *((unsigned char *)this + __n) &= v4;
    *((unsigned char *)this + __n) |= a2[__n] & ~v4;
  }
  return result;
}

ot::StringWriter *ot::Ip6::InterfaceIdentifier::ToString@<X0>(ot::Ip6::InterfaceIdentifier *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, 8);
}

BOOL ot::Ip6::Address::IsUnspecified(ot::Ip6::Address *this)
{
  BOOL v2 = 0;
  if (!*(_DWORD *)this)
  {
    BOOL v2 = 0;
    if (!*((_DWORD *)this + 1))
    {
      BOOL v2 = 0;
      if (!*((_DWORD *)this + 2)) {
        return *((_DWORD *)this + 3) == 0;
      }
    }
  }
  return v2;
}

BOOL ot::Ip6::Address::IsLoopback(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (!*(_DWORD *)this)
  {
    BOOL v3 = 0;
    if (!*((_DWORD *)this + 1))
    {
      BOOL v3 = 0;
      if (!*((_DWORD *)this + 2))
      {
        int v2 = *((_DWORD *)this + 3);
        return v2 == ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)1);
      }
    }
  }
  return v3;
}

BOOL ot::Ip6::Address::IsLinkLocal(ot::Ip6::Address *this)
{
  __int16 v2 = *(_WORD *)this;
  int v3 = (unsigned __int16)(v2 & ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFFC0));
  return v3 == (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
}

char *ot::Ip6::Address::SetToLinkLocalAddress(ot::Ip6::Address *this, const ot::Mac::ExtAddress *a2)
{
  *(void *)this = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFE800000);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(this);
  return ot::Ip6::InterfaceIdentifier::SetFromExtAddress(Iid, a2);
}

void *ot::Ip6::Address::SetToLinkLocalAddress(ot::Ip6::Address *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  *(void *)this = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)0xFE800000);
  return ot::Ip6::Address::SetIid(this, a2);
}

BOOL ot::Ip6::Address::IsLinkLocalMulticast(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Address::IsMulticast(this)) {
    return ot::Ip6::Address::GetScope(this) == 2;
  }
  return v3;
}

uint64_t ot::Ip6::Address::GetScope(ot::Ip6::Address *this)
{
  if (ot::Ip6::Address::IsMulticast(this))
  {
    return *((unsigned char *)this + 1) & 0xF;
  }
  else if (ot::Ip6::Address::IsLinkLocal(this))
  {
    return 2;
  }
  else if (ot::Ip6::Address::IsLoopback(this))
  {
    return 0;
  }
  else
  {
    return 14;
  }
}

BOOL ot::Ip6::Address::IsLinkLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  LinkLocalAllNodesMulticast = (const void *)ot::Ip6::Address::GetLinkLocalAllNodesMulticast(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(this, LinkLocalAllNodesMulticast);
}

uint64_t ot::Ip6::Address::GetLinkLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)&ot::Ip6::Netif::kLinkLocalAllNodesMulticastAddress);
}

__n128 ot::Ip6::Address::SetToLinkLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  LinkLocalAllNodesMulticast = (__n128 *)ot::Ip6::Address::GetLinkLocalAllNodesMulticast(this);
  __n128 result = *LinkLocalAllNodesMulticast;
  *(__n128 *)this = *LinkLocalAllNodesMulticast;
  return result;
}

BOOL ot::Ip6::Address::IsLinkLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  LinkLocalAllRoutersMulticast = (const void *)ot::Ip6::Address::GetLinkLocalAllRoutersMulticast(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(this, LinkLocalAllRoutersMulticast);
}

uint64_t ot::Ip6::Address::GetLinkLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)&ot::Ip6::Netif::kLinkLocalAllRoutersMulticastAddress);
}

__n128 ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  LinkLocalAllRoutersMulticast = (__n128 *)ot::Ip6::Address::GetLinkLocalAllRoutersMulticast(this);
  __n128 result = *LinkLocalAllRoutersMulticast;
  *(__n128 *)this = *LinkLocalAllRoutersMulticast;
  return result;
}

BOOL ot::Ip6::Address::IsRealmLocalMulticast(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Address::IsMulticast(this)) {
    return ot::Ip6::Address::GetScope(this) == 3;
  }
  return v3;
}

BOOL ot::Ip6::Address::IsMulticastLargerThanRealmLocal(ot::Ip6::Address *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Address::IsMulticast(this)) {
    return ot::Ip6::Address::GetScope(this) > 3u;
  }
  return v3;
}

BOOL ot::Ip6::Address::IsRealmLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  RealmLocalAllNodesMulticast = (const void *)ot::Ip6::Address::GetRealmLocalAllNodesMulticast(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(this, RealmLocalAllNodesMulticast);
}

uint64_t ot::Ip6::Address::GetRealmLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)&ot::Ip6::Netif::kRealmLocalAllNodesMulticastAddress);
}

__n128 ot::Ip6::Address::SetToRealmLocalAllNodesMulticast(ot::Ip6::Address *this)
{
  RealmLocalAllNodesMulticast = (__n128 *)ot::Ip6::Address::GetRealmLocalAllNodesMulticast(this);
  __n128 result = *RealmLocalAllNodesMulticast;
  *(__n128 *)this = *RealmLocalAllNodesMulticast;
  return result;
}

BOOL ot::Ip6::Address::IsRealmLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  RealmLocalAllRoutersMulticast = (const void *)ot::Ip6::Address::GetRealmLocalAllRoutersMulticast(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(this, RealmLocalAllRoutersMulticast);
}

uint64_t ot::Ip6::Address::GetRealmLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)&ot::Ip6::Netif::kRealmLocalAllRoutersMulticastAddress);
}

__n128 ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast(ot::Ip6::Address *this)
{
  RealmLocalAllRoutersMulticast = (__n128 *)ot::Ip6::Address::GetRealmLocalAllRoutersMulticast(this);
  __n128 result = *RealmLocalAllRoutersMulticast;
  *(__n128 *)this = *RealmLocalAllRoutersMulticast;
  return result;
}

BOOL ot::Ip6::Address::IsRealmLocalAllMplForwarders(ot::Ip6::Address *this)
{
  RealmLocalAllMplForwarders = (const void *)ot::Ip6::Address::GetRealmLocalAllMplForwarders(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(this, RealmLocalAllMplForwarders);
}

uint64_t ot::Ip6::Address::GetRealmLocalAllMplForwarders(ot::Ip6::Address *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)&ot::Ip6::Netif::kRealmLocalAllMplForwardersMulticastAddress);
}

__n128 ot::Ip6::Address::SetToRealmLocalAllMplForwarders(ot::Ip6::Address *this)
{
  RealmLocalAllMplForwarders = (__n128 *)ot::Ip6::Address::GetRealmLocalAllMplForwarders(this);
  __n128 result = *RealmLocalAllMplForwarders;
  *(__n128 *)this = *RealmLocalAllMplForwarders;
  return result;
}

BOOL ot::Ip6::Address::MatchesPrefix(ot::Ip6::Address *this, const ot::Ip6::Prefix *a2)
{
  ot::Ip6::Prefix::GetBytes(a2);
  char v5 = v2;
  unsigned __int8 BytesSize = ot::Ip6::Prefix::GetBytesSize(a2);
  int matched = ot::Ip6::Prefix::MatchLength(this, v5, (const unsigned __int8 *)BytesSize);
  return matched >= ot::Ip6::Prefix::GetLength(a2);
}

BOOL ot::Ip6::Address::MatchesPrefix(ot::Ip6::Address *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned __int8 v3 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
  return a3 <= (int)ot::Ip6::Prefix::MatchLength(this, a2, (const unsigned __int8 *)v3);
}

void *ot::Ip6::Address::SetPrefix(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *ot::Ip6::Address::SetPrefix(ot::Ip6::Address *this, const ot::Ip6::Prefix *a2)
{
  ot::Ip6::Prefix::GetBytes(a2);
  char v5 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  return ot::Ip6::Address::CopyBits(this, v5, (const unsigned __int8 *)Length);
}

void *ot::Ip6::Address::SetMulticastNetworkPrefix(ot::Ip6::Address *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  __n128 result = ot::Ip6::Address::CopyBits((ot::Ip6::Address *)((char *)this + 4), a2, (const unsigned __int8 *)a3);
  *((unsigned char *)this + 3) = a3;
  return result;
}

uint64_t ot::Ip6::Address::SetToLocator(ot::Ip6::Address *a1, void *a2, unsigned __int16 a3)
{
  ot::Ip6::Address::SetPrefix(a1, a2);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a1);
  return ot::Ip6::InterfaceIdentifier::SetToLocator(Iid, a3);
}

uint64_t ot::Ip6::Address::PrefixMatch(ot::Ip6::Address *this, const ot::Ip6::Address *a2)
{
  return ot::Ip6::Prefix::MatchLength(this, (const unsigned __int8 *)a2, (const unsigned __int8 *)0x10);
}

uint64_t ot::Ip6::Address::MatchesFilter(ot::Ip6::Address *a1, unsigned __int8 a2)
{
  char IsMulticast = 1;
  if (a2)
  {
    uint64_t v3 = a2;
    char v2 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v2 = 0;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        return IsMulticast & 1;
      case 1:
        LOBYTE(v5) = 0;
        if (!ot::Ip6::Address::IsUnspecified(a1)) {
          BOOL v5 = !ot::Ip6::Address::IsMulticast(a1);
        }
        char IsMulticast = v5;
        break;
      case 2:
        char IsMulticast = ot::Ip6::Address::IsMulticast(a1);
        break;
      case 3:
        char IsMulticast = ot::Ip6::Address::IsMulticastLargerThanRealmLocal(a1);
        break;
      default:
        JUMPOUT(0);
    }
  }
  return IsMulticast & 1;
}

void ot::Ip6::Address::SynthesizeFromIp4Address(ot::Ip6::Address *this, const ot::Ip6::Prefix *a2, const ot::Ip4::Address *a3)
{
  if (!ot::Ip6::Prefix::IsValidNat64(a2)) {
    __assert_rtn("SynthesizeFromIp4Address", "ip6_address.cpp", 518, "aPrefix.IsValidNat64()");
  }
  ot::Clearable<ot::Ip6::Address>::Clear(this);
  ot::Ip6::Address::SetPrefix(this, a2);
  unsigned __int8 v7 = ot::Ip6::Prefix::GetLength(a2) / 8;
  for (unsigned __int8 i = 0; i < 4u; ++i)
  {
    if (v7 == 8) {
      ++v7;
    }
    ot::Ip4::Address::GetBytes(a3);
    uint64_t v4 = v7++;
    *((unsigned char *)this + v4) = *(unsigned char *)(v3 + i);
  }
}

BOOL ot::Ip6::Prefix::IsValidNat64(ot::Ip6::Prefix *this)
{
  return ot::Ip6::Prefix::IsValidNat64PrefixLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 16));
}

{
  return ot::Ip6::Prefix::IsValidNat64(this);
}

uint64_t ot::Ip6::Address::FromString(ot::Ip6::Address *this, const char *a2)
{
  return ot::Ip6::Address::ParseFrom(this, a2, 0);
}

uint64_t ot::GetArrayEnd<unsigned char,(unsigned short)16>(uint64_t a1)
{
  return a1 + 16;
}

{
  return ot::GetArrayEnd<unsigned char,(unsigned short)16>(a1);
}

ot::StringWriter *ot::Ip6::Address::ToString@<X0>(ot::Ip6::Address *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip6::Address::ToString(this, a2);
}

uint64_t ot::String<(unsigned short)40>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 40);
  return a1;
}

ot::StringWriter *ot::Ip6::Address::ToString(ot::Ip6::Address *this, ot::StringWriter *a2)
{
  unsigned __int8 Array = ot::GetArrayLength<unsigned short,(unsigned short)8>();
  return ot::Ip6::Address::AppendHexWords(this, a2, Array);
}

ot::StringWriter *ot::Ip6::Address::ToString(ot::Ip6::Address *this, char *a2, __int16 a3)
{
  char v8 = this;
  unsigned __int8 v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip6::Address::ToString(this, (ot::StringWriter *)v5);
}

uint64_t ot::GetArrayLength<unsigned short,(unsigned short)8>()
{
  return 8;
}

{
  return ot::GetArrayLength<unsigned short,(unsigned short)8>();
}

ot::Random::Manager *ot::Random::Manager::Manager(ot::Random::Manager *this)
{
  uint64_t v3 = this;
  uint64_t v4 = this;
  unsigned int v2 = 0;
  if ((unsigned __int16)ot::Random::Manager::sInitCount == 0xFFFF) {
    __assert_rtn("Manager", "random.cpp", 51, "sInitCount < 0xffff");
  }
  if (!ot::Random::Manager::sInitCount)
  {
    j__otPlatCryptoRandomInit();
    if (ot::Random::Crypto::FillBuffer((ot::Random::Crypto *)&v2, (unsigned __int8 *)4)) {
      __assert_rtn("Manager", "random.cpp", 57, "false");
    }
    ot::Random::Manager::NonCryptoPrng::Init(&ot::Random::Manager::sPrng, v2);
  }
  ++ot::Random::Manager::sInitCount;
  return v4;
}

{
  ot::Random::Manager::Manager(this);
  return this;
}

int *ot::Random::Manager::NonCryptoPrng::Init(int *this, int a2)
{
  int v2 = a2;
  if (!a2 || a2 == 0x7FFFFFFF) {
    int v2 = 1;
  }
  *this = v2;
  return this;
}

void ot::Random::Manager::~Manager(ot::Random::Manager *this)
{
  if (!ot::Random::Manager::sInitCount) {
    __assert_rtn("~Manager", "random.cpp", 70, "sInitCount > 0");
  }
  if (!--ot::Random::Manager::sInitCount) {
    j__otPlatCryptoRandomDeinit();
  }
}

{
  ot::Random::Manager::~Manager(this);
}

uint64_t ot::Random::Manager::NonCryptoGetUint32(ot::Random::Manager *this)
{
  if (!ot::Random::Manager::sInitCount) {
    __assert_rtn("NonCryptoGetUint32", "random.cpp", 85, "sInitCount > 0");
  }
  return ot::Random::Manager::NonCryptoPrng::GetNext((ot::Random::Manager::NonCryptoPrng *)&ot::Random::Manager::sPrng);
}

uint64_t ot::Random::Manager::NonCryptoPrng::GetNext(ot::Random::Manager::NonCryptoPrng *this)
{
  int v2 = ((33614 * (unint64_t)*(unsigned int *)this) >> 32) + ((33614 * *(_DWORD *)this) >> 1);
  if (v2 < 0) {
    int v2 = (v2 & 0x7FFFFFFF) + 1;
  }
  *(_DWORD *)this = v2;
  return v2;
}

uint64_t ot::Random::NonCrypto::GetUint8InRange(ot::Random::NonCrypto *this, unsigned __int8 a2)
{
  if (a2 <= (int)this) {
    __assert_rtn("GetUint8InRange", "random.cpp", 134, "aMax > aMin");
  }
  return ((_BYTE)this
                         + ot::Random::NonCrypto::GetUint8(this) % (a2 - this));
}

uint64_t ot::Random::NonCrypto::GetUint16InRange(ot::Random::NonCrypto *this, unsigned __int16 a2)
{
  if (a2 <= (int)(unsigned __int16)this) {
    __assert_rtn("GetUint16InRange", "random.cpp", 141, "aMax > aMin");
  }
  return (unsigned __int16)((_WORD)this
                          + (unsigned __int16)ot::Random::NonCrypto::GetUint16(this) % (a2 - (unsigned __int16)this));
}

uint64_t ot::Random::NonCrypto::GetUint32InRange(ot::Random::NonCrypto *this, unsigned int a2)
{
  if (a2 <= this) {
    __assert_rtn("GetUint32InRange", "random.cpp", 147, "aMax > aMin");
  }
  return this + ot::Random::NonCrypto::GetUint32(this) % (a2 - this);
}

ot::Random::NonCrypto *ot::Random::NonCrypto::FillBuffer(ot::Random::NonCrypto *this, unsigned __int8 *a2)
{
  BOOL v5 = this;
  __int16 v4 = (__int16)a2;
  while (v4--)
  {
    this = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint8(this);
    uint64_t v3 = v5;
    BOOL v5 = (ot::Random::NonCrypto *)((char *)v5 + 1);
    *(unsigned char *)uint64_t v3 = (_BYTE)this;
  }
  return this;
}

uint64_t ot::Random::NonCrypto::AddJitter(ot::Random::NonCrypto *this, unsigned __int16 a2)
{
  if (a2 > this) {
    unsigned __int16 v3 = (unsigned __int16)this;
  }
  else {
    unsigned __int16 v3 = a2;
  }
  return this + ot::Random::NonCrypto::GetUint32InRange(0, 2 * v3 + 1) - v3;
}

BOOL ot::Ip6::Filter::Accept(ot::Ip6::Filter *this, ot::Message *a2)
{
  uint64_t v14 = this;
  unsigned int v13 = a2;
  BOOL v12 = 0;
  unsigned __int16 DestinationPort = 0;
  if (ot::Message::IsLinkSecurityEnabled(a2))
  {
    return 1;
  }
  else if (!ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v11, v13))
  {
    DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v11);
    if (ot::Ip6::Address::IsLinkLocal(DestinationAddress)
      || (unsigned __int16 v3 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v11),
          ot::Ip6::Address::IsLinkLocalMulticast(v3)))
    {
      __int16 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      if (ot::Mle::Mle::GetRole(v4))
      {
        unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v11);
        int IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v11);
        if (IpProto != 6)
        {
          if (IpProto != 17) {
            return v12;
          }
          if (DestinationPort == 19788) {
            return 1;
          }
          BOOL v5 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v5) + 2) & 2) != 0)
          {
            __int16 v6 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
            if (DestinationPort == (unsigned __int16)ot::MeshCoP::BorderAgent::GetUdpPort(v6)) {
              return 1;
            }
          }
        }
        return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Contains((uint64_t)this, &DestinationPort);
      }
      return 1;
    }
  }
  return v12;
}

BOOL ot::Array<unsigned short,(unsigned short)2,unsigned char>::Contains(uint64_t a1, unsigned __int16 *a2)
{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(a1, a2) != 0;
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Contains(a1, a2);
}

uint64_t ot::Ip6::Filter::UpdateUnsecurePorts(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v16 = a1;
  char v15 = a2;
  unsigned __int16 v14 = a3;
  unsigned int v13 = 0;
  if (!a3) {
    return 7;
  }
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(a1, &v14);
  if (v15)
  {
    if (!v3) {
      return 23;
    }
    ot::Array<unsigned short,(unsigned short)2,unsigned char>::Remove(a1, v3);
  }
  else
  {
    if (v3) {
      return v13;
    }
    unsigned int v13 = ot::Array<unsigned short,(unsigned short)2,unsigned char>::PushBack(a1, (__int16 *)&v14);
    if (v13) {
      return v13;
    }
  }
  char v10 = "Added";
  if (v15) {
    char v10 = "Removed";
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Ip6Filter", "%s unsecure port %d", v4, v5, v6, v7, v8, v9, (char)v10);
  return v13;
}

void ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(uint64_t a1, unsigned __int16 *a2)
{
  ot::AsConst<ot::Array<unsigned short,(unsigned short)2,unsigned char>>();
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(v2, a2);
  ot::AsNonConst<unsigned short>();
}

{
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(a1, a2);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::PushBack(uint64_t a1, __int16 *a2)
{
  if (ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsFull(a1))
  {
    return 3;
  }
  else
  {
    __int16 v2 = *a2;
    uint64_t v3 = (*(unsigned char *)(a1 + 4))++;
    *(_WORD *)(a1 + 2 * v3) = v2;
    return 0;
  }
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::PushBack(a1, a2);
}

_WORD *ot::Array<unsigned short,(unsigned short)2,unsigned char>::Remove(uint64_t a1, _WORD *a2)
{
  __n128 result = (_WORD *)ot::Array<unsigned short,(unsigned short)2,unsigned char>::PopBack(a1);
  if (result != a2) {
    *a2 = *result;
  }
  return result;
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Remove(a1, a2);
}

unsigned __int16 *ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v7 = 0;
  ot::Array<unsigned short,(unsigned short)2,unsigned char>::begin();
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<unsigned short,(unsigned short)2,unsigned char>::end(a1);
  while (v5 != (unsigned __int16 *)v4)
  {
    if (*v5 == *a2) {
      return v5;
    }
    ++v5;
  }
  return (unsigned __int16 *)v7;
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::Find(a1, a2);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::end(uint64_t a1)
{
  return a1 + 2 * *(unsigned __int8 *)(a1 + 4);
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::end(a1);
}

BOOL ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsFull(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 4);
  return v2 == ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetMaxSize();
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsFull(a1);
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetMaxSize()
{
  return 2;
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::GetMaxSize();
}

uint64_t ot::Array<unsigned short,(unsigned short)2,unsigned char>::PopBack(uint64_t a1)
{
  if (ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsEmpty(a1)) {
    return 0;
  }
  char v1 = *(unsigned char *)(a1 + 4);
  *(unsigned char *)(a1 + 4) = v1 - 1;
  return a1 + 2 * (v1 - 1);
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::PopBack(a1);
}

BOOL ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsEmpty(uint64_t a1)
{
  return *(unsigned char *)(a1 + 4) == 0;
}

{
  return ot::Array<unsigned short,(unsigned short)2,unsigned char>::IsEmpty(a1);
}

uint64_t ot::Ip6::Header::ParseFrom(ot::Ip6::Header *this, const ot::Message *a2)
{
  unsigned int v5 = 6;
  if (!ot::Message::Read<ot::Ip6::Header>(a2, 0, (char *)this) && ot::Ip6::Header::IsValid(this))
  {
    uint64_t v3 = (unsigned __int16)ot::Ip6::Header::GetPayloadLength(this) + 40;
    if (v3 == (unsigned __int16)ot::Message::GetLength(a2)) {
      return 0;
    }
  }
  return v5;
}

BOOL ot::Ip6::Header::IsValid(ot::Ip6::Header *this)
{
  BOOL v3 = 0;
  if (ot::Ip6::Header::IsVersion6(this)) {
    return (unint64_t)(unsigned __int16)ot::Ip6::Header::GetPayloadLength(this) + 40 <= 0x500;
  }
  return v3;
}

BOOL ot::Ip6::Header::IsVersion6(ot::Ip6::Header *this)
{
  return (*(unsigned char *)this & 0xF0) == 96;
}

{
  return ot::Ip6::Header::IsVersion6(this);
}

uint64_t ot::Ip6::Option::ParseFrom(ot::Ip6::Option *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v6 = ot::Message::Read(a2, a3, (char *)this, 1u);
  if (!v6)
  {
    if (*(unsigned char *)this)
    {
      unsigned int v6 = ot::Message::Read<ot::Ip6::Option>(a2, a3, (char *)this);
      if (!v6 && a3 + (unsigned __int16)ot::Ip6::Option::GetSize(this) > a4) {
        return 6;
      }
    }
    else
    {
      ot::Ip6::Option::SetLength((uint64_t)this, 0);
    }
  }
  return v6;
}

uint64_t ot::Ip6::Option::SetLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1) = a2;
  return this;
}

{
  return ot::Ip6::Option::SetLength(this, a2);
}

uint64_t ot::Message::Read<ot::Ip6::Option>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return ot::Message::Read<ot::Ip6::Option>(a1, a2, a3);
}

uint64_t ot::Ip6::Option::GetSize(ot::Ip6::Option *this)
{
  if (*(unsigned char *)this) {
    return (unsigned __int16)(*((unsigned __int8 *)this + 1) + 2);
  }
  else {
    return 1;
  }
}

unsigned char *ot::Ip6::PadOption::InitForPadSize(ot::Ip6::PadOption *this, char a2)
{
  if (a2 == 1) {
    return ot::Ip6::Option::SetType(this, 0);
  }
  ot::Ip6::Option::SetType(this, 1);
  return (unsigned char *)ot::Ip6::Option::SetLength((uint64_t)this, a2 - 2);
}

_DWORD *ot::Clearable<ot::Ip6::PadOption>::Clear(_DWORD *result)
{
  *__n128 result = 0;
  *(_DWORD *)((char *)result + 3) = 0;
  return result;
}

{
  return ot::Clearable<ot::Ip6::PadOption>::Clear(result);
}

unsigned char *ot::Ip6::Option::SetType(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

{
  return ot::Ip6::Option::SetType(this, a2);
}

uint64_t ot::Ip6::PadOption::InitToPadHeaderWithSize(ot::Ip6::PadOption *this, unsigned __int16 a2)
{
  v3[4] = 0;
  *(_DWORD *)BOOL v3 = a2 % 8;
  if (v3[0]) {
    ot::Ip6::PadOption::InitForPadSize(this, 8 - v3[0]);
  }
  else {
    *(_DWORD *)&v3[1] = 24;
  }
  return *(unsigned int *)&v3[1];
}

ot::Ip6::Mpl *ot::Ip6::Mpl::Mpl(ot::Ip6::Mpl *this, ot::Instance *a2)
{
  *((unsigned char *)this + 140) = 0;
  ot::Coap::MessageQueue::MessageQueue((ot::Ip6::Mpl *)((char *)this + 144));
  ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::TimerMilliIn((ot::Ip6::Mpl *)((char *)this + 152), a2);
  memset(this, 0, 0x8CuLL);
  return this;
}

{
  ot::Ip6::Mpl::Mpl(this, a2);
  return this;
}

uint64_t ot::Ip6::Mpl::HandleRetransmissionTimer(ot::Ip6::Mpl *this)
{
  uint64_t v33 = this;
  int Now = 0;
  int Now = ot::TimerMilli::GetNow(this);
  int DistantFuture = ot::Time::GetDistantFuture((ot::Time *)&Now);
  v28[2] = (char *)this + 144;
  v28[0] = ot::MessageQueue::begin((ot::Ip6::Mpl *)((char *)this + 144));
  v28[1] = v1;
  v27[0] = ot::MessageQueue::end((ot::Ip6::Mpl *)((char *)this + 144));
  v27[1] = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v28, v27))
  {
    __src = (void *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v28);
    ot::Ip6::Mpl::Metadata::ReadFrom((ot::Ip6::Mpl::Metadata *)&v29, (const ot::Message *)__src);
    if (ot::Time::operator<(&Now, &v29))
    {
      int v24 = DistantFuture;
      int v23 = v29;
      int v25 = ot::Min<ot::Time>(DistantFuture, v29);
      int DistantFuture = v25;
    }
    else
    {
      unsigned __int8 TimerExpirations = ot::Ip6::Mpl::GetTimerExpirations(this);
      if (++v30 >= (int)TimerExpirations)
      {
        ot::MessageQueue::Dequeue((ot::Ip6::Mpl *)((char *)this + 144), (ot::Message *)__src);
        if (v30 == TimerExpirations)
        {
          if (v30 > 1u) {
            ot::Message::SetSubType((ot::Buffer *)__src, 5);
          }
          ot::Ip6::Mpl::Metadata::RemoveFrom((ot::Ip6::Mpl::Metadata *)&v29, (ot::Message *)__src);
          unsigned int v6 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
          ot::Ip6::Ip6::EnqueueDatagram(v6, (ot::Message *)__src);
        }
        else
        {
          memcpy(__dst, __src, sizeof(__dst));
          uint64_t v7 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
          ot::MessagePool::GetTotalBufferCount(v7);
          uint64_t v8 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
          ot::MessagePool::GetFreeBufferCount(v8);
          otLogInfoPlat("MPL message free buffer = %p, total buffers = %d, free buffers = %d, , mTransmissionCount = %d", v9, v10, v11, v12, v13, v14, v15, (char)__dst);
          ot::Message::Free((ot::Message *)__src);
        }
      }
      else
      {
        __int16 Length = ot::Message::GetLength((ot::Message *)__src);
        char v21 = ot::Message::Clone((ot::Message *)__src, Length - 12);
        if (v21)
        {
          if (v30 > 1u) {
            ot::Message::SetSubType(v21, 5);
          }
          unsigned int v5 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
          ot::Ip6::Ip6::EnqueueDatagram(v5, v21);
        }
        int v20 = Now;
        ot::Ip6::Mpl::Metadata::GenerateNextTransmissionTime((uint64_t)&v29, Now, 0x40u);
        ot::Ip6::Mpl::Metadata::UpdateIn((ot::Ip6::Mpl::Metadata *)&v29, (ot::Message *)__src);
        v18[2] = DistantFuture;
        v18[1] = v29;
        int v19 = ot::Min<ot::Time>(DistantFuture, v29);
        int DistantFuture = v19;
      }
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v28, v3);
  }
  v18[0] = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v18);
  if (result) {
    return ot::TimerMilli::FireAt((ot::Ip6::Mpl *)((char *)this + 152), DistantFuture);
  }
  return result;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Ip6::MplOption::Init(unsigned char *a1, char a2)
{
  ot::Ip6::Option::SetType(a1, 109);
  if (a2)
  {
    if (a2 != 64) {
      __assert_rtn("Init", "ip6_mpl.cpp", 71, "false");
    }
    uint64_t result = ot::Ip6::Option::SetLength((uint64_t)a1, 4);
  }
  else
  {
    uint64_t result = ot::Ip6::Option::SetLength((uint64_t)a1, 2);
  }
  a1[2] = a2;
  return result;
}

uint64_t ot::Ip6::Mpl::InitOption(ot::Ip6::Mpl *this, ot::Ip6::MplOption *a2, const ot::Ip6::Address *a3)
{
  BOOL v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  MeshLocal16 = (const void *)ot::Mle::Mle::GetMeshLocal16(v3);
  if (ot::Equatable<ot::Ip6::Address>::operator==(a3, MeshLocal16))
  {
    ot::Ip6::MplOption::Init(a2, 0);
  }
  else
  {
    ot::Ip6::MplOption::Init(a2, 64);
    unsigned int v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v5);
    ot::Ip6::MplOption::SetSeedId(a2, Rloc16);
  }
  char v7 = *((unsigned char *)this + 140);
  *((unsigned char *)this + 140) = v7 + 1;
  return ot::Ip6::MplOption::SetSequence((uint64_t)a2, v7);
}

uint64_t ot::Ip6::MplOption::SetSeedId(ot::Ip6::MplOption *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::Ip6::MplOption::SetSeedId(this, a2);
}

uint64_t ot::Ip6::MplOption::SetSequence(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3) = a2;
  return this;
}

{
  return ot::Ip6::MplOption::SetSequence(this, a2);
}

uint64_t ot::Ip6::Mpl::ProcessOption(ot::Ip6::Mpl *this, ot::Message *a2, unsigned __int16 a3, const ot::Ip6::Address *a4, char a5, BOOL *a6)
{
  int v24 = this;
  int v23 = a2;
  unsigned __int16 v22 = a3;
  char v21 = a4;
  char v20 = a5 & 1;
  int v19 = a6;
  unsigned int updated = 0;
  unsigned int updated = ot::Message::Read(a2, a3, v17, 4u);
  if (!updated)
  {
    SeedId__int16 Length = ot::Ip6::MplOption::GetSeedIdLength((ot::Ip6::MplOption *)v17);
    if (SeedIdLength)
    {
      if (SeedIdLength == 64)
      {
        unsigned int updated = ot::Message::Read<ot::Ip6::MplOption>(v23, v22, v17);
        if (updated) {
          return updated;
        }
      }
      else if (SeedIdLength == 128 || SeedIdLength == 192)
      {
        return 6;
      }
    }
    else
    {
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
      if (!ot::Ip6::InterfaceIdentifier::IsLocator(Iid)) {
        return 2;
      }
      char v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
      unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v7);
      ot::Ip6::MplOption::SetSeedId((ot::Ip6::MplOption *)v17, Locator);
    }
    __int16 SeedId = ot::Ip6::MplOption::GetSeedId((ot::Ip6::MplOption *)v17);
    char Sequence = ot::Ip6::MplOption::GetSequence((ot::Ip6::MplOption *)v17);
    unsigned int updated = ot::Ip6::Mpl::UpdateSeedSet(this, SeedId, Sequence);
    if (updated)
    {
      if (v20)
      {
        *int v19 = 0;
        return 0;
      }
    }
    else
    {
      uint64_t v12 = v23;
      __int16 v13 = ot::Ip6::MplOption::GetSeedId((ot::Ip6::MplOption *)v17);
      char v10 = ot::Ip6::MplOption::GetSequence((ot::Ip6::MplOption *)v17);
      ot::Ip6::Mpl::AddBufferedMessage(this, v12, v13, v10, v20 & 1);
    }
  }
  return updated;
}

uint64_t ot::Ip6::MplOption::GetSeedIdLength(ot::Ip6::MplOption *this)
{
  return *((unsigned char *)this + 2) & 0xC0;
}

{
  return ot::Ip6::MplOption::GetSeedIdLength(this);
}

uint64_t ot::Message::Read<ot::Ip6::MplOption>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 6u);
}

{
  return ot::Message::Read<ot::Ip6::MplOption>(a1, a2, a3);
}

uint64_t ot::Ip6::Mpl::UpdateSeedSet(ot::Ip6::Mpl *this, __int16 a2, char a3)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  char v10 = this;
  __dst = this;
  unsigned __int8 v8 = 0;
  unsigned __int8 v7 = 0;
  for (unsigned int i = 0; i < 0x23; ++i)
  {
    if (!*((unsigned char *)this + 4 * i + 3))
    {
      if (!v11) {
        uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
      }
      __dst = (ot::Ip6::Mpl *)((char *)this + 4 * i);
      break;
    }
    if (*((unsigned __int16 *)this + 2 * i) != *(unsigned __int16 *)v10)
    {
      if (a2 == *(_WORD *)v10 && !v11)
      {
        uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
        ++v8;
      }
      if (v7 < (int)v8)
      {
        __dst = v10;
        unsigned __int8 v7 = v8;
      }
      char v10 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
      unsigned __int8 v8 = 0;
    }
    if (a2 == *((_WORD *)this + 2 * i))
    {
      if (a3 == *((unsigned char *)this + 4 * i + 2))
      {
        *((unsigned char *)this + 4 * i + 3) = 5;
        return 2;
      }
      if (!v11 && ot::SerialNumber::IsLess<unsigned char>(a3, *((unsigned char *)this + 4 * i + 2)))
      {
        uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 4 * i);
        ++v8;
      }
    }
    ++v8;
  }
  if (*((unsigned char *)__dst + 3))
  {
    if (!v8) {
      __assert_rtn("UpdateSeedSet", "ip6_mpl.cpp", 232, "curCount != 0");
    }
    if (a2 == *(_WORD *)v10 && !v11)
    {
      uint64_t v11 = (ot::Ip6::Mpl *)((char *)this + 140);
      ++v8;
    }
    if (v7 < (int)v8)
    {
      __dst = v10;
      unsigned __int8 v7 = v8;
    }
    if (v7 <= 1u) {
      return 2;
    }
    if (v11)
    {
      if (v11 <= this || a2 != *((_WORD *)v11 - 2)) {
        return 2;
      }
    }
    else
    {
      uint64_t v11 = __dst;
    }
  }
  if (__dst <= v11)
  {
    if (__dst < v11)
    {
      if (__dst < this) {
        __assert_rtn("UpdateSeedSet", "ip6_mpl.cpp", 270, "evict >= mSeedSet");
      }
      memmove(__dst, (char *)__dst + 4, 4 * (((ot::Ip6::Mpl *)((char *)v11 - 4) - __dst) / 4));
      uint64_t v11 = (ot::Ip6::Mpl *)((char *)v11 - 4);
    }
  }
  else
  {
    if (v11 < this) {
      __assert_rtn("UpdateSeedSet", "ip6_mpl.cpp", 265, "insert >= mSeedSet");
    }
    memmove((char *)v11 + 4, v11, 4 * ((__dst - v11) / 4));
  }
  *(_WORD *)uint64_t v11 = a2;
  *((unsigned char *)v11 + 2) = a3;
  *((unsigned char *)v11 + 3) = 5;
  BOOL v3 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
  ot::TimeTicker::RegisterReceiver(v3, 7);
  return v12;
}

uint64_t ot::Ip6::MplOption::GetSeedId(ot::Ip6::MplOption *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return ot::Ip6::MplOption::GetSeedId(this);
}

uint64_t ot::Ip6::MplOption::GetSequence(ot::Ip6::MplOption *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::Ip6::MplOption::GetSequence(this);
}

void ot::Ip6::Mpl::AddBufferedMessage(ot::Ip6::Mpl *this, ot::Message *a2, __int16 a3, char a4, char a5)
{
  uint64_t v33 = this;
  uint64_t v32 = a2;
  __int16 v31 = a3;
  char v30 = a4;
  char v29 = a5 & 1;
  int v28 = 0;
  v27 = 0;
  unsigned __int8 v21 = 0;
  char TimerExpirations = ot::Ip6::Mpl::GetTimerExpirations(this);
  if (v6 | (TimerExpirations == 0)) {
    char v7 = 0;
  }
  else {
    char v7 = 1;
  }
  if (v7)
  {
    v27 = ot::Message::Clone(v32);
    if (!v27)
    {
      int v28 = 3;
      goto LABEL_13;
    }
    unsigned __int8 v8 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::MessagePool::GetTotalBufferCount(v8);
    uint64_t v9 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::MessagePool::GetFreeBufferCount(v9);
    otLogInfoPlat("MPL AddBufferedMessage: Sequence=%d, SeedID=0x%x, IsOutBound=%s, buffer = %p, total buffers = %d, free buffers = %d", v10, v11, v12, v13, v14, v15, v16, v30);
    if ((v29 & 1) == 0)
    {
      ot::Message::Read<unsigned char>(v32, 7u, (char *)&v21);
      IgnoreError();
      int v18 = v21--;
      if (v18 <= 1)
      {
        int v28 = 2;
        goto LABEL_13;
      }
      unsigned __int8 v17 = (ot::TimerMilli *)ot::Message::Write<unsigned char>(v27, 7u, (char *)&v21);
    }
    __int16 v23 = v31;
    char v24 = v30;
    BOOL v25 = (v29 & 1) != 0;
    char v26 = 0;
    int Now = ot::TimerMilli::GetNow(v17);
    ot::Ip6::Mpl::Metadata::GenerateNextTransmissionTime((uint64_t)&v22, Now, 0x40u);
    int v28 = ot::Ip6::Mpl::Metadata::AppendTo((ot::Ip6::Mpl::Metadata *)&v22, v27);
    if (!v28)
    {
      ot::MessageQueue::Enqueue((ot::Ip6::Mpl *)((char *)this + 144), v27);
      ot::TimerMilli::FireAtIfEarlier((int *)this + 38, v22);
    }
  }
LABEL_13:
  if (v28)
  {
    if (v27) {
      ot::Message::Free(v27);
    }
  }
}

BOOL ot::SerialNumber::IsLess<unsigned char>(char a1, char a2)
{
  return (char)(a1 - a2) < 0;
}

{
  return ot::SerialNumber::IsLess<unsigned char>(a1, a2);
}

uint64_t ot::Ip6::Mpl::RemoveMatchedMessage(ot::Ip6::Mpl *this, ot::Message *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  char v14 = 0;
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length)
  {
    unsigned char v12[2] = (char *)this + 144;
    v12[0] = ot::MessageQueue::begin((ot::Ip6::Mpl *)((char *)this + 144));
    v12[1] = v2;
    v11[0] = ot::MessageQueue::end((ot::Ip6::Mpl *)((char *)this + 144));
    v11[1] = v3;
    while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v12, v11))
    {
      uint64_t v10 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v12);
      unsigned __int16 v4 = ot::Message::GetLength(v10);
      if ((unint64_t)v4 - 12 >= Length)
      {
        unsigned __int8 v8 = v15;
        __int16 v6 = ot::Message::GetLength(v10);
        if (ot::Message::CompareBytes(v8, 0, v10, v6 - 12 - Length, Length, 0))
        {
          ot::MessageQueue::DequeueAndFree((ot::Ip6::Mpl *)((char *)this + 144), v10);
          char v14 = 1;
          return v14 & 1;
        }
      }
      ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v12, v5);
    }
  }
  return v14 & 1;
}

ot::InstanceLocator *ot::Ip6::Mpl::HandleTimeTick(ot::InstanceLocator *this)
{
  char v7 = 0;
  int v6 = 0;
  for (int i = 0; ; ++i)
  {
    BOOL v4 = 0;
    if (i < 35) {
      BOOL v4 = *((unsigned char *)this + 4 * i + 3) != 0;
    }
    if (!v4) {
      break;
    }
    if (--*((unsigned char *)this + 4 * i + 3))
    {
      uint64_t v1 = v6++;
      *((_DWORD *)this + v1) = *((_DWORD *)this + i);
      char v7 = 1;
    }
  }
  while (1)
  {
    BOOL v3 = 0;
    if (v6 < 35) {
      BOOL v3 = *((unsigned char *)this + 4 * v6 + 3) != 0;
    }
    if (!v3) {
      break;
    }
    *((unsigned char *)this + 4 * v6++ + 3) = 0;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return (ot::InstanceLocator *)ot::TimeTicker::UnregisterReceiver(v2, 7);
  }
  return this;
}

uint64_t ot::Ip6::Mpl::GetTimerExpirations(ot::Ip6::Mpl *this)
{
  unsigned __int8 v5 = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  unsigned int Role = ot::Mle::Mle::GetRole(v1);
  if (Role > 1)
  {
    if (Role == 2)
    {
      return 0;
    }
    else if (Role == 4 || Role == 3)
    {
      return 2;
    }
  }
  return v5;
}

uint64_t ot::Ip6::Mpl::Metadata::GenerateNextTransmissionTime(uint64_t a1, int a2, unsigned __int8 a3)
{
  int v7 = a2;
  if (a3) {
    unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0, a3);
  }
  else {
    unsigned __int8 Uint8InRange = 0;
  }
  uint64_t result = ot::Time::operator+(&v7, *(unsigned __int8 *)(a1 + 8) + Uint8InRange);
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 8) = a3 - Uint8InRange;
  return result;
}

uint64_t ot::Ip6::Mpl::Metadata::AppendTo(ot::Ip6::Mpl::Metadata *this, ot::Message *a2)
{
  return ot::Message::Append<ot::Ip6::Mpl::Metadata>(a2, (char *)this);
}

{
  return ot::Ip6::Mpl::Metadata::AppendTo(this, a2);
}

void ot::Ip6::Mpl::Metadata::ReadFrom(ot::Ip6::Mpl::Metadata *this, const ot::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0xCuLL) {
    __assert_rtn("ReadFrom", "ip6_mpl.cpp", 479, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Ip6::Mpl::Metadata>(a2, Length - 12, (char *)this);
  IgnoreError();
}

uint64_t ot::Ip6::Mpl::Metadata::UpdateIn(ot::Ip6::Mpl::Metadata *this, ot::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  return ot::Message::Write<ot::Ip6::Mpl::Metadata>(a2, Length - 12, (char *)this);
}

uint64_t ot::Ip6::Mpl::Metadata::RemoveFrom(ot::Ip6::Mpl::Metadata *this, ot::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  uint64_t result = ot::Message::SetLength(a2, Length - 12);
  if (result) {
    __assert_rtn("RemoveFrom", "ip6_mpl.cpp", 485, "false");
  }
  return result;
}

uint64_t ot::Message::Read<ot::Ip6::Mpl::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xCu);
}

{
  return ot::Message::Read<ot::Ip6::Mpl::Metadata>(a1, a2, a3);
}

uint64_t ot::Message::Write<ot::Ip6::Mpl::Metadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0xCu);
}

{
  return ot::Message::Write<ot::Ip6::Mpl::Metadata>(a1, a2, a3);
}

uint64_t ot::Message::Append<ot::Ip6::Mpl::Metadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0xCu);
}

{
  return ot::Message::Append<ot::Ip6::Mpl::Metadata>(a1, a2);
}

uint64_t ot::TimerMilliIn<ot::Ip6::Mpl,&ot::Ip6::Mpl::HandleRetransmissionTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Ip6::Mpl *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Mpl>(a1);
  return ot::Ip6::Mpl::HandleRetransmissionTimer(v2);
}

ot::Uptime *ot::Uptime::Uptime(ot::Uptime *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *(_DWORD *)this = ot::TimerMilli::GetNow(v2);
  *((_DWORD *)this + 1) = 0;
  ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::TimerMilliIn((ot::Uptime *)((char *)this + 8), a2);
  int v5 = ot::Time::operator+(this, 0x40000000);
  ot::TimerMilli::FireAt((ot::Uptime *)((char *)this + 8), v5);
  return this;
}

{
  ot::Uptime::Uptime(this, a2);
  return this;
}

uint64_t ot::Uptime::HandleTimer(ot::Uptime *this)
{
  int v6 = this;
  int FireTime = ot::Timer::GetFireTime((ot::Uptime *)((char *)this + 8));
  if (ot::Time::operator==(&FireTime, this)) {
    ++*((_DWORD *)this + 1);
  }
  int v3 = ot::Timer::GetFireTime((ot::Uptime *)((char *)this + 8));
  int v4 = ot::Time::operator+(&v3, 0x40000000);
  return ot::TimerMilli::FireAt((ot::Uptime *)((char *)this + 8), v4);
}

ot::TimerMilli *ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::HandleTimer);
  return a1;
}

unint64_t ot::Uptime::GetUptime(ot::Uptime *this)
{
  unsigned __int8 v8 = this;
  int Now = ot::TimerMilli::GetNow(this);
  unsigned int v6 = 0;
  unsigned int v6 = *((_DWORD *)this + 1);
  int FireTime = ot::Timer::GetFireTime((ot::Uptime *)((char *)this + 8));
  BOOL v4 = 0;
  if (ot::Time::operator==(&FireTime, this)) {
    BOOL v4 = ot::Time::operator>=(&Now, (int *)this);
  }
  if (v4) {
    ++v6;
  }
  unint64_t v2 = (unint64_t)v6 << 32;
  return v2 + ot::Time::operator-(&Now, this);
}

ot::StringWriter *ot::Uptime::GetUptime(ot::Uptime *this, char *a2, __int16 a3)
{
  uint64_t v9 = this;
  unsigned __int8 v8 = a2;
  __int16 v7 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v6, a2, a3);
  unint64_t Uptime = ot::Uptime::GetUptime(this);
  return ot::Uptime::UptimeToString(Uptime, (ot::StringWriter *)v6, (ot::StringWriter *)1);
}

ot::StringWriter *ot::Uptime::UptimeToString(unint64_t this, ot::StringWriter *a2, ot::StringWriter *a3)
{
  unint64_t v11 = this;
  uint64_t v10 = a2;
  char v9 = a3 & 1;
  unint64_t v8 = this / 0x5265C00;
  int v7 = 0;
  if (this / 0x5265C00)
  {
    ot::StringWriter::Append(v10, "%lud.", v8);
    v11 -= 86400000 * v8;
  }
  int v7 = v11;
  unsigned __int16 Remainder = ot::DivideAndGetRemainder((ot *)&v7, (unsigned int *)0x36EE80);
  unsigned __int16 v5 = ot::DivideAndGetRemainder((ot *)&v7, (unsigned int *)0xEA60);
  unsigned __int16 v4 = ot::DivideAndGetRemainder((ot *)&v7, (unsigned int *)0x3E8);
  uint64_t result = ot::StringWriter::Append(v10, "%02u:%02u:%02u", Remainder, v5, v4);
  if (v9) {
    return ot::StringWriter::Append(v10, ".%03u", (unsigned __int16)v7);
  }
  return result;
}

uint64_t ot::DivideAndGetRemainder(ot *this, unsigned int *a2)
{
  unsigned int v3 = *(_DWORD *)this / a2;
  *(_DWORD *)this %= a2;
  return (unsigned __int16)v3;
}

uint64_t ot::TimerMilliIn<ot::Uptime,&ot::Uptime::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  unint64_t v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(a1);
  return ot::Uptime::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Uptime>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(a1);
}

ot::Ip6::Netif *ot::Ip6::Netif::Netif (ot::Ip6::Netif *this, ot::Instance *a2)
{
  *((unsigned char *)this + 16) = 0;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 3);
  ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Pool((uint64_t *)this + 5);
  ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Pool((uint64_t *)this + 38);
  return this;
}

{
  ot::Ip6::Netif::Netif (this, a2);
  return this;
}

uint64_t *ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t i;

  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  for (int i = (uint64_t)(a1 + 1); (uint64_t *)i != a1 + 33; i += 32)
    ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(a1, i);
  return a1;
}

uint64_t *ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t i;

  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  for (int i = (uint64_t)(a1 + 1); (uint64_t *)i != a1 + 49; i += 32)
    ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Push(a1, i);
  return a1;
}

BOOL ot::Ip6::Netif::IsMulticastSubscribed(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::ContainsMatching<ot::Ip6::Address>((ot::Ip6::Netif *)((char *)this + 8), a2);
}

BOOL ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::ContainsMatching<ot::Ip6::Address>(ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(a1, a2) != 0;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::ContainsMatching<ot::Ip6::Address>(a1, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::SubscribeAllNodesMulticast(ot::Ip6::Netif *this)
{
  ot::AsNonConst<otNetifMulticastAddress>();
  unsigned __int16 v5 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v1);
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Contains((ot::Ip6::Netif *)((char *)this + 8), v5);
  if ((result & 1) == 0)
  {
    ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail();
    if (v3) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(v3, (uint64_t)v5);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead((void *)this + 1, (uint64_t)v5);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 1, v5, 0);
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otNetifMulticastAddress>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

BOOL ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Contains(ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  v3[2] = a1;
  v3[1] = a2;
  v3[0] = 0;
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find((ot::Ip6::Netif::MulticastAddress **)a1, a2, v3) == 0;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Contains(a1, a2);
}

void ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail()
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Netif::MulticastAddress>>();
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail(v0);
  ot::AsNonConst<ot::Ip6::Netif::MulticastAddress>();
}

{
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail();
}

void *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead(result, a2);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(result, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::SignalMulticastAddressChange(ot::InstanceLocator *a1, char a2, ot::Ip6::Netif::MulticastAddress *a3, ot::Ip6::Netif::MulticastAddress *a4)
{
  uint64_t v15 = a1;
  char v14 = a2 & 1;
  uint64_t v13 = a3;
  uint64_t v12 = a4;
  unsigned __int16 v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
  if ((v14 & 1) == 1) {
    uint64_t v5 = 4096;
  }
  else {
    uint64_t v5 = 0x2000;
  }
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::Notifier::Signal(v4, v5);
  for (int i = v13; i != v12; int i = result)
  {
    uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(a1);
    ot::Utils::HistoryTracker::RecordAddressEvent(v7, v14 & 1, i, 0);
    if (ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)a1 + 3))
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v10, i);
      char v9 = v10;
      ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent &>((uint64_t)a1 + 24, &v9, &v14);
    }
    uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(i);
  }
  return result;
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::UnsubscribeAllNodesMulticast(ot::Ip6::Netif *this)
{
  v7[1] = this;
  v7[0] = 0;
  ot::AsNonConst<otNetifMulticastAddress>();
  unsigned int v6 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v1);
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find((uint64_t)this + 8, v6, v7);
  if (!result)
  {
    unsigned __int16 v4 = v7[0];
    ot::AsNonConst<otNetifMulticastAddress>();
    ot::AsCoreTypePtr<otNetifMulticastAddress>();
    if (v4 == v3) {
      __assert_rtn("UnsubscribeAllNodesMulticast", "netif.cpp", 175, "prev != AsCoreTypePtr(AsNonConst(&kRealmLocalAllRoutersMulticastAddress))");
    }
    if (v7[0]) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)v7[0], 0);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Clear((void *)this + 1);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 0, v6, 0);
  }
  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find(uint64_t a1, ot::Ip6::Netif::MulticastAddress *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Netif::MulticastAddress>>();
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find(v3, a2, a3);
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find(a1, a2, a3);
}

void *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Clear(result);
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::SubscribeAllRoutersMulticast(ot::Ip6::Netif *this)
{
  v9[1] = this;
  v9[0] = 0;
  ot::AsNonConst<otNetifMulticastAddress>();
  unint64_t v8 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v1);
  ot::AsNonConst<otNetifMulticastAddress>();
  uint64_t v7 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v2);
  ot::AsNonConst<otNetifMulticastAddress>();
  unsigned int v6 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v3);
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find((uint64_t)this + 8, v7, v9);
  if (result) {
    __assert_rtn("SubscribeAllRoutersMulticast", "netif.cpp", 202, "false");
  }
  if (v9[0] != v6)
  {
    if (v9[0]) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)v9[0], (uint64_t)v8);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead((void *)this + 1, (uint64_t)v8);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 1, v8, v7);
  }
  return result;
}

ot::Ip6::Netif::MulticastAddress *ot::Ip6::Netif::UnsubscribeAllRoutersMulticast(ot::Ip6::Netif *this)
{
  v7[1] = this;
  v7[0] = 0;
  ot::AsNonConst<otNetifMulticastAddress>();
  unsigned int v6 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v1);
  ot::AsNonConst<otNetifMulticastAddress>();
  uint64_t v5 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v2);
  uint64_t result = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find((uint64_t)this + 8, v6, v7);
  if (!result)
  {
    if (v7[0]) {
      ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)v7[0], (uint64_t)v5);
    }
    else {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::SetHead((void *)this + 1, (uint64_t)v5);
    }
    return ot::Ip6::Netif::SignalMulticastAddressChange(this, 0, v6, v5);
  }
  return result;
}

BOOL ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet(a1);
}

ot::Ip6::AddressInfo *ot::Ip6::AddressInfo::AddressInfo(ot::Ip6::AddressInfo *this, const ot::Ip6::Netif::MulticastAddress *a2)
{
  return this;
}

{
  ot::Ip6::Address *Address;
  char Scope;
  ot::Ip6::AddressInfo *result;

  *(void *)this = ot::Ip6::Netif::MulticastAddress::GetAddress(a2);
  *((unsigned char *)this + 8) = 0x80;
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(a2);
  Scope = ot::Ip6::Address::GetScope(Address);
  uint64_t result = this;
  *((unsigned char *)this + 9) = *((unsigned char *)this + 9) & 0xF0 | Scope & 0xF;
  *((unsigned char *)this + 9) &= ~0x10u;
  return result;
}

uint64_t ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent &>(uint64_t a1, void *a2, unsigned char *a3)
{
  return (*(uint64_t (**)(void, BOOL, void))a1)(*a2, (*a3 & 1) != 0, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent &>(a1, a2, a3);
}

uint64_t ot::Ip6::Netif::MulticastAddress::GetNext(ot::Ip6::Netif::MulticastAddress *this)
{
  return *((void *)this + 2);
}

{
  return ot::Ip6::Netif::MulticastAddress::GetNext(this);
}

BOOL ot::Ip6::Netif::IsMulticastAddressExternal(ot::Ip6::Netif *this, const ot::Ip6::Netif::MulticastAddress *a2)
{
  return ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::IsPoolEntry((uint64_t)this + 304, (unint64_t)a2);
}

BOOL ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::IsPoolEntry(uint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1 + 8 <= a2) {
    return a2 < ot::GetArrayEnd<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>(a1 + 8);
  }
  return v3;
}

{
  return ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::IsPoolEntry(a1, a2);
}

uint64_t ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif *this, ot::Ip6::Netif::MulticastAddress *a2)
{
  int v19 = this;
  int v18 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Add((uint64_t *)this + 1, a2);
  if (!result)
  {
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(v18);
    ot::Ip6::Address::ToString(Address, (ot::StringWriter *)v20);
    char v4 = ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    otLogDebgPlat("Netif::SubscribeMulticast address:%s", v5, v6, v7, v8, v9, v10, v11, v4);
    uint64_t v12 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v12, 4096);
    uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v13, 1, v18, 0);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if (result)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v17, v18);
      uint64_t v16 = v17;
      char v15 = 1;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>((uint64_t)this + 24, &v16, &v15);
    }
  }
  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Add(uint64_t *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Contains((ot::Ip6::Netif::MulticastAddress *)a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Push(a1, (uint64_t)a2);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Add(a1, a2);
}

uint64_t ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>(uint64_t a1, void *a2, unsigned char *a3)
{
  return (*(uint64_t (**)(void, BOOL, void))a1)(*a2, (*a3 & 1) != 0, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>(a1, a2, a3);
}

uint64_t ot::Ip6::Netif::UnsubscribeMulticast(ot::Ip6::Netif *this, const ot::Ip6::Netif::MulticastAddress *a2)
{
  int v19 = this;
  int v18 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Remove((ot::Ip6::Netif *)((char *)this + 8), a2);
  if (!result)
  {
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(v18);
    ot::Ip6::Address::ToString(Address, (ot::StringWriter *)v20);
    char v4 = ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    otLogDebgPlat("Netif::UnsubscribeMulticast address:%s", v5, v6, v7, v8, v9, v10, v11, v4);
    uint64_t v12 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v12, 0x2000);
    uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v13, 0, v18, 0);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if (result)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v17, v18);
      uint64_t v16 = v17;
      char v15 = 0;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>((uint64_t)this + 24, &v16, &v15);
    }
  }
  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Remove(ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  v5[2] = a1;
  v5[1] = a2;
  v5[0] = 0;
  unsigned int v4 = ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::PopAfter((ot::Ip6::Netif::MulticastAddress **)a1, v5[0]);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Remove(a1, a2);
}

uint64_t ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  uint64_t v34 = this;
  uint64_t v33 = a2;
  unsigned int v32 = 0;
  ot::AsNonConst<otNetifMulticastAddress>();
  __int16 v31 = (ot::Ip6::Netif::MulticastAddress *)ot::AsCoreType<otNetifMulticastAddress>(v2);
  char v30 = 0;
  if (ot::Ip6::Address::IsMulticast(v33))
  {
    ot::Ip6::Address::ToString(v33, (ot::StringWriter *)v36);
    char v23 = ot::String<(unsigned short)40>::AsCString((uint64_t)v36);
    ot::Ip6::Netif::IsMulticastSubscribed(this, v33);
    otLogDebgPlat("Netif::SubscribeExternalMulticast address:%s isAlready:%d", v3, v4, v5, v6, v7, v8, v9, v23);
    if (ot::Ip6::Netif::IsMulticastSubscribed(this, v33))
    {
      return 24;
    }
    else
    {
      for (int i = v31; i; int i = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(i))
      {
        Address = (const void *)ot::Ip6::Netif::MulticastAddress::GetAddress(i);
        if (!ot::Unequatable<ot::Ip6::Address>::operator!=(Address, v33)) {
          return 37;
        }
      }
      char v30 = ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Allocate((ot::Ip6::Netif::ExternalMulticastAddress **)this + 38);
      if (v30)
      {
        *(_OWORD *)char v30 = *(_OWORD *)v33;
        *((unsigned char *)v30 + 24) = 0;
        ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Push((uint64_t *)this + 1, (uint64_t)v30);
        uint64_t v11 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
        ot::Utils::HistoryTracker::RecordAddressEvent(v11, 1, v30, 3);
        ot::Ip6::Address::ToString(v33, (ot::StringWriter *)v35);
        char v12 = ot::String<(unsigned short)40>::AsCString((uint64_t)v35);
        otLogDebgPlat("Netif::SubscribeExternalMulticast Signal MulticastSubscribed for address:%s", v13, v14, v15, v16, v17, v18, v19, v12);
        char v20 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
        ot::Notifier::Signal(v20, 4096);
        if (ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3))
        {
          unsigned __int8 v21 = (_OWORD *)ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Ip6::Netif::MulticastAddress *)v28);
          *unsigned __int8 v21 = *(_OWORD *)v33;
          ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v27, (const ot::Ip6::Netif::MulticastAddress *)v28);
          char v26 = v27;
          char v25 = 1;
          ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>((uint64_t)this + 24, &v26, &v25);
        }
      }
      else
      {
        return 3;
      }
    }
  }
  else
  {
    return 7;
  }
  return v32;
}

ot::Ip6::Netif::ExternalMulticastAddress *ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Allocate(ot::Ip6::Netif::ExternalMulticastAddress **a1)
{
  return ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Pop(a1);
}

{
  return ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Allocate(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(a2, *a1);
  *a1 = a2;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Push(a1, a2);
}

uint64_t ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  unsigned int v32 = this;
  __int16 v31 = a2;
  unsigned int v30 = 0;
  char v29 = 0;
  int v28 = 0;
  ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v34);
  char v22 = ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this + 8, v31, &v28);
  otLogDebgPlat("Netif::unsubscribeExternalMulticast address:%s entry:%d", v2, v3, v4, v5, v6, v7, v8, v22);
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this + 8, v31, &v28);
  char v29 = v9;
  if (v9)
  {
    if (ot::Ip6::Netif::IsMulticastAddressExternal(this, v29))
    {
      ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::PopAfter((ot::Ip6::Netif::MulticastAddress **)this + 1, v28);
      uint64_t v10 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
      ot::Utils::HistoryTracker::RecordAddressEvent(v10, 0, v29, 3);
      ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Free((uint64_t *)this + 38, (uint64_t)v29);
      ot::Ip6::Address::ToString(v31, (ot::StringWriter *)v33);
      char v21 = ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
      ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::GetSize();
      otLogDebgPlat("Netif::unSubscribeExternalMulticast Signal multicastUnsubscribed for  address:%s poolSize:%d", v11, v12, v13, v14, v15, v16, v17, v21);
      uint64_t v18 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v18, 0x2000);
      if (ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3))
      {
        Address = (_OWORD *)ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Ip6::Netif::MulticastAddress *)v27);
        _OWORD *Address = *(_OWORD *)v31;
        ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v26, (const ot::Ip6::Netif::MulticastAddress *)v27);
        char v25 = v26;
        char v24 = 0;
        ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>((uint64_t)this + 24, &v25, &v24);
      }
    }
    else
    {
      return 37;
    }
  }
  else
  {
    return 23;
  }
  return v30;
}

void ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(uint64_t a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Netif::MulticastAddress>>();
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(v3, a2, a3);
  ot::AsNonConst<ot::Ip6::Netif::MulticastAddress>();
}

{
  ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(a1, a2, a3);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::PopAfter(ot::Ip6::Netif::MulticastAddress **a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Pop(a1);
  }
  ot::Ip6::Netif::MulticastAddress::GetNext(a2);
  uint64_t v5 = v2;
  if (v2)
  {
    ot::Ip6::Netif::MulticastAddress::GetNext(v2);
    ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext((uint64_t)a2, v3);
  }
  return v5;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::PopAfter(a1, a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Free(uint64_t *a1, uint64_t a2)
{
  return ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Push(a1, a2);
}

{
  return ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::Free(a1, a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::GetSize()
{
  return 12;
}

{
  return ot::Pool<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>::GetSize();
}

void ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses(ot::Ip6::Netif *this)
{
  for (int i = (ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead((uint64_t)this + 8);
        i;
        int i = v5)
  {
    ot::Ip6::Netif::MulticastAddress::GetNext(i);
    uint64_t v5 = v1;
    if (ot::Ip6::Netif::IsMulticastAddressExternal(this, i))
    {
      Address = (const ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(i);
      ot::Ip6::Netif::UnsubscribeExternalMulticast(this, Address);
      IgnoreError();
    }
  }
}

void ot::Ip6::Netif::MulticastAddress::GetNext(ot::Ip6::Netif::MulticastAddress *this)
{
}

{
  ot::Ip6::Netif::MulticastAddress::GetNext(this);
}

uint64_t ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif *this, ot::Ip6::Netif::UnicastAddress *a2)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Add((uint64_t *)this, (uint64_t)a2);
  if (!result)
  {
    uint64_t v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    if (*((char *)v10 + 18) >= 0) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = 32;
    }
    ot::Notifier::Signal(v3, v4);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v5, 1, v10);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if (result)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v9, v10);
      uint64_t v8 = v9;
      char v7 = 1;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>((uint64_t)this + 24, &v8, &v7);
    }
  }
  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(a1, a2);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Add(a1, a2);
}

ot::Ip6::AddressInfo *ot::Ip6::AddressInfo::AddressInfo(ot::Ip6::AddressInfo *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  return this;
}

{
  char Scope;
  ot::Ip6::AddressInfo *result;

  *(void *)this = a2;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 16);
  Scope = ot::Ip6::Netif::UnicastAddress::GetScope(a2);
  uint64_t result = this;
  *((unsigned char *)this + 9) = *((unsigned char *)this + 9) & 0xF0 | Scope & 0xF;
  *((unsigned char *)this + 9) = *((unsigned char *)this + 9) & 0xEF | (16 * (*((unsigned char *)a2 + 18) & 1));
  return result;
}

uint64_t ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t result = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Remove((uint64_t *)this, (uint64_t)a2);
  if (!result)
  {
    uint64_t v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    if (*((char *)v10 + 18) >= 0) {
      uint64_t v4 = 2;
    }
    else {
      uint64_t v4 = 64;
    }
    ot::Notifier::Signal(v3, v4);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
    ot::Utils::HistoryTracker::RecordAddressEvent(v5, 0, v10);
    uint64_t result = ot::CallbackBase<void (*)(otIp6AddressInfo const*,BOOL,void *)>::IsSet((void *)this + 3);
    if (result)
    {
      ot::Ip6::AddressInfo::AddressInfo((ot::Ip6::AddressInfo *)v9, v10);
      uint64_t v8 = v9;
      char v7 = 0;
      return ot::Callback<void (*)(otIp6AddressInfo const*,BOOL,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::AddressInfo *,ot::Ip6::Netif::AddressEvent>((uint64_t)this + 24, &v8, &v7);
    }
  }
  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Remove(uint64_t *a1, uint64_t a2)
{
  v5[2] = (uint64_t)a1;
  v5[1] = a2;
  v5[0] = 0;
  unsigned int v4 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find((uint64_t)a1, a2, v5);
  if (!v4) {
    ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Remove(a1, a2);
}

uint64_t ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  unsigned int v31 = 0;
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
  if (ot::Ip6::Address::IsMulticast(Address))
  {
    return 7;
  }
  else
  {
    uint64_t v3 = (ot::Ip6::Netif::UnicastAddress *)ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
    ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this, v3);
    char v29 = v4;
    if (v4)
    {
      if (ot::Ip6::Netif::IsUnicastAddressExternal(this, v4))
      {
        *((unsigned char *)v29 + 16) = *((unsigned char *)a2 + 16);
        *((unsigned char *)v29 + 17) = *((unsigned char *)a2 + 17);
        *((unsigned char *)v29 + 18) = *((unsigned char *)v29 + 18) & 0xFE | *((unsigned char *)a2 + 18) & 1;
        *((unsigned char *)v29 + 18) = *((unsigned char *)v29 + 18) & 0xFD | (2 * ((*((unsigned char *)a2 + 18) & 2) != 0));
      }
      else
      {
        return 24;
      }
    }
    else
    {
      uint64_t v5 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
      if (ot::Ip6::Address::IsLinkLocal(v5))
      {
        return 7;
      }
      else
      {
        unsigned int v30 = (ot::Ip6::Netif::UnicastAddress *)ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Allocate((uint64_t *)this + 5);
        if (v30)
        {
          *(_OWORD *)unsigned int v30 = *(_OWORD *)a2;
          *((_OWORD *)v30 + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_OWORD *)a2 + 1);
          ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push((uint64_t *)this, (uint64_t)v30);
          uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
          ot::Utils::HistoryTracker::RecordAddressEvent(v6, 1, v30);
          char v7 = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v30);
          if (ne_tunnel_add_address(v7, *((unsigned __int8 *)v30 + 16), *((unsigned char *)v30 + 18) & 1))
          {
            uint64_t v17 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v30);
            ot::Ip6::Address::ToString(v17, (ot::StringWriter *)v33);
            char v18 = ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
            otLogWarnPlat("[ne_tunnel] Failed to add %s/%u preferred:%d ret:%d", v19, v20, v21, v22, v23, v24, v25, v18);
          }
          else
          {
            uint64_t v8 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v30);
            ot::Ip6::Address::ToString(v8, (ot::StringWriter *)v34);
            char v9 = ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
            otLogInfoPlat("[ne_tunnel] Added %s/%u preferred:%d", v10, v11, v12, v13, v14, v15, v16, v9);
          }
          char v26 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
          ot::Notifier::Signal(v26, 1);
        }
        else
        {
          return 3;
        }
      }
    }
  }
  return v31;
}

void ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(uint64_t a1, ot::Ip6::Netif::UnicastAddress *a2)
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Netif::UnicastAddress>>();
  ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(v2, a2);
  ot::AsNonConst<ot::Ip6::Netif::UnicastAddress>();
}

{
  ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(a1, a2);
}

BOOL ot::Ip6::Netif::IsUnicastAddressExternal(ot::Ip6::Netif *this, const ot::Ip6::Netif::UnicastAddress *a2)
{
  return ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::IsPoolEntry((uint64_t)this + 40, (unint64_t)a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Allocate(uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Pop(a1);
}

{
  return ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Allocate(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::SetNext(a2, *a1);
  *a1 = a2;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(a1, a2);
}

uint64_t ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  unsigned int v30 = this;
  char v29 = a2;
  unsigned int v28 = 0;
  v27 = 0;
  char v26 = 0;
  ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)this, a2, &v26);
  v27 = v2;
  if (v2)
  {
    if (ot::Ip6::Netif::IsUnicastAddressExternal(this, v27))
    {
      ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::PopAfter((uint64_t *)this, (uint64_t)v26);
      uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
      ot::Utils::HistoryTracker::RecordAddressEvent(v3, 0, v27);
      Address = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v27);
      if (ne_tunnel_remove_address(Address))
      {
        uint64_t v14 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v27);
        ot::Ip6::Address::ToString(v14, (ot::StringWriter *)v31);
        char v15 = ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
        otLogWarnPlat("[ne_tunnel] Failed to remove %s ret:%d", v16, v17, v18, v19, v20, v21, v22, v15);
      }
      else
      {
        uint64_t v5 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v27);
        ot::Ip6::Address::ToString(v5, (ot::StringWriter *)v32);
        char v6 = ot::String<(unsigned short)40>::AsCString((uint64_t)v32);
        otLogInfoPlat("[ne_tunnel] Removed %s", v7, v8, v9, v10, v11, v12, v13, v6);
      }
      ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Free((uint64_t *)this + 5, (uint64_t)v27);
      uint64_t v23 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v23, 2);
    }
    else
    {
      return 37;
    }
  }
  else
  {
    return 23;
  }
  return v28;
}

void ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(uint64_t a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::UnicastAddress **a3)
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Netif::UnicastAddress>>();
  ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(v3, a2, a3);
  ot::AsNonConst<ot::Ip6::Netif::UnicastAddress>();
}

{
  ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Pop(a1);
  }
  uint64_t Next = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(Next);
    ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::SetNext(a2, v2);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::PopAfter(a1, a2);
}

uint64_t ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Free(uint64_t *a1, uint64_t a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Push(a1, a2);
}

{
  return ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::Free(a1, a2);
}

void ot::Ip6::Netif::RemoveAllExternalUnicastAddresses(ot::Ip6::Netif *this)
{
  for (int i = (ot::Ip6::Netif::UnicastAddress *)ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::GetHead((uint64_t)this);
        i;
        int i = (ot::Ip6::Netif::UnicastAddress *)Next)
  {
    uint64_t Next = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext((uint64_t)i);
    if (ot::Ip6::Netif::IsUnicastAddressExternal(this, i))
    {
      Address = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(i);
      ot::Ip6::Netif::RemoveExternalUnicastAddress(this, Address);
      IgnoreError();
    }
  }
}

BOOL ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Netif *this, const ot::Ip6::Address *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ContainsMatching<ot::Ip6::Address>(this, a2);
}

BOOL ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ContainsMatching<ot::Ip6::Address>(ot::Ip6::Netif::UnicastAddress *a1, ot::Ip6::Netif::UnicastAddress *a2)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(a1, a2) != 0;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ContainsMatching<ot::Ip6::Address>(a1, a2);
}

BOOL ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::IsPoolEntry(uint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1 + 8 <= a2) {
    return a2 < ot::GetArrayEnd<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>(a1 + 8);
  }
  return v3;
}

{
  return ot::Pool<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>::IsPoolEntry(a1, a2);
}

void ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(ot::Ip6::Netif::UnicastAddress *this, char a2)
{
  char v3 = a2 & 1;
  ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear(this);
  *((unsigned char *)this + 16) = 64;
  *((unsigned char *)this + 17) = 0;
  *((unsigned char *)this + 18) = *((unsigned char *)this + 18) & 0xFE | v3 & 1;
  *((unsigned char *)this + 18) = *((unsigned char *)this + 18) & 0xFD | 2;
}

uint64_t ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope(ot::Ip6::Netif::UnicastAddress *this)
{
  return ot::Ip6::Netif::UnicastAddress::SetScopeOverride((uint64_t)this, 3);
}

uint64_t ot::Ip6::Netif::UnicastAddress::SetScopeOverride(uint64_t this, char a2)
{
  *(unsigned char *)(this + 18) = *(unsigned char *)(this + 18) & 0x87 | (8 * (a2 & 0xF));
  *(unsigned char *)(this + 18) = *(unsigned char *)(this + 18) & 0xFB | 4;
  return this;
}

{
  return ot::Ip6::Netif::UnicastAddress::SetScopeOverride(this, a2);
}

uint64_t ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginGlobalScope(ot::Ip6::Netif::UnicastAddress *this)
{
  *((unsigned char *)this + 17) = 0;
  *((unsigned char *)this + 18) = *((unsigned char *)this + 18) & 0xFD | 2;
  return ot::Ip6::Netif::UnicastAddress::SetScopeOverride((uint64_t)this, 14);
}

void ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(ot::Ip6::Netif::UnicastAddress *this, char a2, char a3)
{
  char v4 = a3 & 1;
  ot::Clearable<ot::Ip6::Netif::UnicastAddress>::Clear(this);
  *((unsigned char *)this + 16) = a2;
  *((unsigned char *)this + 17) = 1;
  *((unsigned char *)this + 18) = *((unsigned char *)this + 18) & 0xFE | v4 & 1;
  *((unsigned char *)this + 18) = *((unsigned char *)this + 18) & 0xFD | 2;
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(uint64_t a1, uint64_t a2, char a3)
{
  ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator((void *)a1, 0);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  uint64_t MulticastAddresses = ot::Ip6::Netif::GetMulticastAddresses(*(ot::Ip6::Netif **)(a1 + 8));
  uint64_t Head = (const ot::Ip6::Netif::MulticastAddress *)ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetHead(MulticastAddresses);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom((ot::Ip6::Netif::ExternalMulticastAddress::Iterator *)a1, Head);
  return a1;
}

{
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(a1, a2, a3);
  return a1;
}

void ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(ot::Ip6::Netif::ExternalMulticastAddress::Iterator *this, const ot::Ip6::Netif::MulticastAddress *Next)
{
  while (1)
  {
    char v5 = 0;
    if (Next)
    {
      char v4 = 0;
      if (ot::Ip6::Netif::IsMulticastAddressExternal(*((ot::Ip6::Netif **)this + 1), Next))
      {
        Address = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(Next);
        char v4 = ot::Ip6::Address::MatchesFilter(Address, *((unsigned char *)this + 16));
      }
      char v5 = v4 ^ 1;
    }
    if ((v5 & 1) == 0) {
      break;
    }
    uint64_t Next = (const ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(Next);
  }
  ot::AsNonConst<ot::Ip6::Netif::ExternalMulticastAddress>();
  *(void *)this = v3;
}

uint64_t ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Netif::MulticastAddress>::SetNext(a2, *a1);
  *a1 = a2;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Push(a1, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(ot::Ip6::Netif::MulticastAddress *a1, ot::Ip6::Netif::MulticastAddress *a2)
{
  v3[2] = a1;
  v3[1] = a2;
  v3[0] = 0;
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>((ot::Ip6::Netif::MulticastAddress **)a1, a2, v3);
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(a1, a2);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(ot::Ip6::Netif::MulticastAddress **a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)a1, *a1, 0, a2, a3);
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(a1, a2, a3);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(uint64_t a1, ot::Ip6::Netif::MulticastAddress *Next, ot::Ip6::Netif::MulticastAddress *a3, const ot::Ip6::Address *a4, ot::Ip6::Netif::MulticastAddress **a5)
{
  *a5 = 0;
  while (Next != a3 && !ot::Ip6::Netif::MulticastAddress::Matches(Next, a4))
  {
    *a5 = Next;
    uint64_t Next = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(Next);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::FindMatching<ot::Ip6::Address>(a1, Next, a3, a4, a5);
}

BOOL ot::Ip6::Netif::MulticastAddress::Matches(ot::Ip6::Netif::MulticastAddress *this, const ot::Ip6::Address *a2)
{
  Address = (const void *)ot::Ip6::Netif::MulticastAddress::GetAddress(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(Address, a2);
}

{
  return ot::Ip6::Netif::MulticastAddress::Matches(this, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find(ot::Ip6::Netif::MulticastAddress **a1, ot::Ip6::Netif::MulticastAddress *a2, ot::Ip6::Netif::MulticastAddress **a3)
{
  unsigned int v5 = 23;
  *a3 = 0;
  for (int i = *a1; i; int i = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3 = i;
  }
  return v5;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Find(a1, a2, a3);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail(ot::Ip6::Netif::MulticastAddress **a1)
{
  uint64_t Next = *a1;
  if (*a1)
  {
    for (uint64_t i = ot::Ip6::Netif::MulticastAddress::GetNext(Next); i; uint64_t i = ot::Ip6::Netif::MulticastAddress::GetNext(Next))
      uint64_t Next = (ot::Ip6::Netif::MulticastAddress *)ot::Ip6::Netif::MulticastAddress::GetNext(Next);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::GetTail(a1);
}

uint64_t ot::GetArrayEnd<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>(uint64_t a1)
{
  return a1 + 384;
}

{
  return ot::GetArrayEnd<ot::Ip6::Netif::ExternalMulticastAddress,(unsigned short)12>(a1);
}

ot::Ip6::Netif::ExternalMulticastAddress *ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Pop(ot::Ip6::Netif::ExternalMulticastAddress **a1)
{
  char v4 = *a1;
  if (*a1)
  {
    ot::Ip6::Netif::ExternalMulticastAddress::GetNext(*a1);
    *a1 = v1;
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Netif::ExternalMulticastAddress>::Pop(a1);
}

void ot::Ip6::Netif::ExternalMulticastAddress::GetNext(ot::Ip6::Netif::ExternalMulticastAddress *this)
{
}

{
  ot::Ip6::Netif::ExternalMulticastAddress::GetNext(this);
}

ot::Ip6::Netif::MulticastAddress *ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Pop(ot::Ip6::Netif::MulticastAddress **a1)
{
  char v4 = *a1;
  if (*a1)
  {
    ot::Ip6::Netif::MulticastAddress::GetNext(*a1);
    *a1 = v1;
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Netif::MulticastAddress>::Pop(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Netif::UnicastAddress>>();
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(v3, a2, a3);
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Find(a1, a2, a3);
}

ot::Ip6::Netif::UnicastAddress *ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(ot::Ip6::Netif::UnicastAddress *a1, ot::Ip6::Netif::UnicastAddress *a2)
{
  v3[2] = a1;
  v3[1] = a2;
  v3[0] = 0;
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>((ot::Ip6::Netif::UnicastAddress **)a1, a2, v3);
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(a1, a2);
}

ot::Ip6::Netif::UnicastAddress *ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(ot::Ip6::Netif::UnicastAddress **a1, const ot::Ip6::Address *a2, ot::Ip6::Netif::UnicastAddress **a3)
{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>((uint64_t)a1, *a1, 0, a2, a3);
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(a1, a2, a3);
}

ot::Ip6::Netif::UnicastAddress *ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(uint64_t a1, ot::Ip6::Netif::UnicastAddress *Next, ot::Ip6::Netif::UnicastAddress *a3, const ot::Ip6::Address *a4, ot::Ip6::Netif::UnicastAddress **a5)
{
  *a5 = 0;
  while (Next != a3 && !ot::Ip6::Netif::UnicastAddress::Matches(Next, a4))
  {
    *a5 = Next;
    uint64_t Next = (ot::Ip6::Netif::UnicastAddress *)ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext((uint64_t)Next);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::FindMatching<ot::Ip6::Address>(a1, Next, a3, a4, a5);
}

BOOL ot::Ip6::Netif::UnicastAddress::Matches(ot::Ip6::Netif::UnicastAddress *this, const ot::Ip6::Address *a2)
{
  Address = (const void *)ot::Ip6::Netif::UnicastAddress::GetAddress(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(Address, a2);
}

{
  return ot::Ip6::Netif::UnicastAddress::Matches(this, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1 = ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::Pop(a1);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Ip6::Netif::UnicastAddress>::SetNext(result, a2);
}

uint64_t ot::GetArrayEnd<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>(uint64_t a1)
{
  return a1 + 256;
}

{
  return ot::GetArrayEnd<ot::Ip6::Netif::UnicastAddress,(unsigned short)8>(a1);
}

ot::StringWriter *ot::Ip6::SockAddr::ToString@<X0>(ot::Ip6::SockAddr *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::Ip6::SockAddr::ToString(this, a2);
}

uint64_t ot::String<(unsigned short)48>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 48);
  return a1;
}

ot::StringWriter *ot::Ip6::SockAddr::ToString(ot::Ip6::SockAddr *this, ot::StringWriter *a2)
{
  Address = (ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress(this);
  ot::Ip6::Address::ToString(Address, (ot::StringWriter *)v8);
  char v6 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v8);
  unsigned __int16 Port = ot::Ip6::SockAddr::GetPort(this);
  return ot::StringWriter::Append(a2, "[%s]:%u", v6, Port);
}

ot::StringWriter *ot::Ip6::SockAddr::ToString(ot::Ip6::SockAddr *this, char *a2, __int16 a3)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  __int16 v6 = a3;
  ot::StringWriter::StringWriter((ot::StringWriter *)v5, a2, a3);
  return ot::Ip6::SockAddr::ToString(this, (ot::StringWriter *)v5);
}

uint64_t ot::Ip6::Udp::SocketHandle::Matches(ot::Ip6::Udp::SocketHandle *this, const ot::Ip6::MessageInfo *a2)
{
  char v17 = 0;
  int v15 = *(unsigned __int16 *)(ot::Ip6::Udp::SocketHandle::GetSockName(this) + 16);
  if (v15 == (unsigned __int16)ot::Ip6::MessageInfo::GetSockPort(a2))
  {
    SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(a2);
    if (ot::Ip6::Address::IsMulticast(SockAddr)
      || (SockName = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetSockName(this),
          char v4 = (ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress(SockName),
          ot::Ip6::Address::IsUnspecified(v4))
      || (unsigned int v5 = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetSockName(this),
          uint64_t v14 = (const void *)ot::Ip6::SockAddr::GetAddress(v5),
          __int16 v6 = (const void *)ot::Ip6::MessageInfo::GetSockAddr(a2),
          ot::Equatable<ot::Ip6::Address>::operator==(v14, v6)))
    {
      if (!*(_WORD *)(ot::Ip6::Udp::SocketHandle::GetPeerName(this) + 16)
        || (int v13 = *(unsigned __int16 *)(ot::Ip6::Udp::SocketHandle::GetPeerName(this) + 16),
            v13 == (unsigned __int16)ot::Ip6::MessageInfo::GetPeerPort(a2))
        && ((PeerName = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetPeerName(this),
             Address = (ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress(PeerName),
             ot::Ip6::Address::IsUnspecified(Address))
         || (uint64_t v9 = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetPeerName(this),
             uint64_t v12 = (const void *)ot::Ip6::SockAddr::GetAddress(v9),
             PeerAddr = (const void *)ot::Ip6::MessageInfo::GetPeerAddr(a2),
             ot::Equatable<ot::Ip6::Address>::operator==(v12, PeerAddr))))
      {
        char v17 = 1;
      }
    }
  }
  return v17 & 1;
}

uint64_t ot::Ip6::Udp::SocketHandle::GetPeerName(ot::Ip6::Udp::SocketHandle *this)
{
  return ot::AsCoreType<otSockAddr>((uint64_t)this + 18);
}

{
  return ot::AsCoreType<otSockAddr>((uint64_t)this + 18);
}

{
  return ot::Ip6::Udp::SocketHandle::GetPeerName(this);
}

{
  return ot::Ip6::Udp::SocketHandle::GetPeerName(this);
}

ot::Ip6::Udp::Socket *ot::Ip6::Udp::Socket::Socket(ot::Ip6::Udp::Socket *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Ip6::Udp::Socket::Socket(this, a2);
  return this;
}

void *ot::Clearable<ot::Ip6::Udp::SocketHandle>::Clear(void *a1)
{
  return memset(a1, 0, 0x48uLL);
}

{
  return ot::Clearable<ot::Ip6::Udp::SocketHandle>::Clear(a1);
}

ot::Buffer *ot::Ip6::Udp::Socket::NewMessage(ot::Ip6::Udp::Socket *this)
{
  return ot::Ip6::Udp::Socket::NewMessage(this, 0);
}

ot::Buffer *ot::Ip6::Udp::Socket::NewMessage(ot::Ip6::Udp::Socket *this, __int16 a2)
{
  Default = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Ip6::Udp::Socket::NewMessage(this, a2, Default);
}

ot::Buffer *ot::Ip6::Udp::Socket::NewMessage(ot::Ip6::Udp::Socket *this, __int16 a2, const ot::Message::Settings *a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::NewMessage(v3, a2, a3);
}

ot::Buffer *ot::Ip6::Udp::NewMessage(ot::Ip6::Udp *this, __int16 a2, const ot::Message::Settings *a3)
{
  uint64_t v3 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  return ot::Ip6::Ip6::NewMessage(v3, a2 + 8, a3);
}

uint64_t ot::Ip6::Udp::Socket::Open(ot::InstanceLocator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(a1);
  return ot::Ip6::Udp::Open(v3, a1, a2, a3);
}

uint64_t ot::Ip6::Udp::Open(ot::Ip6::Udp *a1, const ot::Ip6::Udp::SocketHandle *a2, uint64_t a3, uint64_t a4)
{
  if (ot::Ip6::Udp::IsOpen(a1, a2)) {
    __assert_rtn("Open", "udp6.cpp", 175, "!IsOpen(aSocket)");
  }
  uint64_t SockName = ot::Ip6::Udp::SocketHandle::GetSockName(a2);
  ot::Clearable<ot::Ip6::SockAddr>::Clear(SockName);
  uint64_t PeerName = ot::Ip6::Udp::SocketHandle::GetPeerName(a2);
  ot::Clearable<ot::Ip6::SockAddr>::Clear(PeerName);
  *((void *)a2 + 5) = a3;
  *((void *)a2 + 6) = a4;
  ot::Ip6::Udp::AddSocket(a1, a2);
  return 0;
}

BOOL ot::Ip6::Udp::Socket::IsOpen(ot::Ip6::Udp::Socket *this)
{
  uint64_t v1 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::IsOpen(v1, this);
}

uint64_t ot::Ip6::Udp::Socket::Bind(ot::InstanceLocator *a1, ot::Ip6::SockAddr *a2, char a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(a1);
  return ot::Ip6::Udp::Bind(v3, a1, a2, a3);
}

uint64_t ot::Ip6::Udp::Bind(ot::Ip6::Udp *a1, ot::Ip6::Udp::SocketHandle *a2, ot::Ip6::SockAddr *a3, char a4)
{
  unsigned int v9 = 0;
  if (a4 == 2) {
    ot::Ip6::Udp::SetBackboneSocket(a1, a2);
  }
  Address = (ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress(a3);
  if (ot::Ip6::Address::IsUnspecified(Address)
    || (uint64_t v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1),
        unsigned int v5 = (const ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress(a3),
        ot::Ip6::Netif::HasUnicastAddress(v7, v5)))
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_WORD *)a2 + 8) = *((_WORD *)a3 + 8);
    if (!ot::Ip6::Udp::SocketHandle::IsBound(a2)) {
      *((_WORD *)a2 + 8) = ot::Ip6::Udp::GetEphemeralPort(a1);
    }
  }
  else
  {
    return 7;
  }
  return v9;
}

uint64_t ot::Ip6::Udp::Socket::Bind(ot::InstanceLocator *a1, __int16 a2, char a3)
{
  uint64_t v8 = a1;
  __int16 v7 = a2;
  char v6 = a3;
  ot::Ip6::SockAddr::SockAddr((ot::Ip6::SockAddr *)v5, a2);
  return ot::Ip6::Udp::Socket::Bind(a1, (ot::Ip6::SockAddr *)v5, v6);
}

uint64_t ot::Ip6::Udp::Socket::Connect(ot::Ip6::Udp::Socket *this, const ot::Ip6::SockAddr *a2)
{
  uint64_t v2 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::Connect(v2, this, a2);
}

uint64_t ot::Ip6::Udp::Connect(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2, const ot::Ip6::SockAddr *a3)
{
  unsigned int v6 = 0;
  *(_OWORD *)((char *)a2 + 18) = *(_OWORD *)a3;
  *((_WORD *)a2 + 17) = *((_WORD *)a3 + 8);
  if (!ot::Ip6::Udp::SocketHandle::IsBound(a2))
  {
    uint64_t SockName = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetSockName(a2);
    return ot::Ip6::Udp::Bind(this, a2, SockName, 1);
  }
  return v6;
}

uint64_t ot::Ip6::Udp::Socket::Connect(ot::Ip6::Udp::Socket *this, __int16 a2)
{
  unsigned int v6 = this;
  __int16 v5 = a2;
  ot::Ip6::SockAddr::SockAddr((ot::Ip6::SockAddr *)v4, a2);
  return ot::Ip6::Udp::Socket::Connect(this, (const ot::Ip6::SockAddr *)v4);
}

uint64_t ot::Ip6::Udp::Socket::Close(ot::Ip6::Udp::Socket *this)
{
  uint64_t v1 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::Close(v1, this);
}

uint64_t ot::Ip6::Udp::Close(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  if (ot::Ip6::Udp::IsOpen(this, a2))
  {
    ot::Ip6::Udp::RemoveSocket(this, a2);
    uint64_t SockName = ot::Ip6::Udp::SocketHandle::GetSockName(a2);
    ot::Clearable<ot::Ip6::SockAddr>::Clear(SockName);
    uint64_t PeerName = ot::Ip6::Udp::SocketHandle::GetPeerName(a2);
    ot::Clearable<ot::Ip6::SockAddr>::Clear(PeerName);
  }
  return 0;
}

uint64_t ot::Ip6::Udp::Socket::SendTo(ot::Ip6::Udp::Socket *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v3 = (ot::Ip6::Udp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Udp>(this);
  return ot::Ip6::Udp::SendTo(v3, this, a2, a3);
}

uint64_t ot::Ip6::Udp::SendTo(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2, ot::Message *a3, const ot::Ip6::MessageInfo *a4)
{
  uint64_t v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  unsigned int v19 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)__dst);
  if (!(unsigned __int16)ot::Ip6::MessageInfo::GetSockPort(v20)
    || (int v16 = *(unsigned __int16 *)(ot::Ip6::Udp::SocketHandle::GetSockName(v22) + 16),
        v16 == (unsigned __int16)ot::Ip6::MessageInfo::GetSockPort(v20)))
  {
    memcpy(__dst, v20, sizeof(__dst));
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)__dst);
    if (ot::Ip6::Address::IsUnspecified(PeerAddr))
    {
      uint64_t PeerName = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetPeerName(v22);
      Address = (ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress(PeerName);
      if (ot::Ip6::Address::IsUnspecified(Address)) {
        return 7;
      }
      __int16 v7 = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetPeerName(v22);
      uint64_t v8 = (__n128 *)ot::Ip6::SockAddr::GetAddress(v7);
      ot::Ip6::MessageInfo::SetPeerAddr((__n128 *)__dst, v8);
    }
    if (!*(_WORD *)&__dst[34])
    {
      if (!*(_WORD *)(ot::Ip6::Udp::SocketHandle::GetPeerName(v22) + 16)) {
        return 7;
      }
      *(_WORD *)&__dst[34] = *(_WORD *)(ot::Ip6::Udp::SocketHandle::GetPeerName(v22) + 16);
    }
    SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)__dst);
    if (ot::Ip6::Address::IsUnspecified(SockAddr))
    {
      uint64_t SockName = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetSockName(v22);
      uint64_t v11 = (__n128 *)ot::Ip6::SockAddr::GetAddress(SockName);
      ot::Ip6::MessageInfo::SetSockAddr((__n128 *)__dst, v11);
    }
    if (ot::Ip6::Udp::SocketHandle::IsBound(v22)
      || (int v15 = v22,
          uint64_t v12 = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetSockName(v22),
          (unsigned int v19 = ot::Ip6::Udp::Bind(this, v15, v12, 1)) == 0))
    {
      uint64_t v13 = ot::Ip6::Udp::SocketHandle::GetSockName(v22);
      ot::Ip6::MessageInfo::SetSockPort((uint64_t)__dst, *(_WORD *)(v13 + 16));
      return ot::Ip6::Udp::SendDatagram(this, v21, (ot::Ip6::MessageInfo *)__dst, 0x11u);
    }
  }
  else
  {
    return 7;
  }
  return v19;
}

uint64_t ot::Ip6::Udp::Socket::JoinNetifMulticastGroup(uint64_t a1, uint64_t a2, ot::Ip6::Address *a3)
{
  unsigned int v4 = 12;
  if (!ot::Ip6::Address::IsMulticast(a3)) {
    return 7;
  }
  return v4;
}

uint64_t ot::Ip6::Udp::Socket::LeaveNetifMulticastGroup(uint64_t a1, uint64_t a2, ot::Ip6::Address *a3)
{
  unsigned int v4 = 12;
  if (!ot::Ip6::Address::IsMulticast(a3)) {
    return 7;
  }
  return v4;
}

ot::Ip6::Udp *ot::Ip6::Udp::Udp(ot::Ip6::Udp *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *(_WORD *)this = -16384;
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1);
  ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 2);
  uint64_t result = this;
  *((void *)this + 3) = 0;
  return result;
}

{
  ot::Ip6::Udp::Udp(this, a2);
  return this;
}

uint64_t ot::Ip6::Udp::AddReceiver(ot::Ip6::Udp *this, ot::Ip6::Udp::Receiver *a2)
{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Add((uint64_t *)this + 1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Add(uint64_t *a1, void *a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Udp::Receiver>::Contains(a1, (uint64_t)a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Udp::Receiver>::Push(a1, a2);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Add(a1, a2);
}

uint64_t ot::Ip6::Udp::RemoveReceiver(ot::Ip6::Udp *this, ot::Ip6::Udp::Receiver *a2)
{
  unsigned int v3 = ot::LinkedList<ot::Ip6::Udp::Receiver>::Remove((void *)this + 1, a2);
  if (!v3) {
    ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(a2, 0);
  }
  return v3;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Remove(void *a1, void *a2)
{
  v5[2] = a1;
  v5[1] = a2;
  v5[0] = 0;
  unsigned int v4 = ot::LinkedList<ot::Ip6::Udp::Receiver>::Find((uint64_t)a1, (uint64_t)a2, (uint64_t *)v5);
  if (!v4) {
    ot::LinkedList<ot::Ip6::Udp::Receiver>::PopAfter(a1, v5[0]);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Remove(a1, a2);
}

void *ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(result, a2);
}

uint64_t ot::Clearable<ot::Ip6::SockAddr>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  return result;
}

{
  return ot::Clearable<ot::Ip6::SockAddr>::Clear(result);
}

uint64_t ot::Ip6::Udp::AddSocket(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  uint64_t result = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Add((uint64_t *)this + 2, (uint64_t)a2);
  if (!result && !*((void *)this + 3)) {
    *((void *)this + 3) = a2;
  }
  return result;
}

uint64_t ot::Ip6::Udp::SetBackboneSocket(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  if (*((void *)this + 3)) {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PushAfter((uint64_t)this + 16, (uint64_t)a2, *((void *)this + 3));
  }
  else {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Push((uint64_t *)this + 2, (uint64_t)a2);
  }
}

uint64_t ot::Ip6::Udp::GetEphemeralPort(ot::Ip6::Udp *this)
{
  do
  {
    if (*(unsigned __int16 *)this == 0xFFFF) {
      *(_WORD *)this = -16384;
    }
    else {
      ++*(_WORD *)this;
    }
  }
  while ((ot::Ip6::Udp::IsPortReserved((ot::Ip6::Udp *)*(unsigned __int16 *)this) & 1) != 0);
  return *(unsigned __int16 *)this;
}

uint64_t ot::Ip6::Udp::RemoveSocket(ot::Ip6::Udp *this, ot::Ip6::Udp::SocketHandle *a2)
{
  unsigned int v6 = this;
  __int16 v5 = a2;
  uint64_t v4 = 0;
  uint64_t result = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find((uint64_t)this + 16, (uint64_t)a2, &v4);
  if (!result)
  {
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PopAfter((uint64_t *)this + 2, v4);
    uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext((uint64_t)v5, 0);
    if (v5 == *((ot::Ip6::Udp::SocketHandle **)this + 3)) {
      *((void *)this + 3) = v4;
    }
  }
  return result;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PushAfter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Next = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(a3);
  ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a2, Next);
  return ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a3, a2);
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PushAfter(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Push(uint64_t *a1, uint64_t a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a2, *a1);
  *a1 = a2;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Push(a1, a2);
}

uint64_t ot::Ip6::Udp::GetBackboneSockets(ot::Ip6::Udp *this)
{
  if (*((void *)this + 3)) {
    return ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(*((void *)this + 3));
  }
  else {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead((uint64_t)this + 16);
  }
}

uint64_t ot::Ip6::Udp::IsBackboneSocket(ot::Ip6::Udp *this, const ot::Ip6::Udp::SocketHandle *a2)
{
  char v4 = 0;
  for (uint64_t i = (const ot::Ip6::Udp::SocketHandle *)ot::Ip6::Udp::GetBackboneSockets(this);
        i;
        uint64_t i = (const ot::Ip6::Udp::SocketHandle *)ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext((uint64_t)i))
  {
    if (i == a2)
    {
      char v4 = 1;
      return v4 & 1;
    }
  }
  return v4 & 1;
}

uint64_t ot::Ip6::Udp::SendDatagram(ot::Ip6::Udp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  uint64_t v13 = this;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  unsigned __int8 v10 = a4;
  unsigned int v9 = 0;
  ot::Ip6::Udp::Header::SetSourcePort((ot::Ip6::Udp::Header *)v8, *((_WORD *)a3 + 16));
  ot::Ip6::Udp::Header::SetDestinationPort((ot::Ip6::Udp::Header *)v8, *((_WORD *)v11 + 17));
  __int16 Length = ot::Message::GetLength(v12);
  ot::Ip6::Udp::Header::SetLength((ot::Ip6::Udp::Header *)v8, Length + 8);
  ot::Ip6::Udp::Header::SetChecksum((ot::Ip6::Udp::Header *)v8, 0);
  unsigned int v9 = ot::Message::Prepend<ot::Ip6::Udp::Header>(v12, v8);
  if (!v9)
  {
    ot::Message::SetOffset(v12, 0);
    __int16 v5 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
    return ot::Ip6::Ip6::SendDatagram(v5, v12, v11, v10);
  }
  return v9;
}

uint64_t ot::Ip6::Udp::IsPortReserved(ot::Ip6::Udp *this)
{
  char v3 = 1;
  if ((unsigned __int16)this != 61631)
  {
    BOOL v2 = 0;
    if ((unsigned __int16)this >= 0xD11Fu) {
      BOOL v2 = (unsigned __int16)this <= 0xD132u;
    }
    char v3 = v2;
  }
  return v3 & 1;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Add(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = 0;
  if (ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Contains(a1, a2)) {
    return 24;
  }
  else {
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Push(a1, a2);
  }
  return v4;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Add(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Udp::SocketHandle>>();
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(v3, a2, a3);
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Find(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PopAfter(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Pop(a1);
  }
  uint64_t Next = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(Next);
    ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(a2, v2);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::PopAfter(a1, a2);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::SetNext(result, a2);
}

ot::Buffer *ot::Ip6::Udp::NewMessage(ot::Ip6::Udp *this)
{
  return ot::Ip6::Udp::NewMessage(this, 0);
}

ot::Buffer *ot::Ip6::Udp::NewMessage(ot::Ip6::Udp *this, __int16 a2)
{
  Default = (const ot::Message::Settings *)ot::Message::Settings::GetDefault(this);
  return ot::Ip6::Udp::NewMessage(this, a2, Default);
}

uint64_t ot::Ip6::Udp::Header::SetSourcePort(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this = result;
  return result;
}

{
  return ot::Ip6::Udp::Header::SetSourcePort(this, a2);
}

uint64_t ot::Ip6::Udp::Header::SetDestinationPort(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = result;
  return result;
}

{
  return ot::Ip6::Udp::Header::SetDestinationPort(this, a2);
}

uint64_t ot::Ip6::Udp::Header::SetLength(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 2) = result;
  return result;
}

{
  return ot::Ip6::Udp::Header::SetLength(this, a2);
}

uint64_t ot::Ip6::Udp::Header::SetChecksum(ot::Ip6::Udp::Header *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + 3) = result;
  return result;
}

{
  return ot::Ip6::Udp::Header::SetChecksum(this, a2);
}

uint64_t ot::Message::Prepend<ot::Ip6::Udp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::PrependBytes(a1, a2, 8u);
}

{
  return ot::Message::Prepend<ot::Ip6::Udp::Header>(a1, a2);
}

uint64_t ot::Ip6::Udp::HandleMessage(ot::Ip6::Udp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  int v16 = this;
  int v15 = a2;
  uint64_t v14 = a3;
  unsigned int v13 = 0;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  unsigned int v13 = ot::Message::Read<ot::Ip6::Udp::Header>(a2, Offset, v12);
  if (!v13)
  {
    unsigned int v13 = ot::Checksum::VerifyMessageChecksum(v15, v14, (const ot::Ip6::MessageInfo *)0x11);
    if (!v13)
    {
      ot::Message::MoveOffset(v15, 8);
      Sourceunsigned __int16 Port = ot::Ip6::Udp::Header::GetSourcePort((ot::Ip6::Udp::Header *)v12);
      *((_WORD *)v14 + 17) = SourcePort;
      __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v12);
      *((_WORD *)v14 + 16) = DestinationPort;
      v11[1] = (uint64_t)this + 8;
      v11[0] = ot::LinkedList<ot::Ip6::Udp::Receiver>::begin((uint64_t)this + 8);
      uint64_t v10 = ot::LinkedList<ot::Ip6::Udp::Receiver>::end();
      while (ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator!=(v11, &v10))
      {
        unsigned int v9 = (ot::Ip6::Udp::Receiver *)ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator*((uint64_t)v11);
        if (ot::Ip6::Udp::Receiver::HandleMessage(v9, v15, v14)) {
          return v13;
        }
        ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator++(v11);
      }
      ot::Ip6::Udp::HandlePayload(this, v15, v14);
    }
  }
  return v13;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::begin(uint64_t a1)
{
  uint64_t Head = ot::LinkedList<ot::Ip6::Udp::Receiver>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::begin(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::end();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator*(a1);
}

uint64_t ot::Ip6::Udp::Receiver::HandleMessage(ot::Ip6::Udp::Receiver *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return (*((uint64_t (**)(void, ot::Message *, const ot::Ip6::MessageInfo *))this + 1))(*((void *)this + 2), a2, a3) & 1;
}

{
  return ot::Ip6::Udp::Receiver::HandleMessage(this, a2, a3);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Ip6::Udp::Receiver,ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator>::operator++(a1);
}

void ot::Ip6::Udp::HandlePayload(ot::Ip6::Udp *this, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v14 = this;
  unsigned int v13 = a2;
  uint64_t v12 = a3;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  if (ot::Ip6::MessageInfo::IsHostInterface(a3))
  {
    BackboneSockets = (ot::Ip6::Udp::SocketHandle *)ot::Ip6::Udp::GetBackboneSockets(this);
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>((uint64_t)this + 16, BackboneSockets, 0, v12, &v10);
  }
  else
  {
    uint64_t Head = (ot::Ip6::Udp::SocketHandle *)ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead((uint64_t)this + 16);
    __int16 v7 = (ot::Ip6::Udp::SocketHandle *)ot::Ip6::Udp::GetBackboneSockets(this);
    ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>((uint64_t)this + 16, Head, v7, v12, &v10);
  }
  uint64_t v11 = v3;
  if (v3)
  {
    __int16 v5 = v13;
    unsigned __int16 Offset = ot::Message::GetOffset(v13);
    ot::Message::RemoveHeader(v5, Offset);
    if ((unsigned __int16)ot::Message::GetOffset(v13)) {
      __assert_rtn("HandlePayload", "udp6.cpp", 523, "aMessage.GetOffset() == 0");
    }
    ot::Ip6::Udp::SocketHandle::HandleUdpReceive(v11, v13, v12);
  }
}

void ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>(uint64_t a1, ot::Ip6::Udp::SocketHandle *a2, ot::Ip6::Udp::SocketHandle *a3, const ot::Ip6::MessageInfo *a4, ot::Ip6::Udp::SocketHandle **a5)
{
}

{
  ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>(a1, a2, a3, a4, a5);
}

uint64_t ot::Ip6::Udp::SocketHandle::HandleUdpReceive(ot::Ip6::Udp::SocketHandle *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return (*((uint64_t (**)(void, ot::Message *, const ot::Ip6::MessageInfo *))this + 5))(*((void *)this + 6), a2, a3);
}

{
  return ot::Ip6::Udp::SocketHandle::HandleUdpReceive(this, a2, a3);
}

uint64_t ot::Ip6::Udp::IsPortInUse(ot::Ip6::Udp *this, __int16 a2)
{
  uint64_t v10 = this;
  __int16 v9 = a2;
  char v8 = 0;
  v7[1] = (uint64_t)this + 16;
  v7[0] = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::begin((uint64_t)this + 16);
  uint64_t v6 = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator!=(v7, &v6))
  {
    __int16 v5 = (ot::Ip6::Udp::SocketHandle *)ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator*((uint64_t)v7);
    uint64_t SockName = (ot::Ip6::SockAddr *)ot::Ip6::Udp::SocketHandle::GetSockName(v5);
    __int16 Port = ot::Ip6::SockAddr::GetPort(SockName);
    if (v9 == Port)
    {
      char v8 = 1;
      return v8 & 1;
    }
    ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator++(v7);
  }
  return v8 & 1;
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::begin(uint64_t a1)
{
  uint64_t Head = ot::LinkedList<ot::Ip6::Udp::SocketHandle>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::begin(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::end();
}

BOOL ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator*(a1);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::Ip6::Udp::SocketHandle const,ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator>::operator++(a1);
}

BOOL ot::Ip6::Udp::ShouldUsePlatformUdp(ot::Ip6::Udp *this, unsigned __int16 a2)
{
  BOOL v6 = 0;
  if (a2 != 19788)
  {
    BOOL v6 = 0;
    if (a2 != 61631)
    {
      uint64_t v2 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
      BOOL v6 = 0;
      if (a2 != (unsigned __int16)ot::MeshCoP::BorderAgent::GetUdpProxyPort(v2))
      {
        uint64_t v3 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(this);
        return a2 != (unsigned __int16)ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(v3);
      }
    }
  }
  return v6;
}

uint64_t ot::MeshCoP::BorderAgent::GetUdpProxyPort(ot::MeshCoP::BorderAgent *this)
{
  return *((unsigned __int16 *)this + 69);
}

{
  return ot::MeshCoP::BorderAgent::GetUdpProxyPort(this);
}

BOOL ot::LinkedList<ot::Ip6::Udp::Receiver>::Contains(uint64_t *a1, uint64_t a2)
{
  v3[2] = (uint64_t)a1;
  v3[1] = a2;
  v3[0] = 0;
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(a1, a2, v3) == 0;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Contains(a1, a2);
}

void *ot::LinkedList<ot::Ip6::Udp::Receiver>::Push(uint64_t *a1, void *a2)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(a2, *a1);
  *a1 = (uint64_t)a2;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Push(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = 23;
  *a3 = 0;
  for (uint64_t i = *a1; i; uint64_t i = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(i))
  {
    if (i == a2) {
      return 0;
    }
    *a3 = i;
  }
  return v5;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(a1, a2, a3);
}

uint64_t ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  ot::AsConst<ot::LinkedList<ot::Ip6::Udp::Receiver>>();
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(v3, a2, a3);
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Find(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::PopAfter(uint64_t *a1, void *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::Ip6::Udp::Receiver>::Pop(a1);
  }
  uint64_t Next = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext((uint64_t)a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(Next);
    ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::SetNext(a2, v2);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::PopAfter(a1, a2);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1 = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Pop(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1 = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::Pop(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::GetHead(a1);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::Receiver>::GetNext(*a1);
  *a1 = result;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Udp::Receiver>::Iterator::Advance(a1);
}

ot::Ip6::Udp::SocketHandle *ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>(uint64_t a1, ot::Ip6::Udp::SocketHandle *Next, ot::Ip6::Udp::SocketHandle *a3, const ot::Ip6::MessageInfo *a4, ot::Ip6::Udp::SocketHandle **a5)
{
  *a5 = 0;
  while (Next != a3 && (ot::Ip6::Udp::SocketHandle::Matches(Next, a4) & 1) == 0)
  {
    *a5 = Next;
    uint64_t Next = (ot::Ip6::Udp::SocketHandle *)ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext((uint64_t)Next);
  }
  return Next;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::FindMatching<ot::Ip6::MessageInfo>(a1, Next, a3, a4, a5);
}

uint64_t ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::Ip6::Udp::SocketHandle>::GetNext(*a1);
  *a1 = result;
  return result;
}

{
  return ot::LinkedList<ot::Ip6::Udp::SocketHandle>::ConstIterator::Advance(a1);
}

uint64_t ot::Radio::SetExtendedAddress(ot::Radio *this, const ot::Mac::ExtAddress *a2)
{
  InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetExtendedAddress((uint64_t)InstancePtr, (uint64_t)a2, v3, v4, v5, v6, v7, v8);
}

uint64_t ot::Radio::SetShortAddress(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioSetShortAddress((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

uint64_t ot::Radio::Transmit(ot::Radio *this, ot::Mac::TxFrame *a2)
{
  InstancePtr = ot::Radio::GetInstancePtr(this);
  return otPlatRadioTransmit((uint64_t)InstancePtr, (uint64_t)a2);
}

void ot::Radio::Callbacks::HandleReceiveDone(ot::InstanceLocator *a1, ot::Mac::Frame *a2, unsigned int a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(a1);
  ot::Mac::SubMac::HandleReceiveDone(v3, a2, a3);
}

uint64_t ot::Radio::Callbacks::HandleTransmitStarted(ot::Radio::Callbacks *this, ot::Mac::TxFrame *a2)
{
  uint64_t v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::HandleTransmitStarted(v2, a2);
}

void ot::Radio::Callbacks::HandleTransmitDone(ot::InstanceLocator *a1, ot::Mac::TxFrame *a2, ot::Mac::RxFrame *a3, unsigned int a4)
{
  uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(a1);
  ot::Mac::SubMac::HandleTransmitDone(v4, a2, a3, a4);
}

void ot::Radio::Callbacks::HandleEnergyScanDone(ot::Radio::Callbacks *this, char a2)
{
  uint64_t v2 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  ot::Mac::SubMac::HandleEnergyScanDone(v2, a2);
}

void ot::Radio::Callbacks::HandleDiagsReceiveDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::FactoryDiags::Diags>(a1);
  ot::FactoryDiags::Diags::ReceiveDone(v3, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::FactoryDiags::Diags>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::FactoryDiags::Diags>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::FactoryDiags::Diags>(a1);
}

void ot::Radio::Callbacks::HandleDiagsTransmitDone(ot::InstanceLocator *a1, uint64_t a2, int a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::FactoryDiags::Diags>(a1);
  ot::FactoryDiags::Diags::TransmitDone(v3, a3);
}

void otPlatRadioReceiveDone(uint64_t a1, ot::Mac::Frame *a2, unsigned int a3)
{
  uint64_t v4 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  if (ot::Instance::IsInitialized(v4))
  {
    uint64_t v3 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v4);
    ot::Radio::Callbacks::HandleReceiveDone(v3, a2, a3);
  }
}

uint64_t ot::Instance::Get<ot::Radio::Callbacks>(uint64_t a1)
{
  return a1 + 35;
}

{
  return ot::Instance::Get<ot::Radio::Callbacks>(a1);
}

uint64_t otPlatRadioTxStarted(uint64_t a1, ot::Mac::TxFrame *a2)
{
  uint64_t v4 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  uint64_t result = ot::Instance::IsInitialized(v4);
  if (result)
  {
    uint64_t v3 = (ot::Radio::Callbacks *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v4);
    return ot::Radio::Callbacks::HandleTransmitStarted(v3, a2);
  }
  return result;
}

void otPlatRadioTxDone(uint64_t a1, ot::Mac::TxFrame *a2, ot::Mac::RxFrame *a3, unsigned int a4)
{
  uint64_t v5 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  if (ot::Instance::IsInitialized(v5))
  {
    uint64_t v4 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v5);
    ot::Radio::Callbacks::HandleTransmitDone(v4, a2, a3, a4);
  }
}

void otPlatRadioEnergyScanDone(uint64_t a1, char a2)
{
  uint64_t v3 = (ot::Instance *)ot::AsCoreType<otInstance>(a1);
  if (ot::Instance::IsInitialized(v3))
  {
    uint64_t v2 = (ot::Radio::Callbacks *)ot::Instance::Get<ot::Radio::Callbacks>((uint64_t)v3);
    ot::Radio::Callbacks::HandleEnergyScanDone(v2, a2);
  }
}

void otPlatDiagRadioReceiveDone(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>(v3);
  ot::Radio::Callbacks::HandleDiagsReceiveDone(v4, a2, a3);
}

void otPlatDiagRadioTransmitDone(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  uint64_t v4 = (ot::InstanceLocator *)ot::Instance::Get<ot::Radio::Callbacks>(v3);
  ot::Radio::Callbacks::HandleDiagsTransmitDone(v4, a2, a3);
}

ot::AddressResolver::CacheEntry **ot::AddressResolver::AddressResolver(ot::AddressResolver::CacheEntry **this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Pool(this + 1, a2);
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)(this + 2050));
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)(this + 2051));
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)(this + 2052));
  ot::Coap::Message::ConstIterator::ConstIterator((ot::Coap::Message::ConstIterator *)(this + 2053));
  ot::Ip6::Icmp::Handler::Handler(this + 2054, (uint64_t)ot::AddressResolver::HandleIcmpReceive, (uint64_t)this);
  uint64_t v2 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>((ot::InstanceLocator *)this);
  ot::Ip6::Icmp::RegisterHandler(v2, (ot::Ip6::Icmp::Handler *)(this + 2054));
  IgnoreError();
  return this;
}

{
  ot::AddressResolver::AddressResolver(this, a2);
  return this;
}

ot::AddressResolver::CacheEntry **ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Pool(ot::AddressResolver::CacheEntry **a1, ot::Instance *a2)
{
  return a1;
}

{
  BOOL v2;
  ot::Posix::Daemon *v5;
  ot::AddressResolver::CacheEntry *i;

  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  uint64_t v5 = (ot::Posix::Daemon *)(a1 + 1);
  do
  {
    ot::Posix::Daemon::~Daemon(v5);
    uint64_t v2 = (ot::AddressResolver::CacheEntry **)((char *)v5 + 32) != a1 + 2049;
    uint64_t v5 = (ot::Posix::Daemon *)((char *)v5 + 32);
  }
  while (v2);
  for (uint64_t i = (ot::AddressResolver::CacheEntry *)(a1 + 1);
        i != (ot::AddressResolver::CacheEntry *)(a1 + 2049);
        uint64_t i = (ot::AddressResolver::CacheEntry *)((char *)i + 32))
  {
    ot::AddressResolver::CacheEntry::Init(i, a2);
    ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(a1, i);
  }
  return a1;
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::HandleIcmpReceive(ot::AddressResolver::CacheEntry **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  uint64_t v7 = (ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  uint64_t v4 = (const ot::Ip6::Icmp::Header *)ot::AsCoreType<otIcmp6Header>(a4);
  return ot::AddressResolver::HandleIcmpReceive(a1, v6, v7, v4);
}

void *ot::Ip6::Icmp::Handler::Handler(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Ip6::Icmp>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(a1);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::Clear(ot::AddressResolver::CacheEntry *this)
{
  uint64_t v3 = (ot::AddressResolver::CacheEntry **)this;
  v7[0] = (char *)this + 16400;
  v7[1] = (char *)this + 16408;
  uint64_t v7[2] = (char *)this + 16416;
  v7[3] = (char *)this + 16424;
  for (uint64_t i = (ot::AddressResolver::CacheEntry ***)v7; i != (ot::AddressResolver::CacheEntry ***)&v8; ++i)
  {
    uint64_t v5 = *i;
    while (1)
    {
      this = ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(v5);
      uint64_t v4 = this;
      if (!this) {
        break;
      }
      if (v5 == v3 + 2052)
      {
        uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)v3);
        ot::AddressResolver::CacheEntry::GetTarget(v4);
        ot::MeshForwarder::HandleResolved(v2, v1, 2);
      }
      ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(v3 + 1, v4);
    }
  }
  return this;
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(ot::AddressResolver::CacheEntry **a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1 = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(a1);
}

_WORD *ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(ot::AddressResolver::CacheEntry **a1, ot::AddressResolver::CacheEntry *a2)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(a1, a2);
}

{
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(a1, a2);
}

uint64_t ot::AddressResolver::GetNextCacheEntry(ot::InstanceLocator *a1, _OWORD *a2, ot::AddressResolver::Iterator *a3)
{
  unsigned int v15 = 0;
  uint64_t List = ot::AddressResolver::Iterator::GetList(a3);
  for (uint64_t i = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::Iterator::GetEntry(a3);
        !i;
        uint64_t i = (ot::AddressResolver::CacheEntry *)Head)
  {
    if (List)
    {
      if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16400))
      {
        uint64_t List = (uint64_t)a1 + 16408;
        uint64_t Head = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16408);
      }
      else if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16408))
      {
        uint64_t List = (uint64_t)a1 + 16416;
        uint64_t Head = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16416);
      }
      else
      {
        if ((ot::InstanceLocator *)List != (ot::InstanceLocator *)((char *)a1 + 16416)) {
          return 23;
        }
        uint64_t List = (uint64_t)a1 + 16424;
        uint64_t Head = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16424);
      }
    }
    else
    {
      uint64_t List = (uint64_t)a1 + 16400;
      uint64_t Head = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)a1 + 16400);
    }
  }
  uint64_t Next = (const ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(i);
  ot::AddressResolver::Iterator::SetEntry((uint64_t)a3, Next);
  ot::AddressResolver::Iterator::SetList(a3, List);
  ot::Clearable<ot::AddressResolver::EntryInfo>::Clear(a2);
  ot::AddressResolver::CacheEntry::GetTarget(i);
  *a2 = *v5;
  *((_WORD *)a2 + 8) = ot::AddressResolver::CacheEntry::GetRloc16(i);
  if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16400))
  {
    *((_DWORD *)a2 + 5) = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(0);
    *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFE | 1;
    *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFB | (4
                                                      * ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(i));
    if (ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(i))
    {
      *((_DWORD *)a2 + 7) = ot::AddressResolver::CacheEntry::GetLastTransactionTime(i);
      uint64_t v10 = (void *)ot::AsCoreType<otIp6Address>((uint64_t)(a2 + 2));
      uint64_t v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      ot::Mle::Mle::GetMeshLocalPrefix(v6);
      ot::Ip6::Address::SetPrefix(v10, v7);
      uint64_t v11 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>((uint64_t)(a2 + 2));
      MeshLocalIid = (const ot::Ip6::InterfaceIdentifier *)ot::AddressResolver::CacheEntry::GetMeshLocalIid(i);
      ot::Ip6::Address::SetIid(v11, MeshLocalIid);
    }
  }
  else
  {
    if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16408))
    {
      *((_DWORD *)a2 + 5) = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(1);
    }
    else if ((ot::InstanceLocator *)List == (ot::InstanceLocator *)((char *)a1 + 16416))
    {
      *((_DWORD *)a2 + 5) = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(2);
    }
    else
    {
      *((_DWORD *)a2 + 5) = ot::MapEnum<ot::AddressResolver::EntryInfo::State>(3);
      *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFD | (2 * (ot::AddressResolver::CacheEntry::IsInRampDown(i) & 1));
    }
    *((unsigned char *)a2 + 24) = *((unsigned char *)a2 + 24) & 0xFE | ot::AddressResolver::CacheEntry::CanEvict(i) & 1;
    *((_WORD *)a2 + 24) = ot::AddressResolver::CacheEntry::GetTimeout(i);
    *((_WORD *)a2 + 25) = ot::AddressResolver::CacheEntry::GetRetryDelay(i);
  }
  return v15;
}

uint64_t ot::AddressResolver::Iterator::GetList(ot::AddressResolver::Iterator *this)
{
  return *(void *)this;
}

{
  return ot::AddressResolver::Iterator::GetList(this);
}

uint64_t ot::AddressResolver::Iterator::GetEntry(ot::AddressResolver::Iterator *this)
{
  return *((void *)this + 1);
}

{
  return ot::AddressResolver::Iterator::GetEntry(this);
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(a1);
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(a1);
}

uint64_t ot::AddressResolver::Iterator::SetEntry(uint64_t this, const ot::AddressResolver::CacheEntry *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

{
  return ot::AddressResolver::Iterator::SetEntry(this, a2);
}

uint64_t ot::AddressResolver::CacheEntry::GetNext(ot::AddressResolver::CacheEntry *this)
{
  if (*((unsigned __int16 *)this + 9) == 0xFFFF) {
    return 0;
  }
  uint64_t v1 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
  uint64_t CacheEntryPool = ot::AddressResolver::GetCacheEntryPool(v1);
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetEntryAt(CacheEntryPool, *((_WORD *)this + 9));
}

{
  ot::AddressResolver *v1;
  uint64_t CacheEntryPool;

  if (*((unsigned __int16 *)this + 9) == 0xFFFF) {
    return 0;
  }
  uint64_t v1 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
  uint64_t CacheEntryPool = ot::AddressResolver::GetCacheEntryPool(v1);
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetEntryAt(CacheEntryPool, *((_WORD *)this + 9));
}

void *ot::AddressResolver::Iterator::SetList(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return ot::AddressResolver::Iterator::SetList(result, a2);
}

void *ot::Clearable<ot::AddressResolver::EntryInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x34uLL);
}

{
  return ot::Clearable<ot::AddressResolver::EntryInfo>::Clear(a1);
}

uint64_t ot::AddressResolver::CacheEntry::GetRloc16(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned __int16 *)this + 8);
}

{
  return ot::AddressResolver::CacheEntry::GetRloc16(this);
}

uint64_t ot::MapEnum<ot::AddressResolver::EntryInfo::State>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<ot::AddressResolver::EntryInfo::State>(result);
}

BOOL ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(ot::AddressResolver::CacheEntry *this)
{
  return ot::AddressResolver::CacheEntry::GetLastTransactionTime(this) != -1;
}

{
  return ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetLastTransactionTime(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned int *)this + 5);
}

{
  return ot::AddressResolver::CacheEntry::GetLastTransactionTime(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetMeshLocalIid(ot::AddressResolver::CacheEntry *this)
{
  return (uint64_t)this + 24;
}

{
  return ot::AddressResolver::CacheEntry::GetMeshLocalIid(this);
}

uint64_t ot::AddressResolver::CacheEntry::IsInRampDown(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned char *)this + 25) & 1;
}

{
  return ot::AddressResolver::CacheEntry::IsInRampDown(this);
}

uint64_t ot::AddressResolver::CacheEntry::CanEvict(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned char *)this + 24) & 1;
}

{
  return ot::AddressResolver::CacheEntry::CanEvict(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetTimeout(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned __int16 *)this + 10);
}

{
  return ot::AddressResolver::CacheEntry::GetTimeout(this);
}

uint64_t ot::AddressResolver::CacheEntry::GetRetryDelay(ot::AddressResolver::CacheEntry *this)
{
  return *((unsigned __int16 *)this + 11);
}

{
  return ot::AddressResolver::CacheEntry::GetRetryDelay(this);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::RemoveEntriesForRouterId(ot::AddressResolver *this, unsigned __int8 a2)
{
  unsigned __int16 v2 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a2);
  return ot::AddressResolver::Remove(this, v2, 1);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::Remove(ot::AddressResolver::CacheEntry *this, unsigned __int16 a2, char a3)
{
  char v10 = a3 & 1;
  uint64_t v5 = (ot::AddressResolver::CacheEntry **)this;
  v12[0] = (char *)this + 16400;
  v12[1] = (char *)this + 16408;
  for (uint64_t i = (ot::AddressResolver::CacheEntry ***)v12; i != (ot::AddressResolver::CacheEntry ***)&v13; ++i)
  {
    uint64_t v8 = *i;
    uint64_t v7 = 0;
    while (1)
    {
      this = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(v7, (uint64_t)v8);
      uint64_t v6 = this;
      if (!this) {
        break;
      }
      if ((v10 & 1) != 0
        && (unsigned __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(this), ot::Mle::RouterIdMatch((ot::Mle *)Rloc16, a2))
        || (v10 & 1) == 0 && a2 == (unsigned __int16)ot::AddressResolver::CacheEntry::GetRloc16(v6))
      {
        if (v10) {
          unsigned __int8 v4 = 3;
        }
        else {
          unsigned __int8 v4 = 4;
        }
        ot::AddressResolver::RemoveCacheEntry((ot::InstanceLocator *)v5, v6, v8, v7, v4);
        ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(v5 + 1, v6);
      }
      else
      {
        uint64_t v7 = v6;
      }
    }
  }
  return this;
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::RemoveEntriesForRloc16(ot::AddressResolver *this, unsigned __int16 a2)
{
  return ot::AddressResolver::Remove(this, a2, 0);
}

uint64_t ot::AddressResolver::GetEntryAfter(ot::AddressResolver::CacheEntry *a1, uint64_t a2)
{
  if (a1) {
    return ot::AddressResolver::CacheEntry::GetNext(a1);
  }
  else {
    return ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(a2);
  }
}

BOOL ot::Mle::RouterIdMatch(ot::Mle *this, unsigned __int16 a2)
{
  int v3 = ot::Mle::RouterIdFromRloc16((ot::Mle *)(unsigned __int16)this);
  return v3 == ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
}

{
  return ot::Mle::RouterIdMatch(this, a2);
}

void ot::AddressResolver::RemoveCacheEntry(ot::InstanceLocator *a1, ot::AddressResolver::CacheEntry *a2, ot::AddressResolver::CacheEntry **a3, ot::AddressResolver::CacheEntry *a4, unsigned __int8 a5)
{
  ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(a3, a4);
  if (a3 == (ot::AddressResolver::CacheEntry **)((char *)a1 + 16416))
  {
    uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
    ot::AddressResolver::CacheEntry::GetTarget(a2);
    ot::MeshForwarder::HandleResolved(v6, v5, 2);
  }
  ot::AddressResolver::LogCacheEntryChange((uint64_t)a1, 2u, a5, a2, (uint64_t)a3);
}

uint64_t ot::AddressResolver::FindCacheEntry(uint64_t a1, const ot::Ip6::Address *a2, uint64_t *a3, ot::AddressResolver::CacheEntry **a4)
{
  uint64_t v7 = 0;
  v11[0] = a1 + 16400;
  v11[1] = a1 + 16408;
  uint64_t v11[2] = a1 + 16416;
  v11[3] = a1 + 16424;
  for (uint64_t i = v11; i != &v12; ++i)
  {
    *a3 = *i;
    ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(*a3, a2, a4);
    uint64_t v7 = v4;
    if (v4) {
      break;
    }
  }
  return v7;
}

void ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(uint64_t a1, const ot::Ip6::Address *a2, ot::AddressResolver::CacheEntry **a3)
{
  ot::AsConst<ot::LinkedList<ot::AddressResolver::CacheEntry>>();
  ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(v3, a2, a3);
  ot::AsNonConst<ot::AddressResolver::CacheEntry>();
}

{
  ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(a1, a2, a3);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::RemoveEntryForAddress(ot::AddressResolver::CacheEntry **this, const ot::Ip6::Address *a2)
{
  return ot::AddressResolver::Remove(this, a2, 7u);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::Remove(ot::AddressResolver::CacheEntry **a1, const ot::Ip6::Address *a2, unsigned __int8 a3)
{
  char v10 = a1;
  __int16 v9 = a2;
  unsigned __int8 v8 = a3;
  uint64_t v7 = 0;
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  uint64_t result = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry((uint64_t)a1, a2, (uint64_t *)&v5, &v6);
  uint64_t v7 = result;
  if (result)
  {
    ot::AddressResolver::RemoveCacheEntry((ot::InstanceLocator *)a1, v7, v5, v6, v8);
    return (ot::AddressResolver::CacheEntry *)ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(a1 + 1, v7);
  }
  return result;
}

BOOL ot::AddressResolver::ReplaceEntriesForRloc16(BOOL this, __int16 a2, __int16 a3)
{
  BOOL v13 = this;
  __int16 v12 = a2;
  __int16 v11 = a3;
  v14[0] = this + 16400;
  v14[1] = this + 16408;
  char v10 = v14;
  __int16 v9 = (ot::AddressResolver::CacheEntry **)v14;
  unsigned __int8 v8 = (ot::AddressResolver::CacheEntry **)&v15;
  while (v9 != v8)
  {
    uint64_t v7 = 0;
    uint64_t v7 = *v9;
    v6[1] = v7;
    v6[0] = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)v7);
    uint64_t v5 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
    while (1)
    {
      this = ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=(v6, &v5);
      if (!this) {
        break;
      }
      uint64_t v4 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v6);
      __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(v4);
      if (v12 == Rloc16) {
        ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)v4, v11);
      }
      ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v6);
    }
    ++v9;
  }
  return this;
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::begin(uint64_t a1)
{
  uint64_t Head = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::begin(a1);
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
}

BOOL ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*(a1);
}

uint64_t ot::AddressResolver::CacheEntry::SetRloc16(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 16) = a2;
  return this;
}

{
  return ot::AddressResolver::CacheEntry::SetRloc16(this, a2);
}

uint64_t ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(ot::AddressResolver::CacheEntry **a1)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(a1);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::NewCacheEntry(ot::AddressResolver::CacheEntry **this, char a2)
{
  char v12 = a2 & 1;
  char v10 = 0;
  v13[0] = this + 2051;
  v13[1] = this + 2053;
  char v13[2] = this + 2052;
  v13[3] = this + 2050;
  __int16 v11 = ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Allocate(this + 1);
  if (!v11)
  {
    for (uint64_t i = v13; i != &v14; ++i)
    {
      unsigned __int8 v8 = (ot::AddressResolver *)*i;
      unsigned __int16 v5 = 0;
      uint64_t v7 = 0;
      for (j = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(0, *i);
            ;
            j = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(v6, (uint64_t)v8))
      {
        uint64_t v6 = j;
        if (!j) {
          break;
        }
        if (v8 == (ot::AddressResolver *)(this + 2050) || (ot::AddressResolver::CacheEntry::CanEvict(j) & 1) != 0)
        {
          __int16 v11 = v6;
          char v10 = v7;
        }
        else
        {
          ++v5;
        }
        uint64_t v7 = v6;
      }
      if (v11)
      {
        ot::AddressResolver::RemoveCacheEntry(this, v11, v8, v10, 6);
        return v11;
      }
      if ((v12 & 1) != 0 && v8 == (ot::AddressResolver *)(this + 2051) && v5 >= 0x20u) {
        return v11;
      }
    }
  }
  return v11;
}

ot::AddressResolver::CacheEntry *ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Allocate(ot::AddressResolver::CacheEntry **a1)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(a1);
}

{
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Allocate(a1);
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(ot::AddressResolver::CacheEntry **a1, ot::AddressResolver::CacheEntry *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::AddressResolver::CacheEntry>::Pop(a1);
  }
  uint64_t Next = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(a2);
  if (Next)
  {
    unsigned __int16 v2 = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(Next);
    ot::AddressResolver::CacheEntry::SetNext(a2, v2);
  }
  return Next;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(a1, a2);
}

void ot::AddressResolver::LogCacheEntryChange(uint64_t a1, unsigned __int8 a2, uint64_t a3, ot::AddressResolver::CacheEntry *a4, uint64_t a5)
{
  BOOL v13 = ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange,ot::AddressResolver::Reason,ot::AddressResolver::CacheEntry const&,ot::AddressResolver::CacheEntryList *)::kChangeStrings[a2];
  ot::AddressResolver::CacheEntry::GetTarget(a4);
  ot::Ip6::Address::ToString(v5, (ot::StringWriter *)v16);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v16);
  ot::AddressResolver::CacheEntry::GetRloc16(a4);
  ot::AddressResolver::ListToString(a1, a5);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Cache entry %s: %s, 0x%04x%s%s - %s", v6, v7, v8, v9, v10, v11, (char)v13);
}

uint64_t ot::AddressResolver::UpdateCacheEntry(ot::AddressResolver::CacheEntry **this, const ot::Ip6::Address *a2, __int16 a3)
{
  BOOL v13 = this;
  char v12 = a2;
  __int16 v11 = a3;
  unsigned int v10 = 0;
  uint64_t v9 = 0;
  CacheEntry = 0;
  uint64_t v7 = 0;
  CacheEntry = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry((uint64_t)this, a2, (uint64_t *)&v9, &v7);
  if (CacheEntry)
  {
    if (v9 == this + 2050 || v9 == this + 2051)
    {
      __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(CacheEntry);
      if (v11 == Rloc16) {
        return v10;
      }
      ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, v11);
    }
    else
    {
      ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(v9, v7);
      ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, v11);
      ot::AddressResolver::CacheEntry::MarkLastTransactionTimeAsInvalid(CacheEntry);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2050, CacheEntry);
      uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)this);
      ot::MeshForwarder::HandleResolved(v4, v12, 0);
    }
    ot::AddressResolver::LogCacheEntryChange((uint64_t)this, 1u, 1, CacheEntry, 0);
    return v10;
  }
  return 23;
}

uint64_t ot::AddressResolver::CacheEntry::MarkLastTransactionTimeAsInvalid(ot::AddressResolver::CacheEntry *this)
{
  return ot::AddressResolver::CacheEntry::SetLastTransactionTime((uint64_t)this, -1);
}

{
  return ot::AddressResolver::CacheEntry::MarkLastTransactionTimeAsInvalid(this);
}

_WORD *ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(ot::AddressResolver::CacheEntry **a1, ot::AddressResolver::CacheEntry *a2)
{
  uint64_t result = ot::AddressResolver::CacheEntry::SetNext(a2, *a1);
  *a1 = a2;
  return result;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(a1, a2);
}

void ot::AddressResolver::UpdateSnoopedCacheEntry(ot::AddressResolver *this, __n128 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned int v19 = this;
  uint64_t v18 = a2;
  unsigned __int16 v17 = a3;
  unsigned __int16 v16 = a4;
  unsigned __int16 v15 = 0;
  uint64_t v14 = 0;
  unsigned __int16 ShortAddress = 0;
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsFullThreadDevice(v4))
  {
    if (ot::AddressResolver::ResolveUsingNetDataServices(this, (const ot::Ip6::Address *)v18, &ShortAddress))
    {
      if (ot::AddressResolver::UpdateCacheEntry((ot::AddressResolver::CacheEntry **)this, (const ot::Ip6::Address *)v18, v17))
      {
        unsigned __int16 v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        unsigned __int16 ShortAddress = ot::Mac::Mac::GetShortAddress(v5);
        if (v17 != ShortAddress)
        {
          uint64_t v6 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          if (!ot::Mle::MleRouter::IsMinimalChild(v6, v17))
          {
            if (v16 == ShortAddress
              || (uint64_t v7 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
                  ot::Mle::MleRouter::IsMinimalChild(v7, v16)))
            {
              uint64_t v14 = ot::AddressResolver::NewCacheEntry((ot::AddressResolver::CacheEntry **)this, 1);
              if (v14)
              {
                v12[1] = (ot::AddressResolver *)((char *)this + 16408);
                v12[0] = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)this + 16408);
                uint64_t v11 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
                while (ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=(v12, &v11))
                {
                  unsigned int v10 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v12);
                  if ((ot::AddressResolver::CacheEntry::CanEvict(v10) & 1) == 0) {
                    ++v15;
                  }
                  ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v12);
                }
                ot::AddressResolver::CacheEntry::SetTarget((__n128 *)v14, v18);
                ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)v14, v17);
                if (v15 >= 0x20u)
                {
                  ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v14, 1);
                  ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v14, 0);
                }
                else
                {
                  ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v14, 0);
                  ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v14, 3);
                  uint64_t v8 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
                  ot::TimeTicker::RegisterReceiver(v8, 2);
                }
                ot::LinkedList<ot::AddressResolver::CacheEntry>::Push((ot::AddressResolver::CacheEntry **)this + 2051, v14);
                ot::AddressResolver::LogCacheEntryChange((uint64_t)this, 0, 1, v14, 0);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ot::AddressResolver::ResolveUsingNetDataServices(ot::AddressResolver *this, const ot::Ip6::Address *a2, unsigned __int16 *a3)
{
  unsigned __int16 v16 = this;
  unsigned __int16 v15 = a2;
  uint64_t v14 = a3;
  unsigned int v13 = 23;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(v12);
  ot::NetworkData::Service::DnsSrpUnicast::Info::Info((ot::NetworkData::Service::DnsSrpUnicast::Info *)v10);
  uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  char DeviceMode = ot::Mle::Mle::GetDeviceMode(v3);
  if (!ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::DeviceMode *)&DeviceMode))
  {
    while (1)
    {
      uint64_t v4 = (ot::NetworkData::Service::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Service::Manager>(this);
      if (ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(v4, v12, (ot::NetworkData::Service::DnsSrpUnicast::Info *)v10))break; {
      if (v10[18] == 1)
      }
      {
        uint64_t v7 = v15;
        Address = (const void *)ot::Ip6::SockAddr::GetAddress((ot::Ip6::SockAddr *)v10);
        if (ot::Equatable<ot::Ip6::Address>::operator==(v7, Address))
        {
          unsigned __int16 *v14 = v11;
          return 0;
        }
      }
    }
  }
  return v13;
}

__n128 ot::AddressResolver::CacheEntry::SetTarget(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this = *a2;
  return result;
}

uint64_t ot::AddressResolver::CacheEntry::SetCanEvict(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2 & 1;
  return this;
}

{
  return ot::AddressResolver::CacheEntry::SetCanEvict(this, a2);
}

uint64_t ot::AddressResolver::CacheEntry::SetTimeout(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 2ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = a2;
  return this;
}

{
  return ot::AddressResolver::CacheEntry::SetTimeout(this, a2);
}

BOOL ot::AddressResolver::RestartAddressQueries(ot::AddressResolver *this)
{
  unsigned __int16 v11 = this;
  ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail();
  unsigned int v10 = v1;
  if (v1)
  {
    uint64_t Head = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)this + 16424);
    ot::AddressResolver::CacheEntry::SetNext(v10, Head);
  }
  else
  {
    uint64_t v2 = ot::LinkedList<ot::AddressResolver::CacheEntry>::GetHead((uint64_t)this + 16424);
    ot::LinkedList<ot::AddressResolver::CacheEntry>::SetHead((void *)this + 2052, v2);
  }
  ot::LinkedList<ot::AddressResolver::CacheEntry>::Clear((void *)this + 2053);
  v9[1] = (ot::AddressResolver *)((char *)this + 16416);
  v9[0] = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)this + 16416);
  uint64_t v8 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=(v9, &v8);
    if (!result) {
      break;
    }
    uint64_t v7 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v9);
    ot::AddressResolver::CacheEntry::GetTarget(v7);
    ot::AddressResolver::SendAddressQuery(this, v5);
    IgnoreError();
    ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v7, 3);
    ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)v7, 8);
    ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v7, 0);
    ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v9);
  }
  return result;
}

void ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail()
{
  ot::AsConst<ot::LinkedList<ot::AddressResolver::CacheEntry>>();
  ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail(v0);
  ot::AsNonConst<ot::AddressResolver::CacheEntry>();
}

{
  ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail();
}

void *ot::LinkedList<ot::AddressResolver::CacheEntry>::SetHead(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::SetHead(result, a2);
}

_WORD *ot::AddressResolver::CacheEntry::SetNext(_WORD *this, ot::AddressResolver::CacheEntry *a2)
{
  uint64_t v4 = this;
  if (a2)
  {
    uint64_t v2 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)this);
    uint64_t CacheEntryPool = ot::AddressResolver::GetCacheEntryPool(v2);
    this = (_WORD *)ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetIndexOf(CacheEntryPool, (uint64_t)a2);
    v4[9] = (_WORD)this;
  }
  else
  {
    this[9] = -1;
  }
  return this;
}

void *ot::LinkedList<ot::AddressResolver::CacheEntry>::Clear(void *result)
{
  *BOOL result = 0;
  return result;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Clear(result);
}

uint64_t ot::AddressResolver::SendAddressQuery(ot::AddressResolver *this, const ot::Ip6::Address *a2)
{
  unsigned int v32 = this;
  unsigned int v31 = a2;
  unsigned int v30 = 0;
  char v29 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v28, Instance);
  uint64_t v3 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  ot::MeshForwarder::UpdateMatterAddressQuerryCnt(v3, v31);
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  char v29 = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(v4, 2u);
  if (v29)
  {
    unsigned int v30 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v29, v31);
    if (!v30)
    {
      ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast((ot::Tmf::MessageInfo *)v28);
      unsigned __int16 v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
      unsigned int v30 = ot::Coap::CoapBase::SendMessage(v5, v29, (const ot::Ip6::MessageInfo *)v28);
      if (!v30)
      {
        char v25 = ot::UriToString<(ot::Uri)2>();
        ot::Ip6::Address::ToString(v31, (ot::StringWriter *)v34);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Sent %s for %s", v6, v7, v8, v9, v10, v11, v25);
      }
    }
  }
  else
  {
    unsigned int v30 = 3;
  }
  char v12 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
  ot::TimeTicker::RegisterReceiver(v12, 2);
  if (v30 && v29) {
    ot::Message::Free(v29);
  }
  unsigned int v13 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  if (ot::BackboneRouter::Local::IsPrimary(v13))
  {
    uint64_t v14 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    if (ot::BackboneRouter::Leader::IsDomainUnicast(v14, v31))
    {
      unsigned __int16 v15 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v15);
      char v24 = ot::UriToString<(ot::Uri)2>();
      ot::UriToString<(ot::Uri)9>();
      ot::Ip6::Address::ToString(v31, (ot::StringWriter *)v33);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v33);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Extending %s to %s for target %s, rloc16=%04x(self)", v16, v17, v18, v19, v20, v21, v24);
      uint64_t v22 = (ot::BackboneRouter::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
      ot::BackboneRouter::Manager::SendBackboneQuery(v22, v31, Rloc16);
      IgnoreError();
    }
  }
  return v30;
}

uint64_t ot::AddressResolver::CacheEntry::SetRetryDelay(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 22) = a2;
  return this;
}

{
  return ot::AddressResolver::CacheEntry::SetRetryDelay(this, a2);
}

uint64_t ot::AddressResolver::LookUp(ot::AddressResolver::CacheEntry **this, const ot::Ip6::Address *a2)
{
  unsigned __int16 v5 = this;
  uint64_t v4 = a2;
  unsigned __int16 v3 = -2;
  ot::AddressResolver::Resolve(this, (__n128 *)a2, &v3, 0);
  IgnoreError();
  return v3;
}

uint64_t ot::AddressResolver::Resolve(ot::AddressResolver::CacheEntry **this, __n128 *a2, unsigned __int16 *a3, char a4)
{
  uint64_t v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  char v20 = a4 & 1;
  unsigned int v19 = 0;
  CacheEntry = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  if (!ot::AddressResolver::ResolveUsingNetDataServices((ot::AddressResolver *)this, (const ot::Ip6::Address *)a2, a3))goto LABEL_29; {
  CacheEntry = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry((uint64_t)this, (const ot::Ip6::Address *)v22, (uint64_t *)&v16, &v17);
  }
  if (CacheEntry && (v16 == this + 2050 || v16 == this + 2051))
  {
    ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(v16, v17);
    uint64_t v14 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>((ot::InstanceLocator *)this);
    unsigned __int16 Rloc16 = ot::AddressResolver::CacheEntry::GetRloc16(CacheEntry);
    if ((unsigned __int16)ot::RouterTable::GetNextHop(v14, Rloc16) != 65534)
    {
      if (v16 == this + 2051) {
        ot::AddressResolver::CacheEntry::MarkLastTransactionTimeAsInvalid(CacheEntry);
      }
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2050, CacheEntry);
      unsigned __int16 v5 = ot::AddressResolver::CacheEntry::GetRloc16(CacheEntry);
      *uint64_t v21 = v5;
      goto LABEL_29;
    }
    ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(this + 1, CacheEntry);
    CacheEntry = 0;
  }
  if (!CacheEntry)
  {
    if ((v20 & 1) == 0)
    {
      unsigned int v19 = 23;
      goto LABEL_29;
    }
    CacheEntry = ot::AddressResolver::NewCacheEntry(this, 0);
    if (!CacheEntry)
    {
      unsigned int v19 = 3;
      goto LABEL_29;
    }
    ot::AddressResolver::CacheEntry::SetTarget((__n128 *)CacheEntry, v22);
    ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, 65534);
    ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)CacheEntry, 8);
    ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)CacheEntry, 0);
    uint64_t v16 = 0;
  }
  if (v20)
  {
    if (v16 == this + 2052)
    {
      unsigned int v19 = 9;
    }
    else
    {
      if (v16 == this + 2053)
      {
        if ((ot::AddressResolver::CacheEntry::IsInRampDown(CacheEntry) & 1) == 0)
        {
          unsigned int v19 = 2;
          goto LABEL_29;
        }
        ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(this + 2053, v17);
      }
      ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)CacheEntry, 3);
      unsigned int v19 = ot::AddressResolver::SendAddressQuery((ot::AddressResolver *)this, (const ot::Ip6::Address *)v22);
      if (v19)
      {
        ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::Free(this + 1, CacheEntry);
      }
      else
      {
        if (!v16) {
          ot::AddressResolver::LogCacheEntryChange((uint64_t)this, 0, 0, CacheEntry, 0);
        }
        ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2052, CacheEntry);
        unsigned int v19 = 9;
      }
    }
  }
  else
  {
    unsigned int v19 = 23;
  }
LABEL_29:
  if (v19 && v19 != 9)
  {
    char v6 = otThreadErrorToString(v19);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"AddrResolver", "Error %s while resolving EID-to-RLOC", v7, v8, v9, v10, v11, v12, v6);
  }
  return v19;
}

ot::NetworkData::Service::DnsSrpUnicast::Info *ot::NetworkData::Service::DnsSrpUnicast::Info::Info(ot::NetworkData::Service::DnsSrpUnicast::Info *this)
{
  return this;
}

{
  ot::Ip6::SockAddr::SockAddr(this);
  return this;
}

BOOL ot::Mle::DeviceMode::GetNetworkDataType(ot::Mle::DeviceMode *this)
{
  return (*(unsigned char *)this & 1) == 0;
}

{
  return ot::Mle::DeviceMode::GetNetworkDataType(this);
}

void ot::AddressResolver::HandleTmf<(ot::Uri)1>(ot::AddressResolver::CacheEntry **a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v44 = a1;
  uint64_t v43 = a2;
  uint64_t v42 = a3;
  unsigned __int16 v39 = 0;
  unsigned int v38 = 0;
  uint64_t v37 = 0;
  CacheEntry = 0;
  uint64_t v35 = 0;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2)
    && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v43, (uint64_t)v41, v3, v4, v5)
    && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v43, (uint64_t)v40, v6, v7, v8)&& !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v43, &v39, v9, v10))
  {
    int v33 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v43, &v38, v11, v12);
    if (v33)
    {
      if (v33 != 23) {
        return;
      }
      unsigned int v38 = 0;
    }
    char v32 = ot::UriToString<(ot::Uri)1>();
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v42);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
    ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    ot::Ip6::Address::ToString((ot::Ip6::Address *)v41, (ot::StringWriter *)v45);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v45);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Received %s from 0x%04x for %s to 0x%04x", v15, v16, v17, v18, v19, v20, v32);
    CacheEntry = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::FindCacheEntry((uint64_t)a1, (const ot::Ip6::Address *)v41, (uint64_t *)&v37, &v35);
    if (!CacheEntry) {
      return;
    }
    if (v37 != a1 + 2050 || !ot::AddressResolver::CacheEntry::IsLastTransactionTimeValid(CacheEntry)) {
      goto LABEL_16;
    }
    MeshLocalIid = (const void *)ot::AddressResolver::CacheEntry::GetMeshLocalIid(CacheEntry);
    if (!ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(MeshLocalIid, v40))
    {
      ot::AddressResolver::SendAddressError((ot::AddressResolver *)a1, (const ot::Ip6::Address *)v41, (const ot::Ip6::InterfaceIdentifier *)v40, 0);
      return;
    }
    unsigned int v31 = v38;
    if (v31 < ot::AddressResolver::CacheEntry::GetLastTransactionTime(CacheEntry))
    {
LABEL_16:
      ot::AddressResolver::CacheEntry::SetRloc16((uint64_t)CacheEntry, v39);
      ot::AddressResolver::CacheEntry::SetMeshLocalIid((uint64_t)CacheEntry, (const ot::Ip6::InterfaceIdentifier *)v40);
      ot::AddressResolver::CacheEntry::SetLastTransactionTime((uint64_t)CacheEntry, v38);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(v37, v35);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(a1 + 2050, CacheEntry);
      ot::AddressResolver::LogCacheEntryChange((uint64_t)a1, 1u, 2, CacheEntry, 0);
      uint64_t v22 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
      if (!ot::Coap::CoapBase::SendEmptyAck(v22, v43, v42))
      {
        char v23 = ot::UriToString<(ot::Uri)1>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Sent %s ack", v24, v25, v26, v27, v28, v29, v23);
      }
      uint64_t v30 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
      ot::MeshForwarder::HandleResolved(v30, v41, 0);
    }
  }
}

void ot::AddressResolver::SendAddressError(ot::AddressResolver *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3, __n128 *a4)
{
  uint64_t v30 = this;
  uint64_t v29 = a2;
  uint64_t v28 = a3;
  uint64_t v27 = a4;
  int appended = 0;
  uint64_t v25 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v24, Instance);
  unsigned __int16 v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v25 = ot::Coap::CoapBase::NewMessage(v5);
  if (v25)
  {
    ot::Coap::Message::Init(v25, v27 == 0, 2);
    uint64_t v22 = v25;
    uint64_t v6 = ot::PathForUri(0);
    int appended = ot::Coap::Message::AppendUriPathOptions(v22, (ot *)v6);
    if (!appended)
    {
      int appended = ot::Coap::Message::SetPayloadMarker(v25);
      if (!appended)
      {
        int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v25, v29);
        if (!appended)
        {
          int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v25, v28);
          if (!appended)
          {
            if (v27) {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v24, v27);
            }
            else {
              ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast((ot::Tmf::MessageInfo *)v24);
            }
            uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
            int appended = ot::Coap::CoapBase::SendMessage(v7, v25, (const ot::Ip6::MessageInfo *)v24);
            if (!appended)
            {
              char v21 = ot::UriToString<(ot::Uri)0>();
              ot::Ip6::Address::ToString((ot::Ip6::Address *)v29, (ot::StringWriter *)v31);
              ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Sent %s for target %s", v8, v9, v10, v11, v12, v13, v21);
            }
          }
        }
      }
    }
  }
  else
  {
    int appended = 3;
  }
  if (appended)
  {
    if (v25) {
      ot::Message::Free(v25);
    }
    char v20 = ot::UriToString<(ot::Uri)0>();
    ot::ErrorToString(appended);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Failed to send %s: %s", v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t ot::AddressResolver::CacheEntry::SetMeshLocalIid(uint64_t this, const ot::Ip6::InterfaceIdentifier *a2)
{
  *(void *)(this + 24) = *(void *)a2;
  return this;
}

{
  return ot::AddressResolver::CacheEntry::SetMeshLocalIid(this, a2);
}

uint64_t ot::AddressResolver::CacheEntry::SetLastTransactionTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = a2;
  return this;
}

{
  return ot::AddressResolver::CacheEntry::SetLastTransactionTime(this, a2);
}

void ot::AddressResolver::HandleTmf<(ot::Uri)0>(ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  v63 = a1;
  int v62 = a2;
  int v61 = a3;
  int LocatorAddress = 0;
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    char v3 = ot::UriToString<(ot::Uri)0>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Received %s", v4, v5, v6, v7, v8, v9, v3);
    if (ot::Coap::Message::IsConfirmable(v62))
    {
      SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v61);
      if (!ot::Ip6::Address::IsMulticast(SockAddr))
      {
        uint64_t v14 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        if (!ot::Coap::CoapBase::SendEmptyAck(v14, v62, v61))
        {
          char v15 = ot::UriToString<(ot::Uri)0>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Sent %s ack", v16, v17, v18, v19, v20, v21, v15);
        }
      }
    }
    int LocatorAddress = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v62, (uint64_t)v59, v10, v11, v12);
    if (!LocatorAddress)
    {
      int LocatorAddress = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v62, (uint64_t)v58, v22, v23, v24);
      if (!LocatorAddress)
      {
        uint64_t v25 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
        ot::Ip6::Netif::GetUnicastAddresses(v25);
        v56[1] = v26;
        v56[0] = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v26);
        uint64_t v55 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
        while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v56, &v55))
        {
          uint64_t v54 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v56);
          Address = (const void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v54);
          if (ot::Equatable<ot::Ip6::Address>::operator==(Address, v59))
          {
            uint64_t v28 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
            MeshLocal64 = (ot::Ip6::Address *)ot::Mle::Mle::GetMeshLocal64(v28);
            Iid = (const void *)ot::Ip6::Address::GetIid(MeshLocal64);
            if (ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=(Iid, v58))
            {
              uint64_t v47 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
              unsigned int v31 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v54);
              if (ot::BackboneRouter::Leader::IsDomainUnicast(v47, v31))
              {
                char v32 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
                ot::DuaManager::NotifyDuplicateDomainUnicastAddress(v32);
              }
              else
              {
                int v33 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
                ot::Ip6::Netif::RemoveUnicastAddress(v33, v54);
              }
              goto LABEL_25;
            }
          }
          ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v56);
        }
        ot::Ip6::InterfaceIdentifier::ConvertToExtAddress((ot::Ip6::InterfaceIdentifier *)v58, (ot::Mac::ExtAddress *)v64);
        uint64_t v34 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
        char v52 = ot::ChildTable::Iterate(v34, 0);
        v53 = (ot::ChildTable::IteratorBuilder *)&v52;
        v51[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v52);
        v51[1] = v35;
        v50[0] = ot::ChildTable::IteratorBuilder::end(v53);
        v50[1] = v36;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v51, v50))
        {
          uint64_t v49 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v51);
          if (!ot::Neighbor::IsFullThreadDevice(v49))
          {
            ot::Neighbor::GetExtAddress(v49);
            if (ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v37, v64)
              && !ot::Child::RemoveIp6Address(v49, (const ot::Ip6::Address *)v59))
            {
              v46 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
              unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v49);
              int LocatorAddress = ot::Mle::Mle::GetLocatorAddress(v46, (ot::Ip6::Address *)&v57, Rloc16);
              if (!LocatorAddress) {
                ot::AddressResolver::SendAddressError(a1, (const ot::Ip6::Address *)v59, (const ot::Ip6::InterfaceIdentifier *)v58, &v57);
              }
              break;
            }
          }
          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v51);
        }
      }
    }
  }
  else
  {
    int LocatorAddress = 2;
  }
LABEL_25:
  if (LocatorAddress)
  {
    char v45 = ot::ErrorToString(LocatorAddress);
    ot::UriToString<(ot::Uri)0>();
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"AddrResolver", "Error %s when processing %s", v39, v40, v41, v42, v43, v44, v45);
  }
}

BOOL ot::Neighbor::IsFullThreadDevice(ot::Neighbor *this)
{
  char v3 = this;
  char DeviceMode = ot::Neighbor::GetDeviceMode(this);
  return ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)&DeviceMode);
}

{
  return ot::Neighbor::IsFullThreadDevice(this);
}

void ot::AddressResolver::HandleTmf<(ot::Uri)2>(ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v54 = a1;
  v53 = a2;
  char v52 = a3;
  unsigned int v50 = 0;
  if (ot::Coap::Message::IsNonConfirmablePostRequest(a2)
    && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v53, (uint64_t)v51, v3, v4, v5))
  {
    char v40 = ot::UriToString<(ot::Uri)2>();
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v52);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
    ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    ot::Ip6::Address::ToString((ot::Ip6::Address *)v51, (ot::StringWriter *)v56);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v56);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Received %s from 0x%04x for target %s", v8, v9, v10, v11, v12, v13, v40);
    uint64_t v14 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
    if (ot::Ip6::Netif::HasUnicastAddress(v14, (const ot::Ip6::Address *)v51))
    {
      char v15 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      MeshLocal64 = (ot::Ip6::Address *)ot::Mle::Mle::GetMeshLocal64(v15);
      uint64_t v39 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(MeshLocal64);
      uint64_t v17 = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(v52);
      ot::AddressResolver::SendAddressQueryResponse(a1, (const ot::Ip6::Address *)v51, v39, 0, v17);
      uint64_t v18 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
      ot::Ip6::Ip6::RemoveMplEntry(v18, v53);
    }
    else
    {
      uint64_t v19 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
      char v48 = ot::ChildTable::Iterate(v19, 0);
      uint64_t v49 = (ot::ChildTable::IteratorBuilder *)&v48;
      v47[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v48);
      v47[1] = v20;
      v46[0] = ot::ChildTable::IteratorBuilder::end(v49);
      v46[1] = v21;
      while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v47, v46))
      {
        char v45 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v47);
        if (!ot::Neighbor::IsFullThreadDevice(v45) && ot::Neighbor::GetLinkFailures(v45) < 4u)
        {
          BOOL HasIp6Address = ot::Child::HasIp6Address(v45, (const ot::Ip6::Address *)v51);
          if (HasIp6Address)
          {
            int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)HasIp6Address);
            int LastHeard = ot::Neighbor::GetLastHeard(v45);
            uint64_t v23 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
            unsigned int v50 = ot::Time::MsecToSec(v23);
            MeshLocalIid = (ot::Ip6::InterfaceIdentifier *)ot::Child::GetMeshLocalIid(v45);
            uint64_t v24 = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(v52);
            ot::AddressResolver::SendAddressQueryResponse(a1, (const ot::Ip6::Address *)v51, MeshLocalIid, &v50, v24);
            uint64_t v25 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(a1);
            ot::Ip6::Ip6::RemoveMplEntry(v25, v53);
            return;
          }
        }
        ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v47);
      }
      uint64_t v26 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(a1);
      if (ot::BackboneRouter::Local::IsPrimary(v26))
      {
        uint64_t v27 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
        if (ot::BackboneRouter::Leader::IsDomainUnicast(v27, (const ot::Ip6::Address *)v51))
        {
          uint64_t v28 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v52);
          uint64_t v29 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v28);
          unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v29);
          char v37 = ot::UriToString<(ot::Uri)2>();
          ot::UriToString<(ot::Uri)9>();
          ot::Ip6::Address::ToString((ot::Ip6::Address *)v51, (ot::StringWriter *)v55);
          ot::String<(unsigned short)40>::AsCString((uint64_t)v55);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Extending %s to %s for target %s rloc16=%04x", v30, v31, v32, v33, v34, v35, v37);
          uint64_t v36 = (ot::BackboneRouter::Manager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(a1);
          ot::BackboneRouter::Manager::SendBackboneQuery(v36, (const ot::Ip6::Address *)v51, Locator);
          IgnoreError();
        }
      }
    }
  }
}

void ot::AddressResolver::SendAddressQueryResponse(ot::AddressResolver *this, const ot::Ip6::Address *a2, const ot::Ip6::InterfaceIdentifier *a3, unsigned int *a4, __n128 *a5)
{
  uint64_t v26 = this;
  uint64_t v25 = a2;
  uint64_t v24 = a3;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  int v21 = 0;
  uint64_t v20 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v19, Instance);
  uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v20 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v6, 1u);
  if (v20)
  {
    int v21 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v20, v25);
    if (!v21)
    {
      int v21 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v20, v24);
      if (!v21)
      {
        uint64_t v17 = v20;
        uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v7);
        int v21 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v17, Rloc16);
        if (!v21 && (!v23 || (int v21 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v20, *v23)) == 0))
        {
          ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v19, v22);
          uint64_t v9 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          int v21 = ot::Coap::CoapBase::SendMessage(v9, v20, (const ot::Ip6::MessageInfo *)v19);
          if (!v21)
          {
            char v16 = ot::UriToString<(ot::Uri)1>();
            ot::Ip6::Address::ToString((ot::Ip6::Address *)v25, (ot::StringWriter *)v27);
            ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Sent %s for target %s", v10, v11, v12, v13, v14, v15, v16);
          }
        }
      }
    }
  }
  else
  {
    int v21 = 3;
  }
  if (v21)
  {
    if (v20) {
      ot::Message::Free(v20);
    }
  }
}

uint64_t ot::Ip6::Ip6::RemoveMplEntry(ot::Ip6::Ip6 *this, ot::Message *a2)
{
  return ot::Ip6::Mpl::RemoveMatchedMessage((ot::Ip6::Ip6 *)((char *)this + 136), a2);
}

{
  return ot::Ip6::Ip6::RemoveMplEntry(this, a2);
}

uint64_t ot::Neighbor::GetLinkFailures(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 35);
}

{
  return ot::Neighbor::GetLinkFailures(this);
}

uint64_t ot::Child::GetMeshLocalIid(ot::Child *this)
{
  return (uint64_t)this + 192;
}

{
  return ot::Child::GetMeshLocalIid(this);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::HandleTimeTick(ot::AddressResolver::CacheEntry **this)
{
  uint64_t v43 = this;
  char v42 = 0;
  v41[1] = (ot::AddressResolver::CacheEntry *)(this + 2051);
  v41[0] = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)(this + 2051));
  uint64_t v40 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
  while (ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=(v41, &v40))
  {
    uint64_t v39 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v41);
    if (!ot::AddressResolver::CacheEntry::IsTimeoutZero(v39))
    {
      char v42 = 1;
      ot::AddressResolver::CacheEntry::DecrementTimeout((uint64_t)v39);
      if (ot::AddressResolver::CacheEntry::IsTimeoutZero(v39)) {
        ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v39, 1);
      }
    }
    ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v41);
  }
  v38[1] = (ot::AddressResolver::CacheEntry *)(this + 2053);
  v38[0] = (ot::AddressResolver::CacheEntry *)ot::LinkedList<ot::AddressResolver::CacheEntry>::begin((uint64_t)(this + 2053));
  uint64_t v37 = ot::LinkedList<ot::AddressResolver::CacheEntry>::end();
  while (ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator!=(v38, &v37))
  {
    uint64_t v36 = (ot::AddressResolver::CacheEntry *)ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator*((uint64_t)v38);
    if (!ot::AddressResolver::CacheEntry::IsTimeoutZero(v36))
    {
      char v42 = 1;
      ot::AddressResolver::CacheEntry::DecrementTimeout((uint64_t)v36);
      if (ot::AddressResolver::CacheEntry::IsTimeoutZero(v36))
      {
        if (ot::AddressResolver::CacheEntry::IsInRampDown(v36))
        {
          unsigned __int16 RetryDelay = ot::AddressResolver::CacheEntry::GetRetryDelay(v36);
          unsigned __int16 v35 = ot::Max<unsigned short>((int)RetryDelay >> 1, 8u);
          if (v35 != (unsigned __int16)ot::AddressResolver::CacheEntry::GetRetryDelay(v36))
          {
            ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)v36, v35);
            ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v36, 64);
            ot::AddressResolver::CacheEntry::GetTarget(v36);
            ot::Ip6::Address::ToString(v9, (ot::StringWriter *)v45);
            char v10 = ot::String<(unsigned short)40>::AsCString((uint64_t)v45);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Ramping down %s retry-delay:%u", v11, v12, v13, v14, v15, v16, v10);
          }
        }
        else
        {
          ot::AddressResolver::CacheEntry::SetRampDown((uint64_t)v36, 1);
          ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v36, 64);
          ot::AddressResolver::CacheEntry::GetTarget(v36);
          ot::Ip6::Address::ToString(v1, (ot::StringWriter *)v46);
          char v29 = ot::String<(unsigned short)40>::AsCString((uint64_t)v46);
          ot::AddressResolver::CacheEntry::GetTimeout(v36);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Starting ramp down of %s retry-delay:%u", v2, v3, v4, v5, v6, v7, v29);
        }
      }
    }
    ot::ItemPtrIterator<ot::AddressResolver::CacheEntry,ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator>::operator++(v38);
  }
  uint64_t v34 = 0;
  while (1)
  {
    BOOL result = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::GetEntryAfter(v34, (uint64_t)(this + 2052));
    uint64_t v33 = result;
    if (!result) {
      break;
    }
    if (ot::AddressResolver::CacheEntry::IsTimeoutZero(result)) {
      __assert_rtn("HandleTimeTick", "address_resolver.cpp", 1077, "!entry->IsTimeoutZero()");
    }
    char v42 = 1;
    ot::AddressResolver::CacheEntry::DecrementTimeout((uint64_t)v33);
    if (ot::AddressResolver::CacheEntry::IsTimeoutZero(v33))
    {
      unsigned __int16 v31 = ot::AddressResolver::CacheEntry::GetRetryDelay(v33);
      ot::AddressResolver::CacheEntry::SetTimeout((uint64_t)v33, v31);
      unsigned __int16 v32 = 2 * v31;
      if (v32 > 0x40u) {
        unsigned __int16 v32 = 64;
      }
      ot::AddressResolver::CacheEntry::SetRetryDelay((uint64_t)v33, v32);
      ot::AddressResolver::CacheEntry::SetCanEvict((uint64_t)v33, 1);
      ot::AddressResolver::CacheEntry::SetRampDown((uint64_t)v33, 0);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::PopAfter(this + 2052, v34);
      ot::LinkedList<ot::AddressResolver::CacheEntry>::Push(this + 2053, v33);
      char v27 = ot::UriToString<(ot::Uri)1>();
      ot::AddressResolver::CacheEntry::GetTarget(v33);
      ot::Ip6::Address::ToString(v18, (ot::StringWriter *)v44);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v44);
      ot::AddressResolver::CacheEntry::GetTimeout(v33);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AddrResolver", "Timed out waiting for %s for %s, retry: %d", v19, v20, v21, v22, v23, v24, v27);
      uint64_t v28 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)this);
      ot::AddressResolver::CacheEntry::GetTarget(v33);
      ot::MeshForwarder::HandleResolved(v28, v25, 2);
    }
    else
    {
      uint64_t v34 = v33;
    }
  }
  if ((v42 & 1) == 0)
  {
    uint64_t v26 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)this);
    return (ot::AddressResolver::CacheEntry *)ot::TimeTicker::UnregisterReceiver(v26, 2);
  }
  return result;
}

BOOL ot::AddressResolver::CacheEntry::IsTimeoutZero(ot::AddressResolver::CacheEntry *this)
{
  return *((_WORD *)this + 10) == 0;
}

{
  return ot::AddressResolver::CacheEntry::IsTimeoutZero(this);
}

uint64_t ot::AddressResolver::CacheEntry::DecrementTimeout(uint64_t this)
{
  return this;
}

{
  return ot::AddressResolver::CacheEntry::DecrementTimeout(this);
}

uint64_t ot::AddressResolver::CacheEntry::SetRampDown(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2 & 1;
  return this;
}

{
  return ot::AddressResolver::CacheEntry::SetRampDown(this, a2);
}

ot::AddressResolver::CacheEntry *ot::AddressResolver::HandleIcmpReceive(ot::AddressResolver::CacheEntry **this, ot::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Ip6::Icmp::Header *a4)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  char v10 = a3;
  uint64_t v9 = a4;
  BOOL result = (ot::AddressResolver::CacheEntry *)ot::Ip6::Icmp::Header::GetType(a4);
  if (result == 1)
  {
    BOOL result = (ot::AddressResolver::CacheEntry *)ot::Ip6::Icmp::Header::GetCode(v9);
    if (!(_BYTE)result)
    {
      unsigned __int16 Offset = ot::Message::GetOffset(v11);
      BOOL result = (ot::AddressResolver::CacheEntry *)ot::Message::Read<ot::Ip6::Header>(v11, Offset, v8);
      if (!result)
      {
        Destination = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v8);
        return ot::AddressResolver::Remove(this, Destination, 5u);
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIcmp6Header>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

uint64_t ot::Ip6::Icmp::Header::GetCode(ot::Ip6::Icmp::Header *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Ip6::Icmp::Header::GetCode(this);
}

const char *ot::AddressResolver::ListToString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = "";
  if (a2 == a1 + 16400) {
    return "cached";
  }
  if (a2 == a1 + 16408) {
    return "snooped";
  }
  if (a2 == a1 + 16416) {
    return "query";
  }
  if (a2 == a1 + 16424) {
    return "query-retry";
  }
  return v3;
}

void ot::AddressResolver::CacheEntry::Init(ot::AddressResolver::CacheEntry *this, ot::Instance *a2)
{
  *((_WORD *)this + 9) = -1;
}

uint64_t ot::AddressResolver::GetCacheEntryPool(ot::AddressResolver *this)
{
  return (uint64_t)this + 8;
}

{
  return ot::AddressResolver::GetCacheEntryPool(this);
}

uint64_t ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetEntryAt(uint64_t a1, unsigned __int16 a2)
{
  return a1 + 8 + 32 * a2;
}

{
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetEntryAt(a1, a2);
}

uint64_t ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetIndexOf(uint64_t a1, uint64_t a2)
{
  return (unsigned __int16)((a2 - (a1 + 8)) / 32);
}

{
  return ot::Pool<ot::AddressResolver::CacheEntry,(unsigned short)512>::GetIndexOf(a1, a2);
}

void *ot::Ip6::Icmp::Handler::Handler(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = a3;
  result[2] = 0;
  return result;
}

ot::Ip6::SockAddr *ot::Ip6::SockAddr::SockAddr(ot::Ip6::SockAddr *this)
{
  return this;
}

{
  ot::Clearable<ot::Ip6::SockAddr>::Clear((uint64_t)this);
  return this;
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(ot::AddressResolver::CacheEntry **a1, const ot::Ip6::Address *a2, ot::AddressResolver::CacheEntry **a3)
{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>((uint64_t)a1, *a1, 0, a2, a3);
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(a1, a2, a3);
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(uint64_t a1, ot::AddressResolver::CacheEntry *Next, ot::AddressResolver::CacheEntry *a3, const ot::Ip6::Address *a4, ot::AddressResolver::CacheEntry **a5)
{
  *a5 = 0;
  while (Next != a3 && !ot::AddressResolver::CacheEntry::Matches(Next, a4))
  {
    *a5 = Next;
    uint64_t Next = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(Next);
  }
  return Next;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::FindMatching<ot::Ip6::Address>(a1, Next, a3, a4, a5);
}

BOOL ot::AddressResolver::CacheEntry::Matches(ot::AddressResolver::CacheEntry *this, const ot::Ip6::Address *a2)
{
  ot::AddressResolver::CacheEntry::GetTarget(this);
  return ot::Equatable<ot::Ip6::Address>::operator==(v2, a2);
}

{
  return ot::AddressResolver::CacheEntry::Matches(this, a2);
}

uint64_t ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator::Advance(ot::AddressResolver::CacheEntry **a1)
{
  uint64_t result = ot::AddressResolver::CacheEntry::GetNext(*a1);
  *a1 = (ot::AddressResolver::CacheEntry *)result;
  return result;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::Iterator::Advance(a1);
}

ot::AddressResolver::CacheEntry *ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail(ot::AddressResolver::CacheEntry **a1)
{
  uint64_t Next = *a1;
  if (*a1)
  {
    for (uint64_t i = ot::AddressResolver::CacheEntry::GetNext(Next); i; uint64_t i = ot::AddressResolver::CacheEntry::GetNext(Next))
      uint64_t Next = (ot::AddressResolver::CacheEntry *)ot::AddressResolver::CacheEntry::GetNext(Next);
  }
  return Next;
}

{
  return ot::LinkedList<ot::AddressResolver::CacheEntry>::GetTail(a1);
}

ot::AnnounceBeginServer *ot::AnnounceBeginServer::AnnounceBeginServer(ot::AnnounceBeginServer *this, ot::Instance *a2)
{
  return this;
}

{
  ot::AnnounceBeginServer::AnnounceBeginServer(this, a2);
  return this;
}

uint64_t ot::AnnounceBeginServer::HandleTimer(ot::AnnounceBeginServer *this, ot::Timer *a2)
{
  uint64_t v2 = (ot::AnnounceSenderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(this);
  return ot::AnnounceSenderBase::HandleTimer(v2);
}

uint64_t ot::AnnounceBeginServer::SendAnnounce(ot::AnnounceBeginServer *this, int a2, char a3, unsigned __int16 a4)
{
  char v10 = this;
  int v9 = a2;
  char v8 = a3;
  unsigned __int16 v7 = a4;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v6, a2);
  ot::AnnounceSenderBase::SetChannelMask(this, v6);
  ot::AnnounceSenderBase::SetPeriod((uint64_t)this, v7);
  ot::AnnounceSenderBase::SetJitter((uint64_t)this, 0);
  return ot::AnnounceSenderBase::SendAnnounce(this, v8);
}

uint64_t ot::AnnounceSenderBase::SetPeriod(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

{
  return ot::AnnounceSenderBase::SetPeriod(this, a2);
}

uint64_t ot::AnnounceSenderBase::SetJitter(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 8) = a2;
  return this;
}

{
  return ot::AnnounceSenderBase::SetJitter(this, a2);
}

void ot::AnnounceBeginServer::HandleTmf<(ot::Uri)10>(ot::AnnounceBeginServer *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v26 = a1;
  uint64_t v25 = a2;
  uint64_t v24 = a3;
  unsigned int ChannelMask = 0;
  unsigned __int8 v22 = 0;
  unsigned __int16 v21 = 0;
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    unsigned int ChannelMask = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v25, v3, v4, v5, v6);
    if (ChannelMask)
    {
      if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(v25, &v22, v7, v8)
        && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(v25, &v21, v9, v10))
      {
        ot::AnnounceBeginServer::SendAnnounce(a1, ChannelMask, v22, v21);
        if (ot::Coap::Message::IsConfirmable(v25))
        {
          SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v24);
          if (!ot::Ip6::Address::IsMulticast(SockAddr))
          {
            uint64_t v12 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
            if (!ot::Coap::CoapBase::SendEmptyAck(v12, v25, v24))
            {
              char v13 = ot::UriToString<(ot::Uri)10>();
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoP", "Sent %s response", v14, v15, v16, v17, v18, v19, v13);
            }
          }
        }
      }
    }
  }
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(ot::Tlv *a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x36u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x37u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(a1, a2, a3, a4);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::AnnounceBeginServer>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(a1);
}

uint64_t ot::Instance::Get<ot::AnnounceBeginServer>(uint64_t a1)
{
  return a1 + 153760;
}

{
  return ot::Instance::Get<ot::AnnounceBeginServer>(a1);
}

ot::AnnounceSenderBase *ot::AnnounceSenderBase::AnnounceSenderBase(ot::AnnounceSenderBase *this, ot::Instance *a2, void (*a3)(ot::Timer *))
{
  *((_DWORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 1ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = 0;
  *((unsigned char *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((unsigned char *)this + 12) = -1;
  ot::TimerMicro::TimerMicro((ot::AnnounceSenderBase *)((char *)this + 16), a2, a3);
  return this;
}

{
  ot::AnnounceSenderBase::AnnounceSenderBase(this, a2, a3);
  return this;
}

uint64_t ot::AnnounceSenderBase::SendAnnounce(ot::AnnounceSenderBase *this, char a2)
{
  uint64_t result = ot::AnnounceSenderBase::IsRunning(this);
  if (result)
  {
    *((unsigned char *)this + 10) += a2;
  }
  else if (*((_DWORD *)this + 1))
  {
    uint64_t result = ot::Mac::ChannelMask::IsEmpty(this);
    if ((result & 1) == 0)
    {
      ot::AnnounceSenderBase::SelectStartingChannel(this);
      *((unsigned char *)this + 1ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = a2;
      *((unsigned char *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((unsigned char *)this + 12);
      unsigned int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange(0, *((unsigned __int16 *)this + 4) + 1);
      return ot::TimerMilli::Start((ot::AnnounceSenderBase *)((char *)this + 16), Uint32InRange);
    }
  }
  return result;
}

BOOL ot::AnnounceSenderBase::IsRunning(ot::AnnounceSenderBase *this)
{
  return ot::Timer::IsRunning((ot::AnnounceSenderBase *)((char *)this + 16));
}

{
  return ot::AnnounceSenderBase::IsRunning(this);
}

void ot::AnnounceSenderBase::SelectStartingChannel(ot::AnnounceSenderBase *this)
{
  if (!ot::Mac::ChannelMask::IsEmpty(this)
    && (*((unsigned __int8 *)this + 12) == 255 || !ot::Mac::ChannelMask::ContainsChannel(this, *((unsigned char *)this + 12))))
  {
    *((unsigned char *)this + 12) = -1;
    ot::Mac::ChannelMask::GetNextChannel(this, (unsigned __int8 *)this + 12);
    IgnoreError();
  }
}

uint64_t ot::AnnounceSenderBase::Stop(ot::AnnounceSenderBase *this)
{
  uint64_t result = ot::TimerMilli::Stop((ot::AnnounceSenderBase *)((char *)this + 16));
  *((unsigned char *)this + 1ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = 0;
  return result;
}

void ot::AnnounceSenderBase::SetChannelMask(ot::InstanceLocator *a1, int a2)
{
  *(_DWORD *)a1 = a2;
  uint64_t v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  Supportedunsigned int ChannelMask = (const ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  ot::Mac::ChannelMask::Intersect(a1, SupportedChannelMask);
  if (ot::Mac::ChannelMask::IsEmpty(a1)) {
    ot::AnnounceSenderBase::Stop(a1);
  }
  else {
    ot::AnnounceSenderBase::SelectStartingChannel(a1);
  }
}

void ot::AnnounceSenderBase::SetStartingChannel(ot::AnnounceSenderBase *this, char a2)
{
  *((unsigned char *)this + 12) = a2;
  ot::AnnounceSenderBase::SelectStartingChannel(this);
}

uint64_t ot::AnnounceSenderBase::HandleTimer(ot::AnnounceSenderBase *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::Mle::SendAnnounce(v1, *((unsigned char *)this + 11));
  while (1)
  {
    uint64_t result = ot::Mac::ChannelMask::GetNextChannel(this, (unsigned __int8 *)this + 11);
    if (!result) {
      break;
    }
    *((unsigned char *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = -1;
  }
  if (*((unsigned __int8 *)this + 11) != *((unsigned __int8 *)this + 12)
    || !*((unsigned char *)this + 10)
    || (--*((unsigned char *)this + 10), *((unsigned char *)this + 10)))
  {
    unsigned int v3 = ot::Random::NonCrypto::AddJitter((ot::Random::NonCrypto *)*((unsigned int *)this + 1), *((_WORD *)this + 4));
    return ot::TimerMilli::Start((ot::AnnounceSenderBase *)((char *)this + 16), v3);
  }
  return result;
}

void ot::Mle::Mle::SendAnnounce(ot::Mle::Mle *this, unsigned __int8 a2)
{
}

{
  ot::Mle::Mle::SendAnnounce(this, a2);
}

ot::AnnounceSender *ot::AnnounceSender::AnnounceSender(ot::AnnounceSender *this, ot::Instance *a2)
{
  return this;
}

{
  ot::AnnounceSender::AnnounceSender(this, a2);
  return this;
}

uint64_t ot::AnnounceSender::HandleTimer(ot::AnnounceSender *this, ot::Timer *a2)
{
  uint64_t v2 = (ot::AnnounceSenderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
  return ot::AnnounceSenderBase::HandleTimer(v2);
}

void ot::AnnounceSender::HandleTrickleTimer(ot::AnnounceSender *this, ot::TrickleTimer *a2)
{
  uint64_t v2 = (ot::AnnounceSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
  ot::AnnounceSender::HandleTrickleTimer(v2);
}

uint64_t ot::AnnounceSender::UpdateOnReceivedAnnounce(ot::AnnounceSender *this)
{
  return ot::TrickleTimer::IndicateConsistent((uint64_t)this + 40);
}

void ot::AnnounceSender::Stop(ot::AnnounceSender *this)
{
  ot::AnnounceSenderBase::Stop(this);
  ot::TrickleTimer::Stop((ot::AnnounceSender *)((char *)this + 40));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AnnounceSender", "Stopped", v1, v2, v3, v4, v5, v6, (char)this);
}

void ot::AnnounceSender::HandleTrickleTimer(ot::AnnounceSender *this)
{
  ot::AnnounceSenderBase::SendAnnounce(this, 1);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AnnounceSender", "Schedule tx for one cycle", v1, v2, v3, v4, v5, v6, v7);
}

void ot::AnnounceSender::HandleNotifierEvents(ot::AnnounceSender *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (ot::Events::Contains(&v3, 4)) {
    ot::AnnounceSender::HandleRoleChanged(a1);
  }
  if (ot::Events::Contains(&v3, 0x10000000)) {
    ot::AnnounceSender::HandleActiveDatasetChanged(a1);
  }
  if (ot::Events::Contains(&v3, 0x4000)) {
    ot::AnnounceSender::HandleThreadChannelChanged(a1);
  }
}

void ot::AnnounceSender::HandleRoleChanged(ot::AnnounceSender *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  unsigned int Role = ot::Mle::Mle::GetRole(v1);
  if (Role > 1
    && (Role != 2
     || (uint64_t v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
         (ot::Mle::MleRouter::IsRouterEligible(v2) & 1) != 0)
     && (uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this),
         ot::Mle::Mle::IsRxOnWhenIdle(v3))))
  {
    ot::TrickleTimer::Start((uint64_t)this + 40, 0, 0xA7F80u, 0xA7F80u, 8);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AnnounceSender", "Started", v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    ot::AnnounceSender::Stop(this);
  }
}

void ot::AnnounceSender::HandleActiveDatasetChanged(ot::AnnounceSender *this)
{
  uint64_t v15 = this;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v14);
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  if (!ot::MeshCoP::DatasetManager::GetChannelMask(active, (ot::Mac::ChannelMask *)&v14)
    && !ot::Mac::ChannelMask::IsEmpty((ot::Mac::ChannelMask *)&v14))
  {
    int ChannelMask = ot::AnnounceSenderBase::GetChannelMask(this);
    if (ot::Unequatable<ot::Mac::ChannelMask>::operator!=(&v14, &ChannelMask))
    {
      v12[1] = v14;
      ot::AnnounceSenderBase::SetChannelMask(this, v14);
      unsigned __int8 NumberOfChannels = ot::Mac::ChannelMask::GetNumberOfChannels((ot::Mac::ChannelMask *)&v14);
      ot::AnnounceSenderBase::SetPeriod((uint64_t)this, 0x53FC1u / NumberOfChannels);
      v12[0] = ot::AnnounceSenderBase::GetChannelMask(this);
      ot::Mac::ChannelMask::ToString((ot::Mac::ChannelMask *)v12, (ot::StringWriter *)v16);
      char v10 = ot::String<(unsigned short)45>::AsCString((uint64_t)v16);
      uint64_t Period = ot::AnnounceSenderBase::GetPeriod(this);
      ot::ToUlong(Period);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AnnounceSender", "ChannelMask:%s, period:%lu", v4, v5, v6, v7, v8, v9, v10);
      ot::AnnounceSender::HandleThreadChannelChanged(this);
    }
  }
}

void ot::AnnounceSender::HandleThreadChannelChanged(ot::AnnounceSender *this)
{
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  char PanChannel = ot::Mac::Mac::GetPanChannel(v1);
  ot::AnnounceSenderBase::SetStartingChannel(this, PanChannel);
  char StartingChannel = ot::AnnounceSenderBase::GetStartingChannel(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"AnnounceSender", "StartingChannel:%d", v4, v5, v6, v7, v8, v9, StartingChannel);
}

BOOL ot::Unequatable<ot::Mac::ChannelMask>::operator!=(_DWORD *a1, _DWORD *a2)
{
  return !ot::Mac::ChannelMask::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Mac::ChannelMask>::operator!=(a1, a2);
}

uint64_t ot::AnnounceSenderBase::GetChannelMask(ot::AnnounceSenderBase *this)
{
  return *(unsigned int *)this;
}

{
  return ot::AnnounceSenderBase::GetChannelMask(this);
}

uint64_t ot::AnnounceSenderBase::GetPeriod(ot::AnnounceSenderBase *this)
{
  return *((unsigned int *)this + 1);
}

{
  return ot::AnnounceSenderBase::GetPeriod(this);
}

uint64_t ot::AnnounceSenderBase::GetStartingChannel(ot::AnnounceSenderBase *this)
{
  return *((unsigned __int8 *)this + 12);
}

{
  return ot::AnnounceSenderBase::GetStartingChannel(this);
}

uint64_t ot::ChildTable::Iterator::Iterator(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(a1 + 8) = a3;
  ot::ChildTable::Iterator::Reset((ot::ChildTable::Iterator *)a1);
  return a1;
}

{
  ot::ChildTable::Iterator::Iterator(a1, a2, a3);
  return a1;
}

uint64_t ot::ChildTable::Iterator::Reset(ot::ChildTable::Iterator *this)
{
  *(void *)this = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this) + 8;
  uint64_t result = ot::Neighbor::MatchesFilter(*(ot::Neighbor **)this, *((unsigned char *)this + 8));
  if ((result & 1) == 0) {
    return ot::ChildTable::Iterator::Advance((uint64_t)this);
  }
  return result;
}

uint64_t ot::ChildTable::Iterator::Advance(uint64_t this)
{
  uint64_t v3 = (unsigned __int8 *)this;
  if (*(void *)this)
  {
    while (1)
    {
      *(void *)v3 += 464;
      uint64_t v2 = *(ot::Neighbor **)v3;
      uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)v3) + 8;
      this = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)v3);
      if ((unint64_t)v2 >= v1 + 464 * (unint64_t)*(unsigned __int16 *)this) {
        break;
      }
      this = ot::Neighbor::MatchesFilter(*(ot::Neighbor **)v3, v3[8]);
      if (this) {
        return this;
      }
    }
    *(void *)uint64_t v3 = 0;
  }
  return this;
}

ot::ChildTable *ot::ChildTable::ChildTable(ot::ChildTable *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *(_WORD *)this = 64;
  uint64_t v5 = (ot::ChildTable *)((char *)this + 8);
  do
  {
    ot::Child::Child(v5);
    BOOL v2 = (char *)v5 + 464 != (char *)this + 29704;
    uint64_t v5 = (ot::Child *)((char *)v5 + 464);
  }
  while (v2);
  for (uint64_t i = (ot::ChildTable *)((char *)this + 8);
        i != (ot::ChildTable *)((char *)this + 29704);
        uint64_t i = (ot::Child *)((char *)i + 464))
  {
    ot::Child::Init(i, a2);
    ot::Child::Clear(i);
  }
  return this;
}

{
  ot::ChildTable::ChildTable(this, a2);
  return this;
}

ot::Child *ot::Child::Child(ot::Child *this)
{
  return this;
}

{
  ot::Neighbor::Neighbor(this);
  return this;
}

ot::InstanceLocator *ot::Child::Init(ot::Child *this, ot::Instance *a2)
{
  return ot::Neighbor::Init(this, a2);
}

{
  return ot::Child::Init(this, a2);
}

ot::InstanceLocator *ot::ChildTable::Clear(ot::InstanceLocator *this)
{
  BOOL v2 = (ot::InstanceLocator *)((char *)this + 8);
  uint64_t v1 = (ot::InstanceLocator *)((char *)this + 29704);
  while (v2 != v1)
  {
    this = ot::Child::Clear(v2);
    BOOL v2 = (ot::Child *)((char *)v2 + 464);
  }
  return this;
}

uint64_t ot::ChildTable::GetChildAtIndex(ot::ChildTable *this, unsigned __int16 a2)
{
  uint64_t v3 = 0;
  if (a2 < (int)*(unsigned __int16 *)this) {
    return (uint64_t)this + 464 * a2 + 8;
  }
  return v3;
}

ot::Child *ot::ChildTable::GetNewChild(ot::ChildTable *this)
{
  uint64_t v6 = this;
  uint64_t v5 = 0;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, 4);
  ot::ChildTable::FindChild(this, (const ot::Neighbor::AddressMatcher *)v4);
  uint64_t v5 = v1;
  if (v1) {
    ot::Child::Clear(v5);
  }
  return v5;
}

void ot::ChildTable::FindChild(ot::ChildTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  ot::AsConst<ot::ChildTable>();
  ot::ChildTable::FindChild(v2, a2);
  ot::AsNonConst<ot::Child>();
}

{
  ot::ChildTable::FindChild(this, a2);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, char a2)
{
  return a1;
}

ot::Neighbor *ot::ChildTable::FindChild(ot::ChildTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v4 = (ot::ChildTable *)((char *)this + 8);
  for (__int16 i = *(_WORD *)this; i; --i)
  {
    if (ot::Neighbor::Matches(v4, a2)) {
      return v4;
    }
    uint64_t v4 = (ot::Neighbor *)((char *)v4 + 464);
  }
  return 0;
}

uint64_t ot::Neighbor::Matches(ot::Neighbor *this, const ot::Neighbor::AddressMatcher *a2)
{
  return ot::Neighbor::AddressMatcher::Matches(a2, this) & 1;
}

{
  return ot::Neighbor::Matches(this, a2);
}

void ot::ChildTable::FindChild(ot::ChildTable *a1, __int16 a2, char a3)
{
  uint64_t v6 = a1;
  __int16 v5 = a2;
  v4[21] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2, a3);
  ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, __int16 a2, char a3)
{
  return a1;
}

void ot::ChildTable::FindChild(ot::ChildTable *a1, uint64_t a2, char a3)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  v4[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2, a3);
  ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

void ot::ChildTable::FindChild(ot::ChildTable *a1, ot::Mac::Address *a2, char a3)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  v4[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2, a3);
  ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4);
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, ot::Mac::Address *a2, char a3)
{
  if (ot::Mac::Address::IsShort(a2)) {
    __int16 Short = ot::Mac::Address::GetShort(a2);
  }
  else {
    __int16 Short = -2;
  }
  if (ot::Mac::Address::IsExtended(a2))
  {
    ot::Mac::Address::GetExtended(a2);
    ot::Neighbor::AddressMatcher::AddressMatcher(a1, a3, Short, v3);
  }
  else
  {
    ot::Neighbor::AddressMatcher::AddressMatcher(a1, a3, Short, 0);
  }
  return a1;
}

BOOL ot::ChildTable::HasChildren(ot::ChildTable *a1, char a2)
{
  uint64_t v5 = a1;
  v4[23] = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v4, a2);
  return ot::ChildTable::FindChild(a1, (const ot::Neighbor::AddressMatcher *)v4) != 0;
}

uint64_t ot::ChildTable::GetNumChildren(__int16 *a1, unsigned __int8 a2)
{
  unsigned __int16 v5 = 0;
  uint64_t v4 = (ot::Neighbor *)(a1 + 4);
  for (__int16 i = *a1; i; --i)
  {
    if (ot::Neighbor::MatchesFilter(v4, a2)) {
      ++v5;
    }
    uint64_t v4 = (ot::Neighbor *)((char *)v4 + 464);
  }
  return v5;
}

uint64_t ot::ChildTable::SetMaxChildrenAllowed(ot::ChildTable *this, unsigned __int16 a2)
{
  unsigned int v4 = 0;
  if (a2 && a2 <= 0x40u)
  {
    if (ot::ChildTable::HasChildren(this, 5)) {
      return 13;
    }
    else {
      *(_WORD *)this = a2;
    }
  }
  else
  {
    return 7;
  }
  return v4;
}

uint64_t ot::ChildTable::GetChildInfoById(ot::InstanceLocator *a1, unsigned __int16 a2, ot::Child::Info *a3)
{
  __int16 v10 = a2;
  unsigned int v8 = 0;
  if ((a2 & 0xFE00) != 0) {
    __int16 v10 = ot::Mle::ChildIdFromRloc16((ot::Mle *)a2);
  }
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  __int16 v7 = ot::Mac::Mac::GetShortAddress(v3) | v10;
  ot::ChildTable::FindChild(a1, v7, 1);
  if (v4) {
    ot::Child::Info::SetFrom(a3, v4);
  }
  else {
    return 23;
  }
  return v8;
}

uint64_t ot::Mle::ChildIdFromRloc16(ot::Mle *this)
{
  return (unsigned __int16)this & 0x1FF;
}

{
  return ot::Mle::ChildIdFromRloc16(this);
}

uint64_t ot::ChildTable::GetChildInfoByIndex(ot::ChildTable *a1, unsigned __int16 a2, ot::Child::Info *a3)
{
  unsigned int v5 = 0;
  ChildAtIndex = (ot::Neighbor *)ot::ChildTable::GetChildAtIndex(a1, a2);
  if (ChildAtIndex && ot::Neighbor::IsStateValidOrRestoring(ChildAtIndex)) {
    ot::Child::Info::SetFrom(a3, ChildAtIndex);
  }
  else {
    return 23;
  }
  return v5;
}

uint64_t ot::ChildTable::Restore(ot::ChildTable *this)
{
  unsigned __int16 v32 = this;
  int v31 = 0;
  char v30 = 0;
  unsigned __int16 v29 = 0;
  uint64_t v1 = (ot::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  ot::Settings::IterateChildInfo(v1);
  uint64_t v28 = (ot::Settings::ChildInfoIteratorBuilder *)&v27;
  ot::Settings::ChildInfoIteratorBuilder::begin((ot::Settings::ChildInfoIteratorBuilder *)&v27, (ot::Settings::ChildInfoIterator *)v34);
  ot::Settings::ChildInfoIteratorBuilder::end(v28, (uint64_t)v33);
  while ((ot::Unequatable<ot::Settings::ChildInfoIterator>::operator!=((uint64_t)v34, (uint64_t)v33) & 1) != 0)
  {
    ot::Settings::ChildInfoIterator::operator*();
    uint64_t v26 = v2;
    NewChild = 0;
    ot::SettingsBase::ChildInfo::GetExtAddress(v2);
    ot::ChildTable::FindChild(this, v3, 5);
    NewChild = v4;
    if (v4)
    {
      char v30 = 1;
    }
    else
    {
      NewChild = ot::ChildTable::GetNewChild(this);
      if (!NewChild)
      {
        int v31 = 3;
        break;
      }
    }
    ot::Child::Clear(NewChild);
    uint64_t v16 = NewChild;
    ot::SettingsBase::ChildInfo::GetExtAddress(v26);
    ot::Neighbor::SetExtAddress(v16, v5);
    LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(NewChild);
    ot::LinkQualityInfo::Clear(LinkInfo);
    uint64_t v17 = NewChild;
    __int16 Rloc16 = ot::SettingsBase::ChildInfo::GetRloc16(v26);
    ot::Neighbor::SetRloc16((uint64_t)v17, Rloc16);
    uint64_t v18 = NewChild;
    int Timeout = ot::SettingsBase::ChildInfo::GetTimeout(v26);
    ot::Child::SetTimeout((uint64_t)v18, Timeout);
    uint64_t v19 = NewChild;
    char Mode = ot::SettingsBase::ChildInfo::GetMode(v26);
    ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v24, Mode);
    ot::Child::SetDeviceMode(v19, v24);
    ot::Neighbor::SetState(NewChild, 1);
    ot::Child::GenerateChallenge(NewChild);
    uint64_t v20 = NewChild;
    int Now = ot::TimerMilli::GetNow(v10);
    ot::Neighbor::SetLastHeard((uint64_t)v20, Now);
    unsigned __int16 v21 = NewChild;
    __int16 Version = ot::SettingsBase::ChildInfo::GetVersion(v26);
    ot::Neighbor::SetVersion((uint64_t)v21, Version);
    uint64_t v12 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
    ot::IndirectSender::SetChildUseShortAddress(v12, NewChild, 1);
    char v13 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    ot::NeighborTable::Signal(v13, 0, NewChild);
    ++v29;
    ot::Settings::ChildInfoIterator::operator++((ot::Settings::ChildInfoIterator *)v34);
  }
  if (v30) {
    return ot::ChildTable::RefreshStoredChildren(this);
  }
  int v15 = v29;
  uint64_t result = ot::ChildTable::GetMaxChildren(this);
  if (v15 > (unsigned __int16)result || v31) {
    return ot::ChildTable::RefreshStoredChildren(this);
  }
  return result;
}

ot::SettingsDriver *ot::Settings::IterateChildInfo(ot::Settings *this)
{
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  return ot::SettingsDriver::SettingsDriver((ot::SettingsDriver *)&v3, Instance);
}

{
  return ot::Settings::IterateChildInfo(this);
}

ot::Settings::ChildInfoIterator *ot::Settings::ChildInfoIteratorBuilder::begin@<X0>(ot::Settings::ChildInfoIteratorBuilder *this@<X0>, ot::Settings::ChildInfoIterator *a2@<X8>)
{
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  return ot::Settings::ChildInfoIterator::ChildInfoIterator(a2, Instance);
}

{
  return ot::Settings::ChildInfoIteratorBuilder::begin(this, a2);
}

uint64_t ot::Settings::ChildInfoIteratorBuilder::end@<X0>(ot::Settings::ChildInfoIteratorBuilder *this@<X0>, uint64_t a2@<X8>)
{
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  return ot::Settings::ChildInfoIterator::ChildInfoIterator(a2, Instance);
}

{
  return ot::Settings::ChildInfoIteratorBuilder::end(this, a2);
}

uint64_t ot::Unequatable<ot::Settings::ChildInfoIterator>::operator!=(uint64_t a1, uint64_t a2)
{
  return (ot::Settings::ChildInfoIterator::operator==(a1, a2) ^ 1) & 1;
}

{
  return ot::Unequatable<ot::Settings::ChildInfoIterator>::operator!=(a1, a2);
}

void *ot::Neighbor::SetExtAddress(void *this, const ot::Mac::ExtAddress *a2)
{
  *this = *(void *)a2;
  return this;
}

{
  return ot::Neighbor::SetExtAddress(this, a2);
}

uint64_t ot::Neighbor::SetRloc16(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 28) = a2;
  return this;
}

{
  return ot::Neighbor::SetRloc16(this, a2);
}

uint64_t ot::Child::SetTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = a2;
  return this;
}

{
  return ot::Child::SetTimeout(this, a2);
}

uint64_t ot::Neighbor::SetVersion(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 36) = a2;
  return this;
}

{
  return ot::Neighbor::SetVersion(this, a2);
}

void ot::Settings::ChildInfoIterator::operator++(ot::Settings::ChildInfoIterator *a1)
{
}

{
  ot::Settings::ChildInfoIterator::Advance(a1);
}

{
  ot::Settings::ChildInfoIterator::operator++(a1);
}

{
  ot::Settings::ChildInfoIterator::operator++(a1);
}

uint64_t ot::ChildTable::GetMaxChildren(ot::ChildTable *this)
{
  return 64;
}

{
  return ot::ChildTable::GetMaxChildren(this);
}

uint64_t ot::ChildTable::RefreshStoredChildren(ot::ChildTable *this)
{
  unsigned int v5 = (ot::ChildTable *)((char *)this + 8);
  uint64_t v1 = (ot::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  uint64_t result = ot::Settings::DeleteAllChildInfo(v1);
  if (!result)
  {
    for (__int16 i = *(_WORD *)this; i; --i)
    {
      uint64_t result = ot::Neighbor::IsStateInvalid(v5);
      if ((result & 1) == 0)
      {
        uint64_t result = ot::ChildTable::StoreChild(this, v5);
        if (result) {
          break;
        }
      }
      unsigned int v5 = (ot::Neighbor *)((char *)v5 + 464);
    }
  }
  return result;
}

void ot::ChildTable::RemoveStoredChild(ot::ChildTable *this, const ot::Child *a2)
{
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Settings::ChildInfoIterator::ChildInfoIterator((ot::Settings::ChildInfoIterator *)v6, Instance);
  while ((ot::Settings::ChildInfoIterator::IsDone((ot::Settings::ChildInfoIterator *)v6) & 1) == 0)
  {
    ot::Settings::ChildInfoIterator::GetChildInfo((ot::Settings::ChildInfoIterator *)v6);
    int Rloc16 = (unsigned __int16)ot::SettingsBase::ChildInfo::GetRloc16(v3);
    if (Rloc16 == (unsigned __int16)ot::Neighbor::GetRloc16(a2))
    {
      ot::Settings::ChildInfoIterator::Delete((ot::Settings::ChildInfoIterator *)v6);
      IgnoreError();
      return;
    }
    ot::Settings::ChildInfoIterator::operator++((ot::Settings::ChildInfoIterator *)v6);
  }
}

uint64_t ot::Settings::ChildInfoIterator::IsDone(ot::Settings::ChildInfoIterator *this)
{
  return *((unsigned char *)this + 20) & 1;
}

{
  return ot::Settings::ChildInfoIterator::IsDone(this);
}

uint64_t ot::ChildTable::StoreChild(ot::ChildTable *this, const ot::Child *a2)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  ot::ChildTable::RemoveStoredChild(this, a2);
  ot::SettingsBase::ChildInfo::Init((ot::SettingsBase::ChildInfo *)v13);
  ot::Neighbor::GetExtAddress(v11);
  ot::SettingsBase::ChildInfo::SetExtAddress(v13, v2);
  unsigned int Timeout = ot::Child::GetTimeout(v11);
  ot::SettingsBase::ChildInfo::SetTimeout((ot::SettingsBase::ChildInfo *)v13, Timeout);
  unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v11);
  ot::SettingsBase::ChildInfo::SetRloc16((ot::SettingsBase::ChildInfo *)v13, Rloc16);
  char DeviceMode = ot::Neighbor::GetDeviceMode(v11);
  char v5 = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&DeviceMode);
  ot::SettingsBase::ChildInfo::SetMode((uint64_t)v13, v5);
  unsigned __int16 Version = ot::Neighbor::GetVersion(v11);
  ot::SettingsBase::ChildInfo::SetVersion((ot::SettingsBase::ChildInfo *)v13, Version);
  __int16 v7 = (ot::Settings *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  return ot::Settings::AddChildInfo(v7, (const ot::SettingsBase::ChildInfo *)v13);
}

void *ot::SettingsBase::ChildInfo::SetExtAddress(void *this, const ot::Mac::ExtAddress *a2)
{
  *this = *(void *)a2;
  return this;
}

{
  return ot::SettingsBase::ChildInfo::SetExtAddress(this, a2);
}

uint64_t ot::SettingsBase::ChildInfo::SetTimeout(ot::SettingsBase::ChildInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + 2) = result;
  return result;
}

{
  return ot::SettingsBase::ChildInfo::SetTimeout(this, a2);
}

uint64_t ot::Child::GetTimeout(ot::Child *this)
{
  return *((unsigned int *)this + 110);
}

{
  return ot::Child::GetTimeout(this);
}

uint64_t ot::SettingsBase::ChildInfo::SetRloc16(ot::SettingsBase::ChildInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 6) = result;
  return result;
}

{
  return ot::SettingsBase::ChildInfo::SetRloc16(this, a2);
}

uint64_t ot::SettingsBase::ChildInfo::SetMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 14) = a2;
  return this;
}

{
  return ot::SettingsBase::ChildInfo::SetMode(this, a2);
}

uint64_t ot::Mle::DeviceMode::Get(ot::Mle::DeviceMode *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Mle::DeviceMode::Get(this);
}

uint64_t ot::ChildTable::HasSleepyChildWithAddress(ot::ChildTable *this, const ot::Ip6::Address *a2)
{
  char v5 = 0;
  unsigned int v4 = (ot::ChildTable *)((char *)this + 8);
  for (__int16 i = *(_WORD *)this; i; --i)
  {
    if (ot::Neighbor::IsStateValidOrRestoring(v4)
      && !ot::Neighbor::IsRxOnWhenIdle(v4)
      && ot::Child::HasIp6Address(v4, a2))
    {
      char v5 = 1;
      return v5 & 1;
    }
    unsigned int v4 = (ot::Neighbor *)((char *)v4 + 464);
  }
  return v5 & 1;
}

ot::Neighbor *ot::Neighbor::Neighbor(ot::Neighbor *this)
{
  return this;
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  return a1;
}

uint64_t ot::Neighbor::AddressMatcher::AddressMatcher(uint64_t result, char a2, __int16 a3, uint64_t a4)
{
  *(unsigned char *)uint64_t result = a2;
  *(_WORD *)(result + 2) = a3;
  *(void *)(result + 8) = a4;
  return result;
}

uint64_t ot::Settings::ChildInfoIterator::ChildInfoIterator(uint64_t a1, ot::Instance *a2)
{
  return a1;
}

{
  uint64_t result;

  ot::Radio::Callbacks::Callbacks((ot::Radio::Callbacks *)a1, a2);
  uint64_t result = a1;
  *(_WORD *)(a1 + 18) = 0;
  *(unsigned char *)(a1 + 2ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = 1;
  return result;
}

uint64_t ot::Settings::ChildInfoIterator::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 1) == 0 || (char v4 = 1, (*(unsigned char *)(a2 + 20) & 1) == 0))
  {
    BOOL v3 = 0;
    if ((*(unsigned char *)(a1 + 20) & 1) == 0)
    {
      BOOL v3 = 0;
      if ((*(unsigned char *)(a2 + 20) & 1) == 0) {
        BOOL v3 = *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18);
      }
    }
    char v4 = v3;
  }
  return v4 & 1;
}

{
  return ot::Settings::ChildInfoIterator::operator==(a1, a2);
}

ot::CslTxScheduler::Callbacks *ot::CslTxScheduler::Callbacks::Callbacks(ot::CslTxScheduler::Callbacks *this, ot::Instance *a2)
{
  return this;
}

{
  ot::CslTxScheduler::Callbacks::Callbacks(this, a2);
  return this;
}

ot::CslTxScheduler *ot::CslTxScheduler::CslTxScheduler(ot::CslTxScheduler *this, ot::Instance *a2)
{
  *((void *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  ot::CslTxScheduler::Callbacks::Callbacks((ot::CslTxScheduler *)((char *)this + 26), a2);
  *((_DWORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 7) = 0;
  ot::CslTxScheduler::InitFrameRequestAhead(this);
  return this;
}

{
  ot::CslTxScheduler::CslTxScheduler(this, a2);
  return this;
}

_DWORD *ot::CslTxScheduler::InitFrameRequestAhead(ot::CslTxScheduler *this)
{
  ot::InstanceLocator::GetInstance(this);
  unsigned int BusSpeed = otPlatRadioGetBusSpeed();
  if (BusSpeed) {
    unsigned int v2 = (BusSpeed + 1199999999) / BusSpeed;
  }
  else {
    unsigned int v2 = 0;
  }
  *((_DWORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 7) = v2;
  return ot::CslTxScheduler::SetFrameRequestAheadUs(this, 2000);
}

_DWORD *ot::CslTxScheduler::SetFrameRequestAheadUs(_DWORD *this, int a2)
{
  *this = a2 + this[7];
  return this;
}

uint64_t ot::CslTxScheduler::GetFrameRequestAheadUs(ot::CslTxScheduler *this)
{
  return (*(_DWORD *)this - *((_DWORD *)this + 7));
}

void ot::CslTxScheduler::Update(ot::CslTxScheduler *this)
{
  if (*((void *)this + 2))
  {
    if (*((void *)this + 1))
    {
      if (ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::IndirectSender::ChildInfo *)(*((void *)this + 1)
                                                                                             + 144)) != *((void *)this + 2))
      {
        ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((unsigned char *)(*((void *)this + 1) + 168));
        *((void *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
        *((_WORD *)this + 12) = 0;
      }
    }
  }
  else
  {
    ot::CslTxScheduler::RescheduleCslTx(this);
  }
}

void ot::CslTxScheduler::RescheduleCslTx(ot::CslTxScheduler *this)
{
  int v15 = this;
  unsigned int v14 = -1;
  char v13 = 0;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v11 = ot::ChildTable::Iterate(v1, 5);
  uint64_t v12 = (ot::ChildTable::IteratorBuilder *)&v11;
  v10[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v11);
  v10[1] = v2;
  v9[0] = ot::ChildTable::IteratorBuilder::end(v12);
  v9[1] = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v10, v9))
  {
    unsigned int v8 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v10);
    unsigned int NextCslTransmissionDelay = 0;
    unsigned int v6 = 0;
    if (ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Child *)((char *)v8 + 168))
      && (unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)v8 + 144)))
    {
      unsigned int NextCslTransmissionDelay = ot::CslTxScheduler::GetNextCslTransmissionDelay(this, v8, &v6, *(_DWORD *)this);
      if (NextCslTransmissionDelay < v14)
      {
        unsigned int v14 = NextCslTransmissionDelay;
        char v13 = v8;
      }
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v10);
  }
  if (v13)
  {
    char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::RequestCslFrameTransmission(v4, v14 / 0x3E8);
  }
  *((void *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = v13;
}

uint64_t ot::IndirectSender::ChildInfo::GetIndirectMessage(ot::IndirectSender::ChildInfo *this)
{
  return *(void *)this;
}

{
  return ot::IndirectSender::ChildInfo::GetIndirectMessage(this);
}

BOOL ot::CslTxScheduler::Clear(ot::CslTxScheduler *this)
{
  char v13 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v11 = ot::ChildTable::Iterate(v1, 5);
  uint64_t v12 = (ot::ChildTable::IteratorBuilder *)&v11;
  v10[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v11);
  v10[1] = v2;
  v9[0] = ot::ChildTable::IteratorBuilder::end(v12);
  v9[1] = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v10, v9);
    if (!result) {
      break;
    }
    uint64_t v8 = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v10);
    ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((unsigned char *)(v8 + 168));
    ot::CslTxScheduler::ChildInfo::SetCslSynchronized((unsigned char *)(v8 + 168), 0);
    ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((unsigned char *)(v8 + 168), 0);
    ot::CslTxScheduler::ChildInfo::SetCslChannel(v8 + 168, 0);
    ot::CslTxScheduler::ChildInfo::SetCslTimeout(v8 + 168, 0);
    ot::CslTxScheduler::ChildInfo::SetCslPeriod(v8 + 168, 0);
    ot::CslTxScheduler::ChildInfo::SetCslPhase(v8 + 168, 0);
    uint64_t v5 = v8 + 168;
    ot::Time::Time((ot::Time *)&v7, 0);
    ot::CslTxScheduler::ChildInfo::SetCslLastHeard(v5, v7);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v10);
  }
  *((_WORD *)this + 12) = 0;
  *((void *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  return result;
}

uint64_t ot::CslTxScheduler::ChildInfo::SetCslTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::SetCslTimeout(this, a2);
}

BOOL ot::CslTxScheduler::ChildInfo::IsCslSynchronized(ot::CslTxScheduler::ChildInfo *this)
{
  BOOL v2 = 0;
  if ((*(unsigned char *)this & 0x40) != 0) {
    return *((_WORD *)this + 4) != 0;
  }
  return v2;
}

{
  return ot::CslTxScheduler::ChildInfo::IsCslSynchronized(this);
}

unint64_t ot::CslTxScheduler::GetNextCslTransmissionDelay(ot::CslTxScheduler *this, const ot::Child *a2, unsigned int *a3, unsigned int a4)
{
  ot::InstanceLocator::GetInstance(this);
  unint64_t Now = otPlatRadioGetNow();
  unsigned int v7 = 160 * (unsigned __int16)ot::CslTxScheduler::ChildInfo::GetCslPeriod((const ot::Child *)((char *)a2 + 168));
  uint64_t v5 = ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp((const ot::Child *)((char *)a2 + 168)) - 160;
  for (unint64_t i = Now
          - Now % v7
          + (v5
           + (unint64_t)(160
                              * (unsigned __int16)ot::CslTxScheduler::ChildInfo::GetCslPhase((const ot::Child *)((char *)a2 + 168))))
          % v7; i < Now + a4; i += v7)
    ;
  *a3 = i - ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp((const ot::Child *)((char *)a2 + 168));
  return i - Now - a4;
}

ot::Mac::TxFrame *ot::CslTxScheduler::HandleFrameRequest(const ot::Child **this, ot::Mac::TxFrames *a2)
{
  uint64_t v23 = (ot::CslTxScheduler *)this;
  unsigned __int8 v22 = a2;
  TxFrame = 0;
  unsigned int v20 = 0;
  if (this[1] && ot::CslTxScheduler::ChildInfo::IsCslSynchronized((const ot::Child *)((char *)this[1] + 168)))
  {
    TxFrame = (ot::Mac::TxFrame *)ot::Mac::TxFrames::GetTxFrame(v22);
    if (ot::CslTxScheduler::Callbacks::PrepareFrameForChild((ot::InstanceLocator *)((char *)this + 26), TxFrame, (_WORD *)this + 12, (uint64_t)this[1]))
    {
      return 0;
    }
    else
    {
      this[2] = (const ot::Child *)ot::IndirectSender::ChildInfo::GetIndirectMessage((const ot::Child *)((char *)this[1] + 144));
      if (this[2])
      {
        char IndirectTxAttempts = ot::DataPollHandler::ChildInfo::GetIndirectTxAttempts((const ot::Child *)((char *)this[1] + 160));
        if (v3 | (IndirectTxAttempts == 0)) {
          char v4 = 0;
        }
        else {
          char v4 = 1;
        }
        if ((v4 & 1) == 0
          && ((char CslTxAttempts = ot::CslTxScheduler::ChildInfo::GetCslTxAttempts((const ot::Child *)((char *)this[1] + 168)),
               !(v3 | (CslTxAttempts == 0)))
            ? (char v6 = 0)
            : (char v6 = 1),
              (v6 & 1) != 0))
        {
          ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 0);
        }
        else
        {
          ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 1);
          char IndirectDataSequenceNumber = ot::DataPollHandler::ChildInfo::GetIndirectDataSequenceNumber((const ot::Child *)((char *)this[1] + 160));
          ot::Mac::Frame::SetSequence(TxFrame, IndirectDataSequenceNumber);
          char v19 = ot::Mac::TxFrame::IsCslIePresent(TxFrame) & 1;
          if (ot::Mac::Frame::GetSecurityEnabled(TxFrame) && (v19 & 1) == 0)
          {
            unsigned int IndirectFrameCounter = ot::DataPollHandler::ChildInfo::GetIndirectFrameCounter((const ot::Child *)((char *)this[1] + 160));
            ot::Mac::Frame::SetFrameCounter(TxFrame, IndirectFrameCounter);
            char IndirectKeyId = ot::DataPollHandler::ChildInfo::GetIndirectKeyId((const ot::Child *)((char *)this[1] + 160));
            ot::Mac::Frame::SetKeyId(TxFrame, IndirectKeyId);
          }
        }
        if (ot::CslTxScheduler::ChildInfo::GetCslChannel((const ot::Child *)((char *)this[1] + 168)))
        {
          char CslChannel = ot::CslTxScheduler::ChildInfo::GetCslChannel((const ot::Child *)((char *)this[1] + 168));
          ot::Mac::TxFrame::SetChannel(TxFrame, CslChannel);
        }
        int Channel = ot::Mac::Frame::GetChannel(TxFrame);
        char v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)this);
        if (Channel != ot::Mac::Mac::GetPanChannel(v11))
        {
          uint64_t v12 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)this);
          char PanChannel = ot::Mac::Mac::GetPanChannel(v12);
          ot::Mac::TxFrame::SetRxChannelAfterTxDone((uint64_t)TxFrame, PanChannel);
        }
        ot::CslTxScheduler::GetNextCslTransmissionDelay((ot::CslTxScheduler *)this, this[1], &v20, 0);
        ot::Mac::TxFrame::SetTxDelay((uint64_t)TxFrame, v20);
        uint64_t v16 = TxFrame;
        int LastRxTimestamp = ot::CslTxScheduler::ChildInfo::GetLastRxTimestamp((const ot::Child *)((char *)this[1] + 168));
        ot::Mac::TxFrame::SetTxDelayBaseTime((uint64_t)v16, LastRxTimestamp);
        ot::Mac::TxFrame::SetCsmaCaEnabled((uint64_t)TxFrame, 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return TxFrame;
}

uint64_t ot::CslTxScheduler::Callbacks::PrepareFrameForChild(ot::InstanceLocator *a1, ot::Mac::TxFrame *a2, _WORD *a3, uint64_t a4)
{
  char v4 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  return ot::IndirectSender::PrepareFrameForChild(v4, a2, a3, a4);
}

{
  return ot::CslTxScheduler::Callbacks::PrepareFrameForChild(a1, a2, a3, a4);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslChannel(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::CslTxScheduler::ChildInfo::GetCslChannel(this);
}

void ot::CslTxScheduler::HandleMissedScheduledTx(ot::CslTxScheduler *this)
{
  if (*((void *)this + 1))
  {
    *((void *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    ot::CslTxScheduler::RescheduleCslTx(this);
  }
}

void ot::CslTxScheduler::HandleSentFrame(uint64_t a1, ot::Mac::TxFrame *a2, unsigned int a3)
{
  char v4 = *(ot::Neighbor **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    ot::CslTxScheduler::HandleSentFrame((unsigned __int16 *)a1, a2, a3, v4);
  }
  ot::CslTxScheduler::RescheduleCslTx((ot::CslTxScheduler *)a1);
}

void ot::CslTxScheduler::HandleSentFrame(unsigned __int16 *a1, ot::Mac::TxFrame *a2, unsigned int a3, ot::Neighbor *a4)
{
  uint64_t v51 = a1;
  unsigned int v50 = a2;
  unsigned int v49 = a3;
  char v48 = a4;
  char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
  Counters = (_DWORD *)ot::Mac::Mac::GetCounters(v4);
  ++Counters[17];
  unsigned __int8 v46 = 4;
  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
  if (ot::Mle::Mle::IsCslPeripheralPresent(v5)) {
    unsigned __int8 v46 = 8;
  }
  if (v49)
  {
    uint64_t v7 = v49;
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    char v6 = 0;
  }
  if (v6) {
LABEL_29:
  }
    __assert_rtn("HandleSentFrame", "csl_tx_scheduler.cpp", 439, "false");
  switch(v7)
  {
    case 0:
      ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((unsigned char *)v48 + 168);
      ot::DataPollHandler::ChildInfo::ResetIndirectTxAttempts((uint64_t)v48 + 160);
      uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
      if (ot::Mle::Mle::IsWaitingForDetachConfirm(v8))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"CslTxScheduler", "Removing WED after getting confirmation for Detach Frame", v9, v10, v11, v12, v13, v14, v37);
        char v42 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
        IndirectMessage = (ot::Message *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::Neighbor *)((char *)v48 + 144));
        ot::MeshForwarder::RemoveMessageIfNoPendingTx(v42, IndirectMessage);
        uint64_t v16 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        ot::Mle::MleRouter::RemoveNeighbor(v16, v48);
        uint64_t v17 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
        ot::Mle::Mle::NeedsDetachConfirm(v17, 0);
      }
      else
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"CslTxScheduler", "CslScheduler::HandleSentFrame: mTxCslTotal=%d mTxCslErrNoAck=%d mTxCslErrCca=%d mTxCslErrAbort=%d mTxCslErrBusyChannel=%d mTxCslLossOfSyncCountDueToCslTimeout=%d mTxCslLossOfSyncCountDueToReTx=%d", v9, v10, v11, v12, v13, v14, Counters[17]);
        ot::CslTxScheduler::Callbacks::HandleSentFrameToChild((ot::InstanceLocator *)(a1 + 13), v50, a1 + 12, v49, (uint64_t)v48);
      }
      return;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_29;
    case 11:
      goto LABEL_24;
    case 14:
      char IsHeaderUpdated = 1;
      if (ot::Mac::Frame::GetSecurityEnabled(v50)) {
        char IsHeaderUpdated = ot::Mac::TxFrame::IsHeaderUpdated(v50);
      }
      if ((IsHeaderUpdated & 1) == 0) {
        __assert_rtn("HandleSentFrame", "csl_tx_scheduler.cpp", 361, "!aFrame.GetSecurityEnabled() || aFrame.IsHeaderUpdated()");
      }
      ot::CslTxScheduler::ChildInfo::IncrementCslTxAttempts((unsigned char *)v48 + 168);
      uint64_t v18 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
      if (ot::Mle::Mle::IsSleepyRouter(v18))
      {
        char Rloc16 = ot::Neighbor::GetRloc16(v48);
        ot::CslTxScheduler::ChildInfo::GetCslTxAttempts((ot::Neighbor *)((char *)v48 + 168));
        char v19 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
        ot::Mle::Mle::GetCslPeripheralState(v19);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"CslTxScheduler", "CSL tx to child %04x failed, attempt %d/%d in Peripheral Attach State: %s", v20, v21, v22, v23, v24, v25, Rloc16);
      }
      else
      {
        char v39 = ot::Neighbor::GetRloc16(v48);
        ot::CslTxScheduler::ChildInfo::GetCslTxAttempts((ot::Neighbor *)((char *)v48 + 168));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"CslTxScheduler", "CSL tx to child %04x failed, attempt %d/%d", v26, v27, v28, v29, v30, v31, v39);
      }
      if (v46 > (int)ot::CslTxScheduler::ChildInfo::GetCslTxAttempts((ot::Neighbor *)((char *)v48 + 168))) {
        goto LABEL_22;
      }
      ot::CslTxScheduler::ChildInfo::SetCslSynchronized((unsigned char *)v48 + 168, 0);
      ot::CslTxScheduler::ChildInfo::ResetCslTxAttempts((unsigned char *)v48 + 168);
      unsigned __int16 v32 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
      if (ot::Mle::Mle::IsCslPeripheralPresent(v32))
      {
        unsigned int v38 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
        uint64_t v33 = (ot::Message *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::Neighbor *)((char *)v48 + 144));
        ot::MeshForwarder::RemoveMessageIfNoPendingTx(v38, v33);
        uint64_t v34 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        ot::Mle::MleRouter::RemoveNeighbor(v34, v48);
        uint64_t v35 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
        ot::Mle::Mle::NeedsDetachConfirm(v35, 0);
      }
      else
      {
        ++Counters[23];
LABEL_22:
        ++Counters[18];
LABEL_23:
        ++Counters[21];
LABEL_24:
        if (!ot::Mac::Frame::IsEmpty(v50))
        {
          char Sequence = ot::Mac::Frame::GetSequence(v50);
          ot::DataPollHandler::ChildInfo::SetIndirectDataSequenceNumber((uint64_t)v48 + 160, Sequence);
          if (ot::Mac::Frame::GetSecurityEnabled(v50) && (ot::Mac::TxFrame::IsHeaderUpdated(v50) & 1) != 0)
          {
            unsigned int v45 = 0;
            char v44 = 0;
            ot::Mac::Frame::GetFrameCounter(v50, &v45);
            IgnoreError();
            ot::DataPollHandler::ChildInfo::SetIndirectFrameCounter((_DWORD *)v48 + 40, v45);
            ot::Mac::Frame::GetKeyId(v50, (unsigned __int8 *)&v44);
            IgnoreError();
            ot::DataPollHandler::ChildInfo::SetIndirectKeyId((uint64_t)v48 + 160, v44);
          }
        }
        ++Counters[15];
      }
      return;
    case 15:
      goto LABEL_23;
    default:
      JUMPOUT(0);
  }
}

uint64_t ot::Mle::Mle::IsWaitingForDetachConfirm(ot::Mle::Mle *this)
{
  return (*((unsigned __int8 *)this + 1112) >> 1) & 1;
}

{
  return ot::Mle::Mle::IsWaitingForDetachConfirm(this);
}

unsigned char *ot::CslTxScheduler::ChildInfo::IncrementCslTxAttempts(unsigned char *this)
{
  *this = *this & 0xC0 | ((*this & 0x3F) + 1) & 0x3F;
  return this;
}

{
  return ot::CslTxScheduler::ChildInfo::IncrementCslTxAttempts(this);
}

const char *ot::Mle::Mle::GetCslPeripheralState(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
}

{
  return ot::Mle::Mle::GetCslPeripheralState(this);
}

void ot::CslTxScheduler::Callbacks::HandleSentFrameToChild(ot::InstanceLocator *a1, ot::Mac::Frame *a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(a1);
  ot::IndirectSender::HandleSentFrameToChild(v5, a2, a3, a4, a5);
}

{
  ot::CslTxScheduler::Callbacks::HandleSentFrameToChild(a1, a2, a3, a4, a5);
}

const char *ot::Mle::Mle::WorAttachStateToString(uint64_t a1, unsigned __int8 a2)
{
  if (a2 >= (int)(unsigned __int16)ot::GetArrayLength<char const*,(unsigned short)5>()) {
    return "invalid";
  }
  else {
    return ot::Mle::Mle::WorAttachStateToString(ot::Mle::Mle::CslPeripheralAttachState)::kRoleStrings[a2];
  }
}

{
  return ot::Mle::Mle::WorAttachStateToString(a1, a2);
}

uint64_t ot::GetArrayLength<char const*,(unsigned short)5>()
{
  return 5;
}

{
  return ot::GetArrayLength<char const*,(unsigned short)5>();
}

ot::Mle::DiscoverScanner *ot::Mle::DiscoverScanner::DiscoverScanner(ot::Mle::DiscoverScanner *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(this);
  ot::TaskletIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleScanDoneTask>::TaskletIn((void *)this + 2, (uint64_t)a2);
  ot::TimerMilliIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleTimer>::TimerMilliIn((ot::Mle::DiscoverScanner *)((char *)this + 32), a2);
  *((_DWORD *)this + 14) = 0;
  ot::Mac::ChannelMask::ChannelMask((ot::Mle::DiscoverScanner *)((char *)this + 60));
  BOOL result = this;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 73) = 0;
  *((unsigned char *)this + 138) &= ~1u;
  *((unsigned char *)this + 138) &= ~2u;
  return result;
}

{
  ot::Mle::DiscoverScanner::DiscoverScanner(this, a2);
  return this;
}

void *ot::Mle::DiscoverScanner::HandleScanDoneTask(ot::Mle::DiscoverScanner *this)
{
  *((unsigned char *)this + 64) = 0;
  return ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<decltype(nullptr)>(this);
}

unsigned __int8 *ot::Mle::DiscoverScanner::HandleTimer(unsigned __int8 *this)
{
  BOOL v2 = (ot::InstanceLocator *)this;
  if (this[64] == 1)
  {
    if (ot::Mac::ChannelMask::GetNextChannel((ot::Mac::ChannelMask *)(this + 60), this + 72)) {
      *((unsigned char *)v2 + 64) = 2;
    }
    uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v2);
    return (unsigned __int8 *)ot::MeshForwarder::ResumeMessageTransmissions(v1);
  }
  return this;
}

void *ot::TaskletIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleScanDoneTask>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleScanDoneTask>::HandleTasklet);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Mle::DiscoverScanner::Discover(uint64_t a1, ot::Mac::ChannelMask *a2, unsigned __int16 a3, char a4, char a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a1;
  char v42 = a2;
  unsigned __int16 v41 = a3;
  char v40 = a4 & 1;
  char v39 = a5 & 1;
  unsigned int v38 = a6;
  uint64_t v37 = a7;
  uint64_t v36 = a8;
  unsigned int v35 = 0;
  uint64_t v34 = 0;
  uint64_t v8 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  if (ot::ThreadNetif::IsUp(v8))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      unsigned int v35 = 5;
    }
    else
    {
      *(unsigned char *)(a1 + 138) = *(unsigned char *)(a1 + 138) & 0xFE | v39 & 1;
      if (*(unsigned char *)(a1 + 138))
      {
        if (v38)
        {
          *(_DWORD *)(a1 + 56) = *v38;
        }
        else
        {
          uint64_t v9 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>((ot::InstanceLocator *)a1);
          ot::Radio::GetIeeeEui64(v9, (ot::Mac::ExtAddress *)v44);
          ot::MeshCoP::ComputeJoinerId((ot::MeshCoP *)v44, (const ot::Mac::ExtAddress *)v44, v10);
          ot::MeshCoP::SteeringData::CalculateHashBitIndexes(v44, (_WORD *)(a1 + 56));
        }
      }
      ot::CallbackBase<void (*)(otActiveScanResult *,void *)>::Set((void *)a1, v37, v36);
      *(unsigned char *)(a1 + 138) &= ~2u;
      uint64_t v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
      *(_DWORD *)(a1 + 6ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v11);
      if (!ot::Mac::ChannelMask::IsEmpty(v42)) {
        ot::Mac::ChannelMask::Intersect((_DWORD *)(a1 + 60), v42);
      }
      uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
      uint64_t v34 = ot::Mle::Mle::NewMleMessage(v12, 0x10u);
      if (v34)
      {
        ot::Message::SetPanId(v34, v41);
        ot::MeshCoP::DiscoveryRequestTlv::Init((ot::MeshCoP::DiscoveryRequestTlv *)v31);
        ot::MeshCoP::DiscoveryRequestTlv::SetVersion((uint64_t)v31, 4);
        ot::MeshCoP::DiscoveryRequestTlv::SetJoiner((uint64_t)v31, v40 & 1);
        if (*(unsigned char *)(a1 + 73))
        {
          ot::MeshCoP::JoinerAdvertisementTlv::Init((ot::MeshCoP::JoinerAdvertisementTlv *)v45);
          ot::MeshCoP::JoinerAdvertisementTlv::SetOui((ot::MeshCoP::JoinerAdvertisementTlv *)v45, *(_DWORD *)(a1 + 68), v13);
          ot::MeshCoP::JoinerAdvertisementTlv::SetAdvData((ot::MeshCoP::JoinerAdvertisementTlv *)v45, (const unsigned __int8 *)(a1 + 74), *(unsigned char *)(a1 + 73));
        }
        ot::Mle::Tlv::SetType(v33, 26);
        char Size = ot::Tlv::GetSize((ot::Tlv *)v31);
        if (*(unsigned char *)(a1 + 73)) {
          char v28 = ot::Tlv::GetSize((ot::Tlv *)v45);
        }
        else {
          char v28 = 0;
        }
        ot::Tlv::SetLength((uint64_t)v33, Size + v28);
        unsigned int v35 = ot::Message::Append<ot::Mle::Tlv>(v34, v33);
        if (!v35)
        {
          unsigned int v35 = ot::Tlv::AppendTo((ot::Tlv *)v31, v34);
          if (!v35 && (!*(unsigned char *)(a1 + 73) || (unsigned int v35 = ot::Tlv::AppendTo((ot::Tlv *)v45, v34)) == 0))
          {
            ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v32);
            unsigned int v35 = ot::Mle::Mle::TxMessage::SendTo(v34, &v32);
            if (!v35)
            {
              if (v41 == 0xFFFF)
              {
                uint64_t v14 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                if ((unsigned __int16)ot::Mac::Mac::GetPanId(v14) == 0xFFFF)
                {
                  uint64_t v27 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                  __int16 RandomPanId = (unsigned __int16)ot::Mac::GenerateRandomPanId(v27);
                  ot::Mac::Mac::SetPanId(v27, RandomPanId);
                  *(unsigned char *)(a1 + 138) = *(unsigned char *)(a1 + 138) & 0xFD | 2;
                }
              }
              *(unsigned char *)(a1 + 72) = -1;
              if (ot::Mac::ChannelMask::GetNextChannel((ot::Mac::ChannelMask *)(a1 + 60), (unsigned __int8 *)(a1 + 72)))char v16 = 2; {
              else
              }
                char v16 = 1;
              *(unsigned char *)(a1 + 64) = v16;
              uint64_t v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
              if (!ot::Mle::Mle::IsDisabled(v17))
              {
                uint64_t v18 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
                if (!ot::Mle::Mle::IsRxOnWhenIdle(v18))
                {
                  char v19 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
                  ot::MeshForwarder::SetRxOnWhenIdle(v19, 1, v20, v21, v22, v23, v24, v25);
                }
              }
              ot::Mle::Mle::Log(0, 9u, (ot::Ip6::Address *)&v32);
            }
          }
        }
      }
      else
      {
        unsigned int v35 = 3;
      }
    }
  }
  else
  {
    unsigned int v35 = 13;
  }
  if (v35 && v34) {
    ot::Message::Free(v34);
  }
  return v35;
}

void *ot::CallbackBase<void (*)(otActiveScanResult *,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otActiveScanResult *,void *)>::Set(result, a2, a3);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::Init(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  ot::MeshCoP::Tlv::SetType(this, 128);
  uint64_t result = ot::Tlv::SetLength((uint64_t)this, 2);
  *((unsigned char *)this + 2) = 0;
  *((unsigned char *)this + 3) = 0;
  return result;
}

{
  return ot::MeshCoP::DiscoveryRequestTlv::Init(this);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::SetVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2) = *(unsigned char *)(this + 2) & 0xF | (16 * a2);
  return this;
}

{
  return ot::MeshCoP::DiscoveryRequestTlv::SetVersion(this, a2);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::SetJoiner(uint64_t this, char a2)
{
  if (a2) {
    *(unsigned char *)(this + 2) |= 8u;
  }
  else {
    *(unsigned char *)(this + 2) &= ~8u;
  }
  return this;
}

{
  return ot::MeshCoP::DiscoveryRequestTlv::SetJoiner(this, a2);
}

uint64_t ot::MeshCoP::JoinerAdvertisementTlv::Init(ot::MeshCoP::JoinerAdvertisementTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 67);
}

{
  return ot::MeshCoP::JoinerAdvertisementTlv::Init(this);
}

uint64_t ot::MeshCoP::JoinerAdvertisementTlv::SetOui(ot::MeshCoP::JoinerAdvertisementTlv *this, unsigned int a2, unsigned __int8 *a3)
{
  return ot::Encoding::BigEndian::WriteUint24(a2, (unsigned char *)this + 2, a3);
}

{
  return ot::MeshCoP::JoinerAdvertisementTlv::SetOui(this, a2, a3);
}

void *ot::MeshCoP::JoinerAdvertisementTlv::SetAdvData(ot::MeshCoP::JoinerAdvertisementTlv *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v5 = 0;
  if (a2)
  {
    BOOL v5 = 0;
    if (a3) {
      BOOL v5 = a3 <= 0x40u;
    }
  }
  if (!v5) {
    __assert_rtn("SetAdvData", "meshcop_tlvs.hpp", 2113, "(aAdvData != nullptr) && (aAdvDataLength > 0) && (aAdvDataLength <= kAdvDataMaxLength)");
  }
  ot::Tlv::SetLength((uint64_t)this, a3 + 3);
  return memcpy((char *)this + 5, a2, a3);
}

{
  return ot::MeshCoP::JoinerAdvertisementTlv::SetAdvData(this, a2, a3);
}

uint64_t ot::Mle::DiscoverScanner::SetJoinerAdvertisement(ot::Mle::DiscoverScanner *this, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 a4)
{
  unsigned int v5 = 0;
  if (a3 && a4 && a4 <= 0x40u && a2 <= 0xFFFFFF)
  {
    *((_DWORD *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 7) = a2;
    *((unsigned char *)this + 73) = a4;
    memcpy((char *)this + 74, a3, a4);
  }
  else
  {
    return 7;
  }
  return v5;
}

ot::Mac::TxFrame *ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame(ot::Mle::DiscoverScanner *this, ot::Mac::TxFrame *a2)
{
  char v6 = a2;
  int v5 = *((unsigned __int8 *)this + 64);
  if (!*((unsigned char *)this + 64)) {
    return 0;
  }
  if (v5 == 1)
  {
    ot::Mac::TxFrame::SetChannel(a2, *((unsigned char *)this + 72));
    BOOL v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::SetTemporaryChannel(v2, *((unsigned char *)this + 72));
    IgnoreError();
    return v6;
  }
  if (v5 == 2) {
    return 0;
  }
  return v6;
}

unsigned __int8 *ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(unsigned __int8 *this, ot::Message *a2)
{
  char v3 = (ot::Mle::DiscoverScanner *)this;
  int v4 = this[64];
  if (this[64])
  {
    if (v4 == 1)
    {
      ot::Message::SetDirectTransmission(a2);
      ot::Message::SetTimestampToNow(a2);
      uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v3);
      ot::MeshForwarder::PauseMessageTransmissions(v2);
      return (unsigned __int8 *)ot::TimerMilli::Start((ot::Mle::DiscoverScanner *)((char *)v3 + 32), 0x12Cu);
    }
    else if (v4 == 2)
    {
      return (unsigned __int8 *)ot::Mle::DiscoverScanner::HandleDiscoverComplete((ot::Mle::DiscoverScanner *)this);
    }
  }
  return this;
}

uint64_t ot::Message::SetTimestampToNow(ot::Message *this)
{
  int Now = ot::TimerMilli::GetNow(this);
  return ot::Message::SetTimestamp(this, Now);
}

{
  return ot::Message::SetTimestampToNow(this);
}

uint64_t ot::MeshForwarder::PauseMessageTransmissions(uint64_t this)
{
  *(unsigned char *)(this + 88) = *(unsigned char *)(this + 88) & 0xFB | 4;
  return this;
}

{
  return ot::MeshForwarder::PauseMessageTransmissions(this);
}

uint64_t ot::Mle::DiscoverScanner::HandleDiscoverComplete(ot::Mle::DiscoverScanner *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::isThreadAlwaysOnFeatureEnabled(v1))
  {
    uint64_t v13 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t result = ot::Mle::Mle::IsDisabled(v13);
    if ((result & 1) == 0)
    {
      uint64_t v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      uint64_t result = ot::Mle::Mle::IsRxOnWhenIdle(v14);
      if ((result & 1) == 0)
      {
        int v15 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
        uint64_t result = ot::MeshForwarder::SetRxOnWhenIdle(v15, 0, v16, v17, v18, v19, v20, v21);
      }
    }
  }
  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    uint64_t result = ot::Mle::Mle::IsDisabled(v2);
    if ((result & 1) == 0)
    {
      int v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      uint64_t result = ot::Mle::Mle::IsRxOnWhenIdle(v4);
      if ((result & 1) == 0)
      {
        int v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
        uint64_t result = ot::Mle::Mle::IsSleepyRouter(v5);
        if ((result & 1) == 0)
        {
          char v6 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
          uint64_t result = ot::MeshForwarder::SetRxOnWhenIdle(v6, 0, v7, v8, v9, v10, v11, v12);
        }
      }
    }
  }
  int v25 = *((unsigned __int8 *)this + 64);
  if (*((unsigned char *)this + 64))
  {
    if (v25 == 1)
    {
      ot::TimerMilli::Stop((ot::Mle::DiscoverScanner *)((char *)this + 32));
      uint64_t v22 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
      ot::MeshForwarder::ResumeMessageTransmissions(v22);
    }
    else if (v25 != 2)
    {
      return result;
    }
    uint64_t v23 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::ClearTemporaryChannel(v23);
    if ((*((unsigned char *)this + 138) & 2) != 0)
    {
      uint64_t v24 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ot::Mac::Mac::SetPanId(v24, 0xFFFF);
      *((unsigned char *)this + 138) &= ~2u;
    }
    return ot::Tasklet::Post((ot::Mle::DiscoverScanner *)((char *)this + 16));
  }
  return result;
}

void *ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<decltype(nullptr)>(void *result)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<decltype(nullptr)>((uint64_t)result);
  }
  return result;
}

{
  return ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<decltype(nullptr)>(result);
}

void ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::DiscoverScanner *this, ot::Ip6::MessageInfo **a2)
{
  unsigned int v35 = this;
  uint64_t v34 = a2;
  TlvValueunsigned __int16 Offset = 0;
  uint64_t ThreadLinkInfo = 0;
  uint64_t ThreadLinkInfo = ot::Ip6::MessageInfo::GetThreadLinkInfo(a2[1]);
  unsigned __int16 v29 = 0;
  unsigned __int16 v28 = 0;
  unsigned __int16 v27 = 0;
  char v26 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v34[1]);
  ot::Mle::Mle::Log(1, 0xAu, PeerAddr);
  if (*((unsigned char *)this + 64) == 1)
  {
    TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(*v34, (const ot::Message *)0x1A, &v29, &v28, v3);
    if (!TlvValueOffset)
    {
      unsigned __int16 v27 = v29 + v28;
      memset(__b, 0, 0x3CuLL);
      HIBYTE(__b[28]) = HIBYTE(__b[28]) & 0xDF | 0x20;
      __b[25] = *(_WORD *)ThreadLinkInfo;
      __b[27] = *(_WORD *)(ThreadLinkInfo + 2);
      LOBYTE(__b[28]) = *(unsigned char *)(ThreadLinkInfo + 4);
      int v4 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v34[1]);
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v4);
      int v5 = (ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>((uint64_t)__b);
      ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, v5);
      while (v29 < (int)v27)
      {
        ot::Message::Read<ot::MeshCoP::Tlv>(*v34, v29, v31);
        IgnoreError();
        int Type = ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v31);
        switch(Type)
        {
          case 2:
            uint64_t v19 = *v34;
            unsigned __int16 v18 = v29;
            uint64_t v8 = ot::AsCoreType<otExtendedPanId>((uint64_t)&__b[12] + 1);
            TlvValueunsigned __int16 Offset = ot::Tlv::Read<ot::MeshCoP::ExtendedPanIdTlv>(v19, v18, v8);
            if (TlvValueOffset) {
              goto LABEL_35;
            }
            break;
          case 3:
            ot::Message::Read<ot::MeshCoP::NetworkNameTlv>(*v34, v29, v37);
            IgnoreError();
            if (ot::MeshCoP::NetworkNameTlv::IsValid((ot::MeshCoP::NetworkNameTlv *)v37))
            {
              uint64_t v17 = (ot::MeshCoP::NetworkName *)ot::AsCoreType<otNetworkName>((uint64_t)&__b[4]);
              v25[0] = ot::MeshCoP::NetworkNameTlv::GetNetworkName((ot::MeshCoP::NetworkNameTlv *)v37);
              v25[1] = v9;
              ot::MeshCoP::NetworkName::Set(v17, (const ot::MeshCoP::NameData *)v25);
              IgnoreError();
            }
            break;
          case 8:
            char Length = ot::Tlv::GetLength((ot::Tlv *)v31);
            if (v11 | (Length == 0)) {
              char v12 = 1;
            }
            else {
              char v12 = 0;
            }
            if ((v12 & 1) == 0)
            {
              *(void *)&v24[1] = ot::AsCoreType<otSteeringData>((uint64_t)&__b[16] + 1);
              v24[0] = 16;
              if (ot::Tlv::GetLength((ot::Tlv *)v31) < 0x10u) {
                v24[0] = ot::Tlv::GetLength((ot::Tlv *)v31);
              }
              ot::MeshCoP::SteeringData::Init(*(uint64_t *)&v24[1], v24[0]);
              uint64_t v16 = *v34;
              unsigned int v15 = v29;
              uint64_t Data = ot::MeshCoP::SteeringData::GetData(*(ot::MeshCoP::SteeringData **)&v24[1]);
              TlvValueunsigned __int16 Offset = ot::Tlv::ReadTlvValue(v16, (const ot::Message *)v15, Data, (void *)v24[0]);
              if (TlvValueOffset
                || (*((unsigned char *)this + 138) & 1) != 0
                && !ot::MeshCoP::SteeringData::Contains(*(ot::MeshCoP::SteeringData **)&v24[1], (unsigned __int16 *)this + 28))
              {
                goto LABEL_35;
              }
              char v26 = 1;
            }
            break;
          case 18:
            TlvValueunsigned __int16 Offset = ot::Tlv::Read<ot::MeshCoP::JoinerUdpPortTlv>(*v34, v29, &__b[26]);
            if (TlvValueOffset) {
              goto LABEL_35;
            }
            break;
          case 129:
            ot::Message::Read<ot::MeshCoP::DiscoveryResponseTlv>(*v34, v29, v30);
            IgnoreError();
            if (!ot::MeshCoP::DiscoveryResponseTlv::IsValid((ot::MeshCoP::DiscoveryResponseTlv *)v30))
            {
              TlvValueunsigned __int16 Offset = 6;
              goto LABEL_35;
            }
            char Version = ot::MeshCoP::DiscoveryResponseTlv::GetVersion((ot::MeshCoP::DiscoveryResponseTlv *)v30);
            HIBYTE(__b[28]) = HIBYTE(__b[28]) & 0xF0 | Version & 0xF;
            BOOL IsNativeCommissioner = ot::MeshCoP::DiscoveryResponseTlv::IsNativeCommissioner((ot::MeshCoP::DiscoveryResponseTlv *)v30);
            HIBYTE(__b[28]) = HIBYTE(__b[28]) & 0xEF | (16 * IsNativeCommissioner);
            break;
        }
        unsigned __int8 v14 = ot::Tlv::GetLength((ot::Tlv *)v31);
        v29 += v14 + 2;
      }
      if (*((unsigned char *)this + 138) & 1) == 0 || (v26)
      {
        uint64_t v23 = __b;
        ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otActiveScanResult *>(this, &v23);
      }
    }
  }
  else
  {
    TlvValueunsigned __int16 Offset = 2;
  }
LABEL_35:
  ot::Mle::Mle::LogProcessError(0xAu, TlvValueOffset);
}

uint64_t ot::Ip6::MessageInfo::GetThreadLinkInfo(ot::Ip6::MessageInfo *this)
{
  return *((void *)this + 5);
}

{
  return ot::Ip6::MessageInfo::GetThreadLinkInfo(this);
}

uint64_t ot::Message::Read<ot::MeshCoP::DiscoveryResponseTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return ot::Message::Read<ot::MeshCoP::DiscoveryResponseTlv>(a1, a2, a3);
}

BOOL ot::MeshCoP::DiscoveryResponseTlv::IsValid(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return ot::MeshCoP::DiscoveryResponseTlv::IsValid(this);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::GetVersion(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  return (int)*((unsigned __int8 *)this + 2) >> 4;
}

{
  return ot::MeshCoP::DiscoveryResponseTlv::GetVersion(this);
}

BOOL ot::MeshCoP::DiscoveryResponseTlv::IsNativeCommissioner(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  return (*((unsigned char *)this + 2) & 8) != 0;
}

{
  return ot::MeshCoP::DiscoveryResponseTlv::IsNativeCommissioner(this);
}

uint64_t ot::Tlv::Read<ot::MeshCoP::ExtendedPanIdTlv>(ot::Tlv *a1, unsigned __int16 a2, uint64_t a3)
{
  return ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, a3, (void *)8);
}

{
  return ot::Tlv::Read<ot::MeshCoP::ExtendedPanIdTlv>(a1, a2, a3);
}

uint64_t ot::Message::Read<ot::MeshCoP::NetworkNameTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x12u);
}

{
  return ot::Message::Read<ot::MeshCoP::NetworkNameTlv>(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::MeshCoP::JoinerUdpPortTlv>(ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::MeshCoP::JoinerUdpPortTlv>(a1, a2, a3);
}

void *ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otActiveScanResult *>(void *result, void *a2)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<otActiveScanResult *>((uint64_t)result, a2);
  }
  return result;
}

{
  return ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otActiveScanResult *>(result, a2);
}

void *ot::TaskletIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleScanDoneTask>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(a1);
  return ot::Mle::DiscoverScanner::HandleScanDoneTask(v2);
}

unsigned __int8 *ot::TimerMilliIn<ot::Mle::DiscoverScanner,&ot::Mle::DiscoverScanner::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (unsigned __int8 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(a1);
  return ot::Mle::DiscoverScanner::HandleTimer(v2);
}

uint64_t ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<decltype(nullptr)>(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))a1)(0, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<decltype(nullptr)>(a1);
}

uint64_t ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<otActiveScanResult *>(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otActiveScanResult *,void *),(ot::CallbackContextPosition)1>::Invoke<otActiveScanResult *>(a1, a2);
}

ot::DuaManager *ot::DuaManager::DuaManager(ot::DuaManager *this, ot::Instance *a2)
{
  *((unsigned char *)this + 40) &= ~1u;
  *((unsigned char *)this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((unsigned char *)this + 42) = 0;
  ot::Time::Time((ot::DuaManager *)((char *)this + 44), 0);
  *((_WORD *)this + 54) = 64;
  *((_DWORD *)this + 22) = 0;
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginGlobalScope((ot::DuaManager *)((char *)this + 56));
  ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear((void *)this + 6);
  ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)this + 92));
  ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)this + 100));
  return this;
}

{
  ot::DuaManager::DuaManager(this, a2);
  return this;
}

void ot::DuaManager::PerformNextRegistration(ot::DuaManager *this)
{
  v74 = this;
  int ServiceId = 0;
  v72 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  int v71 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v70, Instance);
  if (!ot::Mle::Mle::IsAttached(v72))
  {
    int ServiceId = 13;
    goto LABEL_51;
  }
  uint64_t v8 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  if (!ot::BackboneRouter::Leader::HasPrimary(v8))
  {
    int ServiceId = 13;
    goto LABEL_51;
  }
  if (*((unsigned char *)this + 40))
  {
    int ServiceId = 5;
    goto LABEL_51;
  }
  if (!ot::Mle::Mle::IsRouterOrLeader(v72) && (ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(v72) & 1) != 0)
  {
    int ServiceId = 13;
    goto LABEL_51;
  }
  if (!ot::Mle::Mle::IsFullThreadDevice(v72))
  {
    Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v72);
    if (!ot::Neighbor::IsThreadVersion1p1(Parent))
    {
      int ServiceId = 13;
      goto LABEL_51;
    }
  }
  char v68 = 0;
  BOOL v53 = 0;
  if (*((unsigned char *)this + 41) == 1) {
    BOOL v53 = *((unsigned char *)this + 91) == 0;
  }
  char v68 = v53;
  char v52 = 1;
  if (!v53)
  {
    BOOL v51 = 0;
    if (ot::BitVector<(unsigned short)64>::HasAny((unsigned char *)this + 92)) {
      BOOL v51 = ot::Unequatable<ot::BitVector<(unsigned short)64>>::operator!=((char *)this + 92, (char *)this + 100);
    }
    char v52 = v51;
  }
  char v68 = v52 & 1;
  if ((v52 & 1) == 0)
  {
    int ServiceId = 23;
    goto LABEL_51;
  }
  uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  int v71 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v10, 0x25u);
  if (!v71)
  {
    int ServiceId = 3;
    goto LABEL_51;
  }
  if (*((unsigned char *)this + 41) != 1 || *((unsigned char *)this + 91))
  {
    unsigned int v66 = 0;
    DomainUnicastAddress = 0;
    ChildAtIndex = 0;
    if (*((_WORD *)this + 54) != 64) {
      __assert_rtn("PerformNextRegistration", "dua_manager.cpp", 488, "mChildIndexDuaRegistering == Mle::kMaxChildren");
    }
    unsigned __int8 v14 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v62 = ot::ChildTable::Iterate(v14, 0);
    v63 = (ot::ChildTable::IteratorBuilder *)&v62;
    v61[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v62);
    v61[1] = v15;
    v60[0] = ot::ChildTable::IteratorBuilder::end(v63);
    v60[1] = v16;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v61, v60))
    {
      int v59 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v61);
      uint64_t v17 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v17, (uint64_t)v59);
      if (ot::BitVector<(unsigned short)64>::Get((uint64_t)this + 92, ChildIndex)
        && !ot::BitVector<(unsigned short)64>::Get((uint64_t)this + 100, ChildIndex))
      {
        *((_WORD *)this + 54) = ChildIndex;
        break;
      }
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v61);
    }
    unsigned __int16 v18 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    ChildAtIndex = (ot::Child *)ot::ChildTable::GetChildAtIndex(v18, *((_WORD *)this + 54));
    DomainUnicastAddress = ot::Child::GetDomainUnicastAddress(ChildAtIndex);
    if (!DomainUnicastAddress) {
      __assert_rtn("PerformNextRegistration", "dua_manager.cpp", 504, "duaPtr != nullptr");
    }
    long long v69 = *(_OWORD *)DomainUnicastAddress;
    int ServiceId = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v71, &v69);
    if (ServiceId) {
      goto LABEL_51;
    }
    unsigned int v49 = v71;
    MeshLocalIid = (void *)ot::Child::GetMeshLocalIid(ChildAtIndex);
    uint64_t v20 = (ot::TimerMilli *)ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v49, MeshLocalIid);
    int ServiceId = (int)v20;
    if (v20) {
      goto LABEL_51;
    }
    int Now = ot::TimerMilli::GetNow(v20);
    int LastHeard = ot::Neighbor::GetLastHeard(ChildAtIndex);
    uint64_t v21 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
    unsigned int v66 = ot::Time::MsecToSec(v21);
    int ServiceId = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)6,unsigned int>>(v71, v66);
    if (ServiceId) {
      goto LABEL_51;
    }
  }
  else
  {
    long long v69 = *(_OWORD *)ot::DuaManager::GetDomainUnicastAddress(this);
    int ServiceId = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v71, &v69);
    if (ServiceId) {
      goto LABEL_51;
    }
    unsigned int v50 = v71;
    MeshLocal64 = (ot::Ip6::Address *)ot::Mle::Mle::GetMeshLocal64(v72);
    Iid = (void *)ot::Ip6::Address::GetIid(MeshLocal64);
    uint64_t v13 = (ot::TimerMilli *)ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)3,ot::Ip6::InterfaceIdentifier>>(v50, Iid);
    int ServiceId = (int)v13;
    if (v13) {
      goto LABEL_51;
    }
    *((unsigned char *)this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 2;
    int v67 = ot::TimerMilli::GetNow(v13);
    *((_DWORD *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = v67;
  }
  if (ot::Mle::Mle::IsFullThreadDevice(v72)
    || (uint64_t v22 = (ot::Neighbor *)ot::Mle::Mle::GetParent(v72), !ot::Neighbor::IsThreadVersion1p1(v22)))
  {
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v70);
    ot::Mle::Mle::GetMeshLocalPrefix(v72);
    unsigned int v45 = v25;
    char v26 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    unsigned __int16 Server16 = ot::BackboneRouter::Leader::GetServer16(v26);
    ot::Ip6::Address::SetToRoutingLocator(PeerAddr, v45, Server16);
  }
  else
  {
    unsigned __int8 v55 = 0;
    uint64_t v23 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    int ServiceId = ot::BackboneRouter::Leader::GetServiceId(v23, &v55);
    if (ServiceId) {
      goto LABEL_51;
    }
    char v48 = v72;
    unsigned __int8 v47 = v55;
    uint64_t v24 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v70);
    int ServiceId = ot::Mle::Mle::GetServiceAloc(v48, v47, v24);
    if (ServiceId) {
      goto LABEL_51;
    }
  }
  ot::Tmf::MessageInfo::SetSockAddrToRloc((ot::Tmf::MessageInfo *)v70);
  unsigned __int16 v28 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  int ServiceId = ot::Coap::CoapBase::SendMessage(v28, v71, (ot::Ip6::MessageInfo *)v70, (uint64_t)ot::DuaManager::HandleDuaResponse, (uint64_t)this);
  if (!ServiceId)
  {
    *((unsigned char *)this + 4ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = *((unsigned char *)this + 40) & 0xFE | 1;
    *(_OWORD *)((char *)this + 24) = v69;
    *((_DWORD *)this + 22) = 0;
    unsigned __int16 v29 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (!ot::Mle::Mle::IsRxOnWhenIdle(v29))
    {
      uint64_t v30 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
      ot::DataPollSender::SendFastPolls(v30, 0);
    }
    char v44 = ot::UriToString<(ot::Uri)37>();
    ot::Ip6::Address::ToString((ot::Ip6::Address *)&v69, (ot::StringWriter *)v75);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v75);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Sent %s for DUA %s", v31, v32, v33, v34, v35, v36, v44);
  }
LABEL_51:
  if (ServiceId == 3) {
    ot::DuaManager::UpdateCheckDelay((char *)this, 5u, v2, v3, v4, v5, v6, v7);
  }
  char v37 = ot::ErrorToString(ServiceId);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "PerformNextRegistration: %s", v38, v39, v40, v41, v42, v43, v37);
  if (ServiceId)
  {
    if (v71) {
      ot::Message::Free(v71);
    }
  }
}

void *ot::TaskletIn<ot::DuaManager,&ot::DuaManager::PerformNextRegistration>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::DuaManager,&ot::DuaManager::PerformNextRegistration>::HandleTasklet);
  return a1;
}

void *ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear(result);
}

void *ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear(result);
}

uint64_t ot::DuaManager::HandleDomainPrefixUpdate(uint64_t result, char a2)
{
  uint64_t v9 = (ot::DuaManager *)result;
  if (a2 == 2 || a2 == 3)
  {
    if (*(unsigned char *)(result + 40))
    {
      uint64_t v2 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)result);
      ot::Coap::CoapBase::AbortTransaction(v2, (uint64_t)ot::DuaManager::HandleDuaResponse, (uint64_t)v9);
      IgnoreError();
    }
    ot::DuaManager::RemoveDomainUnicastAddress(v9);
    uint64_t result = ot::BitVector<(unsigned short)64>::HasAny((unsigned char *)v9 + 92);
    if (result)
    {
      ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)v9 + 92));
      uint64_t result = (uint64_t)ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)v9 + 100));
    }
  }
  if (a2 == 1
    || a2 == 3
    || a2 == 4
    && (uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v9),
        DomainUnicastAddress = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(v9),
        uint64_t result = ot::Ip6::Netif::HasUnicastAddress(v8, DomainUnicastAddress),
        (result & 1) == 0))
  {
    uint64_t v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(v9);
    DomainPrefix = (ot::Ip6::Prefix *)ot::BackboneRouter::Leader::GetDomainPrefix(v4);
    if (!DomainPrefix) {
      __assert_rtn("HandleDomainPrefixUpdate", "dua_manager.cpp", 117, "prefix != nullptr");
    }
    *((unsigned char *)v9 + 72) = ot::Ip6::Prefix::GetLength(DomainPrefix);
    Address = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)v9 + 56));
    ot::Clearable<ot::Ip6::Address>::Clear(Address);
    uint64_t v6 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)v9 + 56));
    ot::Ip6::Address::SetPrefix(v6, DomainPrefix);
    if (ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(v9))
    {
      uint64_t v7 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)v9 + 56));
      ot::Ip6::Address::SetIid(v7, (ot::DuaManager *)((char *)v9 + 48));
    }
    else
    {
      uint64_t result = ot::DuaManager::GenerateDomainUnicastAddressIid(v9);
      if (result) {
        return result;
      }
    }
    return ot::DuaManager::AddDomainUnicastAddress(v9);
  }
  return result;
}

void ot::DuaManager::HandleDuaResponse(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v10 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  ot::DuaManager::HandleDuaResponse(a1, v10, v5, a4, v6, v7, v8, v9);
}

uint64_t ot::DuaManager::RemoveDomainUnicastAddress(ot::DuaManager *this)
{
  if (*((unsigned char *)this + 41) == 2 && (*((unsigned char *)this + 40) & 1) != 0)
  {
    uint64_t v1 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    ot::Coap::CoapBase::AbortTransaction(v1, (uint64_t)ot::DuaManager::HandleDuaResponse, (uint64_t)this);
    IgnoreError();
  }
  *((unsigned char *)this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 0;
  *((unsigned char *)this + 74) &= ~1u;
  uint64_t v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  return ot::Ip6::Netif::RemoveUnicastAddress(v2, (ot::DuaManager *)((char *)this + 56));
}

uint64_t ot::DuaManager::GetDomainUnicastAddress(ot::DuaManager *this)
{
  return ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)this + 56));
}

{
  return ot::DuaManager::GetDomainUnicastAddress(this);
}

uint64_t ot::DuaManager::GenerateDomainUnicastAddressIid(ot::DuaManager *this)
{
  uint64_t v21 = this;
  unsigned int v20 = 0;
  unsigned __int8 v19 = 0;
  unsigned __int8 v19 = *((unsigned char *)this + 42);
  uint64_t v1 = (ot::Utils::Slaac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::Slaac>(this);
  unsigned int v20 = ot::Utils::Slaac::GenerateIid(v1, (ot::DuaManager *)((char *)this + 56), 0, 0, &v19);
  if (v20)
  {
    char v10 = ot::ErrorToString(v20);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"DuaManager", "Generate DUA: %s", v11, v12, v13, v14, v15, v16, v10);
  }
  else
  {
    if (v19 != *((unsigned __int8 *)this + 42))
    {
      *((unsigned char *)this + 42) = v19;
      ot::DuaManager::Store(this);
      IgnoreError();
    }
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)this + 56));
    ot::Ip6::Address::ToString(Address, (ot::StringWriter *)v22);
    char v3 = ot::String<(unsigned short)40>::AsCString((uint64_t)v22);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Generated DUA: %s", v4, v5, v6, v7, v8, v9, v3);
  }
  return v20;
}

uint64_t ot::DuaManager::AddDomainUnicastAddress(ot::DuaManager *this)
{
  *((unsigned char *)this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 1;
  *((_DWORD *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = ot::TimerMilli::GetNow(this);
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  return ot::Ip6::Netif::AddUnicastAddress(v1, (ot::DuaManager *)((char *)this + 56));
}

uint64_t ot::DuaManager::Store(ot::DuaManager *this)
{
  uint64_t v5 = this;
  ot::SettingsBase::DadInfo::SetDadCounter(&v4, *((unsigned char *)this + 42));
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  return ot::Settings::Save<ot::SettingsBase::DadInfo>(v1, (ot::SettingsBase::NetworkInfo *)&v4);
}

uint64_t ot::DuaManager::SetFixedDuaInterfaceIdentifier(ot::DuaManager *this, const ot::Ip6::InterfaceIdentifier *a2)
{
  unsigned int v14 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsReserved(a2))
  {
    return 7;
  }
  else if (ot::Ip6::InterfaceIdentifier::IsUnspecified((ot::DuaManager *)((char *)this + 48)) {
         || ot::Unequatable<ot::Ip6::InterfaceIdentifier>::operator!=((char *)this + 48, a2))
  }
  {
    *((void *)this + 6) = *(void *)a2;
    ot::Ip6::InterfaceIdentifier::ToString((ot::DuaManager *)((char *)this + 48), (ot::StringWriter *)v16);
    char v2 = ot::String<(unsigned short)17>::AsCString((uint64_t)v16);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Set DUA IID: %s", v3, v4, v5, v6, v7, v8, v2);
    uint64_t v12 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    DomainUnicastAddress = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(this);
    if (ot::Ip6::Netif::HasUnicastAddress(v12, DomainUnicastAddress))
    {
      ot::DuaManager::RemoveDomainUnicastAddress(this);
      Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::DuaManager *)((char *)this + 56));
      ot::Ip6::Address::SetIid(Address, (ot::DuaManager *)((char *)this + 48));
      ot::DuaManager::AddDomainUnicastAddress(this);
    }
  }
  return v14;
}

uint64_t ot::DuaManager::ClearFixedDuaInterfaceIdentifier(ot::DuaManager *this)
{
  uint64_t result = ot::DuaManager::IsFixedDuaInterfaceIdentifierSet(this);
  if (result)
  {
    DomainUnicastAddress = (ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(this);
    Iid = (const void *)ot::Ip6::Address::GetIid(DomainUnicastAddress);
    if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(Iid, (char *)this + 48))
    {
      uint64_t v12 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      uint64_t v4 = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(this);
      if (ot::Ip6::Netif::HasUnicastAddress(v12, v4))
      {
        ot::DuaManager::RemoveDomainUnicastAddress(this);
        if (!ot::DuaManager::GenerateDomainUnicastAddressIid(this)) {
          ot::DuaManager::AddDomainUnicastAddress(this);
        }
      }
    }
    ot::Ip6::InterfaceIdentifier::ToString((ot::DuaManager *)((char *)this + 48), (ot::StringWriter *)v14);
    char v5 = ot::String<(unsigned short)17>::AsCString((uint64_t)v14);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Cleared DUA IID: %s", v6, v7, v8, v9, v10, v11, v5);
    return (uint64_t)ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear((void *)this + 6);
  }
  return result;
}

uint64_t ot::DuaManager::Restore(ot::DuaManager *this)
{
  char v5 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  uint64_t result = ot::Settings::Read<ot::SettingsBase::DadInfo>(v1, (ot::SettingsBase::DadInfo *)&v4);
  if (!result)
  {
    uint64_t result = ot::SettingsBase::DadInfo::GetDadCounter((ot::SettingsBase::DadInfo *)&v4);
    *((unsigned char *)this + 42) = result;
  }
  return result;
}

uint64_t ot::Settings::Read<ot::SettingsBase::DadInfo>(ot::InstanceLocator *a1, ot::SettingsBase::DadInfo *a2)
{
  return ot::Settings::ReadEntry(a1, 8u, a2, 1u);
}

{
  return ot::Settings::Read<ot::SettingsBase::DadInfo>(a1, a2);
}

unsigned char *ot::SettingsBase::DadInfo::SetDadCounter(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

{
  return ot::SettingsBase::DadInfo::SetDadCounter(this, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::DadInfo>(ot::InstanceLocator *a1, ot::SettingsBase::NetworkInfo *a2)
{
  char v5 = a1;
  char v4 = a2;
  return ot::Settings::SaveEntry(a1, 8, a2, (uint64_t)&v3, 1u);
}

{
  return ot::Settings::Save<ot::SettingsBase::DadInfo>(a1, a2);
}

char *ot::DuaManager::UpdateRegistrationDelay(char *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (ot::DuaManager *)this;
  if (!this[91] || this[91] > (int)a2)
  {
    this[91] = a2;
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"DuaManager", "update regdelay %d", a3, a4, a5, a6, a7, a8, this[91]);
    return (char *)ot::DuaManager::UpdateTimeTickerRegistration(v8);
  }
  return this;
}

uint64_t ot::DuaManager::UpdateTimeTickerRegistration(ot::DuaManager *this)
{
  if (*((_DWORD *)this + 22))
  {
    char v3 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::RegisterReceiver(v3, 4);
  }
  else
  {
    uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::UnregisterReceiver(v1, 4);
  }
}

uint64_t ot::DuaManager::NotifyDuplicateDomainUnicastAddress(ot::DuaManager *this)
{
  ot::DuaManager::RemoveDomainUnicastAddress(this);
  ++*((unsigned char *)this + 42);
  uint64_t result = ot::DuaManager::GenerateDomainUnicastAddressIid(this);
  if (!result) {
    return ot::DuaManager::AddDomainUnicastAddress(this);
  }
  return result;
}

void ot::DuaManager::UpdateReregistrationDelay(ot::DuaManager *this)
{
  uint64_t v13 = this;
  unsigned __int16 v12 = 0;
  uint64_t v1 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  if (!ot::BackboneRouter::Leader::GetConfig(v1, (uint64_t)v10))
  {
    if (v11 <= 1u) {
      __int16 Uint16InRange = 1;
    }
    else {
      __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, v11);
    }
    unsigned __int16 v12 = Uint16InRange;
    if (!*((_WORD *)this + 44) || *((unsigned __int16 *)this + 44) > (int)v12)
    {
      *((_WORD *)this + 44) = v12;
      ot::DuaManager::UpdateTimeTickerRegistration(this);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"DuaManager", "update reregdelay %d", v2, v3, v4, v5, v6, v7, *((_WORD *)this + 44));
    }
  }
}

char *ot::DuaManager::UpdateCheckDelay(char *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (ot::DuaManager *)this;
  if (!this[90] || this[90] > (int)a2)
  {
    this[90] = a2;
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"DuaManager", "update checkdelay %d", a3, a4, a5, a6, a7, a8, this[90]);
    return (char *)ot::DuaManager::UpdateTimeTickerRegistration(v8);
  }
  return this;
}

char *ot::DuaManager::HandleNotifierEvents(ot::InstanceLocator *a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v31 = a1;
  uint64_t v30 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  if (ot::Events::Contains(&v32, 512))
  {
    unsigned __int16 v27 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
    uint64_t v2 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
    DomainUnicastAddress = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(v2);
    if (ot::Ip6::Netif::HasUnicastAddress(v27, DomainUnicastAddress))
    {
      char v26 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
      uint64_t v4 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
      uint64_t v5 = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(v4);
      if (ot::NetworkData::LeaderBase::GetContext(v26, v5, (ot::Ip6::Prefix *)v29)) {
        ot::DuaManager::RemoveDomainUnicastAddress(a1);
      }
    }
  }
  uint64_t result = (char *)ot::Mle::Mle::IsAttached(v30);
  if (result)
  {
    if (ot::Events::Contains(&v32, 4))
    {
      if (ot::Mle::Mle::HasRestored(v30))
      {
        ot::DuaManager::UpdateReregistrationDelay(a1);
      }
      else if (ot::Mle::Mle::IsRouter(v30))
      {
        ot::DuaManager::UpdateRegistrationDelay((char *)a1, 3u, v7, v8, v9, v10, v11, v12);
      }
      else if (ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(v30))
      {
        RouterSelectionJitterunsigned int Timeout = ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(v30);
        ot::DuaManager::UpdateRegistrationDelay((char *)a1, RouterSelectionJitterTimeout + 4, v14, v15, v16, v17, v18, v19);
      }
    }
    uint64_t result = (char *)ot::Events::ContainsAny((ot::Events *)&v32, 1);
    if (result) {
      return ot::DuaManager::UpdateRegistrationDelay((char *)a1, 1u, v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    *((_DWORD *)a1 + 22) = 0;
  }
  return result;
}

uint64_t ot::Mle::Mle::HasRestored(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 597) & 1;
}

{
  return ot::Mle::Mle::HasRestored(this);
}

uint64_t ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(ot::Mle::MleRouter *this)
{
  return *((unsigned __int8 *)this + 35711);
}

{
  return ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(this);
}

void ot::DuaManager::HandleBackboneRouterPrimaryUpdate(ot::InstanceLocator *a1, char a2)
{
  if (a2 == 1 || a2 == 3)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
    if (ot::Mle::Mle::IsFullThreadDevice(v2)
      || (uint64_t v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1),
          Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v3),
          ot::Neighbor::IsThreadVersion1p1(Parent)))
    {
      ot::DuaManager::UpdateReregistrationDelay(a1);
    }
  }
}

BOOL ot::Neighbor::IsThreadVersion1p1(ot::Neighbor *this)
{
  BOOL v2 = 0;
  if ((*((unsigned char *)this + 30) & 0xF) != 0) {
    return *((unsigned __int16 *)this + 18) == 2;
  }
  return v2;
}

{
  return ot::Neighbor::IsThreadVersion1p1(this);
}

uint64_t ot::DuaManager::HandleTimeTick(ot::DuaManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = this;
  char v17 = 0;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"DuaManager", "regdelay %d, reregdelay %d, checkdelay %d", a3, a4, a5, a6, a7, a8, *((unsigned char *)this + 91));
  BOOL v14 = 0;
  if (*((unsigned char *)this + 41))
  {
    int Now = ot::TimerMilli::GetNow(0);
    int v8 = ot::Time::SecToMsec((ot::Time *)0x64);
    int v15 = ot::Time::operator+((_DWORD *)this + 11, v8);
    BOOL v14 = ot::Time::operator>(&Now, &v15);
  }
  if (v14) {
    *((unsigned char *)this + 74) = *((unsigned char *)this + 74) & 0xFE | 1;
  }
  if (*((unsigned char *)this + 91))
  {
    char v9 = *((unsigned char *)this + 91);
    *((unsigned char *)this + 9ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = v9 - 1;
    if (v9 == 1) {
      char v17 = 1;
    }
  }
  if (*((unsigned char *)this + 90))
  {
    char v10 = *((unsigned char *)this + 90);
    *((unsigned char *)this + 9ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = v10 - 1;
    if (v10 == 1) {
      char v17 = 1;
    }
  }
  if (*((_WORD *)this + 44))
  {
    __int16 v11 = *((_WORD *)this + 44);
    *((_WORD *)this + 44) = v11 - 1;
    if (v11 == 1)
    {
      if (*((unsigned char *)this + 41)) {
        *((unsigned char *)this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 1;
      }
      ot::Clearable<ot::BitVector<(unsigned short)64>>::Clear((ot::DuaManager *)((char *)this + 100));
      char v17 = 1;
    }
  }
  if (v17) {
    ot::Tasklet::Post((ot::DuaManager *)((char *)this + 8));
  }
  return ot::DuaManager::UpdateTimeTickerRegistration(this);
}

BOOL ot::Unequatable<ot::BitVector<(unsigned short)64>>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::BitVector<(unsigned short)64>>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::BitVector<(unsigned short)64>>::operator!=(a1, a2);
}

void ot::DuaManager::HandleDuaResponse(uint64_t a1, ot::Coap::Message *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(a1 + 40) &= ~1u;
  *(_WORD *)(a1 + 108) = 64;
  if (a4 == 28)
  {
    ot::DuaManager::UpdateCheckDelay((char *)a1, 0x1Eu, a3, a4, a5, a6, a7, a8);
    int v16 = 28;
  }
  else if (a4)
  {
    int v16 = 6;
  }
  else
  {
    if (!a2) {
      __assert_rtn("HandleDuaResponse", "dua_manager.cpp", 582, "aMessage != nullptr");
    }
    if (ot::Coap::Message::GetCode(a2) == 68
      || ot::Coap::Message::GetCode(a2) >= 0x80u)
    {
      int v16 = ot::DuaManager::ProcessDuaResponse((ot::DuaManager *)a1, a2);
    }
    else
    {
      int v16 = 6;
    }
  }
  if (v16 != 28) {
    ot::Tasklet::Post((ot::Tasklet *)(a1 + 8));
  }
  char v14 = ot::UriToString<(ot::Uri)37>();
  ot::ErrorToString(v16);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Received %s response: %s", v8, v9, v10, v11, v12, v13, v14);
}

uint64_t ot::DuaManager::ProcessDuaResponse(ot::DuaManager *this, ot::Coap::Message *a2)
{
  uint64_t v34 = this;
  uint64_t v33 = a2;
  unsigned int v32 = 0;
  unsigned __int8 v30 = 0;
  if (ot::Coap::Message::GetCode(a2) < 0x80u)
  {
    unsigned int v32 = ot::Tlv::Find<ot::ThreadStatusTlv>(v33, &v30, v2, v3);
    if (v32) {
      goto LABEL_41;
    }
    unsigned int v32 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v33, (uint64_t)&v31, v4, v5, v6);
    if (v32) {
      goto LABEL_41;
    }
  }
  else
  {
    unsigned __int8 v30 = 6;
    long long v31 = *(_OWORD *)((char *)this + 24);
  }
  uint64_t v7 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  if (ot::BackboneRouter::Leader::IsDomainUnicast(v7, (const ot::Ip6::Address *)&v31))
  {
    uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    BOOL HasUnicastAddress = ot::Ip6::Netif::HasUnicastAddress(v8, (const ot::Ip6::Address *)&v31);
    if (HasUnicastAddress)
    {
      if (v30)
      {
        uint64_t v11 = v30;
        char v10 = 1;
      }
      else
      {
        uint64_t v11 = 0;
        char v10 = 0;
      }
      if ((v10 & 1) == 0)
      {
        switch(v11)
        {
          case 0:
            int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)HasUnicastAddress);
            *((_DWORD *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = Now;
            *((unsigned char *)this + 4ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = 3;
            break;
          case 1:
            uint64_t v20 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
            DomainUnicastAddress = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(this);
            if (ot::Ip6::Netif::HasUnicastAddress(v20, DomainUnicastAddress))
            {
              ot::DuaManager::RemoveDomainUnicastAddress(this);
              ot::DuaManager::AddDomainUnicastAddress(this);
            }
            break;
          case 2:
            ot::DuaManager::RemoveDomainUnicastAddress(this);
            break;
          case 3:
            ot::DuaManager::NotifyDuplicateDomainUnicastAddress(this);
            break;
          case 4:
          case 5:
          case 6:
            ot::DuaManager::UpdateReregistrationDelay(this);
            break;
          default:
            goto LABEL_42;
        }
      }
    }
    else
    {
      unsigned __int16 v28 = 0;
      unsigned __int16 ChildIndex = 0;
      uint64_t v13 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      char v25 = ot::ChildTable::Iterate(v13, 0);
      char v26 = (ot::ChildTable::IteratorBuilder *)&v25;
      v24[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v25);
      v24[1] = v14;
      v23[0] = ot::ChildTable::IteratorBuilder::end(v26);
      v23[1] = v15;
      while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v24, v23))
      {
        uint64_t v22 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v24);
        if (ot::Child::HasIp6Address(v22, (const ot::Ip6::Address *)&v31))
        {
          unsigned __int16 v28 = v22;
          break;
        }
        ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v24);
      }
      if (v28)
      {
        uint64_t v16 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v16, (uint64_t)v28);
        if (v30)
        {
          uint64_t v18 = v30;
          char v17 = 1;
        }
        else
        {
          uint64_t v18 = 0;
          char v17 = 0;
        }
        if ((v17 & 1) == 0)
        {
          switch(v18)
          {
            case 0:
              if (ot::BitVector<(unsigned short)64>::Get((uint64_t)this + 92, ChildIndex)) {
                ot::BitVector<(unsigned short)64>::Set((uint64_t)this + 100, ChildIndex, 1);
              }
              break;
            case 1:
              ot::BitVector<(unsigned short)64>::Set((uint64_t)this + 92, ChildIndex, 0);
              ot::BitVector<(unsigned short)64>::Set((uint64_t)this + 100, ChildIndex, 0);
              break;
            case 2:
            case 3:
              ot::Child::RemoveIp6Address(v28, (const ot::Ip6::Address *)&v31);
              IgnoreError();
              ot::BitVector<(unsigned short)64>::Set((uint64_t)this + 92, ChildIndex, 0);
              ot::BitVector<(unsigned short)64>::Set((uint64_t)this + 100, ChildIndex, 0);
              break;
            case 4:
            case 5:
            case 6:
              ot::DuaManager::UpdateReregistrationDelay(this);
              break;
            default:
LABEL_42:
              JUMPOUT(0);
          }
        }
        if (v30) {
          ot::DuaManager::SendAddressNotification(this, &v31, v30, v28);
        }
      }
      else
      {
        unsigned int v32 = 23;
      }
    }
  }
  else
  {
    unsigned int v32 = 2;
  }
LABEL_41:
  ot::DuaManager::UpdateTimeTickerRegistration(this);
  return v32;
}

void ot::DuaManager::HandleTmf<(ot::Uri)36>(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    if (ot::Coap::Message::IsConfirmable(a2))
    {
      uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      if (!ot::Coap::CoapBase::SendEmptyAck(v3, a2, a3))
      {
        char v4 = ot::UriToString<(ot::Uri)36>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Sent %s ack", v5, v6, v7, v8, v9, v10, v4);
      }
    }
    int v19 = ot::DuaManager::ProcessDuaResponse(a1, a2);
  }
  else
  {
    int v19 = 6;
  }
  char v17 = ot::UriToString<(ot::Uri)36>();
  ot::ErrorToString(v19);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Received %s: %s", v11, v12, v13, v14, v15, v16, v17);
}

uint64_t ot::Tlv::Find<ot::ThreadStatusTlv>(ot::Tlv *a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 4u, a2, a4);
}

{
  return ot::Tlv::Find<ot::ThreadStatusTlv>(a1, a2, a3, a4);
}

void ot::DuaManager::SendAddressNotification(ot::InstanceLocator *a1, void *a2, unsigned __int8 a3, ot::Neighbor *a4)
{
  unsigned __int16 v29 = a1;
  unsigned __int16 v28 = a2;
  unsigned __int8 v27 = a3;
  char v26 = a4;
  char v25 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v24, Instance);
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  char v25 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v5, 0x24u);
  if (v25)
  {
    int v23 = ot::Tlv::Append<ot::ThreadStatusTlv>(v25, v27);
    if (!v23)
    {
      int v23 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Ip6::Address>>(v25, v28);
      if (!v23)
      {
        unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v26);
        ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v24, Rloc16);
        uint64_t v7 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        int v23 = ot::Coap::CoapBase::SendMessage(v7, v25, (const ot::Ip6::MessageInfo *)v24);
        if (!v23)
        {
          char v21 = ot::UriToString<(ot::Uri)36>();
          ot::Neighbor::GetRloc16(v26);
          ot::Ip6::Address::ToString((ot::Ip6::Address *)v28, (ot::StringWriter *)v31);
          ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"DuaManager", "Sent %s for child %04x DUA %s", v8, v9, v10, v11, v12, v13, v21);
        }
      }
    }
  }
  else
  {
    int v23 = 3;
  }
  if (v23)
  {
    if (v25) {
      ot::Message::Free(v25);
    }
    char v20 = ot::UriToString<(ot::Uri)36>();
    ot::Neighbor::GetRloc16(v26);
    ot::Ip6::Address::ToString((ot::Ip6::Address *)v28, (ot::StringWriter *)v30);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v30);
    ot::ErrorToString(v23);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"DuaManager", "Sent %s for child %04x DUA %s Error %s", v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t ot::DuaManager::UpdateChildDomainUnicastAddress(unsigned __int16 *a1, uint64_t a2, char a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
  uint64_t result = ot::ChildTable::GetChildIndex(v3, a2);
  unsigned __int16 v14 = result;
  if (a3 == 2 || a3 == 1)
  {
    uint64_t result = ot::BitVector<(unsigned short)64>::Get((uint64_t)(a1 + 46), result);
    if (result)
    {
      if (a1[54] == v14)
      {
        uint64_t v5 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
        ot::Coap::CoapBase::AbortTransaction(v5, (uint64_t)ot::DuaManager::HandleDuaResponse, (uint64_t)a1);
        IgnoreError();
      }
      ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 46), v14, 0);
      uint64_t result = ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 50), v14, 0);
    }
  }
  if (!a3
    || a3 == 1
    || a3 == 3 && (uint64_t result = ot::BitVector<(unsigned short)64>::Get((uint64_t)(a1 + 46), v14), (result & 1) == 0))
  {
    if (ot::Equatable<ot::BitVector<(unsigned short)64>>::operator==(a1 + 46, a1 + 50))
    {
      unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange((ot::Random::NonCrypto *)1, 5u);
      ot::DuaManager::UpdateCheckDelay((char *)a1, Uint8InRange, v7, v8, v9, v10, v11, v12);
    }
    ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 46), v14, 1);
    return ot::BitVector<(unsigned short)64>::Set((uint64_t)(a1 + 50), v14, 0);
  }
  return result;
}

BOOL ot::Equatable<ot::BitVector<(unsigned short)64>>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return ot::Equatable<ot::BitVector<(unsigned short)64>>::operator==(a1, a2);
}

uint64_t ot::TaskletIn<ot::DuaManager,&ot::DuaManager::PerformNextRegistration>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
  return ((uint64_t (*)(uint64_t))ot::DuaManager::PerformNextRegistration)(v2);
}

unsigned char *ot::SettingsBase::DadInfo::Init(ot::SettingsBase::DadInfo *this)
{
  return ot::Clearable<ot::SettingsBase::DadInfo>::Clear(this);
}

{
  return ot::SettingsBase::DadInfo::Init(this);
}

unsigned char *ot::Clearable<ot::SettingsBase::DadInfo>::Clear(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::SettingsBase::DadInfo>::Clear(result);
}

ot::EnergyScanServer *ot::EnergyScanServer::EnergyScanServer(ot::EnergyScanServer *this, ot::Instance *a2)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_WORD *)this + 12) = 0;
  *((_WORD *)this + 13) = 0;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 4) = 0;
  ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::TimerMilliIn((ot::EnergyScanServer *)((char *)this + 40), a2);
  return this;
}

{
  ot::EnergyScanServer::EnergyScanServer(this, a2);
  return this;
}

void ot::EnergyScanServer::HandleTimer(ot::EnergyScanServer *this)
{
  if (*((void *)this + 4))
  {
    if (*((unsigned char *)this + 28))
    {
      unsigned int v3 = *((_DWORD *)this + 5) & ~(*((_DWORD *)this + 5) - 1);
      uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ot::Mac::Mac::EnergyScan(v1, v3, *((_WORD *)this + 13), (uint64_t)ot::EnergyScanServer::HandleScanResult, (uint64_t)this);
      IgnoreError();
    }
    else
    {
      ot::EnergyScanServer::SendReport(this);
    }
  }
}

ot::TimerMilli *ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::HandleTimer);
  return a1;
}

void ot::EnergyScanServer::HandleTmf<(ot::Uri)19>(uint64_t a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v32 = a1;
  long long v31 = a2;
  unsigned __int8 v30 = a3;
  char v29 = 0;
  unsigned __int16 v28 = 0;
  unsigned __int16 v27 = 0;
  int ChannelMask = 0;
  if (ot::Coap::Message::IsPostRequest(a2)
    && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)54,unsigned char>>(v31, &v29, v3, v4)
    && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)55,unsigned short>>(v31, &v28, v5, v6)
    && !ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(v31, &v27, v7, v8))
  {
    int ChannelMask = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v31, v9, v10, v11, v12);
    if (ChannelMask)
    {
      if (*(void *)(a1 + 32)) {
        ot::Message::Free(*(ot::Message **)(a1 + 32));
      }
      uint64_t v13 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
      *(void *)(a1 + 32) = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v13, 0x12u);
      if (*(void *)(a1 + 32))
      {
        ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v24);
        ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v24, ChannelMask);
        if (!ot::Tlv::AppendTo((ot::Tlv *)v24, *(ot::Message **)(a1 + 32)))
        {
          ot::MeshCoP::Tlv::SetType(v25, 57);
          if (!ot::Message::Append<ot::MeshCoP::Tlv>(*(ot::Message **)(a1 + 32), v25))
          {
            *(unsigned char *)(a1 + 29) = 0;
            *(_DWORD *)(a1 + 16) = ChannelMask;
            *(_DWORD *)(a1 + 2ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = *(_DWORD *)(a1 + 16);
            *(unsigned char *)(a1 + 28) = v29;
            *(_WORD *)(a1 + 24) = v28;
            *(_WORD *)(a1 + 26) = v27;
            ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), 0x3E8u);
            *(_OWORD *)a1 = *(_OWORD *)ot::Ip6::MessageInfo::GetPeerAddr(v30);
            if (ot::Coap::Message::IsConfirmable(v31))
            {
              SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v30);
              if (!ot::Ip6::Address::IsMulticast(SockAddr))
              {
                uint64_t v15 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
                if (!ot::Coap::CoapBase::SendEmptyAck(v15, v31, v30))
                {
                  char v16 = ot::UriToString<(ot::Uri)19>();
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"EnergyScanSrv", "Sent %s ack", v17, v18, v19, v20, v21, v22, v16);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x38u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)56,unsigned short>>(a1, a2, a3, a4);
}

void ot::EnergyScanServer::HandleScanResult(uint64_t a1, uint64_t a2)
{
}

{
  if (*(void *)(a1 + 32))
  {
    if (a2)
    {
      if (ot::Message::Append<signed char>(*(ot::Message **)(a1 + 32), (char *)(a2 + 1)))
      {
        if (*(void *)(a1 + 32)) {
          ot::Message::Free(*(ot::Message **)(a1 + 32));
        }
        *(void *)(a1 + 32) = 0;
      }
      else if (++*(unsigned char *)(a1 + 29) == 255)
      {
        *(unsigned char *)(a1 + 28) = 0;
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), 0x1F4u);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 20) &= *(_DWORD *)(a1 + 20) - 1;
      if (!*(_DWORD *)(a1 + 20))
      {
        *(_DWORD *)(a1 + 2ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(this, 0) = *(_DWORD *)(a1 + 16);
        --*(unsigned char *)(a1 + 28);
      }
      if (*(unsigned char *)(a1 + 28)) {
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), *(unsigned __int16 *)(a1 + 24));
      }
      else {
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 40), 0x1F4u);
      }
    }
  }
}

void ot::EnergyScanServer::SendReport(ot::EnergyScanServer *this)
{
  unsigned __int16 v14 = this;
  int v13 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v12, Instance);
  __int16 Length = ot::Message::GetLength(*((ot::Message **)this + 4));
  ot::Message::Write<unsigned char>(*((ot::Message **)this + 4), Length - *((unsigned __int8 *)this + 29) - 1, (char *)this + 29);
  ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v12, (__n128 *)this);
  uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  int v13 = ot::Coap::CoapBase::SendMessage(v3, *((ot::Coap::Message **)this + 4), (const ot::Ip6::MessageInfo *)v12);
  if (!v13)
  {
    char v4 = ot::UriToString<(ot::Uri)18>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"EnergyScanSrv", "Sent %s", v5, v6, v7, v8, v9, v10, v4);
  }
  if (v13 && *((void *)this + 4)) {
    ot::Message::Free(*((ot::Message **)this + 4));
  }
  ot::MeshCoP::LogError((char)"send scan results", v13);
  *((void *)this + 4) = 0;
}

uint64_t ot::Message::Append<signed char>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 1u);
}

{
  return ot::Message::Append<signed char>(a1, a2);
}

void ot::EnergyScanServer::HandleNotifierEvents(ot::Message **a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (ot::Events::Contains(&v5, 512) && a1[4])
  {
    uint64_t v2 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    ot::NetworkData::LeaderBase::GetCommissioningData(v2);
    if (!v3)
    {
      ot::Message::Free(a1[4]);
      a1[4] = 0;
      ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 5));
    }
  }
}

void ot::NetworkData::LeaderBase::GetCommissioningData(ot::NetworkData::LeaderBase *this)
{
  ot::AsConst<ot::NetworkData::LeaderBase>();
  ot::NetworkData::LeaderBase::GetCommissioningData(v1);
  ot::AsNonConst<ot::NetworkData::CommissioningDataTlv>();
}

{
  unint64_t TlvsEnd;
  ot::NetworkData::NetworkDataTlv *TlvsStart;

  TlvsStart = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(this);
  TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::CommissioningDataTlv>(TlvsStart, TlvsEnd);
}

{
  ot::NetworkData::LeaderBase::GetCommissioningData(this);
}

uint64_t ot::TimerMilliIn<ot::EnergyScanServer,&ot::EnergyScanServer::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(a1);
  return ((uint64_t (*)(uint64_t))ot::EnergyScanServer::HandleTimer)(v2);
}

ot::Mac::Address *ot::IndirectSender::ChildInfo::GetMacAddress(ot::IndirectSender::ChildInfo *this, ot::Mac::Address *a2)
{
  if ((*((void *)this + 1) & 0x40000000) != 0)
  {
    __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::IndirectSender::ChildInfo *)((char *)this - 144));
    ot::Mac::Address::SetShort((uint64_t)a2, Rloc16);
  }
  else
  {
    ot::Neighbor::GetExtAddress((ot::IndirectSender::ChildInfo *)((char *)this - 144));
    ot::Mac::Address::SetExtended((uint64_t)a2, v3);
  }
  return a2;
}

ot::IndirectSender *ot::IndirectSender::IndirectSender(ot::IndirectSender *this, ot::Instance *a2)
{
  *(unsigned char *)this = 0;
  ot::SourceMatchController::SourceMatchController((ot::IndirectSender *)((char *)this + 1), a2);
  ot::DataPollHandler::DataPollHandler((ot::IndirectSender *)((char *)this + 8), a2);
  ot::CslTxScheduler::CslTxScheduler((ot::IndirectSender *)((char *)this + 24), a2);
  return this;
}

{
  ot::IndirectSender::IndirectSender(this, a2);
  return this;
}

ot::InstanceLocator *ot::IndirectSender::Stop(ot::InstanceLocator *this)
{
  uint64_t v10 = this;
  char v4 = this;
  if (*(unsigned char *)this)
  {
    uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v8 = ot::ChildTable::Iterate(v1, 5);
    uint64_t v9 = (ot::ChildTable::IteratorBuilder *)&v8;
    v7[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v8);
    v7[1] = v2;
    v6[0] = ot::ChildTable::IteratorBuilder::end(v9);
    v6[1] = v3;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v7, v6))
    {
      uint64_t v5 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v7);
      ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v5 + 18, 0);
      ot::SourceMatchController::ResetMessageCount((ot::InstanceLocator *)((char *)v4 + 1), v5);
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v7);
    }
    ot::DataPollHandler::Clear((ot::InstanceLocator *)((char *)v4 + 8));
    this = (ot::InstanceLocator *)ot::CslTxScheduler::Clear((ot::InstanceLocator *)((char *)v4 + 24));
  }
  *(unsigned char *)char v4 = 0;
  return this;
}

void *ot::IndirectSender::ChildInfo::SetIndirectMessage(void *this, ot::Message *a2)
{
  *this = a2;
  return this;
}

{
  return ot::IndirectSender::ChildInfo::SetIndirectMessage(this, a2);
}

void ot::IndirectSender::AddMessageForSleepyChild(ot::IndirectSender *this, ot::Message *a2, ot::Child *a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v3, (uint64_t)a3);
  if (!ot::Message::GetChildMask(a2, ChildIndex))
  {
    ot::Message::SetChildMask(a2, ChildIndex);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    memcpy(__dst, a2, sizeof(__dst));
    if (ot::MeshForwarder::IsTxThreadControl(v5, (ot::Message *)__dst)) {
      ot::SourceMatchController::IncrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 0);
    }
    else {
      ot::SourceMatchController::IncrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 1);
    }
    if (ot::Message::GetType(a2) != 2
      && (unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a3 + 144)) > 1u)
    {
      IndirectMessage = (ot::Message *)ot::IndirectSender::FindIndirectMessage(this, a3, 1);
      if (IndirectMessage)
      {
        ot::IndirectSender::RemoveMessageFromSleepyChild(this, IndirectMessage, a3);
        IgnoreError();
        char v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
        ot::MeshForwarder::RemoveMessageIfNoPendingTx(v4, IndirectMessage);
      }
    }
    ot::IndirectSender::RequestMessageUpdate(this, a3);
  }
}

uint64_t ot::IndirectSender::FindIndirectMessage(ot::IndirectSender *this, ot::Child *a2, char a3)
{
  char v16 = this;
  uint64_t v15 = a2;
  char v14 = a3 & 1;
  *(_WORD *)&v13[8] = 0;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  *(void *)int v13 = (unsigned __int16)ot::ChildTable::GetChildIndex(v3, (uint64_t)v15);
  uint64_t v12 = (ot::PriorityQueue *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this) + 8);
  v11[0] = ot::PriorityQueue::begin(v12);
  v11[1] = v4;
  v10[0] = ot::PriorityQueue::end(v12);
  v10[1] = v5;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v11, v10))
  {
    uint64_t v9 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v11);
    if (ot::Message::GetChildMask(v9, *(unsigned __int16 *)v13)
      && ((v14 & 1) == 0 || ot::Message::GetType(v9) == 2))
    {
      *(void *)&void v13[2] = v9;
      return *(void *)&v13[2];
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v11, v6);
  }
  return *(void *)&v13[2];
}

uint64_t ot::IndirectSender::RemoveMessageFromSleepyChild(ot::IndirectSender *this, ot::Message *a2, ot::Child *a3)
{
  *(_WORD *)&void v7[4] = 0;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  *(_DWORD *)uint64_t v7 = (unsigned __int16)ot::ChildTable::GetChildIndex(v3, (uint64_t)a3);
  if (ot::Message::GetChildMask(a2, *(unsigned __int16 *)v7))
  {
    ot::Message::ClearChildMask(a2, *(unsigned __int16 *)v7);
    uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    memcpy(__dst, a2, sizeof(__dst));
    if (ot::MeshForwarder::IsTxThreadControl(v5, (ot::Message *)__dst)) {
      ot::SourceMatchController::DecrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 0);
    }
    else {
      ot::SourceMatchController::DecrementMessageCount((ot::IndirectSender *)((char *)this + 1), a3, 1);
    }
    ot::IndirectSender::RequestMessageUpdate(this, a3);
  }
  else
  {
    *(_DWORD *)&void v7[2] = 23;
  }
  return *(unsigned int *)&v7[2];
}

void ot::IndirectSender::RequestMessageUpdate(ot::IndirectSender *this, ot::Child *a2)
{
  IndirectMessage = (ot::Message *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::Child *)((char *)a2 + 144));
  if (!IndirectMessage
    || (uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this),
        unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v2, (uint64_t)a2),
        ot::Message::GetChildMask(IndirectMessage, ChildIndex)))
  {
    if ((ot::IndirectSender::ChildInfo::IsWaitingForMessageUpdate((ot::Child *)((char *)a2 + 144)) & 1) == 0
      && IndirectMessage != (ot::Message *)ot::IndirectSender::FindIndirectMessage(this, a2, 0))
    {
      if (IndirectMessage)
      {
        if (!(unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectFragmentOffset((ot::Child *)((char *)a2 + 144)))
        {
          ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate((uint64_t)a2 + 144, 1);
          ot::DataPollHandler::RequestFrameChange((uint64_t)this + 8, 1, a2);
          ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
        }
      }
      else
      {
        ot::IndirectSender::UpdateIndirectMessage(this, a2);
      }
    }
  }
  else
  {
    ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)a2 + 18, 0);
    ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate((uint64_t)a2 + 144, 1);
    ot::DataPollHandler::RequestFrameChange((uint64_t)this + 8, 0, a2);
    ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
  }
}

void ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::IndirectSender *this, ot::Child *a2)
{
  uint64_t v17 = this;
  char v16 = a2;
  __int16 IndirectMessageCount = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 144));
  if (v3 | (IndirectMessageCount == 0)) {
    char v4 = 0;
  }
  else {
    char v4 = 1;
  }
  if (v4)
  {
    uint64_t v15 = (ot::PriorityQueue *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this) + 8);
    v14[0] = ot::PriorityQueue::begin(v15);
    v14[1] = v5;
    v13[0] = ot::PriorityQueue::end(v15);
    v13[1] = v6;
    while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v14, v13))
    {
      uint64_t v11 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v14);
      uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v7, (uint64_t)v16);
      ot::Message::ClearChildMask(v11, ChildIndex);
      uint64_t v9 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
      ot::MeshForwarder::RemoveMessageIfNoPendingTx(v9, v11);
      ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v14, v10);
    }
    ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v16 + 18, 0);
    ot::SourceMatchController::ResetMessageCount((ot::IndirectSender *)((char *)this + 1), v16);
    ot::DataPollHandler::RequestFrameChange((uint64_t)this + 8, 0, v16);
    ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
  }
}

void ot::IndirectSender::SetChildUseShortAddress(ot::IndirectSender *this, ot::Child *a2, char a3)
{
  char v4 = a3 & 1;
  if ((ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort((ot::Child *)((char *)a2 + 144)) & 1) != (a3 & 1)) {
    ot::SourceMatchController::SetSrcMatchAsShort((ot::IndirectSender *)((char *)this + 1), a2, v4 & 1);
  }
}

uint64_t ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 30) & 1;
}

{
  return ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort(this);
}

void ot::IndirectSender::HandleChildModeChange(uint64_t a1, ot::Neighbor *a2, char a3)
{
  char v18 = a3;
  uint64_t v17 = a1;
  char v16 = a2;
  if (!ot::Neighbor::IsRxOnWhenIdle(a2) && ot::Neighbor::IsStateValid(v16)) {
    ot::IndirectSender::SetChildUseShortAddress((ot::IndirectSender *)a1, v16, 1);
  }
  if (!ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v18) && ot::Neighbor::IsRxOnWhenIdle(v16))
  {
    __int16 IndirectMessageCount = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Neighbor *)((char *)v16 + 144));
    char v5 = v4 | (IndirectMessageCount == 0);
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
      unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v6, (uint64_t)v16);
      char v14 = (ot::PriorityQueue *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1)
                                + 8);
      v13[0] = ot::PriorityQueue::begin(v14);
      v13[1] = v7;
      v12[0] = ot::PriorityQueue::end(v14);
      v12[1] = v8;
      while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v13, v12))
      {
        uint64_t v11 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v13);
        if (ot::Message::GetChildMask(v11, ChildIndex))
        {
          ot::Message::ClearChildMask(v11, ChildIndex);
          ot::Message::SetDirectTransmission(v11);
        }
        ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v13, v9);
      }
      ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v16 + 18, 0);
      ot::SourceMatchController::ResetMessageCount((ot::SourceMatchController *)(a1 + 1), v16);
      ot::DataPollHandler::RequestFrameChange(a1 + 8, 0, v16);
      ot::CslTxScheduler::Update((ot::CslTxScheduler *)(a1 + 24));
    }
  }
}

uint64_t ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate(uint64_t this, char a2)
{
  *(void *)(this + 8) = *(void *)(this + 8) & 0xFFFFFFFFFFFF7FFFLL | ((unint64_t)(a2 & 1) << 15);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::IsWaitingForMessageUpdate(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 15) & 1;
}

{
  return ot::IndirectSender::ChildInfo::IsWaitingForMessageUpdate(this);
}

void ot::IndirectSender::UpdateIndirectMessage(ot::IndirectSender *this, ot::Child *a2)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  IndirectMessage = (ot::Message *)ot::IndirectSender::FindIndirectMessage(this, a2, 0);
  ot::IndirectSender::ChildInfo::SetWaitingForMessageUpdate((uint64_t)v6 + 144, 0);
  ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v6 + 18, IndirectMessage);
  ot::IndirectSender::ChildInfo::SetIndirectFragmentOffset((uint64_t)v6 + 144, 0);
  ot::IndirectSender::ChildInfo::SetIndirectTxSuccess((uint64_t)v6 + 144, 1);
  ot::CslTxScheduler::Update((ot::IndirectSender *)((char *)this + 24));
  if (IndirectMessage)
  {
    ot::Mac::Address::Address((ot::Mac::Address *)v4);
    ot::DataPollHandler::HandleNewFrame((ot::IndirectSender *)((char *)this + 8), v6);
    ot::IndirectSender::ChildInfo::GetMacAddress((ot::Child *)((char *)v6 + 144), (ot::Mac::Address *)v4);
    uint64_t v2 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::LogMessage(v2, 2u, IndirectMessage, 0, (ot::Mac::Address *)v4);
  }
}

uint64_t ot::IndirectSender::ChildInfo::GetIndirectFragmentOffset(ot::IndirectSender::ChildInfo *this)
{
  return *((_WORD *)this + 4) & 0x3FFF;
}

{
  return ot::IndirectSender::ChildInfo::GetIndirectFragmentOffset(this);
}

void ot::IndirectSender::HandleFrameChangeDone(ot::IndirectSender *this, ot::Child *a2)
{
  if (ot::IndirectSender::ChildInfo::IsWaitingForMessageUpdate((ot::Child *)((char *)a2 + 144))) {
    ot::IndirectSender::UpdateIndirectMessage(this, a2);
  }
}

uint64_t ot::IndirectSender::ChildInfo::SetIndirectFragmentOffset(uint64_t this, __int16 a2)
{
  *(void *)(this + 8) = *(void *)(this + 8) & 0xFFFFFFFFFFFFC000 | a2 & 0x3FFF;
  return this;
}

{
  return ot::IndirectSender::ChildInfo::SetIndirectFragmentOffset(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::SetIndirectTxSuccess(uint64_t this, char a2)
{
  *(void *)(this + 8) = *(void *)(this + 8) & 0xFFFFFFFFFFFFBFFFLL | ((unint64_t)(a2 & 1) << 14);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::SetIndirectTxSuccess(this, a2);
}

uint64_t ot::IndirectSender::PrepareFrameForChild(ot::IndirectSender *a1, ot::Mac::TxFrame *a2, _WORD *a3, uint64_t a4)
{
  unsigned int v8 = 0;
  IndirectMessage = (ot::Message *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::IndirectSender::ChildInfo *)(a4 + 144));
  if (*(unsigned char *)a1)
  {
    if (IndirectMessage)
    {
      int Type = ot::Message::GetType(IndirectMessage);
      if (Type)
      {
        if (Type != 2) {
          __assert_rtn("PrepareFrameForChild", "indirect_sender.cpp", 374, "false");
        }
        ot::IndirectSender::PrepareEmptyFrame(a1, a2, (ot::Child *)a4, 1);
        *a3 = ot::Message::GetLength(IndirectMessage);
      }
      else
      {
        *a3 = ot::IndirectSender::PrepareDataFrame(a1, a2, (ot::Child *)a4, IndirectMessage);
      }
    }
    else
    {
      ot::IndirectSender::PrepareEmptyFrame(a1, a2, (ot::Child *)a4, 1);
      *a3 = 0;
    }
  }
  else
  {
    return 11;
  }
  return v8;
}

uint64_t ot::IndirectSender::PrepareEmptyFrame(ot::IndirectSender *this, ot::Mac::TxFrame *a2, ot::Child *a3, char a4)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  char v8 = a4 & 1;
  ot::Mac::Address::Address((ot::Mac::Address *)v7);
  ot::IndirectSender::ChildInfo::GetMacAddress((ot::Child *)((char *)v9 + 144), (ot::Mac::Address *)v7);
  char v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  return ot::MeshForwarder::PrepareEmptyFrame(v4, v10, (const ot::Mac::Address *)v7, v8 & 1);
}

uint64_t ot::IndirectSender::PrepareDataFrame(ot::IndirectSender *this, ot::Mac::TxFrame *a2, ot::Child *a3, ot::Message *a4)
{
  uint64_t v22 = this;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  uint64_t v19 = a4;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v16);
  ot::Message::Read<ot::Ip6::Header>(v19, 0, v18);
  IgnoreError();
  int v13 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  Source = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v18);
  ot::MeshForwarder::GetMacSourceAddress(v13, Source, (ot::Mac::Address *)v16);
  Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v18);
  if (ot::Ip6::Address::IsLinkLocal(Destination))
  {
    uint64_t v11 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    uint64_t v6 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v18);
    ot::MeshForwarder::GetMacDestinationAddress(v11, v6, (ot::Mac::Address *)v17);
  }
  else
  {
    ot::IndirectSender::ChildInfo::GetMacAddress((ot::Child *)((char *)v20 + 144), (ot::Mac::Address *)v17);
  }
  unsigned __int16 Offset = ot::Message::GetOffset(v19);
  uint64_t v10 = v19;
  IndirectFragmentunsigned __int16 Offset = ot::IndirectSender::ChildInfo::GetIndirectFragmentOffset((ot::Child *)((char *)v20 + 144));
  ot::Message::SetOffset(v10, IndirectFragmentOffset);
  char v8 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  unsigned __int16 v14 = ot::MeshForwarder::PrepareDataFrame(v8, v21, v19, (const ot::Mac::Addresses *)v16, 0, 0xFFFFu, 0xFFFFu, 0);
  ot::Message::SetOffset(v19, Offset);
  if ((unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)v20 + 144)) > 1u) {
    ot::Mac::Frame::SetFramePending(v21, 1);
  }
  return v14;
}

void ot::IndirectSender::HandleSentFrameToChild(uint64_t a1, ot::Mac::Frame *a2, unsigned __int16 *a3, int a4, uint64_t a5)
{
  uint64_t v58 = a1;
  __n128 v57 = a2;
  uint64_t v56 = a3;
  int v55 = a4;
  uint64_t v54 = (ot::Child *)a5;
  __src = (void *)ot::IndirectSender::ChildInfo::GetIndirectMessage((ot::IndirectSender::ChildInfo *)(a5 + 144));
  unsigned __int16 Length = 0;
  unsigned __int16 Length = *v56;
  if (*(unsigned char *)a1)
  {
    if (!v55)
    {
      char v5 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>((ot::InstanceLocator *)a1);
      ot::ChildSupervisor::UpdateOnSend(v5, v54);
    }
    if (Length)
    {
      if (v55)
      {
        if (v55 != 11 && v55 != 15 && v55 != 14) {
          __assert_rtn("HandleSentFrameToChild", "indirect_sender.cpp", 485, "false");
        }
        ot::IndirectSender::ChildInfo::SetIndirectTxSuccess((uint64_t)v54 + 144, 0);
        if (__src) {
          unsigned __int16 Length = ot::Message::GetLength((ot::Message *)__src);
        }
      }
      if (__src && Length < (int)(unsigned __int16)ot::Message::GetLength((ot::Message *)__src))
      {
        ot::IndirectSender::ChildInfo::SetIndirectFragmentOffset((uint64_t)v54 + 144, Length);
        ot::DataPollHandler::HandleNewFrame((ot::DataPollHandler *)(a1 + 8), v54);
        ot::CslTxScheduler::Update((ot::CslTxScheduler *)(a1 + 24));
      }
      else
      {
        if (__src)
        {
          int v51 = v55;
          uint64_t v7 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
          unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v7, (uint64_t)v54);
          ot::Mac::Address::Address((ot::Mac::Address *)v49);
          ot::IndirectSender::ChildInfo::SetIndirectMessage((void *)v54 + 18, 0);
          LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v54);
          char IndirectTxSuccess = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v54 + 144));
          ot::LinkQualityInfo::AddMessageTxStatus(LinkInfo, IndirectTxSuccess & 1);
          uint64_t v9 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
          if (ot::MeshForwarder::IsMatter(v9, (const ot::Message *)__src, (ot::Ip6::Headers *)v48))
          {
            uint64_t v38 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v54);
            char v10 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v54 + 144));
            ot::LinkQualityInfo::AddMatterMessageTxStatus(v38, v10 & 1);
            uint64_t v39 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            char v11 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v54 + 144));
            ot::MeshForwarder::AddMatterMessageTxStatus(v39, v11 & 1);
          }
          if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v48) == 5683
            || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v48) == 5683)
          {
            uint64_t v36 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v54);
            char v12 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v54 + 144));
            ot::LinkQualityInfo::AddHomeKitMessageTxStatus(v36, v12 & 1);
            char v37 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            char v13 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v54 + 144));
            ot::MeshForwarder::AddHomeKitMessageTxStatus(v37, v13 & 1);
          }
          ot::SourceMatchController::SetSrcMatchAsShort((ot::SourceMatchController *)(a1 + 1), v54, 1);
          if (!ot::Mac::Frame::IsEmpty(v57))
          {
            ot::Mac::Frame::GetDstAddr(v57, (ot::Mac::Address *)v49);
            IgnoreError();
            unsigned __int16 v14 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            ot::MeshForwarder::LogMessage(v14, 1u, (ot::Message *)__src, v51, (ot::Mac::Address *)v49);
          }
          if (!ot::Message::GetType((ot::Message *)__src))
          {
            unsigned __int8 v47 = (_DWORD *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1)
                           + 136);
            uint64_t v34 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            memcpy(__dst, __src, sizeof(__dst));
            BOOL IsTxThreadControl = ot::MeshForwarder::IsTxThreadControl(v34, (ot::Message *)__dst);
            uint64_t v35 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            memcpy(v60, __src, sizeof(v60));
            BOOL IsTxIcmpError = ot::MeshForwarder::IsTxIcmpError(v35, (ot::Message *)v60);
            char v44 = (_DWORD *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1)
                           + 240);
            if (ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v54 + 144)))
            {
              ++*v47;
              ++*v44;
              if (!IsTxThreadControl)
              {
                ++v47[11];
                ++v44[11];
              }
              uint64_t v33 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
              int Timestamp = ot::Message::GetTimestamp((ot::Message *)__src);
              int Value = ot::Time::GetValue((ot::Time *)&Timestamp);
              ot::MeshForwarder::UpdateTxDelayStats(v33, Value);
            }
            else
            {
              ++v47[2];
              ++v44[2];
              if (!IsTxThreadControl)
              {
                ++v47[12];
                ++v44[12];
              }
              uint64_t v32 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
              int v42 = ot::Message::GetTimestamp((ot::Message *)__src);
              int v16 = ot::Time::GetValue((ot::Time *)&v42);
              ot::MeshForwarder::UpdateTxDelayStats(v32, v16);
            }
            long long v31 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            unsigned __int16 v28 = v54;
            BOOL v29 = IsTxThreadControl;
            BOOL v30 = IsTxIcmpError;
            char v17 = ot::IndirectSender::ChildInfo::GetIndirectTxSuccess((ot::Child *)((char *)v54 + 144));
            ot::MeshForwarder::UpdateTriggerBasedNeighborInfo(v31, v28, v29, v30, v17 & 1);
          }
          if (ot::Message::GetChildMask((ot::Message *)__src, ChildIndex))
          {
            ot::Message::ClearChildMask((ot::Message *)__src, ChildIndex);
            uint64_t v27 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
            memcpy(v59, __src, sizeof(v59));
            if (ot::MeshForwarder::IsTxThreadControl(v27, (ot::Message *)v59)) {
              ot::SourceMatchController::DecrementMessageCount((ot::SourceMatchController *)(a1 + 1), v54, 0);
            }
            else {
              ot::SourceMatchController::DecrementMessageCount((ot::SourceMatchController *)(a1 + 1), v54, 1);
            }
          }
          char v18 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
          ot::MeshForwarder::RemoveMessageIfNoPendingTx(v18, (ot::Message *)__src);
        }
        ot::IndirectSender::UpdateIndirectMessage((ot::IndirectSender *)a1, v54);
        uint64_t v19 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
        if (ot::Mle::Mle::IsCslPeripheralPresent(v19))
        {
          uint64_t v20 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
          ot::Mle::Mle::HandleSentFrameToNeighbor(v20, v54, v21, v22, v23, v24, v25, v26);
        }
      }
    }
  }
  if (*(unsigned char *)a1) {
    ot::IndirectSender::ClearMessagesForRemovedChildren((ot::IndirectSender *)a1);
  }
}

_WORD *ot::LinkQualityInfo::AddMessageTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 3, a2 & 1, 0x80u);
}

{
  return ot::LinkQualityInfo::AddMessageTxStatus(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::GetIndirectTxSuccess(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 14) & 1;
}

{
  return ot::IndirectSender::ChildInfo::GetIndirectTxSuccess(this);
}

_WORD *ot::LinkQualityInfo::AddMatterMessageTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 5, a2 & 1, 0x80u);
}

{
  return ot::LinkQualityInfo::AddMatterMessageTxStatus(this, a2);
}

_WORD *ot::LinkQualityInfo::AddHomeKitMessageTxStatus(ot::LinkQualityInfo *this, char a2)
{
  return ot::SuccessRateTracker::AddSample((_WORD *)this + 4, a2 & 1, 0x80u);
}

{
  return ot::LinkQualityInfo::AddHomeKitMessageTxStatus(this, a2);
}

uint64_t ot::Message::GetTimestamp(ot::Message *this)
{
  return *(unsigned int *)(ot::Buffer::GetMetadata(this) + 36);
}

{
  return ot::Message::GetTimestamp(this);
}

BOOL ot::IndirectSender::ClearMessagesForRemovedChildren(ot::IndirectSender *this)
{
  char v11 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 6);
  char v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1] = v2;
  v7[0] = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1] = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    if ((unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)v6 + 144))) {
      ot::IndirectSender::ClearAllMessagesForSleepyChild(this, v6);
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }
  return result;
}

uint64_t ot::KeyManager::HandleKeyRotationTimer(ot::KeyManager *this)
{
  ++*((_DWORD *)this + 17);
  ot::Timer::IsRunning((ot::KeyManager *)((char *)this + 80));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"KeyManager", "%s Rotation time hoursSinceKeyRotation:%u, securityPolicy.RotationTime:%u, guardTimeSwitchEnabled:%d, guardTime:%u, keySequence:%u, isRunning:%d", v1, v2, v3, v4, v5, v6, (char)"HandleKeyRotationTimer");
  int FireTime = ot::Timer::GetFireTime((ot::KeyManager *)((char *)this + 80));
  uint64_t result = ot::TimerMilli::StartAt((ot::KeyManager *)((char *)this + 80), FireTime, 0x36EE80u);
  if (*((_DWORD *)this + 17) >= *((unsigned __int16 *)this + 70))
  {
    ot::Timer::IsRunning((ot::KeyManager *)((char *)this + 80));
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"KeyManager", "%s Update keysequence as key rotation timer expired hoursSinceKeyRotation:%u, securityPolicy.RotationTime:%u, guardTimeSwitchEnabled:%d, guardTime:%u, keySequence:%u, isRunning:%d", v8, v9, v10, v11, v12, v13, (char)"HandleKeyRotationTimer");
    return ot::KeyManager::SetCurrentKeySequence(this, *((_DWORD *)this + 4) + 1);
  }
  return result;
}

uint64_t ot::SecurityPolicy::SetToDefault(ot::SecurityPolicy *this)
{
  *(_WORD *)this = 672;
  return ot::SecurityPolicy::SetToDefaultFlags((uint64_t)this);
}

uint64_t ot::SecurityPolicy::SetToDefaultFlags(uint64_t this)
{
  *(_WORD *)(this + 2) = *(_WORD *)(this + 2) & 0xFFFE | 1;
  *(_WORD *)(this + 2) = *(_WORD *)(this + 2) & 0xFFFD | 2;
  *(_WORD *)(this + 2) = *(_WORD *)(this + 2) & 0xFFFB | 4;
  *(_WORD *)(this + 2) = *(_WORD *)(this + 2) & 0xFFF7 | 8;
  *(_WORD *)(this + 2) &= ~0x10u;
  *(_WORD *)(this + 2) &= ~0x20u;
  *(_WORD *)(this + 2) &= ~0x40u;
  *(_WORD *)(this + 2) = *(_WORD *)(this + 2) & 0xFF7F | 0x80;
  *(_WORD *)(this + 2) &= ~0x100u;
  *(_WORD *)(this + 2) &= 0xF1FFu;
  return this;
}

uint64_t ot::SecurityPolicy::SetFlags(ot::SecurityPolicy *this, char *a2, unsigned __int8 a3)
{
  if (!a3) {
    __assert_rtn("SetFlags", "key_manager.cpp", 92, "aFlagsLength > 0");
  }
  uint64_t result = ot::SecurityPolicy::SetToDefaultFlags((uint64_t)this);
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFFFE | (*a2 < 0);
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFFFD | (2 * ((*a2 & 0x40) != 0));
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFFFB | (4 * ((*a2 & 0x20) != 0));
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFFF7 | (8 * ((*a2 & 0x10) != 0));
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFFEF | (16 * ((*a2 & 4) == 0));
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFFDF | (32 * ((*a2 & 2) == 0));
  *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFFBF | (((*a2 & 1) == 0) << 6);
  if (a3 > 1uLL)
  {
    *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFF7F | ((a2[1] < 0) << 7);
    *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xFEFF | (((a2[1] & 0x40) == 0) << 8);
    *((_WORD *)this + ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 1) = *((_WORD *)this + 1) & 0xF1FF | ((a2[1] & 7) << 9);
  }
  return result;
}

void ot::SecurityPolicy::GetFlags(ot::SecurityPolicy *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  if (!a3) {
    __assert_rtn("GetFlags", "key_manager.cpp", 115, "aFlagsLength > 0");
  }
  bzero(a2, a3);
  if (*((_WORD *)this + 1)) {
    *a2 |= 0x80u;
  }
  if ((*((_WORD *)this + 1) & 2) != 0) {
    *a2 |= 0x40u;
  }
  if ((*((_WORD *)this + 1) & 4) != 0) {
    *a2 |= 0x20u;
  }
  if ((*((_WORD *)this + 1) & 8) != 0) {
    *a2 |= 0x10u;
  }
  if ((*((_WORD *)this + 1) & 0x10) == 0) {
    *a2 |= 4u;
  }
  if ((*((_WORD *)this + 1) & 0x20) == 0) {
    *a2 |= 2u;
  }
  if ((*((_WORD *)this + 1) & 0x40) == 0) {
    *a2 |= 1u;
  }
  if (a3 > 1uLL)
  {
    if ((*((_WORD *)this + 1) & 0x80) != 0) {
      a2[1] |= 0x80u;
    }
    if ((*((_WORD *)this + 1) & 0x100) == 0) {
      a2[1] |= 0x40u;
    }
    a2[1] |= 0x38u;
    a2[1] |= (*((unsigned __int16 *)this + 1) >> 9) & 7;
  }
}

ot::KeyManager *ot::KeyManager::KeyManager(ot::KeyManager *this, ot::Instance *a2)
{
  *((_DWORD *)this + 4) = 0;
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 20));
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 36));
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 7) = 0;
  *((_DWORD *)this + 18) = 624;
  *((unsigned char *)this + 76) = 0;
  ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::TimerMilliIn((ot::KeyManager *)((char *)this + 80), a2);
  ot::Mac::KeyMaterial::KeyMaterial((ot::KeyManager *)((char *)this + 120));
  *((_DWORD *)this + 34) = 0;
  ot::SecurityPolicy::SecurityPolicy((ot::KeyManager *)((char *)this + 140));
  *((unsigned char *)this + 144) &= ~1u;
  j__otPlatCryptoInit();
  ot::NetworkKey::GenerateRandom(this);
  IgnoreError();
  ot::Clearable<ot::Pskc>::Clear((void *)this + 13);
  ot::Mac::LinkFrameCounters::Reset((ot::KeyManager *)((char *)this + 52));
  return this;
}

{
  ot::KeyManager::KeyManager(this, a2);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::HandleTimer);
  return a1;
}

uint64_t ot::KeyManager::Start(ot::KeyManager *this)
{
  *((unsigned char *)this + 76) = 0;
  return ot::KeyManager::StartKeyRotationTimer(this);
}

uint64_t ot::KeyManager::StartKeyRotationTimer(ot::KeyManager *this)
{
  *((_DWORD *)this + 1ot::LinkedList<ot::Coap::Resource>::LinkedList((void *)this + 7) = 0;
  return ot::TimerMilli::Start((ot::KeyManager *)((char *)this + 80), 0x36EE80u);
}

uint64_t ot::KeyManager::Stop(ot::KeyManager *this)
{
  return ot::TimerMilli::Stop((ot::KeyManager *)((char *)this + 80));
}

uint64_t ot::KeyManager::SetPskc(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
  uint64_t result = ot::Notifier::Update<ot::Pskc>(v2, (_OWORD *)(a1 + 104), a2, 0x80000);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a1 + 144) & 0xFE | 1;
  return result;
}

uint64_t ot::Notifier::Update<ot::Pskc>(void *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::Pskc>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2 = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v6;
}

{
  return ot::Notifier::Update<ot::Pskc>(a1, a2, a3, a4);
}

BOOL ot::KeyManager::ResetFrameCounters(ot::KeyManager *this)
{
  uint64_t v21 = this;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v1);
  ot::Neighbor::SetKeySequence((uint64_t)Parent, 0);
  LinkFrameCounters = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(Parent);
  ot::Mac::LinkFrameCounters::Reset(LinkFrameCounters);
  ot::Neighbor::SetLinkAckFrameCounter((uint64_t)Parent, 0);
  ot::Neighbor::SetMleFrameCounter((uint64_t)Parent, 0);
  uint64_t v19 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  ot::RouterTable::begin(v19);
  char v18 = v3;
  char v17 = (ot::Neighbor *)ot::RouterTable::end(v19);
  while (v18 != v17)
  {
    int v16 = v18;
    ot::Neighbor::SetKeySequence((uint64_t)v18, 0);
    uint64_t v4 = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v18);
    ot::Mac::LinkFrameCounters::Reset(v4);
    ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v18, 0);
    ot::Neighbor::SetMleFrameCounter((uint64_t)v18, 0);
    char v18 = (ot::Neighbor *)((char *)v18 + 144);
  }
  uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v14 = ot::ChildTable::Iterate(v5, 5);
  uint64_t v15 = (ot::ChildTable::IteratorBuilder *)&v14;
  v13[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v14);
  v13[1] = v6;
  v12[0] = ot::ChildTable::IteratorBuilder::end(v15);
  v12[1] = v7;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v13, v12);
    if (!result) {
      break;
    }
    uint64_t v11 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v13);
    ot::Neighbor::SetKeySequence((uint64_t)v11, 0);
    uint64_t v9 = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v11);
    ot::Mac::LinkFrameCounters::Reset(v9);
    ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v11, 0);
    ot::Neighbor::SetMleFrameCounter((uint64_t)v11, 0);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v13);
  }
  return result;
}

void ot::RouterTable::begin(ot::RouterTable *this)
{
}

{
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
}

{
  ot::RouterTable::begin(this);
}

{
  ot::RouterTable::begin(this);
}

uint64_t ot::RouterTable::end(ot::RouterTable *this)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
}

{
  return ot::RouterTable::end(this);
}

{
  return ot::RouterTable::end(this);
}

uint64_t ot::KeyManager::SetNetworkKey(ot::KeyManager *this, const ot::NetworkKey *a2)
{
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  uint64_t result = ot::Notifier::Update<ot::NetworkKey>(v2, this, a2, 0x40000);
  if (!result)
  {
    uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::GetRole(v4))
    {
      uint64_t v5 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      ot::Notifier::Signal(v5, 256);
      *((_DWORD *)this + 4) = 0;
    }
    ot::KeyManager::UpdateKeyMaterial(this);
    return ot::KeyManager::ResetFrameCounters(this);
  }
  return result;
}

uint64_t ot::Notifier::Update<ot::NetworkKey>(void *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::NetworkKey>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2 = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v6;
}

{
  return ot::Notifier::Update<ot::NetworkKey>(a1, a2, a3, a4);
}

uint64_t ot::KeyManager::UpdateKeyMaterial(ot::KeyManager *this)
{
  ot::KeyManager::ComputeKeys(this, *((_DWORD *)this + 4), (ot::KeyManager::HashKeys *)v11);
  ot::KeyManager::HashKeys::GetMleKey((ot::KeyManager::HashKeys *)v11);
  ot::Mac::KeyMaterial::SetFrom((__n128 *)((char *)this + 20), v1);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v10);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v9);
  ot::Mac::KeyMaterial::KeyMaterial((ot::Mac::KeyMaterial *)&v8);
  MacKey = (__n128 *)ot::KeyManager::HashKeys::GetMacKey((ot::KeyManager::HashKeys *)v11);
  ot::Mac::KeyMaterial::SetFrom(&v10, MacKey);
  ot::KeyManager::ComputeKeys(this, *((_DWORD *)this + 4) - 1, (ot::KeyManager::HashKeys *)v11);
  uint64_t v3 = (__n128 *)ot::KeyManager::HashKeys::GetMacKey((ot::KeyManager::HashKeys *)v11);
  ot::Mac::KeyMaterial::SetFrom(&v9, v3);
  ot::KeyManager::ComputeKeys(this, *((_DWORD *)this + 4) + 1, (ot::KeyManager::HashKeys *)v11);
  uint64_t v4 = (__n128 *)ot::KeyManager::HashKeys::GetMacKey((ot::KeyManager::HashKeys *)v11);
  ot::Mac::KeyMaterial::SetFrom(&v8, v4);
  uint64_t v5 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::SetMacKey(v5, 8u, (*((unsigned char *)this + 16) & 0x7Fu) + 1, (const ot::Mac::KeyMaterial *)&v9, (const ot::Mac::KeyMaterial *)&v10, (const ot::Mac::KeyMaterial *)&v8);
}

void ot::KeyManager::ComputeKeys(ot::KeyManager *this, unsigned int a2, ot::KeyManager::HashKeys *a3)
{
  __n128 v10 = this;
  unsigned int v9 = a2;
  __n128 v8 = a3;
  ot::Crypto::HmacSha256::HmacSha256((ot::Crypto::HmacSha256 *)v7);
  ot::Crypto::Key::Set((uint64_t)v5, (const unsigned __int8 *)this, 16);
  ot::Crypto::HmacSha256::Start((ot::Crypto::HmacSha256 *)v7, (const ot::Crypto::Key *)v5);
  ot::Encoding::BigEndian::WriteUint32(v9, v6, v3);
  ot::Crypto::HmacSha256::Update<unsigned char [4]>((ot::Crypto::HmacSha256 *)v7, (uint64_t)v6);
  ot::Crypto::HmacSha256::Update<unsigned char [6]>((ot::Crypto::HmacSha256 *)v7, (uint64_t)&ot::KeyManager::kThreadString);
  ot::Crypto::HmacSha256::Finish((ot::Crypto::HmacSha256 *)v7, v8);
  ot::Crypto::HmacSha256::~HmacSha256((ot::Crypto::HmacSha256 *)v7);
}

uint64_t ot::Crypto::HmacSha256::Update<unsigned char [4]>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 4u);
}

{
  return ot::Crypto::HmacSha256::Update<unsigned char [4]>(a1, a2);
}

uint64_t ot::Crypto::HmacSha256::Update<unsigned char [6]>(ot::Crypto::HmacSha256 *a1, uint64_t a2)
{
  return ot::Crypto::HmacSha256::Update(a1, a2, 6u);
}

{
  return ot::Crypto::HmacSha256::Update<unsigned char [6]>(a1, a2);
}

uint64_t ot::KeyManager::HashKeys::GetMacKey(ot::KeyManager::HashKeys *this)
{
  return (uint64_t)this + 16;
}

{
  return ot::KeyManager::HashKeys::GetMacKey(this);
}

uint64_t ot::KeyManager::SetCurrentKeySequence(ot::KeyManager *this, int a2)
{
  if (a2 == *((_DWORD *)this + 4))
  {
    uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    return ot::Notifier::SignalIfFirst(v2, 256);
  }
  if (a2 == *((_DWORD *)this + 4) + 1)
  {
    uint64_t result = ot::Timer::IsRunning((ot::KeyManager *)((char *)this + 80));
    if (result)
    {
      if (*((unsigned char *)this + 76))
      {
        if (*((_DWORD *)this + 17) < *((_DWORD *)this + 18)) {
          return result;
        }
        ot::KeyManager::StartKeyRotationTimer(this);
      }
      *((unsigned char *)this + 76) = 1;
    }
  }
  *((_DWORD *)this + 4) = a2;
  ot::KeyManager::UpdateKeyMaterial(this);
  ot::KeyManager::SetAllMacFrameCounters(this, 0, 0);
  *((_DWORD *)this + 14) = 0;
  uint64_t v4 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v4, 256);
}

uint64_t ot::KeyManager::SetAllMacFrameCounters(ot::KeyManager *this, unsigned int a2, char a3)
{
  char v6 = a3 & 1;
  ot::Mac::LinkFrameCounters::SetAll((_DWORD *)this + 13, a2);
  uint64_t v3 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  return ot::Mac::SubMac::SetFrameCounter(v3, a2, v6 & 1);
}

uint64_t ot::KeyManager::GetTemporaryMleKey(ot::KeyManager *this, unsigned int a2)
{
  ot::KeyManager::ComputeKeys(this, a2, (ot::KeyManager::HashKeys *)v5);
  ot::KeyManager::HashKeys::GetMleKey((ot::KeyManager::HashKeys *)v5);
  ot::Mac::KeyMaterial::SetFrom((__n128 *)((char *)this + 36), v2);
  return (uint64_t)this + 36;
}

void ot::KeyManager::MacFrameCounterUsed(ot::KeyManager *this, unsigned int a2)
{
  if (ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 52)) <= a2)
  {
    ot::Mac::LinkFrameCounters::Set154((_DWORD *)this + 13, a2 + 1);
    if (ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 52)) >= *((_DWORD *)this + 15))
    {
      uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::Mle::Store(v2);
      IgnoreError();
    }
  }
}

_DWORD *ot::Mac::LinkFrameCounters::Set154(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  return ot::Mac::LinkFrameCounters::Set154(this, a2);
}

void ot::KeyManager::Increment154MacFrameCounter(ot::KeyManager *this)
{
  ot::Mac::LinkFrameCounters::Increment154((_DWORD *)this + 13);
  if (ot::Mac::LinkFrameCounters::Get154((ot::KeyManager *)((char *)this + 52)) >= *((_DWORD *)this + 15))
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::Store(v1);
    IgnoreError();
  }
}

_DWORD *ot::Mac::LinkFrameCounters::Increment154(_DWORD *this)
{
  return this;
}

{
  return ot::Mac::LinkFrameCounters::Increment154(this);
}

void ot::KeyManager::IncrementMleFrameCounter(ot::KeyManager *this)
{
  if (++*((_DWORD *)this + 14) >= *((_DWORD *)this + 16))
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::Store(v1);
    IgnoreError();
  }
}

void ot::KeyManager::SetSecurityPolicy(ot::KeyManager *this, const ot::SecurityPolicy *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)a2)
  {
    __n128 v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Update<ot::SecurityPolicy>(v8, (_DWORD *)this + 35, a2, 0x100000);
    IgnoreError();
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"KeyManager", "Key Rotation Time too small: %d", a3, a4, a5, a6, a7, a8, *(_WORD *)a2);
  }
}

uint64_t ot::Notifier::Update<ot::SecurityPolicy>(void *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v6 = 0;
  if (ot::Equatable<ot::SecurityPolicy>::operator==(a2, a3))
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2 = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v6;
}

{
  return ot::Notifier::Update<ot::SecurityPolicy>(a1, a2, a3, a4);
}

__n128 ot::KeyManager::GetNetworkKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 ot::KeyManager::GetPskc(uint64_t a1, __n128 *a2)
{
  __n128 result = *(__n128 *)(a1 + 104);
  *a2 = result;
  return result;
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::end(uint64_t a1)
{
  return a1 + 144 * *(unsigned __int8 *)(a1 + 4608);
}

{
  return a1 + 144 * *(unsigned __int8 *)(a1 + 4608);
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::end(a1);
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::end(a1);
}

uint64_t ot::TimerMilliIn<ot::KeyManager,&ot::KeyManager::HandleKeyRotationTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
  return ot::KeyManager::HandleKeyRotationTimer(v2);
}

ot::LinkMetrics::Initiator *ot::LinkMetrics::Initiator::Initiator(ot::LinkMetrics::Initiator *this, ot::Instance *a2)
{
  return this;
}

{
  ot::LinkMetrics::Initiator::Initiator(this, a2);
  return this;
}

uint64_t ot::LinkMetrics::Initiator::Query(ot::LinkMetrics::Initiator *this, const ot::Ip6::Address *a2, char a3, const ot::LinkMetrics::Metrics *a4)
{
  uint64_t v15 = this;
  char v14 = a2;
  char v13 = a3;
  uint64_t v12 = a4;
  unsigned int Neighbor = 0;
  __n128 v10 = 0;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(this, a2, &v10);
  if (!Neighbor)
  {
    ot::Clearable<ot::LinkMetrics::Initiator::QueryInfo>::Clear((uint64_t)&v7);
    char v7 = v13;
    if (v12) {
      char v9 = ot::LinkMetrics::Metrics::ConvertToTypeIds(v12, v8);
    }
    if (v13 && v9)
    {
      return 7;
    }
    else
    {
      uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      return ot::Mle::Mle::SendDataRequestForLinkMetricsReport(v4, v14, (uint64_t)&v7);
    }
  }
  return Neighbor;
}

uint64_t ot::LinkMetrics::Initiator::FindNeighbor(ot::LinkMetrics::Initiator *this, const ot::Ip6::Address *a2, ot::Neighbor **a3)
{
  uint64_t v12 = this;
  uint64_t v11 = a2;
  __n128 v10 = a3;
  unsigned int v9 = 19;
  ot::Mac::Address::Address((ot::Mac::Address *)v8);
  ot::Neighbor *v10 = 0;
  if (ot::Ip6::Address::IsLinkLocal(v11))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v11);
    ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(Iid, (ot::Mac::Address *)v8);
    uint64_t v4 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    uint64_t Neighbor = ot::NeighborTable::FindNeighbor(v4, (ot::Mac::Address *)v8, 1);
    ot::Neighbor *v10 = (ot::Neighbor *)Neighbor;
    if (*v10)
    {
      if ((unsigned __int16)ot::Neighbor::GetVersion(*v10) >= 3u) {
        return 0;
      }
      else {
        return 27;
      }
    }
  }
  return v9;
}

uint64_t ot::Clearable<ot::LinkMetrics::Initiator::QueryInfo>::Clear(uint64_t result)
{
  *(_DWORD *)__n128 result = 0;
  *(_WORD *)(result + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 0;
  return result;
}

{
  return ot::Clearable<ot::LinkMetrics::Initiator::QueryInfo>::Clear(result);
}

uint64_t ot::LinkMetrics::Initiator::AppendLinkMetricsQueryTlv(uint64_t a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v10 = a1;
  unsigned int v9 = a2;
  uint64_t v8 = a3;
  unsigned int OptionsSub = 0;
  ot::Tlv::SetType(v6, 87);
  if (*(unsigned char *)(v8 + 5)) {
    char v4 = *(unsigned char *)(v8 + 5) + 2;
  }
  else {
    char v4 = 0;
  }
  ot::Tlv::SetLength((uint64_t)v6, v4 + 3);
  unsigned int OptionsSub = ot::Message::Append<ot::Tlv>(v9, v6);
  if (!OptionsSub)
  {
    unsigned int OptionsSub = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(v9, *(unsigned char *)v8);
    if (!OptionsSub)
    {
      if (*(unsigned char *)(v8 + 5))
      {
        ot::LinkMetrics::QueryOptionsSubTlv::Init((ot::LinkMetrics::QueryOptionsSubTlv *)v5);
        ot::Tlv::SetLength((uint64_t)v5, *(unsigned char *)(v8 + 5));
        unsigned int OptionsSub = ot::Message::Append<ot::LinkMetrics::QueryOptionsSubTlv>(v9, v5);
        if (!OptionsSub) {
          return ot::Message::AppendBytes(v9, (char *)(v8 + 1), *(unsigned __int8 *)(v8 + 5));
        }
      }
    }
  }
  return OptionsSub;
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 1u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(a1, a2);
}

uint64_t ot::LinkMetrics::QueryOptionsSubTlv::Init(ot::LinkMetrics::QueryOptionsSubTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 0);
}

{
  return ot::LinkMetrics::QueryOptionsSubTlv::Init(this);
}

uint64_t ot::Message::Append<ot::LinkMetrics::QueryOptionsSubTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<ot::LinkMetrics::QueryOptionsSubTlv>(a1, a2);
}

void ot::LinkMetrics::Initiator::HandleReport(ot::LinkMetrics::Initiator *this, const ot::Message *a2, unsigned __int16 a3, __int16 a4, const ot::Ip6::Address *a5)
{
  int v67 = this;
  unsigned int v66 = a2;
  unsigned __int16 v65 = a3;
  __int16 v64 = a4;
  v63 = a5;
  int v62 = 0;
  unsigned __int16 v61 = a3;
  unsigned __int16 v60 = a3 + a4;
  char v59 = 0;
  char v58 = 0;
  unsigned __int8 v50 = 0;
  unsigned __int8 MetricsTypeId = 0;
  if (ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::IsSet(this))
  {
    ot::Clearable<ot::LinkMetrics::MetricsValues>::Clear((uint64_t)v51);
    while (v61 < (int)v60)
    {
      int v62 = ot::Message::Read<ot::Tlv>(v66, v61, v57);
      if (v62) {
        goto LABEL_40;
      }
      uint64_t v44 = v61 + 2;
      unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v57);
      if (v44 + (unint64_t)Length > v60)
      {
        int v62 = 6;
        goto LABEL_40;
      }
      int Type = ot::Tlv::GetType((ot::Tlv *)v57);
      if (Type)
      {
        if (Type == 5)
        {
          if (v59 & 1) != 0 || (v58)
          {
            int v62 = 2;
            goto LABEL_40;
          }
          int v62 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(v66, v61, &v50);
          if (v62) {
            goto LABEL_40;
          }
          char v59 = 1;
        }
      }
      else
      {
        if (v59)
        {
          int v62 = 2;
          goto LABEL_40;
        }
        int v62 = ot::Message::Read(v66, v61, v56, 4u);
        if (v62) {
          goto LABEL_40;
        }
        if (!ot::LinkMetrics::ReportSubTlv::IsValid((ot::LinkMetrics::ReportSubTlv *)v56))
        {
          int v62 = 6;
          goto LABEL_40;
        }
        char v58 = 1;
        unsigned __int8 MetricsTypeId = ot::LinkMetrics::ReportSubTlv::GetMetricsTypeId((ot::LinkMetrics::ReportSubTlv *)v56);
        if (!ot::LinkMetrics::TypeId::IsExtended((ot::LinkMetrics::TypeId *)MetricsTypeId))
        {
          if (ot::LinkMetrics::TypeId::GetValueLength((ot::LinkMetrics::TypeId *)MetricsTypeId) > 1uLL)
          {
            int v62 = ot::Message::Read<ot::LinkMetrics::ReportSubTlv>(v66, v61, v56);
            if (v62) {
              goto LABEL_40;
            }
          }
          switch(MetricsTypeId)
          {
            case 9u:
              v51[0] = v51[0] & 0xFD | 2;
              char MetricsValue8 = ot::LinkMetrics::ReportSubTlv::GetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v56);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", " - LQI: %u (Exponential Moving Average)", v13, v14, v15, v16, v17, v18, MetricsValue8);
              break;
            case 0xAu:
              v51[0] = v51[0] & 0xFB | 4;
              unsigned __int8 v19 = ot::LinkMetrics::ReportSubTlv::GetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v56);
              char v54 = ot::LinkMetrics::ScaleRawValueToLinkMargin((ot::LinkMetrics *)v19);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", " - Margin: %u (dB) (Exponential Moving Average)", v20, v21, v22, v23, v24, v25, v54);
              break;
            case 0xBu:
              v51[0] = v51[0] & 0xF7 | 8;
              unsigned __int8 v26 = ot::LinkMetrics::ReportSubTlv::GetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v56);
              char v55 = ot::LinkMetrics::ScaleRawValueToRssi((ot::LinkMetrics *)v26);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", " - RSSI: %u (dBm) (Exponential Moving Average)", v27, v28, v29, v30, v31, v32, v55);
              break;
            case 0x40u:
              v51[0] = v51[0] & 0xFE | 1;
              unsigned int MetricsValue32 = ot::LinkMetrics::ReportSubTlv::GetMetricsValue32((ot::LinkMetrics::ReportSubTlv *)v56);
              char v6 = ot::ToUlong(MetricsValue32);
              ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", " - PDU Counter: %lu (Count/Summation)", v7, v8, v9, v10, v11, v12, v6);
              break;
          }
        }
      }
      unsigned __int8 v33 = ot::Tlv::GetLength((ot::Tlv *)v57);
      v61 += v33 + 2;
    }
    if (v59 & 1) != 0 || (v58)
    {
      char v48 = v63;
      if (v59) {
        int v42 = 0;
      }
      else {
        int v42 = v51;
      }
      unsigned __int8 v47 = v42;
      if (v59) {
        unsigned __int8 v41 = v50;
      }
      else {
        unsigned __int8 v41 = 0;
      }
      unsigned __int8 v46 = v41;
      ot::Callback<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,ot::LinkMetrics::MetricsValues *,ot::LinkMetrics::Status>((uint64_t)this, &v48, &v47, &v46);
    }
  }
LABEL_40:
  char v34 = ot::ErrorToString(v62);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", "HandleReport, error:%s", v35, v36, v37, v38, v39, v40, v34);
}

BOOL ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *)>::IsSet(a1);
}

uint64_t ot::Clearable<ot::LinkMetrics::MetricsValues>::Clear(uint64_t result)
{
  *(void *)__n128 result = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

{
  return ot::Clearable<ot::LinkMetrics::MetricsValues>::Clear(result);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(ot::Tlv *a1, unsigned __int16 a2, unsigned char *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(a1, a2, a3);
}

BOOL ot::LinkMetrics::ReportSubTlv::IsValid(ot::LinkMetrics::ReportSubTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2u;
}

{
  return ot::LinkMetrics::ReportSubTlv::IsValid(this);
}

uint64_t ot::LinkMetrics::ReportSubTlv::GetMetricsTypeId(ot::LinkMetrics::ReportSubTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::LinkMetrics::ReportSubTlv::GetMetricsTypeId(this);
}

BOOL ot::LinkMetrics::TypeId::IsExtended(ot::LinkMetrics::TypeId *this)
{
  return (char)this < 0;
}

{
  return ot::LinkMetrics::TypeId::IsExtended(this);
}

uint64_t ot::LinkMetrics::TypeId::GetValueLength(ot::LinkMetrics::TypeId *this)
{
  unsigned __int8 v1 = 4;
  if ((this & 0x40) == 0) {
    return 1;
  }
  return v1;
}

{
  return ot::LinkMetrics::TypeId::GetValueLength(this);
}

uint64_t ot::Message::Read<ot::LinkMetrics::ReportSubTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 7u);
}

{
  return ot::Message::Read<ot::LinkMetrics::ReportSubTlv>(a1, a2, a3);
}

uint64_t ot::LinkMetrics::ReportSubTlv::GetMetricsValue32(ot::LinkMetrics::ReportSubTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 3));
}

{
  return ot::LinkMetrics::ReportSubTlv::GetMetricsValue32(this);
}

uint64_t ot::LinkMetrics::ReportSubTlv::GetMetricsValue8(ot::LinkMetrics::ReportSubTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::LinkMetrics::ReportSubTlv::GetMetricsValue8(this);
}

uint64_t ot::LinkMetrics::ScaleRawValueToLinkMargin(ot::LinkMetrics *this)
{
  return ot::DivideAndRoundToClosest<unsigned short>(130 * this, 0xFFu);
}

uint64_t ot::LinkMetrics::ScaleRawValueToRssi(ot::LinkMetrics *this)
{
  unsigned int v2 = ot::DivideAndRoundToClosest<int>(130 * this, 255) - 130;
  return (char)ot::ClampToInt8<int>(v2);
}

uint64_t ot::Callback<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,ot::LinkMetrics::MetricsValues *,ot::LinkMetrics::Status>(uint64_t a1, void *a2, void *a3, unsigned __int8 *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otIp6Address const*,otLinkMetricsValues const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,ot::LinkMetrics::MetricsValues *,ot::LinkMetrics::Status>(a1, a2, a3, a4);
}

uint64_t ot::LinkMetrics::Initiator::SendMgmtRequestForwardTrackingSeries(ot::LinkMetrics::Initiator *this, __n128 *a2, char a3, const ot::LinkMetrics::SeriesFlags *a4, const ot::LinkMetrics::Metrics *a5)
{
  unsigned __int8 v26 = this;
  uint64_t v25 = a2;
  char v24 = a3;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  unsigned int Neighbor = 0;
  uint64_t v20 = 0;
  char v19 = 0;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(this, (const ot::Ip6::Address *)a2, &v20);
  if (!Neighbor)
  {
    if (v24)
    {
      ot::LinkMetrics::FwdProbingRegSubTlv::Init((ot::LinkMetrics::FwdProbingRegSubTlv *)v18);
      ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesId((uint64_t)v18, v24);
      char v5 = ot::LinkMetrics::SeriesFlags::ConvertToMask(v23);
      ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesFlagsMask((uint64_t)v18, v5);
      if (v22)
      {
        uint64_t v16 = v22;
        TypeIds = (unsigned __int8 *)ot::LinkMetrics::FwdProbingRegSubTlv::GetTypeIds((ot::LinkMetrics::FwdProbingRegSubTlv *)v18);
        char v19 = ot::LinkMetrics::Metrics::ConvertToTypeIds(v16, TypeIds);
      }
      ot::Tlv::SetLength((uint64_t)v18, v19 + 2);
      uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned int Neighbor = ot::Mle::Mle::SendLinkMetricsManagementRequest(v7, v25, (const ot::Tlv *)v18);
    }
    else
    {
      unsigned int Neighbor = 7;
    }
  }
  char v8 = ot::ErrorToString(Neighbor);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", "SendMgmtRequestForwardTrackingSeries, error:%s, Series ID:%u", v9, v10, v11, v12, v13, v14, v8);
  return Neighbor;
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::Init(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return ot::LinkMetrics::FwdProbingRegSubTlv::Init(this);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesId(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesId(this, a2);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesFlagsMask(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 3) = a2;
  return this;
}

{
  return ot::LinkMetrics::FwdProbingRegSubTlv::SetSeriesFlagsMask(this, a2);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::GetTypeIds(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return (uint64_t)this + 4;
}

{
  return ot::LinkMetrics::FwdProbingRegSubTlv::GetTypeIds(this);
}

uint64_t ot::LinkMetrics::Initiator::SendMgmtRequestEnhAckProbing(ot::LinkMetrics::Initiator *a1, __n128 *a2, char a3, const ot::LinkMetrics::Metrics *a4)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  char v15 = a3;
  uint64_t v14 = a4;
  unsigned int Neighbor = 0;
  uint64_t v12 = 0;
  char v11 = 0;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(a1, (const ot::Ip6::Address *)a2, &v12);
  if (!Neighbor)
  {
    if (v15 || !v14)
    {
      ot::LinkMetrics::EnhAckConfigSubTlv::Init((ot::LinkMetrics::EnhAckConfigSubTlv *)v10);
      ot::LinkMetrics::EnhAckConfigSubTlv::SetEnhAckFlags((uint64_t)v10, v15);
      if (v14)
      {
        uint64_t v7 = v14;
        TypeIds = (unsigned __int8 *)ot::LinkMetrics::EnhAckConfigSubTlv::GetTypeIds((ot::LinkMetrics::EnhAckConfigSubTlv *)v10);
        char v11 = ot::LinkMetrics::Metrics::ConvertToTypeIds(v7, TypeIds);
      }
      ot::Tlv::SetLength((uint64_t)v10, v11 + 1);
      char v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
      unsigned int Neighbor = ot::Mle::Mle::SendLinkMetricsManagementRequest(v5, v16, (const ot::Tlv *)v10);
      if (v14)
      {
        ot::Neighbor::SetEnhAckProbingMetrics((uint64_t)v12, v14);
      }
      else
      {
        ot::Clearable<ot::LinkMetrics::Metrics>::Clear(&v9);
        ot::Neighbor::SetEnhAckProbingMetrics((uint64_t)v12, (const ot::LinkMetrics::Metrics *)&v9);
      }
    }
    else
    {
      return 7;
    }
  }
  return Neighbor;
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::Init(ot::LinkMetrics::EnhAckConfigSubTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 1);
}

{
  return ot::LinkMetrics::EnhAckConfigSubTlv::Init(this);
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::SetEnhAckFlags(uint64_t result, char a2)
{
  *(unsigned char *)(result + ot::Tlv::SetType(this, 2) = a2;
  return result;
}

{
  return ot::LinkMetrics::EnhAckConfigSubTlv::SetEnhAckFlags(result, a2);
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::GetTypeIds(ot::LinkMetrics::EnhAckConfigSubTlv *this)
{
  return (uint64_t)this + 3;
}

{
  return ot::LinkMetrics::EnhAckConfigSubTlv::GetTypeIds(this);
}

uint64_t ot::Neighbor::SetEnhAckProbingMetrics(uint64_t this, const ot::LinkMetrics::Metrics *a2)
{
  *(unsigned char *)(this + 6ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = *(unsigned char *)a2;
  return this;
}

{
  return ot::Neighbor::SetEnhAckProbingMetrics(this, a2);
}

unsigned char *ot::Clearable<ot::LinkMetrics::Metrics>::Clear(unsigned char *result)
{
  *__n128 result = 0;
  return result;
}

{
  return ot::Clearable<ot::LinkMetrics::Metrics>::Clear(result);
}

uint64_t ot::LinkMetrics::Initiator::HandleManagementResponse(ot::LinkMetrics::Initiator *this, const ot::Message *a2, const ot::Ip6::Address *a3)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  char v15 = a3;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v13 = 0;
  unsigned __int16 v12 = 0;
  unsigned __int16 v11 = 0;
  unsigned __int8 v10 = 0;
  char v9 = 0;
  if (ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::IsSet((void *)this + 2))
  {
    TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(v16, (const ot::Message *)0x58, &v13, &v11, v3);
    if (!TlvValueOffset)
    {
      unsigned __int16 v12 = v13 + v11;
      while (v13 < (int)v12)
      {
        TlvValueunsigned __int16 Offset = ot::Message::Read<ot::Tlv>(v16, v13, v8);
        if (TlvValueOffset) {
          return TlvValueOffset;
        }
        if (ot::Tlv::GetType((ot::Tlv *)v8) == 5)
        {
          if (v9) {
            return 6;
          }
          TlvValueunsigned __int16 Offset = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(v16, v13, &v10);
          if (TlvValueOffset) {
            return TlvValueOffset;
          }
          char v9 = 1;
        }
        unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v8);
        v13 += Length + 2;
      }
      if (v9)
      {
        uint64_t v7 = v15;
        ot::Callback<void (*)(otIp6Address const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,unsigned char &>((uint64_t)this + 16, &v7, &v10);
      }
      else
      {
        return 6;
      }
    }
  }
  return TlvValueOffset;
}

BOOL ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otIp6Address const*,unsigned char,void *)>::IsSet(a1);
}

uint64_t ot::Callback<void (*)(otIp6Address const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,unsigned char &>(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(void, void, void))a1)(*a2, *a3, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otIp6Address const*,unsigned char,void *),(ot::CallbackContextPosition)1>::Invoke<ot::Ip6::Address const*,unsigned char &>(a1, a2, a3);
}

uint64_t ot::LinkMetrics::Initiator::SendLinkProbe(ot::LinkMetrics::Initiator *this, const ot::Ip6::Address *a2, unsigned __int8 a3, unsigned __int8 a4)
{
  char v19 = this;
  uint64_t v18 = a2;
  unsigned __int8 v17 = a3;
  unsigned __int8 v16 = a4;
  unsigned int Neighbor = 0;
  uint64_t v14 = 0;
  unsigned int Neighbor = ot::LinkMetrics::Initiator::FindNeighbor(this, a2, &v14);
  if (!Neighbor)
  {
    if (v16 <= 0x40u && v17 && v17 != 255)
    {
      char v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned int Neighbor = ot::Mle::Mle::SendLinkProbe(v4, (__n128 *)v18, v17, v20, v16);
    }
    else
    {
      unsigned int Neighbor = 7;
    }
  }
  char v5 = ot::ErrorToString(Neighbor);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", "SendLinkProbe, error:%s, Series ID:%u", v6, v7, v8, v9, v10, v11, v5);
  return Neighbor;
}

uint64_t ot::LinkMetrics::Initiator::ProcessEnhAckIeData(ot::LinkMetrics::Initiator *this, const unsigned __int8 *a2, unsigned __int8 a3, const ot::Neighbor *a4)
{
  uint64_t v22 = this;
  uint64_t v21 = a2;
  unsigned __int8 v20 = a3;
  char v19 = a4;
  unsigned __int8 v17 = 0;
  uint64_t result = ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::IsSet((void *)this + 4);
  if (result)
  {
    EnhAckProbingMetrics = (const ot::LinkMetrics::Metrics *)ot::Neighbor::GetEnhAckProbingMetrics(v19);
    ot::LinkMetrics::MetricsValues::SetMetrics(v18, EnhAckProbingMetrics);
    ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v18);
    if ((*v6 & 2) != 0 && v17 < (int)v20)
    {
      uint64_t v7 = v17++;
      unsigned char v18[8] = v21[v7];
    }
    ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v18);
    if ((*v8 & 4) != 0 && v17 < (int)v20)
    {
      uint64_t v9 = v17++;
      v18[9] = ot::LinkMetrics::ScaleRawValueToLinkMargin((ot::LinkMetrics *)v21[v9]);
    }
    ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v18);
    if ((*v10 & 8) != 0 && v17 < (int)v20)
    {
      uint64_t v11 = v17++;
      v18[10] = ot::LinkMetrics::ScaleRawValueToRssi((ot::LinkMetrics *)v21[v11]);
    }
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v19);
    ot::Neighbor::GetExtAddress(v19);
    uint64_t v15 = v12;
    uint64_t v14 = v18;
    return ot::Callback<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short,ot::Mac::ExtAddress const*,ot::LinkMetrics::MetricsValues *>((uint64_t)this + 32, &Rloc16, &v15, &v14);
  }
  return result;
}

BOOL ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *)>::IsSet(a1);
}

unsigned char *ot::LinkMetrics::MetricsValues::SetMetrics(unsigned char *this, const ot::LinkMetrics::Metrics *a2)
{
  *this = *(unsigned char *)a2;
  return this;
}

{
  return ot::LinkMetrics::MetricsValues::SetMetrics(this, a2);
}

uint64_t ot::Neighbor::GetEnhAckProbingMetrics(ot::Neighbor *this)
{
  return (uint64_t)this + 64;
}

{
  return ot::Neighbor::GetEnhAckProbingMetrics(this);
}

uint64_t ot::Callback<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short,ot::Mac::ExtAddress const*,ot::LinkMetrics::MetricsValues *>(uint64_t a1, unsigned __int16 *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(unsigned short,otExtAddress const*,otLinkMetricsValues const*,void *),(ot::CallbackContextPosition)1>::Invoke<unsigned short,ot::Mac::ExtAddress const*,ot::LinkMetrics::MetricsValues *>(a1, a2, a3, a4);
}

ot::LinkMetrics::Subject *ot::LinkMetrics::Subject::Subject(ot::LinkMetrics::Subject *this, ot::Instance *a2)
{
  return this;
}

{
  ot::LinkMetrics::Subject::Subject(this, a2);
  return this;
}

uint64_t *ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool(uint64_t *a1)
{
  return a1;
}

{
  uint64_t *i;

  ot::LinkedList<ot::Coap::Resource>::LinkedList(a1);
  for (unint64_t i = a1 + 1; i != a1 + 193; i += 3)
    ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push(a1, i);
  return a1;
}

uint64_t ot::LinkMetrics::Subject::AppendReport(ot::LinkMetrics::Subject *this, ot::Message *a2, const ot::Message *a3, ot::Neighbor *a4)
{
  unsigned __int8 v47 = this;
  unsigned __int8 v46 = a2;
  unsigned int v45 = a3;
  uint64_t v44 = a4;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int8 v41 = 0;
  char v40 = 0;
  unsigned __int16 v39 = 0;
  unsigned __int16 Length = 0;
  unsigned __int16 v37 = 0;
  ot::Clearable<ot::LinkMetrics::MetricsValues>::Clear((uint64_t)v32);
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(v45, (const ot::Message *)0x57, &Length, &v39, v4);
  if (!TlvValueOffset)
  {
    unsigned __int16 v37 = Length + v39;
    while (Length < (int)v37)
    {
      TlvValueunsigned __int16 Offset = ot::Message::Read<ot::Tlv>(v45, Length, v42);
      if (TlvValueOffset) {
        goto LABEL_26;
      }
      int Type = ot::Tlv::GetType((ot::Tlv *)v42);
      if (Type == 1)
      {
        TlvValueunsigned __int16 Offset = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(v45, Length, &v41);
        if (TlvValueOffset) {
          goto LABEL_26;
        }
        char v40 = 1;
      }
      else if (Type == 2)
      {
        uint64_t v28 = v45;
        unsigned __int16 v26 = Length + 2;
        int v25 = Length;
        int v27 = v25 + ot::Tlv::GetSize((ot::Tlv *)v42);
        ot::LinkMetrics::MetricsValues::GetMetrics((ot::LinkMetrics::MetricsValues *)v32);
        TlvValueunsigned __int16 Offset = ot::LinkMetrics::Subject::ReadTypeIdsFromMessage(v28, (const ot::Message *)v26, v27, v5, v6);
        if (TlvValueOffset) {
          goto LABEL_26;
        }
      }
      __int16 Size = ot::Tlv::GetSize((ot::Tlv *)v42);
      Length += Size;
    }
    if (v40)
    {
      unsigned __int16 Length = ot::Message::GetLength(v46);
      ot::Tlv::SetType(v42, 89);
      TlvValueunsigned __int16 Offset = ot::Message::Append<ot::Tlv>(v46, v42);
      if (!TlvValueOffset)
      {
        if (v41)
        {
          ot::Neighbor::GetForwardTrackingSeriesInfo(v44, (ot::LinkMetrics::SeriesInfo *)&v41);
          uint64_t v31 = v10;
          if (v10)
          {
            if (ot::LinkMetrics::SeriesInfo::GetPduCount(v10))
            {
              LinkMetrics = (const ot::LinkMetrics::Metrics *)ot::LinkMetrics::SeriesInfo::GetLinkMetrics(v31);
              ot::LinkMetrics::MetricsValues::SetMetrics(v32, LinkMetrics);
              int PduCount = ot::LinkMetrics::SeriesInfo::GetPduCount(v31);
              AverageLqunint64_t i = ot::LinkMetrics::SeriesInfo::GetAverageLqi(v31);
              uint64_t v23 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              char AverageRss = ot::LinkMetrics::SeriesInfo::GetAverageRss(v31);
              char v35 = ot::Mac::Mac::ComputeLinkMargin(v23, AverageRss);
              char v36 = ot::LinkMetrics::SeriesInfo::GetAverageRss(v31);
              TlvValueunsigned __int16 Offset = ot::LinkMetrics::Subject::AppendReportSubTlvToMessage(v46, (ot::Message *)v32, v13);
              if (TlvValueOffset) {
                goto LABEL_26;
              }
            }
            else
            {
              TlvValueunsigned __int16 Offset = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(v46, 4u);
              if (TlvValueOffset) {
                goto LABEL_26;
              }
            }
          }
          else
          {
            TlvValueunsigned __int16 Offset = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(v46, 3u);
            if (TlvValueOffset) {
              goto LABEL_26;
            }
          }
        }
        else
        {
          LOBYTE(PduCount) = ot::Message::GetPsduCount(v45);
          int PduCount = PduCount;
          AverageLqunint64_t i = ot::Message::GetAverageLqi(v45);
          char v24 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
          char v8 = ot::Message::GetAverageRss(v45);
          char v35 = ot::Mac::Mac::ComputeLinkMargin(v24, v8);
          char v36 = ot::Message::GetAverageRss(v45);
          TlvValueunsigned __int16 Offset = ot::LinkMetrics::Subject::AppendReportSubTlvToMessage(v46, (ot::Message *)v32, v9);
          if (TlvValueOffset) {
            goto LABEL_26;
          }
        }
        __int16 v14 = ot::Message::GetLength(v46);
        unsigned __int16 v39 = v14 - Length - 2;
        ot::Tlv::SetLength((uint64_t)v42, v14 - Length - 2);
        ot::Message::Write<ot::Tlv>(v46, Length, v42);
      }
    }
    else
    {
      TlvValueunsigned __int16 Offset = 6;
    }
  }
LABEL_26:
  char v15 = ot::ErrorToString(TlvValueOffset);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"LinkMetrics", "AppendReport, error:%s", v16, v17, v18, v19, v20, v21, v15);
  return TlvValueOffset;
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(ot::Tlv *a1, unsigned __int16 a2, unsigned char *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(a1, a2, a3);
}

uint64_t ot::LinkMetrics::Subject::ReadTypeIdsFromMessage(ot::LinkMetrics::Subject *this, const ot::Message *a2, unsigned __int16 a3, unsigned char *a4, ot::LinkMetrics::Metrics *a5)
{
  uint64_t v9 = this;
  __int16 v8 = (__int16)a2;
  unsigned __int16 v7 = a3;
  *(void *)&v6[7] = a4;
  *(_DWORD *)&v6[3] = 0;
  ot::Clearable<ot::LinkMetrics::Metrics>::Clear(a4);
  for (*(_WORD *)&v6[1] = v8; *(unsigned __int16 *)&v6[1] < (int)v7; ++*(_WORD *)&v6[1])
  {
    v6[0] = 0;
    if (ot::Message::Read<unsigned char>(v9, *(unsigned __int16 *)&v6[1], v6)) {
      break;
    }
    switch(v6[0])
    {
      case 9:
        if ((**(unsigned char **)&v6[7] & 2) != 0)
        {
          *(_DWORD *)&v6[3] = 6;
          return *(unsigned int *)&v6[3];
        }
        **(unsigned char **)&v6[7] = **(unsigned char **)&v6[7] & 0xFD | 2;
        break;
      case 0xA:
        if ((**(unsigned char **)&v6[7] & 4) != 0)
        {
          *(_DWORD *)&v6[3] = 6;
          return *(unsigned int *)&v6[3];
        }
        **(unsigned char **)&v6[7] = **(unsigned char **)&v6[7] & 0xFB | 4;
        break;
      case 0xB:
        if ((**(unsigned char **)&v6[7] & 8) != 0)
        {
          *(_DWORD *)&v6[3] = 6;
          return *(unsigned int *)&v6[3];
        }
        **(unsigned char **)&v6[7] = **(unsigned char **)&v6[7] & 0xF7 | 8;
        break;
      case 0x40:
        if (**(unsigned char **)&v6[7])
        {
          *(_DWORD *)&v6[3] = 6;
          return *(unsigned int *)&v6[3];
        }
        **(unsigned char **)&v6[7] = **(unsigned char **)&v6[7] & 0xFE | 1;
        break;
      default:
        if (ot::LinkMetrics::TypeId::IsExtended((ot::LinkMetrics::TypeId *)v6[0])) {
          ++*(_WORD *)&v6[1];
        }
        else {
          **(unsigned char **)&v6[7] = **(unsigned char **)&v6[7] & 0xEF | 0x10;
        }
        break;
    }
  }
  return *(unsigned int *)&v6[3];
}

uint64_t ot::Message::GetPsduCount(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::LqiAverager::GetCount((ot::LqiAverager *)(Metadata + 58));
}

{
  return ot::Message::GetPsduCount(this);
}

uint64_t ot::Message::GetAverageLqi(ot::Message *this)
{
  uint64_t Metadata = ot::Buffer::GetMetadata(this);
  return ot::LqiAverager::GetAverage((ot::LqiAverager *)(Metadata + 58));
}

{
  return ot::Message::GetAverageLqi(this);
}

uint64_t ot::LinkMetrics::Subject::AppendReportSubTlvToMessage(ot::LinkMetrics::Subject *this, ot::Message *a2, const ot::LinkMetrics::MetricsValues *a3)
{
  uint64_t v9 = this;
  __int16 v8 = a2;
  unsigned int v7 = 0;
  ot::LinkMetrics::ReportSubTlv::Init((ot::LinkMetrics::ReportSubTlv *)v6);
  if ((*(unsigned char *)v8 & 1) == 0
    || (ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 64),
        ot::LinkMetrics::ReportSubTlv::SetMetricsValue32((ot::LinkMetrics::ReportSubTlv *)v6, *((_DWORD *)v8 + 1)),
        (unsigned int v7 = ot::Tlv::AppendTo((ot::Tlv *)v6, v9)) == 0))
  {
    if ((*(unsigned char *)v8 & 2) == 0
      || (ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 9),
          ot::LinkMetrics::ReportSubTlv::SetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v6, *((unsigned char *)v8 + 8)),
          (unsigned int v7 = ot::Tlv::AppendTo((ot::Tlv *)v6, v9)) == 0))
    {
      if ((*(unsigned char *)v8 & 4) == 0
        || (ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 10),
            char v3 = ot::LinkMetrics::ScaleLinkMarginToRawValue((ot::LinkMetrics *)*((unsigned __int8 *)v8 + 9)),
            ot::LinkMetrics::ReportSubTlv::SetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v6, v3),
            (unsigned int v7 = ot::Tlv::AppendTo((ot::Tlv *)v6, v9)) == 0))
      {
        if ((*(unsigned char *)v8 & 8) != 0)
        {
          ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId((uint64_t)v6, 11);
          char v4 = ot::LinkMetrics::ScaleRssiToRawValue((ot::LinkMetrics *)*((char *)v8 + 10));
          ot::LinkMetrics::ReportSubTlv::SetMetricsValue8((ot::LinkMetrics::ReportSubTlv *)v6, v4);
          return ot::Tlv::AppendTo((ot::Tlv *)v6, v9);
        }
      }
    }
  }
  return v7;
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 5u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned char>>(a1, a2);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetPduCount(ot::LinkMetrics::SeriesInfo *this)
{
  return *((unsigned int *)this + 4);
}

{
  return ot::LinkMetrics::SeriesInfo::GetPduCount(this);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetLinkMetrics(ot::LinkMetrics::SeriesInfo *this)
{
  return (uint64_t)this + 10;
}

{
  return ot::LinkMetrics::SeriesInfo::GetLinkMetrics(this);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetAverageLqi(ot::LinkMetrics::SeriesInfo *this)
{
  return ot::LqiAverager::GetAverage((ot::LinkMetrics::SeriesInfo *)((char *)this + 14));
}

{
  return ot::LinkMetrics::SeriesInfo::GetAverageLqi(this);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetAverageRss(ot::LinkMetrics::SeriesInfo *this)
{
  return (char)ot::RssAverager::GetAverage((ot::LinkMetrics::SeriesInfo *)((char *)this + 12));
}

{
  return ot::LinkMetrics::SeriesInfo::GetAverageRss(this);
}

uint64_t ot::Message::Write<ot::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return ot::Message::Write<ot::Tlv>(a1, a2, a3);
}

uint64_t ot::LinkMetrics::Subject::HandleManagementRequest(ot::LinkMetrics::Subject *a1, ot::Message *a2, ot::Neighbor *a3, unsigned char *a4, unsigned __int16 *a5)
{
  uint64_t v31 = a1;
  uint64_t v30 = a2;
  uint64_t v29 = a3;
  uint64_t v28 = a4;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v26 = 0;
  unsigned __int16 v25 = 0;
  unsigned __int16 v24 = 0;
  unsigned __int16 v23 = 0;
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)0x58, &v26, &v23, a5);
  if (TlvValueOffset) {
    return TlvValueOffset;
  }
  unsigned __int16 v25 = v26 + v23;
  ot::Tlv::SetLength((uint64_t)v22, 0);
  ot::Tlv::SetLength((uint64_t)v21, 0);
  while (v26 < (int)v25)
  {
    TlvValueunsigned __int16 Offset = ot::Message::Read<ot::Tlv>(v30, v26, v19);
    if (TlvValueOffset) {
      return TlvValueOffset;
    }
    int v15 = v26;
    int Size = ot::Tlv::GetSize((ot::Tlv *)v19);
    if (v15 + Size > v25) {
      return 6;
    }
    unsigned __int16 v13 = v26;
    unsigned __int16 v24 = v13 + ot::Tlv::GetSize((ot::Tlv *)v19);
    int Type = ot::Tlv::GetType((ot::Tlv *)v19);
    if (Type == 3)
    {
      uint64_t v17 = v22;
      unsigned __int16 v18 = 4;
    }
    else
    {
      if (Type != 7) {
        goto LABEL_20;
      }
      uint64_t v17 = v21;
      unsigned __int16 v18 = 3;
    }
    if (ot::Tlv::GetLength((ot::Tlv *)v22)) {
      return 6;
    }
    if (ot::Tlv::GetLength((ot::Tlv *)v21)) {
      return 6;
    }
    if (ot::Tlv::GetSize((ot::Tlv *)v19) < v18) {
      return 6;
    }
    TlvValueunsigned __int16 Offset = ot::Message::Read(v30, v26, v17, v18);
    if (TlvValueOffset) {
      return TlvValueOffset;
    }
    TlvValueunsigned __int16 Offset = ot::LinkMetrics::Subject::ReadTypeIdsFromMessage(v30, (const ot::Message *)(unsigned __int16)(v26 + v18), v24, &v20, v6);
    if (TlvValueOffset) {
      return TlvValueOffset;
    }
LABEL_20:
    unsigned __int16 v26 = v24;
  }
  if (ot::Tlv::GetLength((ot::Tlv *)v22))
  {
    unsigned __int8 SeriesId = ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesId((ot::LinkMetrics::FwdProbingRegSubTlv *)v22);
    char SeriesFlagsMask = ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesFlagsMask((ot::LinkMetrics::FwdProbingRegSubTlv *)v22);
    char v8 = ot::LinkMetrics::Subject::ConfigureForwardTrackingSeries(a1, SeriesId, SeriesFlagsMask, (const ot::LinkMetrics::Metrics *)&v20, v29);
    unsigned char *v28 = v8;
  }
  if (ot::Tlv::GetLength((ot::Tlv *)v21))
  {
    char EnhAckFlags = ot::LinkMetrics::EnhAckConfigSubTlv::GetEnhAckFlags((ot::LinkMetrics::EnhAckConfigSubTlv *)v21);
    char v10 = ot::LinkMetrics::Subject::ConfigureEnhAckProbing(a1, EnhAckFlags, (const ot::LinkMetrics::Metrics *)&v20, v29);
    unsigned char *v28 = v10;
  }
  return TlvValueOffset;
}

uint64_t ot::LinkMetrics::Subject::ConfigureForwardTrackingSeries(ot::LinkMetrics::Subject *this, unsigned __int8 a2, char a3, const ot::LinkMetrics::Metrics *a4, ot::Neighbor *a5)
{
  int v15 = this;
  unsigned __int8 v14 = a2;
  unsigned __int8 v10 = 0;
  if (a2)
  {
    if (a3)
    {
      ot::Neighbor::GetForwardTrackingSeriesInfo(a5, (ot::LinkMetrics::SeriesInfo *)&v14);
      if (v5)
      {
        return 2;
      }
      else
      {
        char v8 = (ot::LinkMetrics::SeriesInfo *)ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Allocate((uint64_t *)this + 1);
        if (v8)
        {
          ot::LinkMetrics::SeriesInfo::Init(v8, v14, a3, a4);
          ot::Neighbor::AddForwardTrackingSeriesInfo(a5, v8);
        }
        else
        {
          return 1;
        }
      }
    }
    else if (v14 == 255)
    {
      ot::Neighbor::RemoveAllForwardTrackingSeriesInfo(a5);
    }
    else
    {
      uint64_t v9 = (void *)ot::Neighbor::RemoveForwardTrackingSeriesInfo(a5, (ot::LinkMetrics::SeriesInfo *)&v14);
      if (v9) {
        ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Free((uint64_t *)this + 1, v9);
      }
      else {
        return 3;
      }
    }
  }
  else
  {
    return -2;
  }
  return v10;
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesId(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesId(this);
}

uint64_t ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesFlagsMask(ot::LinkMetrics::FwdProbingRegSubTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::LinkMetrics::FwdProbingRegSubTlv::GetSeriesFlagsMask(this);
}

uint64_t ot::LinkMetrics::Subject::ConfigureEnhAckProbing(ot::LinkMetrics::Subject *this, char a2, const ot::LinkMetrics::Metrics *a3, ot::Neighbor *a4)
{
  unsigned __int16 v18 = this;
  char v17 = a2;
  uint64_t v16 = a3;
  int v15 = a4;
  unsigned __int8 v14 = 0;
  int v13 = 0;
  if ((*(unsigned char *)a3 & 0x10) != 0)
  {
    return -2;
  }
  else
  {
    if (v17 == 1)
    {
      if (*(unsigned char *)v16) {
        return -2;
      }
      if ((*(unsigned char *)v16 & 2) == 0 && (*(unsigned char *)v16 & 4) == 0 && (*(unsigned char *)v16 & 8) == 0) {
        return -2;
      }
      if ((*(unsigned char *)v16 & 2) != 0 && (*(unsigned char *)v16 & 4) != 0 && (*(unsigned char *)v16 & 8) != 0) {
        return -2;
      }
      char v8 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned __int8 v12 = *(unsigned char *)v16;
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v15);
      ot::Neighbor::GetExtAddress(v15);
      int v13 = ot::Radio::ConfigureEnhAckProbing(v8, v12, &Rloc16, v4);
    }
    else if (v17)
    {
      unsigned __int8 v14 = -2;
    }
    else
    {
      if ((*(unsigned char *)v16 & 2) != 0 || (*(unsigned char *)v16 & 4) != 0 || (*(unsigned char *)v16 & 8) != 0) {
        return -2;
      }
      unsigned int v7 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned __int8 v10 = *(unsigned char *)v16;
      unsigned __int16 v9 = ot::Neighbor::GetRloc16(v15);
      ot::Neighbor::GetExtAddress(v15);
      int v13 = ot::Radio::ConfigureEnhAckProbing(v7, v10, &v9, v5);
    }
    if (v13) {
      return -2;
    }
  }
  return v14;
}

uint64_t ot::LinkMetrics::EnhAckConfigSubTlv::GetEnhAckFlags(ot::LinkMetrics::EnhAckConfigSubTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::LinkMetrics::EnhAckConfigSubTlv::GetEnhAckFlags(this);
}

uint64_t ot::LinkMetrics::Subject::HandleLinkProbe(ot::LinkMetrics::Subject *this, const ot::Message *a2, char *a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v11 = this;
  unsigned __int8 v10 = a2;
  unsigned __int16 v9 = a3;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v7 = 0;
  unsigned __int16 v6 = 0;
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)0x5A, &v7, &v6, a5);
  if (!TlvValueOffset)
  {
    if (v6) {
      return ot::Message::Read<unsigned char>(v10, v7, v9);
    }
    else {
      return 6;
    }
  }
  return TlvValueOffset;
}

unsigned char *ot::LinkMetrics::ReportSubTlv::Init(ot::LinkMetrics::ReportSubTlv *this)
{
  return ot::Tlv::SetType(this, 0);
}

{
  return ot::LinkMetrics::ReportSubTlv::Init(this);
}

uint64_t ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::LinkMetrics::ReportSubTlv::SetMetricsTypeId(this, a2);
}

uint64_t ot::LinkMetrics::ReportSubTlv::SetMetricsValue32(ot::LinkMetrics::ReportSubTlv *this, unsigned int a2)
{
  *(_DWORD *)((char *)this + ot::Tlv::SetType(this, 3) = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  return ot::Tlv::SetLength((uint64_t)this, 5);
}

{
  return ot::LinkMetrics::ReportSubTlv::SetMetricsValue32(this, a2);
}

uint64_t ot::LinkMetrics::ReportSubTlv::SetMetricsValue8(ot::LinkMetrics::ReportSubTlv *this, char a2)
{
  *((unsigned char *)this + ot::Tlv::SetType(this, 3) = a2;
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return ot::LinkMetrics::ReportSubTlv::SetMetricsValue8(this, a2);
}

uint64_t ot::LinkMetrics::ScaleLinkMarginToRawValue(ot::LinkMetrics *this)
{
  unsigned __int16 v2 = 255 * ot::Min<unsigned char>(this, 0x82u);
  return ot::DivideAndRoundToClosest<unsigned short>(v2, 0x82u);
}

uint64_t ot::LinkMetrics::ScaleRssiToRawValue(ot::LinkMetrics *this)
{
  int v1 = ot::Clamp<int>((char)this, 0xFFFFFF7E, 0);
  return ot::DivideAndRoundToClosest<int>(255 * (v1 + 130), 130);
}

void *ot::LinkMetrics::Subject::Free(ot::LinkMetrics::Subject *this, ot::LinkMetrics::SeriesInfo *a2)
{
  return ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Free((uint64_t *)this + 1, a2);
}

void *ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Free(uint64_t *a1, void *a2)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push(a1, a2);
}

{
  return ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Free(a1, a2);
}

uint64_t ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Allocate(uint64_t *a1)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop(a1);
}

{
  return ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Allocate(a1);
}

uint64_t ot::Radio::ConfigureEnhAckProbing(ot::Radio *a1, unsigned __int8 a2, unsigned __int16 *a3, uint64_t a4)
{
  InstancePtr = ot::Radio::GetInstancePtr(a1);
  return otPlatRadioConfigureEnhAckProbing((uint64_t)InstancePtr, a2, *a3, a4, v5, v6, v7, v8);
}

{
  return ot::Radio::ConfigureEnhAckProbing(a1, a2, a3, a4);
}

uint64_t ot::DivideAndRoundToClosest<unsigned short>(unsigned __int16 a1, unsigned __int16 a2)
{
  return (unsigned __int16)((a1 + a2 / 2) / a2);
}

{
  return ot::DivideAndRoundToClosest<unsigned short>(a1, a2);
}

uint64_t ot::Clamp<int>(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4 = ot::Max<int>(a1, a2);
  return ot::Min<int>(v4, a3);
}

{
  return ot::Clamp<int>(a1, a2, a3);
}

uint64_t ot::DivideAndRoundToClosest<int>(int a1, int a2)
{
  return ((a1 + a2 / 2) / a2);
}

{
  return ot::DivideAndRoundToClosest<int>(a1, a2);
}

uint64_t ot::ClampToInt8<int>(unsigned int a1)
{
  return (char)ot::Clamp<int>(a1, 0xFFFFFF80, 0x7Fu);
}

{
  return ot::ClampToInt8<int>(a1);
}

uint64_t ot::LqiAverager::GetCount(ot::LqiAverager *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::LqiAverager::GetCount(this);
}

uint64_t ot::LqiAverager::GetAverage(ot::LqiAverager *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::LqiAverager::GetAverage(this);
}

void *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push(uint64_t *a1, void *a2)
{
  uint64_t result = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::SetNext(a2, *a1);
  *a1 = (uint64_t)a2;
  return result;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push(a1, a2);
}

void *ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::SetNext(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  return ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::SetNext(result, a2);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    *a1 = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(*a1);
  }
  return v2;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop(a1);
}

uint64_t ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

{
  return ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(a1);
}

{
  return ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(a1);
}

_WORD *ot::SuccessRateTracker::AddSample(_WORD *this, char a2, unsigned __int16 a3)
{
  if (a2) {
    int v3 = 0;
  }
  else {
    int v3 = 0xFFFF;
  }
  *this = ((unsigned __int16)*this * (a3 - 1) + v3 + a3 / 2u) / a3;
  return this;
}

uint64_t ot::RssAverager::Add(ot::RssAverager *this, char a2)
{
  char v4 = a2;
  unsigned int v3 = 0;
  if (a2 == 127)
  {
    return 7;
  }
  else
  {
    if (a2 > 0) {
      char v4 = 0;
    }
    *(_WORD *)this = *(_WORD *)this & 0x7FF | (((((unsigned __int16)(*(_WORD *)this >> 11) < 8u) + (*(_WORD *)this >> 11)) & 0x1F) << 11);
    *(_WORD *)this = *(_WORD *)this & 0xF800 | (((*(_WORD *)this & 0x7FF) * ((*(_WORD *)this >> 11) - 1)
                                               + (unsigned __int16)(-8 * v4))
                                              / (*(_WORD *)this >> 11)) & 0x7FF;
  }
  return v3;
}

uint64_t ot::RssAverager::GetAverage(ot::RssAverager *this)
{
  if (*(_WORD *)this >> 11)
  {
    char v2 = -((*(_WORD *)this & 0x7FF) >> 3);
    if ((*(_WORD *)this & 7u) >= 4) {
      --v2;
    }
  }
  else
  {
    return 127;
  }
  return v2;
}

ot::StringWriter *ot::RssAverager::ToString@<X0>(ot::RssAverager *this@<X0>, ot::StringWriter *a2@<X8>)
{
  uint64_t result = (ot::StringWriter *)ot::String<(unsigned short)10>::String((uint64_t)a2);
  if (*(_WORD *)this >> 11) {
    return ot::StringWriter::Append(a2, "%d.%s", -((*(_WORD *)this & 0x7FF) >> 3), ot::kDigitsString[*(_WORD *)this & 7]);
  }
  return result;
}

uint64_t ot::String<(unsigned short)10>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 10);
  return a1;
}

uint64_t ot::LqiAverager::Add(ot::LqiAverager *this, unsigned __int8 a2)
{
  if (*((unsigned __int8 *)this + 1) != 255) {
    ++*((unsigned char *)this + 1);
  }
  uint64_t result = ot::Min<unsigned char>(8u, *((unsigned char *)this + 1));
  *(unsigned char *)this = (*(unsigned __int8 *)this * (result - 1) + a2) / result;
  return result;
}

_WORD *ot::LinkQualityInfo::Clear(ot::LinkQualityInfo *this)
{
  *((unsigned char *)this + ot::Tlv::SetType(this, 3) = 127;
  ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 2);
  return ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 3);
}

uint64_t ot::LinkQualityInfo::SetLinkQuality(uint64_t result, char a2)
{
  *(unsigned char *)(result + ot::Tlv::SetType(this, 2) = a2;
  return result;
}

{
  return ot::LinkQualityInfo::SetLinkQuality(result, a2);
}

ot::LinkQualityInfo *ot::LinkQualityInfo::AddRss(ot::LinkQualityInfo *this, char a2)
{
  char v4 = this;
  char LinkQuality = -1;
  if (a2 != 127)
  {
    *((unsigned char *)this + ot::Tlv::SetType(this, 3) = a2;
    if (ot::RssAverager::HasAverage(this)) {
      char LinkQuality = ot::LinkQualityInfo::GetLinkQuality(v4);
    }
    this = (ot::LinkQualityInfo *)ot::RssAverager::Add(v4, a2);
    if (!this)
    {
      unsigned __int8 LinkMargin = ot::LinkQualityInfo::GetLinkMargin(v4);
      char v3 = ot::LinkQualityInfo::CalculateLinkQuality((ot::LinkQualityInfo *)LinkMargin, LinkQuality);
      return (ot::LinkQualityInfo *)ot::LinkQualityInfo::SetLinkQuality((uint64_t)v4, v3);
    }
  }
  return this;
}

BOOL ot::RssAverager::HasAverage(ot::RssAverager *this)
{
  return *(_WORD *)this >> 11 != 0;
}

{
  return ot::RssAverager::HasAverage(this);
}

uint64_t ot::LinkQualityInfo::GetLinkQuality(ot::LinkQualityInfo *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::LinkQualityInfo::GetLinkQuality(this);
}

uint64_t ot::LinkQualityInfo::CalculateLinkQuality(ot::LinkQualityInfo *this, char a2)
{
  unsigned __int8 v3 = 0;
  unsigned __int8 v6 = 2;
  unsigned __int8 v5 = 10;
  unsigned __int8 v4 = 20;
  switch(a2)
  {
    case 0:
      unsigned __int8 v6 = 4;
      goto LABEL_6;
    case 1:
LABEL_6:
      unsigned __int8 v5 = 12;
      goto LABEL_7;
    case 2:
LABEL_7:
      unsigned __int8 v4 = 22;
      break;
  }
  if (this <= (int)v4)
  {
    if (this <= (int)v5)
    {
      if (this > (int)v6) {
        return 1;
      }
    }
    else
    {
      return 2;
    }
  }
  else
  {
    return 3;
  }
  return v3;
}

uint64_t ot::LinkQualityInfo::GetLinkMargin(ot::LinkQualityInfo *this)
{
  int v1 = (ot::Mac::SubMac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::SubMac>(this);
  char NoiseFloor = ot::Mac::SubMac::GetNoiseFloor(v1);
  char AverageRss = ot::LinkQualityInfo::GetAverageRss(this);
  return ot::ComputeLinkMargin((ot *)NoiseFloor, AverageRss);
}

uint64_t ot::ComputeLinkMargin(ot *this, char a2)
{
  unsigned __int8 v3 = a2 - (_BYTE)this;
  if ((char)(a2 - (_BYTE)this) < 0 || a2 == 127) {
    return 0;
  }
  return v3;
}

ot::StringWriter *ot::LinkQualityInfo::ToInfoString@<X0>(ot::LinkQualityInfo *this@<X0>, ot::StringWriter *a2@<X8>)
{
  ot::String<(unsigned short)50>::String((uint64_t)a2);
  ot::RssAverager::ToString(this, (ot::StringWriter *)v8);
  unsigned __int8 v5 = (const char *)ot::String<(unsigned short)10>::AsCString((uint64_t)v8);
  char LastRss = ot::LinkQualityInfo::GetLastRss(this);
  unsigned __int8 LinkQuality = ot::LinkQualityInfo::GetLinkQuality(this);
  return ot::StringWriter::Append(a2, "aveRss:%s, lastRss:%d, linkQuality:%d", v5, LastRss, LinkQuality);
}

uint64_t ot::String<(unsigned short)50>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 50);
  return a1;
}

uint64_t ot::String<(unsigned short)10>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)10>::AsCString(a1);
}

ot::StringWriter *ot::LinkQualityInfo::ToErrorRateInfoString@<X0>(ot::LinkQualityInfo *this@<X0>, ot::StringWriter *a2@<X8>)
{
  ot::String<(unsigned short)128>::String((uint64_t)a2);
  unsigned int v5 = ot::LinkQualityInfo::GetFrameErrorRatePercent(this) / 0x64;
  unsigned int v6 = ot::LinkQualityInfo::GetFrameErrorRatePercent(this) % 0x64;
  unsigned int v7 = ot::LinkQualityInfo::GetMessageErrorRatePercent(this) / 0x64;
  unsigned int v8 = ot::LinkQualityInfo::GetMessageErrorRatePercent(this) % 0x64;
  unsigned int v9 = ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(this) / 0x64;
  unsigned int v10 = ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(this) % 0x64;
  unsigned int v11 = ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(this) / 0x64;
  unsigned int HomeKitMessageErrorRatePercent = ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(this);
  return ot::StringWriter::Append(a2, ", frameErrorRate:%d.%02d%%, messageErrorRate:%d.%02d%%, MatterMessageErrorRate:%d.%02d%%, HomeKitMessageErrorRate:%d.%02d%%", v5, v6, v7, v8, v9, v10, v11, HomeKitMessageErrorRatePercent % 0x64);
}

uint64_t ot::String<(unsigned short)128>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 128);
  return a1;
}

uint64_t ot::LinkQualityInfo::GetFrameErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 4));
}

{
  return ot::LinkQualityInfo::GetFrameErrorRatePercent(this);
}

uint64_t ot::LinkQualityInfo::GetMessageErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 6));
}

{
  return ot::LinkQualityInfo::GetMessageErrorRatePercent(this);
}

uint64_t ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 10));
}

{
  return ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(this);
}

uint64_t ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(ot::LinkQualityInfo *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::LinkQualityInfo *)((char *)this + 8));
}

{
  return ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(this);
}

uint64_t ot::LinkQualityForLinkMargin(ot *this)
{
  return ot::LinkQualityInfo::CalculateLinkQuality((ot::LinkQualityInfo *)this, 255);
}

uint64_t ot::GetTypicalRssForLinkQuality(char a1, char a2)
{
  switch(a2)
  {
    case 1:
      char v3 = 5;
      break;
    case 2:
      char v3 = 15;
      break;
    case 3:
      char v3 = 50;
      break;
    default:
      char v3 = 0;
      break;
  }
  return (char)(v3 + a1);
}

uint64_t ot::CostForLinkQuality(unsigned __int8 a1)
{
  unsigned __int8 v2 = 16;
  if (a1 <= 3u) {
    return ot::CostForLinkQuality(ot::LinkQuality)::kCostsForLinkQuality[a1];
  }
  return v2;
}

ot::Lowpan::Lowpan *ot::Lowpan::Lowpan::Lowpan(ot::Lowpan::Lowpan *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Lowpan::Lowpan::Lowpan(this, a2);
  return this;
}

uint64_t ot::Lowpan::Lowpan::FindContextForId(ot::InstanceLocator *a1, char a2, ot::Ip6::Prefix *a3)
{
  char v3 = (ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
  uint64_t result = ot::NetworkData::LeaderBase::GetContext(v3, a2, a3);
  if (result) {
    return ot::Clearable<ot::Lowpan::Context>::Clear((uint64_t)a3);
  }
  return result;
}

uint64_t ot::Clearable<ot::Lowpan::Context>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

{
  return ot::Clearable<ot::Lowpan::Context>::Clear(result);
}

uint64_t ot::Lowpan::Lowpan::FindContextToCompressAddress(ot::InstanceLocator *a1, const ot::Ip6::Address *a2, ot::Ip6::Prefix *a3)
{
  char v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
  uint64_t result = ot::NetworkData::LeaderBase::GetContext(v3, a2, a3);
  if (result || (*((unsigned char *)a3 + 18) & 1) == 0) {
    return ot::Clearable<ot::Lowpan::Context>::Clear((uint64_t)a3);
  }
  return result;
}

uint64_t ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address *a1, const ot::Ip6::Prefix *a2, ot::Ip6::InterfaceIdentifier *a3)
{
  unsigned int v7 = 0;
  int Type = ot::Mac::Address::GetType(a1);
  if (Type == 1)
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(a1);
    ot::Ip6::InterfaceIdentifier::SetToLocator(a3, Short);
LABEL_6:
    ot::Ip6::InterfaceIdentifier::ApplyPrefix(a3, a2);
    return v7;
  }
  if (Type == 2)
  {
    ot::Mac::Address::GetExtended(a1);
    ot::Ip6::InterfaceIdentifier::SetFromExtAddress(a3, v4);
    goto LABEL_6;
  }
  return 6;
}

uint64_t ot::Lowpan::Lowpan::CompressSourceIid(uint64_t a1, ot::Mac::Address *a2, ot::Ip6::Address *a3, const ot::Ip6::Prefix *a4, _WORD *a5, ot::FrameBuilder *a6)
{
  uint64_t v21 = a1;
  char v20 = a2;
  uint64_t v19 = a3;
  unsigned __int16 v18 = a4;
  char v17 = a5;
  uint64_t v16 = a6;
  unsigned int v15 = 0;
  ot::Lowpan::Lowpan::ComputeIid(a2, a4, (ot::Ip6::InterfaceIdentifier *)v14);
  IgnoreError();
  Iid = (const void *)ot::Ip6::Address::GetIid(v19);
  if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(v14, Iid))
  {
    *v17 |= 0x30u;
  }
  else
  {
    unsigned int v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
    if (ot::Ip6::InterfaceIdentifier::IsLocator(v7))
    {
      *v17 |= 0x20u;
      int v13 = v16;
      unsigned int v8 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
      unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v8);
      return ot::FrameBuilder::AppendBigEndianUint16(v13, Locator);
    }
    else
    {
      *v17 |= 0x10u;
      unsigned __int8 v12 = v16;
      unsigned int v10 = (const void *)ot::Ip6::Address::GetIid(v19);
      return ot::FrameBuilder::Append<ot::Ip6::InterfaceIdentifier>(v12, v10);
    }
  }
  return v15;
}

uint64_t ot::FrameBuilder::Append<ot::Ip6::InterfaceIdentifier>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 8u);
}

{
  return ot::FrameBuilder::Append<ot::Ip6::InterfaceIdentifier>(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::CompressDestinationIid(uint64_t a1, ot::Mac::Address *a2, ot::Ip6::Address *a3, const ot::Ip6::Prefix *a4, _WORD *a5, ot::FrameBuilder *a6)
{
  uint64_t v21 = a1;
  char v20 = a2;
  uint64_t v19 = a3;
  unsigned __int16 v18 = a4;
  char v17 = a5;
  uint64_t v16 = a6;
  unsigned int v15 = 0;
  ot::Lowpan::Lowpan::ComputeIid(a2, a4, (ot::Ip6::InterfaceIdentifier *)v14);
  IgnoreError();
  Iid = (const void *)ot::Ip6::Address::GetIid(v19);
  if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(v14, Iid))
  {
    *v17 |= 3u;
  }
  else
  {
    unsigned int v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
    if (ot::Ip6::InterfaceIdentifier::IsLocator(v7))
    {
      *v17 |= 2u;
      int v13 = v16;
      unsigned int v8 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
      unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v8);
      return ot::FrameBuilder::AppendBigEndianUint16(v13, Locator);
    }
    else
    {
      *v17 |= 1u;
      unsigned __int8 v12 = v16;
      unsigned int v10 = (const void *)ot::Ip6::Address::GetIid(v19);
      return ot::FrameBuilder::Append<ot::Ip6::InterfaceIdentifier>(v12, v10);
    }
  }
  return v15;
}

uint64_t ot::Lowpan::Lowpan::CompressMulticast(ot::Lowpan::Lowpan *this, const ot::Ip6::Address *a2, unsigned __int16 *a3, ot::FrameBuilder *a4)
{
  int v13 = this;
  unsigned __int8 v12 = (char *)a2;
  unsigned int v11 = a3;
  unsigned int v10 = a4;
  unsigned int appended = 0;
  *a3 |= 8u;
  for (unsigned int i = 2; i < 0x10uLL; ++i)
  {
    if (v12[i])
    {
      if (v12[1] == 2 && i >= 0xF)
      {
        *v11 |= 3u;
        return ot::FrameBuilder::AppendUint8(v10, v12[15]);
      }
      else if (i < 0xD)
      {
        if (i < 0xB)
        {
          ot::Lowpan::Lowpan::FindContextForId(this, 0, (ot::Ip6::Prefix *)v8);
          char Length = ot::Ip6::Prefix::GetLength((ot::Ip6::Prefix *)v8);
          if (v12[3] == Length && (ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)v8), !memcmp(v5, v12 + 4, 8uLL)))
          {
            *v11 |= 4u;
            unsigned int appended = ot::FrameBuilder::AppendBytes(v10, v12 + 1, 2u);
            if (!appended) {
              return ot::FrameBuilder::AppendBytes(v10, v12 + 12, 4u);
            }
          }
          else
          {
            return ot::FrameBuilder::Append<ot::Ip6::Address>(v10, v12);
          }
        }
        else
        {
          *v11 |= 1u;
          unsigned int appended = ot::FrameBuilder::AppendUint8(v10, v12[1]);
          if (!appended) {
            return ot::FrameBuilder::AppendBytes(v10, v12 + 11, 5u);
          }
        }
      }
      else
      {
        *v11 |= 2u;
        unsigned int appended = ot::FrameBuilder::AppendUint8(v10, v12[1]);
        if (!appended) {
          return ot::FrameBuilder::AppendBytes(v10, v12 + 13, 3u);
        }
      }
      return appended;
    }
  }
  return appended;
}

uint64_t ot::FrameBuilder::Append<ot::Ip6::Address>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 0x10u);
}

{
  return ot::FrameBuilder::Append<ot::Ip6::Address>(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::Compress(ot::Lowpan::Lowpan *this, ot::Message *a2, const ot::Mac::Addresses *a3, ot::FrameBuilder *a4)
{
  unsigned __int8 v12 = this;
  unsigned int v11 = a2;
  unsigned int v10 = a3;
  unsigned int v9 = a4;
  unsigned int v8 = 0;
  unsigned __int8 v7 = -1;
  while (v7)
  {
    long long v6 = *(_OWORD *)v9;
    unsigned int v8 = ot::Lowpan::Lowpan::Compress(this, v11, v10, v9, &v7);
    if (!v8) {
      break;
    }
    *(_OWORD *)unsigned int v9 = v6;
  }
  return v8;
}

uint64_t ot::Lowpan::Lowpan::Compress(ot::Lowpan::Lowpan *this, ot::Message *a2, const ot::Mac::Addresses *a3, ot::FrameBuilder *a4, unsigned __int8 *a5)
{
  __n128 v57 = this;
  uint64_t v56 = a2;
  char v55 = a3;
  char v54 = a4;
  BOOL v53 = a5;
  *(_WORD *)&v52[4] = 0;
  *(_DWORD *)char v52 = (unsigned __int16)ot::Message::GetOffset(a2);
  unsigned __int16 v51 = 24576;
  unsigned __int16 Length = 0;
  char v48 = v49;
  unsigned __int8 v41 = 0;
  char v40 = 0;
  char v39 = 0;
  unsigned __int8 v38 = 0;
  unsigned __int8 v37 = 0;
  unsigned __int8 v37 = *v53;
  char v34 = v56;
  unsigned __int16 Offset = ot::Message::GetOffset(v56);
  *(_DWORD *)&v52[2] = ot::Message::Read<ot::Ip6::Header>(v34, Offset, v49);
  if (!*(_DWORD *)&v52[2])
  {
    Source = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
    ot::Lowpan::Lowpan::FindContextToCompressAddress(this, Source, (ot::Ip6::Prefix *)v45);
    Destination = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
    ot::Lowpan::Lowpan::FindContextToCompressAddress(this, Destination, (ot::Ip6::Prefix *)v42);
    unsigned __int16 Length = ot::FrameBuilder::GetLength(v54);
    *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendBigEndianUint16(v54, v51);
    if (!*(_DWORD *)&v52[2])
    {
      if (!v46 && !v43
        || (v51 |= 0x80u,
            (*(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v54, v43 | (16 * v46))) == 0))
      {
        char v39 = (4 * *v48) & 0x3C | ((int)v48[1] >> 6);
        char v40 = (4 * v48[1]) & 0xC0;
        if ((v48[1] & 0xF) != 0 || v48[2] || v48[3])
        {
          if (v39)
          {
            *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v54, v40 | v39);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v54, v48[1] & 0xF);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendBytes(v54, v48 + 2, 2u);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
          else
          {
            v51 |= 0x800u;
            *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v54, v40 | (v48[1] & 0xF));
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendBytes(v54, v48 + 2, 2u);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
        }
        else if (v39 || v40)
        {
          v51 |= 0x1000u;
          *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v54, v40 | v39);
          if (*(_DWORD *)&v52[2]) {
            goto LABEL_65;
          }
        }
        else
        {
          v51 |= 0x1800u;
        }
        int NextHeader = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v49);
        if ((!NextHeader || NextHeader == 17 || NextHeader == 41) && v38 + 1 < v37)
        {
          v51 |= 0x400u;
        }
        else
        {
          uint64_t v32 = v54;
          char v8 = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v49);
          *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v32, v8);
          if (*(_DWORD *)&v52[2]) {
            goto LABEL_65;
          }
        }
        int HopLimit = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v49);
        switch(HopLimit)
        {
          case 1:
            v51 |= 0x100u;
            break;
          case 64:
            v51 |= 0x200u;
            break;
          case 255:
            v51 |= 0x300u;
            break;
          default:
            uint64_t v30 = v54;
            char v9 = ot::Ip6::Header::GetHopLimit((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v30, v9);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
            break;
        }
        unsigned int v10 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
        if (ot::Ip6::Address::IsUnspecified(v10))
        {
          v51 |= 0x40u;
        }
        else
        {
          unsigned int v11 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
          if (ot::Ip6::Address::IsLinkLocal(v11))
          {
            uint64_t v29 = v55;
            unsigned __int8 v12 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::CompressSourceIid((uint64_t)this, v29, v12, (const ot::Ip6::Prefix *)v45, &v51, v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
          else if (v47)
          {
            v51 |= 0x40u;
            uint64_t v28 = v55;
            int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::CompressSourceIid((uint64_t)this, v28, v13, (const ot::Ip6::Prefix *)v45, &v51, v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
          else
          {
            int v27 = v54;
            unsigned __int8 v14 = (const void *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2] = ot::FrameBuilder::Append<ot::Ip6::Address>(v27, v14);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
        }
        unsigned int v15 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
        if (ot::Ip6::Address::IsMulticast(v15))
        {
          uint64_t v16 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
          *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::CompressMulticast(this, v16, &v51, v54);
          if (*(_DWORD *)&v52[2]) {
            goto LABEL_65;
          }
        }
        else
        {
          char v17 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
          if (ot::Ip6::Address::IsLinkLocal(v17))
          {
            unsigned __int16 v26 = (const ot::Mac::Addresses *)((char *)v55 + 10);
            unsigned __int16 v18 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::CompressDestinationIid((uint64_t)this, v26, v18, (const ot::Ip6::Prefix *)v42, &v51, v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
          else if (v44)
          {
            v51 |= 4u;
            unsigned __int16 v25 = (const ot::Mac::Addresses *)((char *)v55 + 10);
            uint64_t v19 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::CompressDestinationIid((uint64_t)this, v25, v19, (const ot::Ip6::Prefix *)v42, &v51, v54);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
          else
          {
            unsigned __int16 v24 = v54;
            char v20 = (const void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v49);
            *(_DWORD *)&v52[2] = ot::FrameBuilder::Append<ot::Ip6::Address>(v24, v20);
            if (*(_DWORD *)&v52[2]) {
              goto LABEL_65;
            }
          }
        }
        ++v38;
        ot::Message::MoveOffset(v56, 40);
        unsigned __int8 v41 = ot::Ip6::Header::GetNextHeader((ot::Ip6::Header *)v49);
        while (v38 < (int)v37)
        {
          if (v41)
          {
            if (v41 == 17)
            {
              *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::CompressUdp(this, v56, v54);
            }
            else if (v41 == 41)
            {
              *(_DWORD *)&v52[2] = ot::FrameBuilder::AppendUint8(v54, 238);
              if (!*(_DWORD *)&v52[2]) {
                *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::Compress(this, v56, v55, v54);
              }
            }
            break;
          }
          *(_DWORD *)&v52[2] = ot::Lowpan::Lowpan::CompressExtensionHeader(this, v56, v54, &v41);
          if (*(_DWORD *)&v52[2]) {
            break;
          }
          ++v38;
        }
      }
    }
  }
LABEL_65:
  unsigned __int8 *v53 = v38;
  if (*(_DWORD *)&v52[2])
  {
    ot::Message::SetOffset(v56, *(unsigned __int16 *)v52);
  }
  else
  {
    unsigned __int16 v23 = v54;
    unsigned __int16 v22 = Length;
    __int16 v36 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)v51);
    ot::FrameBuilder::Write<unsigned short>(v23, v22, &v36);
  }
  return *(unsigned int *)&v52[2];
}

uint64_t ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameBuilder *a3, unsigned __int8 *a4)
{
  unsigned __int16 v26 = this;
  unsigned __int16 v25 = a2;
  unsigned __int16 v24 = a3;
  unsigned __int16 v23 = a4;
  *(_WORD *)&v22[4] = 0;
  *(_DWORD *)unsigned __int16 v22 = (unsigned __int16)ot::Message::GetOffset(a2);
  unsigned __int16 v20 = 0;
  unsigned __int16 v19 = 0;
  char v18 = 0;
  unsigned __int16 Offset = ot::Message::GetOffset(v25);
  *(_DWORD *)&v22[2] = ot::Message::Read<ot::Ip6::ExtensionHeader>(v25, Offset, v21);
  if (!*(_DWORD *)&v22[2])
  {
    ot::Message::MoveOffset(v25, 2);
    char v18 = -32;
    int NextHeader = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v21);
    if (NextHeader == 17 || NextHeader == 41)
    {
      v18 |= 1u;
    }
    else
    {
      *(_DWORD *)&v22[2] = ot::FrameBuilder::AppendUint8(v24, v18);
      if (*(_DWORD *)&v22[2]) {
        goto LABEL_24;
      }
      char v18 = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v21);
    }
    *(_DWORD *)&v22[2] = ot::FrameBuilder::AppendUint8(v24, v18);
    if (!*(_DWORD *)&v22[2])
    {
      unsigned __int16 v20 = ot::Ip6::ExtensionHeader::GetSize((ot::Ip6::ExtensionHeader *)v21) - 2;
      if (v20 <= 0xFFu)
      {
        if (!*v23 || *v23 == 60)
        {
          unsigned __int16 v17 = ot::Message::GetOffset(v25);
          unsigned __int16 v16 = v17 + v20;
          char v15 = 0;
          while (v17 < (int)v16)
          {
            *(_DWORD *)&v22[2] = ot::Ip6::Option::ParseFrom((ot::Ip6::Option *)v14, v25, v17, v16);
            if (*(_DWORD *)&v22[2]) {
              goto LABEL_24;
            }
            char v15 = 1;
            __int16 Size = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v14);
            v17 += Size;
          }
          if ((v15 & 1) != 0 && ot::Ip6::Option::IsPadding((ot::Ip6::Option *)v14))
          {
            unsigned __int16 v19 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v14);
            v20 -= v19;
          }
        }
        unsigned __int16 v6 = ot::Message::GetOffset(v25);
        int v12 = v20 + v6 + v19;
        if (v12 <= (unsigned __int16)ot::Message::GetLength(v25))
        {
          unsigned __int8 v7 = ot::Ip6::ExtensionHeader::GetNextHeader((ot::Ip6::ExtensionHeader *)v21);
          *unsigned __int16 v23 = v7;
          *(_DWORD *)&v22[2] = ot::FrameBuilder::AppendUint8(v24, v20);
          if (!*(_DWORD *)&v22[2])
          {
            unsigned int v11 = v24;
            unsigned int v10 = v25;
            unsigned __int16 v8 = ot::Message::GetOffset(v25);
            *(_DWORD *)&v22[2] = ot::FrameBuilder::AppendBytesFromMessage(v11, v10, v8, v20);
            if (!*(_DWORD *)&v22[2]) {
              ot::Message::MoveOffset(v25, v20 + v19);
            }
          }
        }
        else
        {
          *(_DWORD *)&v22[2] = 6;
        }
      }
      else
      {
        *(_DWORD *)&v22[2] = 1;
      }
    }
  }
LABEL_24:
  if (*(_DWORD *)&v22[2]) {
    ot::Message::SetOffset(v25, *(unsigned __int16 *)v22);
  }
  return *(unsigned int *)&v22[2];
}

uint64_t ot::Lowpan::Lowpan::CompressUdp(ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameBuilder *a3)
{
  int v13 = this;
  int v12 = a2;
  unsigned int v11 = a3;
  *(_WORD *)&v10[4] = 0;
  *(_DWORD *)unsigned int v10 = (unsigned __int16)ot::Message::GetOffset(a2);
  unsigned __int16 Offset = ot::Message::GetOffset(v12);
  *(_DWORD *)&void v10[2] = ot::Message::Read<ot::Ip6::Udp::Header>(v12, Offset, v9);
  if (!*(_DWORD *)&v10[2])
  {
    Source__int16 Port = ot::Ip6::Udp::Header::GetSourcePort((ot::Ip6::Udp::Header *)v9);
    unsigned __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort((ot::Ip6::Udp::Header *)v9);
    if ((SourcePort & 0xFFF0) == 0xF0B0 && (DestinationPort & 0xFFF0) == 0xF0B0)
    {
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendUint8(v11, 243);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendUint8(v11, DestinationPort & 0xF | (16 * (SourcePort & 0xFu)));
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }
    else if ((SourcePort & 0xFF00) == 0xF000)
    {
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendUint8(v11, 242);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendUint8(v11, SourcePort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendBigEndianUint16(v11, DestinationPort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }
    else if ((DestinationPort & 0xFF00) == 0xF000)
    {
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendUint8(v11, 241);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendBigEndianUint16(v11, SourcePort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendUint8(v11, DestinationPort);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }
    else
    {
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendUint8(v11, 240);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
      *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendBytes(v11, v9, 4u);
      if (*(_DWORD *)&v10[2]) {
        goto LABEL_21;
      }
    }
    unsigned __int16 v6 = v11;
    unsigned __int16 Checksum = ot::Ip6::Udp::Header::GetChecksum((ot::Ip6::Udp::Header *)v9);
    *(_DWORD *)&void v10[2] = ot::FrameBuilder::AppendBigEndianUint16(v6, Checksum);
    if (!*(_DWORD *)&v10[2]) {
      ot::Message::MoveOffset(v12, 8);
    }
  }
LABEL_21:
  if (*(_DWORD *)&v10[2]) {
    ot::Message::SetOffset(v12, *(unsigned __int16 *)v10);
  }
  return *(unsigned int *)&v10[2];
}

void *ot::FrameBuilder::Write<unsigned short>(ot::FrameBuilder *a1, unsigned __int16 a2, const void *a3)
{
  return ot::FrameBuilder::WriteBytes(a1, a2, a3, 2u);
}

{
  return ot::FrameBuilder::Write<unsigned short>(a1, a2, a3);
}

uint64_t ot::Lowpan::Lowpan::DispatchToNextHeader(ot::Lowpan::Lowpan *this, char a2, unsigned __int8 *a3)
{
  unsigned int v6 = 0;
  if ((a2 & 0xF0) == 0xE0)
  {
    if ((a2 & 0xE) != 0)
    {
      uint64_t v4 = a2 & 0xE;
      char v3 = 1;
    }
    else
    {
      uint64_t v4 = a2 & 0xE;
      char v3 = 0;
    }
    if ((v3 & 1) == 0)
    {
      switch(v4)
      {
        case 0:
          *a3 = 0;
          return v6;
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          return 6;
        case 2:
          *a3 = 43;
          return v6;
        case 4:
          *a3 = 44;
          return v6;
        case 6:
          *a3 = 60;
          return v6;
        case 14:
          *a3 = 41;
          return v6;
        default:
          JUMPOUT(0);
      }
    }
    return 6;
  }
  if ((a2 & 0xF8) != 0xF0) {
    return 6;
  }
  *a3 = 17;
  return v6;
}

uint64_t ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Lowpan::Lowpan *this, ot::Ip6::Header *a2, BOOL *a3, const ot::Mac::Addresses *a4, ot::FrameData *a5)
{
  v77 = this;
  v76 = a2;
  v75 = a3;
  v74 = a4;
  v73 = a5;
  unsigned int v72 = 6;
  unsigned __int16 v71 = 0;
  unsigned __int8 v70 = 0;
  char v69 = 0;
  char v68 = 0;
  unsigned __int8 v64 = 0;
  if (ot::FrameData::ReadBigEndianUint16(a5, &v71) || (v71 & 0xE000) != 0x6000) {
    return v72;
  }
  if ((v71 & 0x80u) != 0)
  {
    if (ot::FrameData::ReadUint8(v73, &v70)) {
      return v72;
    }
    char v69 = (int)v70 >> 4;
    char v68 = v70 & 0xF;
  }
  ot::Lowpan::Lowpan::FindContextForId(this, v69, (ot::Ip6::Prefix *)v67);
  ot::Lowpan::Lowpan::FindContextForId(this, v68, (ot::Ip6::Prefix *)v65);
  ot::Clearable<ot::Ip6::Header>::Clear(v76);
  ot::Ip6::Header::InitVersionTrafficClassFlow((ot::Ip6::Header *)v76);
  if ((v71 & 0x1800) != 0x1800)
  {
    v63 = v76;
    __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v73);
    if (v6 | (Length == 0)) {
      char v7 = 0;
    }
    else {
      char v7 = 1;
    }
    if ((v7 & 1) == 0) {
      return v72;
    }
    v63[1] |= (*(unsigned char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v73) & 0xC0) >> 2;
    if ((v71 & 0x800) == 0)
    {
      ot::FrameData::ReadUint8(v73, &v70);
      IgnoreError();
      *v63 |= ((int)v70 >> 2) & 0xF;
      v63[1] |= v70 << 6;
    }
    if ((v71 & 0x1000) == 0)
    {
      if ((unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v73) < 3u) {
        return v72;
      }
      v63[1] |= *(unsigned char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v73) & 0xF;
      v63[2] |= *(unsigned char *)(ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v73) + 1);
      v63[3] |= *(unsigned char *)(ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v73) + 2);
      ot::FrameData::SkipOver(v73, 3u);
    }
  }
  if ((v71 & 0x400) != 0)
  {
    BOOL *v75 = 1;
  }
  else
  {
    if (ot::FrameData::ReadUint8(v73, &v70)) {
      return v72;
    }
    ot::Ip6::Header::SetNextHeader((uint64_t)v76, v70);
    BOOL *v75 = 0;
  }
  int v61 = v71 & 0x300;
  switch(v61)
  {
    case 256:
      ot::Ip6::Header::SetHopLimit((uint64_t)v76, 1);
      break;
    case 512:
      ot::Ip6::Header::SetHopLimit((uint64_t)v76, 64);
      break;
    case 768:
      ot::Ip6::Header::SetHopLimit((uint64_t)v76, 255);
      break;
    default:
      if (ot::FrameData::ReadUint8(v73, &v70) != 0) {
        return v72;
      }
      ot::Ip6::Header::SetHopLimit((uint64_t)v76, v70);
      break;
  }
  int v60 = v71 & 0x30;
  if ((v71 & 0x30) != 0)
  {
    switch(v60)
    {
      case 16:
        char v58 = v73;
        Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76);
        Iid = (void *)ot::Ip6::Address::GetIid(Source);
        if (ot::FrameData::Read<ot::Ip6::InterfaceIdentifier>(v58, Iid)) {
          return v72;
        }
        break;
      case 32:
        *(unsigned char *)(ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76) + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = -1;
        *(unsigned char *)(ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76) + 1ot::Tlv::SetType(this, 2) = -2;
        __n128 v57 = v73;
        uint64_t v12 = ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76);
        if (ot::FrameData::ReadBytes(v57, (void *)(v12 + 14), 2u)) {
          return v72;
        }
        break;
      case 48:
        uint64_t v56 = v74;
        int v13 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76);
        unsigned __int8 v14 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v13);
        ot::Lowpan::Lowpan::ComputeIid(v56, (const ot::Ip6::Prefix *)v67, v14);
        IgnoreError();
        break;
    }
  }
  else if ((v71 & 0x40) == 0)
  {
    char v59 = v73;
    char v9 = (void *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76);
    if (ot::FrameData::Read<ot::Ip6::Address>(v59, v9)) {
      return v72;
    }
  }
  if ((v71 & 0x30) != 0)
  {
    if ((v71 & 0x40) != 0)
    {
      if ((v67[19] & 1) == 0) {
        return v72;
      }
      char v15 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76);
      ot::Ip6::Address::SetPrefix(v15, (const ot::Ip6::Prefix *)v67);
    }
    else
    {
      __int16 v55 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
      *(_WORD *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v76) = v55;
    }
  }
  if ((v71 & 8) != 0)
  {
    *(unsigned char *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76) = -1;
    if ((v71 & 4) != 0)
    {
      if ((v71 & 3) != 0) {
        return v72;
      }
      if ((v66 & 1) == 0) {
        return v72;
      }
      char v43 = v73;
      uint64_t Destination = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
      if (ot::FrameData::ReadBytes(v43, (void *)(Destination + 1), 2u)) {
        return v72;
      }
      char v41 = ot::Ip6::Prefix::GetLength((ot::Ip6::Prefix *)v65);
      *(unsigned char *)(ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76) + ot::Tlv::SetType(this, 3) = v41;
      uint64_t v42 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
      ot::Ip6::Prefix::GetBytes((ot::Ip6::Prefix *)v65);
      *(void *)(v42 + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = *v34;
      char v40 = v73;
      uint64_t v35 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
      if (ot::FrameData::ReadBytes(v40, (void *)(v35 + 12), 4u)) {
        return v72;
      }
    }
    else
    {
      if ((v71 & 3) != 0)
      {
        uint64_t v26 = v71 & 3;
        char v25 = 1;
      }
      else
      {
        uint64_t v26 = v71 & 3;
        char v25 = 0;
      }
      if ((v25 & 1) == 0)
      {
        switch(v26)
        {
          case 0:
            unsigned int v49 = v73;
            int v27 = (void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
            if (!ot::FrameData::Read<ot::Ip6::Address>(v49, v27)) {
              break;
            }
            return v72;
          case 1:
            char v48 = v73;
            uint64_t v28 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
            if (!ot::FrameData::ReadUint8(v48, (unsigned __int8 *)(v28 + 1)))
            {
              char v47 = v73;
              uint64_t v29 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
              if (!ot::FrameData::ReadBytes(v47, (void *)(v29 + 11), 5u)) {
                break;
              }
            }
            return v72;
          case 2:
            char v46 = v73;
            uint64_t v30 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
            if (!ot::FrameData::ReadUint8(v46, (unsigned __int8 *)(v30 + 1)))
            {
              unsigned int v45 = v73;
              uint64_t v31 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
              if (!ot::FrameData::ReadBytes(v45, (void *)(v31 + 13), 3u)) {
                break;
              }
            }
            return v72;
          case 3:
            *(unsigned char *)(ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76) + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 2;
            char v44 = v73;
            uint64_t v32 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
            if (!ot::FrameData::ReadUint8(v44, (unsigned __int8 *)(v32 + 15))) {
              break;
            }
            return v72;
          default:
LABEL_98:
            JUMPOUT(0);
        }
      }
    }
  }
  else
  {
    if ((v71 & 3) != 0)
    {
      uint64_t v17 = v71 & 3;
      char v16 = 1;
    }
    else
    {
      uint64_t v17 = v71 & 3;
      char v16 = 0;
    }
    if ((v16 & 1) == 0)
    {
      switch(v17)
      {
        case 0:
          if ((v71 & 4) == 0)
          {
            char v54 = v73;
            char v18 = (void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
            if (!ot::FrameData::Read<ot::Ip6::Address>(v54, v18)) {
              break;
            }
          }
          return v72;
        case 1:
          BOOL v53 = v73;
          unsigned __int16 v19 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
          unsigned __int16 v20 = (void *)ot::Ip6::Address::GetIid(v19);
          if (!ot::FrameData::Read<ot::Ip6::InterfaceIdentifier>(v53, v20)) {
            break;
          }
          return v72;
        case 2:
          *(unsigned char *)(ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76) + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = -1;
          *(unsigned char *)(ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76) + 1ot::Tlv::SetType(this, 2) = -2;
          char v52 = v73;
          uint64_t v21 = ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
          if (!ot::FrameData::ReadBytes(v52, (void *)(v21 + 14), 2u)) {
            break;
          }
          return v72;
        case 3:
          unsigned __int16 v51 = (const ot::Mac::Addresses *)((char *)v74 + 10);
          unsigned __int16 v22 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
          unsigned __int16 v23 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v22);
          if (!ot::Lowpan::Lowpan::ComputeIid(v51, (const ot::Ip6::Prefix *)v65, v23)) {
            break;
          }
          return v72;
        default:
          goto LABEL_98;
      }
    }
    if ((v71 & 4) != 0)
    {
      if ((v66 & 1) == 0) {
        return v72;
      }
      unsigned __int16 v24 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76);
      ot::Ip6::Address::SetPrefix(v24, (const ot::Ip6::Prefix *)v65);
    }
    else if ((v71 & 3) != 0)
    {
      __int16 v50 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFE80);
      *(_WORD *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v76) = v50;
    }
  }
  if ((v71 & 0x400) == 0) {
    return 0;
  }
  __int16 v36 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v73);
  if (v6 | (v36 == 0)) {
    char v37 = 0;
  }
  else {
    char v37 = 1;
  }
  if (v37)
  {
    __int16 Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v73);
    if (!ot::Lowpan::Lowpan::DispatchToNextHeader(this, *Bytes, &v64))
    {
      ot::Ip6::Header::SetNextHeader((uint64_t)v76, v64);
      return 0;
    }
  }
  return v72;
}

void *ot::Clearable<ot::Ip6::Header>::Clear(void *a1)
{
  return memset(a1, 0, 0x28uLL);
}

{
  return ot::Clearable<ot::Ip6::Header>::Clear(a1);
}

uint64_t ot::FrameData::Read<ot::Ip6::Address>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 0x10u);
}

{
  return ot::FrameData::Read<ot::Ip6::Address>(a1, a2);
}

uint64_t ot::FrameData::Read<ot::Ip6::InterfaceIdentifier>(ot::FrameData *a1, void *a2)
{
  return ot::FrameData::ReadBytes(a1, a2, 8u);
}

{
  return ot::FrameData::Read<ot::Ip6::InterfaceIdentifier>(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameData *a3)
{
  unsigned __int16 v19 = this;
  char v18 = a2;
  uint64_t v17 = a3;
  unsigned int v16 = 6;
  unsigned __int8 v14 = 0;
  unsigned __int8 v13 = 0;
  if (!ot::FrameData::ReadUint8(a3, &v13))
  {
    if (v13)
    {
      if (ot::FrameData::ReadUint8(v17, &v14)) {
        return v16;
      }
      if (!ot::FrameData::CanRead(v17, v14 + 1)) {
        return v16;
      }
      uint64_t Bytes = ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
      if (ot::Lowpan::Lowpan::DispatchToNextHeader(this, *(unsigned char *)(Bytes + v14), v15)) {
        return v16;
      }
    }
    else if (ot::FrameData::ReadUint8(v17, v15) {
           || ot::FrameData::ReadUint8(v17, &v14)
    }
           || !ot::FrameData::CanRead(v17, v14))
    {
      return v16;
    }
    v15[1] = ((unint64_t)v14 + 9) / 8 - 1;
    if (!ot::Message::AppendBytes(v18, (char *)v15, 2u))
    {
      ot::Message::MoveOffset(v18, 2);
      unsigned int v10 = v18;
      uint64_t v4 = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v17);
      if (!ot::Message::AppendBytes(v10, v4, v14))
      {
        ot::Message::MoveOffset(v18, v14);
        ot::FrameData::SkipOver(v17, v14);
        if (ot::Ip6::PadOption::InitToPadHeaderWithSize((ot::Ip6::PadOption *)v12, v14 + 2)) {
          return 0;
        }
        char v9 = v18;
        unsigned __int16 Size = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v12);
        if (!ot::Message::AppendBytes(v9, v12, Size))
        {
          unsigned __int16 v8 = v18;
          unsigned __int16 v6 = ot::Ip6::Option::GetSize((ot::Ip6::Option *)v12);
          ot::Message::MoveOffset(v8, v6);
          return 0;
        }
      }
    }
  }
  return v16;
}

BOOL ot::FrameData::CanRead(ot::FrameData *this, unsigned __int16 a2)
{
  return a2 <= (int)(unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this);
}

{
  return ot::FrameData::CanRead(this, a2);
}

uint64_t ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Lowpan::Lowpan *this, ot::Ip6::Udp::Header *a2, ot::FrameData *a3)
{
  unsigned __int8 v14 = this;
  unsigned __int8 v13 = a2;
  uint64_t v12 = a3;
  unsigned int v11 = 6;
  unsigned __int8 v10 = 0;
  unsigned __int8 v9 = 0;
  unsigned __int16 v8 = 0;
  unsigned __int16 v7 = 0;
  if (!ot::FrameData::ReadUint8(a3, &v10) && (v10 & 0xF8) == 0xF0)
  {
    ot::Clearable<ot::Ip6::Udp::Header>::Clear(v13);
    if ((v10 & 3) != 0)
    {
      uint64_t v4 = v10 & 3;
      char v3 = 1;
    }
    else
    {
      uint64_t v4 = v10 & 3;
      char v3 = 0;
    }
    if ((v3 & 1) == 0)
    {
      switch(v4)
      {
        case 0:
          if (!ot::FrameData::ReadBigEndianUint16(v12, &v8)
            && !ot::FrameData::ReadBigEndianUint16(v12, &v7))
          {
            break;
          }
          return v11;
        case 1:
          if (ot::FrameData::ReadBigEndianUint16(v12, &v8)
            || ot::FrameData::ReadUint8(v12, &v9))
          {
            return v11;
          }
          unsigned __int16 v7 = v9 | 0xF000;
          break;
        case 2:
          if (!ot::FrameData::ReadUint8(v12, &v9))
          {
            unsigned __int16 v8 = v9 | 0xF000;
            if (!ot::FrameData::ReadBigEndianUint16(v12, &v7)) {
              break;
            }
          }
          return v11;
        case 3:
          if (ot::FrameData::ReadUint8(v12, &v9)) {
            return v11;
          }
          unsigned __int16 v8 = ((int)v9 >> 4) | 0xF0B0;
          unsigned __int16 v7 = v9 & 0xF | 0xF0B0;
          break;
        default:
          JUMPOUT(0);
      }
    }
    ot::Ip6::Udp::Header::SetSourcePort(v13, v8);
    ot::Ip6::Udp::Header::SetDestinationPort(v13, v7);
    if ((v10 & 4) == 0)
    {
      unsigned __int16 v6 = 0;
      if (!ot::FrameData::ReadBigEndianUint16(v12, &v6))
      {
        ot::Ip6::Udp::Header::SetChecksum(v13, v6);
        return 0;
      }
    }
  }
  return v11;
}

void *ot::Clearable<ot::Ip6::Udp::Header>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::Ip6::Udp::Header>::Clear(result);
}

uint64_t ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Lowpan::Lowpan *this, ot::Message *a2, ot::FrameData *a3, __int16 a4)
{
  unsigned __int8 v13 = this;
  uint64_t v12 = a2;
  unsigned int v11 = a3;
  __int16 v10 = a4;
  unsigned int v9 = 0;
  unsigned int v9 = ot::Lowpan::Lowpan::DecompressUdpHeader(this, (ot::Ip6::Udp::Header *)v8, a3);
  if (!v9)
  {
    if (v10)
    {
      __int16 v7 = v10;
      __int16 Offset = ot::Message::GetOffset(v12);
      ot::Ip6::Udp::Header::SetLength((ot::Ip6::Udp::Header *)v8, v7 - Offset);
    }
    else
    {
      __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v11);
      ot::Ip6::Udp::Header::SetLength((ot::Ip6::Udp::Header *)v8, Length + 8);
    }
    unsigned int v9 = ot::Message::Append<ot::Ip6::Udp::Header>(v12, v8);
    if (!v9) {
      ot::Message::MoveOffset(v12, 8);
    }
  }
  return v9;
}

uint64_t ot::Message::Append<ot::Ip6::Udp::Header>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 8u);
}

{
  return ot::Message::Append<ot::Ip6::Udp::Header>(a1, a2);
}

uint64_t ot::Lowpan::Lowpan::Decompress(ot::Lowpan::Lowpan *this, ot::Message *a2, const ot::Mac::Addresses *a3, ot::FrameData *a4, __int16 a5)
{
  unsigned __int16 v22 = this;
  uint64_t v21 = a2;
  unsigned __int16 v20 = a3;
  unsigned __int16 v19 = a4;
  __int16 v18 = a5;
  unsigned int v17 = 6;
  BOOL v15 = 0;
  *(_WORD *)unsigned __int8 v14 = 0;
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  if (!ot::Lowpan::Lowpan::DecompressBaseHeader(this, (ot::Ip6::Header *)v16, &v15, v20, v19)
    && !ot::Message::Append<ot::Ip6::Header>(v21, v16))
  {
    ot::Message::MoveOffset(v21, 40);
    while (v15)
    {
      __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v19);
      if (v6 | (Length == 0)) {
        char v7 = 0;
      }
      else {
        char v7 = 1;
      }
      if ((v7 & 1) == 0) {
        return v17;
      }
      char v12 = *(unsigned char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)v19);
      if ((v12 & 0xF0) == 0xE0)
      {
        if ((v12 & 0xE) == 0xE)
        {
          BOOL v15 = 0;
          ot::FrameData::SkipOver(v19, 1u);
          if (ot::Lowpan::Lowpan::Decompress(this, v21, v20, v19, v18)) {
            return v17;
          }
        }
        else
        {
          BOOL v15 = (v12 & 1) != 0;
          if (ot::Lowpan::Lowpan::DecompressExtensionHeader(this, v21, v19)) {
            return v17;
          }
        }
      }
      else
      {
        if ((v12 & 0xF8) != 0xF0) {
          return v17;
        }
        BOOL v15 = 0;
        if (ot::Lowpan::Lowpan::DecompressUdpHeader(this, v21, v19, v18)) {
          return v17;
        }
      }
    }
    if (v18)
    {
      *(_WORD *)unsigned __int8 v14 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(unsigned __int16)(v18 - Offset - 40));
    }
    else
    {
      uint64_t v10 = (unsigned __int16)ot::Message::GetOffset(v21) - Offset - 40;
      __int16 v8 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v19);
      *(_WORD *)unsigned __int8 v14 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(unsigned __int16)(v10 + v8));
    }
    ot::Message::Write<unsigned short>(v21, Offset + 4, v14);
    return 0;
  }
  return v17;
}

uint64_t ot::Lowpan::Lowpan::DecompressEcn(ot::Lowpan::Lowpan *this, const ot::Message *a2, unsigned __int16 a3)
{
  char v6 = this;
  *(void *)&uint64_t v5[3] = a2;
  char v5[2] = a3;
  HIBYTE(v5[1]) = 0;
  v5[0] = 0;
  char v4 = 0;
  if (!ot::Message::Read<unsigned short>(a2, a3, (char *)v5))
  {
    v5[0] = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)v5[0]);
    if ((v5[0] & 0xE000) == 0x6000)
    {
      v5[2] += 2;
      if ((v5[0] & 0x1800) != 0x1800
        && !ot::Message::Read<unsigned char>(*(ot::Message **)&v5[3], v5[2], &v4))
      {
        HIBYTE(v5[1]) = (v4 & 0xC0) >> 6;
      }
    }
  }
  return HIBYTE(v5[1]);
}

uint64_t ot::Lowpan::Lowpan::MarkCompressedEcn(ot::Lowpan::Lowpan *this, ot::Message *a2, __int16 a3)
{
  char v7 = this;
  char v6 = a2;
  char v4 = 0;
  unsigned __int16 v5 = a3 + 2;
  ot::Message::Read<unsigned char>(a2, a3 + 2, &v4);
  IgnoreError();
  char v4 = v4 & 0x3F | 0xC0;
  return ot::Message::Write<unsigned char>(v6, v5, &v4);
}

uint64_t ot::Lowpan::MeshHeader::Init(uint64_t this, __int16 a2, __int16 a3, char a4)
{
  *(_WORD *)this = a2;
  *(_WORD *)(this + ot::Tlv::SetType(this, 2) = a3;
  *(unsigned char *)(this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = a4;
  return this;
}

BOOL ot::Lowpan::MeshHeader::IsMeshHeader(ot::Lowpan::MeshHeader *this, const ot::FrameData *a2)
{
  BOOL v3 = 0;
  if ((unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this) >= 5u) {
    return (*(unsigned char *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)this) & 0xC0) == 128;
  }
  return v3;
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom(ot::Lowpan::MeshHeader *this, ot::FrameData *a2)
{
  unsigned int v9 = this;
  __int16 v8 = a2;
  unsigned int v7 = 0;
  unsigned __int16 v6 = 0;
  uint64_t Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v8);
  unsigned int v7 = ot::Lowpan::MeshHeader::ParseFrom(this, Bytes, Length, &v6);
  if (!v7) {
    ot::FrameData::SkipOver(v8, v6);
  }
  return v7;
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom(ot::Lowpan::MeshHeader *this, const unsigned __int8 *a2, unsigned __int16 a3, unsigned __int16 *a4)
{
  unsigned int v7 = 6;
  if (a3 >= 5u)
  {
    __int16 v8 = (unsigned __int8 *)(a2 + 1);
    if ((*a2 & 0xF0) == 0xB0)
    {
      *((unsigned char *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = *a2 & 0xF;
      if (*((unsigned char *)this + 4) != 15)
      {
        *a4 = 5;
        goto LABEL_7;
      }
      if (a3 >= 6u)
      {
        __int16 v8 = (unsigned __int8 *)(a2 + 2);
        *((unsigned char *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = a2[1];
        *a4 = 6;
LABEL_7:
        *(_WORD *)this = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)v8, a2);
        *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)(v8 + 2), v4);
        return 0;
      }
    }
  }
  return v7;
}

uint64_t ot::Encoding::BigEndian::ReadUint16(ot::Encoding::BigEndian *this, const unsigned __int8 *a2)
{
  return _byteswap_ushort(*(_WORD *)this);
}

{
  return ot::Encoding::BigEndian::ReadUint16(this, a2);
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom(ot::Lowpan::MeshHeader *this, const ot::Message *a2)
{
  unsigned __int16 v5 = this;
  char v4 = a2;
  unsigned __int16 v3 = 0;
  return ot::Lowpan::MeshHeader::ParseFrom(this, a2, &v3);
}

uint64_t ot::Lowpan::MeshHeader::ParseFrom(ot::Lowpan::MeshHeader *this, const ot::Message *a2, unsigned __int16 *a3)
{
  unsigned int v9 = this;
  __int16 v8 = a2;
  unsigned int v7 = a3;
  unsigned __int16 Bytes = ot::Message::ReadBytes(a2, 0, v6, 6u);
  return ot::Lowpan::MeshHeader::ParseFrom(this, (const unsigned __int8 *)v6, Bytes, v7);
}

uint64_t ot::Lowpan::MeshHeader::GetHeaderLength(ot::Lowpan::MeshHeader *this)
{
  if (*((unsigned __int8 *)this + 4) < 0xFu) {
    return 5;
  }
  else {
    return 6;
  }
}

uint64_t ot::Lowpan::MeshHeader::DecrementHopsLeft(uint64_t this)
{
  if (*(unsigned char *)(this + 4)) {
    --*(unsigned char *)(this + 4);
  }
  return this;
}

uint64_t ot::Lowpan::MeshHeader::AppendTo(ot::Lowpan::MeshHeader *this, ot::FrameBuilder *a2)
{
  if (*((unsigned __int8 *)this + 4) >= 0xFu)
  {
    unsigned int appended = ot::FrameBuilder::AppendUint8(a2, 191);
    if (appended) {
      return appended;
    }
    unsigned int appended = ot::FrameBuilder::AppendUint8(a2, *((unsigned char *)this + 4));
    if (appended) {
      return appended;
    }
  }
  else
  {
    unsigned int appended = ot::FrameBuilder::AppendUint8(a2, *((unsigned char *)this + 4) | 0xB0u);
    if (appended) {
      return appended;
    }
  }
  unsigned int appended = ot::FrameBuilder::AppendBigEndianUint16(a2, *(_WORD *)this);
  if (!appended) {
    return ot::FrameBuilder::AppendBigEndianUint16(a2, *((_WORD *)this + 1));
  }
  return appended;
}

uint64_t ot::Lowpan::MeshHeader::AppendTo(ot::Lowpan::MeshHeader *this, ot::Message *a2)
{
  uint64_t v10 = this;
  unsigned int v9 = a2;
  ot::FrameBuilder::Init((uint64_t)v7, v8, 6);
  ot::Lowpan::MeshHeader::AppendTo(this, (ot::FrameBuilder *)v7);
  IgnoreError();
  unsigned __int16 v6 = v9;
  unsigned __int16 Bytes = (char *)ot::FrameBuilder::GetBytes((ot::FrameBuilder *)v7);
  unsigned __int16 Length = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v7);
  return ot::Message::AppendBytes(v6, Bytes, Length);
}

BOOL ot::Lowpan::FragmentHeader::IsFragmentHeader(ot::Lowpan::FragmentHeader *this, const ot::FrameData *a2)
{
  unsigned __int16 Bytes = (ot::Lowpan::FragmentHeader *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this);
  return ot::Lowpan::FragmentHeader::IsFragmentHeader(Bytes, (const unsigned __int8 *)Length);
}

BOOL ot::Lowpan::FragmentHeader::IsFragmentHeader(ot::Lowpan::FragmentHeader *this, const unsigned __int8 *a2)
{
  BOOL v3 = 0;
  if ((unsigned __int16)a2 >= 4uLL) {
    return (*(unsigned char *)this & 0xD8) == 192;
  }
  return v3;
}

uint64_t ot::Lowpan::FragmentHeader::ParseFrom(ot::Lowpan::FragmentHeader *this, ot::FrameData *a2)
{
  unsigned int v9 = this;
  __int16 v8 = a2;
  unsigned int v7 = 0;
  unsigned __int16 v6 = 0;
  unsigned __int16 Bytes = (unsigned __int8 *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v8);
  unsigned int v7 = ot::Lowpan::FragmentHeader::ParseFrom(this, Bytes, Length, &v6);
  if (!v7) {
    ot::FrameData::SkipOver(v8, v6);
  }
  return v7;
}

uint64_t ot::Lowpan::FragmentHeader::ParseFrom(ot::Lowpan::FragmentHeader *this, unsigned __int8 *a2, unsigned __int16 a3, unsigned __int16 *a4)
{
  unsigned int v15 = 6;
  if (ot::Lowpan::FragmentHeader::IsFragmentHeader((ot::Lowpan::FragmentHeader *)a2, (const unsigned __int8 *)a3))
  {
    *(_WORD *)this = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)a2, v4) & 0x7FF;
    *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Encoding::BigEndian::ReadUint16((ot::Encoding::BigEndian *)(a2 + 2), v5);
    if ((*a2 & 0x20) == 0x20)
    {
      if (a3 < 5uLL)
      {
        otLogNotePlat("ParseFrom() Frame length is less than sizeof(NextFrag)", v6, v7, v8, v9, v10, v11, v12, (char)this);
        return v15;
      }
      *((_WORD *)this + ot::Tlv::SetType(this, 2) = 8 * a2[4];
      *a4 = 5;
    }
    else
    {
      *((_WORD *)this + ot::Tlv::SetType(this, 2) = 0;
      *a4 = 4;
    }
    return 0;
  }
  return v15;
}

uint64_t ot::Lowpan::FragmentHeader::ParseFrom(ot::Lowpan::FragmentHeader *this, const ot::Message *a2, unsigned __int16 a3, unsigned __int16 *a4)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  unsigned __int16 v9 = a3;
  uint64_t v8 = a4;
  unsigned __int16 Bytes = ot::Message::ReadBytes(a2, a3, (char *)v7, 5u);
  return ot::Lowpan::FragmentHeader::ParseFrom(this, v7, Bytes, v8);
}

uint64_t std::map<unsigned long long,ot::matterInfo>::map[abi:nn180100](uint64_t a1)
{
  return a1;
}

{
  char v3;
  uint64_t v4;

  char v4 = a1;
  boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&v3);
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__tree(a1, (uint64_t)&v3);
  return a1;
}

uint64_t std::map<unsigned long long,ot::matterInfo>::~map[abi:nn180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::~__tree(a1);
  return a1;
}

void *std::vector<ot::Ip6::Address>::vector[abi:nn180100](void *a1)
{
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::__default_init_tag>(a1 + 2);
  return a1;
}

uint64_t *std::vector<ot::Ip6::Address>::~vector[abi:nn180100](uint64_t *a1)
{
  return a1;
}

{
  uint64_t *v3[2];

  v3[1] = a1;
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(v3, (uint64_t)a1);
  std::vector<ot::Ip6::Address>::__destroy_vector::operator()[abi:nn180100](v3);
  return a1;
}

uint64_t ot::ThreadLinkInfo::SetFrom(ot::ThreadLinkInfo *this, const ot::Mac::RxFrame *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  ot::Clearable<ot::ThreadLinkInfo>::Clear(this);
  if (ot::Mac::Frame::GetSrcPanId(v7, (unsigned __int16 *)this))
  {
    ot::Mac::Frame::GetDstPanId(v7, (unsigned __int16 *)this);
    IgnoreError();
  }
  unsigned __int16 v6 = 0;
  if (ot::Mac::Frame::GetDstPanId(v7, &v6)) {
    unsigned __int16 v6 = *(_WORD *)this;
  }
  *((unsigned char *)this + 5) = *((unsigned char *)this + 5) & 0xFD | (2 * (v6 == 0xFFFF));
  if (ot::Mac::Frame::GetSecurityEnabled(v7))
  {
    unsigned __int8 v5 = 0;
    ot::Mac::Frame::GetKeyIdMode(v7, &v5);
    IgnoreError();
    BOOL v3 = 1;
    if (v5) {
      BOOL v3 = v5 == 8;
    }
    *((unsigned char *)this + 5) = *((unsigned char *)this + 5) & 0xFE | v3;
  }
  else
  {
    *((unsigned char *)this + 5) &= ~1u;
  }
  *((unsigned char *)this + ot::Tlv::SetType(this, 2) = ot::Mac::Frame::GetChannel(v7);
  *((unsigned char *)this + ot::Tlv::SetType(this, 3) = ot::Mac::RxFrame::GetRssi(v7);
  uint64_t result = ot::Mac::RxFrame::GetLqi(v7);
  *((unsigned char *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = result;
  return result;
}

void *ot::Clearable<ot::ThreadLinkInfo>::Clear(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  return ot::Clearable<ot::ThreadLinkInfo>::Clear(result);
}

ot::MeshForwarder *ot::MeshForwarder::MeshForwarder(ot::MeshForwarder *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  *(unsigned char *)this = 127;
  ot::PriorityQueue::PriorityQueue((ot::MeshForwarder *)((char *)this + 8));
  ot::Coap::MessageQueue::MessageQueue((ot::MeshForwarder *)((char *)this + 40));
  *((_WORD *)this + 25) = 0;
  *((void *)this + ot::Tlv::SetType(this, 7) = 0;
  ot::Mac::Addresses::Addresses((ot::MeshForwarder *)((char *)this + 64));
  *((_WORD *)this + 4ot::Tlv::SetType(this, 2) = 0;
  *((_WORD *)this + 4ot::Tlv::SetType(this, 3) = 0;
  *((unsigned char *)this + 88) &= ~1u;
  *((unsigned char *)this + 88) &= ~2u;
  *((unsigned char *)this + 88) &= ~4u;
  *((unsigned char *)this + 88) &= ~8u;
  *((unsigned char *)this + 88) &= ~0x10u;
  ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::TimerMilliIn((ot::MeshForwarder *)((char *)this + 96), a2);
  ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::TaskletIn((void *)this + 15, (uint64_t)a2);
  ot::IndirectSender::IndirectSender((ot::MeshForwarder *)((char *)this + 344), a2);
  unsigned __int8 v2 = ot::DataPollSender::DataPollSender((ot::MeshForwarder *)((char *)this + 400), a2);
  *((_WORD *)this + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = ot::Random::NonCrypto::GetUint16(v2);
  ot::MeshForwarder::ResetCounters(this);
  ot::MeshForwarder::ResetTriggerBasedCounters(this);
  ot::Clearable<ot::MeshForwarder::FragmentPriorityList>::Clear((char *)this + 296);
  return this;
}

{
  ot::MeshForwarder::MeshForwarder(this, a2);
  return this;
}

void ot::MeshForwarder::HandleTxDelayTimer(ot::MeshForwarder *this)
{
  *((unsigned char *)this + 88) &= ~0x10u;
  ot::Tasklet::Post((ot::MeshForwarder *)((char *)this + 120));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "Tx delay timer expired", v1, v2, v3, v4, v5, v6, v7);
}

void ot::MeshForwarder::ScheduleTransmissionTask(ot::MeshForwarder *this)
{
  if ((*((unsigned char *)this + 88) & 8) == 0 && (*((unsigned char *)this + 88) & 4) == 0 && (*((unsigned char *)this + 88) & 0x10) == 0)
  {
    *((void *)this + ot::Tlv::SetType(this, 7) = ot::MeshForwarder::PrepareNextDirectTransmission(this);
    if (*((void *)this + 7))
    {
      if (!(unsigned __int16)ot::Message::GetOffset(*((ot::Message **)this + 7))) {
        ot::Message::SetTxSuccess(*((ot::Message **)this + 7), 1);
      }
      uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ot::Mac::Mac::RequestDirectFrameTransmission(v1);
    }
  }
}

ot::TimerMilli *ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::HandleTimer);
  return a1;
}

void *ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::HandleTasklet);
  return a1;
}

_WORD *ot::MeshForwarder::ResetCounters(ot::MeshForwarder *this)
{
  return ot::Clearable<ot::SuccessRateTracker>::Clear((_WORD *)this + 116);
}

void *ot::Clearable<ot::MeshForwarder::FragmentPriorityList>::Clear(void *a1)
{
  return memset(a1, 0, 0x30uLL);
}

{
  return ot::Clearable<ot::MeshForwarder::FragmentPriorityList>::Clear(a1);
}

unsigned char *ot::MeshForwarder::Start(unsigned char *this)
{
  uint64_t v8 = this;
  if ((this[88] & 2) == 0)
  {
    uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)this);
    ot::Mac::Mac::SetRxOnWhenIdle(v1, 1, v2, v3, v4, v5, v6, v7);
    this = ot::IndirectSender::Start(v8 + 344);
    v8[88] = v8[88] & 0xFD | 2;
  }
  return this;
}

unsigned char *ot::IndirectSender::Start(unsigned char *this)
{
  *this = 1;
  return this;
}

{
  return ot::IndirectSender::Start(this);
}

void ot::MeshForwarder::Stop(ot::MeshForwarder *this)
{
  if ((*((unsigned char *)this + 88) & 2) != 0)
  {
    ot::DataPollSender::StopPolling((ot::MeshForwarder *)((char *)this + 400));
    uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    ot::TimeTicker::UnregisterReceiver(v1, 0);
    uint64_t v2 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(this);
    ot::Mle::DiscoverScanner::Stop(v2);
    ot::PriorityQueue::DequeueAndFreeAll((ot::MeshForwarder *)((char *)this + 8));
    ot::MessageQueue::DequeueAndFreeAll((ot::MeshForwarder *)((char *)this + 40));
    ot::IndirectSender::Stop((ot::MeshForwarder *)((char *)this + 344));
    ot::Clearable<ot::MeshForwarder::FragmentPriorityList>::Clear((char *)this + 296);
    ot::TimerMilli::Stop((ot::MeshForwarder *)((char *)this + 96));
    *((unsigned char *)this + 88) &= ~0x10u;
    *((unsigned char *)this + 88) &= ~2u;
    *((void *)this + ot::Tlv::SetType(this, 7) = 0;
    uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ot::Mac::Mac::SetRxOnWhenIdle(v3, 0, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t ot::Mle::DiscoverScanner::Stop(ot::Mle::DiscoverScanner *this)
{
  return ot::Mle::DiscoverScanner::HandleDiscoverComplete(this);
}

{
  return ot::Mle::DiscoverScanner::Stop(this);
}

uint64_t ot::MeshForwarder::PrepareEmptyFrame(ot::MeshForwarder *this, ot::Mac::TxFrame *a2, const ot::Mac::Address *a3, char a4)
{
  unsigned __int16 v19 = this;
  __int16 v18 = a2;
  unsigned int v17 = a3;
  char v16 = a4 & 1;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v13);
  uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  __int16 ShortAddress = ot::Mac::Mac::GetShortAddress(v4);
  ot::Mac::Address::SetShort((uint64_t)v13, ShortAddress);
  if (ot::Mac::Address::IsShortAddrInvalid((ot::Mac::Address *)v13) || ot::Mac::Address::IsExtended(v17))
  {
    uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    ExtAddress = (void *)ot::Mac::Mac::GetExtAddress(v6);
    ot::Mac::Address::SetExtended((uint64_t)v13, ExtAddress);
  }
  uint64_t v14 = *(void *)v17;
  char v15 = *((unsigned char *)v17 + 8);
  uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v12[0] = ot::Mac::Mac::GetPanId(v8);
  uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v12[1] = ot::Mac::Mac::GetPanId(v9);
  ot::MeshForwarder::PrepareMacHeaders(this, v18, 1, (uint64_t)v13, v12, 5, 8, 0);
  ot::Mac::Frame::SetAckRequest(v18, v16 & 1);
  return ot::Mac::Frame::SetPayloadLength(v18, 0);
}

BOOL ot::Mac::Address::IsShortAddrInvalid(ot::Mac::Address *this)
{
  BOOL v2 = 0;
  if (*((unsigned char *)this + 8) == 1) {
    return (unsigned __int16)ot::Mac::Address::GetShort(this) == 65534;
  }
  return v2;
}

{
  return ot::Mac::Address::IsShortAddrInvalid(this);
}

void ot::MeshForwarder::PrepareMacHeaders(ot::MeshForwarder *a1, ot::Mac::Frame *a2, __int16 a3, uint64_t a4, unsigned __int16 *a5, char a6, char a7, const ot::Message *a8)
{
  BOOL v12 = ot::MeshForwarder::CalcIePresent(a1, a8, (const ot::Mac::Address *)(a4 + 10));
  uint64_t v8 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
  unsigned int Neighbor = (const ot::Neighbor *)ot::NeighborTable::FindNeighbor(v8, (ot::Mac::Address *)(a4 + 10), 1);
  __int16 v11 = ot::MeshForwarder::CalcFrameVersion(a1, Neighbor, v12);
  ot::Mac::Frame::InitMacHeader(a2, a3, v11, (ot::Mac::Address *)a4, a5, a6, a7);
  if (v12) {
    ot::MeshForwarder::AppendHeaderIe(a1, a8, a2);
  }
}

void ot::MeshForwarder::RemoveMessage(ot::MeshForwarder *this, ot::Message *a2)
{
  unsigned __int8 v13 = this;
  BOOL v12 = a2;
  PriorityQueue = (ot::PriorityQueue *)ot::Message::GetPriorityQueue(a2);
  if (!PriorityQueue) {
    __assert_rtn("RemoveMessage", "mesh_forwarder.cpp", 258, "queue != nullptr");
  }
  if (PriorityQueue == (ot::MeshForwarder *)((char *)this + 8))
  {
    BOOL v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v9 = ot::ChildTable::Iterate(v2, 5);
    uint64_t v10 = (ot::ChildTable::IteratorBuilder *)&v9;
    v8[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
    v8[1] = v3;
    v7[0] = ot::ChildTable::IteratorBuilder::end(v10);
    v7[1] = v4;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7))
    {
      uint64_t v6 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
      ot::IndirectSender::RemoveMessageFromSleepyChild((ot::MeshForwarder *)((char *)this + 344), v12, v6);
      IgnoreError();
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
    }
    if (*((ot::Message **)this + 7) == v12) {
      *((void *)this + ot::Tlv::SetType(this, 7) = 0;
    }
  }
  ot::MeshForwarder::LogMessage(this, 5u, v12, 3, 0);
  ot::PriorityQueue::DequeueAndFree(PriorityQueue, v12);
}

void ot::MeshForwarder::LogMessage(ot::MeshForwarder *a1, unsigned __int8 a2, ot::Message *a3, int a4, ot::Mac::Address *a5)
{
  unsigned __int8 v8 = 4;
  if (a2 <= 2u)
  {
    if (a4) {
      char v5 = 3;
    }
    else {
      char v5 = 4;
    }
    unsigned __int8 v8 = v5;
  }
  else if (a2 - 3 <= 2)
  {
    unsigned __int8 v8 = 2;
  }
  if (v8 <= (int)ot::Instance::GetLogLevel(a1))
  {
    int Type = ot::Message::GetType(a3);
    if (Type)
    {
      if (Type == 1) {
        ot::MeshForwarder::LogMeshMessage(a1, a2, a3, a5, a4, v8);
      }
    }
    else
    {
      ot::MeshForwarder::LogIp6Message(a1, a2, a3, (uint64_t)a5, a4, v8);
    }
  }
}

uint64_t ot::MeshForwarder::ResumeMessageTransmissions(uint64_t this)
{
  if ((*(unsigned char *)(this + 88) & 4) != 0)
  {
    *(unsigned char *)(this + 88) &= ~4u;
    return ot::Tasklet::Post((ot::Tasklet *)(this + 120));
  }
  return this;
}

ot::Message *ot::MeshForwarder::PrepareNextDirectTransmission(ot::MeshForwarder *this)
{
  ot::PriorityQueue::GetHead((ot::MeshForwarder *)((char *)this + 8));
  for (unsigned int i = v1; i; unsigned int i = (ot::Message *)Next)
  {
    uint64_t Next = ot::Message::GetNext(i);
    if ((ot::Message::IsDirectTransmission(i) & 1) != 0 && (ot::Message::IsResolvingAddress(i) & 1) == 0)
    {
      ot::Message::SetDoNotEvict(i, 1);
      int Type = ot::Message::GetType(i);
      if (Type)
      {
        if (Type == 1) {
          int updated = ot::MeshForwarder::UpdateMeshRoute(this, i);
        }
        else {
          int updated = 2;
        }
      }
      else
      {
        int updated = ot::MeshForwarder::UpdateIp6Route(this, i);
      }
      ot::Message::SetDoNotEvict(i, 0);
      uint64_t Next = ot::Message::GetNext(i);
      if (!updated) {
        return i;
      }
      if (updated == 9)
      {
        ot::Message::SetResolvingAddress(i, 1);
      }
      else
      {
        ot::MeshForwarder::LogMessage(this, 3u, i, updated, 0);
        ot::PriorityQueue::DequeueAndFree((ot::MeshForwarder *)((char *)this + 8), i);
      }
    }
  }
  return i;
}

uint64_t ot::Message::SetTxSuccess(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xEFFF | ((v3 & 1) << 12);
  return result;
}

{
  return ot::Message::SetTxSuccess(this, a2);
}

uint64_t ot::Message::IsDirectTransmission(ot::Message *this)
{
  return (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 7) & 1;
}

{
  return ot::Message::IsDirectTransmission(this);
}

uint64_t ot::Message::IsResolvingAddress(ot::Message *this)
{
  return (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 15) & 1;
}

{
  return ot::Message::IsResolvingAddress(this);
}

uint64_t ot::Message::SetDoNotEvict(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0xDFFF | ((v3 & 1) << 13);
  return result;
}

{
  return ot::Message::SetDoNotEvict(this, a2);
}

uint64_t ot::MeshForwarder::UpdateIp6Route(ot::MeshForwarder *this, ot::Message *a2)
{
  char v16 = this;
  char v15 = a2;
  uint64_t v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned int v13 = 0;
  *((unsigned char *)this + 88) &= ~1u;
  ot::Message::Read<ot::Ip6::Header>(v15, 0, v12);
  IgnoreError();
  Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v12);
  if (!ot::Ip6::Address::IsMulticast(Source))
  {
    char v3 = (const ot::Ip6::Address *)ot::Ip6::Header::GetSource((ot::Ip6::Header *)v12);
    ot::MeshForwarder::GetMacSourceAddress(this, v3, (ot::MeshForwarder *)((char *)this + 64));
    if (ot::Mle::Mle::IsDisabled(v14) || ot::Mle::Mle::IsDetached(v14))
    {
      uint64_t Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v12);
      if (!ot::Ip6::Address::IsLinkLocal(Destination))
      {
        char v5 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v12);
        if (!ot::Ip6::Address::IsLinkLocalMulticast(v5)) {
          return 2;
        }
      }
LABEL_16:
      char v9 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v12);
      ot::MeshForwarder::GetMacDestinationAddress(this, v9, (ot::MeshForwarder *)((char *)this + 74));
      return v13;
    }
    uint64_t v6 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v12);
    if (ot::Ip6::Address::IsMulticast(v6))
    {
      if (!ot::Mle::Mle::IsChild(v14)
        || (ot::Message::IsLinkSecurityEnabled(v15) & 1) == 0
        || ot::Message::IsSubTypeMle(v15))
      {
        ot::Mac::Address::SetShort((uint64_t)this + 74, 0xFFFF);
        return v13;
      }
    }
    else
    {
      unsigned __int8 v8 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v12);
      if (ot::Ip6::Address::IsLinkLocal(v8)) {
        goto LABEL_16;
      }
      if (!ot::Mle::Mle::IsMinimalEndDevice(v14)) {
        return ot::MeshForwarder::UpdateIp6RouteFtd(this, (ot::Ip6::Header *)v12, v15);
      }
    }
    __int16 NextHop = ot::Mle::MleRouter::GetNextHop(v14, 0xFFFFu);
    ot::Mac::Address::SetShort((uint64_t)this + 74, NextHop);
    return v13;
  }
  return 2;
}

uint64_t ot::Message::SetResolvingAddress(ot::Message *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 68) = *(_WORD *)(result + 68) & 0x7FFF | ((v3 & 1) << 15);
  return result;
}

{
  return ot::Message::SetResolvingAddress(this, a2);
}

uint64_t ot::MeshForwarder::GetMacSourceAddress(ot::MeshForwarder *this, const ot::Ip6::Address *a2, ot::Mac::Address *a3)
{
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
  ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(Iid, a3);
  ot::Mac::Address::GetExtended(a3);
  __int16 v11 = v4;
  char v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ExtAddress = (const void *)ot::Mac::Mac::GetExtAddress(v5);
  uint64_t result = ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v11, ExtAddress);
  if (result)
  {
    unsigned __int8 v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    __int16 ShortAddress = ot::Mac::Mac::GetShortAddress(v8);
    return ot::Mac::Address::SetShort((uint64_t)a3, ShortAddress);
  }
  return result;
}

unsigned char *ot::MeshForwarder::GetMacDestinationAddress(ot::MeshForwarder *this, const ot::Ip6::Address *a2, ot::Mac::Address *a3)
{
  if (ot::Ip6::Address::IsMulticast(a2)) {
    return (unsigned char *)ot::Mac::Address::SetShort((uint64_t)a3, 0xFFFF);
  }
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsRoutingLocator(v4, a2))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    return (unsigned char *)ot::Mac::Address::SetShort((uint64_t)a3, Locator);
  }
  else
  {
    uint64_t v7 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    return ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(v7, a3);
  }
}

uint64_t ot::Mle::MleRouter::GetNextHop(ot::Mle::MleRouter *this, unsigned __int16 a2)
{
  return (unsigned __int16)ot::RouterTable::GetNextHop((ot::Mle::MleRouter *)((char *)this + 30912), a2);
}

{
  return ot::Mle::MleRouter::GetNextHop(this, a2);
}

uint64_t ot::MeshForwarder::GetRxOnWhenIdle(ot::MeshForwarder *this)
{
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  return ot::Mac::Mac::GetRxOnWhenIdle(v1) & 1;
}

uint64_t ot::MeshForwarder::SetRxOnWhenIdle(ot::MeshForwarder *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v18 = a2 & 1;
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "%s: %d", a3, a4, a5, a6, a7, a8, (char)"SetRxOnWhenIdle");
  unsigned __int8 v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetRxOnWhenIdle(v8, v18 & 1, v9, v10, v11, v12, v13, v14);
  if (v18) {
    ot::DataPollSender::StopPolling((ot::MeshForwarder *)((char *)this + 400));
  }
  else {
    ot::DataPollSender::StartPolling((ot::MeshForwarder *)((char *)this + 400));
  }
  char v15 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
  if (v18) {
    return ot::SupervisionListener::Stop(v15);
  }
  else {
    return ot::SupervisionListener::Start(v15);
  }
}

ot::Mac::TxFrame *ot::MeshForwarder::HandleFrameRequest(ot::MeshForwarder *this, ot::Mac::TxFrames *a2)
{
  TxFrame = 0;
  if ((*((unsigned char *)this + 88) & 2) != 0 && *((void *)this + 7))
  {
    TxFrame = (ot::Mac::TxFrame *)ot::Mac::TxFrames::GetTxFrame(a2);
    *((unsigned char *)this + 88) = *((unsigned char *)this + 88) & 0xF7 | 8;
    int Type = ot::Message::GetType(*((ot::Message **)this + 7));
    if (Type)
    {
      if (Type != 1)
      {
        *((_WORD *)this + 25) = ot::Message::GetLength(*((ot::Message **)this + 7));
        return 0;
      }
      ot::MeshForwarder::SendMesh(this, *((ot::Message **)this + 7), TxFrame);
    }
    else
    {
      if (ot::Message::GetSubType(*((ot::Message **)this + 7)) == 2)
      {
        BOOL v2 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(this);
        TxFrame = ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame(v2, TxFrame);
        if (!TxFrame) {
          return TxFrame;
        }
      }
      else
      {
        char v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        if (ot::Mac::Mac::IsCslEnabled(v3) && ot::Message::IsSubTypeMle(*((ot::Message **)this + 7)))
        {
          uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
          if (!ot::Mac::Mac::IsCstEnabled(v4)) {
            ot::Message::SetLinkSecurityEnabled(*((ot::Message **)this + 7), 1);
          }
        }
      }
      *((_WORD *)this + 25) = ot::MeshForwarder::PrepareDataFrame(this, TxFrame, *((ot::Message **)this + 7), (ot::MeshForwarder *)((char *)this + 64), *((unsigned char *)this + 88) & 1, *((_WORD *)this + 42), *((_WORD *)this + 43), 0);
      if (ot::Message::GetSubType(*((ot::Message **)this + 7)) == 10
        && (ot::Message::IsLinkSecurityEnabled(*((ot::Message **)this + 7)) & 1) != 0)
      {
        ot::Mac::Address::ToString((ot::MeshForwarder *)((char *)this + 64), (ot::StringWriter *)v17);
        char v12 = ot::String<(unsigned short)17>::AsCString((uint64_t)v17);
        ot::Mac::Address::ToString((ot::MeshForwarder *)((char *)this + 74), (ot::StringWriter *)v16);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v16);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshForwarder", "Child ID Request requires fragmentation, aborting tx src:%s dst:%s mMeshSource:0x%x mMeshDest:0x%x", v5, v6, v7, v8, v9, v10, v12);
        *((_WORD *)this + 25) = ot::Message::GetLength(*((ot::Message **)this + 7));
        return 0;
      }
    }
    ot::Mac::TxFrame::SetIsARetransmission((uint64_t)TxFrame, 0);
  }
  return TxFrame;
}

uint64_t ot::MeshForwarder::PrepareDataFrame(ot::MeshForwarder *this, ot::Mac::TxFrame *a2, ot::Message *a3, const ot::Mac::Addresses *a4, char a5, unsigned __int16 a6, unsigned __int16 a7, char a8)
{
  v87 = this;
  BOOL v86 = a2;
  v85 = a3;
  v84 = a4;
  char v83 = a5 & 1;
  unsigned __int16 v82 = a6;
  unsigned __int16 v81 = a7;
  char v80 = a8 & 1;
  char v79 = 0;
  char v78 = 0;
  unsigned __int16 v75 = 0;
  unsigned __int16 Offset = 0;
  unsigned __int16 v73 = 0;
  char v71 = 0;
  __int16 v70 = 0;
  while (1)
  {
    char v79 = 0;
    char v78 = 8;
    if (ot::Message::IsLinkSecurityEnabled(v85))
    {
      char v79 = 5;
      Subint Type = ot::Message::GetSubType(v85);
      if (SubType == 1)
      {
        char v78 = 16;
      }
      else if (SubType == 4)
      {
        char v78 = 0;
      }
    }
    uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    unsigned __int16 PanId = ot::Mac::Mac::GetPanId(v8);
    uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    __int16 v77 = ot::Mac::Mac::GetPanId(v9);
    int v58 = ot::Message::GetSubType(v85);
    if (v58 == 1)
    {
      uint64_t v56 = v86;
      char Channel = ot::Message::GetChannel(v85);
      ot::Mac::TxFrame::SetChannel(v56, Channel);
      __n128 v57 = v86;
      char v12 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      char PanChannel = ot::Mac::Mac::GetPanChannel(v12);
      ot::Mac::TxFrame::SetRxChannelAfterTxDone((uint64_t)v57, PanChannel);
      __int16 v77 = -1;
    }
    else if (v58 == 3 || v58 == 2)
    {
      __int16 v77 = ot::Message::GetPanId(v85);
    }
    ot::MeshForwarder::PrepareMacHeaders(this, v86, 1, (uint64_t)v84, &PanId, v79, v78, v85);
    MaxPayloadunsigned __int16 Length = 0;
    if (ot::Message::GetSubType(v85))
    {
      MaxPayloadunsigned __int16 Length = ot::Mac::Frame::GetMaxPayloadLength(v86);
    }
    else
    {
      __int16 v54 = *(unsigned __int8 *)this;
      Headerunsigned __int16 Length = ot::Mac::Frame::GetHeaderLength(v86);
      __int16 v14 = ot::Mac::Frame::GetFooterLength(v86) + HeaderLength;
      MaxPayloadunsigned __int16 Length = v54 - v14;
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshForwarder", "Apply Fragmentation Size Limit %d ", v15, v16, v17, v18, v19, v20, v54 - v14);
    }
    ot::Mac::Frame::GetPayload(v86);
    ot::FrameBuilder::Init((uint64_t)v72, v21, MaxPayloadLength);
    if (v83)
    {
      unsigned __int16 v67 = 0;
      __int16 v53 = 127 - ot::Mac::Frame::GetHeaderLength(v86);
      Footerunsigned __int16 Length = ot::Mac::Frame::GetFooterLength(v86);
      unsigned __int16 v67 = v53 - (FooterLength - ot::Mac::Frame::GetFcsSize(v86) + 2);
      ot::Mac::Frame::GetPayload(v86);
      ot::FrameBuilder::Init((uint64_t)v72, v22, v67);
      ot::Lowpan::MeshHeader::Init((uint64_t)v68, v82, v81, 19);
      ot::Lowpan::MeshHeader::AppendTo((ot::Lowpan::MeshHeader *)v68, (ot::FrameBuilder *)v72);
      IgnoreError();
    }
    unsigned __int16 Offset = ot::Message::GetOffset(v85);
    if ((unsigned __int16)ot::Message::GetOffset(v85)) {
      break;
    }
    unsigned __int16 Length = 0;
    Maxunsigned __int16 Length = 0;
    ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)&v63);
    unsigned __int16 Length = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v72);
    Maxunsigned __int16 Length = ot::FrameBuilder::GetMaxLength((ot::FrameBuilder *)v72);
    ot::FrameBuilder::SetMaxLength((uint64_t)v72, MaxLength - 4);
    if (v83)
    {
      ot::Mac::Address::SetShort((uint64_t)&v63, v82);
      ot::Mac::Address::SetShort((uint64_t)&v63 + 10, v81);
    }
    else
    {
      long long v63 = *(_OWORD *)v84;
      int v64 = *((_DWORD *)v84 + 4);
    }
    unsigned __int16 v23 = (ot::Lowpan::Lowpan *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(this);
    if (ot::Lowpan::Lowpan::Compress(v23, v85, (const ot::Mac::Addresses *)&v63, (ot::FrameBuilder *)v72)) {
      __assert_rtn("PrepareDataFrame", "mesh_forwarder.cpp", 1095, "false");
    }
    ot::FrameBuilder::SetMaxLength((uint64_t)v72, MaxLength);
    __int16 v51 = ot::Message::GetLength(v85);
    unsigned __int16 v75 = v51 - ot::Message::GetOffset(v85);
    if ((v80 & 1) == 0)
    {
      int v50 = v75;
      if (v50 <= (unsigned __int16)ot::FrameBuilder::GetRemainingLength((ot::FrameBuilder *)v72)) {
        goto LABEL_42;
      }
    }
    char v71 = 1;
    if ((ot::Message::IsLinkSecurityEnabled(v85) & 1) != 0 || !ot::Message::IsSubTypeMle(v85))
    {
      if (!ot::Message::GetDatagramTag(v85))
      {
        if (!*((_WORD *)this + 24)) {
          ++*((_WORD *)this + 24);
        }
        unsigned __int16 v24 = v85;
        int v25 = *((unsigned __int16 *)this + 24);
        *((_WORD *)this + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v25 + 1;
        ot::Message::SetDatagramTag(v24, v25);
      }
      __int16 v49 = ot::Message::GetLength(v85);
      unsigned __int16 DatagramTag = ot::Message::GetDatagramTag(v85);
      ot::Lowpan::FragmentHeader::FirstFrag::Init((ot::Lowpan::FragmentHeader::FirstFrag *)v62, v49, DatagramTag);
      if (ot::FrameBuilder::Insert<ot::Lowpan::FragmentHeader::FirstFrag>((ot::FrameBuilder *)v72, Length, v62))__assert_rtn("PrepareDataFrame", "mesh_forwarder.cpp", 1132, "false"); {
      __int16 v70 = 4;
      }
      goto LABEL_42;
    }
    ot::Message::SetOffset(v85, 0);
    ot::Message::SetLinkSecurityEnabled(v85, 1);
  }
  char v71 = 1;
  __int16 v46 = ot::Message::GetLength(v85);
  unsigned __int16 v75 = v46 - ot::Message::GetOffset(v85);
  __int16 v47 = ot::Message::GetLength(v85);
  unsigned __int16 v48 = ot::Message::GetDatagramTag(v85);
  unsigned __int16 v27 = ot::Message::GetOffset(v85);
  ot::Lowpan::FragmentHeader::NextFrag::Init((ot::Lowpan::FragmentHeader::NextFrag *)v61, v47, v48, v27);
  if (ot::FrameBuilder::Append<ot::Lowpan::FragmentHeader::NextFrag>((ot::FrameBuilder *)v72, v61)) {
    __assert_rtn("PrepareDataFrame", "mesh_forwarder.cpp", 1149, "false");
  }
  __int16 v70 = 5;
  __int16 v45 = ot::Message::GetLength(v85);
  unsigned __int16 v75 = v45 - ot::Message::GetOffset(v85);
LABEL_42:
  int v44 = v75;
  if (v44 > (unsigned __int16)ot::FrameBuilder::GetRemainingLength((ot::FrameBuilder *)v72)) {
    unsigned __int16 v75 = ot::FrameBuilder::GetRemainingLength((ot::FrameBuilder *)v72) & 0xFFF8;
  }
  char v43 = v85;
  unsigned __int16 v28 = ot::Message::GetOffset(v85);
  if (ot::FrameBuilder::AppendBytesFromMessage((ot::FrameBuilder *)v72, v43, v28, v75)) {
    __assert_rtn("PrepareDataFrame", "mesh_forwarder.cpp", 1163, "false");
  }
  char v41 = v86;
  __int16 v29 = ot::FrameBuilder::GetLength((ot::FrameBuilder *)v72);
  ot::Mac::Frame::SetPayloadLength(v41, v29);
  __int16 v30 = ot::Message::GetOffset(v85);
  unsigned __int16 v73 = v75 + v30;
  int v42 = (unsigned __int16)(v75 + v30);
  if (v42 < (unsigned __int16)ot::Message::GetLength(v85)) {
    ot::Mac::Frame::SetFramePending(v86, 1);
  }
  if (v71)
  {
    bzero(v90, 0x400uLL);
    uint64_t v31 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    if (ot::MessagePool::GetIsBufferStatsEnabled(v31)) {
      ot::Message::GetBufferIDs(v85, Offset, v73 - Offset, v90);
    }
    Payloadunsigned __int16 Length = ot::Mac::Frame::GetPayloadLength(v86);
    char v40 = PayloadLength - v70;
    ot::Mac::Address::ToString(v84, (ot::StringWriter *)v89);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v89);
    ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v84 + 10), (ot::StringWriter *)v88);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v88);
    ot::Message::GetDatagramTag(v85);
    ot::Message::GetLength(v85);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "tx frag frame, len:%d, src:%s, dst:%s, tag:%d, offset:%d, dglen:%d%s", v33, v34, v35, v36, v37, v38, v40);
  }
  ot::Message::SetOffset(v85, Offset);
  return v73;
}

BOOL ot::MeshForwarder::CalcIePresent(ot::MeshForwarder *this, const ot::Message *a2, const ot::Mac::Address *a3)
{
  char v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
  BOOL v10 = ot::NeighborTable::FindNeighbor(v3, a3, 5) != 0;
  BOOL IsCslEnabled = 0;
  if (v10)
  {
    uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    BOOL IsCslEnabled = ot::Mac::Mac::IsCslEnabled(v4);
  }
  BOOL IsCstEnabled = 0;
  if (v10)
  {
    uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    BOOL IsCstEnabled = ot::Mac::Mac::IsCstEnabled(v5);
  }
  return IsCslEnabled || IsCstEnabled;
}

uint64_t ot::MeshForwarder::CalcFrameVersion(ot::MeshForwarder *this, const ot::Neighbor *a2, char a3)
{
  unsigned __int16 v5 = 4096;
  if (a3)
  {
    return 0x2000;
  }
  else if (a2 {
         && (char v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this),
  }
             ot::ChildTable::Contains(v3, a2))
         && ot::CslTxScheduler::ChildInfo::IsCslSynchronized((const ot::Neighbor *)((char *)a2 + 168)))
  {
    return 0x2000;
  }
  else if (a2 && ot::Neighbor::IsEnhAckProbingActive(a2))
  {
    return 0x2000;
  }
  else if (a2 && (ot::Neighbor::IsEnhacedAckEnabled(a2) & 1) != 0)
  {
    return 0x2000;
  }
  return v5;
}

void ot::MeshForwarder::AppendHeaderIe(ot::MeshForwarder *this, const ot::Message *a2, ot::Mac::TxFrame *a3)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  __int16 v14 = a3;
  unsigned __int8 v13 = 0;
  char v12 = 0;
  char v11 = 0;
  char v9 = 1;
  if (ot::Mac::Frame::GetType(a3) != 3)
  {
    BOOL v7 = 0;
    if (v15) {
      BOOL v7 = (unsigned __int16)ot::Message::GetLength(v15) != 0;
    }
    char v9 = v7;
  }
  char v11 = v9;
  ot::Mac::Address::Address((ot::Mac::Address *)v10);
  BOOL v6 = 0;
  if (!ot::Mac::Frame::GetDstAddr(v14, (ot::Mac::Address *)v10))
  {
    char v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    BOOL v6 = ot::NeighborTable::FindNeighbor(v3, (ot::Mac::Address *)v10, 5) != 0;
  }
  if (v6)
  {
    uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if (ot::Mac::Mac::IsCslEnabled(v4))
    {
      ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CslIe>(v14, &v13);
      IgnoreError();
      ot::Mac::TxFrame::SetCslIePresent((uint64_t)v14, 1);
      char v12 = 1;
    }
  }
  if (v6)
  {
    unsigned __int16 v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    if (ot::Mac::Mac::IsCstEnabled(v5))
    {
      ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::CstIe>(v14, &v13);
      IgnoreError();
      char v12 = 1;
    }
  }
  if (v12 & 1) != 0 && (v11)
  {
    ot::Mac::Frame::AppendHeaderIeAt<ot::Mac::Termination2Ie>(v14, &v13);
    IgnoreError();
  }
}

uint64_t ot::Message::GetChannel(ot::Message *this)
{
  return *(unsigned __int8 *)(ot::Buffer::GetMetadata(this) + 54);
}

{
  return ot::Message::GetChannel(this);
}

uint64_t ot::Message::GetPanId(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 52);
}

{
  return ot::Message::GetPanId(this);
}

uint64_t ot::FrameBuilder::GetMaxLength(ot::FrameBuilder *this)
{
  return *((unsigned __int16 *)this + 5);
}

{
  return ot::FrameBuilder::GetMaxLength(this);
}

uint64_t ot::FrameBuilder::SetMaxLength(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  return this;
}

{
  return ot::FrameBuilder::SetMaxLength(this, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Lowpan::Lowpan>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(a1);
}

uint64_t ot::FrameBuilder::GetRemainingLength(ot::FrameBuilder *this)
{
  return (unsigned __int16)(*((_WORD *)this + 5) - *((_WORD *)this + 4));
}

{
  return ot::FrameBuilder::GetRemainingLength(this);
}

uint64_t ot::Message::GetDatagramTag(ot::Message *this)
{
  return *(unsigned int *)(ot::Buffer::GetMetadata(this) + 32);
}

{
  return ot::Message::GetDatagramTag(this);
}

uint64_t ot::Message::SetDatagramTag(ot::Message *this, int a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_DWORD *)(result + 3ot::Tlv::SetType(this, 2) = a2;
  return result;
}

{
  return ot::Message::SetDatagramTag(this, a2);
}

uint64_t ot::Lowpan::FragmentHeader::FirstFrag::Init(ot::Lowpan::FragmentHeader::FirstFrag *this, __int16 a2, unsigned __int16 a3)
{
  *(_WORD *)this = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(a2 & 0x7FF | 0xC000u));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a3);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

{
  return ot::Lowpan::FragmentHeader::FirstFrag::Init(this, a2, a3);
}

uint64_t ot::FrameBuilder::Insert<ot::Lowpan::FragmentHeader::FirstFrag>(ot::FrameBuilder *a1, unsigned __int16 a2, const void *a3)
{
  return ot::FrameBuilder::InsertBytes(a1, a2, a3, 4u);
}

{
  return ot::FrameBuilder::Insert<ot::Lowpan::FragmentHeader::FirstFrag>(a1, a2, a3);
}

uint64_t ot::Lowpan::FragmentHeader::NextFrag::Init(ot::Lowpan::FragmentHeader::NextFrag *this, __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  *(_WORD *)this = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)(a2 & 0x7FF | 0xE000u));
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a3);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  *((unsigned char *)this + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = (int)a4 >> 3;
  return result;
}

{
  return ot::Lowpan::FragmentHeader::NextFrag::Init(this, a2, a3, a4);
}

uint64_t ot::FrameBuilder::Append<ot::Lowpan::FragmentHeader::NextFrag>(ot::FrameBuilder *a1, const void *a2)
{
  return ot::FrameBuilder::AppendBytes(a1, a2, 5u);
}

{
  return ot::FrameBuilder::Append<ot::Lowpan::FragmentHeader::NextFrag>(a1, a2);
}

ot::Neighbor *ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::InstanceLocator *a1, ot::Mac::Frame *a2, int a3, ot::Mac::Address *a4, char a5)
{
  char v10 = a5 & 1;
  unsigned int Neighbor = 0;
  if ((*((unsigned char *)a1 + 88) & 2) != 0)
  {
    unsigned __int16 v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v5, a4, 1);
    if (Neighbor)
    {
      if (ot::Mac::Frame::GetAckRequest(a2))
      {
        ot::Mac::Frame::GetHeaderIe(a2, 0x1Au);
        if (v6 && (v10 & 1) != 0) {
          ot::MeshForwarder::UpdateNeighborLinkFailures(a1, Neighbor, a3, 1, 0xFu);
        }
        else {
          ot::MeshForwarder::UpdateNeighborLinkFailures(a1, Neighbor, a3, 1, 4u);
        }
      }
    }
  }
  return Neighbor;
}

void ot::MeshForwarder::UpdateNeighborLinkFailures(ot::InstanceLocator *a1, ot::Neighbor *a2, int a3, char a4, unsigned __int8 a5)
{
  char v9 = a4 & 1;
  if (a3)
  {
    if (a3 == 14)
    {
      ot::Neighbor::IncrementLinkFailures((uint64_t)a2);
      if (v9)
      {
        unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
        if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16) && a5 <= (int)ot::Neighbor::GetLinkFailures(a2))
        {
          uint64_t v6 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
          ot::Mle::MleRouter::RemoveRouterLink(v6, a2);
        }
      }
    }
  }
  else
  {
    ot::Neighbor::ResetLinkFailures((uint64_t)a2);
  }
}

uint64_t ot::Neighbor::IncrementLinkFailures(uint64_t this)
{
  return this;
}

{
  return ot::Neighbor::IncrementLinkFailures(this);
}

BOOL ot::Mle::IsActiveRouter(ot::Mle *this)
{
  return (unsigned __int16)ot::Mle::ChildIdFromRloc16((ot::Mle *)(unsigned __int16)this) == 0;
}

{
  return ot::Mle::IsActiveRouter(this);
}

uint64_t ot::MeshForwarder::GetTxDelayStats(ot::MeshForwarder *this, int a2)
{
  uint64_t v6 = this;
  int v5 = a2;
  if (a2)
  {
    int Now = ot::TimerMilli::GetNow(this);
    int Value = ot::Time::GetValue((ot::Time *)&Now);
    return (Value - v5);
  }
  else
  {
    return 0;
  }
}

uint64_t ot::MeshForwarder::IsMatter(ot::MeshForwarder *this, const ot::Message *a2, ot::Ip6::Headers *a3)
{
  __int16 v14 = this;
  unsigned __int8 v13 = a2;
  char v12 = a3;
  if (!ot::Message::GetType(a2))
  {
    if (ot::Ip6::Headers::ParseFrom(v12, v13)) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if (ot::Message::GetType(v13) == 1)
  {
    unsigned __int16 v11 = 0;
    unsigned __int16 v10 = 0;
    ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v8);
    if (ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v7, v13, &v10)) {
      goto LABEL_14;
    }
    __int16 Source = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v7);
    ot::Mac::Address::SetShort((uint64_t)v8, Source);
    __int16 Destination = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v7);
    ot::Mac::Address::SetShort((uint64_t)v9, Destination);
    unsigned __int16 v11 = v10;
    if (!ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v6, v13, v10, &v10))
    {
      v11 += v10;
      if ((unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v6)) {
        goto LABEL_14;
      }
    }
    if (ot::Ip6::Headers::DecompressFrom(v12, v13, v11, (const ot::Mac::Addresses *)v8)) {
      goto LABEL_14;
    }
LABEL_11:
    if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort(v12) == 5540
      || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort(v12) == 5540)
    {
      char v15 = 1;
      return v15 & 1;
    }
LABEL_14:
    char v15 = 0;
    return v15 & 1;
  }
  char v15 = 0;
  return v15 & 1;
}

uint64_t ot::Lowpan::MeshHeader::GetSource(ot::Lowpan::MeshHeader *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::Lowpan::MeshHeader::GetSource(this);
}

uint64_t ot::Lowpan::MeshHeader::GetDestination(ot::Lowpan::MeshHeader *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return ot::Lowpan::MeshHeader::GetDestination(this);
}

uint64_t ot::MeshForwarder::GetMatterHeader(ot::MeshForwarder *this, const ot::Ip6::Headers *a2, char *a3)
{
  unsigned __int8 MatterFlags = ot::Ip6::Headers::GetMatterFlags(a2);
  unsigned __int16 MatterSessionID = ot::Ip6::Headers::GetMatterSessionID(a2);
  unsigned __int8 MatterSecurityFlags = ot::Ip6::Headers::GetMatterSecurityFlags(a2);
  int MatterCounter = ot::Ip6::Headers::GetMatterCounter(a2);
  return snprintf(a3, 0x40uLL, ", Matter F:%u, S:%u, Sec:%u, M:%u", MatterFlags, MatterSessionID, MatterSecurityFlags, MatterCounter);
}

uint64_t ot::Ip6::Headers::GetMatterFlags(ot::Ip6::Headers *this)
{
  return ot::Ip6::Matter::Header::GetFlags((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return ot::Ip6::Headers::GetMatterFlags(this);
}

uint64_t ot::Ip6::Headers::GetMatterSessionID(ot::Ip6::Headers *this)
{
  return (unsigned __int16)ot::Ip6::Matter::Header::GetSessionID((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return ot::Ip6::Headers::GetMatterSessionID(this);
}

uint64_t ot::Ip6::Headers::GetMatterSecurityFlags(ot::Ip6::Headers *this)
{
  return ot::Ip6::Matter::Header::GetSecurityFlags((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return ot::Ip6::Headers::GetMatterSecurityFlags(this);
}

uint64_t ot::Ip6::Headers::GetMatterCounter(ot::Ip6::Headers *this)
{
  return ot::Ip6::Matter::Header::GetCounter((ot::Ip6::Headers *)((char *)this + 62));
}

{
  return ot::Ip6::Headers::GetMatterCounter(this);
}

void ot::MeshForwarder::CountMatterDuplicates(uint64_t a1, ot::Ip6::Headers *a2, unsigned __int16 a3, int a4, char a5, unsigned __int8 a6)
{
  uint64_t v66 = a1;
  unsigned __int16 v65 = a2;
  unsigned __int16 v64 = a3;
  int v63 = a4;
  char v62 = a5;
  unsigned __int8 v61 = a6;
  uint64_t v51 = a1;
  uint64_t MatterSessionID = (unsigned __int16)ot::Ip6::Headers::GetMatterSessionID(a2);
  unint64_t v60 = ot::Ip6::Headers::GetMatterCounter(v65) | (unint64_t)(MatterSessionID << 32);
  unsigned int v59 = 0;
  unsigned int v58 = 0;
  unsigned int v57 = 0;
  unsigned int v56 = 0;
  unsigned int v55 = 0;
  unsigned int v54 = 0;
  char v53 = 0;
  if (v62)
  {
    if (v62 == 1)
    {
      uint64_t v14 = v51;
      int v15 = *(_DWORD *)(v51 + 200) + 1;
      *(_DWORD *)(v51 + 20ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = v15;
      unsigned int v56 = v15;
      int v16 = *(_DWORD *)(v14 + 216) + v64;
      *(_DWORD *)(v14 + 216) = v16;
      unsigned int v54 = v16;
      if (std::map<unsigned long long,ot::matterInfo>::count[abi:nn180100]((uint64_t)&mMatterTxMap, &v60))
      {
        char v53 = 1;
        __int16 v45 = &mMatterTxMap;
        int v44 = &v60;
        uint64_t v17 = (_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v60);
        uint64_t v18 = v51;
        unsigned int v19 = (*v17)++;
        unsigned int v59 = v19;
        int v20 = *(_DWORD *)(v18 + 192) + 1;
        *(_DWORD *)(v18 + 19ot::Tlv::SetType(this, 2) = v20;
        unsigned int v57 = v20;
        int v21 = *(_DWORD *)(v18 + 208) + v64;
        *(_DWORD *)(v18 + 208) = v21;
        unsigned int v55 = v21;
        int v46 = v63;
        unsigned int v58 = v46
            - *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v60) + 4);
      }
      else
      {
        *(_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v6ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 1;
      }
      int v43 = v63;
      *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterTxMap, &v60) + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v43;
    }
  }
  else
  {
    uint64_t v6 = v51;
    int v7 = *(_DWORD *)(v51 + 196) + 1;
    *(_DWORD *)(v51 + 196) = v7;
    unsigned int v56 = v7;
    int v8 = *(_DWORD *)(v6 + 212) + v64;
    *(_DWORD *)(v6 + 21ot::Tlv::SetType(this, 2) = v8;
    unsigned int v54 = v8;
    if (std::map<unsigned long long,ot::matterInfo>::count[abi:nn180100]((uint64_t)&mMatterRxMap, &v60))
    {
      char v53 = 1;
      __int16 v49 = &mMatterRxMap;
      unsigned __int16 v48 = &v60;
      char v9 = (_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v60);
      uint64_t v10 = v51;
      unsigned int v11 = (*v9)++;
      unsigned int v59 = v11;
      int v12 = *(_DWORD *)(v10 + 188) + 1;
      *(_DWORD *)(v10 + 188) = v12;
      unsigned int v57 = v12;
      int v13 = *(_DWORD *)(v10 + 204) + v64;
      *(_DWORD *)(v10 + 20ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v13;
      unsigned int v55 = v13;
      int v50 = v63;
      unsigned int v58 = v50 - *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v60) + 4);
    }
    else
    {
      *(_DWORD *)std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v6ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 1;
    }
    int v47 = v63;
    *(_DWORD *)(std::map<unsigned long long,ot::matterInfo>::operator[]((uint64_t)&mMatterRxMap, &v60) + ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = v47;
  }
  if (v53)
  {
    int v41 = v61;
    unsigned __int16 v22 = "Received";
    if (v62) {
      unsigned __int16 v22 = "Sent";
    }
    unsigned __int16 v28 = v22;
    unsigned int MatterFlags = ot::Ip6::Headers::GetMatterFlags(v65);
    unsigned int v30 = ot::Ip6::Headers::GetMatterSessionID(v65);
    unsigned int MatterSecurityFlags = ot::Ip6::Headers::GetMatterSecurityFlags(v65);
    unsigned int MatterCounter = ot::Ip6::Headers::GetMatterCounter(v65);
    uint64_t v33 = v59;
    uint64_t v34 = v58;
    uint64_t v35 = v56;
    uint64_t v36 = v57;
    uint64_t v37 = v54;
    uint64_t v38 = v55;
    unsigned int v39 = v64;
    SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(v65);
    v27[14] = v68;
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v68);
    uint64_t v40 = ot::String<(unsigned short)40>::AsCString((uint64_t)v68);
    DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(v65);
    v27[15] = v67;
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v67);
    int v42 = v27;
    v27[1] = MatterFlags;
    void v27[2] = (unsigned __int16)v30;
    v27[3] = MatterSecurityFlags;
    v27[4] = MatterCounter;
    v27[5] = v59;
    v27[6] = v58;
    v27[7] = v56;
    v27[8] = v57;
    v27[9] = v54;
    v27[10] = v55;
    v27[11] = v39;
    v27[12] = v40;
    v27[13] = ot::String<(unsigned short)40>::AsCString((uint64_t)v67);
    ot::Logger::LogInModule((ot *)"MeshForwarder", v41, "%s Matter [F:%u, S:%u, Sec:%u, M:%u, dupCnt:%u, retryDelay:%u], [totalMsgCnt:%u, totalDupCnt:%u, totalMsgBytes:%u, totalDupBytes:%u], len=%d, src=[%s], dst=[%s]", MatterSecurityFlags, v30, MatterFlags, v25, v26, (char)v28);
  }
}

uint64_t std::map<unsigned long long,ot::matterInfo>::count[abi:nn180100](uint64_t a1, void *a2)
{
  return std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__count_unique<unsigned long long>(a1, a2);
}

uint64_t std::map<unsigned long long,ot::matterInfo>::operator[](uint64_t a1, void *a2)
{
  v9[3] = a1;
  void v9[2] = a2;
  uint64_t v8 = std::forward_as_tuple[abi:nn180100]<unsigned long long const&>((uint64_t)a2);
  boost::any::holder<BOOL>::~holder(v8);
  v9[0] = std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v8, (uint64_t)&v7);
  v9[1] = v2;
  std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>::operator->[abi:nn180100]((uint64_t)v9);
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  return v3 + 8;
}

uint64_t ot::MeshForwarder::AddHomeKitMessageTxStatus(ot::MeshForwarder *this, char a2)
{
  ot::SuccessRateTracker::AddSample((_WORD *)this + 116, a2 & 1, 0x80u);
  if (ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 232)) % 0x64)
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 232));
    unsigned int v3 = result / 0x64 + 1;
  }
  else
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 232));
    unsigned int v3 = result / 0x64;
  }
  *((_DWORD *)this + 5ot::Tlv::SetType(this, 7) = v3;
  return result;
}

uint64_t ot::MeshForwarder::AddMatterMessageTxStatus(ot::MeshForwarder *this, char a2)
{
  ot::SuccessRateTracker::AddSample((_WORD *)this + 117, a2 & 1, 0x80u);
  if (ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 234)) % 0x64)
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 234));
    unsigned int v3 = result / 0x64 + 1;
  }
  else
  {
    uint64_t result = ot::SuccessRateTracker::GetFailureRatePercent((ot::MeshForwarder *)((char *)this + 234));
    unsigned int v3 = result / 0x64;
  }
  *((_DWORD *)this + 56) = v3;
  return result;
}

uint64_t ot::MeshForwarder::ContainsMatterEidList(ot::MeshForwarder *this, const ot::Ip6::Address *a2)
{
  char v7 = this;
  uint64_t v6 = a2;
  if (std::vector<ot::Ip6::Address>::size[abi:nn180100](mMatterEidList))
  {
    v5[1] = mMatterEidList;
    v5[0] = std::vector<ot::Ip6::Address>::begin[abi:nn180100](mMatterEidList);
    uint64_t v4 = std::vector<ot::Ip6::Address>::end[abi:nn180100]((uint64_t)mMatterEidList);
    while (std::operator!=[abi:nn180100]<ot::Ip6::Address *>((uint64_t)v5, (uint64_t)&v4))
    {
      long long v3 = *(_OWORD *)std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100]((uint64_t)v5);
      if (ot::Equatable<ot::Ip6::Address>::operator==(v6, &v3))
      {
        char v8 = 1;
        return v8 & 1;
      }
      std::__wrap_iter<ot::Ip6::Address *>::operator++[abi:nn180100](v5);
    }
    char v8 = 0;
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t std::vector<ot::Ip6::Address>::size[abi:nn180100](void *a1)
{
  return (a1[1] - *a1) / 16;
}

uint64_t std::vector<ot::Ip6::Address>::begin[abi:nn180100](uint64_t *a1)
{
  return std::vector<ot::Ip6::Address>::__make_iter[abi:nn180100]((uint64_t)a1, *a1);
}

uint64_t std::vector<ot::Ip6::Address>::end[abi:nn180100](uint64_t a1)
{
  return std::vector<ot::Ip6::Address>::__make_iter[abi:nn180100](a1, *(void *)(a1 + 8));
}

BOOL std::operator!=[abi:nn180100]<ot::Ip6::Address *>(uint64_t a1, uint64_t a2)
{
  return !std::operator==[abi:nn180100]<ot::Ip6::Address *>(a1, a2);
}

uint64_t std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100](uint64_t a1)
{
  return *(void *)a1;
}

void *std::__wrap_iter<ot::Ip6::Address *>::operator++[abi:nn180100](void *result)
{
  *result += 16;
  return result;
}

uint64_t ot::MeshForwarder::UpdateMatterEidList(ot::MeshForwarder *this, const ot::Ip6::Headers *a2)
{
  uint64_t v6 = this;
  int v5 = a2;
  if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort(a2) == 5540)
  {
    __n128 v4 = *(__n128 *)ot::Ip6::Headers::GetSourceAddress(v5);
  }
  else if ((unsigned __int16)ot::Ip6::Headers::GetDestinationPort(v5) == 5540)
  {
    __n128 v4 = *(__n128 *)ot::Ip6::Headers::GetDestinationAddress(v5);
  }
  uint64_t result = ot::MeshForwarder::ContainsMatterEidList(this, (const ot::Ip6::Address *)&v4);
  if ((result & 1) == 0) {
    return std::vector<ot::Ip6::Address>::push_back[abi:nn180100](mMatterEidList, &v4);
  }
  return result;
}

uint64_t std::vector<ot::Ip6::Address>::push_back[abi:nn180100](uint64_t *a1, __n128 *a2)
{
  unint64_t v5 = a1[1];
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  if (v5 >= *v2)
  {
    uint64_t result = std::vector<ot::Ip6::Address>::__push_back_slow_path<ot::Ip6::Address const&>(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<ot::Ip6::Address>::__construct_one_at_end[abi:nn180100]<ot::Ip6::Address const&>((uint64_t)a1, a2);
    uint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
  return result;
}

void ot::MeshForwarder::UpdateMatterAddressQuerryCnt(ot::MeshForwarder *this, const ot::Ip6::Address *a2)
{
  if (ot::MeshForwarder::ContainsMatterEidList(this, a2)) {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshForwarder", "mIpCounters.mMatterAddressQueryCnt: %u", v2, v3, v4, v5, v6, v7, ++*((_DWORD *)this + 55));
  }
}

void std::vector<ot::Ip6::Address>::clear[abi:nn180100](uint64_t *a1)
{
}

void std::map<unsigned long long,ot::matterInfo>::clear[abi:nn180100](uint64_t a1)
{
}

uint64_t ot::MeshForwarder::GetAddressAndPortInfo(uint64_t a1, ot::Message *a2, char *a3, char a4)
{
  uint64_t v49 = a1;
  unsigned __int16 v48 = a2;
  __s = a3;
  v46[71] = a4;
  unsigned int v45 = 6;
  if (!ot::Message::GetType(a2)
    && !ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v46, a2))
  {
    unsigned int v45 = 0;
    if (ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v46))
    {
      __str = &__s[strlen(__s)];
      size_t __size = 256 - strlen(__s);
      SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v57);
      uint64_t v40 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v57);
      DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v56);
      int v41 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v56);
      unsigned __int16 Checksum = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(__str, __size, "IPv6 ICMP src=[%s], dst=[%s], chksum:%04x", v40, v41, Checksum);
    }
    else if (ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v46))
    {
      unsigned int v39 = &__s[strlen(__s)];
      size_t v38 = 256 - strlen(__s);
      uint64_t v7 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v7, (ot::StringWriter *)v55);
      uint64_t v34 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v55);
      Source__int16 Port = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v46);
      char v8 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v8, (ot::StringWriter *)v54);
      uint64_t v36 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v54);
      unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v46);
      unsigned __int16 v9 = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(v39, v38, "IPv6 UDP src=[%s]:%d, dst=[%s]:%d,  chksum:%04x", v34, SourcePort, v36, DestinationPort, v9);
    }
    else if (ot::Ip6::Headers::IsTcp((ot::Ip6::Headers *)v46))
    {
      uint64_t v33 = &__s[strlen(__s)];
      size_t v32 = 256 - strlen(__s);
      uint64_t v10 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v10, (ot::StringWriter *)v53);
      unsigned __int16 v28 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v53);
      unsigned __int16 v29 = ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v46);
      unsigned int v11 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v11, (ot::StringWriter *)v52);
      unsigned int v30 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v52);
      unsigned __int16 v31 = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v46);
      unsigned __int16 v12 = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(v33, v32, "IPv6 TCP src=[%s]:%d, dst=[%s]:%d, chksum:%04x", v28, v29, v30, v31, v12);
    }
    else if (ot::Ip6::Headers::IsHopOpts((ot::Ip6::Headers *)v46))
    {
      unsigned __int16 v27 = &__s[strlen(__s)];
      size_t v26 = 256 - strlen(__s);
      unsigned int v19 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v19, (ot::StringWriter *)v51);
      unsigned __int16 v24 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v51);
      int v20 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v46);
      ot::Ip6::Address::ToString(v20, (ot::StringWriter *)v50);
      uint64_t v25 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v50);
      unsigned __int16 v21 = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v46);
      snprintf(v27, v26, "IPv6 HopOpts src=[%s], dst=[%s], chksum:%04x", v24, v25, v21);
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshForwarder", "MeshForwarder::GetAddressAndPortInfo packet type is unknown ", v13, v14, v15, v16, v17, v18, v23);
      return 6;
    }
  }
  return v45;
}

BOOL ot::Ip6::Headers::IsHopOpts(ot::Ip6::Headers *this)
{
  return ot::Ip6::Headers::GetIpProto(this) == 0;
}

{
  return ot::Ip6::Headers::IsHopOpts(this);
}

BOOL ot::MeshForwarder::IsTxThreadControl(uint64_t a1, ot::Message *a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  if (ot::Message::GetType(a2) != 2 && ot::Message::GetType(a2) != 3) {
    return !ot::Message::GetType(a2)
  }
        && !ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v5, a2)
        && ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v5)
        && ((unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v5), DestinationPort == 19788)
         || DestinationPort == 61631);
  return 1;
}

BOOL ot::MeshForwarder::IsTxIcmpError(uint64_t a1, ot::Message *a2)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  if (ot::Message::GetType(a2)
    || ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v12, a2)
    || !ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v12)
    || ot::Message::Read<ot::Ip6::Icmp::Header>(a2, 0x28u, v11))
  {
    return 0;
  }
  else
  {
    char Type = ot::Ip6::Icmp::Header::GetType((ot::Ip6::Icmp::Header *)v11);
    ot::Ip6::Icmp::Header::IsError((ot::Ip6::Icmp::Header *)v11);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "IxTxIcmpError type=%d isError=%d", v2, v3, v4, v5, v6, v7, Type);
    return ot::Ip6::Icmp::Header::IsError((ot::Ip6::Icmp::Header *)v11);
  }
}

_DWORD *ot::MeshForwarder::UpdateTriggerBasedNeighborInfo(_DWORD *this, ot::Neighbor *a2, char a3, char a4, char a5)
{
  char v7 = a3 & 1;
  char v6 = a4 & 1;
  char v5 = a5 & 1;
  if (a2)
  {
    this = (_DWORD *)ot::Neighbor::GetTriggerBasedStatsInfo(a2);
    if (v5)
    {
      ++this[2];
      if (v7) {
        ++this[13];
      }
    }
    else
    {
      ++this[4];
      if (v7) {
        ++this[14];
      }
    }
    if (v6) {
      ++*this;
    }
  }
  return this;
}

uint64_t ot::Neighbor::GetTriggerBasedStatsInfo(ot::Neighbor *this)
{
  return (uint64_t)this + 72;
}

{
  return ot::Neighbor::GetTriggerBasedStatsInfo(this);
}

uint64_t ot::MeshForwarder::UpdateTxDelayTriggerBasedStats(uint64_t this, unsigned int a2)
{
  *(void *)(this + 272) += a2;
  ++*(_DWORD *)(this + 280);
  if (a2 > *(_DWORD *)(this + 256)) {
    *(_DWORD *)(this + 256) = a2;
  }
  if (a2 < *(_DWORD *)(this + 260) || *(_DWORD *)(this + 280) == 1) {
    *(_DWORD *)(this + 26ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  }
  *(_DWORD *)(this + 26ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = *(void *)(this + 272) / (unint64_t)*(unsigned int *)(this + 280);
  if (*(void *)(this + 272) % (unint64_t)*(unsigned int *)(this + 280) > *(_DWORD *)(this + 280) / 2u) {
    ++*(_DWORD *)(this + 264);
  }
  return this;
}

ot::TimerMilli *ot::MeshForwarder::UpdateTxDelayStats(ot::TimerMilli *this, int a2)
{
  char v7 = this;
  int v6 = a2;
  uint64_t v3 = this;
  if (a2)
  {
    unsigned int v5 = 0;
    int Now = ot::TimerMilli::GetNow(this);
    int Value = ot::Time::GetValue((ot::Time *)&Now);
    unsigned int v5 = Value - v6;
    *((void *)v3 + 21) += (Value - v6);
    ++*((_DWORD *)v3 + 44);
    if (v5 > *((_DWORD *)v3 + 38)) {
      *((_DWORD *)v3 + 38) = v5;
    }
    if (v5 < *((_DWORD *)v3 + 39) || *((_DWORD *)v3 + 44) == 1) {
      *((_DWORD *)v3 + 39) = v5;
    }
    *((_DWORD *)v3 + 4ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = *((void *)v3 + 21) / (unint64_t)*((unsigned int *)v3 + 44);
    if (*((void *)v3 + 21) % (unint64_t)*((unsigned int *)v3 + 44) > *((_DWORD *)v3 + 44) / 2u) {
      ++*((_DWORD *)v3 + 40);
    }
    return (ot::TimerMilli *)ot::MeshForwarder::UpdateTxDelayTriggerBasedStats((uint64_t)v3, v5);
  }
  return this;
}

ot::Mac::Address *ot::MeshForwarder::HandleSentFrame(unsigned char *a1, ot::Mac::Frame *a2, int a3)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  int v15 = a3;
  int updated = 0;
  uint64_t result = ot::Mac::Address::Address((ot::Mac::Address *)v13);
  BOOL v12 = 1;
  if (v15)
  {
    BOOL v12 = 1;
    if (v15 != 15)
    {
      BOOL v12 = 1;
      if (v15 != 11)
      {
        BOOL v12 = 1;
        if (v15 != 14) {
          BOOL v12 = v15 == 29;
        }
      }
    }
  }
  if (!v12) {
    __assert_rtn("HandleSentFrame", "mesh_forwarder.cpp", 1735, "(aError == kErrorNone) || (aError == kErrorChannelAccessFailure) || (aError == kErrorAbort) || (aError == kErrorNoAck) || (aError == kErrorDuplicated)");
  }
  a1[88] &= ~8u;
  if ((a1[88] & 2) != 0)
  {
    if ((a1[88] & 0x10) == 0 || v15)
    {
      a1[88] &= ~0x10u;
    }
    else
    {
      ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 96), 8u);
      char v4 = ot::ToUlong(8);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "Start tx delay timer for %lu msec", v5, v6, v7, v8, v9, v10, v4);
    }
    if (!ot::Mac::Frame::IsEmpty(v16))
    {
      ot::Mac::Frame::GetDstAddr(v16, (ot::Mac::Address *)v13);
      IgnoreError();
      int updated = ot::MeshForwarder::UpdateNeighborOnSentFrame((ot::InstanceLocator *)a1, v16, v15, (ot::Mac::Address *)v13, 0);
    }
    return (ot::Mac::Address *)ot::MeshForwarder::UpdateSendMessage((uint64_t)a1, v15, (ot::Mac::Address *)v13, updated);
  }
  return result;
}

uint64_t ot::MeshForwarder::UpdateSendMessage(uint64_t a1, int a2, ot::Mac::Address *a3, ot::Neighbor *a4)
{
  uint64_t v32 = a1;
  int v31 = a2;
  unsigned int v30 = a3;
  unsigned __int16 v29 = a4;
  int v28 = a2;
  if (*(void *)(a1 + 56))
  {
    if ((ot::Message::IsDirectTransmission(*(ot::Message **)(a1 + 56)) & 1) == 0) {
      __assert_rtn("UpdateSendMessage", "mesh_forwarder.cpp", 1771, "mSendMessage->IsDirectTransmission()");
    }
    if (v31)
    {
      ot::Message::SetTxSuccess(*(ot::Message **)(a1 + 56), 0);
      *(_WORD *)(a1 + 5ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = ot::Message::GetLength(*(ot::Message **)(a1 + 56));
    }
    int v23 = *(unsigned __int16 *)(a1 + 50);
    if (v23 >= (unsigned __int16)ot::Message::GetLength(*(ot::Message **)(a1 + 56)))
    {
      int v28 = v31;
      ot::Message::ClearDirectTransmission(*(ot::Message **)(a1 + 56));
      ot::Message::SetOffset(*(ot::Message **)(a1 + 56), 0);
      if (v29)
      {
        LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v29);
        char TxSuccess = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 56));
        ot::LinkQualityInfo::AddMessageTxStatus(LinkInfo, TxSuccess & 1);
        if (ot::MeshForwarder::IsMatter((ot::MeshForwarder *)a1, *(const ot::Message **)(a1 + 56), (ot::Ip6::Headers *)v27))
        {
          unsigned __int16 v21 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v29);
          char v5 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 56));
          ot::LinkQualityInfo::AddMatterMessageTxStatus(v21, v5 & 1);
          char v6 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 56));
          ot::MeshForwarder::AddMatterMessageTxStatus((ot::MeshForwarder *)a1, v6 & 1);
        }
        if ((unsigned __int16)ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v27) == 5683
          || (unsigned __int16)ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v27) == 5683)
        {
          int v20 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v29);
          char v7 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 56));
          ot::LinkQualityInfo::AddHomeKitMessageTxStatus(v20, v7 & 1);
          char v8 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 56));
          ot::MeshForwarder::AddHomeKitMessageTxStatus((ot::MeshForwarder *)a1, v8 & 1);
        }
      }
      uint64_t v9 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>((ot::InstanceLocator *)a1);
      ot::Utils::HistoryTracker::RecordTxMessage(v9, *(const ot::Message **)(a1 + 56), v30);
      ot::MeshForwarder::LogMessage((ot::MeshForwarder *)a1, 1u, *(ot::Message **)(a1 + 56), v28, v30);
      if (!ot::Message::GetType(*(ot::Message **)(a1 + 56)))
      {
        if (ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 56)))
        {
          ++*(_DWORD *)(a1 + 136);
          ++*(_DWORD *)(a1 + 240);
          memcpy(__dst, *(const void **)(a1 + 56), sizeof(__dst));
          if (!ot::MeshForwarder::IsTxThreadControl(a1, (ot::Message *)__dst))
          {
            ++*(_DWORD *)(a1 + 180);
            ++*(_DWORD *)(a1 + 284);
          }
          int Timestamp = ot::Message::GetTimestamp(*(ot::Message **)(a1 + 56));
          int Value = ot::Time::GetValue((ot::Time *)&Timestamp);
          ot::MeshForwarder::UpdateTxDelayStats((ot::TimerMilli *)a1, Value);
        }
        else
        {
          ++*(_DWORD *)(a1 + 144);
          ++*(_DWORD *)(a1 + 248);
          memcpy(v35, *(const void **)(a1 + 56), sizeof(v35));
          if (!ot::MeshForwarder::IsTxThreadControl(a1, (ot::Message *)v35))
          {
            ++*(_DWORD *)(a1 + 184);
            ++*(_DWORD *)(a1 + 288);
          }
          int v25 = ot::Message::GetTimestamp(*(ot::Message **)(a1 + 56));
          int v11 = ot::Time::GetValue((ot::Time *)&v25);
          ot::MeshForwarder::UpdateTxDelayStats((ot::TimerMilli *)a1, v11);
        }
        uint64_t v17 = v29;
        memcpy(v34, *(const void **)(a1 + 56), sizeof(v34));
        BOOL IsTxThreadControl = ot::MeshForwarder::IsTxThreadControl(a1, (ot::Message *)v34);
        memcpy(v33, *(const void **)(a1 + 56), sizeof(v33));
        BOOL IsTxIcmpError = ot::MeshForwarder::IsTxIcmpError(a1, (ot::Message *)v33);
        char v12 = ot::Message::GetTxSuccess(*(ot::Message **)(a1 + 56));
        ot::MeshForwarder::UpdateTriggerBasedNeighborInfo((_DWORD *)a1, v17, IsTxThreadControl, IsTxIcmpError, v12 & 1);
      }
      Subchar Type = ot::Message::GetSubType(*(ot::Message **)(a1 + 56));
      if (SubType == 2)
      {
        uint64_t v13 = (unsigned __int8 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>((ot::InstanceLocator *)a1);
        ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(v13, *(ot::Message **)(a1 + 56));
      }
      else if (SubType == 10)
      {
        uint64_t v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)a1);
        ot::Mle::Mle::HandleChildIdRequestTxDone(v14, *(ot::Message **)(a1 + 56));
      }
      ot::MeshForwarder::RemoveMessageIfNoPendingTx((ot::MeshForwarder *)a1, *(ot::Message **)(a1 + 56));
    }
    else
    {
      ot::Message::SetOffset(*(ot::Message **)(a1 + 56), *(_WORD *)(a1 + 50));
    }
  }
  return ot::Tasklet::Post((ot::Tasklet *)(a1 + 120));
}

uint64_t ot::Utils::HistoryTracker::RecordTxMessage(ot::Utils::HistoryTracker *this, const ot::Message *a2, const ot::Mac::Address *a3)
{
  return ot::Utils::HistoryTracker::RecordMessage(this, a2, a3, 1);
}

{
  return ot::Utils::HistoryTracker::RecordTxMessage(this, a2, a3);
}

uint64_t ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::MeshForwarder *this, ot::Message *a2)
{
  char v4 = 0;
  if ((ot::Message::IsDirectTransmission(a2) & 1) == 0 && (ot::Message::IsChildPending(a2) & 1) == 0)
  {
    if (*((ot::Message **)this + 7) == a2)
    {
      *((void *)this + ot::Tlv::SetType(this, 7) = 0;
      *((_WORD *)this + 25) = 0;
    }
    ot::PriorityQueue::DequeueAndFree((ot::MeshForwarder *)((char *)this + 8), a2);
    char v4 = 1;
  }
  return v4 & 1;
}

void ot::MeshForwarder::HandleReceivedFrame(ot::MeshForwarder *this, ot::Mac::RxFrame *a2)
{
  int v31 = this;
  unsigned int v30 = a2;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v27);
  if ((*((unsigned char *)this + 88) & 2) != 0)
  {
    int SrcAddr = ot::Mac::Frame::GetSrcAddr(v30, (ot::Mac::Address *)v27);
    if (!SrcAddr)
    {
      int SrcAddr = ot::Mac::Frame::GetDstAddr(v30, (ot::Mac::Address *)&v28);
      if (!SrcAddr)
      {
        ot::ThreadLinkInfo::SetFrom((ot::ThreadLinkInfo *)v29, v30);
        ot::Mac::Frame::GetPayload(v30);
        uint64_t v21 = v2;
        Payloadunsigned __int16 Length = ot::Mac::Frame::GetPayloadLength(v30);
        ot::Data<(ot::DataLengthType)1>::Init((uint64_t)v26, v21, PayloadLength);
        unsigned __int16 v22 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
        char IsLinkSecurityEnabled = ot::ThreadLinkInfo::IsLinkSecurityEnabled((ot::ThreadLinkInfo *)v29);
        ot::SupervisionListener::UpdateOnReceive(v22, (const ot::Mac::Address *)v27, IsLinkSecurityEnabled & 1);
        int Type = ot::Mac::Frame::GetType(v30);
        if (Type)
        {
          if (Type == 1)
          {
            if (ot::Lowpan::MeshHeader::IsMeshHeader((ot::Lowpan::MeshHeader *)v26, v5))
            {
              char v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
              if (ot::Mle::Mle::IsMinimalEndDevice(v7))
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshForwarder", "Frame with Mesh Header received in SED/SSED Mode, dropping", v8, v9, v10, v11, v12, v13, v21);
                int SrcAddr = 2;
              }
              else
              {
                ot::MeshForwarder::HandleMesh(this, (ot::FrameData *)v26, (const ot::Mac::Address *)v27, (const ot::ThreadLinkInfo *)v29);
              }
            }
            else if (ot::Lowpan::FragmentHeader::IsFragmentHeader((ot::Lowpan::FragmentHeader *)v26, v6))
            {
              ot::MeshForwarder::HandleFragment(this, (ot::FrameData *)v26, (const ot::Mac::Addresses *)v27, (const ot::ThreadLinkInfo *)v29);
            }
            else if (ot::Lowpan::Lowpan::IsLowpanHc((uint64_t)v26, v14))
            {
              ot::MeshForwarder::HandleLowpanHC(this, (const ot::FrameData *)v26, (const ot::Mac::Addresses *)v27, (const ot::ThreadLinkInfo *)v29);
            }
            else if ((unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v26))
            {
              int SrcAddr = 32;
            }
            else
            {
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshForwarder", "Possibly a Supervision Frame", v15, v16, v17, v18, v19, v20, v21);
              ot::MeshForwarder::LogFrame((uint64_t)this, (char)"Received empty payload frame", v30, 0);
            }
          }
          else
          {
            int SrcAddr = 2;
          }
        }
      }
    }
  }
  else
  {
    int SrcAddr = 13;
  }
  if (SrcAddr) {
    ot::MeshForwarder::LogFrame((uint64_t)this, (char)"Dropping rx frame", v30, SrcAddr);
  }
  else {
    ot::MeshForwarder::LogFrame((uint64_t)this, (char)"rx frame", v30, 0);
  }
}

uint64_t ot::ThreadLinkInfo::IsLinkSecurityEnabled(ot::ThreadLinkInfo *this)
{
  return *((unsigned char *)this + 5) & 1;
}

{
  return ot::ThreadLinkInfo::IsLinkSecurityEnabled(this);
}

void ot::MeshForwarder::HandleFragment(ot::MeshForwarder *this, ot::FrameData *a2, const ot::Mac::Addresses *a3, const ot::ThreadLinkInfo *a4)
{
  unsigned int v88 = this;
  v87 = a2;
  BOOL v86 = a3;
  v85 = a4;
  int v84 = 0;
  unsigned __int16 v82 = 0;
  uint64_t Bytes = ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v87);
  int v84 = ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v83, v87);
  if (v84)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "Error while converting frame to packet fragment", v4, v5, v6, v7, v8, v9, v54);
  }
  else if ((unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v83))
  {
    v78[2] = (char *)this + 40;
    v78[0] = ot::MessageQueue::begin((ot::MeshForwarder *)((char *)this + 40));
    v78[1] = v37;
    v77[0] = ot::MessageQueue::end((ot::MeshForwarder *)((char *)this + 40));
    v77[1] = v38;
    while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v78, v77))
    {
      v76 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v78);
      int v73 = (unsigned __int16)ot::Message::GetLength(v76);
      if (v73 == (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramSize((ot::Lowpan::FragmentHeader *)v83))
      {
        int DatagramTag = ot::Message::GetDatagramTag(v76);
        if (DatagramTag == (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v83))
        {
          int Offset = (unsigned __int16)ot::Message::GetOffset(v76);
          if (Offset == (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v83))
          {
            unsigned __int16 v69 = ot::Message::GetOffset(v76);
            int v70 = (unsigned __int16)ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v87) + v69;
            if (v70 <= (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramSize((ot::Lowpan::FragmentHeader *)v83))
            {
              int v68 = ot::Message::IsLinkSecurityEnabled(v76) & 1;
              if (v68 == (ot::ThreadLinkInfo::IsLinkSecurityEnabled(v85) & 1))
              {
                unsigned __int16 v82 = v76;
                break;
              }
            }
          }
        }
      }
      ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v78, v39);
    }
    if ((ot::MeshForwarder::GetRxOnWhenIdle(this) & 1) == 0
      && !v82
      && (ot::ThreadLinkInfo::IsLinkSecurityEnabled(v85) & 1) != 0)
    {
      ot::MeshForwarder::ClearReassemblyList(this);
    }
    if (v82)
    {
      unsigned __int16 v64 = v82;
      unsigned __int16 v46 = ot::Message::GetOffset(v82);
      ot::Message::WriteData<(ot::DataLengthType)1>(v64, v46, (uint64_t)v87);
      unsigned __int16 v65 = v82;
      unsigned __int16 v47 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v87);
      ot::Message::MoveOffset(v65, v47);
      uint64_t v66 = v82;
      char Rss = ot::ThreadLinkInfo::GetRss(v85);
      ot::Message::AddRss(v66, Rss);
      unsigned __int16 v67 = v82;
      Lqunsigned int i = ot::ThreadLinkInfo::GetLqi(v85);
      ot::Message::AddLqi(v67, Lqi);
      ot::Message::SetTimestampToNow(v82);
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "Received fragment with a non-matching fragmentation offset, tag and security", v40, v41, v42, v43, v44, v45, v54);
      int v84 = 2;
    }
  }
  else
  {
    Datagramunsigned __int16 Size = ot::Lowpan::FragmentHeader::GetDatagramSize((ot::Lowpan::FragmentHeader *)v83);
    ot::MeshForwarder::UpdateRoutes(this, v87, v86);
    int v84 = ot::MeshForwarder::FrameToMessage(this, v87, DatagramSize, v86, &v82);
    if (v84)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "HandleFragment() Error while converting frame to message", v10, v11, v12, v13, v14, v15, v54);
    }
    else if (DatagramSize >= (int)(unsigned __int16)ot::Message::GetLength(v82))
    {
      int v84 = ot::Message::SetLength(v82, DatagramSize);
      if (v84)
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "HandleFragment() Failed to set message's length", v22, v23, v24, v25, v26, v27, v54);
      }
      else
      {
        v74 = v82;
        unsigned __int16 v28 = ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v83);
        ot::Message::SetDatagramTag(v74, v28);
        ot::Message::SetTimestampToNow(v82);
        ot::Message::SetFirstFragTimestampToNow(v82);
        ot::Message::SetLinkInfo(v82, v85);
        unsigned __int16 v29 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
        if (ot::Ip6::Filter::Accept(v29, v82))
        {
          ot::MeshForwarder::SendIcmpErrorIfDstUnreach(this, v82, v86);
          if (ot::MeshForwarder::GetRxOnWhenIdle(this) & 1) == 0 && (ot::Message::IsLinkSecurityEnabled(v82)) {
            ot::MeshForwarder::ClearReassemblyList(this);
          }
          ot::MessageQueue::Enqueue((ot::MeshForwarder *)((char *)this + 40), v82);
          uint64_t v36 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
          ot::TimeTicker::RegisterReceiver(v36, 0);
        }
        else
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "Received fragment was filtered out by IPv6 filter", v30, v31, v32, v33, v34, v35, v54);
          int v84 = 2;
        }
      }
    }
    else
    {
      int v84 = 6;
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "HandleFragment() Datagram size less than message", v16, v17, v18, v19, v20, v21, v54);
    }
  }
  if (v84)
  {
    int v55 = v84;
    unsigned __int16 v56 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v87);
    unsigned int v57 = v86;
    char IsLinkSecurityEnabled = ot::ThreadLinkInfo::IsLinkSecurityEnabled(v85);
    ot::MeshForwarder::LogFragmentFrameDrop((uint64_t)this, v55, v56, v57, (ot::Lowpan::FragmentHeader *)v83, IsLinkSecurityEnabled & 1);
    otDumpNotePlat((ot *)"[Dropped frame]", Bytes, Length);
  }
  else
  {
    bzero(v89, 0x400uLL);
    int v50 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    if (ot::MessagePool::GetIsBufferStatsEnabled(v50))
    {
      int v63 = v82;
      Datagramint Offset = ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v83);
      unsigned __int16 v51 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v87);
      ot::Message::GetBufferIDs(v63, DatagramOffset, v51, v89);
    }
    int v59 = v84;
    unsigned __int16 v60 = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v87);
    unsigned __int8 v61 = v86;
    char v52 = ot::ThreadLinkInfo::IsLinkSecurityEnabled(v85);
    ot::MeshForwarder::LogFragmentFrame((uint64_t)this, v59, v60, v61, (ot::Lowpan::FragmentHeader *)v83, v52 & 1, (uint64_t)v89);
    int v58 = (unsigned __int16)ot::Message::GetOffset(v82);
    if (v58 >= (unsigned __int16)ot::Message::GetLength(v82))
    {
      ot::MessageQueue::Dequeue((ot::MeshForwarder *)((char *)this + 40), v82);
      ot::MeshForwarder::HandleDatagram(this, v82, v85, v86);
      IgnoreError();
    }
  }
}

void ot::MeshForwarder::HandleLowpanHC(ot::MeshForwarder *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3, const ot::ThreadLinkInfo *a4)
{
  uint64_t v23 = this;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  int v19 = 0;
  uint64_t v18 = 0;
  ot::MeshForwarder::UpdateRoutes(this, a2, a3);
  int v19 = ot::MeshForwarder::FrameToMessage(this, v22, 0, v21, &v18);
  if (!v19)
  {
    ot::Message::SetLinkInfo(v18, v20);
    uint64_t v4 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
    if (ot::Ip6::Filter::Accept(v4, v18))
    {
      uint64_t v5 = (ot::Ip6::Filter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Filter>(this);
      if (ot::Ip6::Filter::Accept(v5, v18))
      {
        ot::MeshForwarder::SendIcmpErrorIfDstUnreach(this, v18, v21);
      }
      else
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "Received lowpan HC was filtered out by IPv6 filter", v6, v7, v8, v9, v10, v11, v13);
        int v19 = 2;
      }
    }
    else
    {
      int v19 = 2;
    }
  }
  if (v19)
  {
    int v14 = v19;
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v22);
    uint64_t v16 = v21;
    char IsLinkSecurityEnabled = ot::ThreadLinkInfo::IsLinkSecurityEnabled(v20);
    ot::MeshForwarder::LogLowpanHcFrameDrop((uint64_t)this, v14, Length, (uint64_t)v16, IsLinkSecurityEnabled & 1);
    if (v18) {
      ot::Message::Free(v18);
    }
  }
  else
  {
    ot::MeshForwarder::HandleDatagram(this, v18, v20, v21);
    IgnoreError();
  }
}

void ot::MeshForwarder::LogFrame(uint64_t a1, char a2, ot::Mac::Frame *a3, int a4)
{
  if (a4)
  {
    ot::ErrorToString(a4);
    ot::Mac::Frame::ToInfoString(a3, (ot::StringWriter *)v19);
    ot::String<(unsigned short)150>::AsCString((uint64_t)v19);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "%s, aError:%s, %s", v4, v5, v6, v7, v8, v9, a2);
  }
  else
  {
    ot::Mac::Frame::ToInfoString(a3, (ot::StringWriter *)v18);
    ot::String<(unsigned short)150>::AsCString((uint64_t)v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshForwarder", "%s, %s", v10, v11, v12, v13, v14, v15, a2);
  }
}

uint64_t ot::Lowpan::FragmentHeader::GetDatagramSize(ot::Lowpan::FragmentHeader *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::Lowpan::FragmentHeader::GetDatagramSize(this);
}

uint64_t ot::MeshForwarder::FrameToMessage(ot::MeshForwarder *this, const ot::FrameData *a2, __int16 a3, const ot::Mac::Addresses *a4, ot::Message **a5)
{
  uint64_t v20 = this;
  int v19 = a2;
  __int16 v18 = a3;
  uint64_t v17 = a4;
  uint64_t v16 = a5;
  Framechar Priority = 0;
  long long v14 = *(_OWORD *)a2;
  BOOL v13 = 0;
  Framechar Priority = ot::MeshForwarder::GetFramePriority(this, (const ot::FrameData *)&v14, a4, &v13);
  if (!FramePriority)
  {
    uint64_t v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
    ot::Message::Settings::Settings(v12, v13);
    uint64_t v5 = ot::MessagePool::Allocate(v10, 0, 0, (ot::Message::Settings *)v12);
    const ot::Mac::Address *v16 = v5;
    if (*v16)
    {
      uint64_t v6 = (ot::Lowpan::Lowpan *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Lowpan::Lowpan>(this);
      Framechar Priority = ot::Lowpan::Lowpan::Decompress(v6, *v16, v17, (ot::FrameData *)&v14, v18);
      if (!FramePriority)
      {
        Framechar Priority = ot::Message::AppendData<(ot::DataLengthType)1>(*v16, (uint64_t)&v14);
        if (!FramePriority)
        {
          uint64_t v9 = *v16;
          unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)&v14);
          ot::Message::MoveOffset(v9, Length);
        }
      }
    }
    else
    {
      return 3;
    }
  }
  return FramePriority;
}

uint64_t ot::Lowpan::FragmentHeader::GetDatagramTag(ot::Lowpan::FragmentHeader *this)
{
  return *((unsigned __int16 *)this + 1);
}

{
  return ot::Lowpan::FragmentHeader::GetDatagramTag(this);
}

uint64_t ot::Message::SetFirstFragTimestampToNow(ot::Message *this)
{
  int Now = ot::TimerMilli::GetNow(this);
  return ot::Message::SetFirstFragTimestamp(this, Now);
}

{
  return ot::Message::SetFirstFragTimestampToNow(this);
}

BOOL ot::MeshForwarder::ClearReassemblyList(ot::MeshForwarder *this)
{
  uint64_t v10 = this;
  uint64_t v9 = (ot::MeshForwarder *)((char *)this + 40);
  v8[0] = ot::MessageQueue::begin((ot::MeshForwarder *)((char *)this + 40));
  v8[1] = v1;
  v7[0] = ot::MessageQueue::end(v9);
  v7[1] = v2;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v8);
    ot::MeshForwarder::LogMessage(this, 4u, v6, 18, 0);
    if (!ot::Message::GetType(v6))
    {
      ++*((_DWORD *)this + 37);
      ++*((_DWORD *)this + 63);
    }
    ot::MessageQueue::DequeueAndFree((ot::MeshForwarder *)((char *)this + 40), v6);
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v8, v4);
  }
  return result;
}

uint64_t ot::Message::WriteData<(ot::DataLengthType)1>(ot::Message *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes(a3);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(a3);
  return ot::Message::WriteBytes(a1, a2, Bytes, Length);
}

{
  return ot::Message::WriteData<(ot::DataLengthType)1>(a1, a2, a3);
}

uint64_t ot::ThreadLinkInfo::GetRss(ot::ThreadLinkInfo *this)
{
  return *((char *)this + 3);
}

{
  return ot::ThreadLinkInfo::GetRss(this);
}

uint64_t ot::ThreadLinkInfo::GetLqi(ot::ThreadLinkInfo *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return ot::ThreadLinkInfo::GetLqi(this);
}

void ot::MeshForwarder::LogFragmentFrame(uint64_t a1, int a2, unsigned __int16 a3, ot::Mac::Address *a4, ot::Lowpan::FragmentHeader *a5, char a6, uint64_t a7)
{
  uint64_t v28 = a1;
  int v27 = a2;
  unsigned __int16 v26 = a3;
  uint64_t v25 = a4;
  uint64_t v24 = a5;
  char v23 = a6 & 1;
  uint64_t v22 = a7;
  int v14 = a3;
  unsigned char v13[10] = v30;
  ot::Mac::Address::ToString(a4, (ot::StringWriter *)v30);
  uint64_t v15 = ot::String<(unsigned short)17>::AsCString((uint64_t)v30);
  v13[11] = v29;
  ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v25 + 10), (ot::StringWriter *)v29);
  uint64_t v16 = ot::String<(unsigned short)17>::AsCString((uint64_t)v29);
  int DatagramTag = ot::Lowpan::FragmentHeader::GetDatagramTag(v24);
  Datagramint Offset = ot::Lowpan::FragmentHeader::GetDatagramOffset(v24);
  Datagramunsigned __int16 Size = ot::Lowpan::FragmentHeader::GetDatagramSize(v24);
  uint64_t v20 = ot::ErrorToString(v27);
  uint64_t v21 = v13;
  v13[1] = v15;
  void v13[2] = v16;
  v13[3] = (unsigned __int16)DatagramTag;
  void v13[4] = (unsigned __int16)DatagramOffset;
  v13[5] = (unsigned __int16)DatagramSize;
  v13[6] = v20;
  v13[7] = ot::ToYesNo((ot *)(v23 & 1));
  v13[8] = v22;
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "rx frag frame, len:%d, src:%s, dst:%s, tag:%d, offset:%d, dglen:%d, error:%s, sec:%s%s", v7, v8, v9, v10, v11, v12, v14);
}

uint64_t ot::MeshForwarder::HandleDatagram(ot::MeshForwarder *this, ot::Message *a2, const ot::ThreadLinkInfo *a3, const ot::Mac::Address *a4)
{
  uint64_t v4 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
  ot::Utils::HistoryTracker::RecordRxMessage(v4, a2, a4);
  ot::MeshForwarder::LogMessage(this, 0, a2, 0, a4);
  if (!ot::Message::GetType(a2))
  {
    ++*((_DWORD *)this + 35);
    ++*((_DWORD *)this + 61);
    uint64_t v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v5, a4, 5);
    if (Neighbor)
    {
      uint64_t TriggerBasedStatsInfo = ot::Neighbor::GetTriggerBasedStatsInfo(Neighbor);
      ++*(_DWORD *)(TriggerBasedStatsInfo + 12);
    }
  }
  uint64_t v7 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  return ot::Ip6::Ip6::HandleDatagram(v7, a2, 0, a3, 0);
}

void ot::MeshForwarder::LogFragmentFrameDrop(uint64_t a1, int a2, unsigned __int16 a3, ot::Mac::Address *a4, ot::Lowpan::FragmentHeader *a5, char a6)
{
  uint64_t v26 = a1;
  int v25 = a2;
  unsigned __int16 v24 = a3;
  char v23 = a4;
  uint64_t v22 = a5;
  char v21 = a6 & 1;
  BOOL v13 = ot::ErrorToString(a2);
  int v14 = v24;
  v12[9] = v28;
  ot::Mac::Address::ToString(v23, (ot::StringWriter *)v28);
  uint64_t v15 = ot::String<(unsigned short)17>::AsCString((uint64_t)v28);
  v12[10] = v27;
  ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v23 + 10), (ot::StringWriter *)v27);
  uint64_t v16 = ot::String<(unsigned short)17>::AsCString((uint64_t)v27);
  int DatagramTag = ot::Lowpan::FragmentHeader::GetDatagramTag(v22);
  Datagramint Offset = ot::Lowpan::FragmentHeader::GetDatagramOffset(v22);
  Datagramunsigned __int16 Size = ot::Lowpan::FragmentHeader::GetDatagramSize(v22);
  uint64_t v20 = v12;
  v12[1] = v24;
  BOOL v12[2] = v15;
  void v12[3] = v16;
  v12[4] = (unsigned __int16)DatagramTag;
  v12[5] = (unsigned __int16)DatagramOffset;
  v12[6] = (unsigned __int16)DatagramSize;
  char v12[7] = ot::ToYesNo((ot *)(v21 & 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "Dropping rx frag frame, error:%s, len:%d, src:%s, dst:%s, tag:%d, offset:%d, dglen:%d, sec:%s", v6, v7, v8, v9, v10, v11, (char)v13);
}

uint64_t ot::MeshForwarder::HandleTimeTick(ot::MeshForwarder *this)
{
  char v5 = ot::MeshForwarder::FragmentPriorityList::UpdateOnTimeTick((ot::MeshForwarder *)((char *)this + 296)) & 1;
  uint64_t result = ot::MeshForwarder::UpdateReassemblyList(this);
  char v4 = 1;
  if ((result & 1) == 0) {
    char v4 = v5;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::UnregisterReceiver(v2, 0);
  }
  return result;
}

BOOL ot::MeshForwarder::UpdateReassemblyList(ot::MeshForwarder *this)
{
  unsigned __int16 v29 = this;
  int Now = ot::TimerMilli::GetNow(this);
  void v27[2] = (char *)this + 40;
  v27[0] = ot::MessageQueue::begin((ot::MeshForwarder *)((char *)this + 40));
  v27[1] = v1;
  v26[0] = ot::MessageQueue::end((ot::MeshForwarder *)((char *)this + 40));
  v26[1] = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v27, v26))
  {
    int v25 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v27);
    int Timestamp = ot::Message::GetTimestamp(v25);
    unsigned int v21 = ot::Time::operator-(&Now, &Timestamp);
    if (v21 < ot::Time::SecToMsec((ot::Time *)3))
    {
      int v23 = ot::Message::GetTimestamp(v25);
      unsigned int v20 = ot::Time::operator-(&Now, &v23);
      if (v20 >= ot::Time::SecToMsec((ot::Time *)1))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "SendDataPoll before reassembly timer expires", v4, v5, v6, v7, v8, v9, v19);
        uint64_t v10 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
        ot::DataPollSender::SendDataPoll(v10, v11, v12, v13, v14, v15, v16, v17);
        IgnoreError();
      }
    }
    else
    {
      ot::MeshForwarder::LogMessage(this, 4u, v25, 30, 0);
      if (!ot::Message::GetType(v25))
      {
        ++*((_DWORD *)this + 37);
        ++*((_DWORD *)this + 63);
      }
      ot::MessageQueue::DequeueAndFree((ot::MeshForwarder *)((char *)this + 40), v25);
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v27, v3);
  }
  return ot::MessageQueue::GetHead((ot::MeshForwarder *)((char *)this + 40)) != 0;
}

uint64_t ot::MeshForwarder::GetFramePriority(ot::InstanceLocator *a1, const ot::FrameData *a2, const ot::Mac::Addresses *a3, unsigned char *a4)
{
  unsigned __int16 v24 = a1;
  int v23 = a2;
  uint64_t v22 = a3;
  unsigned int v21 = a4;
  unsigned int v20 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  unsigned int v20 = ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v19, a2, a3, Instance);
  if (!v20)
  {
    ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v19);
    unsigned __int8 Dscp = ot::Ip6::Header::GetDscp(v5);
    *unsigned int v21 = ot::Ip6::Ip6::DscpToPriority((ot::Ip6::Ip6 *)Dscp);
    if (ot::Ip6::Headers::IsIcmp6((ot::Ip6::Headers *)v19))
    {
      IcmpHeader = (ot::Ip6::Icmp::Header *)ot::Ip6::Headers::GetIcmpHeader((ot::Ip6::Headers *)v19);
      if (ot::Ip6::Icmp::Header::IsError(IcmpHeader)) {
        *unsigned int v21 = 3;
      }
    }
    if (ot::Ip6::Headers::IsUdp((ot::Ip6::Headers *)v19))
    {
      UdpHeader = (ot::Ip6::Udp::Header *)ot::Ip6::Headers::GetUdpHeader((ot::Ip6::Headers *)v19);
      unsigned __int16 DestinationPort = ot::Ip6::Udp::Header::GetDestinationPort(UdpHeader);
      if (DestinationPort == 19788)
      {
        *unsigned int v21 = 3;
      }
      else
      {
        uint64_t v14 = (ot::Tmf::Agent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v19);
        DestinationAddress = (const ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v19);
        if (ot::Tmf::Agent::IsTmfMessage(v14, SourceAddress, DestinationAddress, DestinationPort))
        {
          ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v19);
          unsigned __int8 v11 = ot::Ip6::Header::GetDscp(v10);
          *unsigned int v21 = ot::Tmf::Agent::DscpToPriority((ot::Tmf::Agent *)v11);
        }
      }
    }
  }
  return v20;
}

BOOL *ot::Message::Settings::Settings(BOOL *a1, BOOL a2)
{
  return a1;
}

uint64_t ot::Message::AppendData<(ot::DataLengthType)1>(ot::Message *a1, uint64_t a2)
{
  uint64_t Bytes = (char *)ot::Data<(ot::DataLengthType)1>::GetBytes(a2);
  unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength(a2);
  return ot::Message::AppendBytes(a1, Bytes, Length);
}

{
  return ot::Message::AppendData<(ot::DataLengthType)1>(a1, a2);
}

void ot::MeshForwarder::LogLowpanHcFrameDrop(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  char v12 = a5 & 1;
  char v11 = ot::ErrorToString(a2);
  ot::Mac::Address::ToString((ot::Mac::Address *)a4, (ot::StringWriter *)v15);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v15);
  ot::Mac::Address::ToString((ot::Mac::Address *)(a4 + 10), (ot::StringWriter *)v14);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v14);
  ot::ToYesNo((ot *)(v12 & 1));
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "Dropping rx lowpan HC frame, error:%s, len:%d, src:%s, dst:%s, sec:%s", v5, v6, v7, v8, v9, v10, v11);
}

uint64_t ot::Utils::HistoryTracker::RecordRxMessage(ot::Utils::HistoryTracker *this, const ot::Message *a2, const ot::Mac::Address *a3)
{
  return ot::Utils::HistoryTracker::RecordMessage(this, a2, a3, 0);
}

{
  return ot::Utils::HistoryTracker::RecordRxMessage(this, a2, a3);
}

uint64_t ot::Ip6::Headers::GetUdpHeader(ot::Ip6::Headers *this)
{
  return (uint64_t)this + 40;
}

{
  return ot::Ip6::Headers::GetUdpHeader(this);
}

BOOL ot::ChildTable::Contains(ot::ChildTable *this, const ot::Neighbor *a2)
{
  BOOL v3 = 0;
  if ((ot::ChildTable *)((char *)this + 8) <= a2) {
    return (unint64_t)a2 < ot::GetArrayEnd<ot::Child,(unsigned short)64>((uint64_t)this + 8);
  }
  return v3;
}

{
  return ot::ChildTable::Contains(this, a2);
}

BOOL ot::Neighbor::IsEnhAckProbingActive(ot::Neighbor *this)
{
  BOOL v2 = 1;
  if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    BOOL v2 = 1;
    if ((*((unsigned char *)this + 64) & 4) == 0) {
      return (*((unsigned char *)this + 64) & 8) != 0;
    }
  }
  return v2;
}

{
  return ot::Neighbor::IsEnhAckProbingActive(this);
}

char *ot::MeshForwarder::MessageActionToString(uint64_t a1, unsigned __int8 a2, int a3)
{
  uint64_t v4 = ot::MeshForwarder::MessageActionToString(ot::MeshForwarder::MessageAction,otError)::kMessageActionStrings[a2];
  if (a3) {
    return ot::MeshForwarder::MessageActionToString(ot::MeshForwarder::MessageAction,otError)::kMessageFailedActionStrings[a2];
  }
  return v4;
}

char *ot::MeshForwarder::MessagePriorityToString(ot::MeshForwarder *this, const ot::Message *a2)
{
  unsigned __int8 Priority = ot::Message::GetPriority(a2);
  return ot::Message::PriorityToString(Priority);
}

uint64_t ot::MeshForwarder::LogIp6SourceDestAddresses(uint64_t a1, ot::Ip6::Headers *a2, uint64_t a3, const char *a4)
{
  Source__int16 Port = ot::Ip6::Headers::GetSourcePort(a2);
  unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort(a2);
  if (SourcePort)
  {
    __str = (char *)&a4[strlen(a4)];
    size_t __size = 2048 - strlen(a4);
    SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(a2);
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v28);
    uint64_t v5 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v28);
    snprintf(__str, __size, " src:[%s]:%d", v5, SourcePort);
  }
  else
  {
    __int16 v18 = (char *)&a4[strlen(a4)];
    size_t v17 = 2048 - strlen(a4);
    uint64_t v6 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(a2);
    ot::Ip6::Address::ToString(v6, (ot::StringWriter *)v27);
    uint64_t v7 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
    snprintf(v18, v17, " src:[%s]", v7);
  }
  if (DestinationPort)
  {
    uint64_t v16 = (char *)&a4[strlen(a4)];
    size_t v15 = 2048 - strlen(a4);
    DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(a2);
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v26);
    uint64_t v9 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v26);
    return snprintf(v16, v15, " dst:[%s]:%d", v9, DestinationPort);
  }
  else
  {
    uint64_t v14 = (char *)&a4[strlen(a4)];
    size_t v13 = 2048 - strlen(a4);
    char v11 = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(a2);
    ot::Ip6::Address::ToString(v11, (ot::StringWriter *)v25);
    char v12 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v25);
    return snprintf(v14, v13, " dst:[%s]", v12);
  }
}

uint64_t ot::MeshForwarder::GetIp6SourceDestAddresses(ot::MeshForwarder *this, const ot::Ip6::Headers *a2, const ot::Mac::Address *a3, char *a4, uint64_t a5)
{
  uint64_t v32 = this;
  uint64_t v31 = a2;
  uint64_t v30 = a3;
  unsigned __int16 v29 = a4;
  uint64_t v28 = a5;
  Source__int16 Port = ot::Ip6::Headers::GetSourcePort(a2);
  unsigned __int16 DestinationPort = ot::Ip6::Headers::GetDestinationPort(v31);
  int v25 = 0;
  unsigned int Neighbor = 0;
  if (v30)
  {
    uint64_t v5 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v5, v30, 7);
  }
  SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress(v31);
  if (SourcePort)
  {
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v37);
    uint64_t v7 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v37);
    v25 += snprintf(&v29[v25], v28 - v25, " src=[%s]:%d,", v7, SourcePort);
  }
  else
  {
    ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v36);
    uint64_t v8 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v36);
    v25 += snprintf(&v29[v25], v28 - v25, " src=[%s],", v8);
  }
  DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(v31);
  if (DestinationPort)
  {
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v35);
    uint64_t v10 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v35);
    v25 += snprintf(&v29[v25], v28 - v25, " dst=[%s]:%d,", v10, DestinationPort);
  }
  else
  {
    ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v34);
    char v11 = (const char *)ot::String<(unsigned short)40>::AsCString((uint64_t)v34);
    v25 += snprintf(&v29[v25], v28 - v25, " dst=[%s],", v11);
  }
  if (!Neighbor) {
    return snprintf(&v29[v25], v28 - v25, " nbr_ext=nil, nbr_rloc=nil, nbr_age=nil");
  }
  unsigned int v20 = &v29[v25];
  size_t v19 = v28 - v25;
  ot::Neighbor::GetExtAddress(Neighbor);
  ot::Mac::ExtAddress::ToString(v12, (ot::StringWriter *)v33);
  size_t v17 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v33);
  unsigned __int16 Rloc16 = (ot::TimerMilli *)ot::Neighbor::GetRloc16(Neighbor);
  unsigned __int16 v18 = (unsigned __int16)Rloc16;
  int Now = ot::TimerMilli::GetNow(Rloc16);
  int LastHeard = ot::Neighbor::GetLastHeard(Neighbor);
  uint64_t v14 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  unsigned __int8 v15 = ot::Time::MsecToSec(v14);
  return snprintf(v20, v19, " nbr_ext=%s, nbr_rloc=0x%04x, nbr_age=%d", v17, v18, v15);
}

void ot::MeshForwarder::LogIp6Message(ot::MeshForwarder *a1, unsigned __int8 a2, ot::Message *a3, uint64_t a4, int a5, unsigned __int8 a6)
{
  unsigned __int16 v82 = &v103;
  v112 = a1;
  unsigned __int8 v111 = a2;
  v110 = a3;
  uint64_t v109 = a4;
  int v108 = a5;
  unsigned __int8 v107 = a6;
  char v80 = a1;
  BOOL v105 = 0;
  char v104 = 0;
  unsigned __int16 v81 = "";
  v103 = "";
  BOOL v102 = 0;
  strcpy(__format, ", offset=%hu, tag=%u");
  int v101 = 5;
  __str[0] = 0;
  __str[1] = 0;
  v119[0] = 0;
  *(void *)((char *)v119 + ot::Tlv::SetType(this, 7) = 0;
  memset(__b, 0, sizeof(__b));
  bzero(v116, 0x400uLL);
  char v100 = 0;
  __int16 v99 = 1500;
  bzero(v115, 0x5DCuLL);
  std::string::basic_string[abi:nn180100]<0>(&v98, "");
  std::string::basic_string[abi:nn180100]<0>(&v97, "");
  std::string::basic_string[abi:nn180100]<0>(&v96, "");
  int Timestamp = ot::Message::GetTimestamp(v110);
  if ((int)ot::Time::GetValue((ot::Time *)&Timestamp) > 0)
  {
    int v92 = ot::Message::GetTimestamp((ot::Message *)v82[12]);
    int Value = ot::Time::GetValue((ot::Time *)&v92);
    unsigned int TxDelayStats = ot::MeshForwarder::GetTxDelayStats(v80, Value);
    __int16 v77 = &v93;
    std::to_string(&v93, TxDelayStats);
    v76 = &v94;
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(", txdelay=", &v93, (uint64_t)&v94);
    std::string::operator=[abi:nn180100]((uint64_t)&v98, (uint64_t)&v94);
    std::string::~string(&v94);
    std::string::~string(&v93);
    int v89 = ot::Message::GetTimestamp((ot::Message *)v82[12]);
    int v8 = ot::Time::GetValue((ot::Time *)&v89);
    unsigned int v9 = ot::MeshForwarder::GetTxDelayStats(v80, v8);
    char v79 = &v90;
    std::to_string(&v90, v9);
    char v78 = &v91;
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(", rxdelayprevfrag=", &v90, (uint64_t)&v91);
    std::string::operator=[abi:nn180100]((uint64_t)&v97, (uint64_t)&v91);
    std::string::~string(&v91);
    std::string::~string(&v90);
  }
  FirstFragint Timestamp = ot::Message::GetFirstFragTimestamp((ot::Message *)v82[12]);
  if ((int)ot::Time::GetValue((ot::Time *)&FirstFragTimestamp) > 0)
  {
    int v85 = ot::Message::GetTimestamp((ot::Message *)v82[12]);
    int v73 = ot::Time::GetValue((ot::Time *)&v85);
    int v84 = ot::Message::GetFirstFragTimestamp((ot::Message *)v82[12]);
    int v10 = ot::Time::GetValue((ot::Time *)&v84);
    unsigned __int16 v75 = &v86;
    std::to_string(&v86, v73 - v10);
    v74 = &v87;
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(", rxdelayfirstfrag=", &v86, (uint64_t)&v87);
    std::string::operator=[abi:nn180100]((uint64_t)&v96, (uint64_t)&v87);
    std::string::~string(&v87);
    std::string::~string(&v86);
  }
  if (!ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v106, (const ot::Message *)v82[12]))
  {
    if (ot::MeshForwarder::IsMatter(v80, (const ot::Message *)v82[12], (ot::Ip6::Headers *)v106))
    {
      char v100 = 1;
      char v71 = v106;
      ot::MeshForwarder::GetMatterHeader(v80, (const ot::Ip6::Headers *)v106, __b);
      int Length = ot::Message::GetLength((ot::Message *)v82[12]);
      int v83 = ot::Message::GetTimestamp((ot::Message *)v82[12]);
      int v11 = ot::Time::GetValue((ot::Time *)&v83);
      ot::MeshForwarder::CountMatterDuplicates((uint64_t)v80, (ot::Ip6::Headers *)v106, Length, v11, v111, v107);
    }
    char v12 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v80);
    if (ot::MessagePool::GetIsBufferStatsEnabled(v12)) {
      ot::Message::GetBufferIDs((ot::Message *)v82[12], v116);
    }
    BOOL v70 = 1;
    if (v111) {
      BOOL v70 = v111 == 4;
    }
    BOOL v105 = v70;
    BOOL v69 = 1;
    if (v111 != 4) {
      BOOL v69 = v111 == 0;
    }
    BOOL v102 = v69;
    if (v69)
    {
      int Offset = ot::Message::GetOffset((ot::Message *)v82[12]);
      uint64_t DatagramTag = ot::Message::GetDatagramTag((ot::Message *)v82[12]);
      snprintf((char *)__str, 0x1FuLL, __format, (unsigned __int16)Offset, DatagramTag);
    }
    if (v111 == 2) {
      v115[0] = 0;
    }
    else {
      ot::MeshForwarder::GetIp6SourceDestAddresses(v80, (const ot::Ip6::Headers *)v106, (const ot::Mac::Address *)v82[11], v115, 1500);
    }
    int v61 = v107;
    char v62 = ot::MeshForwarder::MessageActionToString((uint64_t)v80, v111, v108);
    unsigned __int16 v65 = (ot::Ip6::Headers *)v106;
    unsigned __int8 IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v106);
    uint64_t v63 = ot::Ip6::Ip6::IpProtoToString((ot::Ip6::Ip6 *)IpProto, v15, v16, v17, v18, v19);
    int v64 = ot::Message::GetLength((ot::Message *)v82[12]);
    int Checksum = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v106);
    unsigned __int8 Ecn = ot::Ip6::Headers::GetEcn((ot::Ip6::Headers *)v106);
    unsigned __int16 v67 = ot::Ip6::Ip6::EcnToString(Ecn);
    if (v82[11])
    {
      unsigned int v21 = ", from=";
      if (v111) {
        unsigned int v21 = ", to=";
      }
      unsigned __int16 v60 = v21;
    }
    else
    {
      unsigned __int16 v60 = "";
    }
    int v59 = v60;
    if (v82[11])
    {
      uint64_t v22 = (ot::Mac::Address *)v82[11];
      unsigned int v57 = v114;
      ot::Mac::Address::ToString(v22, (ot::StringWriter *)v114);
      int v58 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v114);
    }
    else
    {
      int v58 = "";
    }
    char v54 = v58;
    char IsLinkSecurityEnabled = ot::Message::IsLinkSecurityEnabled((ot::Message *)v82[12]);
    int v55 = ot::ToYesNo((ot *)(IsLinkSecurityEnabled & 1));
    unsigned __int16 v24 = "";
    if (v108) {
      unsigned __int16 v24 = ", error=";
    }
    unsigned __int16 v56 = v24;
    if (v108) {
      char v53 = ot::ErrorToString(v108);
    }
    else {
      char v53 = "";
    }
    int v50 = v53;
    unsigned __int16 v51 = ot::MeshForwarder::MessagePriorityToString(v80, (const ot::Message *)v82[12]);
    int v25 = ", rss=";
    if (!v105) {
      int v25 = "";
    }
    char v52 = v25;
    if (v105)
    {
      RssAverager = (ot::RssAverager *)ot::Message::GetRssAverager((ot::Message *)v82[12]);
      unsigned __int16 v48 = v113;
      ot::RssAverager::ToString(RssAverager, (ot::StringWriter *)v113);
      uint64_t v49 = (const char *)ot::String<(unsigned short)10>::AsCString((uint64_t)v113);
    }
    else
    {
      uint64_t v49 = "";
    }
    uint64_t v44 = v49;
    int v27 = ", radio=";
    if ((v104 & 1) == 0) {
      int v27 = "";
    }
    uint64_t v45 = v27;
    unsigned __int16 v46 = *v82;
    ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v106);
    int HopLimit = ot::Ip6::Header::GetHopLimit(v28);
    if (v102) {
      uint64_t v43 = (const char *)__str;
    }
    else {
      uint64_t v43 = "";
    }
    unsigned int v39 = v43;
    uint64_t v40 = v82[12];
    unsigned __int16 v29 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v80);
    int TotalBufferCount = ot::MessagePool::GetTotalBufferCount(v29);
    uint64_t v30 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v80);
    int FreeBufferCount = ot::MessagePool::GetFreeBufferCount(v30);
    std::string::c_str[abi:nn180100]();
    uint64_t v38 = v31;
    uint64_t v37 = v31;
    if (v111 && v111 != 4)
    {
      uint64_t v36 = "";
    }
    else
    {
      std::string::c_str[abi:nn180100]();
      uint64_t v36 = v32;
    }
    uint64_t v35 = v36;
    if (v100) {
      uint64_t v34 = __b;
    }
    else {
      uint64_t v34 = "";
    }
    v33[25] = v33;
    v33[1] = v63;
    char v33[2] = v115;
    v33[3] = (unsigned __int16)v64;
    v33[4] = (unsigned __int16)Checksum;
    v33[5] = v67;
    v33[6] = v59;
    v33[7] = v54;
    v33[8] = v55;
    v33[9] = v56;
    v33[10] = v50;
    v33[11] = v51;
    v33[12] = v52;
    v33[13] = v44;
    v33[14] = v45;
    v33[15] = v46;
    v33[16] = HopLimit;
    v33[17] = v39;
    v33[18] = v40;
    v33[19] = v116;
    v33[20] = (unsigned __int16)TotalBufferCount;
    v33[21] = (unsigned __int16)FreeBufferCount;
    unsigned char v33[22] = v37;
    v33[23] = v35;
    v33[24] = v34;
    ot::Logger::LogInModule((ot *)"MeshForwarder", v61, "ITMD: %s IPv6 %s msg,%s, len=%d, chksum=%04x, ecn=%s%s%s, sec=%s%s%s, prio=%s%s%s%s%s, hlim=%u%s, buffer=%p%s, tot_buf=%d, free_buf=%d%s%s%s", (uint64_t)v52, (uint64_t)v51, (uint64_t)v50, (uint64_t)v56, (uint64_t)v55, (char)v62);
  }
  std::string::~string(&v96);
  std::string::~string(&v97);
  std::string::~string(&v98);
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const std::string::value_type *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3 = std::string::insert(a2, 0, a1);
  return std::string::basic_string[abi:nn180100](a3, (uint64_t)v3);
}

uint64_t ot::Message::GetFirstFragTimestamp(ot::Message *this)
{
  return *(unsigned int *)(ot::Buffer::GetMetadata(this) + 40);
}

{
  return ot::Message::GetFirstFragTimestamp(this);
}

uint64_t ot::Ip6::Headers::GetEcn(ot::Ip6::Headers *this)
{
  return ot::Ip6::Header::GetEcn(this);
}

{
  return ot::Ip6::Headers::GetEcn(this);
}

uint64_t ot::Ip6::Matter::Header::GetFlags(ot::Ip6::Matter::Header *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Ip6::Matter::Header::GetFlags(this);
}

uint64_t ot::Ip6::Matter::Header::GetSessionID(ot::Ip6::Matter::Header *this)
{
  return *(unsigned __int16 *)((char *)this + 1);
}

{
  return ot::Ip6::Matter::Header::GetSessionID(this);
}

uint64_t ot::Ip6::Matter::Header::GetSecurityFlags(ot::Ip6::Matter::Header *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::Ip6::Matter::Header::GetSecurityFlags(this);
}

uint64_t ot::Ip6::Matter::Header::GetCounter(ot::Ip6::Matter::Header *this)
{
  return *((unsigned int *)this + 1);
}

{
  return ot::Ip6::Matter::Header::GetCounter(this);
}

BOOL std::operator==[abi:nn180100]<ot::Ip6::Address *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100](a1);
  return v3 == std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100](a2);
}

uint64_t ot::Message::SetFirstFragTimestamp(ot::Buffer *a1, int a2)
{
  uint64_t result = ot::Buffer::GetMetadata(a1);
  *(_DWORD *)(result + 4ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  return result;
}

{
  return ot::Message::SetFirstFragTimestamp(a1, a2);
}

uint64_t ot::GetArrayEnd<ot::Child,(unsigned short)64>(uint64_t a1)
{
  return a1 + 29696;
}

{
  return ot::GetArrayEnd<ot::Child,(unsigned short)64>(a1);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__tree(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  int v10 = a1;
  unsigned int v9 = a2;
  std::__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>>::__compressed_pair[abi:nn180100]<true,void>((void *)(a1 + 8));
  int v8 = 0;
  std::__compressed_pair<unsigned long,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>>::__compressed_pair[abi:nn180100]<int,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true> const&>((void *)(a1 + 16), &v8);
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__end_node[abi:nn180100]();
  uint64_t v6 = v2;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  uint64_t v4 = v3;
  uint64_t result = a1;
  *uint64_t v4 = v6;
  return result;
}

void *std::__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>>::__compressed_pair[abi:nn180100]<true,void>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__tree_end_node<std::__tree_node_base<void *> *>,0,false>::__compressed_pair_elem[abi:nn180100](a1);
  std::__compressed_pair_elem<std::allocator<char>,1,true>::__compressed_pair_elem[abi:nn180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair<unsigned long,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>>::__compressed_pair[abi:nn180100]<int,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true> const&>(void *a1, int *a2)
{
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:nn180100]<int,void>(a1, a2);
  std::__compressed_pair_elem<std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,1,true>::__compressed_pair_elem[abi:nn180100]<std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true> const&,void>();
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__end_node[abi:nn180100]()
{
}

void *std::__compressed_pair_elem<std::__tree_end_node<std::__tree_node_base<void *> *>,0,false>::__compressed_pair_elem[abi:nn180100](void *a1)
{
  return a1;
}

void *std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:nn180100]<int,void>(void *result, int *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::~__tree(uint64_t a1)
{
  return a1;
}

{
  void *v1;

  uint64_t v1 = (void *)std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy(a1, v1);
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__node_alloc[abi:nn180100]();
    uint64_t v4 = v2;
    std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::destroy[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,void,void>();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::deallocate[abi:nn180100](v4, a2);
  }
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__root[abi:nn180100]()
{
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__end_node[abi:nn180100]();
  return *(void *)v0;
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__node_alloc[abi:nn180100]()
{
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::destroy[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,void,void>()
{
}

{
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::destroy[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,void,void>();
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

void std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

void *std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::__default_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<ot::Ip6::Address *,0,false>::__compressed_pair_elem[abi:nn180100]<decltype(nullptr),void>(a1);
  std::__compressed_pair_elem<std::allocator<char>,1,true>::__compressed_pair_elem[abi:nn180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair_elem<ot::Ip6::Address *,0,false>::__compressed_pair_elem[abi:nn180100]<decltype(nullptr),void>(void *result)
{
  *uint64_t result = 0;
  return result;
}

void std::vector<ot::Ip6::Address>::__destroy_vector::operator()[abi:nn180100](uint64_t **a1)
{
  if (**a1)
  {
    std::vector<ot::Ip6::Address>::__clear[abi:nn180100](*a1);
    std::string::__annotate_delete[abi:nn180100]();
    std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
    uint64_t v3 = v1;
    uint64_t v2 = (void *)**a1;
    std::vector<ot::Ip6::Address>::capacity[abi:nn180100](*a1);
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::deallocate[abi:nn180100](v3, v2);
  }
}

void std::vector<ot::Ip6::Address>::__clear[abi:nn180100](uint64_t *a1)
{
}

void std::allocator_traits<std::allocator<ot::Ip6::Address>>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

void std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]()
{
}

uint64_t std::vector<ot::Ip6::Address>::capacity[abi:nn180100](void *a1)
{
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  return (*v1 - *a1) / 16;
}

void std::vector<ot::Ip6::Address>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 16)
  {
    std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::destroy[abi:nn180100]<ot::Ip6::Address,void>();
  }
  *(void *)(a1 + 8) = a2;
}

void std::allocator_traits<std::allocator<ot::Ip6::Address>>::destroy[abi:nn180100]<ot::Ip6::Address,void>()
{
}

{
  std::allocator_traits<std::allocator<ot::Ip6::Address>>::destroy[abi:nn180100]<ot::Ip6::Address,void>();
}

void std::allocator<ot::Ip6::Address>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

uint64_t ot::TimerMilliIn<ot::MeshForwarder,&ot::MeshForwarder::HandleTxDelayTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshForwarder::HandleTxDelayTimer)(v2);
}

uint64_t ot::TaskletIn<ot::MeshForwarder,&ot::MeshForwarder::ScheduleTransmissionTask>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(a1);
  return ((uint64_t (*)(uint64_t))ot::MeshForwarder::ScheduleTransmissionTask)(v2);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__count_unique<unsigned long long>(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__root[abi:nn180100]();
  while (v5)
  {
    std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
    if (std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100](v2, a2))
    {
      uint64_t v5 = (void *)*v5;
    }
    else
    {
      std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
      if (!std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100](v3, (uint64_t)(v5 + 4), a2))return 1; {
      uint64_t v5 = (void *)v5[1];
      }
    }
  }
  return 0;
}

{
  return std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__count_unique<unsigned long long>(a1, a2);
}

BOOL std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100](uint64_t a1, void *a2)
{
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  return std::less<unsigned long long>::operator()[abi:nn180100](a1, a2, v2);
}

BOOL std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100](uint64_t a1, uint64_t a2, void *a3)
{
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  return std::less<unsigned long long>::operator()[abi:nn180100](a1, v3, a3);
}

BOOL std::less<unsigned long long>::operator()[abi:nn180100](uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

uint64_t std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v20 = a1;
  size_t v19 = a2;
  uint64_t v18 = a3;
  uint64_t v17 = a4;
  uint64_t v16 = a5;
  uint64_t v14 = std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__find_equal<unsigned long long>(a1, (uint64_t)&v15, a2);
  uint64_t v13 = *v14;
  char v12 = 0;
  if (!*v14)
  {
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, v18, v17, v16, (uint64_t)v11);
    uint64_t v7 = v15;
    int v8 = v14;
    uint64_t v5 = (void *)std::string::__get_long_pointer[abi:nn180100]();
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__insert_node_at(a1, v7, v8, v5);
    uint64_t v13 = std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::release[abi:nn180100]();
    char v12 = 1;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)v11);
  }
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v10, v13);
  std::pair<std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>,BOOL &,0>((uint64_t)&v21, &v10, &v12);
  return v21;
}

{
  return std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a2, a3, a4, a5);
}

uint64_t std::forward_as_tuple[abi:nn180100]<unsigned long long const&>(uint64_t a1)
{
  std::tuple<unsigned long long const&>::tuple[abi:nn180100]<std::_And,0>(&v2, a1);
  return v2;
}

void std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>::operator->[abi:nn180100](uint64_t a1)
{
}

void *std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__find_equal<unsigned long long>(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v9 = (void *)std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__root_ptr[abi:nn180100]();
  int v8 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
        if (!std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100](v4, a3))break; {
        if (!*v9)
        }
        {
          *(void *)a2 = v9;
          return *(void **)a2;
        }
        int v8 = v9;
        unsigned int v9 = (void *)*v9;
      }
      std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
      if (!std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>::operator()[abi:nn180100](v5, (uint64_t)(v9 + 4), a3))break; {
      if (!v9[1])
      }
      {
        *(void *)a2 = v9;
        return v9 + 1;
      }
      int v8 = v9 + 1;
      unsigned int v9 = (void *)v9[1];
    }
    *(void *)a2 = v9;
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__end_node[abi:nn180100]();
    *(void *)a2 = v6;
    return *(void **)a2;
  }
}

{
  return std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__find_equal<unsigned long long>(a1, a2, a3);
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = a5;
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__node_alloc[abi:nn180100]();
  uint64_t v13 = v5;
  char v12 = 0;
  int v8 = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::allocate[abi:nn180100](v5, 1uLL);
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::__tree_node_destructor[abi:nn180100]((uint64_t)&v11, v13, 0);
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::unique_ptr[abi:nn180100]<true,void>(a5, (uint64_t)v8, &v11);
  uint64_t v9 = v13;
  std::string::__get_long_pointer[abi:nn180100]();
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>,void>(v9, v6, v16, v15);
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::get_deleter[abi:nn180100]();
  *(unsigned char *)(v7 + 8) = 1;
}

{
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a2, a3, a4, a5);
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__insert_node_at(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = (uint64_t)a4;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  if (**v4)
  {
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    uint64_t v9 = **v5;
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    *uint64_t v6 = v9;
  }
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__end_node[abi:nn180100]();
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v7, *a3);
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  ++*v8;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::release[abi:nn180100]()
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  uint64_t v3 = *v0;
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *uint64_t v1 = 0;
  return v3;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::reset[abi:nn180100](a1, 0);
  return a1;
}

uint64_t std::pair<std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>,BOOL &,0>(uint64_t a1, void *a2, unsigned char *a3)
{
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__root_ptr[abi:nn180100]()
{
}

void *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::allocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  return std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::allocate[abi:nn180100](a1, a2);
}

uint64_t std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::__tree_node_destructor[abi:nn180100](uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::unique_ptr[abi:nn180100]<true,void>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  return a1;
}

{
  void v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::__compressed_pair[abi:nn180100]<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *&,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>(a1, v5, a3);
  return a1;
}

void *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>,void>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a2, a3, a4);
}

{
  return std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>,void>(a1, a2, a3, a4);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::get_deleter[abi:nn180100]()
{
}

void *std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::allocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::max_size[abi:nn180100]<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>,void>()) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return std::__libcpp_allocate[abi:nn180100](48 * a2);
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::max_size[abi:nn180100]<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>,void>()
{
  return std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::max_size[abi:nn180100]();
}

{
  return std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::max_size[abi:nn180100]<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>,void>();
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void *std::__libcpp_allocate[abi:nn180100](size_t a1)
{
  return std::__libcpp_operator_new[abi:nn180100]<unsigned long>(a1);
}

uint64_t std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::max_size[abi:nn180100]()
{
  return 0x555555555555555;
}

void *std::__libcpp_operator_new[abi:nn180100]<unsigned long>(size_t a1)
{
  return operator new(a1);
}

uint64_t std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::__tree_node_destructor[abi:nn180100](uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = a3 & 1;
  return result;
}

uint64_t std::__compressed_pair<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::__compressed_pair[abi:nn180100]<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *&,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>(uint64_t a1, void *a2, __n128 *a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,0,false>::__compressed_pair_elem[abi:nn180100]<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *&,void>((void *)a1, a2);
  ot::Cli::Vendor::Vendor((__n128 *)(a1 + 8), a3);
  return a1;
}

void *std::__compressed_pair_elem<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,0,false>::__compressed_pair_elem[abi:nn180100]<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *&,void>(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  return std::pair<unsigned long long const,ot::matterInfo>::pair[abi:nn180100]<unsigned long long const&>(a2, *a4);
}

{
  return std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>::construct[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a2, a3, a4);
}

void *std::pair<unsigned long long const,ot::matterInfo>::pair[abi:nn180100]<unsigned long long const&>(void *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  _ZNSt3__14pairIKyN2ot10matterInfoEEC1B8nn180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE(a1, (uint64_t)&v4);
  return a1;
}

void *_ZNSt3__14pairIKyN2ot10matterInfoEEC1B8nn180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE(void *a1, uint64_t a2)
{
  return a1;
}

void *_ZNSt3__14pairIKyN2ot10matterInfoEEC2B8nn180100IJRS1_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)std::get[abi:nn180100]<0ul,unsigned long long const&>(a2);
  uint64_t result = a1;
  *a1 = *v2;
  a1[1] = 0;
  return result;
}

uint64_t std::get[abi:nn180100]<0ul,unsigned long long const&>(uint64_t a1)
{
  return std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100](a1);
}

void std::__compressed_pair<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::second[abi:nn180100]()
{
}

uint64_t std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t result, uint64_t a2)
{
  uint64_t v14 = (uint64_t *)result;
  __n128 v11 = (uint64_t *)a2;
  *(unsigned char *)(a2 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = a2 == result;
  while (1)
  {
    char v8 = 0;
    if (v11 != v14)
    {
      uint64_t result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      char v8 = *(unsigned char *)(result + 24) ^ 1;
    }
    if ((v8 & 1) == 0) {
      break;
    }
    uint64_t v2 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
    if (std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(v2))
    {
      uint64_t v3 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      uint64_t v10 = *(void *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v3) + 8);
      if (!v10 || (*(unsigned char *)(v10 + 24) & 1) != 0)
      {
        if (!std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          __n128 v11 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
          std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v11);
        }
        uint64_t v5 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
        *(unsigned char *)(v5 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 1;
        uint64_t v12 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v5);
        *(unsigned char *)(v12 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 0;
        return std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v12);
      }
      uint64_t v4 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      *(unsigned char *)(v4 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 1;
      uint64_t result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v4);
      __n128 v11 = (uint64_t *)result;
      *(unsigned char *)(result + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = result == (void)v14;
      *(unsigned char *)(v10 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 1;
    }
    else
    {
      uint64_t v9 = **(void **)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11) + 16);
      if (!v9 || (*(unsigned char *)(v9 + 24) & 1) != 0)
      {
        if (std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          __n128 v11 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
          std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v11);
        }
        uint64_t v7 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
        *(unsigned char *)(v7 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 1;
        uint64_t v13 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v7);
        *(unsigned char *)(v13 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 0;
        return std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(v13);
      }
      uint64_t v6 = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)v11);
      *(unsigned char *)(v6 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 1;
      uint64_t result = std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](v6);
      __n128 v11 = (uint64_t *)result;
      *(unsigned char *)(result + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = result == (void)v14;
      *(unsigned char *)(v9 + 2ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = 1;
    }
  }
  return result;
}

uint64_t std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  return a1 == **(void **)(a1 + 16);
}

uint64_t std::__tree_left_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  *(void *)(a1 + 8) = *v2;
  if (*(void *)(a1 + 8)) {
    std::__tree_node_base<void *>::__set_parent[abi:nn180100](*(void *)(a1 + 8), a1);
  }
  v2[2] = *(void *)(a1 + 16);
  if (std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>(a1)) {
    **(void **)(a1 + 16) = v2;
  }
  else {
    *(void *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100](a1) + 8) = v2;
  }
  *uint64_t v2 = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:nn180100](a1, (uint64_t)v2);
}

uint64_t std::__tree_right_rotate[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = *(void *)(*a1 + 8);
  if (*a1) {
    std::__tree_node_base<void *>::__set_parent[abi:nn180100](*a1, (uint64_t)a1);
  }
  *(void *)(v2 + 16) = a1[2];
  if (std::__tree_is_left_child[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t)a1)) {
    *(void *)a1[2] = v2;
  }
  else {
    *(void *)(std::__tree_node_base<void *>::__parent_unsafe[abi:nn180100]((uint64_t)a1) + 8) = v2;
  }
  *(void *)(v2 + 8) = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:nn180100]((uint64_t)a1, v2);
}

uint64_t std::__tree_node_base<void *>::__set_parent[abi:nn180100](uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  uint64_t v5 = *v2;
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::__compressed_pair<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>>::second[abi:nn180100]();
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::operator()[abi:nn180100](v4, v5);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::operator()[abi:nn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::destroy[abi:nn180100]<std::pair<unsigned long long const,ot::matterInfo>,void,void>();
  }
  if (a2) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *>>>::deallocate[abi:nn180100](*(void *)a1, a2);
  }
}

uint64_t std::pair<std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>,BOOL>::pair[abi:nn180100]<std::__tree_iterator<std::__value_type<unsigned long long,ot::matterInfo>,std::__tree_node<std::__value_type<unsigned long long,ot::matterInfo>,void *> *,long>,BOOL &,0>(uint64_t result, void *a2, unsigned char *a3)
{
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = *a3 & 1;
  return result;
}

void *std::tuple<unsigned long long const&>::tuple[abi:nn180100]<std::_And,0>(void *a1, uint64_t a2)
{
  return a1;
}

{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJRKyEEC1B8nn180100IJLm0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_(a1, a2);
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJRKyEEC1B8nn180100IJLm0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2)
{
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJRKyEEC2B8nn180100IJLm0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::vector<ot::Ip6::Address>::__make_iter[abi:nn180100](uint64_t a1, uint64_t a2)
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, a2);
  return v3;
}

void *std::vector<ot::Ip6::Address>::__construct_one_at_end[abi:nn180100]<ot::Ip6::Address const&>(uint64_t a1, __n128 *a2)
{
  uint64_t v9 = a1;
  char v8 = a2;
  std::vector<ot::Ip6::Address>::_ConstructTransaction::_ConstructTransaction[abi:nn180100](&v6, a1, 1);
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  uint64_t v5 = v2;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  std::allocator_traits<std::allocator<ot::Ip6::Address>>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&,void>(v5, v3, v8);
  v7 += 16;
  return std::vector<ot::Ip6::Address>::_ConstructTransaction::~_ConstructTransaction[abi:nn180100](&v6);
}

{
  return std::vector<ot::Ip6::Address>::__construct_one_at_end[abi:nn180100]<ot::Ip6::Address const&>(a1, a2);
}

uint64_t std::vector<ot::Ip6::Address>::__push_back_slow_path<ot::Ip6::Address const&>(uint64_t *a1, __n128 *a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  uint64_t v13 = v2;
  uint64_t v3 = std::vector<ot::Ip6::Address>::size[abi:nn180100](a1);
  unint64_t v7 = std::vector<ot::Ip6::Address>::__recommend[abi:nn180100](a1, v3 + 1);
  uint64_t v4 = std::vector<ot::Ip6::Address>::size[abi:nn180100](a1);
  std::__split_buffer<ot::Ip6::Address>::__split_buffer(v11, v7, v4, v13);
  uint64_t v8 = v13;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  std::allocator_traits<std::allocator<ot::Ip6::Address>>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&,void>(v8, v5, v14);
  v12 += 16;
  std::vector<ot::Ip6::Address>::__swap_out_circular_buffer(a1, v11);
  uint64_t v10 = a1[1];
  std::__split_buffer<ot::Ip6::Address>::~__split_buffer(v11);
  return v10;
}

{
  return std::vector<ot::Ip6::Address>::__push_back_slow_path<ot::Ip6::Address const&>(a1, a2);
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::_ConstructTransaction[abi:nn180100](void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

double std::allocator_traits<std::allocator<ot::Ip6::Address>>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&,void>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  return std::allocator<ot::Ip6::Address>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&>(a1, a2, a3);
}

{
  return std::allocator_traits<std::allocator<ot::Ip6::Address>>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&,void>(a1, a2, a3);
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::~_ConstructTransaction[abi:nn180100](void *a1)
{
  return a1;
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::_ConstructTransaction[abi:nn180100](void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + 16 * a3;
  return result;
}

__n128 std::allocator<ot::Ip6::Address>::construct[abi:nn180100]<ot::Ip6::Address,ot::Ip6::Address const&>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *std::vector<ot::Ip6::Address>::_ConstructTransaction::~_ConstructTransaction[abi:nn180100](void *result)
{
  *(void *)(*result + 8) = result[1];
  return result;
}

unint64_t std::vector<ot::Ip6::Address>::__recommend[abi:nn180100](void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = std::vector<ot::Ip6::Address>::max_size((uint64_t)a1);
  if (v7[0] > v6) {
    std::vector<ot::Ip6::Address>::__throw_length_error[abi:nn180100]();
  }
  unint64_t v5 = std::vector<ot::Ip6::Address>::capacity[abi:nn180100](a1);
  if (v5 >= v6 / 2) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *std::max[abi:nn180100]<unsigned long>(&v4, v7);
}

void **std::__split_buffer<ot::Ip6::Address>::__split_buffer(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v9;
  void v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  uint64_t v15 = a1;
  v11[0] = 0;
  std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::allocator<ot::Ip6::Address> &>(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v4 = std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100]((uint64_t)a1);
    *a1 = std::__allocate_at_least[abi:nn180100]<std::allocator<ot::Ip6::Address>>(v4, v13);
    uint64_t v13 = v5;
  }
  else
  {
    *a1 = 0;
  }
  unint64_t v6 = (uint64_t)*a1 + 16 * v12;
  a1[2] = (void *)v6;
  a1[1] = (void *)v6;
  uint64_t v9 = (unint64_t)*a1 + 16 * v13;
  std::__split_buffer<ot::Ip6::Address>::__end_cap[abi:nn180100]();
  uint64_t *v7 = v9;
  return v15;
}

void std::vector<ot::Ip6::Address>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  std::string::__annotate_delete[abi:nn180100]();
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  uint64_t v7 = v2;
  std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](v12, a1[1]);
  std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](v11, *a1);
  std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](v10, v14[1]);
  v13[0] = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<ot::Ip6::Address>,std::reverse_iterator<ot::Ip6::Address*>,std::reverse_iterator<ot::Ip6::Address*>,ot::Ip6::Address,void>(v7, v12[0], v12[1], v11[0], v11[1], v10[0], v10[1]);
  v13[1] = v3;
  uint64_t v4 = std::reverse_iterator<ot::Ip6::Address *>::base[abi:nn180100]((uint64_t)v13);
  v14[1] = v4;
  std::swap[abi:nn180100]<ot::Ip6::Address *>(a1, v14 + 1);
  std::swap[abi:nn180100]<ot::Ip6::Address *>(a1 + 1, v14 + 2);
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  uint64_t v8 = v5;
  std::__split_buffer<ot::Ip6::Address>::__end_cap[abi:nn180100]();
  std::swap[abi:nn180100]<ot::Ip6::Address *>(v8, v6);
  void *v14 = v14[1];
  std::vector<ot::Ip6::Address>::size[abi:nn180100](a1);
  std::string::__annotate_shrink[abi:nn180100]();
}

void **std::__split_buffer<ot::Ip6::Address>::~__split_buffer(void **a1)
{
  return a1;
}

{
  void *v2;
  uint64_t v3;

  std::__split_buffer<ot::Ip6::Address>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
  {
    uint64_t v3 = std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100]((uint64_t)a1);
    uint64_t v2 = *a1;
    std::__split_buffer<ot::Ip6::Address>::capacity[abi:nn180100](a1);
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::deallocate[abi:nn180100](v3, v2);
  }
  return a1;
}

uint64_t std::vector<ot::Ip6::Address>::max_size(uint64_t a1)
{
  v3[1] = a1;
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  v3[0] = std::allocator_traits<std::allocator<ot::Ip6::Address>>::max_size[abi:nn180100]<std::allocator<ot::Ip6::Address>,void>();
  uint64_t v2 = std::numeric_limits<long>::max[abi:nn180100]();
  return *std::min[abi:nn180100]<unsigned long>(v3, &v2);
}

void std::vector<ot::Ip6::Address>::__throw_length_error[abi:nn180100]()
{
}

void *std::max[abi:nn180100]<unsigned long>(void *a1, void *a2)
{
  return std::max[abi:nn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

void *std::min[abi:nn180100]<unsigned long>(void *a1, void *a2)
{
  return std::min[abi:nn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

uint64_t std::allocator_traits<std::allocator<ot::Ip6::Address>>::max_size[abi:nn180100]<std::allocator<ot::Ip6::Address>,void>()
{
  return std::allocator<ot::Ip6::Address>::max_size[abi:nn180100]();
}

{
  return std::allocator_traits<std::allocator<ot::Ip6::Address>>::max_size[abi:nn180100]<std::allocator<ot::Ip6::Address>,void>();
}

uint64_t std::numeric_limits<long>::max[abi:nn180100]()
{
  return std::__libcpp_numeric_limits<long,true>::max[abi:nn180100]();
}

void *std::min[abi:nn180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  if (std::less<unsigned long long>::operator()[abi:nn180100]((uint64_t)&v6, a2, a1)) {
    return a2;
  }
  else {
    return a1;
  }
}

uint64_t std::allocator<ot::Ip6::Address>::max_size[abi:nn180100]()
{
  return 0xFFFFFFFFFFFFFFFLL;
}

uint64_t std::__libcpp_numeric_limits<long,true>::max[abi:nn180100]()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

void std::__throw_length_error[abi:nn180100]()
{
}

void *std::max[abi:nn180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  if (std::less<unsigned long long>::operator()[abi:nn180100]((uint64_t)&v6, a1, a2)) {
    return a2;
  }
  else {
    return a1;
  }
}

void *std::__compressed_pair<ot::Ip6::Address *>::__compressed_pair[abi:nn180100]<decltype(nullptr),std::allocator<ot::Ip6::Address> &>(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  std::__compressed_pair_elem<ot::Ip6::Address *,0,false>::__compressed_pair_elem[abi:nn180100]<decltype(nullptr),void>(a1);
  ot::ItemPtrIterator<ot::Coap::Resource,ot::LinkedList<ot::Coap::Resource>::Iterator>::ItemPtrIterator(a1 + 1, a3);
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<ot::Ip6::Address>>(uint64_t a1, unint64_t a2)
{
  return std::allocator<ot::Ip6::Address>::allocate[abi:nn180100](a1, a2);
}

uint64_t std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100](uint64_t a1)
{
  return std::__compressed_pair<ot::Ip6::Address *>::second[abi:nn180100](a1 + 24);
}

void std::__split_buffer<ot::Ip6::Address>::__end_cap[abi:nn180100]()
{
}

void *std::allocator<ot::Ip6::Address>::allocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 > std::allocator_traits<std::allocator<ot::Ip6::Address>>::max_size[abi:nn180100]<std::allocator<ot::Ip6::Address>,void>()) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return std::__libcpp_allocate[abi:nn180100](16 * a2);
}

uint64_t std::__compressed_pair<ot::Ip6::Address *>::second[abi:nn180100](uint64_t a1)
{
  return std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100](a1 + 8);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<ot::Ip6::Address>,std::reverse_iterator<ot::Ip6::Address*>,std::reverse_iterator<ot::Ip6::Address*>,ot::Ip6::Address,void>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return std::move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(a2, a3, a4, a5, a6, a7);
}

void *std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](void *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::reverse_iterator<ot::Ip6::Address *>::base[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *std::swap[abi:nn180100]<ot::Ip6::Address *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *__n128 result = *a2;
  *a2 = v2;
  return result;
}

uint64_t std::move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = a1;
  unint64_t v14 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v9 = a5;
  uint64_t v10 = a6;
  std::__move[abi:nn180100]<std::_ClassicAlgPolicy,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(a1, a2, a3, a4, a5, a6, &v7);
  return v8;
}

_OWORD *std::__move[abi:nn180100]<std::_ClassicAlgPolicy,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(a1, a2, a3, a4, a5, a6, a7);
}

_OWORD *std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>(a1, a2, a3, a4, a5, a6, a7);
}

_OWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  v26.n128_u64[0] = a1;
  v26.n128_u64[1] = a2;
  *(void *)&long long v25 = a3;
  *((void *)&v25 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a4;
  *(void *)&long long v24 = a5;
  *((void *)&v24 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a6;
  __n128 v22 = v26;
  long long v21 = v25;
  std::__unwrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(a1, a2, a3, a4, v23);
  long long v18 = v23[0];
  long long v17 = v23[1];
  v14[1] = v24;
  std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>();
  unint64_t v15 = v7;
  unint64_t v16 = v8;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v7, v8, &v19);
  void v13[2] = v26;
  v13[1] = v19;
  *(void *)&v14[0] = std::__rewrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(v26.n128_i64[0], v26.n128_i64[1], v19.n128_i64[0]);
  *((void *)&v14[0] + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v9;
  v13[0].n128_u64[0] = std::__rewrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>>(v24, *((uint64_t *)&v24 + 1), v20);
  v13[0].n128_u64[1] = v10;
  return std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(v14, v13, a7);
}

_OWORD *std::__unwrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  v15.n128_u64[0] = a1;
  v15.n128_u64[1] = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  v11[1] = v15;
  std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>();
  *(void *)&long long v12 = v5;
  *((void *)&v12 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v6;
  std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>();
  v11[0].n128_u64[0] = v7;
  v11[0].n128_u64[1] = v8;
  return std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(&v12, v11, a5);
}

_OWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t a6@<X6>, _OWORD *a7@<X8>)
{
  *(void *)&long long v12 = a1;
  *((void *)&v12 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10.n128_u64[0] = a5;
  v10.n128_u64[1] = a6;
  while (std::operator!=[abi:nn180100]<ot::Ip6::Address *,ot::Ip6::Address *>((uint64_t)&v12, (uint64_t)v11))
  {
    unint64_t v8 = (_OWORD *)std::_IterOps<std::_ClassicAlgPolicy>::__iter_move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *> &,0>((uint64_t)&v12);
    *(_OWORD *)std::reverse_iterator<ot::Ip6::Address *>::operator*[abi:nn180100]((uint64_t)&v1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = *v8;
    std::reverse_iterator<ot::Ip6::Address *>::operator++[abi:nn180100]((uint64_t)&v12);
    std::reverse_iterator<ot::Ip6::Address *>::operator++[abi:nn180100]((uint64_t)&v10);
  }
  return std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(&v12, &v10, a7);
}

{
  return std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(a1, a2, a3, a4, a5, a6, a7);
}

void std::__unwrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>,0>()
{
}

_OWORD *std::make_pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>@<X0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  return std::pair<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>::pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>(a3, a1, a2);
}

uint64_t std::__rewrap_range[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__rewrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>>(a1, a2, a3);
}

uint64_t std::__rewrap_iter[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>::__rewrap[abi:nn180100](a1, a2, a3);
}

BOOL std::operator!=[abi:nn180100]<ot::Ip6::Address *,ot::Ip6::Address *>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::reverse_iterator<ot::Ip6::Address *>::base[abi:nn180100](a1);
  return v3 != std::reverse_iterator<ot::Ip6::Address *>::base[abi:nn180100](a2);
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::__iter_move[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *> &,0>(uint64_t a1)
{
  return std::reverse_iterator<ot::Ip6::Address *>::operator*[abi:nn180100](a1);
}

uint64_t std::reverse_iterator<ot::Ip6::Address *>::operator*[abi:nn180100](uint64_t a1)
{
  return *(void *)(a1 + 8) - 16;
}

uint64_t std::reverse_iterator<ot::Ip6::Address *>::operator++[abi:nn180100](uint64_t result)
{
  *(void *)(result + 8) -= 16;
  return result;
}

_OWORD *std::pair<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>::pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  return a1;
}

__n128 std::pair<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>>::pair[abi:nn180100]<std::reverse_iterator<ot::Ip6::Address *>,std::reverse_iterator<ot::Ip6::Address *>,0>(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  *a1 = *a2;
  __n128 result = *a3;
  a1[1] = *a3;
  return result;
}

uint64_t std::__unwrap_iter_impl<std::reverse_iterator<ot::Ip6::Address *>,false>::__rewrap[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void *std::reverse_iterator<ot::Ip6::Address *>::reverse_iterator[abi:nn180100](void *result, uint64_t a2)
{
  *__n128 result = a2;
  result[1] = a2;
  return result;
}

void std::__split_buffer<ot::Ip6::Address>::clear[abi:nn180100](uint64_t a1)
{
}

uint64_t std::__split_buffer<ot::Ip6::Address>::capacity[abi:nn180100](void *a1)
{
  std::__split_buffer<ot::Ip6::Address>::__end_cap[abi:nn180100]();
  return (*v1 - *a1) / 16;
}

void std::__split_buffer<ot::Ip6::Address>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
}

{
  while (a2 != *(void *)(a1 + 16))
  {
    std::__split_buffer<ot::Ip6::Address>::__alloc[abi:nn180100](a1);
    *(void *)(a1 + 16) -= 16;
    std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
    std::allocator_traits<std::allocator<ot::Ip6::Address>>::destroy[abi:nn180100]<ot::Ip6::Address,void>();
  }
}

void std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::clear(uint64_t a1)
{
  uint64_t v1 = (void *)std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__root[abi:nn180100]();
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::destroy(a1, v1);
  std::vector<ot::Ip6::Address>::__alloc[abi:nn180100]();
  *uint64_t v2 = 0;
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__end_node[abi:nn180100]();
  uint64_t v6 = v3;
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
  *uint64_t v4 = v6;
  std::__tree<std::__value_type<unsigned long long,ot::matterInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ot::matterInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ot::matterInfo>>>::__end_node[abi:nn180100]();
  *uint64_t v5 = 0;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  unint64_t v8 = a1;
  unint64_t v7 = a2;
  uint64_t v9 = a1;
  uint64_t v2 = std::string::basic_string[abi:nn180100](std::string&&)::{lambda(std::string&)#1}::operator()((uint64_t)&v6, a2);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *(_OWORD *)uint64_t v3 = 0uLL;
  *(void *)(v3 + 16) = 0;
  std::string::__annotate_shrink[abi:nn180100]();
  if (!std::string::__is_long[abi:nn180100]())
  {
    std::string::size[abi:nn180100]();
    std::string::__annotate_shrink[abi:nn180100]();
  }
  return v9;
}

uint64_t std::string::basic_string[abi:nn180100](std::string&&)::{lambda(std::string&)#1}::operator()(uint64_t a1, uint64_t a2)
{
  if (!std::string::__is_long[abi:nn180100]()) {
    std::string::__annotate_delete[abi:nn180100]();
  }
  return a2;
}

uint64_t __cxx_global_var_init_8()
{
  return __cxa_atexit((void (*)(void *))std::map<unsigned long long,ot::matterInfo>::~map[abi:nn180100], &mMatterRxMap, (void *)&_mh_execute_header);
}

uint64_t __cxx_global_var_init_1_8()
{
  return __cxa_atexit((void (*)(void *))std::map<unsigned long long,ot::matterInfo>::~map[abi:nn180100], &mMatterTxMap, (void *)&_mh_execute_header);
}

uint64_t __cxx_global_var_init_2_0()
{
  return __cxa_atexit((void (*)(void *))std::vector<ot::Ip6::Address>::~vector[abi:nn180100], mMatterEidList, (void *)&_mh_execute_header);
}

uint64_t _GLOBAL__sub_I_mesh_forwarder_cpp()
{
  return __cxx_global_var_init_2_0();
}

char *ot::BinarySearch::Find(ot::BinarySearch *this, char *a2, const void *a3, unsigned __int16 a4, uint64_t (*a5)(ot::BinarySearch *, char *), int (*a6)(const void *, const void *))
{
  unsigned __int16 v10 = 0;
  unsigned __int16 v9 = (unsigned __int16)a3;
  while (v10 < (int)v9)
  {
    unsigned __int16 v8 = (v10 + v9) / 2;
    uint64_t v11 = &a2[a4 * v8];
    int v7 = a5(this, v11);
    if (!v7) {
      return v11;
    }
    if (v7 <= 0) {
      unsigned __int16 v9 = (v10 + v9) / 2;
    }
    else {
      unsigned __int16 v10 = v8 + 1;
    }
  }
  return 0;
}

uint64_t ot::MeshForwarder::SendMessage(ot::MeshForwarder *this, ot::Message *a2)
{
  v119 = this;
  v118 = a2;
  std::string v87 = this;
  v117 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned int v88 = 0;
  unsigned int UriPathOptions = 0;
  ot::Message::SetOffset(v118, 0);
  ot::Message::SetDatagramTag(v118, 0);
  ot::Message::SetTimestampToNow(v118);
  __int16 v115 = -3905;
  uint64_t Length = ot::Message::GetLength(v118);
  unsigned __int16 v114 = Length;
  uint64_t v89 = (unsigned __int16)Length;
  v113 = v63;
  unint64_t v90 = ((unsigned __int16)Length + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(Length, 0);
  std::string v91 = &v63[-v90];
  *(void *)&v112[70] = v3;
  memset(__b, v4, sizeof(__b));
  if (!ot::Message::GetType(v118))
  {
    std::string v86 = (ot::Ip6::Headers *)v112;
    unsigned int UriPathOptions = ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v112, v118);
    if (ot::Ip6::Headers::IsUdp(v86)
      && (unsigned __int16)ot::Ip6::Headers::GetDestinationPort((ot::Ip6::Headers *)v112) == 61631
      && (unsigned __int16)ot::Ip6::Headers::GetSourcePort((ot::Ip6::Headers *)v112) == 61631)
    {
      __int16 v111 = 594;
      unsigned __int16 Bytes = 0;
      unsigned __int16 Bytes = ot::Message::ReadBytes(v118, 0, v91, v89);
      unsigned __int16 v109 = 0;
      uint64_t v81 = Bytes;
      unsigned __int16 v82 = (ot::Ip6::Headers *)v112;
      UdpHeader = (ot::Ip6::Udp::Header *)ot::Ip6::Headers::GetUdpHeader((ot::Ip6::Headers *)v112);
      __int16 v6 = ot::Ip6::Udp::Header::GetLength(UdpHeader);
      uint64_t v85 = 8;
      unsigned __int16 v109 = v81 - (v6 - 8);
      unsigned int v83 = v109;
      unsigned int v84 = Bytes;
      int v7 = (ot::Ip6::Udp::Header *)ot::Ip6::Headers::GetUdpHeader(v82);
      unsigned __int16 v8 = ot::Ip6::Udp::Header::GetLength(v7);
      uint64_t v58 = v83;
      uint64_t v59 = v84;
      uint64_t v60 = v8;
      int v61 = (char *)v85;
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MeshForwarder", "MeshForwarder::%s:coapOffset = %d, raw totalBytes = %d, Udp total packet uint64_t Length = %d, udp header size = %d", v9, v10, v11, v12, v13, v14, (char)"SendMessage");
      if (v91[v109] == v111 && v91[v109 + 1] == HIBYTE(v111))
      {
        int v108 = 0;
        char v80 = v118;
        unsigned __int16 v15 = ot::Message::GetLength(v118);
        int v108 = ot::Message::Clone(v80, v15);
        if (!v108)
        {
          unsigned int UriPathOptions = 3;
          uint64_t v62 = 3;
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshForwarder", "MeshForwarder::%s[BMLR]:Message Clone failed, error = %d", v16, v17, v18, v19, v20, v21, (char)"SendMessage");
          unsigned int v120 = UriPathOptions;
          int v107 = 1;
          return v120;
        }
        v106 = v108;
        ot::Message::RemoveHeader(v108, v109);
        if (ot::Coap::Message::ParseHeader(v106))
        {
          uint64_t v62 = UriPathOptions;
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MeshForwarder", "MeshForwarder::%s[BMLR]:Failed to parse CoAP header, error = %d", v22, v23, v24, v25, v26, v27, (char)"SendMessage");
          ot::Message::Free(v108);
          unsigned int v120 = UriPathOptions;
          int v107 = 1;
          return v120;
        }
        unsigned int UriPathOptions = ot::Coap::Message::ReadUriPathOptions(v106, (char (*)[33])__b);
        if (!UriPathOptions)
        {
          char v105 = 0;
          char v105 = ot::UriFromPath((ot *)__b, v28, v29, v30, v31, v32);
          if (v105 == 8)
          {
            unsigned int v74 = v114;
            unsigned int v72 = (ot::Ip6::Headers *)v112;
            SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v112);
            char v71 = v122;
            ot::Ip6::Address::ToString(SourceAddress, (ot::StringWriter *)v122);
            uint64_t v75 = ot::String<(unsigned short)40>::AsCString((uint64_t)v71);
            DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress(v72);
            int v73 = v121;
            ot::Ip6::Address::ToString(DestinationAddress, (ot::StringWriter *)v121);
            uint64_t v76 = ot::String<(unsigned short)40>::AsCString((uint64_t)v73);
            BOOL IsNonConfirmablePostRequest = ot::Coap::Message::IsNonConfirmablePostRequest(v106);
            int v78 = ot::Message::GetLength(v106);
            unsigned __int16 MessageId = ot::Coap::Message::GetMessageId(v106);
            char v79 = v57;
            v57[1] = v74;
            char v57[2] = v75;
            uint64_t v58 = v76;
            uint64_t v59 = IsNonConfirmablePostRequest;
            uint64_t v60 = (unsigned __int16)v78;
            int v61 = __b;
            uint64_t v62 = MessageId;
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshForwarder", "MeshForwarder::%s[BMLR]: Ipv6 rawFrameuint64_t Length = %d, src[%s] => dst[%s], coap NonConfirmablePost = %d, MessageLength=%d, URI= %s, coapMessageId = %d", v36, v37, v38, v39, v40, v41, (char)"SendMessage");
            ot::Message::Free(v108);
            platformSendPacketToBackBone(v91, v114);
            unsigned int v120 = UriPathOptions;
            int v107 = 1;
            return v120;
          }
        }
        ot::Message::Free(v108);
      }
    }
  }
  ot::PriorityQueue::Enqueue((ot::InstanceLocator *)((char *)v87 + 8), v118);
  LOBYTE(v7ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = ot::Message::GetType(v118);
  int v70 = v70;
  if ((_BYTE)v70)
  {
    if (v70 == 2)
    {
      __int16 Destination = 0;
      int v55 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(v87);
      __int16 Destination = (ot::Child *)ot::ChildSupervisor::GetDestination(v55, v118);
      BOOL v64 = 0;
      if (Destination) {
        BOOL v64 = ot::Child::NeedsIndirectTransmission(Destination);
      }
      if (!v64) {
        __assert_rtn("SendMessage", "mesh_forwarder_ftd.cpp", 203, "(child != nullptr) && child->NeedsIndirectTransmission()");
      }
      ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v87 + 344), v118, Destination);
      goto LABEL_48;
    }
  }
  else
  {
    BOOL v69 = (ot::Ip6::Header *)v104;
    ot::Message::Read<ot::Ip6::Header>(v118, 0, v104);
    IgnoreError();
    uint64_t v42 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v69);
    if (ot::Ip6::Address::IsMulticast(v42))
    {
      uint64_t v43 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v104);
      if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v43)) {
        ot::Message::SetDirectTransmission(v118);
      }
      if (ot::Message::GetSubType(v118) != 5)
      {
        int v68 = (const void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v104);
        LinkLocalAllThreadNodesAddress = (const void *)ot::Mle::Mle::GetLinkLocalAllThreadNodesAddress(v117);
        if (ot::Equatable<ot::Ip6::Address>::operator==(v68, LinkLocalAllThreadNodesAddress)
          || (unsigned __int16 v67 = (const void *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v104),
              RealmLocalAllThreadNodesAddress = (const void *)ot::Mle::Mle::GetRealmLocalAllThreadNodesAddress(v117),
              ot::Equatable<ot::Ip6::Address>::operator==(v67, RealmLocalAllThreadNodesAddress)))
        {
          unsigned __int16 v46 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v87);
          char v102 = ot::ChildTable::Iterate(v46, 1);
          v103 = (ot::ChildTable::IteratorBuilder *)&v102;
          v101[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v102);
          v101[1] = v47;
          v100[0] = ot::ChildTable::IteratorBuilder::end(v103);
          v100[1] = v48;
          while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v101, v100))
          {
            __int16 v99 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v101);
            if (ot::Child::NeedsIndirectTransmission(v99)) {
              ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v87 + 344), v118, v99);
            }
            ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v101);
          }
        }
        else
        {
          uint64_t v49 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v87);
          char v97 = ot::ChildTable::Iterate(v49, 1);
          std::string v98 = (ot::ChildTable::IteratorBuilder *)&v97;
          v96[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v97);
          v96[1] = v50;
          v95[0] = ot::ChildTable::IteratorBuilder::end(v98);
          v95[1] = v51;
          while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v96, v95))
          {
            std::string v94 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v96);
            if (ot::Child::NeedsIndirectTransmission(v94))
            {
              uint64_t v66 = v94;
              char v52 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v104);
              if (ot::Child::HasIp6Address(v66, v52)) {
                ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v87 + 344), v118, v94);
              }
            }
            ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v96);
          }
        }
      }
      goto LABEL_48;
    }
    unsigned int Neighbor = 0;
    unsigned __int16 v65 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(v87);
    char v53 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v104);
    unsigned int Neighbor = (ot::Child *)ot::NeighborTable::FindNeighbor(v65, v53, 1);
    if ((ot::Message::IsDirectTransmission(v118) & 1) == 0)
    {
      if (Neighbor)
      {
        char v54 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v87);
        if (ot::ChildTable::Contains(v54, Neighbor) && ot::Child::NeedsIndirectTransmission(Neighbor))
        {
          ot::IndirectSender::AddMessageForSleepyChild((ot::InstanceLocator *)((char *)v87 + 344), v118, Neighbor);
          goto LABEL_48;
        }
      }
    }
  }
  ot::Message::SetDirectTransmission(v118);
LABEL_48:
  if ((ot::MeshForwarder::RemoveMessageIfNoPendingTx(v87, v118) & 1) == 0) {
    ot::Tasklet::Post((ot::InstanceLocator *)((char *)v87 + 120));
  }
  unsigned int v120 = UriPathOptions;
  int v107 = 1;
  return v120;
}

uint64_t ot::Ip6::Udp::Header::GetLength(ot::Ip6::Udp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return ot::Ip6::Udp::Header::GetLength(this);
}

BOOL ot::Child::NeedsIndirectTransmission(ot::Child *this)
{
  BOOL v3 = 1;
  if (ot::Neighbor::IsRxOnWhenIdle(this)) {
    return ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Child *)((char *)this + 168));
  }
  return v3;
}

{
  return ot::Child::NeedsIndirectTransmission(this);
}

uint64_t ot::MeshForwarder::HandleResolved(uint64_t a1, const void *a2, int a3)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  int v21 = a3;
  char v19 = 0;
  uint64_t v18 = (ot::PriorityQueue *)(a1 + 8);
  v17[0] = ot::PriorityQueue::begin((ot::PriorityQueue *)(a1 + 8));
  v17[1] = v3;
  v16[0] = ot::PriorityQueue::end(v18);
  v16[1] = v4;
  while (1)
  {
    uint64_t result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v17, v16);
    if ((result & 1) == 0) {
      break;
    }
    unsigned __int16 v15 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v17);
    if (ot::Message::IsResolvingAddress(v15))
    {
      ot::Message::Read<ot::Ip6::Address>(v15, 0x18u, v20);
      IgnoreError();
      if (!ot::Unequatable<ot::Ip6::Address>::operator!=(v20, v22))
      {
        if (v21)
        {
          ot::MeshForwarder::LogMessage((ot::MeshForwarder *)a1, 3u, v15, 9, 0);
          ot::PriorityQueue::DequeueAndFree((ot::PriorityQueue *)(a1 + 8), v15);
        }
        else
        {
          int v7 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>((ot::InstanceLocator *)a1);
          if (ot::BackboneRouter::Local::IsPrimary(v7)
            && (unsigned __int16 v8 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1),
                ot::BackboneRouter::Leader::IsDomainUnicast(v8, (const ot::Ip6::Address *)v20))
            && (uint64_t v9 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)a1),
                int v12 = (unsigned __int16)ot::AddressResolver::LookUp(v9, (const ot::Ip6::Address *)v20),
                uint64_t v10 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1),
                v12 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v10)))
          {
            char v14 = 0;
            ot::PriorityQueue::Dequeue((ot::PriorityQueue *)(a1 + 8), v15);
            ot::Message::Read<unsigned char>(v15, 7u, &v14);
            IgnoreError();
            ++v14;
            ot::Message::Write<unsigned char>(v15, 7u, &v14);
            uint64_t v11 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>((ot::InstanceLocator *)a1);
            ot::Ip6::Ip6::HandleDatagram(v11, v15, 2u, 0, 0);
            IgnoreError();
          }
          else
          {
            ot::Message::SetResolvingAddress(v15, 0);
            char v19 = 1;
          }
        }
      }
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v17, v6);
  }
  if (v19) {
    return ot::Tasklet::Post((ot::Tasklet *)(a1 + 120));
  }
  return result;
}

uint64_t ot::MeshForwarder::EvictMessage(ot::MeshForwarder *a1, unsigned __int8 a2)
{
  unsigned int v11 = 23;
  uint64_t v10 = 0;
  for (unsigned __int8 i = 0; i < (int)a2; ++i)
  {
    ot::PriorityQueue::GetHeadForPriority((uint64_t)a1 + 8, i);
    for (j = v2; j && i == ot::Message::GetPriority(j); j = (ot::Message *)ot::Message::GetNext(j))
    {
      if ((ot::Message::GetDoNotEvict(j) & 1) == 0)
      {
        uint64_t v10 = j;
        unsigned int v11 = 0;
        goto LABEL_20;
      }
    }
  }
  for (unsigned __int8 k = a2; k < 4u; ++k)
  {
    ot::PriorityQueue::GetHeadForPriority((uint64_t)a1 + 8, a2);
    for (m = v3; m && k == ot::Message::GetPriority(m); m = (ot::Message *)ot::Message::GetNext(m))
    {
      if (ot::Message::GetDoNotEvict(m) & 1) == 0 && (ot::Message::IsChildPending(m))
      {
        uint64_t v10 = m;
        unsigned int v11 = 0;
        goto LABEL_20;
      }
    }
  }
LABEL_20:
  if (!v11 && v10) {
    ot::MeshForwarder::RemoveMessage(a1, v10);
  }
  return v11;
}

void ot::PriorityQueue::GetHeadForPriority(uint64_t a1, unsigned __int8 a2)
{
  ot::AsConst<ot::PriorityQueue>();
  ot::PriorityQueue::GetHeadForPriority(v2, a2);
  ot::AsNonConst<ot::Message>();
}

{
  ot::PriorityQueue::GetHeadForPriority(a1, a2);
}

uint64_t ot::Message::GetDoNotEvict(ot::Message *this)
{
  return (*(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 68) >> 13) & 1;
}

{
  return ot::Message::GetDoNotEvict(this);
}

BOOL ot::MeshForwarder::RemoveMessages(uint64_t a1, ot::Child *a2, unsigned __int8 a3)
{
  uint64_t v24 = a1;
  uint64_t v23 = a2;
  unsigned __int8 v22 = a3;
  int v21 = (ot::PriorityQueue *)(a1 + 8);
  v20[0] = ot::PriorityQueue::begin((ot::PriorityQueue *)(a1 + 8));
  v20[1] = v3;
  v19[0] = ot::PriorityQueue::end(v21);
  v19[1] = v4;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v20, v19);
    if (!result) {
      break;
    }
    uint64_t v18 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v20);
    if (!v22 || (int v14 = v22, v14 == ot::Message::GetSubType(v18)))
    {
      if (ot::IndirectSender::RemoveMessageFromSleepyChild((ot::IndirectSender *)(a1 + 344), v18, v23))
      {
        int Type = ot::Message::GetType(v18);
        if (Type)
        {
          if (Type == 1)
          {
            ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v16, v18);
            IgnoreError();
            uint64_t v10 = v23;
            uint64_t v9 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
            unsigned __int16 Destination = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v16);
            if (v10 == (ot::Child *)ot::NeighborTable::FindNeighbor(v9, Destination, 1)) {
              ot::Message::ClearDirectTransmission(v18);
            }
          }
        }
        else
        {
          ot::Message::Read<ot::Ip6::Header>(v18, 0, v17);
          IgnoreError();
          int v12 = v23;
          unsigned int v11 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>((ot::InstanceLocator *)a1);
          int v7 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v17);
          if (v12 == (ot::Child *)ot::NeighborTable::FindNeighbor(v11, v7, 1)) {
            ot::Message::ClearDirectTransmission(v18);
          }
        }
      }
      ot::MeshForwarder::RemoveMessageIfNoPendingTx((ot::MeshForwarder *)a1, v18);
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v20, v6);
  }
  return result;
}

BOOL ot::MeshForwarder::RemoveDataResponseMessages(ot::MeshForwarder *this)
{
  uint64_t v20 = this;
  uint64_t v18 = (ot::MeshForwarder *)((char *)this + 8);
  v17[0] = ot::PriorityQueue::begin((ot::MeshForwarder *)((char *)this + 8));
  v17[1] = v1;
  v16[0] = ot::PriorityQueue::end(v18);
  v16[1] = v2;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v17, v16);
    if (!result) {
      break;
    }
    unsigned __int16 v15 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v17);
    if (ot::Message::GetSubType(v15) == 9)
    {
      ot::Message::Read<ot::Ip6::Header>(v15, 0, v19);
      IgnoreError();
      unsigned __int16 Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination((ot::Ip6::Header *)v19);
      if (!ot::Ip6::Address::IsMulticast(Destination))
      {
        __int16 v6 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        char v13 = ot::ChildTable::Iterate(v6, 5);
        int v14 = (ot::ChildTable::IteratorBuilder *)&v13;
        v12[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v13);
        v12[1] = v7;
        v11[0] = ot::ChildTable::IteratorBuilder::end(v14);
        v11[1] = v8;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v12, v11))
        {
          uint64_t v10 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v12);
          ot::IndirectSender::RemoveMessageFromSleepyChild((ot::MeshForwarder *)((char *)this + 344), v15, v10);
          IgnoreError();
          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v12);
        }
      }
      if (*((ot::Message **)this + 7) == v15) {
        *((void *)this + ot::Tlv::SetType(this, 7) = 0;
      }
      ot::MeshForwarder::LogMessage(this, 3u, v15, 0, 0);
      ot::PriorityQueue::DequeueAndFree((ot::MeshForwarder *)((char *)this + 8), v15);
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v17, v4);
  }
  return result;
}

uint64_t ot::MeshForwarder::SendMesh(ot::MeshForwarder *this, ot::Message *a2, ot::Mac::TxFrame *a3)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  unsigned __int16 v15 = a3;
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v14[0] = ot::Mac::Mac::GetPanId(v3);
  uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  v14[1] = ot::Mac::Mac::GetPanId(v4);
  ot::MeshForwarder::PrepareMacHeaders(this, v15, 1, (uint64_t)this + 64, v14, 5, 8, v16);
  int Length = (unsigned __int16)ot::Message::GetLength(v16);
  if (Length > (unsigned __int16)ot::Mac::Frame::GetMaxPayloadLength(v15)) {
    __assert_rtn("SendMesh", "mesh_forwarder_ftd.cpp", 443, "aMessage.GetLength() <= aFrame.GetMaxPayloadLength()");
  }
  uint64_t v10 = v16;
  ot::Mac::Frame::GetPayload(v15);
  uint64_t v9 = v5;
  unsigned __int16 v6 = ot::Message::GetLength(v16);
  ot::Message::ReadBytes(v10, 0, v9, v6);
  unsigned int v11 = v15;
  __int16 v7 = ot::Message::GetLength(v16);
  ot::Mac::Frame::SetPayloadLength(v11, v7);
  uint64_t result = ot::Message::GetLength(v16);
  *((_WORD *)this + 25) = result;
  return result;
}

uint64_t ot::MeshForwarder::UpdateMeshRoute(ot::MeshForwarder *this, ot::Message *a2)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  unsigned int v15 = 0;
  ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v14, a2);
  IgnoreError();
  unsigned int v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int16 Destination = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v14);
  uint64_t NextHop = (unsigned __int16)ot::Mle::MleRouter::GetNextHop(v11, Destination);
  if ((unsigned __int16)NextHop == 65534)
  {
    uint64_t v9 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned __int16 v4 = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v14);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v9, v4, 1);
  }
  else
  {
    uint64_t v3 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v3, NextHop, 1);
  }
  if (Neighbor)
  {
    __int16 Rloc16 = ot::Neighbor::GetRloc16(Neighbor);
    ot::Mac::Address::SetShort((uint64_t)this + 74, Rloc16);
    unsigned __int16 v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    __int16 ShortAddress = ot::Mac::Mac::GetShortAddress(v6);
    ot::Mac::Address::SetShort((uint64_t)this + 64, ShortAddress);
    *((unsigned char *)this + 88) = *((unsigned char *)this + 88) & 0xFE | 1;
    *((_WORD *)this + 4ot::Tlv::SetType(this, 3) = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v14);
    *((_WORD *)this + 4ot::Tlv::SetType(this, 2) = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v14);
    if (*((unsigned __int16 *)this + 43) != (unsigned __int16)ot::Mac::Address::GetShort((ot::MeshForwarder *)((char *)this + 74))) {
      *((unsigned char *)this + 88) = *((unsigned char *)this + 88) & 0xEF | 0x10;
    }
  }
  else
  {
    return 2;
  }
  return v15;
}

uint64_t ot::MeshForwarder::EvaluateRoutingCost(ot::MeshForwarder *this, unsigned __int16 a2, unsigned __int8 *a3, unsigned __int16 *a4)
{
  unsigned __int16 v4 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  uint64_t result = ot::RouterTable::GetPathCost(v4, a2);
  if (*a4 == 65534 || result < (int)*a3)
  {
    *a4 = a2;
    *a3 = result;
  }
  return result;
}

uint64_t ot::MeshForwarder::AnycastRouteLookup(ot::InstanceLocator *a1, char a2, unsigned __int8 a3, _WORD *a4)
{
  int v21 = a1;
  unsigned __int8 v20 = a2;
  unsigned __int8 v19 = a3;
  uint64_t v18 = a4;
  *(_DWORD *)&v17[5] = 0;
  v17[4] = 16;
  *(_WORD *)&v17[1] = -2;
  v17[0] = 0;
  if (a3 <= 1u)
  {
    unsigned __int16 v4 = (ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
    if (ot::NetworkData::LeaderBase::GetContext(v4, v20, (ot::Ip6::Prefix *)v13)) {
      goto LABEL_23;
    }
    while (1)
    {
      while (1)
      {
        do
        {
          uint64_t v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
          if (ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v5, (unsigned int *)&v17[5], (ot::NetworkData::OnMeshPrefixConfig *)v14))goto LABEL_19; {
          Prefix = (unsigned __int8 *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v14);
          }
        }
        while (ot::Unequatable<ot::Ip6::Prefix>::operator!=(Prefix, v13));
        if (v19) {
          break;
        }
        if ((v15 & 0x10) != 0 || (v15 & 0x20) != 0) {
          goto LABEL_14;
        }
      }
      if (v19 != 1) {
        __assert_rtn("AnycastRouteLookup", "mesh_forwarder_ftd.cpp", 543, "false");
      }
      if ((v15 & 0x200) != 0) {
LABEL_14:
      }
        ot::MeshForwarder::EvaluateRoutingCost(a1, v16, &v17[4], (unsigned __int16 *)&v17[1]);
    }
  }
  if (a3 == 2)
  {
    while (1)
    {
      __int16 v7 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
      if (ot::NetworkData::NetworkData::GetNextService(v7, (unsigned int *)&v17[5], (ot::NetworkData::ServiceConfig *)v22))break; {
      if (v22[0] == v20)
      }
        ot::MeshForwarder::EvaluateRoutingCost(a1, v23, &v17[4], (unsigned __int16 *)&v17[1]);
    }
  }
LABEL_19:
  v17[0] = ot::Mle::RouterIdFromRloc16((ot::Mle *)*(unsigned __int16 *)&v17[1]);
  if (!ot::Mle::IsActiveRouter((ot::Mle *)*(unsigned __int16 *)&v17[1]))
  {
    int v11 = (unsigned __int16)ot::Mle::Rloc16FromRouterId((ot::Mle *)v17[0]);
    uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
    if (v11 != (unsigned __int16)ot::Mle::Mle::GetRloc16(v8)) {
      *(_WORD *)&v17[1] = ot::Mle::Rloc16FromRouterId((ot::Mle *)v17[0]);
    }
  }
  *uint64_t v18 = *(_WORD *)&v17[1];
LABEL_23:
  if (*(unsigned __int16 *)&v17[1] == 65534) {
    return 4;
  }
  else {
    return 0;
  }
}

BOOL ot::Unequatable<ot::Ip6::Prefix>::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return !ot::Ip6::Prefix::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Ip6::Prefix>::operator!=(a1, a2);
}

uint64_t ot::MeshForwarder::UpdateIp6RouteFtd(ot::MeshForwarder *this, ot::Ip6::Header *a2, ot::Message *a3)
{
  uint64_t v41 = this;
  uint64_t v40 = a2;
  uint64_t v39 = a3;
  uint64_t v38 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned int BorderAgentRloc = 0;
  unsigned int Neighbor = 0;
  if (ot::MeshForwarder::IsMatter(this, v39, (ot::Ip6::Headers *)v35)) {
    ot::MeshForwarder::UpdateMatterEidList(this, (const ot::Ip6::Headers *)v35);
  }
  __int16 Offset = ot::Message::GetOffset(v39);
  if (v4 | (Offset == 0)) {
    char v5 = 1;
  }
  else {
    char v5 = 0;
  }
  if ((v5 & 1) == 0)
  {
    *((_WORD *)this + 4ot::Tlv::SetType(this, 3) = ot::Message::GetMeshDest(v39);
    goto LABEL_39;
  }
  uint64_t v31 = v38;
  unsigned __int16 Destination = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
  if (ot::Mle::Mle::IsRoutingLocator(v31, Destination))
  {
    __int16 v7 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v7);
    unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
    unsigned __int8 v9 = ot::Mle::RouterIdFromRloc16((ot::Mle *)Locator);
    if (!ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)v9)) {
      return 2;
    }
    *((_WORD *)this + 4ot::Tlv::SetType(this, 3) = Locator;
    goto LABEL_39;
  }
  uint64_t v30 = v38;
  uint64_t v10 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
  if (!ot::Mle::Mle::IsAnycastLocator(v30, v10))
  {
    uint64_t v29 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    uint64_t v18 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v29, v18, 1);
    if (Neighbor)
    {
      *((_WORD *)this + 4ot::Tlv::SetType(this, 3) = ot::Neighbor::GetRloc16(Neighbor);
    }
    else
    {
      uint64_t v28 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      unsigned __int8 v19 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
      if (ot::NetworkData::LeaderBase::IsOnMesh(v28, v19))
      {
        uint64_t v27 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
        unsigned __int8 v20 = (__n128 *)ot::Ip6::Header::GetDestination(v40);
        unsigned int BorderAgentRloc = ot::AddressResolver::Resolve(v27, v20, (unsigned __int16 *)this + 43);
        if (BorderAgentRloc) {
          return BorderAgentRloc;
        }
      }
      else
      {
        uint64_t v26 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        __int16 Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(v40);
        int v21 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
        ot::NetworkData::LeaderBase::RouteLookup(v26, Source, v21, (unsigned __int16 *)this + 43);
        IgnoreError();
      }
    }
    goto LABEL_39;
  }
  int v11 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(v40);
  int v12 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v11);
  unsigned __int16 v33 = ot::Ip6::InterfaceIdentifier::GetLocator(v12);
  if (v33 == 64512)
  {
    unsigned __int8 LeaderId = ot::Mle::Mle::GetLeaderId(v38);
    *((_WORD *)this + 4ot::Tlv::SetType(this, 3) = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderId);
    goto LABEL_39;
  }
  if (v33 <= 0xFC0Fu)
  {
    unsigned int BorderAgentRloc = ot::MeshForwarder::AnycastRouteLookup(this, v33, 0, (_WORD *)this + 43);
    if (BorderAgentRloc) {
      return BorderAgentRloc;
    }
    goto LABEL_39;
  }
  if (v33 <= 0xFC2Fu)
  {
    unsigned int BorderAgentRloc = ot::MeshForwarder::AnycastRouteLookup(this, v33 - 16, 2u, (_WORD *)this + 43);
    if (BorderAgentRloc) {
      return BorderAgentRloc;
    }
    goto LABEL_39;
  }
  if (v33 <= 0xFC37u)
  {
    int v14 = (ot::MeshCoP *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    unsigned int BorderAgentRloc = ot::MeshCoP::GetBorderAgentRloc(v14, (ot::MeshForwarder *)((char *)this + 86), v15);
    if (BorderAgentRloc) {
      return BorderAgentRloc;
    }
    goto LABEL_39;
  }
  if (v33 == 64568)
  {
    unsigned __int16 v16 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    if (!ot::BackboneRouter::Leader::HasPrimary(v16)) {
      return 2;
    }
    uint64_t v17 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    *((_WORD *)this + 4ot::Tlv::SetType(this, 3) = ot::BackboneRouter::Leader::GetServer16(v17);
    goto LABEL_39;
  }
  if (v33 < 0xFC40u || v33 > 0xFC4Eu) {
    return 2;
  }
  unsigned int BorderAgentRloc = ot::MeshForwarder::AnycastRouteLookup(this, v33 - 63, 1u, (_WORD *)this + 43);
  if (!BorderAgentRloc)
  {
LABEL_39:
    if (*((unsigned __int16 *)this + 43) == 65534)
    {
      return 2;
    }
    else
    {
      unsigned __int8 v22 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      *((_WORD *)this + 4ot::Tlv::SetType(this, 2) = ot::Mac::Mac::GetShortAddress(v22);
      unsigned int BorderAgentRloc = ot::Mle::MleRouter::CheckReachability(v38, *((_WORD *)this + 43), v40);
      if (!BorderAgentRloc)
      {
        ot::Message::SetMeshDest(v39, *((_WORD *)this + 43));
        __int16 NextHop = ot::Mle::MleRouter::GetNextHop(v38, *((_WORD *)this + 43));
        ot::Mac::Address::SetShort((uint64_t)this + 74, NextHop);
        if (*((unsigned __int16 *)this + 43) != (unsigned __int16)ot::Mac::Address::GetShort((ot::MeshForwarder *)((char *)this + 74)))
        {
          ot::Mac::Address::SetShort((uint64_t)this + 64, *((_WORD *)this + 42));
          *((unsigned char *)this + 88) = *((unsigned char *)this + 88) & 0xFE | 1;
          *((unsigned char *)this + 88) = *((unsigned char *)this + 88) & 0xEF | 0x10;
        }
      }
    }
  }
  return BorderAgentRloc;
}

uint64_t ot::Message::GetMeshDest(ot::Message *this)
{
  return *(unsigned __int16 *)(ot::Buffer::GetMetadata(this) + 50);
}

{
  return ot::Message::GetMeshDest(this);
}

BOOL ot::Mle::MleRouter::IsRouterIdValid(ot::Mle::MleRouter *this)
{
  return this <= 0x3Eu;
}

{
  return ot::Mle::MleRouter::IsRouterIdValid(this);
}

uint64_t ot::AddressResolver::Resolve(ot::AddressResolver::CacheEntry **this, __n128 *a2, unsigned __int16 *a3)
{
  return ot::AddressResolver::Resolve(this, a2, a3, 1);
}

{
  return ot::AddressResolver::Resolve(this, a2, a3);
}

uint64_t ot::Message::SetMeshDest(ot::Message *this, __int16 a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(_WORD *)(result + 5ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  return result;
}

{
  return ot::Message::SetMeshDest(this, a2);
}

void ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::MeshForwarder *this, const ot::Message *a2, const ot::Mac::Addresses *a3)
{
  unsigned __int8 v19 = this;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  int v16 = 0;
  if (ot::Mac::Address::IsShort(a3) && ot::Mac::Address::IsShort((ot::Mac::Address *)((char *)v17 + 10)))
  {
    char v13 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    __int16 Short = ot::Mac::Address::GetShort(v17);
    ot::ChildTable::FindChild(v13, Short, 5);
    if ((!v4 || ot::Neighbor::IsFullThreadDevice(v4))
      && !ot::Ip6::Headers::ParseFrom((ot::Ip6::Headers *)v15, v18))
    {
      DestinationAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v15);
      if (!ot::Ip6::Address::IsMulticast(DestinationAddress))
      {
        int v12 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        unsigned __int16 v6 = (const ot::Ip6::Address *)ot::Ip6::Headers::GetDestinationAddress((ot::Ip6::Headers *)v15);
        if (ot::NetworkData::LeaderBase::IsOnMesh(v12, v6))
        {
          int v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          unsigned __int16 v10 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v17 + 10));
          ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v15);
          int v16 = ot::Mle::MleRouter::CheckReachability(v11, v10, v7);
          if (v16 == 4)
          {
            unsigned __int16 v9 = ot::Mac::Address::GetShort(v17);
            unsigned __int16 v8 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v17 + 10));
            ot::MeshForwarder::SendDestinationUnreachable(this, v9, v8, (const ot::Ip6::Headers *)v15);
          }
        }
      }
    }
  }
}

void ot::MeshForwarder::SendDestinationUnreachable(ot::MeshForwarder *this, unsigned __int16 a2, unsigned __int16 a3, const ot::Ip6::Headers *a4)
{
  unsigned __int8 v19 = this;
  unsigned __int16 v18 = a2;
  unsigned __int16 v17 = a3;
  int v16 = a4;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v15);
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v14);
  char v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  MeshLocal16 = (_OWORD *)ot::Mle::Mle::GetMeshLocal16(v4);
  *(_OWORD *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v15) = *MeshLocal16;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v15);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
  ot::Ip6::InterfaceIdentifier::SetLocator(Iid, v18);
  memcpy(v14, v15, sizeof(v14));
  __int16 v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  int v12 = (_OWORD *)ot::Mle::Mle::GetMeshLocal16(v7);
  *(_OWORD *)ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)v1ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4) = *v12;
  SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr((ot::Ip6::MessageInfo *)v14);
  unsigned __int16 v9 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(SockAddr);
  ot::Ip6::InterfaceIdentifier::SetLocator(v9, v17);
  unsigned __int16 v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
  ot::Ip6::Icmp::SendError(v10, 1, 0, (ot::Ip6::MessageInfo *)v15, v16, (uint64_t)v14);
  IgnoreError();
}

uint64_t ot::MeshForwarder::CheckReachability(ot::MeshForwarder *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3)
{
  unsigned __int16 v17 = this;
  int v16 = a2;
  __int16 v15 = a3;
  unsigned int v14 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  unsigned int v14 = ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v13, a2, a3, Instance);
  if (v14 == 23)
  {
    return 0;
  }
  else
  {
    unsigned __int16 v9 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    unsigned __int16 Short = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v15 + 10));
    ot::Ip6::Headers::GetIp6Header((ot::Ip6::Headers *)v13);
    unsigned int v14 = ot::Mle::MleRouter::CheckReachability(v9, Short, v4);
    if (v14 == 4)
    {
      unsigned __int16 v7 = ot::Mac::Address::GetShort(v15);
      unsigned __int16 v5 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v15 + 10));
      ot::MeshForwarder::SendDestinationUnreachable(this, v7, v5, (const ot::Ip6::Headers *)v13);
    }
  }
  return v14;
}

uint64_t ot::Ip6::InterfaceIdentifier::SetLocator(ot::Ip6::InterfaceIdentifier *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Tlv::SetType(this, 3) = result;
  return result;
}

{
  return ot::Ip6::InterfaceIdentifier::SetLocator(this, a2);
}

void ot::MeshForwarder::HandleMesh(ot::MeshForwarder *this, ot::FrameData *a2, const ot::Mac::Address *a3, const ot::ThreadLinkInfo *a4)
{
  uint64_t v38 = this;
  uint64_t v37 = a2;
  uint64_t v36 = a3;
  uint64_t v35 = a4;
  int v34 = 0;
  unsigned __int16 v33 = 0;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v31);
  if (ot::ThreadLinkInfo::IsLinkSecurityEnabled(v35))
  {
    int v34 = ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v30, v37);
    if (!v34)
    {
      __int16 Source = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v30);
      ot::Mac::Address::SetShort((uint64_t)v31, Source);
      __int16 Destination = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v30);
      ot::Mac::Address::SetShort((uint64_t)v32, Destination);
      ot::MeshForwarder::UpdateRoutes(this, v37, (const ot::Mac::Addresses *)v31);
      int Short = (unsigned __int16)ot::Mac::Address::GetShort((ot::Mac::Address *)v32);
      unsigned __int16 v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      if (Short == (unsigned __int16)ot::Mac::Mac::GetShortAddress(v6)
        || (uint64_t v25 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
            unsigned __int16 v8 = ot::Mac::Address::GetShort((ot::Mac::Address *)v32),
            ot::Mle::MleRouter::IsMinimalChild(v25, v8)))
      {
        if (ot::Lowpan::FragmentHeader::IsFragmentHeader(v37, v7))
        {
          ot::MeshForwarder::HandleFragment(this, v37, (const ot::Mac::Addresses *)v31, v35);
        }
        else if (ot::Lowpan::Lowpan::IsLowpanHc((uint64_t)v37, v9))
        {
          ot::MeshForwarder::HandleLowpanHC(this, v37, (const ot::Mac::Addresses *)v31, v35);
        }
        else
        {
          int v34 = 6;
        }
      }
      else
      {
        char HopsLeft = ot::Lowpan::MeshHeader::GetHopsLeft((ot::Lowpan::MeshHeader *)v30);
        if (v11 | (HopsLeft == 0)) {
          char v12 = 1;
        }
        else {
          char v12 = 0;
        }
        if ((v12 & 1) == 0)
        {
          BOOL v29 = 1;
          uint64_t v24 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          unsigned __int16 v23 = ot::Mac::Address::GetShort(v36);
          unsigned __int16 v13 = ot::Mac::Address::GetShort((ot::Mac::Address *)v32);
          ot::Mle::MleRouter::ResolveRoutingLoops(v24, v23, v13);
          int v34 = ot::MeshForwarder::CheckReachability(this, v37, (const ot::Mac::Addresses *)v31);
          if (!v34)
          {
            ot::Lowpan::MeshHeader::DecrementHopsLeft((uint64_t)v30);
            ot::MeshForwarder::GetForwardFramePriority(this, v37, (ot::Mac::Address *)v31, (char *)&v29);
            unsigned __int8 v22 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(this);
            ot::Message::Settings::Settings(v28, v29);
            unsigned __int16 v33 = ot::MessagePool::Allocate(v22, 1, 0, (ot::Message::Settings *)v28);
            if (v33)
            {
              int v34 = ot::Lowpan::MeshHeader::AppendTo((ot::Lowpan::MeshHeader *)v30, v33);
              if (!v34)
              {
                int v34 = ot::Message::AppendData<(ot::DataLengthType)1>(v33, (uint64_t)v37);
                if (!v34)
                {
                  ot::Message::SetLinkInfo(v33, v35);
                  ot::MeshForwarder::LogMessage(this, 0, v33, 0, v36);
                  ot::MeshForwarder::SendMessage(this, v33);
                  IgnoreError();
                }
              }
            }
            else
            {
              int v34 = 3;
            }
          }
        }
      }
    }
  }
  else
  {
    int v34 = 8;
  }
  if (v34)
  {
    char v21 = ot::ErrorToString(v34);
    ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)v37);
    ot::Mac::Address::ToString(v36, (ot::StringWriter *)v39);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v39);
    char IsLinkSecurityEnabled = ot::ThreadLinkInfo::IsLinkSecurityEnabled(v35);
    ot::ToYesNo((ot *)(IsLinkSecurityEnabled & 1));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshForwarder", "Dropping rx mesh frame, error:%s, len:%d, src:%s, sec:%s", v15, v16, v17, v18, v19, v20, v21);
    if (v33) {
      ot::Message::Free(v33);
    }
  }
}

void ot::MeshForwarder::UpdateRoutes(ot::MeshForwarder *this, const ot::FrameData *a2, const ot::Mac::Addresses *a3)
{
  unsigned __int16 v23 = this;
  unsigned __int8 v22 = a2;
  char v21 = a3;
  if (!ot::Mac::Address::IsBroadcast((const ot::Mac::Addresses *)((char *)a3 + 10)) && ot::Mac::Address::IsShort(v21))
  {
    Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
    if (!ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v20, v22, v21, Instance))
    {
      SourceAddress = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v20);
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(SourceAddress);
      if (!ot::Ip6::InterfaceIdentifier::IsLocator(Iid))
      {
        uint64_t v17 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        unsigned __int16 v6 = (const ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v20);
        if (ot::NetworkData::LeaderBase::IsOnMesh(v17, v6))
        {
          uint64_t v16 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
          unsigned int v14 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v20);
          unsigned __int16 Short = ot::Mac::Address::GetShort(v21);
          unsigned __int16 v7 = ot::Mac::Address::GetShort((ot::Mac::Address *)((char *)v21 + 10));
          ot::AddressResolver::UpdateSnoopedCacheEntry(v16, (__n128 *)v14, Short, v7);
        }
      }
      unsigned __int16 v13 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
      unsigned __int16 v8 = (ot::Ip6::Address *)ot::Ip6::Headers::GetSourceAddress((ot::Ip6::Headers *)v20);
      unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v13, v8, 1);
      if (Neighbor && !ot::Neighbor::IsFullThreadDevice(Neighbor))
      {
        unsigned __int16 v12 = ot::Mac::Address::GetShort(v21);
        unsigned __int16 v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        unsigned __int16 ShortAddress = ot::Mac::Mac::GetShortAddress(v9);
        if (!ot::Mle::RouterIdMatch((ot::Mle *)v12, ShortAddress))
        {
          char v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::Mle::MleRouter::RemoveNeighbor(v11, Neighbor);
        }
      }
    }
  }
}

uint64_t ot::Lowpan::MeshHeader::GetHopsLeft(ot::Lowpan::MeshHeader *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return ot::Lowpan::MeshHeader::GetHopsLeft(this);
}

void ot::MeshForwarder::GetForwardFramePriority(ot::InstanceLocator *a1, _OWORD *a2, ot::Mac::Address *a3, char *a4)
{
  uint64_t v25 = a1;
  uint64_t v24 = a2;
  unsigned __int16 v23 = a3;
  unsigned __int8 v22 = a4;
  Frameunsigned __int8 Priority = 0;
  long long v20 = *a2;
  char v19 = 0;
  if (ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v18, (ot::FrameData *)&v20)
    || ((char v19 = 1,
         Datagram__int16 Offset = ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v18),
         !(v5 | (DatagramOffset == 0)))
      ? (char v6 = 0)
      : (char v6 = 1),
        (v6 & 1) != 0))
  {
    Frameunsigned __int8 Priority = ot::MeshForwarder::GetFramePriority(a1, (const ot::FrameData *)&v20, v23, v22);
  }
  else
  {
    unsigned __int16 Short = ot::Mac::Address::GetShort(v23);
    Frameunsigned __int8 Priority = ot::MeshForwarder::GetFragmentPriority((uint64_t)a1, (ot::Lowpan::FragmentHeader *)v18, Short, v22);
  }
  if (FramePriority)
  {
    char v16 = ot::ErrorToString(FramePriority);
    ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)&v20);
    ot::Mac::Address::ToString(v23, (ot::StringWriter *)v27);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v27);
    ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v23 + 10), (ot::StringWriter *)v26);
    ot::String<(unsigned short)17>::AsCString((uint64_t)v26);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"MeshForwarder", "Failed to get forwarded frame priority, error:%s, len:%d, src:%s, dst:%s", v8, v9, v10, v11, v12, v13, v16);
  }
  else if (v19)
  {
    unsigned __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)&v20);
    __int16 v14 = ot::Mac::Address::GetShort(v23);
    ot::MeshForwarder::UpdateFragmentPriority((uint64_t)a1, (ot::Lowpan::FragmentHeader *)v18, Length, v14, *v22);
  }
}

uint64_t ot::MeshForwarder::FragmentPriorityList::UpdateOnTimeTick(ot::MeshForwarder::FragmentPriorityList *this)
{
  char v4 = 0;
  uint64_t v3 = this;
  uint64_t v2 = (ot::MeshForwarder::FragmentPriorityList *)((char *)this + 48);
  while (v3 != v2)
  {
    if (!ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(v3))
    {
      ot::MeshForwarder::FragmentPriorityList::Entry::DecrementLifetime((uint64_t)v3);
      if (!ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(v3)) {
        char v4 = 1;
      }
    }
    uint64_t v3 = (ot::MeshForwarder::FragmentPriorityList::Entry *)((char *)v3 + 6);
  }
  return v4 & 1;
}

BOOL ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(ot::MeshForwarder::FragmentPriorityList::Entry *this)
{
  return *((unsigned char *)this + 4) == 0;
}

{
  return ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(this);
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::DecrementLifetime(uint64_t this)
{
  return this;
}

{
  return ot::MeshForwarder::FragmentPriorityList::Entry::DecrementLifetime(this);
}

uint64_t ot::MeshForwarder::UpdateFragmentPriority(uint64_t a1, ot::Lowpan::FragmentHeader *a2, unsigned __int16 a3, __int16 a4, char a5)
{
  unsigned __int16 DatagramTag = ot::Lowpan::FragmentHeader::GetDatagramTag(a2);
  Entry = ot::MeshForwarder::FragmentPriorityList::FindEntry((ot::MeshForwarder::FragmentPriorityList *)(a1 + 296), a4, DatagramTag);
  if (Entry)
  {
    int v9 = a3 + (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset(a2);
    if (v9 < (unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramSize(a2)) {
      return ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime((uint64_t)Entry);
    }
    else {
      return ot::Clearable<ot::MeshForwarder::FragmentPriorityList::Entry>::Clear((uint64_t)Entry);
    }
  }
  else
  {
    uint64_t result = ot::Lowpan::FragmentHeader::GetDatagramOffset(a2);
    if (!(_WORD)result)
    {
      __int16 v7 = ot::Lowpan::FragmentHeader::GetDatagramTag(a2);
      ot::MeshForwarder::FragmentPriorityList::AllocateEntry(a1 + 296, a4, v7, a5);
      uint64_t v8 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
      return ot::TimeTicker::RegisterReceiver(v8, 0);
    }
  }
  return result;
}

ot::MeshForwarder::FragmentPriorityList::Entry *ot::MeshForwarder::FragmentPriorityList::FindEntry(ot::MeshForwarder::FragmentPriorityList *this, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t v6 = 0;
  char v5 = this;
  char v4 = (ot::MeshForwarder::FragmentPriorityList *)((char *)this + 48);
  while (v5 != v4)
  {
    if (!ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired(v5)
      && ot::MeshForwarder::FragmentPriorityList::Entry::Matches(v5, a2, a3))
    {
      return v5;
    }
    char v5 = (ot::MeshForwarder::FragmentPriorityList::Entry *)((char *)v5 + 6);
  }
  return (ot::MeshForwarder::FragmentPriorityList::Entry *)v6;
}

uint64_t ot::MeshForwarder::FragmentPriorityList::AllocateEntry(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v7 = 0;
  uint64_t v6 = a1;
  uint64_t v5 = a1 + 48;
  while (v6 != v5)
  {
    if (ot::MeshForwarder::FragmentPriorityList::Entry::IsExpired((ot::MeshForwarder::FragmentPriorityList::Entry *)v6))
    {
      ot::Clearable<ot::MeshForwarder::FragmentPriorityList::Entry>::Clear(v6);
      *(_WORD *)uint64_t v6 = a2;
      *(_WORD *)(v6 + ot::Tlv::SetType(this, 2) = a3;
      *(unsigned char *)(v6 + 5) = *(unsigned char *)(v6 + 5) & 0xFC | a4 & 3;
      ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime(v6);
      return v6;
    }
    v6 += 6;
  }
  return v7;
}

uint64_t ot::Clearable<ot::MeshForwarder::FragmentPriorityList::Entry>::Clear(uint64_t result)
{
  *(_DWORD *)uint64_t result = 0;
  *(_WORD *)(result + --*(unsigned char *)(this + 4) = 0;
  return result;
}

{
  return ot::Clearable<ot::MeshForwarder::FragmentPriorityList::Entry>::Clear(result);
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime(uint64_t this)
{
  *(unsigned char *)(this + --*(unsigned char *)(this + 4) = 3;
  return this;
}

{
  return ot::MeshForwarder::FragmentPriorityList::Entry::ResetLifetime(this);
}

BOOL ot::MeshForwarder::FragmentPriorityList::Entry::Matches(ot::MeshForwarder::FragmentPriorityList::Entry *this, unsigned __int16 a2, unsigned __int16 a3)
{
  BOOL v4 = 0;
  if (*(unsigned __int16 *)this == a2) {
    return *((unsigned __int16 *)this + 1) == a3;
  }
  return v4;
}

{
  return ot::MeshForwarder::FragmentPriorityList::Entry::Matches(this, a2, a3);
}

uint64_t ot::MeshForwarder::GetFragmentPriority(uint64_t a1, ot::Lowpan::FragmentHeader *a2, unsigned __int16 a3, unsigned char *a4)
{
  unsigned int v9 = 0;
  unsigned __int16 DatagramTag = ot::Lowpan::FragmentHeader::GetDatagramTag(a2);
  Entry = ot::MeshForwarder::FragmentPriorityList::FindEntry((ot::MeshForwarder::FragmentPriorityList *)(a1 + 296), a3, DatagramTag);
  if (Entry) {
    *a4 = ot::MeshForwarder::FragmentPriorityList::Entry::GetPriority(Entry);
  }
  else {
    return 23;
  }
  return v9;
}

uint64_t ot::MeshForwarder::FragmentPriorityList::Entry::GetPriority(ot::MeshForwarder::FragmentPriorityList::Entry *this)
{
  return *((unsigned char *)this + 5) & 3;
}

{
  return ot::MeshForwarder::FragmentPriorityList::Entry::GetPriority(this);
}

uint64_t ot::MeshForwarder::LogMeshFragmentHeader(uint64_t a1, unsigned __int8 a2, ot::Message *a3, ot::Mac::Address *a4, int a5, unsigned __int16 *a6, ot::Mac::Address *a7, char a8, const char *a9)
{
  uint64_t v69 = a1;
  unsigned __int8 v68 = a2;
  unsigned __int16 v67 = a3;
  uint64_t v66 = a4;
  int v65 = a5;
  BOOL v64 = a6;
  uint64_t v63 = a7;
  char v62 = a8;
  int v61 = (char *)a9;
  uint64_t v52 = a1;
  unsigned int v60 = 1;
  char v59 = 0;
  BOOL v58 = 0;
  unsigned __int16 v55 = 0;
  char v54 = 0;
  char v53 = "";
  if (!ot::Lowpan::MeshHeader::ParseFrom((ot::Lowpan::MeshHeader *)v57, a3, &v55))
  {
    uint64_t v49 = v63;
    uint64_t v50 = (ot::Lowpan::MeshHeader *)v57;
    __int16 Source = ot::Lowpan::MeshHeader::GetSource((ot::Lowpan::MeshHeader *)v57);
    ot::Mac::Address::SetShort((uint64_t)v49, Source);
    uint64_t v51 = (ot::Mac::Address *)((char *)v63 + 10);
    __int16 Destination = ot::Lowpan::MeshHeader::GetDestination((ot::Lowpan::MeshHeader *)v57);
    ot::Mac::Address::SetShort((uint64_t)v51, Destination);
    unsigned __int16 *v64 = v55;
    if (!ot::Lowpan::FragmentHeader::ParseFrom((ot::Lowpan::FragmentHeader *)v56, v67, *v64, &v55))
    {
      char v59 = 1;
      *v64 += v55;
    }
    BOOL v48 = 1;
    if (v68) {
      BOOL v48 = v68 == 4;
    }
    BOOL v58 = v48;
    __str = v61;
    unsigned __int16 v46 = ot::MeshForwarder::MessageActionToString(v52, v68, v65);
    int Length = ot::Message::GetLength(v67);
    if (v66)
    {
      uint64_t v11 = ", from:";
      if (v68) {
        uint64_t v11 = ", to:";
      }
      uint64_t v44 = v11;
    }
    else
    {
      uint64_t v44 = "";
    }
    uint64_t v43 = v44;
    if (v66)
    {
      uint64_t v41 = v73;
      ot::Mac::Address::ToString(v66, (ot::StringWriter *)v73);
      uint64_t v42 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v73);
    }
    else
    {
      uint64_t v42 = "";
    }
    uint64_t v32 = v42;
    unsigned __int16 v33 = v72;
    ot::Mac::Address::ToString(v63, (ot::StringWriter *)v72);
    int v34 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v72);
    uint64_t v35 = v71;
    ot::Mac::Address::ToString((ot::Mac::Address *)((char *)v63 + 10), (ot::StringWriter *)v71);
    uint64_t v36 = (const char *)ot::String<(unsigned short)17>::AsCString((uint64_t)v71);
    unsigned __int8 HopsLeft = ot::Lowpan::MeshHeader::GetHopsLeft((ot::Lowpan::MeshHeader *)v57);
    int v37 = (v68 == 0) + HopsLeft;
    uint64_t v38 = ot::ToYesNo((ot *)(v59 & 1));
    char IsLinkSecurityEnabled = ot::Message::IsLinkSecurityEnabled(v67);
    uint64_t v39 = ot::ToYesNo((ot *)(IsLinkSecurityEnabled & 1));
    __int16 v14 = "";
    if (v65) {
      __int16 v14 = ", error:";
    }
    uint64_t v40 = v14;
    if (v65) {
      uint64_t v31 = ot::ErrorToString(v65);
    }
    else {
      uint64_t v31 = "";
    }
    BOOL v29 = v31;
    uint64_t v15 = ", rss:";
    if (!v58) {
      uint64_t v15 = "";
    }
    uint64_t v30 = v15;
    if (v58)
    {
      RssAverager = (ot::RssAverager *)ot::Message::GetRssAverager(v67);
      uint64_t v27 = v70;
      ot::RssAverager::ToString(RssAverager, (ot::StringWriter *)v70);
      uint64_t v28 = (const char *)ot::String<(unsigned short)10>::AsCString((uint64_t)v70);
    }
    else
    {
      uint64_t v28 = "";
    }
    if (v54) {
      uint64_t v17 = ", radio:";
    }
    else {
      uint64_t v17 = "";
    }
    uint64_t v26 = v20;
    snprintf(__str, 0x800uLL, "%s mesh frame, len:%d%s%s, msrc:%s, mdst:%s, hops:%d, frag:%s, sec:%s%s%s%s%s%s%s", v46, (unsigned __int16)Length, v43, v32, v34, v36, v37, v38, v39, v40, v29, v30, v28, v17, v53);
    if ((v59 & 1) == 0) {
      return 0;
    }
    char v20[16] = (ot::Lowpan::FragmentHeader *)v61;
    uint64_t v25 = &v61[strlen(v61)];
    size_t __size = 2048 - strlen(v61);
    char v21 = (ot::Lowpan::FragmentHeader *)v56;
    int DatagramTag = ot::Lowpan::FragmentHeader::GetDatagramTag((ot::Lowpan::FragmentHeader *)v56);
    Datagram__int16 Offset = ot::Lowpan::FragmentHeader::GetDatagramOffset(v21);
    Datagramunsigned __int16 Size = ot::Lowpan::FragmentHeader::GetDatagramSize(v21);
    snprintf(v25, __size, " Frag tag:%04x, offset:%d, size:%d", (unsigned __int16)DatagramTag, (unsigned __int16)DatagramOffset, DatagramSize);
    if (!(unsigned __int16)ot::Lowpan::FragmentHeader::GetDatagramOffset((ot::Lowpan::FragmentHeader *)v56)) {
      return 0;
    }
  }
  return v60;
}

uint64_t ot::MeshForwarder::LogMeshIpHeader(ot::MeshForwarder *a1, char a2, ot::Message *a3, unsigned __int16 a4, ot::Mac::Addresses *a5, unsigned __int8 a6, char *a7)
{
  uint64_t v45 = a1;
  char v44 = a2;
  uint64_t v43 = a3;
  unsigned __int16 v42 = a4;
  uint64_t v41 = a5;
  unsigned __int8 v40 = a6;
  __s = a7;
  int v34 = a1;
  memset(__b, 0, sizeof(__b));
  char v37 = 0;
  bzero(v46, 0x400uLL);
  unsigned __int16 v36 = 0;
  uint64_t result = ot::Ip6::Headers::DecompressFrom((ot::Ip6::Headers *)v38, v43, v42, v41);
  if (!result)
  {
    if (ot::MeshForwarder::IsMatter(v34, v43, (ot::Ip6::Headers *)v38))
    {
      char v37 = 1;
      uint64_t v32 = v38;
      ot::MeshForwarder::GetMatterHeader(v34, (const ot::Ip6::Headers *)v38, __b);
      int Length = ot::Message::GetLength(v43);
      int Timestamp = ot::Message::GetTimestamp(v43);
      int Value = ot::Time::GetValue((ot::Time *)&Timestamp);
      ot::MeshForwarder::CountMatterDuplicates((uint64_t)v34, (ot::Ip6::Headers *)v38, Length, Value, v44, v40);
    }
    unsigned int v9 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v34);
    if (ot::MessagePool::GetIsBufferStatsEnabled(v9)) {
      ot::Message::GetBufferIDs(v43, v46);
    }
    unsigned __int16 v36 = strlen(__s);
    __str = &__s[v36];
    size_t __size = 2048 - v36;
    uint64_t v28 = (ot::Ip6::Headers *)v38;
    unsigned __int8 IpProto = ot::Ip6::Headers::GetIpProto((ot::Ip6::Headers *)v38);
    uint64_t v27 = (const char *)ot::Ip6::Ip6::IpProtoToString((ot::Ip6::Ip6 *)IpProto, v11, v12, v13, v14, v15);
    int Checksum = ot::Ip6::Headers::GetChecksum((ot::Ip6::Headers *)v38);
    unsigned __int8 Ecn = ot::Ip6::Headers::GetEcn((ot::Ip6::Headers *)v38);
    uint64_t v30 = ot::Ip6::Ip6::EcnToString(Ecn);
    uint64_t v31 = ot::MeshForwarder::MessagePriorityToString(v34, v43);
    if (v37) {
      uint64_t v24 = __b;
    }
    else {
      uint64_t v24 = "";
    }
    v20[9] = v24;
    char v21 = v43;
    uint64_t v17 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v34);
    int TotalBufferCount = ot::MessagePool::GetTotalBufferCount(v17);
    uint64_t v18 = (ot::MessagePool *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MessagePool>(v34);
    unsigned __int16 FreeBufferCount = ot::MessagePool::GetFreeBufferCount(v18);
    unsigned __int16 v23 = v20;
    snprintf(__str, __size, " IPv6 %s msg, chksum:%04x, ecn:%s, prio:%s%s, buffer=%p%s, tot_buf=%d, free_buf=%d,", v27, (unsigned __int16)Checksum, v30, v31, v24, v21, v46, (unsigned __int16)TotalBufferCount, FreeBufferCount);
    return ot::MeshForwarder::LogIp6SourceDestAddresses((uint64_t)v34, (ot::Ip6::Headers *)v38, v40, __s);
  }
  return result;
}

void ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder *a1, unsigned __int8 a2, ot::Message *a3, ot::Mac::Address *a4, int a5, unsigned __int8 a6)
{
  char v19 = a1;
  unsigned __int8 v18 = a2;
  uint64_t v17 = a3;
  char v16 = a4;
  int v15 = a5;
  unsigned __int8 v14 = a6;
  unsigned __int16 v13 = 0;
  ot::Mac::Addresses::Addresses((ot::Mac::Addresses *)v12);
  bzero(v20, 0x800uLL);
  if (!ot::MeshForwarder::LogMeshFragmentHeader((uint64_t)a1, v18, v17, v16, v15, &v13, (ot::Mac::Address *)v12, v14, v20))
  {
    ot::MeshForwarder::LogMeshIpHeader(a1, v18, v17, v13, (ot::Mac::Addresses *)v12, v14, v20);
    ot::Logger::LogInModule((ot *)"MeshForwarder", v14, "ITMD: %s", v6, v7, v8, v9, v10, (char)v20);
  }
}

void ot::Mle::Mle::HandleCslPeripheralAttachRetryTimer(ot::Mle::Mle *this)
{
  int v8 = ot::Mle::Mle::AttachCslPeripheral(this, (ot::Mle::Mle *)((char *)this + 1114), *((_WORD *)this + 562), *((unsigned char *)this + 1126), 1);
  char v1 = otThreadErrorToString(v8);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Mle::HandleCslPeripheralAttachRetryTimer Retry Status = %s", v2, v3, v4, v5, v6, v7, v1);
}

void ot::Mle::Mle::HandleAttachTimer(ot::Mle::Mle *this)
{
  uint64_t v28 = this;
  unsigned int v27 = 0;
  char v26 = 1;
  char v25 = 0;
  if ((ot::Mle::Mle::HasAcceptableParentCandidate(this) & 1) == 0
    || ot::Mle::Mle::SendChildIdRequest(this))
  {
    if (*((unsigned char *)this + 241))
    {
      uint64_t v9 = *((unsigned __int8 *)this + 241);
      char v8 = 1;
    }
    else
    {
      uint64_t v9 = *((unsigned __int8 *)this + 241);
      char v8 = 0;
    }
    if ((v8 & 1) == 0)
    {
      switch(v9)
      {
        case 0:
          ot::Mle::Mle::ResetAttachCounter((uint64_t)this);
          break;
        case 1:
          ot::Mle::Mle::ProcessAnnounce(this, v1, v2, v3, v4, v5, v6, v7);
          break;
        case 2:
          __int16 v23 = *((_WORD *)this + 122);
          ot::Mle::Mle::AttachModeToString(*((unsigned char *)this + 409));
          ot::Mle::Mle::ReattachStateToString(*((unsigned char *)this + 243));
          ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Attach attempt %d, %s %s", v10, v11, v12, v13, v14, v15, v23);
          ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 3u);
          ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 416), 0);
          *((unsigned char *)this + 598) = 0;
          *((unsigned char *)this + 24ot::Tlv::SetType(this, 2) = 0;
          char v16 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
          ot::MeshForwarder::SetRxOnWhenIdle(v16, 1, v17, v18, v19, v20, v21, v22);
          goto LABEL_12;
        case 3:
LABEL_12:
          ++*((unsigned char *)this + 242);
          if (ot::Mle::Mle::DetermineParentRequestType((uint64_t)this, &v25, (int *)&v27))
          {
            char v26 = ot::Mle::Mle::PrepareAnnounceState(this) & 1;
            if (v26)
            {
              ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 4u);
              ot::Mle::Mle::SendParentRequest((uint64_t)this, 1);
              *((unsigned char *)this + 68--*(unsigned char *)(this + 4) = -1;
              unsigned int v27 = *((unsigned __int16 *)this + 123);
            }
            else
            {
LABEL_16:
              if ((v26 & 1) == 0
                || ot::Mle::Mle::GetNextAnnounceChannel(this, (unsigned __int8 *)this + 684))
              {
LABEL_19:
                ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 0);
                ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle *)((char *)this + 416));
                unsigned int v27 = ot::Mle::Mle::Reattach(this);
              }
              else
              {
                ot::Mle::Mle::SendAnnounce(this, *((unsigned char *)this + 684), 1);
                unsigned int v27 = *((unsigned __int16 *)this + 123);
              }
            }
          }
          else
          {
            ot::Mle::Mle::SendParentRequest((uint64_t)this, v25);
          }
          break;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_19;
        default:
          JUMPOUT(0);
      }
    }
  }
  else
  {
    ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 5u);
    unsigned int v27 = 1250;
  }
  if (v27) {
    ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 248), v27);
  }
}

uint64_t ot::Mle::Mle::HandleDelayedResponseTimer(ot::Mle::Mle *this)
{
  uint64_t v15 = this;
  int Now = 0;
  int Now = ot::TimerMilli::GetNow(this);
  int DistantFuture = ot::Time::GetDistantFuture((ot::Time *)&Now);
  void v12[2] = (char *)this + 392;
  v12[0] = ot::MessageQueue::begin((ot::Mle::Mle *)((char *)this + 392));
  v12[1] = v1;
  v11[0] = ot::MessageQueue::end((ot::Mle::Mle *)((char *)this + 392));
  v11[1] = v2;
  while (ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v12, v11))
  {
    uint64_t v10 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v12);
    ot::Mle::Mle::DelayedResponseMetadata::ReadFrom((ot::Mle::Mle::DelayedResponseMetadata *)v8, v10);
    if (ot::Time::operator<(&Now, &v9))
    {
      char v6[2] = DistantFuture;
      v6[1] = v9;
      int v7 = ot::Min<ot::Time>(DistantFuture, v9);
      int DistantFuture = v7;
    }
    else
    {
      ot::MessageQueue::Dequeue((ot::Mle::Mle *)((char *)this + 392), v10);
      ot::Mle::Mle::SendDelayedResponse(this, v10, (ot::Mle::Mle::DelayedResponseMetadata *)v8);
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v12, v3);
  }
  v6[0] = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Time::operator<(&DistantFuture, v6);
  if (result) {
    return ot::TimerMilli::FireAt((ot::Mle::Mle *)((char *)this + 272), DistantFuture);
  }
  return result;
}

void ot::Mle::Mle::HandleMessageTransmissionTimer(ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = this;
  if (*((unsigned char *)this + 73) == 1 && *((unsigned char *)this + 320))
  {
    char v8 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::SendLinkRequest(v8, 0);
    IgnoreError();
    --*((unsigned char *)this + 320);
    ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
    return;
  }
  if (*((unsigned char *)this + 593))
  {
    if (*((unsigned char *)this + 593) == 1)
    {
      uint64_t v10 = (ot::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
      if (ot::Notifier::IsPending(v10))
      {
        ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
        return;
      }
      *((unsigned char *)this + 59ot::Tlv::SetType(this, 2) = 0;
    }
    goto LABEL_20;
  }
  if (*((unsigned char *)this + 595) == 1)
  {
    if (*((unsigned __int8 *)this + 594) < 4u)
    {
      ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 80));
      ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)v12, v9);
      if (!ot::Mle::Mle::SendDataRequest(this, (const ot::Ip6::Address *)v12)) {
        ++*((unsigned char *)this + 594);
      }
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Device becomes detached - reached max data request attempts dataReqAttempts(%d) reached maxChildKeepAliveAttempts(%d)", a3, a4, a5, a6, a7, a8, *((unsigned char *)this + 594));
      ot::Mle::Mle::BecomeDetached(this);
      IgnoreError();
    }
  }
  else if (ot::Mle::Mle::IsChild(this) && ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
LABEL_20:
    if (*((unsigned __int8 *)this + 592) < 4u)
    {
      if (!ot::Mle::Mle::SendChildUpdateRequest(this)) {
        ++*((unsigned char *)this + 592);
      }
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Device becomes detached - reached max child update attempts childUpdateAttempts(%d) reached maxChildKeepAliveAttempts(%d)", a3, a4, a5, a6, a7, a8, *((unsigned char *)this + 592));
      ot::Mle::Mle::BecomeDetached(this);
      IgnoreError();
    }
  }
}

uint64_t ot::Mle::Mle::HandleDetachGracefullyTimer(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::Stop(this);
}

void ot::Mle::Mle::HandleCslPeripheralAttachTimer(ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = this;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Mle::HandleCslPeripheralAttachTimer", a3, a4, a5, a6, a7, a8, v55);
  int v60 = *((unsigned __int8 *)this + 384);
  if (v60 == 1)
  {
    *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 2;
    char v8 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v9, v10, v11, v12, v13, v14, v8);
    int TxEndTime = ot::WakeupTxScheduler::GetTxEndTime((ot::Mle::Mle *)((char *)this + 328));
    int ConnectionWindowUs = ot::WakeupTxScheduler::GetConnectionWindowUs((ot::Mle::Mle *)((char *)this + 328));
    int v62 = ot::Time::operator+(&TxEndTime, ConnectionWindowUs);
    ot::TimerMicro::FireAt((ot::Mle::Mle *)((char *)this + 1088), v62);
    char v16 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::SetRxOnWhenIdle(v16, 1, v17, v18, v19, v20, v21, v22);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Connection window open", v23, v24, v25, v26, v27, v28, v56);
  }
  else if (v60 == 2)
  {
    *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 0;
    char v29 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v30, v31, v32, v33, v34, v35, v29);
    if (!ot::Mle::Mle::IsRxOnWhenIdle(this))
    {
      unsigned __int16 v42 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
      ot::MeshForwarder::SetRxOnWhenIdle(v42, 0, v43, v44, v45, v46, v47, v48);
    }
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Connection window closed", v36, v37, v38, v39, v40, v41, v57);
    ot::Mle::Mle::SetThreadCoexConfig(this, 0, *((unsigned char *)this + 73), *((unsigned char *)this + 241));
    ot::TimerMicro::Start((ot::Mle::Mle *)((char *)this + 8), 0x3E8u);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Starting Attach Retry timer", v49, v50, v51, v52, v53, v54, v58);
  }
}

ot::Mle::Mle *ot::Mle::Mle::Mle(ot::Mle::Mle *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachRetryTimer>::TimerMicroIn((ot::Mle::Mle *)((char *)this + 8), a2);
  *((unsigned char *)this + 72) &= ~1u;
  *((unsigned char *)this + 72) &= ~2u;
  *((unsigned char *)this + 7ot::Tlv::SetType(this, 3) = 0;
  ot::Parent::Parent((ot::Mle::Mle *)((char *)this + 80));
  ot::NeighborTable::NeighborTable((ot::Mle::Mle *)((char *)this + 232), a2);
  ot::Mle::DeviceMode::DeviceMode((ot::Mle::Mle *)((char *)this + 240), 8);
  *((unsigned char *)this + 24ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((unsigned char *)this + 24ot::Tlv::SetType(this, 3) = 0;
  *((_WORD *)this + 12ot::Tlv::SetType(this, 2) = 0;
  *((_WORD *)this + 12ot::Tlv::SetType(this, 3) = 1400;
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::TimerMilliIn((ot::Mle::Mle *)((char *)this + 248), a2);
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::TimerMilliIn((ot::Mle::Mle *)((char *)this + 272), a2);
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::TimerMilliIn((ot::Mle::Mle *)((char *)this + 296), a2);
  *((unsigned char *)this + 32ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((unsigned char *)this + 32ot::Tlv::SetType(this, 2) = 0;
  ot::WakeupTxScheduler::WakeupTxScheduler((ot::Mle::Mle *)((char *)this + 328), a2);
  *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 0;
  ot::Coap::MessageQueue::MessageQueue((ot::Mle::Mle *)((char *)this + 392));
  *((unsigned char *)this + 409) = 0;
  ot::Mle::Mle::ParentCandidate::ParentCandidate((ot::Mle::Mle *)((char *)this + 416));
  *((unsigned char *)this + 59ot::Tlv::SetType(this, 2) = 0;
  *((unsigned char *)this + 59ot::Tlv::SetType(this, 3) = 0;
  *((unsigned char *)this + 59--*(unsigned char *)(this + 4) = 0;
  *((unsigned char *)this + 595) = 0;
  *((unsigned char *)this + 596) = 0;
  *((unsigned char *)this + 59ot::Tlv::SetType(this, 7) = 0;
  *((unsigned char *)this + 598) = 0;
  *((unsigned char *)this + 599) = 0;
  ot::Ip6::Udp::Socket::Socket((ot::Mle::Mle *)((char *)this + 600), a2);
  *((_DWORD *)this + 168) = 30;
  *((_DWORD *)this + 169) = 100;
  *((_WORD *)this + 34ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = -2;
  *((_WORD *)this + 34ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = -2;
  *((unsigned char *)this + 68--*(unsigned char *)(this + 4) = 0;
  *((unsigned char *)this + 685) = 0;
  *((_WORD *)this + 34ot::Tlv::SetType(this, 3) = -1;
  *((void *)this + 86) = 0;
  uint64_t v17 = (ot::Mle::Mle *)((char *)this + 696);
  do
  {
    ot::Mle::Mle::ServiceAloc::ServiceAloc(v17);
    BOOL v2 = (char *)v17 + 32 != (char *)this + 792;
    uint64_t v17 = (ot::Mle::Mle::ServiceAloc *)((char *)v17 + 32);
  }
  while (v2);
  ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::TimerMilliIn((ot::Mle::Mle *)((char *)this + 1040), a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 133);
  *((void *)this + 1++*(unsigned char *)(this + 35) = 0;
  ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachTimer>::TimerMicroIn((ot::Mle::Mle *)((char *)this + 1088), a2);
  *((unsigned char *)this + 111ot::Tlv::SetType(this, 3) = 0;
  *((unsigned char *)this + 1126) = 2;
  *((void *)this + 14ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  ot::Parent::Init((ot::Mle::Mle *)((char *)this + 80), a2);
  ot::Mle::Mle::ParentCandidate::Init((ot::Mle::Mle *)((char *)this + 416), a2);
  ot::Clearable<ot::Mle::LeaderData>::Clear((void *)this + 8);
  ot::Parent::Clear((ot::Mle::Mle *)((char *)this + 80));
  ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle *)((char *)this + 416));
  ot::Mle::Mle::ResetCounters(this);
  ot::Mle::Mle::ResetLinkLossCounters((uint64_t)this);
  ot::Mle::Mle::ResetMleTriggerBasedCounters((uint64_t)this);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin((ot::Mle::Mle *)((char *)this + 896), 1);
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 896));
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v3);
  ot::Ip6::Address::SetToLinkLocalAddress(Address, ExtAddress);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::Mle::Mle *)((char *)this + 32));
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::Mle::Mle *)((char *)this + 928));
  uint64_t v5 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 928));
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v5);
  ot::Ip6::InterfaceIdentifier::GenerateRandom(Iid);
  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope((ot::Mle::Mle *)((char *)this + 960));
  int v7 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
  char v8 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v7);
  ot::Ip6::InterfaceIdentifier::SetToLocator(v8, 0);
  *((unsigned char *)this + 978) = *((unsigned char *)this + 978) & 0x7F | 0x80;
  ot::Clearable<ot::Ip6::Netif::MulticastAddress>::Clear((void *)this + 124);
  __int16 v12 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFF32);
  *(_WORD *)ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 992)) = v12;
  __int16 v13 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)1);
  *(_WORD *)(ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 992)) + 1--*(unsigned char *)(this + 4) = v13;
  ot::Clearable<ot::Ip6::Netif::MulticastAddress>::Clear((void *)this + 127);
  __int16 v14 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)0xFF33);
  *(_WORD *)ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1016)) = v14;
  __int16 v15 = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)1);
  *(_WORD *)(ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1016)) + 1--*(unsigned char *)(this + 4) = v15;
  uint64_t v9 = (const ot::Ip6::NetworkPrefix *)ot::AsCoreType<otIp6NetworkPrefix>((uint64_t)&ot::Mle::Mle::sMeshLocalPrefixInit);
  ot::Mle::Mle::SetMeshLocalPrefix(this, v9);
  return this;
}

{
  ot::Mle::Mle::Mle(this, a2);
  return this;
}

ot::TimerMilli *ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachRetryTimer>::TimerMicroIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachRetryTimer>::HandleTimer);
  return a1;
}

ot::Parent *ot::Parent::Parent(ot::Parent *this)
{
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::HandleTimer);
  return a1;
}

ot::Mle::Mle::ParentCandidate *ot::Mle::Mle::ParentCandidate::ParentCandidate(ot::Mle::Mle::ParentCandidate *this)
{
  return this;
}

ot::Mle::Mle::ServiceAloc *ot::Mle::Mle::ServiceAloc::ServiceAloc(ot::Mle::Mle::ServiceAloc *this)
{
  return this;
}

{
  ot::Ip6::Address *Address;
  ot::Ip6::InterfaceIdentifier *Iid;

  ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope(this);
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(this);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
  ot::Ip6::InterfaceIdentifier::SetToLocator(Iid, 0xFFFEu);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::HandleTimer);
  return a1;
}

ot::TimerMilli *ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachTimer>::TimerMicroIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachTimer>::HandleTimer);
  return a1;
}

unsigned char *ot::Parent::Init(ot::Parent *this, ot::Instance *a2)
{
  return ot::Mac::CslAccuracy::Init((unsigned char *)this + 143);
}

{
  return ot::Parent::Init(this, a2);
}

unsigned char *ot::Mle::Mle::ParentCandidate::Init(ot::Mle::Mle::ParentCandidate *this, ot::Instance *a2)
{
  return ot::Parent::Init(this, a2);
}

{
  return ot::Mle::Mle::ParentCandidate::Init(this, a2);
}

void *ot::Clearable<ot::Mle::LeaderData>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::Mle::LeaderData>::Clear(result);
}

unsigned char *ot::Mle::Mle::ParentCandidate::Clear(ot::Mle::Mle::ParentCandidate *this)
{
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  memset(this, 0, 0xB0uLL);
  return ot::Mle::Mle::ParentCandidate::Init(this, Instance);
}

unint64_t ot::Mle::Mle::ResetCounters(ot::Mle::Mle *this)
{
  memset((char *)this + 792, 0, 0x48uLL);
  uint64_t v1 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(this);
  unint64_t result = ot::Uptime::GetUptime(v1);
  *((void *)this + 108) = result;
  return result;
}

void *ot::Clearable<ot::Ip6::Netif::MulticastAddress>::Clear(void *result)
{
  *unint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  return ot::Clearable<ot::Ip6::Netif::MulticastAddress>::Clear(result);
}

uint64_t ot::Mle::Mle::SetMeshLocalPrefix(ot::Mle::Mle *this, const ot::Ip6::NetworkPrefix *a2)
{
  ot::Mle::Mle::GetMeshLocalPrefix(this);
  if (ot::Unequatable<ot::Ip6::NetworkPrefix>::operator!=(v2, a2))
  {
    uint64_t v5 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    if (ot::ThreadNetif::IsUp(v5))
    {
      uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v6, (ot::Mle::Mle *)((char *)this + 32));
      int v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v7, (ot::Mle::Mle *)((char *)this + 928));
      char v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v8, (ot::Mle::Mle *)((char *)this + 960));
      uint64_t v9 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::UnsubscribeMulticast(v9, (ot::Mle::Mle *)((char *)this + 992));
      uint64_t v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::UnsubscribeMulticast(v10, (ot::Mle::Mle *)((char *)this + 1016));
    }
    Address = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 928));
    ot::Ip6::Address::SetPrefix(Address, a2);
    __int16 v12 = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
    ot::Ip6::Address::SetPrefix(v12, a2);
    __int16 v13 = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 32));
    ot::Ip6::Address::SetPrefix(v13, a2);
    __int16 v14 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    uint64_t result = ot::ThreadNetif::IsUp(v14);
    if (result) {
      return ot::Mle::Mle::ApplyMeshLocalPrefix(this);
    }
  }
  else
  {
    uint64_t v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    return ot::Notifier::SignalIfFirst(v3, 16);
  }
  return result;
}

uint64_t ot::Mle::Mle::Enable(ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Enabled", a3, a4, a5, a6, a7, a8, (char)ot::Mle::Mle::HandleUdpReceive);
  ot::Mle::Mle::UpdateLinkLocalAddress(this);
  unsigned int v11 = ot::Ip6::Udp::Socket::Open((ot::Mle::Mle *)((char *)this + 600), v9, (uint64_t)this);
  if (!v11) {
    return ot::Ip6::Udp::Socket::Bind((ot::Mle::Mle *)((char *)this + 600), 19788, 1);
  }
  return v11;
}

uint64_t ot::Mle::Mle::UpdateLinkLocalAddress(ot::Mle::Mle *this)
{
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::RemoveUnicastAddress(v1, (ot::Mle::Mle *)((char *)this + 896));
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 896));
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v3);
  ot::Ip6::InterfaceIdentifier::SetFromExtAddress(Iid, ExtAddress);
  uint64_t v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::AddUnicastAddress(v5, (ot::Mle::Mle *)((char *)this + 896));
  uint64_t v6 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v6, 8);
}

uint64_t ot::Mle::Mle::HandleUdpReceive(ot::Mle::Mle *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  uint64_t v3 = (const ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  return ot::Mle::Mle::HandleUdpReceive(a1, v5, v3);
}

uint64_t ot::Mle::Mle::ScheduleChildUpdateRequest(ot::Mle::Mle *this)
{
  *((unsigned char *)this + 59ot::Tlv::SetType(this, 3) = 1;
  return ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
}

uint64_t ot::Mle::Mle::ScheduleMessageTransmissionTimer(ot::Mle::Mle *this)
{
  unsigned int Uint32InRange = 0;
  if (*((unsigned char *)this + 73) == 1 && *((unsigned char *)this + 320))
  {
    unsigned int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)0x8CA, 0xABEu);
    goto LABEL_21;
  }
  int v4 = *((unsigned __int8 *)this + 593);
  if (*((unsigned char *)this + 593))
  {
    if (v4 == 1)
    {
      unsigned int Uint32InRange = 100;
      goto LABEL_21;
    }
    if (v4 == 2)
    {
      uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      if (ot::Mac::Mac::IsCslEnabled(v1))
      {
        BOOL v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        unsigned int Uint32InRange = ot::Mac::Mac::GetCslPeriodMs(v2) + 1000;
      }
      else
      {
        unsigned int Uint32InRange = 1000;
      }
      goto LABEL_21;
    }
  }
  if (*((unsigned char *)this + 595) && *((unsigned char *)this + 595) == 1)
  {
    unsigned int Uint32InRange = 1000;
  }
  else if (ot::Mle::Mle::IsChild(this) && ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
    unsigned int Uint32InRange = ot::Time::SecToMsec((ot::Time *)*((unsigned int *)this + 168)) - 4000;
  }
LABEL_21:
  if (Uint32InRange) {
    return ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 296), Uint32InRange);
  }
  else {
    return ot::TimerMilli::Stop((ot::Mle::Mle *)((char *)this + 296));
  }
}

uint64_t ot::Mle::Mle::Disable(ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Disabled", a3, a4, a5, a6, a7, a8, v10);
  ot::Mle::Mle::Stop(this, 0);
  unsigned int v12 = ot::Ip6::Udp::Socket::Close((ot::Mle::Mle *)((char *)this + 600));
  if (!v12)
  {
    char v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v8, (ot::Mle::Mle *)((char *)this + 896));
  }
  return v12;
}

uint64_t ot::Mle::Mle::Stop(void *a1, char a2)
{
  __int16 v15 = a1;
  char v14 = a2;
  if (a2 == 1)
  {
    active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::HandleDetach(active);
    uint64_t v3 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::HandleDetach(v3);
  }
  if (!ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1))
  {
    int v4 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>((ot::InstanceLocator *)a1);
    ot::KeyManager::Stop(v4);
    ot::Mle::Mle::SetStateDetached((ot::Mle::Mle *)a1);
    uint64_t v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::UnsubscribeMulticast(v5, (const ot::Ip6::Netif::MulticastAddress *)(a1 + 127));
    uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::UnsubscribeMulticast(v6, (const ot::Ip6::Netif::MulticastAddress *)(a1 + 124));
    int v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::RemoveUnicastAddress(v7, (const ot::Ip6::Netif::UnicastAddress *)(a1 + 120));
    char v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::RemoveUnicastAddress(v8, (const ot::Ip6::Netif::UnicastAddress *)(a1 + 116));
    if (ot::Mle::Mle::GetCslPeripheral((ot::Mle::Mle *)a1))
    {
      unsigned int v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      CslPeripheral = (ot::Neighbor *)ot::Mle::Mle::GetCslPeripheral((ot::Mle::Mle *)a1);
      ot::Mle::MleRouter::RemoveNeighbor(v11, CslPeripheral);
    }
    ot::Mle::Mle::SetRole((uint64_t)a1, 0);
  }
  ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 130));
  uint64_t result = ot::CallbackBase<void (*)(void *)>::IsSet(a1 + 133);
  if (result)
  {
    long long v13 = *(_OWORD *)(a1 + 133);
    ot::CallbackBase<void (*)(void *)>::Clear(a1 + 133);
    return ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::Invoke<>((uint64_t)&v13);
  }
  return result;
}

uint64_t ot::Mle::Mle::Start(ot::InstanceLocator *a1, char a2)
{
  unsigned int v13 = 0;
  BOOL v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(a1);
  if (ot::Radio::GetPromiscuous(v2))
  {
    return 13;
  }
  else
  {
    uint64_t v3 = (ot::ThreadNetif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
    if (ot::ThreadNetif::IsUp(v3))
    {
      int v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
      if ((unsigned __int16)ot::Mac::Mac::GetPanId(v4) == 0xFFFF)
      {
        unsigned int v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
        __int16 RandomPanId = (unsigned __int16)ot::Mac::GenerateRandomPanId(v11);
        ot::Mac::Mac::SetPanId(v11, RandomPanId);
      }
      ot::Mle::Mle::SetStateDetached(a1);
      ot::Mle::Mle::ApplyMeshLocalPrefix(a1);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(a1);
      ot::Mle::Mle::SetRloc16(a1, Rloc16);
      ot::Mle::Mle::ResetAttachCounter((uint64_t)a1);
      int v7 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
      ot::KeyManager::Start(v7);
      if (!a2) {
        *((unsigned char *)a1 + 24ot::Tlv::SetType(this, 3) = 1;
      }
      if (a2 == 1 || (unsigned __int16)ot::Mle::Mle::GetRloc16(a1) == 65534)
      {
        ot::Mle::Mle::Attach((uint64_t)a1, 0);
      }
      else
      {
        unsigned __int16 v8 = ot::Mle::Mle::GetRloc16(a1);
        if (ot::Mle::IsActiveRouter((ot::Mle *)v8))
        {
          uint64_t v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
          if (ot::Mle::MleRouter::BecomeRouter(v9, 2u)) {
            ot::Mle::Mle::Attach((uint64_t)a1, 0);
          }
        }
        else
        {
          *((unsigned char *)a1 + 59ot::Tlv::SetType(this, 2) = 0;
          ot::Mle::Mle::SendChildUpdateRequest(a1);
          IgnoreError();
        }
      }
    }
    else
    {
      return 13;
    }
  }
  return v13;
}

uint64_t ot::Radio::GetPromiscuous(ot::Radio *this)
{
  return otPlatRadioGetPromiscuous() & 1;
}

{
  return ot::Radio::GetPromiscuous(this);
}

void ot::Mle::Mle::SetStateDetached(ot::Mle::Mle *this)
{
  uint64_t v1 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
  ot::BackboneRouter::Local::Reset(v1);
  BOOL v2 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
  ot::BackboneRouter::Leader::Reset(v2);
  if (ot::Mle::Mle::IsAttached(this))
  {
    ot::Mle::Mle::UpdateLastDetachTime(this);
    ot::Mle::Mle::Store(this);
  }
  if (ot::Mle::Mle::IsLeader(this))
  {
    uint64_t v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v3, (ot::Mle::Mle *)((char *)this + 32));
  }
  ot::Mle::Mle::SetRole((uint64_t)this, 1);
  ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 0);
  ot::TimerMilli::Stop((ot::Mle::Mle *)((char *)this + 248));
  ot::TimerMilli::Stop((ot::Mle::Mle *)((char *)this + 296));
  *((unsigned char *)this + 59ot::Tlv::SetType(this, 3) = 0;
  *((unsigned char *)this + 59ot::Tlv::SetType(this, 2) = 0;
  *((unsigned char *)this + 595) = 0;
  *((unsigned char *)this + 59--*(unsigned char *)(this + 4) = 0;
  *((unsigned char *)this + 599) = 0;
  int v4 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
  ot::MeshForwarder::SetRxOnWhenIdle(v4, 1, v5, v6, v7, v8, v9, v10);
  unsigned int v11 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetBeaconEnabled(v11, 0);
  unsigned int v12 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::MleRouter::HandleDetachStart(v12);
  unsigned int v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::UpdateCsl(v13, 0);
}

uint64_t ot::Mle::Mle::ApplyMeshLocalPrefix(ot::Mle::Mle *this)
{
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 992));
  ot::Mle::Mle::GetMeshLocalPrefix(this);
  ot::Ip6::Address::SetMulticastNetworkPrefix(Address, v1);
  uint64_t v19 = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 1016));
  ot::Mle::Mle::GetMeshLocalPrefix(this);
  ot::Ip6::Address::SetMulticastNetworkPrefix(v19, v2);
  if (!ot::Mle::Mle::IsDisabled(this))
  {
    uint64_t v3 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::AddUnicastAddress(v3, (ot::Mle::Mle *)((char *)this + 928));
    int v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::SubscribeMulticast(v4, (ot::Mle::Mle *)((char *)this + 992));
    uint64_t v5 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::SubscribeMulticast(v5, (ot::Mle::Mle *)((char *)this + 1016));
    if (ot::Mle::Mle::IsAttached(this))
    {
      uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::AddUnicastAddress(v6, (ot::Mle::Mle *)((char *)this + 960));
    }
    if (ot::Mle::Mle::IsLeader(this))
    {
      uint64_t v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::AddUnicastAddress(v7, (ot::Mle::Mle *)((char *)this + 32));
    }
    uint64_t v8 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
    ot::MeshCoP::Commissioner::ApplyMeshLocalPrefix(v8);
    uint64_t v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
    ot::MeshCoP::BorderAgent::ApplyMeshLocalPrefix(v9);
    uint64_t v10 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Server>(this);
    ot::Dhcp6::Server::ApplyMeshLocalPrefix(v10);
    for (unsigned __int8 i = (ot::Mle::Mle *)((char *)this + 696);
          i != (ot::Mle::Mle *)((char *)this + 792);
          unsigned __int8 i = (const ot::Ip6::Netif::UnicastAddress *)((char *)i + 32))
    {
      if (ot::Mle::Mle::ServiceAloc::IsInUse(i))
      {
        unsigned int v11 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::RemoveUnicastAddress(v11, i);
      }
      ot::Mle::Mle::GetMeshLocalPrefix(this);
      ot::Mle::Mle::ServiceAloc::ApplyMeshLocalPrefix(i, v12);
      if (ot::Mle::Mle::ServiceAloc::IsInUse(i))
      {
        unsigned int v13 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::AddUnicastAddress(v13, i);
      }
    }
    char v14 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
    ot::BackboneRouter::Local::ApplyMeshLocalPrefix(v14);
  }
  __int16 v15 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v15, 16);
}

void ot::Mle::Mle::SetRloc16(ot::Mle::Mle *this, unsigned __int16 a2)
{
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
  if (a2 != Rloc16) {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "RLOC16 %04x -> %04x", v2, v3, v4, v5, v6, v7, Rloc16);
  }
  uint64_t v8 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  if (ot::Ip6::Netif::HasUnicastAddress(v8, (ot::Mle::Mle *)((char *)this + 960)))
  {
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
    if (a2 != (unsigned __int16)ot::Ip6::InterfaceIdentifier::GetLocator(Iid))
    {
      unsigned int v11 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
      ot::Ip6::Netif::RemoveUnicastAddress(v11, (ot::Mle::Mle *)((char *)this + 960));
      uint64_t v18 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
      unsigned int v12 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
      ot::Coap::CoapBase::ClearRequests(v18, v12);
    }
  }
  unsigned int v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetShortAddress(v13, a2);
  *((_WORD *)this + 34ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  if (a2 != 65534)
  {
    char v14 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
    __int16 v15 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v14);
    ot::Ip6::InterfaceIdentifier::SetLocator(v15, a2);
    char v16 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::AddUnicastAddress(v16, (ot::Mle::Mle *)((char *)this + 960));
    uint64_t v17 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
    ot::AddressResolver::RestartAddressQueries(v17);
  }
}

uint64_t ot::Mle::Mle::ResetAttachCounter(uint64_t this)
{
  *(_WORD *)(this + 24--*(unsigned char *)(this + 4) = 0;
  return this;
}

void ot::Mle::Mle::Attach(uint64_t a1, char a2)
{
  if (!ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1) && !ot::Mle::Mle::IsAttaching((ot::Mle::Mle *)a1))
  {
    if (!ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1)) {
      ot::Mle::Mle::ResetAttachCounter(a1);
    }
    if (*(unsigned char *)(a1 + 243) == 1)
    {
      active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
      if (ot::MeshCoP::DatasetManager::Restore(active)) {
        *(unsigned char *)(a1 + 24ot::Tlv::SetType(this, 3) = 0;
      }
      else {
        *(unsigned char *)(a1 + 24ot::Tlv::SetType(this, 3) = 2;
      }
    }
    ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle::ParentCandidate *)(a1 + 416));
    ot::Mle::Mle::SetAttachState((unsigned __int8 *)a1, 2u);
    *(unsigned char *)(a1 + 409) = a2;
    if (a2 == 2)
    {
      ++*(_WORD *)(a1 + 806);
      ++*(_WORD *)(a1 + 890);
    }
    else if (ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1))
    {
      uint64_t v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      ot::Mle::MleRouter::StopAdvertiseTrickleTimer(v3);
    }
    unsigned int AttachStartDelay = ot::Mle::Mle::GetAttachStartDelay((ot::Mle::Mle *)a1);
    ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 248), AttachStartDelay);
    if (ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1))
    {
      ot::Mle::Mle::IncrementAttachCounter(a1);
      ++*(_WORD *)(a1 + 886);
      if (!ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1))
      {
        uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
        ot::Mac::Mac::SetRxOnWhenIdle(v5, 0, v6, v7, v8, v9, v10, v11);
      }
    }
  }
}

uint64_t ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::SendChildUpdateRequest((uint64_t)this, 0);
}

void ot::Mle::Mle::SetRole(uint64_t a1, char a2)
{
  uint64_t v24 = a1;
  char v23 = a2;
  unsigned __int8 v22 = 0;
  unsigned __int8 v22 = *(unsigned char *)(a1 + 73);
  int v21 = 0;
  uint64_t v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>((ot::InstanceLocator *)a1);
  ot::Uptime::GetUptime(v2, v25, 24);
  uint64_t v3 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
  if (!ot::Notifier::Update<ot::Mle::DeviceRole>(v3, (unsigned char *)(a1 + 73), &v23, 4))
  {
    ot::Mle::RoleToString(v22);
    ot::Mle::RoleToString(*(unsigned char *)(a1 + 73));
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s Role %s -> %s", v4, v5, v6, v7, v8, v9, (char)v25);
    ot::Mle::Mle::UpdateRoleTimeCounters((ot::InstanceLocator *)a1, v22);
    if (*(unsigned char *)(a1 + 73))
    {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 73);
      char v10 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 73);
      char v10 = 0;
    }
    if ((v10 & 1) == 0)
    {
      switch(v11)
      {
        case 0:
          ++*(_WORD *)(a1 + 792);
          ++*(_WORD *)(a1 + 876);
          break;
        case 1:
          ++*(_WORD *)(a1 + 794);
          ++*(_WORD *)(a1 + 878);
          break;
        case 2:
          ++*(_WORD *)(a1 + 796);
          ++*(_WORD *)(a1 + 880);
          ot::Mle::Mle::SignalChildConnectionSuccess((ot::Mle::Mle *)a1);
          *(unsigned char *)(a1 + 32ot::Tlv::SetType(this, 2) = 1;
          break;
        case 3:
          ++*(_WORD *)(a1 + 798);
          ++*(_WORD *)(a1 + 882);
          break;
        case 4:
          ++*(_WORD *)(a1 + 800);
          ++*(_WORD *)(a1 + 884);
          break;
        default:
          JUMPOUT(0);
      }
    }
    ot::Mle::Mle::SetThreadCoexConfig((ot::InstanceLocator *)a1, 0, *(unsigned char *)(a1 + 73), *(unsigned char *)(a1 + 241));
    if (!ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1) && v22) {
      ot::Neighbor::SetState((ot::InstanceLocator *)(a1 + 80), 0);
    }
    if (v22 == 1 && ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1))
    {
      char DeviceMode = ot::Mle::Mle::GetDeviceMode((ot::Mle::Mle *)a1);
      *(unsigned char *)(a1 + 599) = !ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&DeviceMode);
    }
  }
  if (v21)
  {
    char v12 = otThreadErrorToString(v21);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Error %s while configuring the role", v13, v14, v15, v16, v17, v18, v12);
  }
}

BOOL ot::CallbackBase<void (*)(void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(void *)>::IsSet(a1);
}

void *ot::CallbackBase<void (*)(void *)>::Clear(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *)>::Clear(result);
}

uint64_t ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::Invoke<>(uint64_t a1)
{
  return (*(uint64_t (**)(void))a1)(*(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::Invoke<>(a1);
}

unint64_t ot::Mle::Mle::UpdateRoleTimeCounters(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  uint64_t v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(a1);
  unint64_t result = ot::Uptime::GetUptime(v2);
  unint64_t v7 = result - *((void *)a1 + 108);
  *((void *)a1 + 108) = result;
  *((void *)a1 + 106) += v7;
  if (a2)
  {
    uint64_t v5 = a2;
    char v4 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    char v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    switch(v5)
    {
      case 0:
        *((void *)a1 + 101) += v7;
        break;
      case 1:
        *((void *)a1 + 102) += v7;
        break;
      case 2:
        *((void *)a1 + 103) += v7;
        break;
      case 3:
        *((void *)a1 + 104) += v7;
        break;
      case 4:
        *((void *)a1 + 105) += v7;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t ot::Mle::Mle::setFirmwareUpdate(ot::Mle::Mle *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Mle::fwUpdateEnabled = a2 & 1;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s: fwUpdateEnabled=[%d]", a3, a4, a5, a6, a7, a8, (char)"setFirmwareUpdate");
  if (ot::Mle::Mle::IsFullRouter(this))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s: In Full router mode:fwUpdateEnabled=[%d]", v8, v9, v10, v11, v12, v13, (char)"setFirmwareUpdate");
    ot::Mle::Mle::SetThreadCoexConfig(this, 0, *((unsigned char *)this + 73), *((unsigned char *)this + 241));
    return 0;
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s: Not Full router mode failed to set Coex Priority: fwUpdateEnabled=[%d]: error=[%d]", v8, v9, v10, v11, v12, v13, (char)"setFirmwareUpdate");
    return 13;
  }
}

BOOL ot::Mle::Mle::IsFullRouter(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::IsRxOnWhenIdle(this) && ot::Mle::Mle::IsFullThreadDevice(this);
}

{
  return ot::Mle::Mle::IsFullRouter(this);
}

void ot::Mle::Mle::SetThreadCoexConfig(ot::InstanceLocator *a1, char a2, unsigned __int8 a3, unsigned __int8 a4)
{
  v143 = a1;
  int v127 = 1;
  unsigned __int8 v142 = a2 & 1;
  unsigned __int8 v141 = a3;
  unsigned __int8 v140 = a4;
  v126 = a1;
  int v139 = 0;
  unsigned __int8 v138 = 3;
  unsigned __int8 v137 = 0;
  unsigned int v136 = 0;
  unsigned int v135 = 0;
  unsigned int v134 = 0;
  BOOL v133 = 0;
  unsigned __int8 AudioTaskId = ot::Mle::Mle::getAudioTaskId(a1);
  BOOL hasHIDConnected = ot::Mle::Mle::hasHIDConnected(v126);
  int v128 = v142;
  v129 = ot::Mle::RoleToString(v141);
  __int16 v115 = (const char *)(v142 & 1);
  BOOL IsCslEnabled = v129;
  v117 = ot::Mle::Mle::AttachStateToString(v140);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s: Attach state change:%d role:%s, Attach state:%s", v4, v5, v6, v7, v8, v9, (char)"SetThreadCoexConfig");
  uint64_t v130 = v141;
  if (v141)
  {
    uint64_t v17 = v141;
    char v16 = 1;
  }
  else
  {
    uint64_t v17 = 0;
    char v16 = 0;
  }
  if ((v16 & 1) == 0)
  {
    switch(v17)
    {
      case 0:
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Thread will go to OFFLINE, reset Thread priority/fragment size/data poll timeout/duty cycle.", v10, v11, v12, v13, v14, v15, (char)"SetThreadCoexConfig");
        Instance = ot::InstanceLocator::GetInstance(v126);
        int v139 = otPlatVendorCoexThreadClear((uint64_t)Instance, v19, v20, v21, v22, v23, v24, v25);
        break;
      case 1:
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s During Detached role, ChildupdateReq/Attach State change will happen, config the Thread Coex setting", v10, v11, v12, v13, v14, v15, (char)"SetThreadCoexConfig");
        uint64_t v26 = ot::InstanceLocator::GetInstance(v126);
        int v139 = otPlatVendorCoexThreadDetached((uint64_t)v26, v142 & 1, v140, AudioTaskId, hasHIDConnected);
        break;
      case 2:
        v125 = ot::Mle::RoleToString(v141);
        uint64_t v27 = ot::InstanceLocator::GetInstance(v126);
        __int16 v115 = v125;
        BOOL IsCslEnabled = (const char *)otLinkIsCslEnabled((uint64_t)v27);
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Device role is Child, we will adjust the coex config base on BT task, new role=%s, CslEnabled = %d", v28, v29, v30, v31, v32, v33, (char)"SetThreadCoexConfig");
        uint64_t v34 = ot::InstanceLocator::GetInstance(v126);
        if (otLinkIsCslEnabled((uint64_t)v34))
        {
          uint64_t v35 = ot::InstanceLocator::GetInstance(v126);
          int v139 = otLinkSetPollPeriod((uint64_t)v35, 0x3E8u);
          if (v139) {
            break;
          }
        }
        else
        {
          uint64_t v36 = ot::InstanceLocator::GetInstance(v126);
          int v139 = otLinkSetPollPeriod((uint64_t)v36, 0x1C2u);
          if (v139) {
            break;
          }
        }
        int v139 = ot::Mle::Mle::adjustPriorityAndFragmentToBTLoad(v126, ot::Mle::current_coex_radioload);
        if (!v139)
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: Attach procedure is complete, set RX on IDLE use QOS Percentage Policy config to FALSE", v37, v38, v39, v40, v41, v42, v114);
          uint64_t v43 = ot::InstanceLocator::GetInstance(v126);
          int v139 = otPlatVendorSetRxOnIdleUseQOSPercentagePolicyConfig((uint64_t)v43, 0, v44, v45, v46, v47, v48, v49);
        }
        break;
      case 3:
      case 4:
        BOOL IsSleepyRouter = ot::Mle::Mle::IsSleepyRouter(v126);
        __int16 v115 = ot::Mle::Mle::WorAttachStateToString((uint64_t)v126, *((unsigned char *)v126 + 384));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: Device role is Router/Leader, and Sleepy Router Config: %d, Peripheral Attach State: %s", v50, v51, v52, v53, v54, v55, IsSleepyRouter);
        if (ot::Mle::Mle::IsSleepyRouter(v126))
        {
          if (*((unsigned char *)v126 + 384))
          {
            unsigned __int8 v138 = 4;
          }
          else
          {
            unsigned __int8 v138 = 5;
            unsigned __int8 v137 = 1;
            if (!ot::Mle::Mle::isThreadAlwaysOnFeatureEnabled(v126))
            {
              unsigned __int16 v82 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v126);
              ot::MeshForwarder::SetRxOnWhenIdle(v82, 1, v83, v84, v85, v86, v87, v88);
            }
          }
        }
        else
        {
          if (ot::Mle::Mle::isThreadAlwaysOnFeatureEnabled(v126))
          {
            unsigned __int8 v68 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v126);
            ot::MeshForwarder::SetRxOnWhenIdle(v68, 1, v69, v70, v71, v72, v73, v74);
          }
          if (ot::Mle::fwUpdateEnabled)
          {
            uint64_t v75 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v126);
            if (ot::Mle::MleRouter::HasChildrenInStateAnyExceptInvalid(v75))
            {
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: fwUpdate enabled, Device role is Router/Leader:COEX_THREAD_PRIORITY_HIGH", v76, v77, v78, v79, v80, v81, v114);
              unsigned __int8 v138 = 3;
              ot::Mle::Mle::adjustDutyCycleForFR(v126, ot::Mle::current_coex_radioload, &v135, &v134, &v133);
            }
            else
            {
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: fwUpdate enabled, Device role is Router/Leader: Default COEX_THREAD_SCAN_PRIORITY", v76, v77, v78, v79, v80, v81, v114);
              unsigned __int8 v138 = 5;
              unsigned __int8 v137 = 1;
            }
          }
          else
          {
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: fwUpdate disabled, Device role is Router/Leader: Default COEX_THREAD_PRIORITY_HIGH", v62, v63, v64, v65, v66, v67, v114);
            unsigned __int8 v138 = 3;
            ot::Mle::Mle::adjustDutyCycleForFR(v126, ot::Mle::current_coex_radioload, &v135, &v134, &v133);
          }
        }
        v123 = &v114;
        __int16 v115 = (const char *)v138;
        BOOL IsCslEnabled = (const char *)v137;
        v117 = (char *)v136;
        uint64_t v118 = 127;
        uint64_t v119 = 100;
        uint64_t v120 = v135;
        uint64_t v121 = v134;
        BOOL v122 = v133;
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Set Thread coex config: priority to %d, OverridePriority to %d, OverridePriorityDuration to %d us, max fragment size to %d, data poll timeout to %d, and DutyCycleHigh(x) %u, DutyCycleInterval(y) %u, DatapollAlign %u and Qos percentage Policy", v56, v57, v58, v59, v60, v61, (char)"SetThreadCoexConfig");
        uint64_t v89 = ot::InstanceLocator::GetInstance(v126);
        int v139 = otPlatVendorSetPriority((uint64_t)v89, v138, v137, v136, v90, v91, v92, v93);
        if (!v139)
        {
          std::string v94 = ot::InstanceLocator::GetInstance(v126);
          otLinkSetFragmentSize((uint64_t)v94, 0x7Fu);
          v95 = ot::InstanceLocator::GetInstance(v126);
          otLinkSetDataPollTimeoutCoex((uint64_t)v95, 100);
          std::string v96 = ot::InstanceLocator::GetInstance(v126);
          int v139 = otPlatVendorSetRxOnIdleUseQOSPercentagePolicyConfig((uint64_t)v96, 0, v97, v98, v99, v100, v101, v102);
          if (!v139)
          {
            v103 = ot::InstanceLocator::GetInstance(v126);
            int v139 = otPlatVendorSetDutyCycle((uint64_t)v103, v135, v134, v133, v104, v105, v106, v107);
          }
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
  if (v139)
  {
    __int16 v115 = otThreadErrorToString(v139);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Error %s while configuring the thread coex setting.", v108, v109, v110, v111, v112, v113, (char)"SetThreadCoexConfig");
  }
}

uint64_t ot::Mle::Mle::SignalChildConnectionSuccess(ot::Mle::Mle *this)
{
  ot::InstanceLocator::GetInstance(this);
  uint64_t result = otPlatVendorGetThreadJoinSession();
  if ((result & 1) == 0)
  {
    uint64_t result = ot::Mle::Mle::isThreadStateMachineEnabled(this);
    if (result)
    {
      ot::Mle::Mle::GetDeviceMode(this);
      uint64_t result = ot::Mle::Mle::IsMinimalEndDevice(this);
      if (result)
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s: ThreadConnection: Attach attempt %d successful in SED/SSED mode", v2, v3, v4, v5, v6, v7, (char)"SignalChildConnectionSuccess");
        uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
        return ot::Notifier::Signal(v8, 0x80000000);
      }
    }
  }
  return result;
}

BOOL ot::Mle::Mle::isThreadStateMachineEnabled(ot::Mle::Mle *this)
{
  RcpHostContext = (RcpHostContext *)RcpHostContext::GetRcpHostContext(this);
  return RcpHostContext::isStateMachineEnabled(RcpHostContext);
}

unint64_t ot::Mle::Mle::getAudioTaskId(ot::Mle::Mle *this)
{
  return ((unint64_t)ot::Mle::current_coex_radioload >> 8) & 0xF;
}

BOOL ot::Mle::Mle::hasHIDConnected(ot::Mle::Mle *this)
{
  return (((unint64_t)ot::Mle::current_coex_radioload >> 20) & 0x3F) != 0;
}

char *ot::Mle::Mle::AttachStateToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::AttachStateToString(ot::Mle::Mle::AttachState)::kAttachStateStrings[a1];
}

uint64_t ot::Mle::Mle::adjustPriorityAndFragmentToBTLoad(ot::Mle::Mle *this, uint64_t a2)
{
  uint64_t v86 = this;
  uint64_t v85 = a2;
  unsigned __int8 v68 = this;
  unsigned int v84 = 0;
  unsigned __int8 v83 = a2;
  unsigned __int8 AudioTaskId = ot::Mle::Mle::getAudioTaskId(this);
  unsigned __int8 HIDLess1125Count = ot::Mle::Mle::getHIDLess1125Count(v68);
  unsigned __int8 HIDEqual1125Count = ot::Mle::Mle::getHIDEqual1125Count(v68);
  unsigned __int8 HIDGreater1125Count = ot::Mle::Mle::getHIDGreater1125Count(v68);
  unsigned __int8 v78 = 0;
  unsigned __int8 v77 = 0;
  unsigned int v76 = 0;
  unsigned __int8 v75 = 127;
  unsigned int v74 = 100;
  unsigned __int8 v73 = 0;
  unsigned int v72 = 0;
  unsigned int v71 = 0;
  char v70 = 0;
  unsigned __int8 WiFiStateId = ot::Mle::Mle::getWiFiStateId(v68);
  int v60 = v83;
  int v61 = HIDLess1125Count;
  int v62 = HIDEqual1125Count;
  int v63 = HIDGreater1125Count;
  uint64_t v64 = ot::Mle::Mle::BTAudioTaskIDToStrings(v68, AudioTaskId);
  uint64_t v65 = ot::Mle::Mle::WifiAssotiatedTypeToStrings(v68, WiFiStateId);
  uint64_t v66 = ot::Mle::RoleToString(*((unsigned char *)v68 + 73));
  uint64_t v2 = ot::Mle::Mle::AttachStateToString(*((unsigned char *)v68 + 241));
  uint64_t v67 = &v42;
  uint64_t v43 = v83;
  uint64_t v44 = HIDLess1125Count;
  uint64_t v45 = HIDEqual1125Count;
  uint64_t v46 = HIDGreater1125Count;
  uint64_t v47 = v64;
  uint64_t v48 = v65;
  uint64_t v49 = v66;
  uint64_t v50 = v2;
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Load is %x, # HID < 11.25 is %d, # HID = 11.25 is %d, # HID > 11.25 is %d, btAudioTask is %s, wifiAssociatedType is %s, current node_role is %s, current attach_state is %s", v3, v4, v5, v6, v7, v8, (char)"adjustPriorityAndFragmentToBTLoad");
  if (!*((unsigned char *)v68 + 73) || *((unsigned char *)v68 + 73) == 1)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Thread is not associated yet. Don't/No need to change priority/fragment size.", v9, v10, v11, v12, v13, v14, (char)"adjustPriorityAndFragmentToBTLoad");
    return v84;
  }
  if (*((unsigned char *)v68 + 73) == 3 || *((unsigned char *)v68 + 73) == 4)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Device is sleepy router, will tune the priority/frament setting for it later", v9, v10, v11, v12, v13, v14, (char)"adjustPriorityAndFragmentToBTLoad");
    return v84;
  }
  uint64_t v43 = AudioTaskId;
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s BT audio task change to %d", v9, v10, v11, v12, v13, v14, (char)"adjustPriorityAndFragmentToBTLoad");
  int v59 = AudioTaskId;
  if (!AudioTaskId)
  {
    if (HIDLess1125Count)
    {
      unsigned __int8 v78 = 2;
      unsigned __int8 v75 = 63;
      unsigned int v74 = 100;
    }
    else if (HIDEqual1125Count == 3)
    {
      unsigned __int8 v78 = 1;
      unsigned __int8 v75 = 63;
      unsigned int v74 = 100;
      if (WiFiStateId == 2) {
        unsigned __int8 v77 = 1;
      }
      else {
        unsigned __int8 v77 = 2;
      }
      unsigned int v76 = 15000;
    }
    else if (HIDGreater1125Count || HIDEqual1125Count && HIDEqual1125Count < 3u)
    {
      unsigned __int8 v78 = 1;
      unsigned __int8 v75 = 100;
      unsigned int v74 = 100;
      if (WiFiStateId == 2) {
        unsigned __int8 v77 = 1;
      }
      else {
        unsigned __int8 v77 = 2;
      }
      unsigned int v76 = 15000;
    }
    else
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s There is no BT audio/non-audio activity, config coex based on SED/SSED.", v15, v16, v17, v18, v19, v20, (char)"adjustPriorityAndFragmentToBTLoad");
      Instance = ot::InstanceLocator::GetInstance(v68);
      if (otLinkIsCslEnabled((uint64_t)Instance))
      {
        unsigned __int8 v78 = 2;
      }
      else
      {
        unsigned __int8 v78 = 1;
        if (WiFiStateId == 2) {
          unsigned __int8 v77 = 1;
        }
        else {
          unsigned __int8 v77 = 2;
        }
        unsigned int v76 = 40000;
      }
    }
    goto LABEL_54;
  }
  if (v59 == 2 || v59 == 1) {
    goto LABEL_26;
  }
  if (v59 == 4 || v59 == 3)
  {
LABEL_23:
    unsigned __int8 v78 = 1;
    unsigned __int8 v77 = 1;
    unsigned int v76 = 15000;
    unsigned __int8 v75 = 127;
    unsigned int v74 = 100;
    if (ot::Mle::Mle::hasHIDConnected(v68)) {
      unsigned __int8 v73 = 60;
    }
    goto LABEL_54;
  }
  if ((v59 - 5) <= 2)
  {
LABEL_26:
    unsigned __int8 v78 = 2;
    unsigned __int8 v75 = 63;
    unsigned int v74 = 100;
    uint64_t v24 = ot::InstanceLocator::GetInstance(v68);
    if (!otLinkIsCslEnabled((uint64_t)v24))
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s X/Y will kick in and alignment will enable for priority 2 case.", v15, v16, v17, v18, v19, v20, (char)"adjustPriorityAndFragmentToBTLoad");
      unsigned int v72 = 2500;
      unsigned int v71 = 60000;
      char v70 = 1;
    }
    if (AudioTaskId == 2 || AudioTaskId == 5 || AudioTaskId == 1 || AudioTaskId == 6) {
      unsigned __int8 v73 = 60;
    }
    else {
      unsigned __int8 v73 = 60;
    }
    goto LABEL_54;
  }
  if (v59 == 8) {
    goto LABEL_23;
  }
  if (v59 == 10 || v59 == 9) {
    goto LABEL_26;
  }
LABEL_54:
  uint64_t v53 = &v78;
  uint64_t v54 = &v75;
  uint64_t v55 = (int *)&v74;
  uint64_t v56 = (int *)&v72;
  uint64_t v57 = (int *)&v71;
  uint64_t v58 = (BOOL *)&v70;
  uint64_t v52 = &v42;
  uint64_t v43 = v78;
  uint64_t v44 = v77;
  uint64_t v45 = v76;
  uint64_t v46 = v75;
  uint64_t v47 = (const char *)v74;
  uint64_t v48 = (const char *)v72;
  uint64_t v49 = (const char *)v71;
  uint64_t v50 = (char *)(v70 & 1);
  uint64_t v51 = v73;
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Set Thread coex config: priority to %d, overridePriority to %d, overridePriorityDuration to %d us, max fragment size to %d, data poll timeout to %d, dt_high(x) %u, dt_interval(y) %u, dt_datapoll_align %u, B2BDataPollDelay %d ms", v15, v16, v17, v18, v19, v20, (char)"adjustPriorityAndFragmentToBTLoad");
  uint64_t v26 = ot::InstanceLocator::GetInstance(v68);
  otPlatVendorCoexConfigTest((uint64_t)v26, v53, v54, v55, v56, v57, v58);
  uint64_t v27 = ot::InstanceLocator::GetInstance(v68);
  unsigned int v84 = otPlatVendorSetPriority((uint64_t)v27, v78, v77, v76, v28, v29, v30, v31);
  if (!v84)
  {
    uint64_t v32 = ot::InstanceLocator::GetInstance(v68);
    otLinkSetFragmentSize((uint64_t)v32, v75);
    uint64_t v33 = ot::InstanceLocator::GetInstance(v68);
    otLinkSetDataPollTimeoutCoex((uint64_t)v33, v74);
    uint64_t v34 = ot::InstanceLocator::GetInstance(v68);
    if (!otPlatVendorSetDutyCycle((uint64_t)v34, v72, v71, v70 & 1, v35, v36, v37, v38))
    {
      uint64_t v39 = ot::InstanceLocator::GetInstance(v68);
      otLinkSetB2BDataPollDelay((uint64_t)v39, v73);
      uint64_t v40 = ot::InstanceLocator::GetInstance(v68);
      otLinkSetSessionPriority((uint64_t)v40, v78);
    }
  }
  return v84;
}

BOOL ot::Mle::Mle::isThreadAlwaysOnFeatureEnabled(ot::Mle::Mle *this)
{
  RcpHostContext = (RcpHostContext *)RcpHostContext::GetRcpHostContext(this);
  return RcpHostContext::isThreadAlwaysOnFeatureEnabled(RcpHostContext);
}

void ot::Mle::Mle::adjustDutyCycleForFR(ot::Mle::Mle *this, unint64_t a2, unsigned int *a3, unsigned int *a4, BOOL *a5)
{
  unsigned __int8 AudioTaskId = ot::Mle::Mle::getAudioTaskId(this);
  *a5 = 0;
  if (ot::Mle::Mle::hasHIDConnected(this))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s There is HID connected, don't config the x/y setting for FR.", v5, v6, v7, v8, v9, v10, (char)"adjustDutyCycleForFR");
  }
  else if (AudioTaskId)
  {
    ot::Mle::Mle::BTAudioTaskIDToStrings(this, AudioTaskId);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s There is BT audio task %s, config the x/y setting as %d/%d for FR.", v11, v12, v13, v14, v15, v16, (char)"adjustDutyCycleForFR");
    *a3 = 10000;
    *a4 = 120000;
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s There is no BT audio task, config the x/y setting as %d/%d for FR.", v5, v6, v7, v8, v9, v10, (char)"adjustDutyCycleForFR");
    *a3 = 10000;
    *a4 = 60000;
  }
}

const char *ot::Mle::Mle::BTAudioTaskIDToStrings(ot::Mle::Mle *this, unsigned __int8 a2)
{
  if (a2 >= (int)(unsigned __int16)ot::GetArrayLength<char const*,(unsigned short)11>()) {
    return "invalid BTAudioTaskID";
  }
  else {
    return ot::Mle::Mle::BTAudioTaskIDToStrings(unsigned char)::BTAudioTaskIDStrings[a2];
  }
}

{
  return ot::Mle::Mle::BTAudioTaskIDToStrings(this, a2);
}

uint64_t ot::Mle::Mle::adjustDutyCycleForSRDiscoverScan(ot::Mle::Mle *this, char a2)
{
  char v30 = a2 & 1;
  v29[4] = 0;
  *(_DWORD *)uint64_t v29 = ot::Mle::Mle::getAudioTaskId(this);
  unsigned int v28 = 0;
  unsigned int v27 = 0;
  if (v30)
  {
    if (ot::Mle::Mle::hasHIDConnected(this) || v29[0])
    {
      unsigned int v28 = 5000;
      unsigned int v27 = 60000;
      ot::Mle::Mle::BTAudioTaskIDToStrings(this, v29[0]);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s There is BT audio task %s, config the x/y setting as %d/%d for SR discovery scan.", v14, v15, v16, v17, v18, v19, (char)"adjustDutyCycleForSRDiscoverScan");
    }
    if (!v29[0])
    {
      unsigned int v28 = 10000;
      unsigned int v27 = 60000;
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s There is no BT audio task, config the x/y setting as %d/%d for SR discovery scan.", v8, v9, v10, v11, v12, v13, (char)"adjustDutyCycleForSRDiscoverScan");
    }
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s SR discovery scan is done, config the x/y setting as %d/%d to remove it.", v2, v3, v4, v5, v6, v7, (char)"adjustDutyCycleForSRDiscoverScan");
  }
  Instance = ot::InstanceLocator::GetInstance(this);
  otPlatVendorSetDutyCycle((uint64_t)Instance, v28, v27, 0, v21, v22, v23, v24);
  return *(unsigned int *)&v29[1];
}

unint64_t ot::Mle::Mle::getHIDLess1125Count(ot::Mle::Mle *this)
{
  return ((unint64_t)ot::Mle::current_coex_radioload >> 20) & 3;
}

unint64_t ot::Mle::Mle::getHIDEqual1125Count(ot::Mle::Mle *this)
{
  return ((unint64_t)ot::Mle::current_coex_radioload >> 22) & 3;
}

unint64_t ot::Mle::Mle::getHIDGreater1125Count(ot::Mle::Mle *this)
{
  return ((unint64_t)ot::Mle::current_coex_radioload >> 24) & 3;
}

uint64_t ot::Mle::Mle::getWiFiStateId(ot::Mle::Mle *this)
{
  return BYTE4(ot::Mle::current_coex_radioload) & 7;
}

const char *ot::Mle::Mle::WifiAssotiatedTypeToStrings(ot::Mle::Mle *this, unsigned __int8 a2)
{
  if (a2 >= (int)(unsigned __int16)ot::GetArrayLength<char const*,(unsigned short)5>()) {
    return "invalid WifiAssotiatedType";
  }
  else {
    return ot::Mle::Mle::WifiAssotiatedTypeToStrings(unsigned char)::WifiAssotiatedTypeStrings[a2];
  }
}

{
  return ot::Mle::Mle::WifiAssotiatedTypeToStrings(this, a2);
}

uint64_t ot::Mle::Mle::getPrioritizedWindowSize(ot::Mle::Mle *this)
{
  if (ot::Mle::Mle::getAudioTaskId(this) && ot::Mle::Mle::hasHIDConnected(this)) {
    return 5;
  }
  else {
    return 10;
  }
}

uint64_t ot::Mle::Mle::getBTLoad(ot::Mle::Mle *this)
{
  return ot::Mle::current_coex_radioload;
}

unint64_t ot::Mle::Mle::getWiFiP2PStatus(ot::Mle::Mle *this)
{
  return ((unint64_t)ot::Mle::current_coex_radioload >> 35) & 3;
}

BOOL ot::Mle::Mle::getAirpodEscoStatus(ot::Mle::Mle *this)
{
  return (((unint64_t)ot::Mle::current_coex_radioload >> 19) & 1) != 0;
}

void ot::Mle::Mle::SetCoexLoadMapValue(ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Setting Coex Load from: %llx -> to :%llx", a3, a4, a5, a6, a7, a8, (char)"SetCoexLoadMapValue");
  if (ot::Mle::current_coex_radioload == a2)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s New load is same as current load, hence ignoring this event", v8, v9, v10, v11, v12, v13, (char)"SetCoexLoadMapValue");
  }
  else
  {
    ot::Mle::current_coex_radioload = a2;
    ot::Mle::Mle::SetThreadCoexConfig(this, 0, *((unsigned char *)this + 73), *((unsigned char *)this + 241));
    otThreadErrorToString(0);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s SetCoexLoadMapValue returend %s", v14, v15, v16, v17, v18, v19, (char)"SetCoexLoadMapValue");
  }
  ot::Mle::Mle::LogCoExLoad(this);
  if (ot::Mle::Mle::IsSleepyRouter(this)) {
    ot::Mle::Mle::HandleDynamicCSLPeriod(this);
  }
}

void ot::Mle::Mle::LogCoExLoad(ot::Mle::Mle *this)
{
  unsigned __int8 AudioTaskId = ot::Mle::Mle::getAudioTaskId(this);
  ot::Mle::Mle::getBTLoad(this);
  ot::Mle::Mle::getHIDLess1125Count(this);
  ot::Mle::Mle::getHIDEqual1125Count(this);
  ot::Mle::Mle::getHIDGreater1125Count(this);
  unsigned __int8 WiFiStateId = ot::Mle::Mle::getWiFiStateId(this);
  ot::Mle::Mle::getWiFiP2PStatus(this);
  ot::Mle::Mle::BTAudioTaskIDToStrings(this, AudioTaskId);
  ot::Mle::Mle::WifiAssotiatedTypeToStrings(this, WiFiStateId);
  ot::Mle::RoleToString(*((unsigned char *)this + 73));
  ot::Mle::Mle::AttachStateToString(*((unsigned char *)this + 241));
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s Load is %x, # HID < 11.25 is %d, # HID = 11.25 is %d, # HID > 11.25 is %d, btAudioTask is %s, Wifi Associated type is %s, wifi p2p status is %d, current node_role is %s, current attach_state is %s", v1, v2, v3, v4, v5, v6, (char)"LogCoExLoad");
}

void ot::Mle::Mle::HandleDynamicCSLPeriod(ot::Mle::Mle *this)
{
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  Csluint64_t Period = (unsigned __int16)ot::Mac::Mac::GetCslPeriod(v1);
  if (ot::Mle::Mle::isThreadStateMachineEnabled(this)
    && (ot::Mle::Mle::getAudioTaskId(this) || ot::Mle::Mle::hasHIDConnected(this))
    && ot::Mle::Mle::IsCslPeripheralAttached(this)
    && CslPeriod == 250)
  {
    char AudioTaskId = ot::Mle::Mle::getAudioTaskId(this);
    if (v3 | (AudioTaskId == 0)) {
      char v4 = 0;
    }
    else {
      char v4 = 1;
    }
    if ((v4 & 1) != 0 || ot::Mle::Mle::hasHIDConnected(this))
    {
      unsigned __int8 v5 = ot::Mle::Mle::getAudioTaskId(this);
      ot::Mle::Mle::BTAudioTaskIDToStrings(this, v5);
      ot::Mle::Mle::hasHIDConnected(this);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s WED stays at same eCSL period after change in BT Load. Audio Task ID is %s, %s HID connected", v6, v7, v8, v9, v10, v11, (char)"HandleDynamicCSLPeriod");
    }
  }
}

uint64_t ot::Notifier::Update<ot::Mle::DeviceRole>(void *a1, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v5 = 0;
  if (*a2 == *a3)
  {
    ot::Notifier::SignalIfFirst(a1, a4);
    return 24;
  }
  else
  {
    *a2 = *a3;
    ot::Notifier::Signal(a1, a4);
  }
  return v5;
}

{
  return ot::Notifier::Update<ot::Mle::DeviceRole>(a1, a2, a3, a4);
}

void ot::Mle::Mle::SetAttachState(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (a2 != a1[241])
  {
    char v14 = ot::Mle::Mle::AttachStateToString(a1[241]);
    ot::Mle::Mle::AttachStateToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "AttachState %s -> %s", v2, v3, v4, v5, v6, v7, v14);
    ot::Mle::RoleToString(a1[73]);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: In %s, mRole is %s", v8, v9, v10, v11, v12, v13, (char)"SetAttachState");
    ot::Mle::Mle::SetThreadCoexConfig((ot::InstanceLocator *)a1, 1, a1[73], a2);
    a1[241] = a2;
  }
}

uint64_t ot::Mle::Mle::IncrementAttachCounter(uint64_t this)
{
  if (!++*(_WORD *)(this + 244)) {
    --*(_WORD *)(this + 244);
  }
  ++*(_WORD *)(this + 802);
  return this;
}

uint64_t ot::Mle::Mle::GenerateMleIid(ot::Mle::Mle *this)
{
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 928));
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
  return ot::Ip6::InterfaceIdentifier::GenerateRandom(Iid);
}

void ot::Mle::Mle::Restore(ot::Mle::Mle *this)
{
  v116 = this;
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  ot::MeshCoP::DatasetManager::Restore(active);
  IgnoreError();
  uint64_t v2 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  ot::MeshCoP::DatasetManager::Restore(v2);
  IgnoreError();
  uint64_t v3 = (ot::DuaManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
  ot::DuaManager::Restore(v3);
  uint64_t v4 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  int v115 = ot::Settings::Read<ot::SettingsBase::NetworkInfo>(v4, (ot::SettingsBase::NetworkInfo *)v118);
  if (v115)
  {
    ot::ErrorToString(v115);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "%s: Read NetworkInfo failed, error=%s.", v5, v6, v7, v8, v9, v10, (char)"Restore");
    if (v115 == 23)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "%s: Clear mWasChild for new home setting file.", v11, v12, v13, v14, v15, v16, (char)"Restore");
      *((unsigned char *)this + 32ot::Tlv::SetType(this, 2) = 0;
    }
  }
  else
  {
    uint64_t v98 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    Keychar Sequence = ot::SettingsBase::NetworkInfo::GetKeySequence((ot::SettingsBase::NetworkInfo *)v118);
    ot::KeyManager::SetCurrentKeySequence(v98, KeySequence);
    uint64_t v99 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    int MleFrameCounter = ot::SettingsBase::NetworkInfo::GetMleFrameCounter((ot::SettingsBase::NetworkInfo *)v118);
    ot::KeyManager::SetMleFrameCounter((uint64_t)v99, MleFrameCounter);
    uint64_t v100 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    unsigned int MacFrameCounter = ot::SettingsBase::NetworkInfo::GetMacFrameCounter((ot::SettingsBase::NetworkInfo *)v118);
    ot::KeyManager::SetAllMacFrameCounters(v100, MacFrameCounter, 0);
    ot::SettingsBase::NetworkInfo::GetKeySequence((ot::SettingsBase::NetworkInfo *)v118);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s: Setting Key Sequence: %u", v20, v21, v22, v23, v24, v25, (char)"Restore");
    ot::SettingsBase::NetworkInfo::GetMleFrameCounter((ot::SettingsBase::NetworkInfo *)v118);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s: Setting MLE Frame Counter: %u", v26, v27, v28, v29, v30, v31, (char)"Restore");
    ot::SettingsBase::NetworkInfo::GetMacFrameCounter((ot::SettingsBase::NetworkInfo *)v118);
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s: Setting All MAC Frame Counter: %u", v32, v33, v34, v35, v36, v37, (char)"Restore");
    if ((unsigned __int16)ot::SettingsBase::NetworkInfo::GetVersion((ot::SettingsBase::NetworkInfo *)v118) == 4)
    {
      std::string v96 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress = (const ot::Mac::ExtAddress *)ot::SettingsBase::NetworkInfo::GetExtAddress((ot::SettingsBase::NetworkInfo *)v118);
      ot::Mac::Mac::SetExtAddress(v96, ExtAddress);
      Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 928));
      MeshLocalIid = (const ot::Ip6::InterfaceIdentifier *)ot::SettingsBase::NetworkInfo::GetMeshLocalIid((ot::SettingsBase::NetworkInfo *)v118);
      ot::Ip6::Address::SetIid(Address, MeshLocalIid);
      if (ot::SettingsBase::NetworkInfo::GetRole((ot::SettingsBase::NetworkInfo *)v118)
         - 2 <= 2)
      {
        *((unsigned char *)this + 32ot::Tlv::SetType(this, 2) = ot::SettingsBase::NetworkInfo::GetWasChildStatus((ot::SettingsBase::NetworkInfo *)v118) & 1;
        ot::SettingsBase::NetworkInfo::GetWasChildStatus((ot::SettingsBase::NetworkInfo *)v118);
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s: Setting mWasChild to: %d, settings value: %d", v40, v41, v42, v43, v44, v45, (char)"Restore");
        BOOL v46 = ot::SettingsBase::NetworkInfo::GetRole((ot::SettingsBase::NetworkInfo *)v118) == 3;
        if (v46 || ot::SettingsBase::NetworkInfo::GetRole((ot::SettingsBase::NetworkInfo *)v118) == 4)
        {
          unint64_t v114 = 0;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v113 = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:nn180100]((uint64_t)&rep);
          int v110 = 1;
          std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:nn180100]<int,0>(&v111, &v110);
          unint64_t v114 = std::chrono::operator/[abi:nn180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000l>>(&v113, (uint64_t)&v111);
          unint64_t LastDetachTime = ot::SettingsBase::NetworkInfo::GetLastDetachTime((ot::SettingsBase::NetworkInfo *)v118);
          if (v114 > LastDetachTime)
          {
            ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Router Restore: now(%llu), last detach time (%llu) diff_ms(%llu),routerRestoreThreshold(%u)", v47, v48, v49, v50, v51, v52, v114);
            if (v114 - LastDetachTime > 0x1D4C0)
            {
              ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Router Restore: now is greater than last detach time, reset RLOC and exit restore", v53, v54, v55, v56, v57, v58, v91);
              int v59 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              ot::Mac::Mac::SetShortAddress(v59, 65534);
              *((_WORD *)this + 34ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = -2;
              return;
            }
          }
        }
        v95 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        __int16 Rloc16 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v118);
        ot::Mac::Mac::SetShortAddress(v95, Rloc16);
        *((_WORD *)this + 34ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v118);
        if ((unsigned __int16)ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v118) != 65534)
        {
          unsigned __int16 v61 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v118);
          if (ot::Mle::IsActiveRouter((ot::Mle *)v61))
          {
            uint64_t v93 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
            unsigned __int16 v87 = ot::Mle::Mle::GetRloc16(this);
            char v88 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v87);
            ot::Mle::MleRouter::SetRouterId((uint64_t)v93, v88);
            std::string v94 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
            int PreviousPartitionId = ot::SettingsBase::NetworkInfo::GetPreviousPartitionId((ot::SettingsBase::NetworkInfo *)v118);
            ot::Mle::MleRouter::SetPreviousPartitionId((uint64_t)v94, PreviousPartitionId);
            uint64_t v90 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
            ot::ChildTable::Restore(v90);
          }
          else
          {
            int v62 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
            if (ot::Settings::Read<ot::SettingsBase::ParentInfo>(v62, (ot::SettingsBase::ParentInfo *)v117))
            {
              char v63 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v118);
              ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Invalid settings - no saved parent info with valid end-device RLOC16 0x%04x", v64, v65, v66, v67, v68, v69, v63);
              return;
            }
            ot::Parent::Clear((ot::Mle::Mle *)((char *)this + 80));
            char v70 = (const ot::Mac::ExtAddress *)ot::SettingsBase::ParentInfo::GetExtAddress((ot::SettingsBase::ParentInfo *)v117);
            ot::Neighbor::SetExtAddress((void *)this + 10, v70);
            __int16 Version = ot::SettingsBase::ParentInfo::GetVersion((ot::SettingsBase::ParentInfo *)v117);
            ot::Neighbor::SetVersion((uint64_t)this + 80, Version);
            ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v108, 11);
            ot::Neighbor::SetDeviceMode((uint64_t)this + 80, v108);
            unsigned __int16 v72 = ot::SettingsBase::NetworkInfo::GetRloc16((ot::SettingsBase::NetworkInfo *)v118);
            unsigned __int8 v73 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v72);
            __int16 v74 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v73);
            ot::Neighbor::SetRloc16((uint64_t)this + 80, v74);
            unint64_t v107 = 0;
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = std::chrono::system_clock::now().__d_.__rep_;
            uint64_t v106 = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:nn180100]((uint64_t)&v105);
            int v103 = 1;
            std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:nn180100]<int,0>(&v104, &v103);
            unint64_t v107 = std::chrono::operator/[abi:nn180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000l>>(&v106, (uint64_t)&v104);
            unint64_t LastHeardTime = ot::SettingsBase::ParentInfo::GetLastHeardTime((ot::SettingsBase::ParentInfo *)v117);
            if (v107 <= LastHeardTime)
            {
              ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Restore now(%llu) is less than last heard time(%llu), dont reset RLOC,possible wrap around", v75, v76, v77, v78, v79, v80, v107);
              ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 80), 1);
            }
            else
            {
              ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Parent Restore: now(%llu), last heard time (%llu) diff_ms(%llu),kParentRestoreThreshold_ms(%u)", v75, v76, v77, v78, v79, v80, v107);
              if (v107 - LastHeardTime <= 0x7530)
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Parent Restore now(%llu) is less than last heard time(%llu), dont reset RLOC ", v81, v82, v83, v84, v85, v86, v107);
                ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 80), 1);
              }
              else
              {
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Parent Restore: now is greater than last heard time, reset RLOC", v81, v82, v83, v84, v85, v86, v92);
                ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 80), 0);
                ot::Neighbor::SetRloc16((uint64_t)this + 80, 65534);
              }
            }
            *((_WORD *)this + 34ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 80));
          }
          *((unsigned char *)this + 32ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::SettingsBase::NetworkInfo::GetRole((ot::SettingsBase::NetworkInfo *)v118) == 4;
          *((unsigned char *)this + 59ot::Tlv::SetType(this, 7) = 1;
        }
      }
    }
  }
}

uint64_t ot::Settings::Read<ot::SettingsBase::NetworkInfo>(ot::InstanceLocator *a1, ot::SettingsBase::NetworkInfo *a2)
{
  return ot::Settings::ReadEntry(a1, 3u, a2, 0x2Fu);
}

{
  return ot::Settings::Read<ot::SettingsBase::NetworkInfo>(a1, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::GetWasChildStatus(ot::SettingsBase::NetworkInfo *this)
{
  return *((unsigned char *)this + 46) & 1;
}

{
  return ot::SettingsBase::NetworkInfo::GetWasChildStatus(this);
}

uint64_t std::chrono::operator/[abi:nn180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000l>>(void *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = *a1;
  uint64_t v3 = std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100]((uint64_t)&v5);
  std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:nn180100]<long long,std::ratio<1l,1000l>,0>(&v4, v6);
  return v3 / std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100]((uint64_t)&v4);
}

uint64_t std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:nn180100](uint64_t a1)
{
  return *(void *)a1;
}

void *std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:nn180100]<int,0>(void *a1, int *a2)
{
  return a1;
}

uint64_t ot::SettingsBase::NetworkInfo::GetLastDetachTime(ot::SettingsBase::NetworkInfo *this)
{
  return *(void *)((char *)this + 38);
}

{
  return ot::SettingsBase::NetworkInfo::GetLastDetachTime(this);
}

uint64_t ot::Settings::Read<ot::SettingsBase::ParentInfo>(ot::InstanceLocator *a1, ot::SettingsBase::ParentInfo *a2)
{
  return ot::Settings::ReadEntry(a1, 4u, a2, 0x16u);
}

{
  return ot::Settings::Read<ot::SettingsBase::ParentInfo>(a1, a2);
}

uint64_t ot::Mle::MleRouter::SetPreviousPartitionId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 3570--*(unsigned char *)(this + 4) = a2;
  return this;
}

{
  return ot::Mle::MleRouter::SetPreviousPartitionId(this, a2);
}

uint64_t ot::Mle::Mle::StoreParentInfo(ot::Mle::Mle *this)
{
  uint64_t v32 = this;
  unsigned int v31 = 0;
  uint64_t v30 = 0;
  if (!ot::Mle::Mle::IsAttached(this) || !ot::Mle::Mle::IsChild(this)) {
    goto LABEL_7;
  }
  ot::SettingsBase::ParentInfo::Init((ot::SettingsBase::ParentInfo *)v33);
  ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 80));
  ot::SettingsBase::ParentInfo::SetExtAddress((uint64_t)v33, v1);
  unsigned __int16 Version = ot::Neighbor::GetVersion((ot::Mle::Mle *)((char *)this + 80));
  ot::SettingsBase::ParentInfo::SetVersion((ot::SettingsBase::ParentInfo *)v33, Version);
  ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 80));
  Parent = (ot::Neighbor *)ot::NeighborTable::FindParent((ot::Mle::Mle *)((char *)this + 232), v3, 1);
  uint64_t v29 = Parent;
  if (!Parent)
  {
    unsigned int v31 = 23;
    goto LABEL_8;
  }
  int Now = ot::TimerMilli::GetNow(Parent);
  int LastHeard = ot::Neighbor::GetLastHeard(v29);
  uint64_t v30 = ot::Time::operator-(&Now, &LastHeard);
  uint64_t v26 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  uint64_t v25 = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:nn180100]((uint64_t)&rep);
  int v22 = 1;
  std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:nn180100]<int,0>(&v23, &v22);
  uint64_t v26 = std::chrono::operator/[abi:nn180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000l>>(&v25, (uint64_t)&v23);
  uint64_t v30 = v26 - v30;
  ot::SettingsBase::ParentInfo::SetLastHeardTime((uint64_t)v33, v30);
  uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
  unsigned int v31 = ot::Settings::Save<ot::SettingsBase::ParentInfo>(v5, (ot::SettingsBase::NetworkInfo *)v33);
  if (!v31)
  {
LABEL_7:
    BOOL IsAttached = ot::Mle::Mle::IsAttached(this);
    ot::Mle::Mle::IsChild(this);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Store Parent Information isAttached=%d isChild=%d lastTransactionTime=%llu", v6, v7, v8, v9, v10, v11, IsAttached);
  }
LABEL_8:
  if (v31)
  {
    char v12 = ot::ErrorToString(v31);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Store Parent Information failed error=%s", v13, v14, v15, v16, v17, v18, v12);
  }
  return v31;
}

BOOL ot::Mle::Mle::IsAttached(ot::Mle::Mle *this)
{
  BOOL v3 = 1;
  if (!ot::Mle::Mle::IsChild(this))
  {
    BOOL v3 = 1;
    if (!ot::Mle::Mle::IsRouter(this)) {
      return ot::Mle::Mle::IsLeader(this);
    }
  }
  return v3;
}

uint64_t ot::SettingsBase::ParentInfo::Init(ot::SettingsBase::ParentInfo *this)
{
  return ot::SettingsBase::ParentInfo::SetVersion(this, 2u);
}

{
  return ot::SettingsBase::ParentInfo::Init(this);
}

uint64_t ot::SettingsBase::ParentInfo::SetExtAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + 1ot::Tlv::SetType(this, 2) = *(void *)a2;
  return this;
}

{
  return ot::SettingsBase::ParentInfo::SetExtAddress(this, a2);
}

uint64_t ot::SettingsBase::ParentInfo::SetVersion(ot::SettingsBase::ParentInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = result;
  return result;
}

{
  return ot::SettingsBase::ParentInfo::SetVersion(this, a2);
}

uint64_t ot::SettingsBase::ParentInfo::SetLastHeardTime(uint64_t this, uint64_t a2)
{
  *(void *)(this + --*(unsigned char *)(this + 4) = a2;
  return this;
}

{
  return ot::SettingsBase::ParentInfo::SetLastHeardTime(this, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::ParentInfo>(ot::InstanceLocator *a1, ot::SettingsBase::NetworkInfo *a2)
{
  return ot::Settings::SaveEntry(a1, 4, a2, (uint64_t)v3, 0x16u);
}

{
  return ot::Settings::Save<ot::SettingsBase::ParentInfo>(a1, a2);
}

uint64_t ot::Mle::Mle::Store(ot::Mle::Mle *this)
{
  unsigned int v35 = 0;
  if (!ot::Mle::Mle::IsCslPeripheralAttaching(this))
  {
    ot::SettingsBase::NetworkInfo::Init((ot::SettingsBase::NetworkInfo *)v36);
    if (ot::Mle::Mle::IsAttached(this))
    {
      ot::SettingsBase::NetworkInfo::SetRole(v36, *((unsigned char *)this + 73));
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
      ot::SettingsBase::NetworkInfo::SetRloc16((ot::SettingsBase::NetworkInfo *)v36, Rloc16);
      unsigned int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 64));
      ot::SettingsBase::NetworkInfo::SetPreviousPartitionId((ot::SettingsBase::NetworkInfo *)v36, PartitionId);
      BOOL v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v3);
      ot::SettingsBase::NetworkInfo::SetExtAddress((uint64_t)v36, ExtAddress);
      Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 928));
      Iid = (const ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
      ot::SettingsBase::NetworkInfo::SetMeshLocalIid((uint64_t)v36, Iid);
      ot::SettingsBase::NetworkInfo::SetVersion((ot::SettingsBase::NetworkInfo *)v36, 4u);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Store Last detach time=%llu", v7, v8, v9, v10, v11, v12, *((void *)this + 141));
      ot::SettingsBase::NetworkInfo::SetLastDetachTime((uint64_t)v36, *((void *)this + 141));
      ot::SettingsBase::NetworkInfo::SetWasChildStatus((uint64_t)v36, *((unsigned char *)this + 322) & 1);
      if (ot::Mle::Mle::IsChild(this)) {
        ot::Mle::Mle::StoreParentInfo(this);
      }
    }
    else
    {
      uint64_t v13 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
      if (ot::Settings::Read<ot::SettingsBase::NetworkInfo>(v13, (ot::SettingsBase::NetworkInfo *)v36)) {
        return v35;
      }
    }
    uint64_t v14 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    CurrentKeychar Sequence = ot::KeyManager::GetCurrentKeySequence(v14);
    ot::SettingsBase::NetworkInfo::SetKeySequence((ot::SettingsBase::NetworkInfo *)v36, CurrentKeySequence);
    uint64_t v16 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    int MleFrameCounter = ot::KeyManager::GetMleFrameCounter(v16);
    ot::SettingsBase::NetworkInfo::SetMleFrameCounter((ot::SettingsBase::NetworkInfo *)v36, MleFrameCounter + 1000);
    uint64_t v18 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
    Maximumint MacFrameCounter = ot::KeyManager::GetMaximumMacFrameCounter(v18);
    ot::SettingsBase::NetworkInfo::SetMacFrameCounter((ot::SettingsBase::NetworkInfo *)v36, MaximumMacFrameCounter + 1000);
    char v20 = ot::Mle::DeviceMode::Get((ot::Mle::Mle *)((char *)this + 240));
    ot::SettingsBase::NetworkInfo::SetDeviceMode((uint64_t)v36, v20);
    uint64_t v21 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(this);
    unsigned int v35 = ot::Settings::Save<ot::SettingsBase::NetworkInfo>(v21, (ot::SettingsBase::NetworkInfo *)v36);
    if (!v35)
    {
      uint64_t v32 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      int v22 = ot::SettingsBase::NetworkInfo::GetMleFrameCounter((ot::SettingsBase::NetworkInfo *)v36);
      ot::KeyManager::SetStoredMleFrameCounter((uint64_t)v32, v22);
      uint64_t v33 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      int MacFrameCounter = ot::SettingsBase::NetworkInfo::GetMacFrameCounter((ot::SettingsBase::NetworkInfo *)v36);
      ot::KeyManager::SetStoredMacFrameCounter((uint64_t)v33, MacFrameCounter);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Store Network Information", v24, v25, v26, v27, v28, v29, v31);
    }
  }
  return v35;
}

uint64_t ot::SettingsBase::NetworkInfo::Init(ot::SettingsBase::NetworkInfo *this)
{
  return ot::SettingsBase::NetworkInfo::SetVersion(this, 2u);
}

{
  return ot::SettingsBase::NetworkInfo::Init(this);
}

unsigned char *ot::SettingsBase::NetworkInfo::SetRole(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

{
  return ot::SettingsBase::NetworkInfo::SetRole(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetRloc16(ot::SettingsBase::NetworkInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

{
  return ot::SettingsBase::NetworkInfo::SetRloc16(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetPreviousPartitionId(ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + --*(unsigned char *)(this + 4) = result;
  return result;
}

{
  return ot::SettingsBase::NetworkInfo::SetPreviousPartitionId(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetExtAddress(uint64_t this, const ot::Mac::ExtAddress *a2)
{
  *(void *)(this + 2ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = *(void *)a2;
  return this;
}

{
  return ot::SettingsBase::NetworkInfo::SetExtAddress(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetMeshLocalIid(uint64_t this, const ot::Ip6::InterfaceIdentifier *a2)
{
  *(void *)(this + 28) = *(void *)a2;
  return this;
}

{
  return ot::SettingsBase::NetworkInfo::SetMeshLocalIid(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetVersion(ot::SettingsBase::NetworkInfo *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap16(a2);
  *((_WORD *)this + 18) = result;
  return result;
}

{
  return ot::SettingsBase::NetworkInfo::SetVersion(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetLastDetachTime(uint64_t this, uint64_t a2)
{
  *(void *)(this + 38) = a2;
  return this;
}

{
  return ot::SettingsBase::NetworkInfo::SetLastDetachTime(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetWasChildStatus(uint64_t this, char a2)
{
  *(unsigned char *)(this + 46) = a2 & 1;
  return this;
}

{
  return ot::SettingsBase::NetworkInfo::SetWasChildStatus(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetKeySequence(ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

{
  return ot::SettingsBase::NetworkInfo::SetKeySequence(this, a2);
}

uint64_t ot::SettingsBase::NetworkInfo::SetMleFrameCounter(ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + ot::Tlv::SetType(this, 2) = result;
  return result;
}

{
  return ot::SettingsBase::NetworkInfo::SetMleFrameCounter(this, a2);
}

uint64_t ot::KeyManager::GetMleFrameCounter(ot::KeyManager *this)
{
  return *((unsigned int *)this + 14);
}

{
  return ot::KeyManager::GetMleFrameCounter(this);
}

uint64_t ot::SettingsBase::NetworkInfo::SetMacFrameCounter(ot::SettingsBase::NetworkInfo *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *((_DWORD *)this + ot::Tlv::SetType(this, 3) = result;
  return result;
}

{
  return ot::SettingsBase::NetworkInfo::SetMacFrameCounter(this, a2);
}

uint64_t ot::KeyManager::GetMaximumMacFrameCounter(ot::KeyManager *this)
{
  return ot::Mac::LinkFrameCounters::GetMaximum((ot::KeyManager *)((char *)this + 52));
}

{
  return ot::KeyManager::GetMaximumMacFrameCounter(this);
}

uint64_t ot::SettingsBase::NetworkInfo::SetDeviceMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  return this;
}

{
  return ot::SettingsBase::NetworkInfo::SetDeviceMode(this, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::NetworkInfo>(ot::InstanceLocator *a1, ot::SettingsBase::NetworkInfo *a2)
{
  return ot::Settings::SaveEntry(a1, 3, a2, (uint64_t)v3, 0x2Fu);
}

{
  return ot::Settings::Save<ot::SettingsBase::NetworkInfo>(a1, a2);
}

uint64_t ot::KeyManager::SetStoredMleFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 6--*(unsigned char *)(this + 4) = a2;
  return this;
}

{
  return ot::KeyManager::SetStoredMleFrameCounter(this, a2);
}

uint64_t ot::KeyManager::SetStoredMacFrameCounter(uint64_t this, int a2)
{
  *(_DWORD *)(this + 6ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  return this;
}

{
  return ot::KeyManager::SetStoredMacFrameCounter(this, a2);
}

uint64_t ot::Mle::Mle::UpdateLastDetachTime(ot::Mle::Mle *this)
{
  uint64_t v8 = this;
  uint64_t v7 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  uint64_t v6 = std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::time_since_epoch[abi:nn180100]((uint64_t)&rep);
  int v3 = 1;
  std::chrono::duration<long long,std::ratio<1l,1000l>>::duration[abi:nn180100]<int,0>(&v4, &v3);
  uint64_t v7 = std::chrono::operator/[abi:nn180100]<long long,std::ratio<1l,1000000l>,long long,std::ratio<1l,1000l>>(&v6, (uint64_t)&v4);
  return ot::Mle::Mle::SetLastDetachTime((uint64_t)this, v7);
}

uint64_t ot::Mle::Mle::SetLastDetachTime(uint64_t this, uint64_t a2)
{
  *(void *)(this + 1128) = a2;
  return this;
}

{
  return ot::Mle::Mle::SetLastDetachTime(this, a2);
}

uint64_t ot::Mle::Mle::BecomeDetached(ot::Mle::Mle *this)
{
  unsigned int v12 = 0;
  if (ot::Mle::Mle::IsDisabled(this))
  {
    return 13;
  }
  else if (!ot::Mle::Mle::IsDetached(this) || *((unsigned char *)this + 241) != 2)
  {
    if (!*((unsigned char *)this + 243))
    {
      uint64_t v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      ot::MeshCoP::DatasetManager::HandleDetach(v1);
    }
    ot::Mle::Mle::SetStateDetached(this);
    ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 80), 0);
    ot::Mle::Mle::SetRloc16(this, 0xFFFEu);
    BOOL isThreadStateMachineEnabled = ot::Mle::Mle::isThreadStateMachineEnabled(this);
    ot::InstanceLocator::GetInstance(this);
    if (!otPlatVendorGetThreadJoinSession()
      && isThreadStateMachineEnabled
      && (ot::Mle::Mle::GetDeviceMode(this), ot::Mle::Mle::IsMinimalEndDevice(this)))
    {
      if (*((_WORD *)this + 122))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "ThreadConnection: Attach SED/SSED attempt %d unsuccessful, stop retries", v2, v3, v4, v5, v6, v7, *((_WORD *)this + 122));
        *((_WORD *)this + 12ot::Tlv::SetType(this, 2) = 0;
        uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
        ot::Notifier::Signal(v8, (uint64_t)&_mh_execute_header);
      }
      else
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "ThreadConnection: Attach SED/SSED attempt %d unsuccessful, will continue more retries", v2, v3, v4, v5, v6, v7, *((_WORD *)this + 122));
        ot::Mle::Mle::Attach((uint64_t)this, 0);
      }
    }
    else
    {
      ot::Mle::Mle::Attach((uint64_t)this, 0);
    }
  }
  return v12;
}

uint64_t ot::Mle::Mle::BecomeChild(ot::Mle::Mle *this)
{
  unsigned int v3 = 0;
  if (ot::Mle::Mle::IsDisabled(this))
  {
    return 13;
  }
  else if (ot::Mle::Mle::IsAttaching(this))
  {
    return 5;
  }
  else
  {
    ot::Mle::Mle::Attach((uint64_t)this, 0);
  }
  return v3;
}

BOOL ot::Mle::Mle::IsAttaching(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 241) != 0;
}

{
  return ot::Mle::Mle::IsAttaching(this);
}

uint64_t ot::Mle::Mle::SearchForBetterParent(ot::Mle::Mle *this)
{
  unsigned int v3 = 0;
  if (ot::Mle::Mle::IsChild(this)) {
    ot::Mle::Mle::Attach((uint64_t)this, 4);
  }
  else {
    return 13;
  }
  return v3;
}

uint64_t ot::Mle::Mle::GetAttachStartDelay(ot::Mle::Mle *this)
{
  unsigned int v19 = 1;
  if (ot::Mle::Mle::IsDetached(this))
  {
    if (*((_WORD *)this + 122))
    {
      unsigned __int16 v17 = *((_WORD *)this + 122) - 1;
      if (v17 >= 0x20uLL || (unint64_t)(1 << v17) > 0x27) {
        unsigned int v19 = ot::Random::NonCrypto::AddJitter((ot::Random::NonCrypto *)0x2710, 0x7D0u);
      }
      else {
        unsigned int v19 = 251 << v17;
      }
      int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange(0, 0x32u);
      if (Uint32InRange != 0 && Uint32InRange + v19 >= v19) {
        v19 += Uint32InRange;
      }
      __int16 v15 = *((_WORD *)this + 122);
      ot::ToUlong(v19 / 0x3E8);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Attach attempt %u unsuccessful, will try again in %lu.%03u seconds", v8, v9, v10, v11, v12, v13, v15);
    }
    else
    {
      unsigned int v19 = 20;
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Delay before 1st Attach Attempt: %d", v1, v2, v3, v4, v5, v6, 20);
    }
  }
  return v19;
}

BOOL ot::Mle::Mle::IsRouterOrLeader(ot::Mle::Mle *this)
{
  BOOL v3 = 1;
  if (!ot::Mle::Mle::IsRouter(this)) {
    return ot::Mle::Mle::IsLeader(this);
  }
  return v3;
}

unsigned char *ot::Mac::Mac::SetBeaconEnabled(unsigned char *this, char a2)
{
  *this = *this & 0xEF | (16 * (a2 & 1));
  return this;
}

{
  return ot::Mac::Mac::SetBeaconEnabled(this, a2);
}

void ot::Mle::Mle::SetStateChild(ot::Mle::Mle *this, unsigned __int16 a2)
{
  if (ot::Mle::Mle::IsLeader(this))
  {
    uint64_t v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    ot::Ip6::Netif::RemoveUnicastAddress(v2, (ot::Mle::Mle *)((char *)this + 32));
  }
  ot::Mle::Mle::SetRloc16(this, a2);
  ot::Mle::Mle::SetRole((uint64_t)this, 2);
  ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 0);
  ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 248), 0x4E20u);
  *((unsigned char *)this + 24ot::Tlv::SetType(this, 3) = 0;
  *((unsigned char *)this + 59ot::Tlv::SetType(this, 2) = 0;
  *((unsigned char *)this + 59--*(unsigned char *)(this + 4) = 0;
  BOOL v3 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetBeaconEnabled(v3, 0);
  ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
  if (ot::Mle::Mle::IsFullThreadDevice(this))
  {
    uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::HandleChildStart(v4, *((unsigned char *)this + 409));
  }
  ot::Mle::Mle::InformPreviousChannel((uint64_t)this);
  if (*((unsigned __int16 *)this + 341) != 65534)
  {
    int v6 = *((unsigned __int16 *)this + 341);
    if (v6 != (unsigned __int16)ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 80)))
    {
      ++*((_WORD *)this + 428);
      ++*((_WORD *)this + 446);
      ot::Mle::Mle::InformPreviousParent(this);
    }
  }
  *((_WORD *)this + 34ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 80));
  uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::UpdateCsl(v5, 0);
}

uint64_t ot::Mle::Mle::InformPreviousChannel(uint64_t this)
{
  BOOL v3 = (ot::Mle::Mle *)this;
  if (*(unsigned __int16 *)(this + 686) != 0xFFFF)
  {
    if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)this) || (this = ot::Mle::Mle::IsRouter(v3), (this & 1) != 0))
    {
      if (!ot::Mle::Mle::IsFullThreadDevice(v3)
        || ot::Mle::Mle::IsRouter(v3)
        || (uint64_t v1 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v3),
            this = ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(v1),
            !(_BYTE)this))
      {
        *((_WORD *)v3 + 34ot::Tlv::SetType(this, 3) = -1;
        uint64_t v2 = (ot::AnnounceBeginServer *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(v3);
        return ot::AnnounceBeginServer::SendAnnounce(v2, 1 << *((unsigned char *)v3 + 685), 3, 0x3E8u);
      }
    }
  }
  return this;
}

void ot::Mle::Mle::InformPreviousParent(ot::Mle::Mle *this)
{
  uint64_t v24 = this;
  int v23 = 0;
  int v22 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v21);
  uint64_t v1 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
  int v22 = ot::Ip6::Ip6::NewMessage(v1, 0);
  if (v22)
  {
    int v23 = ot::Message::SetLength(v22, 0);
    if (!v23)
    {
      MeshLocal64 = (__n128 *)ot::Mle::Mle::GetMeshLocal64(this);
      ot::Ip6::MessageInfo::SetSockAddr(v21, MeshLocal64);
      MeshLocal16 = (__n128 *)ot::Mle::Mle::GetMeshLocal16(this);
      ot::Ip6::MessageInfo::SetPeerAddr(v21, MeshLocal16);
      PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v21);
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
      ot::Ip6::InterfaceIdentifier::SetLocator(Iid, *((_WORD *)this + 341));
      int v6 = (ot::Ip6::Ip6 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Ip6>(this);
      int v23 = ot::Ip6::Ip6::SendDatagram(v6, v22, (ot::Ip6::MessageInfo *)v21, 0x3Bu);
      if (!v23) {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Sending message to inform previous parent 0x%04x", v7, v8, v9, v10, v11, v12, *((_WORD *)this + 341));
      }
    }
  }
  else
  {
    int v23 = 3;
  }
  if (v23)
  {
    char v13 = ot::ErrorToString(v23);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Failed to inform previous parent: %s", v14, v15, v16, v17, v18, v19, v13);
    if (v22) {
      ot::Message::Free(v22);
    }
  }
}

void ot::Mle::Mle::SetTimeout(ot::Mle::Mle *this, unsigned int a2)
{
  int v4 = a2;
  if (*((_DWORD *)this + 168) != a2)
  {
    if (a2 < 5) {
      int v4 = 5;
    }
    *((_DWORD *)this + 168) = v4;
    uint64_t v2 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
    ot::DataPollSender::RecalculatePollPeriod(v2);
    if (ot::Mle::Mle::IsChild(this))
    {
      ot::Mle::Mle::SendChildUpdateRequest(this);
      IgnoreError();
    }
  }
}

uint64_t ot::Mle::Mle::SetDeviceMode(unsigned char *a1, char a2)
{
  char v31 = a2;
  uint64_t v30 = a1;
  unsigned int v29 = 0;
  char v28 = a1[240];
  if (ot::Mle::DeviceMode::IsValid((ot::Mle::DeviceMode *)&v31))
  {
    if (ot::Unequatable<ot::Mle::DeviceMode>::operator!=(a1 + 240, &v31))
    {
      a1[240] = v31;
      uint64_t v2 = (ot::Utils::HistoryTracker *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>((ot::InstanceLocator *)a1);
      ot::Utils::HistoryTracker::RecordNetworkInfo(v2);
      char v25 = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v28);
      ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)(a1 + 240));
      ot::Mle::DeviceMode::ToString((ot::Mle::DeviceMode *)(a1 + 240), (ot::StringWriter *)v32);
      ot::String<(unsigned short)45>::AsCString((uint64_t)v32);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Mode 0x%02x -> 0x%02x [%s]", v3, v4, v5, v6, v7, v8, v25);
      ot::Mle::Mle::Store((ot::Mle::Mle *)a1);
      IgnoreError();
      if (!ot::Mle::Mle::IsAttached((ot::Mle::Mle *)a1)) {
        goto LABEL_15;
      }
      char v27 = 0;
      if (ot::Mle::Mle::IsFullRouter((ot::Mle::Mle *)a1))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s: Node type is Full Router", v9, v10, v11, v12, v13, v14, (char)"SetDeviceMode");
        ot::Mle::Mle::SetThreadCoexConfig((ot::InstanceLocator *)a1, 0, 4u, 0);
      }
      BOOL IsFullThreadDevice = ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)&v28);
      if (IsFullThreadDevice != ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)(a1 + 240))) {
        char v27 = 1;
      }
      if ((a1[599] & 1) == 0
        && ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v28)
        && !ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)(a1 + 240)))
      {
        char v27 = 1;
      }
      if (v27)
      {
        ot::Mle::Mle::ResetAttachCounter((uint64_t)a1);
        ot::Mle::Mle::BecomeDetached((ot::Mle::Mle *)a1);
        IgnoreError();
      }
      else
      {
LABEL_15:
        if (ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1))
        {
          ot::Mle::Mle::ResetAttachCounter((uint64_t)a1);
          ot::Mle::Mle::SetStateDetached((ot::Mle::Mle *)a1);
          ot::Mle::Mle::Attach((uint64_t)a1, 0);
        }
        else if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1))
        {
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16((ot::Mle::Mle *)a1);
          ot::Mle::Mle::SetStateChild((ot::Mle::Mle *)a1, Rloc16);
          ot::Mle::Mle::SendChildUpdateRequest((ot::Mle::Mle *)a1);
          IgnoreError();
        }
      }
    }
  }
  else
  {
    unsigned int v29 = 7;
  }
  if (ot::Mle::Mle::IsSleepyRouter((ot::Mle::Mle *)a1) || ot::Mle::Mle::IsMinimalEndDevice((ot::Mle::Mle *)a1))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "%s: Remove any children before transitioning to Sleepy Router or SED Role", v16, v17, v18, v19, v20, v21, (char)"SetDeviceMode");
    int v22 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
    ot::Mle::MleRouter::RemoveChildren(v22);
  }
  return v29;
}

uint64_t ot::Mle::DeviceMode::IsValid(ot::Mle::DeviceMode *this)
{
  return 1;
}

{
  return ot::Mle::DeviceMode::IsValid(this);
}

BOOL ot::Unequatable<ot::Mle::DeviceMode>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Mle::DeviceMode>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Mle::DeviceMode>::operator!=(a1, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Server>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Dhcp6::Server>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Server>(a1);
}

BOOL ot::Mle::Mle::ServiceAloc::IsInUse(ot::Mle::Mle::ServiceAloc *this)
{
  return (unsigned __int16)ot::Mle::Mle::ServiceAloc::GetAloc16(this) != 65534;
}

{
  return ot::Mle::Mle::ServiceAloc::IsInUse(this);
}

void *ot::Mle::Mle::ServiceAloc::ApplyMeshLocalPrefix(ot::Ip6::Netif::UnicastAddress *a1, void *a2)
{
  Address = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress(a1);
  return ot::Ip6::Address::SetPrefix(Address, a2);
}

{
  return ot::Mle::Mle::ServiceAloc::ApplyMeshLocalPrefix(a1, a2);
}

uint64_t ot::Mle::Mle::SetLeaderData(ot::Mle::Mle *this, int a2, char a3, char a4)
{
  if (ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 64)) == a2)
  {
    uint64_t v6 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::SignalIfFirst(v6, 128);
  }
  else
  {
    uint64_t v4 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::HandlePartitionChange(v4);
    uint64_t v5 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v5, 128);
    ++*((_WORD *)this + 402);
    ++*((_WORD *)this + 444);
  }
  ot::Mle::LeaderData::SetPartitionId((_DWORD *)this + 16, a2);
  ot::Mle::LeaderData::SetWeighting((uint64_t)this + 64, a3);
  return ot::Mle::LeaderData::SetLeaderRouterId((uint64_t)this + 64, a4);
}

_DWORD *ot::Mle::LeaderData::SetPartitionId(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  return ot::Mle::LeaderData::SetPartitionId(this, a2);
}

uint64_t ot::Mle::LeaderData::SetWeighting(uint64_t this, char a2)
{
  *(unsigned char *)(this + --*(unsigned char *)(this + 4) = a2;
  return this;
}

{
  return ot::Mle::LeaderData::SetWeighting(this, a2);
}

uint64_t ot::Mle::LeaderData::SetLeaderRouterId(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 7) = a2;
  return this;
}

{
  return ot::Mle::LeaderData::SetLeaderRouterId(this, a2);
}

uint64_t ot::Mle::Mle::GetLeaderAddress(ot::Mle::Mle *this, ot::Ip6::Address *a2)
{
  unsigned int v8 = 0;
  if ((unsigned __int16)ot::Mle::Mle::GetRloc16(this) == 65534)
  {
    return 16;
  }
  else
  {
    ot::Mle::Mle::GetMeshLocalPrefix(this);
    uint64_t v6 = v2;
    unsigned __int8 LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::Mle *)((char *)this + 64));
    unsigned __int16 v4 = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderRouterId);
    ot::Ip6::Address::SetToRoutingLocator(a2, v6, v4);
  }
  return v8;
}

uint64_t ot::Mle::Mle::GetLocatorAddress(ot::Mle::Mle *this, ot::Ip6::Address *a2, unsigned __int16 a3)
{
  unsigned int v7 = 0;
  if ((unsigned __int16)ot::Mle::Mle::GetRloc16(this) == 65534)
  {
    return 16;
  }
  else
  {
    Address = (void *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Mle::Mle *)((char *)this + 960));
    *(void *)a2 = *Address;
    *(void *)((char *)a2 + 6) = *(void *)((char *)Address + 6);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    ot::Ip6::InterfaceIdentifier::SetLocator(Iid, a3);
  }
  return v7;
}

uint64_t ot::Mle::Mle::GetServiceAloc(ot::Mle::Mle *this, unsigned __int8 a2, ot::Ip6::Address *a3)
{
  unsigned int v8 = 0;
  if ((unsigned __int16)ot::Mle::Mle::GetRloc16(this) == 65534)
  {
    return 16;
  }
  else
  {
    ot::Mle::Mle::GetMeshLocalPrefix(this);
    uint64_t v6 = v3;
    unsigned __int16 v4 = ot::Mle::ServiceAlocFromId((ot::Mle *)a2);
    ot::Ip6::Address::SetToAnycastLocator(a3, v6, v4);
  }
  return v8;
}

uint64_t ot::Mle::ServiceAlocFromId(ot::Mle *this)
{
  return (unsigned __int16)(this - 1008);
}

{
  return ot::Mle::ServiceAlocFromId(this);
}

uint64_t ot::Mle::Mle::GetLeaderData(ot::Mle::Mle *this)
{
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char Version = ot::NetworkData::LeaderBase::GetVersion(v1, 0);
  ot::Mle::LeaderData::SetDataVersion((uint64_t)this + 64, Version);
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char v4 = ot::NetworkData::LeaderBase::GetVersion(v3, 1);
  ot::Mle::LeaderData::SetStableDataVersion((uint64_t)this + 64, v4);
  return (uint64_t)this + 64;
}

uint64_t ot::Mle::LeaderData::SetDataVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 5) = a2;
  return this;
}

{
  return ot::Mle::LeaderData::SetDataVersion(this, a2);
}

uint64_t ot::NetworkData::LeaderBase::GetVersion(uint64_t a1, char a2)
{
  if (a2) {
    return *(unsigned __int8 *)(a1 + 10);
  }
  else {
    return *(unsigned __int8 *)(a1 + 11);
  }
}

{
  return ot::NetworkData::LeaderBase::GetVersion(a1, a2);
}

uint64_t ot::Mle::LeaderData::SetStableDataVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 6) = a2;
  return this;
}

{
  return ot::Mle::LeaderData::SetStableDataVersion(this, a2);
}

BOOL ot::Mle::Mle::HasUnregisteredAddress(ot::Mle::Mle *this)
{
  uint64_t v15 = this;
  BOOL v14 = 0;
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v1);
  v13[1] = v2;
  v13[0] = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v2);
  uint64_t v12 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v13, &v12))
  {
    uint64_t v11 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v13);
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v11);
    if (!ot::Ip6::Address::IsLinkLocal(Address))
    {
      char v4 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v11);
      if (!ot::Mle::Mle::IsRoutingLocator(this, v4))
      {
        uint64_t v5 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v11);
        if (!ot::Mle::Mle::IsAnycastLocator(this, v5))
        {
          uint64_t v9 = (const void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v11);
          MeshLocal64 = (const void *)ot::Mle::Mle::GetMeshLocal64(this);
          if (ot::Unequatable<ot::Ip6::Address>::operator!=(v9, MeshLocal64)) {
            return 1;
          }
        }
      }
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v13);
  }
  if (!ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
    unsigned int v7 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
    return ot::Ip6::Netif::HasAnyExternalMulticastAddress(v7);
  }
  return v14;
}

BOOL ot::Mle::Mle::IsRoutingLocator(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  BOOL v4 = 0;
  if (ot::Mle::Mle::IsMeshLocalAddress(this, a2))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    return ot::Ip6::InterfaceIdentifier::IsRoutingLocator(Iid);
  }
  return v4;
}

BOOL ot::Mle::Mle::IsAnycastLocator(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  BOOL v4 = 0;
  if (ot::Mle::Mle::IsMeshLocalAddress(this, a2))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(a2);
    return ot::Ip6::InterfaceIdentifier::IsAnycastLocator(Iid);
  }
  return v4;
}

BOOL ot::Ip6::Netif::HasAnyExternalMulticastAddress(ot::Ip6::Netif *this)
{
  v2[3] = this;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator((uint64_t)v2, (uint64_t)this, 0);
  return !ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::IsDone(v2);
}

{
  return ot::Ip6::Netif::HasAnyExternalMulticastAddress(this);
}

uint64_t ot::Mle::Mle::SetCslTimeout(uint64_t this, int a2)
{
  BOOL v4 = (ot::InstanceLocator *)this;
  if (*(_DWORD *)(this + 676) != a2)
  {
    *(_DWORD *)(this + 676) = a2;
    uint64_t v2 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>((ot::InstanceLocator *)this);
    ot::DataPollSender::RecalculatePollPeriod(v2);
    uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(v4);
    this = ot::Mac::Mac::IsCslEnabled(v3);
    if (this) {
      return ot::Mle::Mle::ScheduleChildUpdateRequest(v4);
    }
  }
  return this;
}

uint64_t ot::Mle::Mle::InitNeighbor(ot::Mle::Mle *this, ot::Neighbor *a2, ot::Ip6::MessageInfo **a3)
{
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a3[1]);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
  ot::Neighbor::GetExtAddress(a2);
  ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, v4);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(a2);
  ot::LinkQualityInfo::Clear(LinkInfo);
  uint64_t v11 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(a2);
  uint64_t ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(a3[1]);
  char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
  ot::LinkQualityInfo::AddRss(v11, Rss);
  unsigned int v8 = (ot::TimerMilli *)ot::Neighbor::ResetLinkFailures((uint64_t)a2);
  int Now = ot::TimerMilli::GetNow(v8);
  return ot::Neighbor::SetLastHeard((uint64_t)a2, Now);
}

void *ot::Mle::Mle::InitParentCandidate(ot::Mle::Mle *this, ot::Mac::ExtAddress *a2)
{
  return ot::Neighbor::SetExtAddress((void *)this + 52, a2);
}

uint64_t ot::Mle::Mle::HandleNotifierEvents(unsigned char *a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t result = ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1);
  if ((result & 1) == 0)
  {
    if (ot::Events::Contains(&v16, 4)
      && ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1)
      && !ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1)
      && a1[596] == 1)
    {
      a1[596] = 0;
      ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
    }
    if (ot::Events::ContainsAny((ot::Events *)&v16, 3))
    {
      BOOL v14 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
      Address = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 928));
      if (!ot::Ip6::Netif::HasUnicastAddress(v14, Address))
      {
        BOOL v4 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 928));
        Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v4);
        ot::Ip6::InterfaceIdentifier::GenerateRandom(Iid);
        uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
        ot::Ip6::Netif::AddUnicastAddress(v6, (ot::Ip6::Netif::UnicastAddress *)(a1 + 928));
        unsigned int v7 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>((ot::InstanceLocator *)a1);
        ot::Notifier::Signal(v7, 16);
      }
      if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1) && !ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1)) {
        ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
      }
    }
    if (ot::Events::ContainsAny((ot::Events *)&v16, 12288)
      && ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1)
      && !ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1))
    {
      if (!ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1)
        || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent((ot::Mle::Mle *)a1),
            !ot::Neighbor::IsThreadVersion1p1(Parent)))
      {
        ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
      }
    }
    if (ot::Events::Contains(&v16, 512))
    {
      if (ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1))
      {
        uint64_t v9 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
        ot::Mle::MleRouter::HandleNetworkDataUpdateRouter(v9);
      }
      else if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1) && !ot::Events::Contains(&v16, 4))
      {
        ot::Mle::Mle::ScheduleChildUpdateRequest((ot::Mle::Mle *)a1);
      }
      uint64_t v10 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>((ot::InstanceLocator *)a1);
      ot::BackboneRouter::Leader::Update(v10);
      ot::Mle::Mle::UpdateServiceAlocs((ot::Mle::Mle *)a1);
      uint64_t v11 = (ot::Dhcp6::Server *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Server>((ot::InstanceLocator *)a1);
      ot::Dhcp6::Server::UpdateService(v11);
      IgnoreError();
      uint64_t v12 = (ot::Dhcp6::Client *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Dhcp6::Client>((ot::InstanceLocator *)a1);
      ot::Dhcp6::Client::UpdateAddresses(v12);
    }
    if (ot::Events::ContainsAny((ot::Events *)&v16, 260)
      && (ot::Events::Contains(&v16, 256) || ot::Mle::Mle::IsAttached((ot::Mle::Mle *)a1)))
    {
      ot::Mle::Mle::Store((ot::Mle::Mle *)a1);
      IgnoreError();
    }
    uint64_t result = ot::Events::Contains(&v16, 0x100000);
    if (result)
    {
      uint64_t v13 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)a1);
      return ot::Mle::MleRouter::HandleSecurityPolicyChanged(v13);
    }
  }
  return result;
}

uint64_t ot::Mle::Mle::UpdateServiceAlocs(ot::Mle::Mle *this)
{
  uint64_t v16 = this;
  unsigned int v15 = 0;
  uint64_t result = ot::Mle::Mle::IsDisabled(this);
  if ((result & 1) == 0)
  {
    for (unsigned __int8 i = (ot::Mle::Mle *)((char *)this + 696);
          i != (ot::Mle::Mle *)((char *)this + 792);
          unsigned __int8 i = (ot::Mle::Mle::ServiceAloc *)((char *)i + 32))
    {
      char v13 = 0;
      if (ot::Mle::Mle::ServiceAloc::IsInUse(i))
      {
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v9 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
          if (ot::NetworkData::NetworkData::GetNextService(v9, &v15, Rloc16, (ot::NetworkData::ServiceConfig *)v17))break; {
          int v8 = v17[0];
          }
          unsigned __int16 Aloc16 = ot::Mle::Mle::ServiceAloc::GetAloc16(i);
          if (v8 == ot::Mle::ServiceIdFromAloc((ot::Mle *)Aloc16))
          {
            char v13 = 1;
            break;
          }
        }
        if ((v13 & 1) == 0)
        {
          BOOL v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
          ot::Ip6::Netif::RemoveUnicastAddress(v4, i);
          ot::Mle::Mle::ServiceAloc::MarkAsNotInUse(i);
        }
      }
    }
    unsigned int v15 = 0;
    while (1)
    {
      unsigned int v7 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      unsigned __int16 v5 = ot::Mle::Mle::GetRloc16(this);
      uint64_t result = ot::NetworkData::NetworkData::GetNextService(v7, &v15, v5, (ot::NetworkData::ServiceConfig *)v17);
      if (result) {
        break;
      }
      unsigned __int16 v12 = ot::Mle::ServiceAlocFromId((ot::Mle *)v17[0]);
      if (!ot::Mle::Mle::FindInServiceAlocs(this, v12))
      {
        uint64_t result = (uint64_t)ot::Mle::Mle::FindInServiceAlocs(this, 0xFFFEu);
        uint64_t v11 = (ot::Ip6::Netif::UnicastAddress *)result;
        if (!result) {
          return result;
        }
        ot::Mle::Mle::ServiceAloc::SetAloc16((ot::Mle::Mle::ServiceAloc *)result, v12);
        uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        ot::Ip6::Netif::AddUnicastAddress(v6, v11);
      }
    }
  }
  return result;
}

ot::Mle::Mle::ServiceAloc *ot::Mle::Mle::FindInServiceAlocs(ot::Mle::Mle *this, unsigned __int16 a2)
{
  uint64_t v5 = 0;
  BOOL v4 = (ot::Mle::Mle *)((char *)this + 696);
  uint64_t v3 = (ot::Mle::Mle *)((char *)this + 792);
  while (v4 != v3)
  {
    if (a2 == (unsigned __int16)ot::Mle::Mle::ServiceAloc::GetAloc16(v4)) {
      return v4;
    }
    BOOL v4 = (ot::Mle::Mle::ServiceAloc *)((char *)v4 + 32);
  }
  return (ot::Mle::Mle::ServiceAloc *)v5;
}

uint64_t ot::Mle::Mle::ServiceAloc::GetAloc16(ot::Mle::Mle::ServiceAloc *this)
{
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(this);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
  return (unsigned __int16)ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
}

{
  return ot::Mle::Mle::ServiceAloc::GetAloc16(this);
}

uint64_t ot::Mle::ServiceIdFromAloc(ot::Mle *this)
{
  return ((_BYTE)this - 16);
}

{
  return ot::Mle::ServiceIdFromAloc(this);
}

uint64_t ot::Mle::Mle::ServiceAloc::MarkAsNotInUse(ot::Mle::Mle::ServiceAloc *this)
{
  return ot::Mle::Mle::ServiceAloc::SetAloc16(this, 0xFFFEu);
}

{
  return ot::Mle::Mle::ServiceAloc::MarkAsNotInUse(this);
}

uint64_t ot::Mle::Mle::ServiceAloc::SetAloc16(ot::Mle::Mle::ServiceAloc *this, unsigned __int16 a2)
{
  Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(this);
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
  return ot::Ip6::InterfaceIdentifier::SetLocator(Iid, a2);
}

{
  return ot::Mle::Mle::ServiceAloc::SetAloc16(this, a2);
}

uint64_t ot::Mle::Mle::DetermineParentRequestType(uint64_t a1, unsigned char *a2, int *a3)
{
  unsigned int v5 = 0;
  if (*(unsigned char *)(a1 + 241) != 3) {
    __assert_rtn("DetermineParentRequestType", "mle.cpp", 2318, "mAttachState == kAttachStateParentRequest");
  }
  *a2 = 1;
  if (*(unsigned __int16 *)(a1 + 244) > 1u || *(unsigned char *)(a1 + 409) == 4)
  {
    if (*(unsigned __int8 *)(a1 + 242) > 2u) {
      return 23;
    }
    if (*(unsigned __int8 *)(a1 + 242) <= 1u) {
      *a2 = 0;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 242) > 2u) {
      return 23;
    }
    if (*(unsigned char *)(a1 + 409) != 1 && *(unsigned __int8 *)(a1 + 242) <= 1u) {
      *a2 = 0;
    }
  }
  if (a3)
  {
    if (*a2) {
      int v3 = 1250;
    }
    else {
      int v3 = 750;
    }
    *a3 = v3;
  }
  return v5;
}

uint64_t ot::Mle::Mle::HasAcceptableParentCandidate(ot::Mle::Mle *this)
{
  uint64_t v6 = this;
  char v5 = 0;
  char v4 = 0;
  if (!ot::Neighbor::IsStateParentResponse((ot::Mle::Mle *)((char *)this + 416))) {
    return v5 & 1;
  }
  int v2 = *((unsigned __int8 *)this + 241);
  if (v2 != 3)
  {
    if (v2 != 4 || ot::Mle::Mle::HasMoreChannelsToAnnounce(this)) {
      return v5 & 1;
    }
    goto LABEL_12;
  }
  if (ot::Mle::Mle::DetermineParentRequestType((uint64_t)this, &v4, 0)) {
    __assert_rtn("HasAcceptableParentCandidate", "mle.cpp", 2394, "false");
  }
  if (v4 || ot::Router::GetTwoWayLinkQuality((ot::Mle::Mle *)((char *)this + 416)) == 3)
  {
LABEL_12:
    if (!ot::Mle::Mle::IsChild(this) || (*((unsigned char *)this + 598) & 1) != 0 || *((unsigned char *)this + 409) == 2) {
      char v5 = 1;
    }
  }
  return v5 & 1;
}

BOOL ot::Neighbor::IsStateParentResponse(ot::Neighbor *this)
{
  return (*((unsigned char *)this + 30) & 0xF) == 3;
}

{
  return ot::Neighbor::IsStateParentResponse(this);
}

BOOL ot::Mle::Mle::HasMoreChannelsToAnnounce(ot::Mle::Mle *this)
{
  int v3 = this;
  unsigned __int8 v2 = 0;
  unsigned __int8 v2 = *((unsigned char *)this + 684);
  return ot::Mle::Mle::GetNextAnnounceChannel(this, &v2) == 0;
}

uint64_t ot::Mle::Mle::SendChildIdRequest(ot::Mle::Mle *this)
{
  uint64_t v20 = this;
  *(_DWORD *)&v19[1] = 0;
  v19[0] = 3;
  uint64_t v18 = 0;
  ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 80));
  uint64_t v16 = v1;
  ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 416));
  if (ot::Equatable<ot::Mac::ExtAddress>::operator==(v16, v2))
  {
    if (ot::Mle::Mle::IsChild(this))
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Already attached to candidate parent", v3, v4, v5, v6, v7, v8, v14);
      *(_DWORD *)&v19[1] = 24;
      goto LABEL_25;
    }
    ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 80), 0);
  }
  uint64_t v18 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xBu);
  if (v18)
  {
    *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendResponseTlv(v18, (ot::Mle::Mle *)((char *)this + 561));
    if (!*(_DWORD *)&v19[1])
    {
      *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v18);
      if (!*(_DWORD *)&v19[1])
      {
        *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v18);
        if (!*(_DWORD *)&v19[1])
        {
          *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendModeTlv(v18, *((unsigned char *)this + 240));
          if (!*(_DWORD *)&v19[1])
          {
            *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v18, *((_DWORD *)this + 168));
            if (!*(_DWORD *)&v19[1])
            {
              *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendVersionTlv(v18);
              if (!*(_DWORD *)&v19[1])
              {
                uint64_t v9 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
                unsigned __int16 CurrentInterval = ot::SupervisionListener::GetCurrentInterval(v9);
                *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v18, CurrentInterval);
                if (!*(_DWORD *)&v19[1])
                {
                  if (!ot::Mle::Mle::IsFullThreadDevice(this))
                  {
                    *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v18, *((unsigned char *)this + 596));
                    if (*(_DWORD *)&v19[1]) {
                      goto LABEL_25;
                    }
                    *(_DWORD *)uint64_t v19 = (v19[0] - 1);
                  }
                  *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(v18, ot::Mle::Mle::SendChildIdRequest(void)::kTlvs, v19[0]);
                  if (!*(_DWORD *)&v19[1])
                  {
                    *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v18);
                    if (!*(_DWORD *)&v19[1])
                    {
                      *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v18);
                      if (!*(_DWORD *)&v19[1])
                      {
                        ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 416), 7);
                        ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 416));
                        ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v17, v11);
                        *(_DWORD *)&v19[1] = ot::Mle::Mle::TxMessage::SendTo(v18, &v17);
                        if (!*(_DWORD *)&v19[1])
                        {
                          if (*((unsigned char *)this + 596) == 1) {
                            unsigned __int8 v12 = 3;
                          }
                          else {
                            unsigned __int8 v12 = 2;
                          }
                          ot::Mle::Mle::Log(0, v12, (ot::Ip6::Address *)&v17);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(_DWORD *)&v19[1] = 3;
  }
LABEL_25:
  if (*(_DWORD *)&v19[1] && v18) {
    ot::Message::Free(v18);
  }
  return *(unsigned int *)&v19[1];
}

void ot::Mle::Mle::ProcessAnnounce(ot::Mle::Mle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14 = *((unsigned char *)this + 685);
  __int16 v13 = *((_WORD *)this + 343);
  if (*((unsigned char *)this + 241) != 1) {
    __assert_rtn("ProcessAnnounce", "mle.cpp", 5220, "mAttachState == kAttachStateProcessAnnounce");
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Processing Announce - channel %d, panid 0x%02x", a3, a4, a5, a6, a7, a8, v14);
  ot::Mle::Mle::Stop(this, 0);
  uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  *((unsigned char *)this + 685) = ot::Mac::Mac::GetPanChannel(v8);
  uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  *((_WORD *)this + 34ot::Tlv::SetType(this, 3) = ot::Mac::Mac::GetPanId(v9);
  *((void *)this + 86) = 0;
  uint64_t v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetPanChannel(v10, v14);
  IgnoreError();
  uint64_t v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::SetPanId(v11, v13);
  ot::Mle::Mle::Start(this, 1);
  IgnoreError();
}

char *ot::Mle::Mle::AttachModeToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::AttachModeToString(ot::Mle::Mle::AttachMode)::kAttachModeStrings[a1];
}

uint64_t ot::Mle::Mle::ReattachStateToString(unsigned __int8 a1)
{
  return *((void *)&ot::Mle::Mle::ReattachStateToString(ot::Mle::Mle::ReattachState)::kReattachStateStrings + a1);
}

void ot::Mle::Mle::SendParentRequest(uint64_t a1, char a2)
{
  uint64_t v8 = a1;
  char v7 = a2;
  int appended = 0;
  uint64_t v5 = 0;
  unsigned __int8 v4 = 0;
  ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::Mle::Challenge *)(a1 + 400));
  if (v7)
  {
    if (v7 == 1)
    {
      unsigned __int8 v4 = -64;
      ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v3);
    }
  }
  else
  {
    unsigned __int8 v4 = 0x80;
    ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v3);
  }
  uint64_t v5 = ot::Mle::Mle::NewMleMessage(a1, 9u);
  if (v5)
  {
    int appended = ot::Mle::Mle::TxMessage::AppendModeTlv(v5, *(unsigned char *)(a1 + 240));
    if (!appended)
    {
      int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v5, (const ot::Mle::Mle::Challenge *)(a1 + 400));
      if (!appended)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendScanMaskTlv(v5, v4);
        if (!appended)
        {
          int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v5);
          if (!appended)
          {
            int appended = ot::Mle::Mle::TxMessage::SendTo(v5, &v3);
            if (!appended)
            {
              if (v7)
              {
                if (v7 == 1) {
                  ot::Mle::Mle::Log(0, 0xEu, (ot::Ip6::Address *)&v3);
                }
              }
              else
              {
                ot::Mle::Mle::Log(0, 0xDu, (ot::Ip6::Address *)&v3);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int appended = 3;
  }
  if (appended)
  {
    if (v5) {
      ot::Message::Free(v5);
    }
  }
}

uint64_t ot::Mle::Mle::PrepareAnnounceState(ot::Mle::Mle *this)
{
  uint64_t v8 = this;
  char v7 = 0;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v6);
  if (!ot::Mle::Mle::IsChild(this) && !*((unsigned char *)this + 243))
  {
    active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
    if (ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete(active) || !ot::Mle::Mle::IsFullThreadDevice(this))
    {
      unsigned __int8 v2 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
      if (ot::MeshCoP::DatasetManager::GetChannelMask(v2, (ot::Mac::ChannelMask *)&v6))
      {
        __n128 v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        int v6 = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v3);
      }
      *((_WORD *)this + 12ot::Tlv::SetType(this, 3) = 0x578
                             / (ot::Mac::ChannelMask::GetNumberOfChannels((ot::Mac::ChannelMask *)&v6)
                              + 1);
      if (*((unsigned __int16 *)this + 123) < 0x50u) {
        *((_WORD *)this + 12ot::Tlv::SetType(this, 3) = 80;
      }
      char v7 = 1;
    }
  }
  return v7 & 1;
}

uint64_t ot::Mle::Mle::GetNextAnnounceChannel(ot::Mle::Mle *this, unsigned __int8 *a2)
{
  uint64_t v8 = this;
  char v7 = a2;
  ot::Mac::ChannelMask::ChannelMask((ot::Mac::ChannelMask *)&v6);
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  if (ot::MeshCoP::DatasetManager::GetChannelMask(active, (ot::Mac::ChannelMask *)&v6))
  {
    __n128 v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
    int v6 = *(_DWORD *)ot::Mac::Mac::GetSupportedChannelMask(v3);
  }
  return ot::Mac::ChannelMask::GetNextChannel((ot::Mac::ChannelMask *)&v6, v7);
}

void ot::Mle::Mle::SendAnnounce(ot::Mle::Mle *a1, unsigned __int8 a2, char a3)
{
  char v7 = a1;
  unsigned __int8 v6 = a2;
  char v5 = a3;
  ot::Ip6::Address::SetToLinkLocalAllNodesMulticast((ot::Ip6::Address *)&v4);
  ot::Mle::Mle::SendAnnounce(a1, v6, &v4, v5);
}

uint64_t ot::Mle::Mle::Reattach(ot::Mle::Mle *this)
{
  unsigned int v32 = 0;
  if (*((unsigned char *)this + 243) == 2)
  {
    uint64_t v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
    if (ot::MeshCoP::DatasetManager::Restore(v1))
    {
      *((unsigned char *)this + 24ot::Tlv::SetType(this, 3) = 0;
    }
    else
    {
      unsigned __int8 v2 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      ot::MeshCoP::DatasetManager::ApplyConfiguration(v2);
      IgnoreError();
      *((unsigned char *)this + 24ot::Tlv::SetType(this, 3) = 3;
      ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 2u);
      unsigned int v32 = ot::Random::NonCrypto::GetUint32InRange(0, 0x32u) + 1;
    }
  }
  else if (*((unsigned char *)this + 243) == 3)
  {
    *((unsigned char *)this + 24ot::Tlv::SetType(this, 3) = 0;
    active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
    ot::MeshCoP::DatasetManager::Restore(active);
    IgnoreError();
  }
  if (!*((unsigned char *)this + 243))
  {
    if (*((unsigned char *)this + 409))
    {
      uint64_t v5 = *((unsigned __int8 *)this + 409);
      char v4 = 1;
    }
    else
    {
      uint64_t v5 = *((unsigned __int8 *)this + 409);
      char v4 = 0;
    }
    if ((v4 & 1) == 0)
    {
      switch(v5)
      {
        case 0:
        case 4:
          if (ot::Mle::Mle::IsChild(this))
          {
            if (!ot::Mle::Mle::IsRxOnWhenIdle(this))
            {
              uint64_t v21 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
              ot::DataPollSender::SetAttachMode(v21, 0);
              int v22 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
              ot::MeshForwarder::SetRxOnWhenIdle(v22, 0, v23, v24, v25, v26, v27, v28);
            }
          }
          else if (*((unsigned __int16 *)this + 343) == 0xFFFF)
          {
            if (!ot::Mle::Mle::IsFullThreadDevice(this)
              || (uint64_t v20 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this),
                  ot::Mle::MleRouter::BecomeLeader(v20, 0)))
            {
              ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Device becomes detached - fail to become a leader", v14, v15, v16, v17, v18, v19, v30);
              ot::Mle::Mle::BecomeDetached(this);
              IgnoreError();
            }
          }
          else
          {
            unsigned __int8 v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            ot::Mac::Mac::SetPanChannel(v6, *((unsigned char *)this + 685));
            IgnoreError();
            char v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            ot::Mac::Mac::SetPanId(v7, *((_WORD *)this + 343));
            *((_WORD *)this + 34ot::Tlv::SetType(this, 3) = -1;
            ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Device becomes detached - different PAN ID", v8, v9, v10, v11, v12, v13, v30);
            ot::Mle::Mle::BecomeDetached(this);
            IgnoreError();
          }
          break;
        case 1:
        case 3:
          ot::Mle::Mle::Attach((uint64_t)this, 0);
          break;
        case 2:
          return v32;
        default:
          JUMPOUT(0);
      }
    }
  }
  return v32;
}

void ot::Mle::Mle::DelayedResponseMetadata::ReadFrom(ot::Mle::Mle::DelayedResponseMetadata *this, const ot::Message *a2)
{
  unsigned __int16 Length = ot::Message::GetLength(a2);
  if (Length < 0x14uLL) {
    __assert_rtn("ReadFrom", "mle.cpp", 6156, "length >= sizeof(*this)");
  }
  ot::Message::Read<ot::Mle::Mle::DelayedResponseMetadata>(a2, Length - 20, (char *)this);
  IgnoreError();
}

void ot::Mle::Mle::SendDelayedResponse(ot::InstanceLocator *a1, ot::Message *a2, ot::Mle::Mle::DelayedResponseMetadata *a3)
{
  ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom(a3, a2);
  if (ot::Message::GetSubType(a2) != 11
    || (int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(a2)) == 0
    && (int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(a2)) == 0)
  {
    int appended = ot::Mle::Mle::TxMessage::SendTo(a2, (__n128 *)a3);
    if (!appended)
    {
      ot::Mle::Mle::Log(0, 0xBu, a3);
      if (!ot::Mle::Mle::IsRxOnWhenIdle(a1))
      {
        __n128 v3 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(a1);
        ot::DataPollSender::SendFastPolls(v3, 8u);
      }
    }
  }
  if (appended) {
    ot::Message::Free(a2);
  }
}

uint64_t ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom(ot::Mle::Mle::DelayedResponseMetadata *this, ot::Message *a2)
{
  __int16 Length = ot::Message::GetLength(a2);
  uint64_t result = ot::Message::SetLength(a2, Length - 20);
  if (result) {
    __assert_rtn("RemoveFrom", "mle.cpp", 6162, "false");
  }
  return result;
}

uint64_t ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v5 = 0;
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  int Timestamp = (void *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
  if (Timestamp) {
    return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(this, Timestamp);
  }
  return v5;
}

uint64_t ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v5 = 0;
  uint64_t v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  int Timestamp = (ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v1);
  if (Timestamp && ot::MeshCoP::Timestamp::GetSeconds(Timestamp)) {
    return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(this, Timestamp);
  }
  return v5;
}

uint64_t ot::Mle::Mle::TxMessage::SendTo(ot::Mle::Mle::TxMessage *this, __n128 *a2)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  unsigned int v17 = 0;
  unsigned __int16 v16 = 0;
  char v15 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v14);
  ot::Ip6::MessageInfo::SetPeerAddr(v14, v18);
  uint64_t v2 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  Address = (__n128 *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(v2 + 896));
  ot::Ip6::MessageInfo::SetSockAddr(v14, Address);
  ot::Ip6::MessageInfo::SetPeerPort((uint64_t)v14, 19788);
  ot::Ip6::MessageInfo::SetHopLimit((uint64_t)v14, 255);
  ot::Message::Read<unsigned char>(this, v16, &v15);
  IgnoreError();
  ++v16;
  if (v15) {
    goto LABEL_4;
  }
  ot::Message::Read<ot::Mle::Mle::SecurityHeader>(this, v16, v13);
  IgnoreError();
  char v4 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  unsigned int MleFrameCounter = ot::KeyManager::GetMleFrameCounter(v4);
  ot::Mle::Mle::SecurityHeader::SetFrameCounter((ot::Mle::Mle::SecurityHeader *)v13, MleFrameCounter);
  unsigned __int8 v6 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  CurrentKeychar Sequence = ot::KeyManager::GetCurrentKeySequence(v6);
  ot::Mle::Mle::SecurityHeader::SetKeyId((ot::Mle::Mle::SecurityHeader *)v13, CurrentKeySequence);
  ot::Message::Write<ot::Mle::Mle::SecurityHeader>(this, v16, v13);
  v16 += 10;
  uint64_t v8 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  unsigned int v17 = ot::Mle::Mle::ProcessMessageSecurity(v8, 0, this, (ot::Ip6::MessageInfo *)v14, v16, (ot::Mle::Mle::SecurityHeader *)v13);
  if (!v17)
  {
    uint64_t v9 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
    ot::KeyManager::IncrementMleFrameCounter(v9);
LABEL_4:
    uint64_t v10 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    return ot::Ip6::Udp::Socket::SendTo((ot::Ip6::Udp::Socket *)(v10 + 600), this, (const ot::Ip6::MessageInfo *)v14);
  }
  return v17;
}

void ot::Mle::Mle::Log(char a1, unsigned __int8 a2, ot::Ip6::Address *a3)
{
}

BOOL ot::Mle::Mle::RemoveDelayedDataResponseMessage(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::RemoveDelayedMessage((uint64_t)this, 9, 8u, 0);
}

BOOL ot::Mle::Mle::RemoveDelayedMessage(uint64_t a1, char a2, unsigned __int8 a3, const void *a4)
{
  uint64_t v18 = a1;
  char v17 = a2;
  unsigned __int8 v16 = a3;
  char v15 = a4;
  uint64_t v14 = (ot::MessageQueue *)(a1 + 392);
  v13[0] = ot::MessageQueue::begin((ot::MessageQueue *)(a1 + 392));
  v13[1] = v4;
  v12[0] = ot::MessageQueue::end(v14);
  v12[1] = v5;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator!=(v13, v12);
    if (!result) {
      break;
    }
    uint64_t v11 = (ot::Message *)ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator*((uint64_t)v13);
    ot::Mle::Mle::DelayedResponseMetadata::ReadFrom((ot::Mle::Mle::DelayedResponseMetadata *)v10, v11);
    Subint Type = ot::Message::GetSubType(v11);
    if (v17 == SubType && (!v15 || ot::Equatable<ot::Ip6::Address>::operator==(v10, v15)))
    {
      ot::MessageQueue::DequeueAndFree((ot::MessageQueue *)(a1 + 392), v11);
      ot::Mle::Mle::Log(3, v16, (ot::Ip6::Address *)v10);
    }
    ot::ItemPtrIterator<ot::Message,ot::Message::Iterator>::operator++((ot::Message::Iterator *)v13, v8);
  }
  return result;
}

BOOL ot::Mle::Mle::RemoveDelayedDataRequestMessage(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  return ot::Mle::Mle::RemoveDelayedMessage((uint64_t)this, 11, 7u, a2);
}

void ot::Mle::Mle::Challenge::GenerateRandom(ot::Mle::Mle::Challenge *this)
{
  *((unsigned char *)this + 8) = 8;
  ot::Random::Crypto::FillBuffer(this, (unsigned __int8 *)*((unsigned __int8 *)this + 8));
  IgnoreError();
}

ot::Buffer *ot::Mle::Mle::NewMleMessage(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v14 = a1;
  unsigned __int8 v13 = a2;
  int v12 = 0;
  uint64_t v11 = 0;
  ot::Message::Settings::Settings(v10, 0, 3);
  char v9 = 0;
  char v8 = 0;
  uint64_t v11 = ot::Ip6::Udp::Socket::NewMessage((ot::Ip6::Udp::Socket *)(a1 + 600), 0, (const ot::Message::Settings *)v10);
  if (v11)
  {
    char v8 = 0;
    char v9 = 6;
    if (v13 <= 7u)
    {
      uint64_t v3 = v13 - 7;
      char v2 = 0;
    }
    else
    {
      uint64_t v3 = v13 - 7;
      char v2 = 1;
    }
    if ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 0:
          char v9 = 11;
          break;
        case 1:
          char v9 = 9;
          break;
        case 2:
        case 3:
        case 5:
        case 7:
          break;
        case 4:
          char v9 = 10;
          break;
        case 6:
          char v9 = 8;
          break;
        case 8:
          char v9 = 1;
          break;
        case 9:
          char v9 = 2;
          char v8 = -1;
          break;
        case 10:
          char v9 = 3;
          char v8 = -1;
          break;
        default:
          JUMPOUT(0);
      }
    }
    ot::Message::SetSubType(v11, v9);
    int v12 = ot::Message::Append<unsigned char>(v11, &v8);
    if (!v12)
    {
      if (v8
        || (ot::Mle::Mle::SecurityHeader::InitSecurityControl(v7),
            (int v12 = ot::Message::Append<ot::Mle::Mle::SecurityHeader>(v11, v7)) == 0))
      {
        unsigned __int8 v6 = v13;
        int v12 = ot::Message::Append<unsigned char>(v11, (char *)&v6);
      }
    }
  }
  else
  {
    int v12 = 3;
  }
  if (v12 && v11)
  {
    ot::Message::Free(v11);
    return 0;
  }
  return v11;
}

uint64_t ot::Mle::Mle::TxMessage::AppendModeTlv(ot::Tlv *a1, char a2)
{
  char v5 = a2;
  unsigned __int8 v2 = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v5);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(a1, v2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendChallengeTlv(ot::Mle::Mle::TxMessage *this, const ot::Mle::Mle::Challenge *a2)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)3>>(this, a2, *((unsigned char *)a2 + 8));
}

uint64_t ot::Mle::Mle::TxMessage::AppendScanMaskTlv(ot::Mle::Mle::TxMessage *this, unsigned __int8 a2)
{
  return ot::Tlv::Append<ot::Mle::ScanMaskTlv>(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendVersionTlv(ot::Mle::Mle::TxMessage *this)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(this, 4u);
}

void ot::Mle::Mle::RequestShorterChildIdRequest(ot::Mle::Mle *this)
{
  if (*((unsigned char *)this + 241) == 5)
  {
    *((unsigned char *)this + 596) = 1;
    ot::Mle::Mle::SendChildIdRequest(this);
    IgnoreError();
  }
}

void ot::Mle::Mle::HandleChildIdRequestTxDone(ot::Mle::Mle *this, ot::Message *a2)
{
  if ((ot::Message::GetTxSuccess(a2) & 1) != 0 && !ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
    unsigned __int8 v2 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
    ot::DataPollSender::SetAttachMode(v2, 1);
    uint64_t v3 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    ot::MeshForwarder::SetRxOnWhenIdle(v3, 0, v4, v5, v6, v7, v8, v9);
  }
  if (ot::Message::IsLinkSecurityEnabled(a2))
  {
    ot::Mle::Mle::RequestShorterChildIdRequest(this);
  }
}

uint64_t ot::Mle::Mle::TxMessage::AppendResponseTlv(ot::Mle::Mle::TxMessage *this, const ot::Mle::Mle::Challenge *a2)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)4>>(this, a2, *((unsigned char *)a2 + 8));
}

uint64_t ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  Maximumint MacFrameCounter = ot::KeyManager::GetMaximumMacFrameCounter(v1);
  ot::Message::GetSubType(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Mle::TxMessage::AppendLinkFrameCounterTlv frameCounterTlv=%u, mleMsgSubType=%d", v2, v3, v4, v5, v6, v7, MaximumMacFrameCounter);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(this, MaximumMacFrameCounter);
}

uint64_t ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  char MleFrameCounter = ot::KeyManager::GetMleFrameCounter(v1);
  ot::Message::GetSubType(this);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Mle::TxMessage::AppendMleFrameCounterTlv mleFrameCounterTlv:%u mleMsgSubType=%d", v2, v3, v4, v5, v6, v7, MleFrameCounter);
  uint64_t v8 = (ot::KeyManager *)ot::GetProvider<ot::Message>::Get<ot::KeyManager>(this);
  unsigned int v9 = ot::KeyManager::GetMleFrameCounter(v8);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(this, v9);
}

uint64_t ot::Mle::Mle::TxMessage::AppendTimeoutTlv(ot::Mle::Mle::TxMessage *this, unsigned int a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(ot::Mle::Mle::TxMessage *this, unsigned __int16 a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Message *a1, char a2)
{
  uint64_t v57 = a1;
  char v56 = a2;
  unsigned int appended = 0;
  char v51 = 0;
  unsigned __int16 Length = ot::Message::GetLength(a1);
  ot::Mle::Tlv::SetType(v54, 19);
  unsigned int appended = ot::Message::Append<ot::Mle::Tlv>(a1, v54);
  if (!appended)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
    MeshLocal64 = (const ot::Ip6::Address *)ot::Mle::Mle::GetMeshLocal64(v2);
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(a1, 0, MeshLocal64);
    if (!appended && v56 != 1)
    {
      ++v51;
      uint64_t v40 = (ot::Ip6::Netif *)ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(a1);
      uint64_t v4 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
      DomainUnicastAddress = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(v4);
      if (ot::Ip6::Netif::HasUnicastAddress(v40, DomainUnicastAddress))
      {
        uint64_t v39 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a1);
        uint64_t v6 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
        uint64_t v7 = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(v6);
        if (!ot::NetworkData::LeaderBase::GetContext(v39, v7, (ot::Ip6::Prefix *)v52))
        {
          unsigned __int8 v38 = v53;
          uint64_t v8 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
          unsigned int v9 = (const ot::Ip6::Address *)ot::DuaManager::GetDomainUnicastAddress(v8);
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(a1, v38, v9);
          if (appended) {
            goto LABEL_31;
          }
          ++v51;
        }
      }
      uint64_t v10 = (ot::Ip6::Netif *)ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(a1);
      ot::Ip6::Netif::GetUnicastAddresses(v10);
      v49[1] = v11;
      v49[0] = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v11);
      uint64_t v48 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
      while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v49, &v48))
      {
        uint64_t v47 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v49);
        Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
        if (!ot::Ip6::Address::IsLinkLocal(Address))
        {
          uint64_t v37 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
          uint64_t v13 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
          if (!ot::Mle::Mle::IsRoutingLocator(v37, v13))
          {
            uint64_t v36 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
            uint64_t v14 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
            if (!ot::Mle::Mle::IsAnycastLocator(v36, v14))
            {
              unsigned int v35 = (const void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
              uint64_t v15 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
              char v16 = (const void *)ot::Mle::Mle::GetMeshLocal64(v15);
              if (!ot::Equatable<ot::Ip6::Address>::operator==(v35, v16))
              {
                uint64_t v34 = (const void *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
                char v17 = (ot::DuaManager *)ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
                uint64_t v18 = (const void *)ot::DuaManager::GetDomainUnicastAddress(v17);
                if (!ot::Equatable<ot::Ip6::Address>::operator==(v34, v18))
                {
                  uint64_t v33 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a1);
                  uint64_t v19 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
                  if (ot::NetworkData::LeaderBase::GetContext(v33, v19, (ot::Ip6::Prefix *)v52))
                  {
                    uint64_t v21 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
                    unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressEntry(a1, v21);
                    if (appended) {
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    unsigned __int8 v32 = v53;
                    uint64_t v20 = (const ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v47);
                    unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(a1, v32, v20);
                    if (appended) {
                      goto LABEL_31;
                    }
                  }
                  if (++v51 >= 0x10u) {
                    goto LABEL_31;
                  }
                }
              }
            }
          }
        }
        ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v49);
      }
      int v22 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
      if (!ot::Mle::Mle::IsRxOnWhenIdle(v22)
        || (uint64_t v23 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1),
            Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v23),
            !ot::Neighbor::IsThreadVersion1p1(Parent)))
      {
        uint64_t v25 = ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(a1);
        v45[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v25, 0);
        v45[1] = v26;
        BOOL v46 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v45;
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin((ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v45, (uint64_t)v44);
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v46, v43);
        while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(v44, v43))
        {
          uint64_t v42 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v44);
          uint64_t v27 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1);
          if (!ot::Mle::Mle::IsRxOnWhenIdle(v27)
            || (uint64_t v28 = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(v42),
                ot::Ip6::Address::IsMulticastLargerThanRealmLocal(v28)))
          {
            unsigned int v29 = (const ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(v42);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressEntry(a1, v29);
            if (appended) {
              break;
            }
            if (++v51 >= 0x10u) {
              break;
            }
          }
          ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v44);
        }
      }
    }
  }
LABEL_31:
  if (!appended)
  {
    char v30 = ot::Message::GetLength(a1);
    ot::Tlv::SetLength((uint64_t)v54, v30 - Length - 2);
    ot::Message::Write<ot::Mle::Tlv>(a1, Length, v54);
  }
  return appended;
}

uint64_t ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(ot::Mle::Mle::TxMessage *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)13>>(this, a2, a3);
}

uint64_t ot::Mle::Mle::SendDataRequest(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  return ot::Mle::Mle::SendDataRequestAfterDelay(this, a2, 0);
}

uint64_t ot::Mle::Mle::SendDataRequestAfterDelay(ot::Mle::Mle *this, const ot::Ip6::Address *a2, unsigned __int16 a3)
{
  if ((*((unsigned char *)this + 72) & 2) != 0) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 1;
  }
  return ot::Mle::Mle::SendDataRequest(this, a2, ot::Mle::Mle::SendDataRequestAfterDelay(ot::Ip6::Address const&,unsigned short)::kTlvs, v3, a3, 0);
}

uint64_t ot::Mle::Mle::SendDataRequest(ot::Mle::Mle *a1, const ot::Ip6::Address *a2, unsigned __int8 *a3, unsigned __int8 a4, unsigned __int16 a5, uint64_t a6)
{
  ot::Mle::Mle::RemoveDelayedDataRequestMessage(a1, a2);
  uint64_t v10 = ot::Mle::Mle::NewMleMessage((uint64_t)a1, 7u);
  if (v10)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(v10, a3, a4);
    if (!appended)
    {
      if (!a6
        || (uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(a1),
            (unsigned int appended = ot::LinkMetrics::Initiator::AppendLinkMetricsQueryTlv(v6, v10, a6)) == 0))
      {
        if (a5)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v10, a2, a5);
          if (!appended) {
            ot::Mle::Mle::Log(2, 7u, a2);
          }
        }
        else
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v10);
          if (!appended)
          {
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v10);
            if (!appended)
            {
              unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v10, (__n128 *)a2);
              if (!appended)
              {
                ot::Mle::Mle::Log(0, 7u, a2);
                if (!ot::Mle::Mle::IsRxOnWhenIdle(a1))
                {
                  uint64_t v7 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(a1);
                  ot::DataPollSender::SendFastPolls(v7, 8u);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v10) {
    ot::Message::Free(v10);
  }
  if (ot::Mle::Mle::IsChild(a1) && !ot::Mle::Mle::IsRxOnWhenIdle(a1))
  {
    *((unsigned char *)a1 + 595) = 1;
    if (!*((unsigned char *)a1 + 593)) {
      ot::Mle::Mle::ScheduleMessageTransmissionTimer(a1);
    }
  }
  return appended;
}

uint64_t ot::Mle::Mle::SendDataRequestForLinkMetricsReport(ot::Mle::Mle *a1, const ot::Ip6::Address *a2, uint64_t a3)
{
  return ot::Mle::Mle::SendDataRequest(a1, a2, ot::Mle::Mle::SendDataRequestForLinkMetricsReport(ot::Ip6::Address const&,ot::LinkMetrics::Initiator::QueryInfo const&)::kTlvs, 1u, 0, a3);
}

uint64_t ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Mle::Mle::TxMessage *this, const ot::Ip6::Address *a2, unsigned __int16 a3)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  unsigned __int16 v12 = a3;
  unsigned int v11 = 0;
  int Now = ot::TimerMilli::GetNow(this);
  int v8 = ot::Time::operator+(&Now, v12);
  int v10 = v8;
  long long v9 = *(_OWORD *)v13;
  unsigned int v11 = ot::Mle::Mle::DelayedResponseMetadata::AppendTo((ot::Mle::Mle::DelayedResponseMetadata *)&v9, this);
  if (!v11)
  {
    uint64_t v3 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    ot::MessageQueue::Enqueue((ot::MessageQueue *)(v3 + 392), this);
    uint64_t v4 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    ot::TimerMilli::FireAtIfEarlier((int *)(v4 + 272), v10);
  }
  return v11;
}

BOOL ot::Notifier::IsPending(ot::Notifier *this)
{
  return !ot::Events::IsEmpty(this);
}

{
  return ot::Notifier::IsPending(this);
}

uint64_t ot::Mle::Mle::SendChildUpdateRequest(uint64_t a1, char a2)
{
  uint64_t v39 = a1;
  char v38 = a2;
  unsigned int appended = 0;
  unsigned int v35 = 0;
  char v34 = 0;
  if (ot::Neighbor::IsStateValidOrRestoring((ot::Neighbor *)(a1 + 80)))
  {
    *(unsigned char *)(a1 + 59ot::Tlv::SetType(this, 3) = 2;
    ot::Mle::Mle::ScheduleMessageTransmissionTimer((ot::Mle::Mle *)a1);
    unsigned int v35 = ot::Mle::Mle::NewMleMessage(a1, 0xDu);
    if (v35)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendModeTlv(v35, *(unsigned char *)(a1 + 240));
      if (!appended)
      {
        if (v38 != 1 && !ot::Mle::Mle::IsDetached((ot::Mle::Mle *)a1)
          || (ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::Mle::Challenge *)(a1 + 400)),
              (unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v35, (const ot::Mle::Mle::Challenge *)(a1 + 400))) == 0))
        {
          if (*(unsigned char *)(a1 + 73))
          {
            uint64_t v9 = *(unsigned __int8 *)(a1 + 73);
            char v8 = 1;
          }
          else
          {
            uint64_t v9 = *(unsigned __int8 *)(a1 + 73);
            char v8 = 0;
          }
          if ((v8 & 1) == 0)
          {
            switch(v9)
            {
              case 0:
              case 3:
              case 4:
                __assert_rtn("SendChildUpdateRequest", "mle.cpp", 3200, "false");
              case 1:
                char v34 = 1;
                break;
              case 2:
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v35);
                if (!appended)
                {
                  unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v35);
                  if (!appended)
                  {
                    unsigned int v10 = v38 == 2
                        ? ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v35, 0)
                        : ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v35, *(_DWORD *)(a1 + 672));
                    unsigned int appended = v10;
                    if (!v10)
                    {
                      unsigned int v11 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>((ot::InstanceLocator *)a1);
                      unsigned __int16 CurrentInterval = ot::SupervisionListener::GetCurrentInterval(v11);
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v35, CurrentInterval);
                      if (!appended)
                      {
                        uint64_t v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                        if (!ot::Mac::Mac::IsCslEnabled(v13)) {
                          break;
                        }
                        unsigned int appended = ot::Mle::Mle::TxMessage::AppendCslChannelTlv(v35);
                        if (!appended)
                        {
                          unsigned int appended = ot::Mle::Mle::TxMessage::AppendCslTimeoutTlv(v35);
                          if (!appended) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_33;
              default:
                JUMPOUT(0);
            }
          }
          if (ot::Mle::Mle::IsFullThreadDevice((ot::Mle::Mle *)a1)
            || (unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v35, v34)) == 0)
          {
            ot::Neighbor::GetExtAddress((ot::Neighbor *)(a1 + 80));
            ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v36, v14);
            unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v35, &v36);
            if (!appended)
            {
              ot::Mle::Mle::Log(0, 5u, (ot::Ip6::Address *)&v36);
              if (ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1))
              {
                uint64_t v24 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
                ot::MeshForwarder::SetRxOnWhenIdle(v24, 1, v25, v26, v27, v28, v29, v30);
              }
              else
              {
                uint64_t v15 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
                ot::MeshForwarder::SetRxOnWhenIdle(v15, 0, v16, v17, v18, v19, v20, v21);
                unsigned __int8 v32 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>((ot::InstanceLocator *)a1);
                int v22 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                BOOL IsCslEnabled = ot::Mac::Mac::IsCslEnabled(v22);
                ot::DataPollSender::SetAttachMode(v32, !IsCslEnabled);
              }
            }
          }
        }
      }
    }
    else
    {
      unsigned int appended = 3;
    }
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "No valid parent when sending Child Update Request requestMode=%d", v2, v3, v4, v5, v6, v7, v38);
    ot::Mle::Mle::BecomeDetached((ot::Mle::Mle *)a1);
    IgnoreError();
  }
LABEL_33:
  if (appended && v35) {
    ot::Message::Free(v35);
  }
  return appended;
}

uint64_t ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v1);
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(this, Rloc16);
}

uint64_t ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v11 = this;
  uint64_t v7 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  uint64_t v1 = ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(this);
  char Version = ot::NetworkData::LeaderBase::GetVersion(v1, 0);
  ot::Mle::LeaderData::SetDataVersion(v7 + 64, Version);
  uint64_t v8 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  uint64_t v3 = ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(this);
  char v4 = ot::NetworkData::LeaderBase::GetVersion(v3, 1);
  ot::Mle::LeaderData::SetStableDataVersion(v8 + 64, v4);
  ot::Mle::LeaderDataTlv::Init((ot::Mle::LeaderDataTlv *)v10);
  uint64_t v5 = ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  ot::Mle::LeaderDataTlv::Set((ot::Mle::LeaderDataTlv *)v10, (const ot::Mle::LeaderData *)(v5 + 64));
  return ot::Tlv::AppendTo((ot::Tlv *)v10, this);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCslChannelTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v6 = this;
  ot::Mle::CslChannelTlv::Init((ot::Mle::CslChannelTlv *)v5);
  ot::Mle::CslChannelTlv::SetChannelPage((uint64_t)v5, 0);
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::Message>::Get<ot::Mac::Mac>(this);
  unsigned __int8 CslChannel = ot::Mac::Mac::GetCslChannel(v1);
  ot::Mle::CslChannelTlv::SetChannel((ot::Mle::CslChannelTlv *)v5, CslChannel);
  return ot::Message::Append<ot::Mle::CslChannelTlv>(this, v5);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCslTimeoutTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
  Cslunsigned int Timeout = ot::Mle::Mle::GetCslTimeout(v1);
  if (!CslTimeout)
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(this);
    Cslunsigned int Timeout = ot::Mle::Mle::GetTimeout(v2);
  }
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(this, CslTimeout);
}

uint64_t ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle *this, const ot::Mle::Mle::TlvList *a2, const ot::Mle::Mle::Challenge *a3)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  unsigned int appended = 0;
  char v13 = 0;
  uint64_t v14 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xEu);
  if (v14)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v14);
    if (!appended)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v14);
      if (!appended)
      {
        ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
        unsigned __int16 v12 = v3;
        uint64_t v11 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)v18);
        while (v12 != (unsigned __int8 *)v11)
        {
          int v9 = *v12;
          switch(v9)
          {
            case 2:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v14, *((_DWORD *)this + 168));
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 4:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendResponseTlv(v14, v17);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 5:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v14);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 8:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v14);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 17:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendStatusTlv(v14, 1u);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 19:
              if (!ot::Mle::Mle::IsFullThreadDevice(this))
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v14, 1);
                if (appended) {
                  goto LABEL_39;
                }
                char v13 = 1;
              }
              break;
            case 27:
              char v4 = (ot::SupervisionListener *)ot::GetProvider<ot::InstanceLocator>::Get<ot::SupervisionListener>(this);
              unsigned __int16 CurrentInterval = ot::SupervisionListener::GetCurrentInterval(v4);
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v14, CurrentInterval);
              if (appended) {
                goto LABEL_39;
              }
              break;
            case 85:
              uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              if (ot::Mac::Mac::IsCslEnabled(v6))
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendCslTimeoutTlv(v14);
                if (appended) {
                  goto LABEL_39;
                }
              }
              break;
          }
          ++v12;
        }
        ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)this + 80));
        ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v15, v7);
        unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v14, &v15);
        if (!appended)
        {
          ot::Mle::Mle::Log(0, 6u, (ot::Ip6::Address *)&v15);
          if ((v13 & 1) != 0 && ot::Mle::Mle::HasUnregisteredAddress(this))
          {
            ot::Mle::Mle::SendChildUpdateRequest(this);
            IgnoreError();
          }
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
LABEL_39:
  if (appended && v14) {
    ot::Message::Free(v14);
  }
  return appended;
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::end(uint64_t a1)
{
  return a1 + *(unsigned __int8 *)(a1 + 32);
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::end(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendStatusTlv(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::Append<ot::Mle::StatusTlv>(a1, a2);
}

void ot::Mle::Mle::SendAnnounce(ot::Mle::Mle *a1, unsigned __int8 a2, __n128 *a3, char a4)
{
  uint64_t v24 = a1;
  unsigned __int8 v23 = a2;
  int v22 = a3;
  char v21 = a4;
  int appended = 0;
  uint64_t v17 = 0;
  if (ot::Mle::Mle::IsRouterOrLeader(a1) && !ot::Mle::Mle::IsRxOnWhenIdle(a1))
  {
    int appended = 13;
    goto LABEL_17;
  }
  char v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  Supportedint ChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v4);
  if (!ot::Mac::ChannelMask::ContainsChannel(SupportedChannelMask, v23))
  {
    int appended = 7;
    goto LABEL_17;
  }
  uint64_t v17 = ot::Mle::Mle::NewMleMessage((uint64_t)a1, 0xFu);
  if (!v17)
  {
    int appended = 3;
    goto LABEL_17;
  }
  ot::Message::SetLinkSecurityEnabled(v17, 1);
  ot::Message::SetChannel(v17, v23);
  ot::Mle::ChannelTlv::Init((ot::Mle::ChannelTlv *)v19);
  ot::Mle::ChannelTlv::SetChannelPage((uint64_t)v19, 0);
  uint64_t v6 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
  unsigned __int8 PanChannel = ot::Mac::Mac::GetPanChannel(v6);
  ot::Mle::ChannelTlv::SetChannel((ot::Mle::ChannelTlv *)v19, PanChannel);
  int appended = ot::Tlv::AppendTo((ot::Tlv *)v19, v17);
  if (!appended)
  {
    if (v21)
    {
      if (v21 == 1)
      {
        ot::Clearable<ot::MeshCoP::Timestamp>::Clear(&v18);
        ot::MeshCoP::Timestamp::SetAuthoritative((ot::MeshCoP::Timestamp *)&v18, 1);
        int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(v17, &v18);
        if (appended) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v17);
      if (appended) {
        goto LABEL_17;
      }
    }
    uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
    unsigned __int16 PanId = ot::Mac::Mac::GetPanId(v8);
    int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(v17, PanId);
    if (!appended)
    {
      int appended = ot::Mle::Mle::TxMessage::SendTo(v17, v22);
      if (!appended) {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Send Announce on channel %d", v10, v11, v12, v13, v14, v15, v23);
      }
    }
  }
LABEL_17:
  if (appended)
  {
    if (v17) {
      ot::Message::Free(v17);
    }
  }
}

uint64_t ot::Message::SetChannel(ot::Message *this, char a2)
{
  uint64_t result = ot::Buffer::GetMetadata(this);
  *(unsigned char *)(result + 5--*(unsigned char *)(this + 4) = a2;
  return result;
}

{
  return ot::Message::SetChannel(this, a2);
}

uint64_t ot::Mle::ChannelTlv::Init(ot::Mle::ChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return ot::Mle::ChannelTlv::Init(this);
}

uint64_t ot::Mle::ChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::Mle::ChannelTlv::SetChannelPage(this, a2);
}

uint64_t ot::Mle::ChannelTlv::SetChannel(ot::Mle::ChannelTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + ot::Tlv::SetType(this, 3) = result;
  return result;
}

{
  return ot::Mle::ChannelTlv::SetChannel(this, a2);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x16, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x15u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(a1, a2);
}

uint64_t ot::Mle::Mle::SendLinkMetricsManagementResponse(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  char v9 = a3;
  unsigned int v8 = 0;
  uint64_t v7 = ot::Mle::Mle::NewMleMessage(a1, 0x13u);
  if (v7)
  {
    ot::Mle::Tlv::SetType(v6, 88);
    ot::Tlv::SetType(v5, 5);
    ot::Tlv::SetLength((uint64_t)v5, 1);
    char Size = ot::Tlv::GetSize((ot::Tlv *)v5);
    ot::Tlv::SetLength((uint64_t)v6, Size);
    unsigned int v8 = ot::Message::Append<ot::Mle::Tlv>(v7, v6);
    if (!v8)
    {
      unsigned int v8 = ot::Message::Append<ot::Tlv>(v7, v5);
      if (!v8)
      {
        unsigned int v8 = ot::Message::Append<ot::LinkMetrics::Status>(v7, &v9);
        if (!v8) {
          unsigned int v8 = ot::Mle::Mle::TxMessage::SendTo(v7, v10);
        }
      }
    }
  }
  else
  {
    unsigned int v8 = 3;
  }
  if (v8 && v7) {
    ot::Message::Free(v7);
  }
  return v8;
}

uint64_t ot::Message::Append<ot::LinkMetrics::Status>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 1u);
}

{
  return ot::Message::Append<ot::LinkMetrics::Status>(a1, a2);
}

uint64_t ot::Mle::Mle::SendLinkProbe(ot::Mle::Mle *this, __n128 *a2, char a3, char *a4, unsigned __int8 a5)
{
  uint64_t v13 = this;
  uint64_t v12 = a2;
  char v11 = a3;
  uint64_t v10 = a4;
  unsigned __int8 v9 = a5;
  unsigned int appended = 0;
  uint64_t v7 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0x14u);
  if (v7)
  {
    ot::Mle::Tlv::SetType(v6, 90);
    ot::Tlv::SetLength((uint64_t)v6, v9 + 1);
    unsigned int appended = ot::Message::Append<ot::Mle::Tlv>(v7, v6);
    if (!appended)
    {
      unsigned int appended = ot::Message::Append<unsigned char>(v7, &v11);
      if (!appended)
      {
        unsigned int appended = ot::Message::AppendBytes(v7, v10, v9);
        if (!appended) {
          unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v7, v12);
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
  if (appended && v7) {
    ot::Message::Free(v7);
  }
  return appended;
}

uint64_t ot::Mle::Mle::ProcessMessageSecurity(ot::InstanceLocator *a1, char a2, ot::Message *a3, ot::Ip6::MessageInfo *a4, unsigned __int16 a5, ot::Mle::Mle::SecurityHeader *a6)
{
  char v31 = a1;
  char v30 = a2;
  uint64_t v29 = a3;
  uint64_t v28 = a4;
  unsigned __int16 v27 = a5;
  uint64_t v26 = a6;
  int v25 = 0;
  ot::Crypto::AesCcm::AesCcm((ot::Crypto::AesCcm *)v34);
  unsigned int v22 = (unsigned __int16)(ot::Message::GetLength(v29) - v27);
  SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v28);
  PeerAddr = (unsigned char *)ot::Ip6::MessageInfo::GetPeerAddr(v28);
  if (v30 && v30 == 1)
  {
    SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v28);
    PeerAddr = (unsigned char *)ot::Ip6::MessageInfo::GetSockAddr(v28);
    if ((unint64_t)v27 + 5 > (unsigned __int16)ot::Message::GetLength(v29))
    {
      int v25 = 6;
      goto LABEL_16;
    }
    LOWORD(v2ot::Tlv::SetType(this, 2) = v22 - 4;
  }
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(SockAddr);
  ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v32);
  FrameCounter = (const ot::Mac::ExtAddress *)ot::Mle::Mle::SecurityHeader::GetFrameCounter(v26);
  ot::Crypto::AesCcm::GenerateNonce((ot::Crypto::AesCcm *)v32, FrameCounter, (unsigned __int8 *)5, (uint64_t)v33, v8);
  unsigned int KeyId = ot::Mle::Mle::SecurityHeader::GetKeyId(v26);
  unsigned __int8 v9 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
  if (KeyId == ot::KeyManager::GetCurrentKeySequence(v9))
  {
    uint64_t v10 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
    CurrentMleKey = (ot::Mac::KeyMaterial *)ot::KeyManager::GetCurrentMleKey(v10);
  }
  else
  {
    char v11 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(a1);
    CurrentMleKey = (ot::Mac::KeyMaterial *)ot::KeyManager::GetTemporaryMleKey(v11, KeyId);
  }
  ot::Crypto::AesCcm::SetKey((ot::Crypto::AesCcm *)v34, CurrentMleKey);
  ot::Crypto::AesCcm::Init((ot::Crypto::AesCcm *)v34, 0x2Au, (unsigned __int16)v22, 4u, v33, 0xDu);
  ot::Crypto::AesCcm::Header<ot::Ip6::Address>((ot::Crypto::AesEcb *)v34, SockAddr);
  ot::Crypto::AesCcm::Header<ot::Ip6::Address>((ot::Crypto::AesEcb *)v34, PeerAddr);
  ot::Crypto::AesCcm::Header<ot::Mle::Mle::SecurityHeader>((ot::Crypto::AesEcb *)v34, v26);
  ot::Crypto::AesCcm::Payload((uint64_t)v34, v29, v27, v22, v30);
  ot::Crypto::AesCcm::Finalize((ot::Crypto::AesCcm *)v34, v24);
  if (v30)
  {
    uint64_t v17 = v29;
    __int16 Length = ot::Message::GetLength(v29);
    if (ot::Message::Compare<unsigned char [4]>(v17, Length - 4, (const unsigned __int8 *)v24))
    {
      uint64_t v16 = v29;
      __int16 v13 = ot::Message::GetLength(v29);
      ot::Message::SetLength(v16, v13 - 4);
      IgnoreError();
    }
    else
    {
      int v25 = 8;
    }
  }
  else
  {
    int v25 = ot::Message::Append<unsigned char [4]>(v29, v24);
  }
LABEL_16:
  unsigned int v15 = v25;
  ot::Crypto::AesCcm::~AesCcm((ot::Crypto::AesCcm *)v34);
  return v15;
}

uint64_t ot::Mle::Mle::SecurityHeader::GetFrameCounter(ot::Mle::Mle::SecurityHeader *this)
{
  return ot::Encoding::LittleEndian::HostSwap32(*(unsigned int *)((char *)this + 1));
}

{
  return ot::Mle::Mle::SecurityHeader::GetFrameCounter(this);
}

uint64_t ot::Mle::Mle::SecurityHeader::GetKeyId(ot::Mle::Mle::SecurityHeader *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 5));
}

{
  return ot::Mle::Mle::SecurityHeader::GetKeyId(this);
}

uint64_t ot::KeyManager::GetCurrentMleKey(ot::KeyManager *this)
{
  return (uint64_t)this + 20;
}

{
  return ot::KeyManager::GetCurrentMleKey(this);
}

ot::Crypto::AesEcb *ot::Crypto::AesCcm::Header<ot::Ip6::Address>(ot::Crypto::AesEcb *a1, unsigned char *a2)
{
  return ot::Crypto::AesCcm::Header(a1, a2, 0x10u);
}

{
  return ot::Crypto::AesCcm::Header<ot::Ip6::Address>(a1, a2);
}

ot::Crypto::AesEcb *ot::Crypto::AesCcm::Header<ot::Mle::Mle::SecurityHeader>(ot::Crypto::AesEcb *a1, unsigned char *a2)
{
  return ot::Crypto::AesCcm::Header(a1, a2, 0xAu);
}

{
  return ot::Crypto::AesCcm::Header<ot::Mle::Mle::SecurityHeader>(a1, a2);
}

uint64_t ot::Message::Append<unsigned char [4]>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<unsigned char [4]>(a1, a2);
}

BOOL ot::Message::Compare<unsigned char [4]>(ot::Message *a1, unsigned __int16 a2, const unsigned __int8 *a3)
{
  return ot::Message::CompareBytes(a1, a2, a3, 4u, 0);
}

{
  return ot::Message::Compare<unsigned char [4]>(a1, a2, a3);
}

uint64_t ot::Mle::Mle::HandleUdpReceive(ot::Mle::Mle *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  uint64_t v76 = this;
  uint64_t v75 = a2;
  __int16 v74 = a3;
  int v73 = 0;
  ot::Mle::Mle::RxInfo::RxInfo((ot::Mle::Mle::RxInfo *)v69, a2, a3);
  unsigned __int8 v68 = 0;
  unsigned int KeyId = 0;
  *(_WORD *)&v65[4] = 0;
  *(_DWORD *)uint64_t v65 = (unsigned __int16)ot::Message::GetLength(v75);
  unsigned __int8 v64 = -1;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Receive MLE message", v3, v4, v5, v6, v7, v8, v50);
  if (!ot::Ip6::MessageInfo::GetLinkInfo(v74)) {
    goto LABEL_65;
  }
  if (ot::Ip6::MessageInfo::GetHopLimit(v74) != 255)
  {
    int v73 = 6;
    goto LABEL_65;
  }
  int v62 = v75;
  unsigned __int16 Offset = ot::Message::GetOffset(v75);
  int v73 = ot::Message::Read<unsigned char>(v62, Offset, (char *)&v68);
  if (!v73)
  {
    ot::Message::MoveOffset(v75, 1);
    if (v68 == 255)
    {
      unsigned __int16 v61 = v75;
      unsigned __int16 v10 = ot::Message::GetOffset(v75);
      int v73 = ot::Message::Read<unsigned char>(v61, v10, (char *)&v64);
      if (!v73)
      {
        ot::Message::MoveOffset(v75, 1);
        if (v64 == 16)
        {
          char v11 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::Mle::MleRouter::HandleDiscoveryRequest(v11, v69);
        }
        else if (v64 == 17)
        {
          uint64_t v12 = (ot::Mle::DiscoverScanner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::DiscoverScanner>(this);
          ot::Mle::DiscoverScanner::HandleDiscoveryResponse(v12, v69);
        }
      }
    }
    else
    {
      if (ot::Mle::Mle::IsDisabled(this))
      {
        int v73 = 13;
        goto LABEL_65;
      }
      if (v68)
      {
        int v73 = 6;
        goto LABEL_65;
      }
      int v60 = v75;
      unsigned __int16 v13 = ot::Message::GetOffset(v75);
      int v73 = ot::Message::Read<ot::Mle::Mle::SecurityHeader>(v60, v13, v67);
      if (!v73)
      {
        ot::Message::MoveOffset(v75, 10);
        if (!ot::Mle::Mle::SecurityHeader::IsSecurityControlValid((ot::Mle::Mle::SecurityHeader *)v67))
        {
          int v73 = 6;
          goto LABEL_65;
        }
        unsigned int KeyId = ot::Mle::Mle::SecurityHeader::GetKeyId((ot::Mle::Mle::SecurityHeader *)v67);
        *(_DWORD *)&v65[2] = ot::Mle::Mle::SecurityHeader::GetFrameCounter((ot::Mle::Mle::SecurityHeader *)v67);
        uint64_t v58 = v75;
        int v59 = v74;
        unsigned __int16 v14 = ot::Message::GetOffset(v75);
        int v73 = ot::Mle::Mle::ProcessMessageSecurity(this, 1, v58, v59, v14, (ot::Mle::Mle::SecurityHeader *)v67);
        if (!v73)
        {
          uint64_t v57 = v75;
          unsigned __int16 v15 = ot::Message::GetOffset(v75);
          ot::Message::Read<unsigned char>(v57, v15, (char *)&v64);
          IgnoreError();
          ot::Message::MoveOffset(v75, 1);
          PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v74);
          Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
          ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v77);
          if (v64 == 12) {
            Parent = (ot::Neighbor *)ot::NeighborTable::FindParent((ot::Mle::Mle *)((char *)this + 232), (uint64_t)v77, 1);
          }
          else {
            Parent = (ot::Neighbor *)ot::NeighborTable::FindNeighbor((ot::Mle::Mle *)((char *)this + 232), (uint64_t)v77, 1);
          }
          if (Parent && ot::Neighbor::IsStateValid(Parent))
          {
            int v55 = KeyId;
            if (v55 == ot::Neighbor::GetKeySequence(Parent))
            {
              unsigned int v54 = *(_DWORD *)&v65[2];
              if (v54 < ot::Neighbor::GetMleFrameCounter(Parent))
              {
                char v53 = v65[2];
                ot::Neighbor::GetMleFrameCounter(Parent);
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Frame counter (%d) smaller than expected (%d) mle-command(%u)", v20, v21, v22, v23, v24, v25, v53);
                int v73 = 29;
                goto LABEL_65;
              }
            }
            else
            {
              unsigned int v52 = KeyId;
              if (v52 <= ot::Neighbor::GetKeySequence(Parent))
              {
                char v51 = KeyId;
                ot::Neighbor::GetKeySequence(Parent);
                ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Key sequence (%d) smaller than expected (%d) mle-command(%u)", v26, v27, v28, v29, v30, v31, v51);
                int v73 = 29;
                goto LABEL_65;
              }
              ot::Neighbor::SetKeySequence((uint64_t)Parent, KeyId);
              LinkFrameCounters = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(Parent);
              ot::Mac::LinkFrameCounters::Reset(LinkFrameCounters);
              ot::Neighbor::SetLinkAckFrameCounter((uint64_t)Parent, 0);
            }
            ot::Neighbor::SetMleFrameCounter((uint64_t)Parent, *(_DWORD *)&v65[2] + 1);
          }
          int v71 = KeyId;
          int v70 = *(_DWORD *)&v65[2];
          unsigned __int16 v72 = Parent;
          if (v64)
          {
            uint64_t v34 = v64;
            char v33 = 1;
          }
          else
          {
            uint64_t v34 = 0;
            char v33 = 0;
          }
          if (v33)
          {
LABEL_63:
            int v73 = 2;
          }
          else
          {
            switch(v34)
            {
              case 0:
                if (ot::Mle::Mle::IsRxOnWhenIdle(this))
                {
                  uint64_t v37 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                  ot::Mle::MleRouter::HandleLinkRequest(v37, v69);
                }
                goto LABEL_64;
              case 1:
                char v38 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                ot::Mle::MleRouter::HandleLinkAccept(v38, (ot::Mle::Mle::RxInfo *)v69, v39, v40);
                goto LABEL_64;
              case 2:
                uint64_t v41 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                ot::Mle::MleRouter::HandleLinkAcceptAndRequest(v41, (ot::Mle::Mle::RxInfo *)v69, v42, v43);
                goto LABEL_64;
              case 3:
              case 5:
              case 6:
              case 16:
              case 17:
                goto LABEL_63;
              case 4:
                ot::Mle::Mle::HandleAdvertisement(this, v69);
                goto LABEL_64;
              case 7:
                uint64_t v44 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                ot::Mle::MleRouter::HandleDataRequest(v44, (ot::Mle::Mle::RxInfo *)v69);
                goto LABEL_64;
              case 8:
                ot::Mle::Mle::HandleDataResponse(this, v69);
                goto LABEL_64;
              case 9:
                if (ot::Mle::Mle::IsRxOnWhenIdle(this) || *((unsigned char *)this + 384))
                {
                  uint64_t v45 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                  ot::Mle::MleRouter::HandleParentRequest(v45, v69);
                }
                goto LABEL_64;
              case 10:
                ot::Mle::Mle::HandleParentResponse(this, v69);
                goto LABEL_64;
              case 11:
                BOOL v46 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                ot::Mle::MleRouter::HandleChildIdRequest(v46, v69);
                goto LABEL_64;
              case 12:
                ot::Mle::Mle::HandleChildIdResponse(this, v69, v18, v19);
                goto LABEL_64;
              case 13:
                if (ot::Mle::Mle::IsRouterOrLeader(this))
                {
                  unsigned int v35 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                  ot::Mle::MleRouter::HandleChildUpdateRequest(v35, v69);
                }
                else
                {
                  ot::Mle::Mle::HandleChildUpdateRequest(this, (ot::Mle::Mle::RxInfo *)v69);
                }
                goto LABEL_64;
              case 14:
                if (ot::Mle::Mle::IsRouterOrLeader(this))
                {
                  __n128 v36 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
                  ot::Mle::MleRouter::HandleChildUpdateResponse(v36, v69);
                }
                else
                {
                  ot::Mle::Mle::HandleChildUpdateResponse(this, v69);
                }
                goto LABEL_64;
              case 15:
                ot::Mle::Mle::HandleAnnounce(this, v69);
                goto LABEL_64;
              case 18:
                ot::Mle::Mle::HandleLinkMetricsManagementRequest(this, v69);
                goto LABEL_64;
              case 19:
                ot::Mle::Mle::HandleLinkMetricsManagementResponse(this, v69);
                goto LABEL_64;
              case 20:
                ot::Mle::Mle::HandleLinkProbe(this, v69);
LABEL_64:
                ot::Mle::Mle::ProcessKeySequence(this, (ot::Mle::Mle::RxInfo *)v69);
                break;
              default:
                JUMPOUT(0);
            }
          }
        }
      }
    }
  }
LABEL_65:
  SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v74);
  uint64_t result = ot::Ip6::Address::IsMulticast(SockAddr);
  if (result)
  {
    uint64_t ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(v74);
    return ot::ThreadLinkInfo::IsDstPanIdBroadcast(ThreadLinkInfo);
  }
  return result;
}

ot::Mle::Mle::RxInfo *ot::Mle::Mle::RxInfo::RxInfo(ot::Mle::Mle::RxInfo *this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  return this;
}

uint64_t ot::Ip6::MessageInfo::GetLinkInfo(ot::Ip6::MessageInfo *this)
{
  return *((void *)this + 5);
}

{
  return ot::Ip6::MessageInfo::GetLinkInfo(this);
}

uint64_t ot::Message::Read<ot::Mle::Mle::SecurityHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xAu);
}

{
  return ot::Message::Read<ot::Mle::Mle::SecurityHeader>(a1, a2, a3);
}

BOOL ot::Mle::Mle::SecurityHeader::IsSecurityControlValid(ot::Mle::Mle::SecurityHeader *this)
{
  return *(unsigned char *)this == 21;
}

{
  return ot::Mle::Mle::SecurityHeader::IsSecurityControlValid(this);
}

uint64_t ot::Neighbor::GetMleFrameCounter(ot::Neighbor *this)
{
  return *((unsigned int *)this + 4);
}

{
  return ot::Neighbor::GetMleFrameCounter(this);
}

void ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle *this, ot::Neighbor **a2)
{
  unsigned int v35 = this;
  uint64_t v34 = a2;
  int LeaderDataTlv = 0;
  unsigned __int16 v32 = 0;
  if (!ot::Mle::Mle::IsFullThreadDevice(this)) {
    goto LABEL_28;
  }
  ot::InstanceLocator::GetInstance(this);
  if (!otPlatVendorGetThreadJoinSession() && ot::Mle::Mle::isThreadStateMachineEnabled(this))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "ThreadConnection: Received Advertisements in Sleepy Router/Full Router Role", v2, v3, v4, v5, v6, v7, v21);
    uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v8, 0x200000000);
  }
  if (!ot::Mle::Mle::IsSleepyRouter(this))
  {
LABEL_28:
    if (!ot::Mle::Mle::IsAttached(this)) {
      goto LABEL_25;
    }
    int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v34, &v32, v9, v10);
    if (LeaderDataTlv) {
      goto LABEL_25;
    }
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v34[1]);
    ot::Mle::Mle::Log(1, 0, PeerAddr, v32);
    int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v34, (ot::Mle::LeaderData *)v31, v12, v13, v14);
    if (LeaderDataTlv) {
      goto LABEL_25;
    }
    if (ot::Mle::Mle::IsFullThreadDevice(this))
    {
      unsigned __int16 v15 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      int LeaderDataTlv = ot::Mle::MleRouter::HandleAdvertisement(v15, v34, v32, (const ot::Mle::LeaderData *)v31);
      if (LeaderDataTlv) {
        goto LABEL_25;
      }
    }
    if (ot::Mle::Mle::IsChild(this))
    {
      if (v34[3] != (ot::Mle::Mle *)((char *)this + 80))
      {
LABEL_25:
        ot::Mle::Mle::LogProcessError(0, LeaderDataTlv);
        return;
      }
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 80));
      if (v32 != Rloc16)
      {
        ot::Mle::Mle::BecomeDetached(this);
        IgnoreError();
        goto LABEL_25;
      }
      int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v31);
      if (PartitionId != ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 64))
        || (int v26 = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v31),
            unsigned __int8 LeaderId = (ot::TimerMilli *)ot::Mle::Mle::GetLeaderId(this),
            v26 != LeaderId))
      {
        unsigned int v24 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v31);
        char Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v31);
        char LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v31);
        ot::Mle::Mle::SetLeaderData(this, v24, Weighting, LeaderRouterId);
        uint64_t v23 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        uint64_t v22 = v34;
        unsigned __int8 RouterId = ot::Neighbor::GetRouterId((ot::Mle::Mle *)((char *)this + 80));
        unsigned __int8 LeaderId = (ot::TimerMilli *)ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(v23, v22, RouterId);
        int LeaderDataTlv = (int)LeaderId;
        if (LeaderId) {
          goto LABEL_25;
        }
        *((unsigned char *)this + 7ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 72) & 0xFE | 1;
      }
      int Now = ot::TimerMilli::GetNow(LeaderId);
      ot::Neighbor::SetLastHeard((uint64_t)this + 80, Now);
    }
    else if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v34))
    {
      goto LABEL_25;
    }
    if ((*((unsigned char *)this + 72) & 1) != 0 || ot::Mle::Mle::IsNetworkDataNewer(this, (const ot::Mle::LeaderData *)v31))
    {
      unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0, 0x3E8u);
      uint64_t v20 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v34[1]);
      ot::Mle::Mle::SendDataRequestAfterDelay(this, v20, Uint16InRange);
      IgnoreError();
    }
    *((unsigned char *)v34 + 3ot::Tlv::SetType(this, 2) = 2;
    goto LABEL_25;
  }
}

void ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle *this, ot::Neighbor **a2)
{
  __n128 v36 = this;
  unsigned int v35 = a2;
  int LeaderDataTlv = 0;
  char v33 = 0;
  unsigned __int8 v32 = 0;
  unsigned __int16 v31 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 8u, PeerAddr);
  if (ot::Mle::Mle::RxInfo::IsNeighborStateValid(v35))
  {
    unsigned __int16 v29 = 0;
    unsigned __int16 v28 = 0;
    if (!ot::Tlv::FindTlvValueOffset(*v35, (const ot::Message *)0x59, &v29, &v28, v3))
    {
      int v26 = (ot::LinkMetrics::Initiator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(this);
      uint64_t v23 = *v35;
      unsigned __int16 v24 = v29;
      unsigned __int16 v25 = v28;
      uint64_t v4 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v35[1]);
      ot::LinkMetrics::Initiator::HandleReport(v26, v23, v24, v25, v4);
    }
    uint64_t v22 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    char v21 = v35;
    unsigned __int8 RouterId = ot::Neighbor::GetRouterId((ot::Mle::Mle *)((char *)this + 80));
    int LeaderDataTlv = ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(v22, v21, RouterId);
    if (!LeaderDataTlv)
    {
      int LeaderDataTlv = ot::Mle::Mle::HandleLeaderData(this, v35, v6, v7, v8);
      if (!*((unsigned char *)this + 595) && !ot::Mle::Mle::IsRxOnWhenIdle(this))
      {
        char v11 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
        ot::DataPollSender::StopFastPolls(v11);
      }
      if (!LeaderDataTlv)
      {
        *((unsigned char *)v35 + 3ot::Tlv::SetType(this, 2) = 2;
        int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v35, &v31, v9, v10);
        if (!LeaderDataTlv)
        {
          unsigned __int8 v32 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v31);
          uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::RouterTable::FindRouterById((ot::RouterTable *)(v12 + 30912), v32);
          char v33 = v16;
          if (v16)
          {
            int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v35, (ot::Mle::LeaderData *)v30, v13, v14, v15);
            if (!LeaderDataTlv)
            {
              uint64_t v19 = v33;
              Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v30, 0);
              ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v19, DataVersion);
              uint64_t v20 = v33;
              char v18 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v30, 1);
              ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v20, v18);
            }
          }
        }
      }
    }
  }
  else
  {
    int LeaderDataTlv = 2;
  }
  ot::Mle::Mle::LogProcessError(8u, LeaderDataTlv);
}

void ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  v213 = this;
  v212 = a2;
  v194 = this;
  int ResponseTlv = 0;
  char Rss = 0;
  uint64_t ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(a2[1]);
  char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
  unsigned __int16 v209 = 0;
  unsigned __int16 v208 = 0;
  unsigned __int8 v206 = 0;
  unsigned __int8 v205 = 0;
  unsigned __int8 v204 = 0;
  unsigned int v202 = 0;
  unsigned int v201 = 0;
  char v3 = ot::Mle::Mle::AttachStateToString(*((unsigned char *)v194 + 241));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Parent response received in mAttachState:%s", v4, v5, v6, v7, v8, v9, v3);
  if (*((unsigned char *)v194 + 241) == 3 || *((unsigned char *)v194 + 241) == 4)
  {
    int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v212, &v208, v10, v11);
    if (!ResponseTlv)
    {
      PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v212[1]);
      ot::Mle::Mle::Log(1, 0xFu, PeerAddr, v208);
      int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*v212, &v209, v13, v14);
      if (!ResponseTlv)
      {
        if (v209 >= 2u)
        {
          int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v212, (ot::Mle::Mle::Challenge *)v218, v15, v16, v17);
          if (!ResponseTlv)
          {
            if (ot::Mle::Mle::Challenge::operator==((ot::Mle::Mle::Challenge *)v218, (uint64_t)v194 + 400))
            {
              char v18 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v212[1]);
              Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v18);
              ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v217);
              if (ot::Mle::Mle::IsChild(v194))
              {
                ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)v194 + 80));
                if (ot::Equatable<ot::Mac::ExtAddress>::operator==(v23, v217)) {
                  *((unsigned char *)v194 + 598) = 1;
                }
              }
              int ResponseTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v212, (ot::Mle::LeaderData *)&v207, v20, v21, v22);
              if (!ResponseTlv)
              {
                int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(*v212, &v206, v24, v25);
                if (!ResponseTlv)
                {
                  int v26 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(v194);
                  unsigned __int8 v205 = ot::Mac::Mac::ComputeLinkMargin(v26, Rss);
                  if (v205 > (int)v206) {
                    unsigned __int8 v205 = v206;
                  }
                  unsigned __int8 v204 = ot::LinkQualityForLinkMargin((ot *)v205);
                  int ResponseTlv = ot::Tlv::FindTlv<ot::Mle::ConnectivityTlv>(*v212, v203, v27, v28, v29);
                  if (!ResponseTlv)
                  {
                    int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)&v207);
                    unsigned int v186 = Rss;
                    unsigned int v187 = v204;
                    v183 = (ot::Mle::ConnectivityTlv *)v203;
                    Parentunsigned __int8 Priority = ot::Mle::ConnectivityTlv::GetParentPriority((ot::Mle::ConnectivityTlv *)v203);
                    int LinkQuality1 = ot::Mle::ConnectivityTlv::GetLinkQuality1((ot::Mle::ConnectivityTlv *)v203);
                    int LinkQuality2 = ot::Mle::ConnectivityTlv::GetLinkQuality2((ot::Mle::ConnectivityTlv *)v203);
                    int LinkQuality3 = ot::Mle::ConnectivityTlv::GetLinkQuality3((ot::Mle::ConnectivityTlv *)v203);
                    uint64_t v30 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v212[1]);
                    v184 = v216;
                    ot::Ip6::Address::ToString(v30, (ot::StringWriter *)v216);
                    v192 = &v131;
                    uint64_t v132 = v186;
                    uint64_t v133 = v187;
                    uint64_t v134 = (char)ParentPriority;
                    uint64_t v135 = LinkQuality1;
                    uint64_t v136 = LinkQuality2;
                    uint64_t v137 = LinkQuality3;
                    uint64_t v138 = ot::String<(unsigned short)40>::AsCString((uint64_t)v216);
                    uint64_t v139 = v208;
                    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Partition ID: %u, RSSI: %d, Link quality: %u, Priority: %d, LQI1: %u, LQI2: %u, LQI3: %u (%s,0x%04x)", v31, v32, v33, v34, v35, v36, PartitionId);
                    int CslClockAccuracyTlv = ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv(*v212, (ot::Mac::CslAccuracy *)v200, v37, v38, v39);
                    if (CslClockAccuracyTlv)
                    {
                      if (CslClockAccuracyTlv != 23)
                      {
                        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Response parse error: Could not read CSL accuracy TLV", v40, v41, v42, v43, v44, v45, v131);
                        int ResponseTlv = 6;
                        goto LABEL_59;
                      }
                      ot::Mac::CslAccuracy::Init(v200);
                    }
                    BOOL v46 = v194;
                    *((unsigned char *)v212 + 3ot::Tlv::SetType(this, 2) = 1;
                    if (ot::Mle::Mle::IsFullThreadDevice(v46) && !ot::Mle::Mle::IsDetached(v194))
                    {
                      BOOL v199 = 0;
                      v164 = (ot::Mle::LeaderData *)&v207;
                      int v160 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)&v207);
                      int v47 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)v194 + 64));
                      int v163 = 1;
                      BOOL v199 = v160 == v47;
                      unsigned __int8 v198 = 0;
                      v165 = (ot::Mle::ConnectivityTlv *)v203;
                      Idchar Sequence = ot::Mle::ConnectivityTlv::GetIdSequence((ot::Mle::ConnectivityTlv *)v203);
                      uint64_t v48 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v194);
                      RouterIdchar Sequence = ot::RouterTable::GetRouterIdSequence(v48);
                      unsigned __int8 v198 = (IdSequence == RouterIdSequence) & v163;
                      unsigned __int8 v197 = 0;
                      int v162 = ot::Mle::ConnectivityTlv::GetIdSequence(v165);
                      char v50 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v194);
                      char v51 = ot::RouterTable::GetRouterIdSequence(v50);
                      unsigned __int8 v197 = ot::SerialNumber::IsGreater<unsigned char>(v162, v51) & v163;
                      BOOL v166 = v199;
                      int v167 = v198;
                      int v168 = v197;
                      unsigned int v169 = *((unsigned __int8 *)v194 + 409);
                      BOOL v170 = v199;
                      int v171 = v198;
                      int v172 = v197;
                      unsigned int v173 = *((unsigned __int8 *)v194 + 409);
                      unsigned int v174 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)v194 + 64));
                      unsigned int v52 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(v194);
                      int v175 = ot::RouterTable::GetRouterIdSequence(v52);
                      int Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::Mle *)((char *)v194 + 64));
                      char v53 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v194);
                      BOOL IsSingleton = ot::Mle::MleRouter::IsSingleton(v53);
                      unsigned int v178 = ot::Mle::LeaderData::GetPartitionId(v164);
                      int v179 = ot::Mle::ConnectivityTlv::GetIdSequence(v165);
                      int v180 = ot::Mle::LeaderData::GetWeighting(v164);
                      unsigned __int8 ActiveRouters = ot::Mle::ConnectivityTlv::GetActiveRouters(v165);
                      v181 = &v131;
                      uint64_t v132 = v167 & 1;
                      uint64_t v133 = v168 & 1;
                      uint64_t v134 = v169;
                      uint64_t v135 = v170;
                      uint64_t v136 = v171 & 1;
                      uint64_t v137 = v172 & 1;
                      uint64_t v138 = v173;
                      uint64_t v139 = v174;
                      uint64_t v140 = v175;
                      uint64_t v141 = Weighting;
                      BOOL v142 = IsSingleton;
                      uint64_t v143 = v178;
                      uint64_t v144 = v179;
                      uint64_t v145 = v180;
                      uint64_t v146 = ActiveRouters;
                      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Parent Response isPartIdSame=%d, isIdSeqSame=%d, isIdSeqGreater=%d,mAttachMode=%d cur:[partId:%u, idSeq:%u wt:%u, isSingleton:%d] other:[partId:%u, idSeq:%u wt:%u acRtrs:%u] ", v135, v169, v169, v132, v166, v55, v166);
                      BOOL v56 = *((unsigned char *)v194 + 409) == 0;
                      uint64_t v57 = *((unsigned __int8 *)v194 + 409);
                      uint64_t v182 = v57;
                      if (v56)
                      {
                        uint64_t v59 = v57;
                        char v58 = 0;
                      }
                      else
                      {
                        uint64_t v59 = v57;
                        char v58 = 1;
                      }
                      if ((v58 & 1) == 0)
                      {
                        switch(v59)
                        {
                          case 0:
                          case 4:
                            if (!v199 || (v197 & 1) != 0) {
                              break;
                            }
                            goto LABEL_59;
                          case 1:
                            if (!v199 || (v197 & 1) == 0) {
                              goto LABEL_59;
                            }
                            break;
                          case 2:
                            if (!v199)
                            {
                              BOOL v159 = ot::Mle::ConnectivityTlv::GetActiveRouters((ot::Mle::ConnectivityTlv *)v203) <= 1u;
                              int v60 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v194);
                              BOOL v61 = ot::Mle::MleRouter::IsSingleton(v60);
                              if ((int)ot::Mle::MleRouter::ComparePartitions((ot::Mle::MleRouter *)v159, (ot::Mle::LeaderData *)&v207, (const ot::Mle::LeaderData *)v61, (ot::Mle::Mle *)((char *)v194 + 64), v62) > 0)break; {
                            }
                              }
                            goto LABEL_59;
                          case 3:
                            if (!v199 || (v198 & 1) == 0 && (v197 & 1) == 0) {
                              goto LABEL_59;
                            }
                            break;
                          default:
                            JUMPOUT(0);
                        }
                      }
                    }
                    if (!ot::Neighbor::IsStateParentResponse((ot::Mle::Mle *)((char *)v194 + 416))) {
                      goto LABEL_52;
                    }
                    ot::Neighbor::GetExtAddress((ot::Mle::Mle *)((char *)v194 + 416));
                    if (!ot::Unequatable<ot::Mac::ExtAddress>::operator!=(v64, v217)) {
                      goto LABEL_52;
                    }
                    int v196 = 0;
                    if (ot::Mle::Mle::IsFullThreadDevice(v194))
                    {
                      BOOL v65 = ot::Mle::ConnectivityTlv::GetActiveRouters((ot::Mle::ConnectivityTlv *)v203) <= 1u;
                      int v196 = ot::Mle::MleRouter::ComparePartitions((ot::Mle::MleRouter *)v65, (ot::Mle::LeaderData *)&v207, (const ot::Mle::LeaderData *)(*((unsigned char *)v194 + 588) & 1), (ot::Mle::Mle *)((char *)v194 + 580), v66);
                    }
                    if (v196 >= 0
                      && (v196
                       || ot::Mle::Mle::IsBetterParent((uint64_t)v194, v208, v204, v205, (ot::Mle::ConnectivityTlv *)v203, v209, (const ot::Mac::CslAccuracy *)v200)))
                    {
LABEL_52:
                      int ResponseTlv = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(*v212, &v202, &v201, v63);
                      if (!ResponseTlv)
                      {
                        uint64_t v67 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v212[1]);
                        v158 = v215;
                        ot::Ip6::Address::ToString(v67, (ot::StringWriter *)v215);
                        uint64_t v132 = ot::String<(unsigned short)40>::AsCString((uint64_t)v158);
                        uint64_t v133 = v202;
                        uint64_t v134 = v201;
                        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d", v68, v69, v70, v71, v72, v73, (char)"HandleParentResponse");
                        int ResponseTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*v212, (ot::Mle::Mle *)((char *)v194 + 561), v74, v75, v76);
                        if (!ResponseTlv)
                        {
                          ot::Mle::Mle::InitNeighbor(v194, (ot::Mle::Mle *)((char *)v194 + 416), v212);
                          ot::Neighbor::SetRloc16((uint64_t)v194 + 416, v208);
                          LinkFrameCounters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters((ot::Mle::Mle *)((char *)v194 + 416));
                          ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v202);
                          ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v194 + 416, v202);
                          ot::Neighbor::SetMleFrameCounter((uint64_t)v194 + 416, v201);
                          ot::Neighbor::SetVersion((uint64_t)v194 + 416, v209);
                          uint64_t v147 = (uint64_t)v194 + 416;
                          ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v195, 11);
                          ot::Neighbor::SetDeviceMode(v147, v195);
                          uint64_t v148 = (uint64_t)v194 + 416;
                          char v78 = ot::LinkQualityForLinkMargin((ot *)v206);
                          ot::Router::SetLinkQualityOut(v148, v78);
                          ot::Neighbor::SetState((ot::Mle::Mle *)((char *)v194 + 416), 3);
                          ot::Neighbor::SetKeySequence((uint64_t)v194 + 416, *((_DWORD *)v212 + 5));
                          v149 = (ot::Mle::Mle *)((char *)v194 + 416);
                          v151 = (ot::Mle::ConnectivityTlv *)v203;
                          char LeaderCost = ot::Mle::ConnectivityTlv::GetLeaderCost((ot::Mle::ConnectivityTlv *)v203);
                          ot::Parent::SetLeaderCost((uint64_t)v149, LeaderCost);
                          v150 = (ot::Mac::CslAccuracy *)v200;
                          char ClockAccuracy = ot::Mac::CslAccuracy::GetClockAccuracy((ot::Mac::CslAccuracy *)v200);
                          v157 = (ot *)&ot::Mle::kLogModuleName;
                          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "ClockAccuracy Info-HandleParentResponse: Accuracy - %d", v81, v82, v83, v84, v85, v86, ClockAccuracy);
                          char Uncertainty = ot::Mac::CslAccuracy::GetUncertainty(v150);
                          ot::Logger::LogAtLevel<(ot::LogLevel)4>(v157, "ClockUncertainity Info-HandleParentResponse: Uncertainity - %d", v88, v89, v90, v91, v92, v93, Uncertainty);
                          ot::Parent::SetCslAccuracy((uint64_t)v194 + 416, v150);
                          char v94 = ot::Mle::ConnectivityTlv::GetParentPriority(v151);
                          v95 = v151;
                          *((unsigned char *)v194 + 57ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = v94;
                          char v96 = ot::Mle::ConnectivityTlv::GetLinkQuality3(v95);
                          uint64_t v97 = v151;
                          *((unsigned char *)v194 + 57ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v96;
                          char v98 = ot::Mle::ConnectivityTlv::GetLinkQuality2(v97);
                          uint64_t v99 = v151;
                          *((unsigned char *)v194 + 57ot::Tlv::SetType(this, 2) = v98;
                          char v100 = ot::Mle::ConnectivityTlv::GetLinkQuality1(v99);
                          uint64_t v101 = v151;
                          *((unsigned char *)v194 + 57ot::Tlv::SetType(this, 3) = v100;
                          SedBufferchar Size = ot::Mle::ConnectivityTlv::GetSedBufferSize(v101);
                          int v103 = v151;
                          *((_WORD *)v194 + 28ot::Tlv::SetType(this, 7) = SedBufferSize;
                          char SedDatagramCount = ot::Mle::ConnectivityTlv::GetSedDatagramCount(v103);
                          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = v194;
                          char v106 = SedDatagramCount;
                          unint64_t v107 = v151;
                          *((unsigned char *)v194 + 576) = v106;
                          *(void *)((char *)v105 + 58ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = v207;
                          unsigned __int8 v108 = ot::Mle::ConnectivityTlv::GetActiveRouters(v107);
                          uint64_t v109 = v194;
                          *((unsigned char *)v194 + 588) = v108 <= 1u;
                          *((unsigned char *)v109 + 57ot::Tlv::SetType(this, 7) = v205;
                          int v110 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v212[1]);
                          v152 = v214;
                          ot::Ip6::Address::ToString(v110, (ot::StringWriter *)v214);
                          uint64_t v153 = ot::String<(unsigned short)40>::AsCString((uint64_t)v152);
                          unsigned int v154 = v208;
                          uint64_t v155 = v202;
                          uint64_t v156 = v201;
                          uint64_t v111 = ot::Mle::Mle::AttachStateToString(*((unsigned char *)v194 + 241));
                          uint64_t v132 = v154;
                          uint64_t v133 = v155;
                          uint64_t v134 = v156;
                          uint64_t v135 = (uint64_t)v111;
                          uint64_t v136 = v204;
                          ot::Logger::LogAtLevel<(ot::LogLevel)4>(v157, "Added new parent candidate: %s (%u) ,linkFc:%u, mleFc:%u, mAttachState:%s, linkQuality:%d", v112, v113, v114, v115, v116, v117, v153);
                          if (v204 == 3 && (*((unsigned char *)v194 + 241) == 3 || *((unsigned char *)v194 + 241) == 4))
                          {
                            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Found new parent candidate with linkQuality: %d, stopping the attach timer", v118, v119, v120, v121, v122, v123, v204);
                            ot::TimerMilli::Stop((ot::Mle::Mle *)((char *)v194 + 248));
                            ot::TimerMilli::Start((ot::Mle::Mle *)((char *)v194 + 248), 0);
                          }
                          else
                          {
                            char v124 = ot::Mle::Mle::AttachStateToString(*((unsigned char *)v194 + 241));
                            uint64_t v132 = v204;
                            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Not handling parent response in mAttachState:%s, linkQuality:%d ", v125, v126, v127, v128, v129, v130, v124);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              int ResponseTlv = 6;
            }
          }
        }
        else
        {
          int ResponseTlv = 6;
        }
      }
    }
  }
  else
  {
    int ResponseTlv = 13;
  }
LABEL_59:
  ot::Mle::Mle::LogProcessError(0xFu, ResponseTlv);
}

void ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle *this, ot::Neighbor **a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v69 = this;
  uint64_t v68 = a2;
  int LeaderDataTlv = 0;
  unsigned __int16 v65 = 0;
  unsigned __int16 v64 = 0;
  unsigned __int16 v62 = 0;
  unsigned __int16 v61 = 0;
  unsigned __int16 v60 = 0;
  unsigned __int16 v59 = 0;
  int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*a2, &v65, a3, a4);
  if (!LeaderDataTlv)
  {
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
    ot::Mle::Mle::Log(1, 4u, PeerAddr, v65);
    if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v68))
    {
      int LeaderDataTlv = 8;
      goto LABEL_29;
    }
    if (*((unsigned char *)this + 241) == 5)
    {
      int LeaderDataTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(*v68, &v64, v5, v6);
      if (!LeaderDataTlv)
      {
        if (!ot::Mle::RouterIdMatch((ot::Mle *)v65, v64))
        {
          int LeaderDataTlv = 37;
          goto LABEL_29;
        }
        int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v68, (ot::Mle::LeaderData *)v66, v7, v8, v9);
        if (!LeaderDataTlv)
        {
          int LeaderDataTlv = ot::Tlv::FindTlvValueOffset(*v68, (const ot::Message *)0xC, &v62, &v61, v10);
          if (!LeaderDataTlv)
          {
            int v57 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(*v68, (uint64_t)v63, v11, v12, v13);
            if (v57)
            {
              if (v57 != 23)
              {
                int LeaderDataTlv = 6;
                goto LABEL_29;
              }
            }
            else if (!ot::Tlv::FindTlvValueOffset(*v68, (const ot::Message *)0x18, &v60, &v59, v16))
            {
              active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
              int LeaderDataTlv = ot::MeshCoP::ActiveDatasetManager::Save(active, (const ot::MeshCoP::Timestamp *)v63, *v68, v60, v59);
              if (LeaderDataTlv) {
                goto LABEL_29;
              }
            }
            if (*((unsigned char *)this + 243) == 3)
            {
              char v18 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::Clear(v18);
            }
            int v56 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(*v68, (uint64_t)v63, v14, v15, v16);
            if (v56)
            {
              if (v56 != 23)
              {
                int LeaderDataTlv = 6;
                goto LABEL_29;
              }
              uint64_t v21 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::ClearNetwork(v21);
            }
            else if (!ot::Tlv::FindTlvValueOffset(*v68, (const ot::Message *)0x19, &v60, &v59, v19))
            {
              uint64_t v20 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
              ot::MeshCoP::PendingDatasetManager::Save(v20, (const ot::MeshCoP::Timestamp *)v63, *v68, v60, v59);
              IgnoreError();
            }
            ot::Mle::Mle::SetStateDetached(this);
            unsigned int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v66);
            char Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v66);
            char LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v66);
            ot::Mle::Mle::SetLeaderData(this, PartitionId, Weighting, LeaderRouterId);
            char v53 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
            unsigned int v52 = v68;
            unsigned __int8 v23 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v65);
            int LeaderDataTlv = ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(v53, v52, v23);
            if (!LeaderDataTlv)
            {
              ot::Mle::Mle::ParentCandidate::CopyTo((ot::Mle::Mle *)((char *)this + 416), (ot::Mle::Mle *)((char *)this + 80));
              ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle *)((char *)this + 416));
              CslAccuracy = (_WORD *)ot::Parent::GetCslAccuracy((ot::Mle::Mle *)((char *)this + 80));
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "ClockAccuracy Info-ChildIdResponse: Accuracy - %d", v25, v26, v27, v28, v29, v30, *CslAccuracy);
              uint64_t v48 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              uint64_t v31 = (const ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy((ot::Mle::Mle *)((char *)this + 80));
              ot::Mac::Mac::SetCslParentAccuracy(v48, v31);
              ot::Neighbor::SetRloc16((uint64_t)this + 80, v65);
              char v51 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
              Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v66, 0);
              char v50 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v66, 1);
              NetworkDataint Type = ot::Mle::Mle::GetNetworkDataType(this);
              ot::NetworkData::LeaderBase::SetNetworkData(v51, DataVersion, v50, NetworkDataType, *v68, v62, v61);
              IgnoreError();
              ot::Mle::Mle::SetStateChild(this, v64);
              if (ot::Mle::Mle::IsRxOnWhenIdle(this))
              {
                uint64_t v41 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v41, 1, v42, v43, v44, v45, v46, v47);
              }
              else
              {
                uint64_t v33 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
                ot::DataPollSender::SetAttachMode(v33, 0);
                uint64_t v34 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v34, 0, v35, v36, v37, v38, v39, v40);
              }
              *((unsigned char *)v68 + 3ot::Tlv::SetType(this, 2) = 2;
            }
          }
        }
      }
    }
  }
LABEL_29:
  ot::Mle::Mle::LogProcessError(4u, LeaderDataTlv);
}

void ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v38 = this;
  uint64_t v37 = a2;
  int v36 = 0;
  int Timestamp = 0;
  unsigned __int8 Channel = 0;
  unsigned __int16 v31 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 1u, PeerAddr);
  int v36 = ot::Tlv::FindTlv<ot::Mle::ChannelTlv>(*v37, v35, v3, v4, v5);
  if (!v36)
  {
    if (ot::Mle::ChannelTlv::IsValid((ot::Mle::ChannelTlv *)v35))
    {
      unsigned __int8 Channel = ot::Mle::ChannelTlv::GetChannel((ot::Mle::ChannelTlv *)v35);
      int v36 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(*v37, (uint64_t)v34, v6, v7, v8);
      if (!v36)
      {
        int v36 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(*v37, &v31, v9, v10);
        if (!v36)
        {
          *((unsigned char *)v37 + 3ot::Tlv::SetType(this, 2) = 2;
          active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
          int Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
          IsOrphanint Timestamp = ot::MeshCoP::Timestamp::IsOrphanTimestamp((ot::MeshCoP::Timestamp *)v34);
          int v29 = ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v34, Timestamp, v12);
          int v26 = Channel;
          uint64_t v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
          BOOL v27 = 0;
          if (v26 == ot::Mac::Mac::GetPanChannel(v13))
          {
            int v25 = v31;
            uint64_t v14 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            BOOL v27 = v25 == (unsigned __int16)ot::Mac::Mac::GetPanId(v14);
          }
          if (IsOrphanTimestamp || v29 < 0)
          {
            if (!IsOrphanTimestamp || !v27)
            {
              ot::Mle::Mle::SendAnnounce(this, Channel);
              unsigned __int8 v24 = Channel;
              uint64_t v15 = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(v37[1]);
              ot::Mle::Mle::SendAnnounce(this, v24, v15, 0);
            }
          }
          else if (v29 <= 0)
          {
            uint64_t v22 = (ot::AnnounceSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceSender>(this);
            ot::AnnounceSender::UpdateOnReceivedAnnounce(v22);
          }
          else if (!ot::Mle::Mle::IsDetached(this) || !v27)
          {
            if (*((unsigned char *)this + 241) != 1
              || (unint64_t v23 = *((void *)this + 86), v23 < ot::MeshCoP::Timestamp::GetSeconds((ot::MeshCoP::Timestamp *)v34)))
            {
              *((void *)this + 86) = ot::MeshCoP::Timestamp::GetSeconds((ot::MeshCoP::Timestamp *)v34);
              *((unsigned char *)this + 685) = Channel;
              *((_WORD *)this + 34ot::Tlv::SetType(this, 3) = v31;
              ot::Mle::Mle::SetAttachState((unsigned __int8 *)this, 1u);
              ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 248), 0xFAu);
              ot::Mle::Mle::ResetAttachCounter((uint64_t)this);
              ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Delay processing Announce - channel %d, panid 0x%02x", v16, v17, v18, v19, v20, v21, Channel);
            }
          }
        }
      }
    }
    else
    {
      int v36 = 6;
    }
  }
  ot::Mle::Mle::LogProcessError(1u, v36);
}

void ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle *this, ot::Mle::Mle::RxInfo *a2)
{
  int v29 = this;
  uint64_t v28 = a2;
  int updated = 0;
  unsigned __int16 v26 = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v31);
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v30);
  int updated = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*(ot::Tlv **)v28, &v26, v2, v3);
  if (!updated)
  {
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v28 + 1));
    ot::Mle::Mle::Log(1, 5u, PeerAddr, v26);
    int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*(ot::Mle::Mle::RxMessage **)v28, (ot::Mle::Mle::Challenge *)v32, v5, v6, v7);
    if (ChallengeTlv)
    {
      if (ChallengeTlv != 23)
      {
        int updated = 6;
        goto LABEL_24;
      }
      unsigned char v32[8] = 0;
    }
    else
    {
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 4);
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 8);
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 5);
    }
    if (*((ot::Mle::Mle **)v28 + 3) != (ot::Mle::Mle *)((char *)this + 80))
    {
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 17);
      goto LABEL_19;
    }
    char v25 = 0;
    int v21 = ot::Tlv::Find<ot::Mle::StatusTlv>(*(ot::Tlv **)v28, &v25, v8, v9);
    if (v21)
    {
      if (v21 != 23)
      {
        int updated = 6;
        goto LABEL_24;
      }
    }
    else if (v25 == 1)
    {
      goto LABEL_12;
    }
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 80));
    if (v26 == Rloc16)
    {
      int updated = ot::Mle::Mle::HandleLeaderData(this, (ot::Mle::Mle::RxMessage **)v28, v11, v12, v13);
      if (updated) {
        goto LABEL_24;
      }
      if (!ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv(*(ot::Mle::Mle::RxMessage **)v28, (ot::Mac::CslAccuracy *)v24, v14, v15, v16))ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v30, 85); {
LABEL_19:
      }
      int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*(ot::Mle::Mle::RxMessage **)v28, (ot::Mle::Mle::TlvList *)v31, v17, v18, v19);
      if (TlvRequestTlv)
      {
        if (TlvRequestTlv != 23)
        {
          int updated = 6;
          goto LABEL_24;
        }
      }
      else
      {
        ot::Mle::Mle::TlvList::AddElementsFrom((ot::Mle::Mle::TlvList *)v30, (const ot::Mle::Mle::TlvList *)v31);
      }
      *((unsigned char *)v28 + 3ot::Tlv::SetType(this, 2) = 2;
      ot::Mle::Mle::ProcessKeySequence(this, v28);
      int updated = ot::Mle::Mle::SendChildUpdateResponse(this, (const ot::Mle::Mle::TlvList *)v30, (const ot::Mle::Mle::Challenge *)v32);
      goto LABEL_24;
    }
LABEL_12:
    ot::Mle::Mle::BecomeDetached(this);
    IgnoreError();
  }
LABEL_24:
  ot::Mle::Mle::LogProcessError(5u, updated);
}

void ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle *this, ot::Mle::Mle::RxMessage **a2)
{
  uint64_t v69 = this;
  uint64_t v68 = a2;
  int FrameCounterTlvs = 0;
  char v66 = 0;
  char v65 = 0;
  *(void *)&v64[1] = 0;
  v64[0] = 0;
  unsigned int v63 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 6u, PeerAddr);
  int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v68, (ot::Mle::Mle::Challenge *)v71, v3, v4, v5);
  if (ResponseTlv)
  {
    if (ResponseTlv != 23)
    {
      int FrameCounterTlvs = 6;
      goto LABEL_48;
    }
    char v72 = 0;
  }
  int v58 = *((unsigned __int8 *)this + 73);
  if (v58 == 1)
  {
    if (!ot::Mle::Mle::Challenge::operator==((ot::Mle::Mle::Challenge *)v71, (uint64_t)this + 400))
    {
      int FrameCounterTlvs = 8;
      goto LABEL_48;
    }
  }
  else
  {
    if (v58 != 2) {
      __assert_rtn("HandleChildUpdateResponse", "mle.cpp", 4935, "false");
    }
    if (v68[3] != (ot::Mle::Mle *)((char *)this + 80)
      || !ot::Neighbor::IsStateValid((ot::Mle::Mle *)((char *)this + 80)))
    {
      int FrameCounterTlvs = 8;
      goto LABEL_48;
    }
  }
  if (ot::Tlv::Find<ot::Mle::StatusTlv>(*v68, &v66, v6, v7))
  {
    int FrameCounterTlvs = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(*v68, &v65, v8, v9);
    if (!FrameCounterTlvs)
    {
      ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v62, v65);
      if (ot::Equatable<ot::Mle::DeviceMode>::operator==(&v62, (char *)this + 240))
      {
        int v57 = *((unsigned __int8 *)this + 73);
        if (v57 == 1)
        {
          int FrameCounterTlvs = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(*v68, (unsigned int *)&v64[3], (unsigned int *)&v64[1], v11);
          if (FrameCounterTlvs) {
            goto LABEL_48;
          }
          uint64_t v12 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
          ot::Ip6::Address::ToString(v12, (ot::StringWriter *)v70);
          ot::String<(unsigned short)40>::AsCString((uint64_t)v70);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d", v13, v14, v15, v16, v17, v18, (char)"HandleChildUpdateResponse");
          LinkFrameCounters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters((ot::Mle::Mle *)((char *)this + 80));
          ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, *(int *)&v64[3]);
          ot::Neighbor::SetLinkAckFrameCounter((uint64_t)this + 80, *(int *)&v64[3]);
          ot::Neighbor::SetMleFrameCounter((uint64_t)this + 80, *(int *)&v64[1]);
          ot::Neighbor::SetState((ot::Mle::Mle *)((char *)this + 80), 7);
          unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(this);
          ot::Mle::Mle::SetStateChild(this, Rloc16);
          *((unsigned char *)this + 7ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 72) & 0xFE | 1;
          if (ot::Mle::Mle::IsFullThreadDevice(this)) {
            *((unsigned char *)this + 7ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 72) & 0xFD | 2;
          }
        }
        else if (v57 != 2)
        {
          __assert_rtn("HandleChildUpdateResponse", "mle.cpp", 5043, "false");
        }
        int FrameCounterTlvs = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v68, v64, v10, v11);
        if (!FrameCounterTlvs)
        {
          int v56 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v64[0]);
          unsigned __int16 v21 = ot::Mle::Mle::GetRloc16(this);
          if (v56 == ot::Mle::RouterIdFromRloc16((ot::Mle *)v21))
          {
            int FrameCounterTlvs = ot::Mle::Mle::HandleLeaderData(this, v68, v22, v23, v24);
            if (!FrameCounterTlvs)
            {
              int v55 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v68, &v63, v25, v26);
              if (v55)
              {
                if (v55 != 23)
                {
                  int FrameCounterTlvs = 6;
                  goto LABEL_48;
                }
              }
              else if (v63 || !ot::Mle::Mle::IsDetachingGracefully(this))
              {
                *((_DWORD *)this + 168) = v63;
              }
              else
              {
                ot::Mle::Mle::Stop(this);
              }
              int CslClockAccuracyTlv = ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv(*v68, (ot::Mac::CslAccuracy *)v61, v27, v28, v29);
              if (CslClockAccuracyTlv)
              {
                if (CslClockAccuracyTlv != 23)
                {
                  int FrameCounterTlvs = 6;
                  goto LABEL_48;
                }
              }
              else
              {
                uint64_t v30 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
                ot::Mac::Mac::SetCslParentAccuracy(v30, (const ot::Mac::CslAccuracy *)v61);
                char ClockAccuracy = ot::Mac::CslAccuracy::GetClockAccuracy((ot::Mac::CslAccuracy *)v61);
                ot::Mac::CslAccuracy::GetUncertainty((ot::Mac::CslAccuracy *)v61);
                ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "ClockAccuracy Info-ChildUpdateResponse: Accuracy - %d, Uncertainty - %d", v31, v32, v33, v34, v35, v36, ClockAccuracy);
              }
              if (ot::Mle::Mle::IsRxOnWhenIdle(this))
              {
                uint64_t v45 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v45, 1, v46, v47, v48, v49, v50, v51);
              }
              else
              {
                uint64_t v37 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
                ot::DataPollSender::SetAttachMode(v37, 0);
                uint64_t v38 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::SetRxOnWhenIdle(v38, 0, v39, v40, v41, v42, v43, v44);
              }
              if (v72) {
                char v52 = 1;
              }
              else {
                char v52 = 2;
              }
              *((unsigned char *)v68 + 3ot::Tlv::SetType(this, 2) = v52;
            }
          }
          else
          {
            ot::Mle::Mle::BecomeDetached(this);
            IgnoreError();
          }
        }
      }
      else
      {
        int FrameCounterTlvs = 2;
      }
    }
  }
  else
  {
    ot::Mle::Mle::BecomeDetached(this);
    IgnoreError();
  }
LABEL_48:
  if (!FrameCounterTlvs && *((unsigned char *)this + 593) == 2)
  {
    *((unsigned char *)this + 59ot::Tlv::SetType(this, 2) = 0;
    *((unsigned char *)this + 59ot::Tlv::SetType(this, 3) = 0;
    ot::Mle::Mle::ScheduleMessageTransmissionTimer(this);
  }
  ot::Mle::Mle::LogProcessError(6u, FrameCounterTlvs);
}

void ot::Mle::Mle::HandleLinkMetricsManagementRequest(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  int v8 = 0;
  char v7 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 0x1Cu, PeerAddr);
  if (v9[3])
  {
    uint64_t v3 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
    int v8 = ot::LinkMetrics::Subject::HandleManagementRequest(v3, *v9, v9[3], &v7, v4);
    if (!v8)
    {
      uint64_t v5 = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(v9[1]);
      int v8 = ot::Mle::Mle::SendLinkMetricsManagementResponse((uint64_t)this, v5, v7);
      *((unsigned char *)v9 + 3ot::Tlv::SetType(this, 2) = 2;
    }
  }
  else
  {
    int v8 = 13;
  }
  ot::Mle::Mle::LogProcessError(0x1Cu, v8);
}

void ot::Mle::Mle::HandleLinkMetricsManagementResponse(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 0x1Du, PeerAddr);
  if (a2[3])
  {
    uint64_t v5 = (ot::LinkMetrics::Initiator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Initiator>(this);
    uint64_t v4 = *a2;
    uint64_t v3 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
    int v7 = ot::LinkMetrics::Initiator::HandleManagementResponse(v5, v4, v3);
    *((unsigned char *)a2 + 3ot::Tlv::SetType(this, 2) = 2;
    ot::Mle::Mle::LogProcessError(0x1Du, v7);
  }
  else
  {
    ot::Mle::Mle::LogProcessError(0x1Du, 13);
  }
}

void ot::Mle::Mle::HandleLinkProbe(ot::Mle::Mle *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  int v12 = 0;
  unsigned __int8 v11 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 0x1Eu, PeerAddr);
  uint64_t v3 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
  int v12 = ot::LinkMetrics::Subject::HandleLinkProbe(v3, *v13, (char *)&v11, v4, v5);
  if (!v12)
  {
    if (v13[3])
    {
      uint64_t v9 = v13[3];
      unsigned __int8 v7 = v11;
      AverageLqunsigned __int8 i = ot::Message::GetAverageLqi(*v13);
      char AverageRss = ot::Message::GetAverageRss(*v13);
      ot::Neighbor::AggregateLinkMetrics(v9, v7, 0, AverageLqi, AverageRss);
    }
    *((unsigned char *)v13 + 3ot::Tlv::SetType(this, 2) = 2;
  }
  ot::Mle::Mle::LogProcessError(0x1Eu, v12);
}

void ot::Mle::Mle::ProcessKeySequence(ot::Mle::Mle *this, ot::Mle::Mle::RxInfo *a2)
{
  unsigned int v36 = *((_DWORD *)a2 + 5);
  uint64_t v2 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  if (v36 > ot::KeyManager::GetCurrentKeySequence(v2))
  {
    int v35 = *((unsigned __int8 *)a2 + 32);
    if (*((unsigned char *)a2 + 32))
    {
      if (v35 == 1)
      {
        uint64_t v3 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::GetCurrentKeySequence(v3);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s Authoritative MLE msg with keySeq:%u, mCurrSeq:%u received, update keysequence", v4, v5, v6, v7, v8, v9, (char)"ProcessKeySequence");
        uint64_t v10 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        ot::KeyManager::SetCurrentKeySequence(v10, *((_DWORD *)a2 + 5));
      }
      else if (v35 == 2 && *((void *)a2 + 3) && ot::Neighbor::IsStateValid(*((ot::Neighbor **)a2 + 3)))
      {
        int v34 = *((_DWORD *)a2 + 5);
        unsigned __int8 v11 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
        if (v34 - ot::KeyManager::GetCurrentKeySequence(v11) == 1)
        {
          int v12 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          ot::KeyManager::GetCurrentKeySequence(v12);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s Peer MLE msg with keySeq:%u mCurrSeq:%u received, update keysequence", v13, v14, v15, v16, v17, v18, (char)"ProcessKeySequence");
          uint64_t v19 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
          ot::KeyManager::SetCurrentKeySequence(v19, *((_DWORD *)a2 + 5));
        }
        else
        {
          char Rloc16 = ot::Neighbor::GetRloc16(*((ot::Neighbor **)a2 + 3));
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Large key seq jump in peer class msg from 0x%04x ", v21, v22, v23, v24, v25, v26, Rloc16);
          ot::Mle::Mle::ReestablishLinkWithNeighbor(this, *((ot::Neighbor **)a2 + 3));
        }
      }
    }
    else
    {
      uint64_t v27 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      ot::KeyManager::GetCurrentKeySequence(v27);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "%s Unknown MLE msg with keySeq:%u, mCurrSeq:%u received", v28, v29, v30, v31, v32, v33, (char)"ProcessKeySequence");
    }
  }
}

uint64_t ot::ThreadLinkInfo::IsDstPanIdBroadcast(ot::ThreadLinkInfo *this)
{
  return (*((unsigned __int8 *)this + 5) >> 1) & 1;
}

{
  return ot::ThreadLinkInfo::IsDstPanIdBroadcast(this);
}

void ot::Mle::Mle::ReestablishLinkWithNeighbor(ot::Mle::Mle *this, ot::Neighbor *a2)
{
  if (ot::Mle::Mle::IsAttached(this) && ot::Neighbor::IsStateValid(a2))
  {
    if (ot::Mle::Mle::IsChild(this) && a2 == (ot::Mle::Mle *)((char *)this + 80))
    {
      ot::Mle::Mle::SendChildUpdateRequest((uint64_t)this, 1);
      IgnoreError();
    }
    else if (ot::Mle::Mle::IsFullThreadDevice(this))
    {
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
      if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16))
      {
        uint64_t v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::SendLinkRequest(v3, a2);
        IgnoreError();
      }
      else
      {
        uint64_t v4 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        if (ot::ChildTable::Contains(v4, a2))
        {
          ot::Neighbor::SetState(a2, 6);
          uint64_t v5 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::Mle::MleRouter::SendChildUpdateRequest(v5, a2);
          IgnoreError();
        }
      }
    }
  }
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(a1, a2, a3, a4);
}

void ot::Mle::Mle::Log(char a1, unsigned __int8 a2, ot::Ip6::Address *a3, unsigned __int16 a4)
{
  ot::String<(unsigned short)17>::String((uint64_t)v16);
  if (a4 != 65534) {
    ot::StringWriter::Append((ot::StringWriter *)v16, ",0x%04x", a4);
  }
  char v10 = ot::Mle::Mle::MessageActionToString(a1);
  ot::Mle::Mle::MessageTypeToString(a2);
  ot::Mle::Mle::MessageTypeActionToSuffixString(a2, a1);
  ot::Ip6::Address::ToString(a3, (ot::StringWriter *)v15);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v15);
  ot::String<(unsigned short)17>::AsCString((uint64_t)v16);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s %s%s (%s%s)", v4, v5, v6, v7, v8, v9, v10);
}

uint64_t ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::Mle::RxMessage *this, ot::Mle::LeaderData *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  unsigned int v7 = 0;
  unsigned int v7 = ot::Tlv::FindTlv<ot::Mle::LeaderDataTlv>(this, v6, a3, a4, a5);
  if (!v7)
  {
    if (ot::Mle::LeaderDataTlv::IsValid((ot::Mle::LeaderDataTlv *)v6)) {
      ot::Mle::LeaderDataTlv::Get((ot::Mle::LeaderDataTlv *)v6, v8);
    }
    else {
      return 6;
    }
  }
  return v7;
}

uint64_t ot::Neighbor::GetRouterId(ot::Neighbor *this)
{
  return (int)*((unsigned __int16 *)this + 14) >> 10;
}

{
  return ot::Neighbor::GetRouterId(this);
}

BOOL ot::Mle::Mle::RxInfo::IsNeighborStateValid(ot::Neighbor **this)
{
  BOOL v2 = 0;
  if (this[3]) {
    return ot::Neighbor::IsStateValid(this[3]);
  }
  return v2;
}

{
  return ot::Mle::Mle::RxInfo::IsNeighborStateValid(this);
}

BOOL ot::Mle::Mle::IsNetworkDataNewer(ot::Mle::Mle *this, const ot::Mle::LeaderData *a2)
{
  NetworkDataint Type = ot::Mle::Mle::GetNetworkDataType(this);
  Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)a2, NetworkDataType);
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  char v3 = ot::Mle::Mle::GetNetworkDataType(this);
  char Version = ot::NetworkData::LeaderBase::GetVersion(v8, v3);
  return ot::SerialNumber::IsGreater<unsigned char>(DataVersion, Version);
}

void ot::Mle::Mle::LogProcessError(unsigned __int8 a1, int a2)
{
}

uint64_t ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle *this, ot::Mle::Mle::RxMessage **a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  uint64_t v50 = this;
  uint64_t v49 = a2;
  unsigned int LeaderDataTlv = 0;
  int Timestamp = 0;
  char v43 = 0;
  char v42 = 0;
  unsigned __int16 v41 = 0;
  unsigned __int16 v40 = 0;
  unsigned __int16 v39 = 0;
  unsigned __int16 v38 = 0;
  unsigned __int16 v37 = 0;
  unsigned __int16 v36 = 0;
  char v35 = 0;
  unsigned int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*a2, (ot::Mle::LeaderData *)v47, a3, a4, a5);
  if (!LeaderDataTlv)
  {
    int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v47);
    if (PartitionId == ot::Mle::LeaderData::GetPartitionId((ot::Mle::Mle *)((char *)this + 64))
      && (int v31 = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v47),
          v31 == ot::Mle::LeaderData::GetWeighting((ot::Mle::Mle *)((char *)this + 64)))
      && (int v30 = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v47),
          v30 == ot::Mle::Mle::GetLeaderId(this)))
    {
      if ((*((unsigned char *)this + 72) & 1) == 0 && !ot::Mle::Mle::IsNetworkDataNewer(this, (const ot::Mle::LeaderData *)v47)) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!ot::Mle::Mle::IsChild(this))
      {
        unsigned int LeaderDataTlv = 2;
        goto LABEL_37;
      }
      unsigned int v28 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v47);
      char Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)v47);
      char LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)v47);
      ot::Mle::Mle::SetLeaderData(this, v28, Weighting, LeaderRouterId);
      *((unsigned char *)this + 7ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 72) & 0xFE | 1;
    }
    int v27 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(*v49, (uint64_t)v46, v5, v6, v7);
    if (v27)
    {
      if (v27 != 23)
      {
        unsigned int LeaderDataTlv = 6;
        goto LABEL_37;
      }
    }
    else
    {
      char v43 = 1;
      active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
      int Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
      if (!ot::Mle::Mle::IsLeader(this)
        && ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v46, Timestamp, v9)
        && ot::Tlv::FindTlvValueOffset(*v49, (const ot::Message *)0x18, &v39, &v38, v11))
      {
        char v35 = 1;
        goto LABEL_37;
      }
    }
    int v26 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(*v49, (uint64_t)v45, (uint64_t)v9, v10, v11);
    if (v26)
    {
      if (v26 != 23)
      {
        unsigned int LeaderDataTlv = 6;
        goto LABEL_37;
      }
    }
    else
    {
      char v42 = 1;
      uint64_t v14 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      int Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v14);
      if (!ot::Mle::Mle::IsLeader(this)
        && ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v45, Timestamp, v15)
        && ot::Tlv::FindTlvValueOffset(*v49, (const ot::Message *)0x19, &v37, &v36, v13))
      {
        char v35 = 1;
        goto LABEL_37;
      }
    }
    if (ot::Tlv::FindTlvValueOffset(*v49, (const ot::Message *)0xC, &v41, &v40, v13))
    {
      char v35 = 1;
    }
    else
    {
      uint64_t v25 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v47, 0);
      char v24 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v47, 1);
      NetworkDataint Type = ot::Mle::Mle::GetNetworkDataType(this);
      unsigned int LeaderDataTlv = ot::NetworkData::LeaderBase::SetNetworkData(v25, DataVersion, v24, NetworkDataType, *v49, v41, v40);
      if (!LeaderDataTlv)
      {
        if (ot::Mle::Mle::IsLeader(this))
        {
          uint64_t v17 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
          ot::NetworkData::Leader::IncrementVersionAndStableVersion(v17);
        }
        else
        {
          if ((v43 & 1) != 0 && v39)
          {
            uint64_t v18 = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
            ot::MeshCoP::ActiveDatasetManager::Save(v18, (const ot::MeshCoP::Timestamp *)v46, *v49, v39, v38);
            IgnoreError();
          }
          if ((v42 & 1) != 0 && v37)
          {
            uint64_t v19 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
            ot::MeshCoP::PendingDatasetManager::Save(v19, (const ot::MeshCoP::Timestamp *)v45, *v49, v37, v36);
            IgnoreError();
          }
        }
        *((unsigned char *)this + 72) &= ~1u;
      }
    }
  }
LABEL_37:
  if (v35)
  {
    SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v49[1]);
    if (ot::Ip6::Address::IsMulticast(SockAddr)) {
      unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0, 0x3E8u);
    }
    else {
      unsigned __int16 Uint16InRange = 10;
    }
    PeerAddr = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v49[1]);
    ot::Mle::Mle::SendDataRequestAfterDelay(this, PeerAddr, Uint16InRange);
    IgnoreError();
  }
  else if (!LeaderDataTlv)
  {
    *((unsigned char *)this + 59--*(unsigned char *)(this + 4) = 0;
    *((unsigned char *)this + 595) = 0;
  }
  return LeaderDataTlv;
}

void ot::RouterTable::FindRouterById(ot::RouterTable *this, unsigned __int8 a2)
{
  ot::AsConst<ot::RouterTable>();
  ot::RouterTable::FindRouterById(v2, a2);
  ot::AsNonConst<ot::Router>();
}

{
  ot::RouterTable::FindRouterById(this, a2);
}

uint64_t ot::Neighbor::SetLeaderFullDataVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  return this;
}

{
  return ot::Neighbor::SetLeaderFullDataVersion(this, a2);
}

uint64_t ot::Neighbor::SetLeaderStableDataVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::Neighbor::SetLeaderStableDataVersion(this, a2);
}

BOOL ot::SerialNumber::IsGreater<unsigned char>(char a1, char a2)
{
  return ot::SerialNumber::IsLess<unsigned char>(a2, a1);
}

{
  return ot::SerialNumber::IsGreater<unsigned char>(a1, a2);
}

BOOL ot::Mle::Mle::GetNetworkDataType(ot::Mle::Mle *this)
{
  return ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::Mle *)((char *)this + 240));
}

{
  return ot::Mle::Mle::GetNetworkDataType(this);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x16, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x17, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::Mle::IsBetterParent(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3, unsigned __int8 a4, ot::Mle::ConnectivityTlv *a5, unsigned __int16 a6, const ot::Mac::CslAccuracy *a7)
{
  TwoWayunsigned __int8 LinkQuality = ot::Router::GetTwoWayLinkQuality((ot::Router *)(a1 + 416));
  int v28 = ot::ThreeWayCompare<ot::LinkQuality>(a3, TwoWayLinkQuality);
  if (!v28)
  {
    BOOL IsActiveRouter = ot::Mle::IsActiveRouter((ot::Mle *)a2);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Neighbor *)(a1 + 416));
    BOOL v8 = ot::Mle::IsActiveRouter((ot::Mle *)Rloc16);
    int v28 = ot::ThreeWayCompare<BOOL>(IsActiveRouter, v8);
    if (!v28)
    {
      Parentunsigned __int8 Priority = ot::Mle::ConnectivityTlv::GetParentPriority(a5);
      int v28 = ot::ThreeWayCompare<signed char>(ParentPriority, *(unsigned char *)(a1 + 570));
      if (!v28)
      {
        unsigned __int8 LinkQuality3 = ot::Mle::ConnectivityTlv::GetLinkQuality3(a5);
        int v28 = ot::ThreeWayCompare<unsigned char>(LinkQuality3, *(unsigned char *)(a1 + 571));
        if (!v28)
        {
          unsigned __int16 Version = ot::Neighbor::GetVersion((ot::Neighbor *)(a1 + 416));
          int v28 = ot::ThreeWayCompare<unsigned short>(a6, Version);
          if (!v28)
          {
            SedBufferchar Size = ot::Mle::ConnectivityTlv::GetSedBufferSize(a5);
            int v28 = ot::ThreeWayCompare<unsigned short>(SedBufferSize, *(_WORD *)(a1 + 574));
            if (!v28)
            {
              unsigned __int8 SedDatagramCount = ot::Mle::ConnectivityTlv::GetSedDatagramCount(a5);
              int v28 = ot::ThreeWayCompare<unsigned char>(SedDatagramCount, *(unsigned char *)(a1 + 576));
              if (!v28)
              {
                unsigned __int8 LinkQuality2 = ot::Mle::ConnectivityTlv::GetLinkQuality2(a5);
                int v28 = ot::ThreeWayCompare<unsigned char>(LinkQuality2, *(unsigned char *)(a1 + 572));
                if (!v28)
                {
                  unsigned __int8 LinkQuality1 = ot::Mle::ConnectivityTlv::GetLinkQuality1(a5);
                  int v28 = ot::ThreeWayCompare<unsigned char>(LinkQuality1, *(unsigned char *)(a1 + 573));
                  if (!v28)
                  {
                    if (ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1)
                      || (unint64_t v26 = ot::Mle::Mle::CalcParentCslMetric((ot::Mle::Mle *)a1, a7),
                          CslAccuracy = (const ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy((ot::Parent *)(a1 + 416)),
                          unint64_t v25 = ot::Mle::Mle::CalcParentCslMetric((ot::Mle::Mle *)a1, CslAccuracy),
                          (int v28 = ot::ThreeWayCompare<unsigned long long>(v25, v26)) == 0))
                    {
                      int v28 = ot::ThreeWayCompare<unsigned char>(a4, *(unsigned char *)(a1 + 577));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ot::Neighbor::GetRloc16((ot::Neighbor *)(a1 + 416));
  unsigned int v18 = ot::Mle::ConnectivityTlv::GetParentPriority(a5);
  unsigned int v19 = *(char *)(a1 + 570);
  unsigned int v20 = ot::Mle::ConnectivityTlv::GetLinkQuality3(a5);
  unsigned int v21 = *(unsigned __int8 *)(a1 + 571);
  unsigned int v22 = ot::Neighbor::GetVersion((ot::Neighbor *)(a1 + 416));
  ot::Mle::ConnectivityTlv::GetSedBufferSize(a5);
  ot::Mle::ConnectivityTlv::GetSedDatagramCount(a5);
  ot::Mle::ConnectivityTlv::GetLinkQuality2(a5);
  ot::Mle::ConnectivityTlv::GetLinkQuality1(a5);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "MleRouter::IsBetterParent rval:%d, rloc:[0x%x, 0x%x], mesh:[%d %d], actRtr:[%d, %d], pPrio:[%d %d], lq3:[%d %d], vers:[%d %d], sedBufSz:[%d %d], sedDgmCnt:[%d %d], lq2:[%d %d], lq1:[%d %d] lm:[%d %d]", v22, a6, v21, v20, v19, v18, v28);
  return v28 > 0;
}

uint64_t ot::ThreeWayCompare<ot::LinkQuality>(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == a2)
  {
    return 0;
  }
  else if (a1 > (int)a2)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

{
  return ot::ThreeWayCompare<ot::LinkQuality>(a1, a2);
}

uint64_t ot::ThreeWayCompare<signed char>(char a1, char a2)
{
  if (a1 == a2)
  {
    return 0;
  }
  else if (a1 > a2)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

{
  return ot::ThreeWayCompare<signed char>(a1, a2);
}

uint64_t ot::ThreeWayCompare<unsigned char>(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == a2)
  {
    return 0;
  }
  else if (a1 > (int)a2)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

{
  return ot::ThreeWayCompare<unsigned char>(a1, a2);
}

uint64_t ot::Mle::ConnectivityTlv::GetLinkQuality3(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::Mle::ConnectivityTlv::GetLinkQuality3(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetSedBufferSize(ot::Mle::ConnectivityTlv *this)
{
  unsigned __int16 v3 = 1280;
  if (ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(this)) {
    return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 9));
  }
  return v3;
}

{
  return ot::Mle::ConnectivityTlv::GetSedBufferSize(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetSedDatagramCount(ot::Mle::ConnectivityTlv *this)
{
  unsigned __int8 v3 = 1;
  if (ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(this)) {
    return *((unsigned __int8 *)this + 11);
  }
  return v3;
}

{
  return ot::Mle::ConnectivityTlv::GetSedDatagramCount(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetLinkQuality2(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 4);
}

{
  return ot::Mle::ConnectivityTlv::GetLinkQuality2(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetLinkQuality1(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 5);
}

{
  return ot::Mle::ConnectivityTlv::GetLinkQuality1(this);
}

unint64_t ot::Mle::Mle::CalcParentCslMetric(ot::Mle::Mle *this, const ot::Mac::CslAccuracy *a2)
{
  unint64_t v4 = 1000000 * (unint64_t)ot::Mle::Mle::GetCslTimeout(this) / 0x26C0;
  unint64_t v3 = 9920 * v4 * (v4 + 1) / 0xF4240 * ot::Mac::CslAccuracy::GetClockAccuracy(a2);
  return v3 + (unsigned __int16)ot::Mac::CslAccuracy::GetUncertaintyInMicrosec(a2) * v4;
}

uint64_t ot::Parent::GetCslAccuracy(ot::Parent *this)
{
  return (uint64_t)this + 143;
}

{
  return ot::Parent::GetCslAccuracy(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x12u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(a1, a2, a3, a4);
}

uint64_t ot::Mle::Mle::RxMessage::ReadResponseTlv(ot::Mle::Mle::RxMessage *this, ot::Mle::Mle::Challenge *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(this, 4u, a2, a4, a5);
}

BOOL ot::Mle::Mle::Challenge::operator==(ot::Mle::Mle::Challenge *a1, uint64_t a2)
{
  return ot::Mle::Mle::Challenge::Matches(a1, (const unsigned __int8 *)a2, *(unsigned char *)(a2 + 8));
}

{
  return ot::Mle::Mle::Challenge::operator==(a1, a2);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(ot::Tlv *a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x10u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::ConnectivityTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xF, 0xCu, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::Mle::ConnectivityTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv(ot::Mle::Mle::RxMessage *this, ot::Mac::CslAccuracy *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  uint64_t v13 = this;
  int v12 = a2;
  unsigned int v11 = 0;
  unsigned int v11 = ot::Tlv::FindTlv<ot::Mle::CslClockAccuracyTlv>(this, v10, a3, a4, a5);
  if (!v11)
  {
    if (ot::Mle::CslClockAccuracyTlv::IsValid((ot::Mle::CslClockAccuracyTlv *)v10))
    {
      BOOL v8 = v12;
      Cslchar ClockAccuracy = ot::Mle::CslClockAccuracyTlv::GetCslClockAccuracy((ot::Mle::CslClockAccuracyTlv *)v10);
      ot::Mac::CslAccuracy::SetClockAccuracy(v8, CslClockAccuracy);
      uint64_t v9 = v12;
      Cslchar Uncertainty = ot::Mle::CslClockAccuracyTlv::GetCslUncertainty((ot::Mle::CslClockAccuracyTlv *)v10);
      ot::Mac::CslAccuracy::SetUncertainty((uint64_t)v9, CslUncertainty);
    }
    else
    {
      return 6;
    }
  }
  return v11;
}

uint64_t ot::Mle::ConnectivityTlv::GetIdSequence(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 7);
}

{
  return ot::Mle::ConnectivityTlv::GetIdSequence(this);
}

uint64_t ot::Mle::ConnectivityTlv::GetActiveRouters(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return ot::Mle::ConnectivityTlv::GetActiveRouters(this);
}

uint64_t ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(ot::Mle::Mle::RxMessage *this, unsigned int *a2, unsigned int *a3, unsigned __int16 *a4)
{
  unsigned int v9 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(this, a2, (uint64_t)a3, a4);
  if (!v9)
  {
    int v7 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(this, a3, v4, v5);
    if (v7)
    {
      if (v7 == 23) {
        *a3 = *a2;
      }
      else {
        return 6;
      }
    }
  }
  return v9;
}

uint64_t ot::Mle::Mle::RxMessage::ReadChallengeTlv(ot::Mle::Mle::RxMessage *this, ot::Mle::Mle::Challenge *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(this, 3u, a2, a4, a5);
}

uint64_t ot::Router::SetLinkQualityOut(uint64_t result, char a2)
{
  *(unsigned char *)(result + 14ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = *(unsigned char *)(result + 141) & 0xFC | a2 & 3;
  return result;
}

{
  return ot::Router::SetLinkQualityOut(result, a2);
}

uint64_t ot::Parent::SetLeaderCost(uint64_t this, char a2)
{
  *(unsigned char *)(this + 14ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::Parent::SetLeaderCost(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::GetLeaderCost(ot::Mle::ConnectivityTlv *this)
{
  return *((unsigned __int8 *)this + 6);
}

{
  return ot::Mle::ConnectivityTlv::GetLeaderCost(this);
}

uint64_t ot::Parent::SetCslAccuracy(uint64_t this, const ot::Mac::CslAccuracy *a2)
{
  *(_WORD *)(this + 14ot::Tlv::SetType(this, 3) = *(_WORD *)a2;
  return this;
}

{
  return ot::Parent::SetCslAccuracy(this, a2);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0xAu, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(a1, a2, a3, a4);
}

void *ot::Mle::Mle::ParentCandidate::CopyTo(ot::Mle::Mle::ParentCandidate *this, ot::Parent *a2)
{
  return memcpy(a2, this, 0x91uLL);
}

ot::Mle::Mle::TlvList *ot::Mle::Mle::TlvList::TlvList(ot::Mle::Mle::TlvList *this)
{
  return this;
}

{
  ot::Array<unsigned char,(unsigned short)32,unsigned char>::Array((uint64_t)this);
  return this;
}

void ot::Mle::Mle::TlvList::Add(ot::Mle::Mle::TlvList *this, char a2)
{
  uint64_t v10 = this;
  char v9 = a2;
  if (!ot::Array<unsigned char,(unsigned short)32,unsigned char>::Contains((uint64_t)this, (unsigned __int8 *)&v9))
  {
    if (ot::Array<unsigned char,(unsigned short)32,unsigned char>::PushBack((uint64_t)this, &v9)) {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Failed to include TLV %d", v2, v3, v4, v5, v6, v7, v9);
    }
  }
}

uint64_t ot::Tlv::Find<ot::Mle::StatusTlv>(ot::Tlv *a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0x11u, a2, a4);
}

{
  return ot::Tlv::Find<ot::Mle::StatusTlv>(a1, a2, a3, a4);
}

uint64_t ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::RxMessage *this, ot::Mle::Mle::TlvList *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v11 = 0;
  unsigned __int16 v10 = 0;
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)0xD, &v11, &v10, a5);
  if (!TlvValueOffset)
  {
    int v8 = v10;
    if (v8 > ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize())
    {
      LOBYTE(v1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize();
      unsigned __int16 v10 = v10;
    }
    unsigned __int16 v7 = v11;
    ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetArrayBuffer();
    ot::Message::ReadBytes(this, v7, v5, v10);
    ot::Array<unsigned char,(unsigned short)32,unsigned char>::SetLength((uint64_t)v13, v10);
  }
  return TlvValueOffset;
}

void ot::Mle::Mle::TlvList::AddElementsFrom(ot::Mle::Mle::TlvList *this, const ot::Mle::Mle::TlvList *a2)
{
  ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a2);
  while (v5 != (char *)v4)
    ot::Mle::Mle::TlvList::Add(this, *v5++);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(ot::Tlv *a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 1u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(a1, a2, a3, a4);
}

BOOL ot::Equatable<ot::Mle::DeviceMode>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 1uLL) == 0;
}

{
  return ot::Equatable<ot::Mle::DeviceMode>::operator==(a1, a2);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 2u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(a1, a2, a3, a4);
}

BOOL ot::Mle::Mle::IsDetachingGracefully(ot::Mle::Mle *this)
{
  return ot::Timer::IsRunning((ot::Mle::Mle *)((char *)this + 1040));
}

{
  return ot::Mle::Mle::IsDetachingGracefully(this);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::ChannelTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x14, 5u, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::Mle::ChannelTlv>(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::ChannelTlv::IsValid(ot::Mle::ChannelTlv *this)
{
  return ot::Tlv::GetLength(this) >= 3uLL;
}

{
  return ot::Mle::ChannelTlv::IsValid(this);
}

uint64_t ot::Mle::ChannelTlv::GetChannel(ot::Mle::ChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

{
  return ot::Mle::ChannelTlv::GetChannel(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x15u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)21,unsigned short>>(a1, a2, a3, a4);
}

BOOL ot::MeshCoP::Timestamp::IsOrphanTimestamp(ot::MeshCoP::Timestamp *this)
{
  BOOL v3 = 0;
  if (!ot::MeshCoP::Timestamp::GetSeconds(this))
  {
    BOOL v3 = 0;
    if (!(unsigned __int16)ot::MeshCoP::Timestamp::GetTicks(this)) {
      return ot::MeshCoP::Timestamp::GetAuthoritative(this);
    }
  }
  return v3;
}

{
  return ot::MeshCoP::Timestamp::IsOrphanTimestamp(this);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::LinkMetrics::Subject>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(a1);
}

uint64_t ot::Mle::Mle::GetNextHop(ot::Mle::Mle *this)
{
  if (ot::Neighbor::IsStateValid((ot::Mle::Mle *)((char *)this + 80))) {
    return (unsigned __int16)ot::Neighbor::GetRloc16((ot::Mle::Mle *)((char *)this + 80));
  }
  else {
    return (unsigned __int16)-2;
  }
}

uint64_t ot::Mle::Mle::GetParentInfo(uint64_t a1, ot::Router::Info *a2)
{
  unsigned int v4 = 0;
  if (ot::Mle::Mle::IsChild((ot::Mle::Mle *)a1)) {
    ot::Router::Info::SetFrom(a2, (const ot::Parent *)(a1 + 80));
  }
  else {
    return 13;
  }
  return v4;
}

BOOL ot::Mle::Mle::IsMeshLocalAddress(ot::Mle::Mle *this, const ot::Ip6::Address *a2)
{
  ot::Ip6::Address::GetPrefix(a2);
  uint64_t v6 = v2;
  ot::Mle::Mle::GetMeshLocalPrefix(this);
  return ot::Equatable<ot::Ip6::NetworkPrefix>::operator==(v6, v3);
}

uint64_t ot::Mle::Mle::CheckReachability(ot::Mle::Mle *this, unsigned __int16 a2, const ot::Ip6::Header *a3)
{
  char v17 = a2;
  if (a2 == (unsigned __int16)ot::Mle::Mle::GetRloc16(this)
    && (uint64_t v13 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this),
        BOOL v3 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3),
        !ot::Ip6::Netif::HasUnicastAddress(v13, v3)))
  {
    ot::Mle::Mle::GetRloc16(this);
    __int16 Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
    ot::Ip6::Address::ToString(Source, (ot::StringWriter *)v19);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v19);
    __int16 Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
    ot::Ip6::Address::ToString(Destination, (ot::StringWriter *)v18);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Check reachability to %hu returns NoRoute: rloc16:0x%x (ipv6.src:%s ipv6.dst:%s)", v6, v7, v8, v9, v10, v11, v17);
    return 4;
  }
  else
  {
    return 0;
  }
}

char *ot::Mle::Mle::MessageActionToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::MessageActionToString(ot::Mle::Mle::MessageAction)::kMessageActionStrings[a1];
}

char *ot::Mle::Mle::MessageTypeToString(unsigned __int8 a1)
{
  return ot::Mle::Mle::MessageTypeToString(ot::Mle::Mle::MessageType)::kMessageTypeStrings[a1];
}

const char *ot::Mle::Mle::MessageTypeActionToSuffixString(unsigned __int8 a1, char a2)
{
  uint64_t v8 = "";
  if (a1 <= 3u)
  {
    uint64_t v3 = a1 - 3;
    char v2 = 0;
  }
  else
  {
    uint64_t v3 = a1 - 3;
    char v2 = 1;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        uint64_t v8 = " - short";
        break;
      case 1:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        return v8;
      case 2:
      case 3:
        unsigned int v4 = " from parent";
        if (a2 != 1) {
          unsigned int v4 = " to parent";
        }
        uint64_t v8 = v4;
        break;
      case 10:
        uint64_t v8 = " to routers";
        break;
      case 11:
        uint64_t v8 = " to routers and REEDs";
        break;
      case 17:
      case 18:
        uint64_t v5 = " from child";
        if (a2 != 1) {
          uint64_t v5 = " to child";
        }
        uint64_t v8 = v5;
        break;
      case 19:
        uint64_t v6 = " from unknown child";
        if (a2 != 1) {
          uint64_t v6 = " to child";
        }
        uint64_t v8 = v6;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v8;
}

void ot::Mle::Mle::LogError(char a1, unsigned __int8 a2, int a3)
{
  if (a3)
  {
    if (a1 == 1 && (a3 == 2 || a3 == 4))
    {
      ot::Mle::Mle::MessageTypeToString(a2);
      ot::Mle::Mle::MessageTypeActionToSuffixString(a2, a1);
      ot::ErrorToString(a3);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Failed to %s %s%s: %s", v3, v4, v5, v6, v7, v8, (char)"process");
    }
    else
    {
      uint64_t v9 = "send";
      if (a1) {
        uint64_t v9 = "process";
      }
      char v16 = (char)v9;
      ot::Mle::Mle::MessageTypeToString(a2);
      ot::Mle::Mle::MessageTypeActionToSuffixString(a2, a1);
      ot::ErrorToString(a3);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Failed to %s %s%s: %s", v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void ot::Mle::Mle::LogSendError(unsigned __int8 a1, int a2)
{
}

uint64_t ot::Mle::Mle::SendLinkMetricsManagementRequest(ot::Mle::Mle *this, __n128 *a2, const ot::Tlv *a3)
{
  uint64_t v10 = this;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  unsigned int v7 = 0;
  uint64_t v6 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0x12u);
  if (v6)
  {
    ot::Mle::Tlv::SetType(v5, 88);
    char Size = ot::Tlv::GetSize(v8);
    ot::Tlv::SetLength((uint64_t)v5, Size);
    unsigned int v7 = ot::Message::Append<ot::Mle::Tlv>(v6, v5);
    if (!v7)
    {
      unsigned int v7 = ot::Tlv::AppendTo(v8, v6);
      if (!v7) {
        unsigned int v7 = ot::Mle::Mle::TxMessage::SendTo(v6, v9);
      }
    }
  }
  else
  {
    unsigned int v7 = 3;
  }
  if (v7 && v6) {
    ot::Message::Free(v6);
  }
  return v7;
}

uint64_t ot::Mle::Mle::AttachCslPeripheral(ot::Mle::Mle *this, const ot::Mac::ExtAddress *a2, unsigned __int16 a3, unsigned __int8 a4, char a5)
{
  char v69 = a5 & 1;
  char v5 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v6, v7, v8, v9, v10, v11, v5);
  Instance = ot::InstanceLocator::GetInstance(this);
  Deviceunsigned int Role = otThreadGetDeviceRole((uint64_t)Instance);
  if (DeviceRole == 4)
  {
    if (*((unsigned char *)this + 384))
    {
      unsigned int v68 = 13;
    }
    else
    {
      if ((v69 & 1) == 0) {
        *((unsigned char *)this + 111ot::Tlv::SetType(this, 3) = 0;
      }
      if (++*((unsigned char *)this + 1113) <= 3u)
      {
        *(void *)((char *)this + 111--*(unsigned char *)(this + 4) = *(void *)a2;
        *((_WORD *)this + 56ot::Tlv::SetType(this, 2) = a3;
        *((unsigned char *)this + 1126) = a4;
        *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 1;
        char v27 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v28, v29, v30, v31, v32, v33, v27);
        ot::Mle::Mle::SetThreadCoexConfig(this, 0, *((unsigned char *)this + 73), *((unsigned char *)this + 241));
        if (!ot::Mle::Mle::IsRxOnWhenIdle(this))
        {
          int v34 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
          ot::MeshForwarder::SetRxOnWhenIdle(v34, 0, v35, v36, v37, v38, v39, v40);
        }
        ot::WakeupTxScheduler::WakeUpPatternToInterval((ot::Mle::Mle *)((char *)this + 328), a4);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "In %s, aIntervalUs is %d, aDurationMs is %d, aWakeupPattern is %d", v41, v42, v43, v44, v45, v46, (char)"AttachCslPeripheral");
        unsigned int v68 = ot::WakeupTxScheduler::WakeUp((ot::Mle::Mle *)((char *)this + 328), a2, a3, a4, v47, v48, v49, v50);
      }
      else
      {
        *((unsigned char *)this + 111ot::Tlv::SetType(this, 3) = 0;
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Wakeup retry exceeded %s", v13, v14, v15, v16, v17, v18, (char)"AttachCslPeripheral");
        unsigned int v68 = 1;
        unint64_t v26 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
        ot::Notifier::Signal(v26, 0x1000000000);
      }
    }
  }
  else
  {
    char v19 = otThreadDeviceRoleToString(DeviceRole);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Central has to be in Leader role to wakeup, current role = %s, %s", v20, v21, v22, v23, v24, v25, v19);
    unsigned int v68 = 13;
  }
  if (v68 == 13)
  {
    char v51 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, Attach called in invalid state, %s", v52, v53, v54, v55, v56, v57, v51);
    return 13;
  }
  else
  {
    if (v68)
    {
      *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 0;
      char v58 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v59, v60, v61, v62, v63, v64, v58);
    }
    return v68;
  }
}

void ot::Mle::Mle::HandleCslWakeupTxInitiatedStartAttachTimer(ot::Mle::Mle *this)
{
  char v1 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v2, v3, v4, v5, v6, v7, v1);
  *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 2;
  int ConnectionWindowUs = ot::WakeupTxScheduler::GetConnectionWindowUs((ot::Mle::Mle *)((char *)this + 328));
  ot::TimerMicro::Start((ot::Mle::Mle *)((char *)this + 1088), ConnectionWindowUs + 1000 * *((unsigned __int16 *)this + 562));
  char v9 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v10, v11, v12, v13, v14, v15, v9);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s: Connection window open, mCslPeripheralAttachTimer.Start timer", v16, v17, v18, v19, v20, v21, (char)"HandleCslWakeupTxInitiatedStartAttachTimer");
}

uint64_t ot::WakeupTxScheduler::GetConnectionWindowUs(ot::WakeupTxScheduler *this)
{
  return 12 * *((unsigned __int16 *)this + 9) * *((unsigned __int8 *)this + 49);
}

{
  return ot::WakeupTxScheduler::GetConnectionWindowUs(this);
}

uint64_t ot::WakeupTxScheduler::GetTxEndTime(ot::WakeupTxScheduler *this)
{
  return *((unsigned int *)this + 3);
}

{
  return ot::WakeupTxScheduler::GetTxEndTime(this);
}

uint64_t ot::Mle::Mle::DetachCslPeripheral(ot::Mle::Mle *this)
{
  unsigned int v27 = 0;
  CslPeripheral = (ot::Child *)ot::Mle::Mle::GetCslPeripheral(this);
  if (ot::Mle::Mle::IsCslPeripheralAttached(this))
  {
    if (CslPeripheral)
    {
      *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 4;
      char v1 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v2, v3, v4, v5, v6, v7, v1);
      __int16 IndirectMessageCount = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)CslPeripheral
                                                                                                + 144));
      if (v9 | (IndirectMessageCount == 0)) {
        char v10 = 1;
      }
      else {
        char v10 = 0;
      }
      if (v10)
      {
        *((unsigned char *)this + 111ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 1112) & 0xFE | 1;
        uint64_t v17 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(this);
        ot::ChildSupervisor::SendMessage(v17, CslPeripheral);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s: Sending DetachCslPeripheral", v18, v19, v20, v21, v22, v23, (char)"DetachCslPeripheral");
      }
      else
      {
        ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)CslPeripheral + 144));
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s: Deferring DetachCslPeripheral as there are (%d) Indirect TX Messages in Q", v11, v12, v13, v14, v15, v16, (char)"DetachCslPeripheral");
      }
    }
    else
    {
      return 13;
    }
  }
  else
  {
    return 13;
  }
  return v27;
}

void ot::Mle::Mle::HandleSentFrameToNeighbor(ot::Mle::Mle *this, ot::Neighbor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 384) == 4)
  {
    if (*((unsigned char *)this + 1112))
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s: Completing DetachCslPeripheral", a3, a4, a5, a6, a7, a8, (char)"HandleSentFrameToNeighbor");
      *((unsigned char *)this + 1112) &= ~1u;
      uint64_t v24 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::MleRouter::RemoveNeighbor(v24, a2);
      ot::Mle::Mle::SetThreadCoexConfig(this, 0, *((unsigned char *)this + 73), *((unsigned char *)this + 241));
    }
    else
    {
      __int16 IndirectMessageCount = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Neighbor *)((char *)a2 + 144));
      if (v15 | (IndirectMessageCount == 0)) {
        char v16 = 1;
      }
      else {
        char v16 = 0;
      }
      if (v16)
      {
        *((unsigned char *)this + 111ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 1112) & 0xFE | 1;
        uint64_t v17 = (ot::ChildSupervisor *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildSupervisor>(this);
        ot::ChildSupervisor::SendMessage(v17, a2);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s: Sending DetachCslPeripheral", v18, v19, v20, v21, v22, v23, (char)"HandleSentFrameToNeighbor");
      }
      else
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s: Deferring DetachCslPeripheral again", v9, v10, v11, v12, v13, v14, (char)"HandleSentFrameToNeighbor");
      }
    }
  }
}

uint64_t ot::Mle::Mle::WedWakeUpPattern(ot::Mle::Mle *this)
{
  unsigned __int8 v21 = 2;
  unsigned __int8 BTLoad = ot::Mle::Mle::getBTLoad(this);
  ot::Mle::Mle::LogCoExLoad(this);
  if (ot::Mle::Mle::getAudioTaskId(this) == 6) {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s BT audio task is LEA 5ms(%d), set the wake up pattern as %d", v1, v2, v3, v4, v5, v6, (char)"WedWakeUpPattern");
  }
  unsigned __int8 WiFiStateId = ot::Mle::Mle::getWiFiStateId(this);
  char WiFiP2PStatus = ot::Mle::Mle::getWiFiP2PStatus(this);
  if (WiFiStateId <= 1u) {
    goto LABEL_15;
  }
  if (WiFiStateId == 2)
  {
    if (BTLoad >= 0x55u) {
      char v14 = 1;
    }
    else {
      char v14 = 2;
    }
    unsigned __int8 v21 = v14;
    goto LABEL_25;
  }
  if (WiFiStateId == 4 || WiFiStateId == 3)
  {
LABEL_15:
    if (WiFiP2PStatus && WiFiStateId)
    {
      if (BTLoad >= 0x55u) {
        char v15 = 1;
      }
      else {
        char v15 = 2;
      }
      unsigned __int8 v21 = v15;
    }
    else if (BTLoad < 0x7Eu)
    {
      if (BTLoad >= 0x55u) {
        unsigned __int8 v21 = 2;
      }
      else {
        unsigned __int8 v21 = 3;
      }
    }
    else
    {
      unsigned __int8 v21 = 1;
    }
  }
LABEL_25:
  if (v21 == 3) {
    unsigned __int8 v21 = 2;
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "BT Load: %s, set WED wakeup pattern %d", v7, v8, v9, v10, v11, v12, (char)"WedWakeUpPattern");
  return v21;
}

uint64_t ot::Mle::Mle::getEcslPeriod(ot::Mle::Mle *this)
{
  ot::Mle::Mle::LogCoExLoad(this);
  char AudioTaskId = ot::Mle::Mle::getAudioTaskId(this);
  if (v8 | (AudioTaskId == 0)) {
    char v9 = 0;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) != 0 || ot::Mle::Mle::hasHIDConnected(this) || ot::Mle::Mle::getWiFiStateId(this) == 2) {
    unsigned __int16 v12 = 375;
  }
  else {
    unsigned __int16 v12 = 250;
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s, eCSL Period= %d mSec", v2, v3, v4, v5, v6, v7, (char)"getEcslPeriod");
  return v12;
}

uint64_t ot::Mle::Mle::DetachGracefully(ot::Mle::Mle *this, void (*a2)(void *), uint64_t a3)
{
  unsigned int v9 = 0;
  unsigned int v8 = 1000;
  if (ot::Mle::Mle::IsDetachingGracefully(this))
  {
    return 5;
  }
  else
  {
    if (ot::CallbackBase<void (*)(void *)>::IsSet((void *)this + 133)) {
      __assert_rtn("DetachGracefully", "mle.cpp", 6070, "!mDetachGracefullyCallback.IsSet()");
    }
    ot::CallbackBase<void (*)(void *)>::Set((void *)this + 133, (uint64_t)a2, a3);
    if (*((unsigned char *)this + 73))
    {
      uint64_t v4 = *((unsigned __int8 *)this + 73);
      char v3 = 1;
    }
    else
    {
      uint64_t v4 = *((unsigned __int8 *)this + 73);
      char v3 = 0;
    }
    if ((v3 & 1) == 0)
    {
      switch(v4)
      {
        case 0:
        case 1:
          unsigned int v8 = 0;
          break;
        case 2:
          ot::Mle::Mle::SendChildUpdateRequest((uint64_t)this, 2);
          IgnoreError();
          break;
        case 3:
          uint64_t v5 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::Mle::MleRouter::SendAddressRelease(v5);
          break;
        case 4:
          break;
        default:
          JUMPOUT(0);
      }
    }
    ot::TimerMilli::Start((ot::Mle::Mle *)((char *)this + 1040), v8);
  }
  return v9;
}

void *ot::CallbackBase<void (*)(void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *)>::Set(result, a2, a3);
}

BOOL ot::Array<unsigned char,(unsigned short)32,unsigned char>::Contains(uint64_t a1, unsigned __int8 *a2)
{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::Find(a1, a2) != 0;
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::Contains(a1, a2);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::PushBack(uint64_t a1, char *a2)
{
  if (ot::Array<unsigned char,(unsigned short)32,unsigned char>::IsFull(a1))
  {
    return 3;
  }
  else
  {
    char v2 = *a2;
    uint64_t v3 = (*(unsigned char *)(a1 + 32))++;
    *(unsigned char *)(a1 + vot::Tlv::SetType(this, 3) = v2;
    return 0;
  }
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::PushBack(a1, a2);
}

BOOL ot::Mle::Mle::Challenge::Matches(ot::Mle::Mle::Challenge *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v4 = 0;
  if (*((unsigned __int8 *)this + 8) == a3) {
    return memcmp(this, a2, a3) == 0;
  }
  return v4;
}

uint64_t ot::Message::Read<ot::Mle::Mle::DelayedResponseMetadata>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x14u);
}

{
  return ot::Message::Read<ot::Mle::Mle::DelayedResponseMetadata>(a1, a2, a3);
}

unsigned char *ot::Mle::Mle::SecurityHeader::InitSecurityControl(unsigned char *this)
{
  *this = 21;
  return this;
}

{
  return ot::Mle::Mle::SecurityHeader::InitSecurityControl(this);
}

uint64_t ot::Message::Append<ot::Mle::Mle::SecurityHeader>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0xAu);
}

{
  return ot::Message::Append<ot::Mle::Mle::SecurityHeader>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::Mle::StatusTlv>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 0x11u, a2);
}

{
  return ot::Tlv::Append<ot::Mle::StatusTlv>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 2u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)3>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)3, a2, (const void *)a3);
}

{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)3>>(a1, a2, a3);
}

uint64_t ot::Mle::Mle::TxMessage::AppendChallengeTlv(ot::Mle::Mle::TxMessage *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)3>>(this, a2, a3);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)4>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)4, a2, (const void *)a3);
}

{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)4>>(a1, a2, a3);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::KeyManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::KeyManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::KeyManager>(a1);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 5u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 8u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddress16Tlv(ot::Mle::Mle::TxMessage *this, unsigned __int16 a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(this, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0xAu, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(a1, a2);
}

uint64_t ot::Mle::LeaderDataTlv::Init(ot::Mle::LeaderDataTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 8);
}

{
  return ot::Mle::LeaderDataTlv::Init(this);
}

uint64_t ot::Mle::LeaderDataTlv::Set(ot::Mle::LeaderDataTlv *this, const ot::Mle::LeaderData *a2)
{
  int PartitionId = (ot::Encoding::BigEndian *)ot::Mle::LeaderData::GetPartitionId(a2);
  *(_DWORD *)((char *)this + ot::Tlv::SetType(this, 2) = ot::Encoding::BigEndian::HostSwap32(PartitionId);
  *((unsigned char *)this + 6) = ot::Mle::LeaderData::GetWeighting(a2);
  *((unsigned char *)this + ot::Tlv::SetType(this, 7) = ot::Mle::LeaderData::GetDataVersion((uint64_t)a2, 0);
  *((unsigned char *)this + 8) = ot::Mle::LeaderData::GetDataVersion((uint64_t)a2, 1);
  uint64_t result = ot::Mle::LeaderData::GetLeaderRouterId(a2);
  *((unsigned char *)this + 9) = result;
  return result;
}

{
  return ot::Mle::LeaderDataTlv::Set(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::Message *a1, char a2)
{
  unsigned int v8 = a1;
  char v7 = a2;
  int v6 = 0;
  unsigned __int8 v5 = 0;
  if (*(unsigned char *)(ot::GetProvider<ot::Message>::Get<ot::Mle::Mle>(a1) + 72))
  {
    return 13;
  }
  else
  {
    unsigned __int8 v5 = -2;
    char v2 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(a1);
    ot::NetworkData::NetworkData::CopyNetworkData(v2, v7, v9, (char *)&v5);
    IgnoreError();
    return ot::Tlv::Append<ot::TlvInfo<(unsigned char)12>>(a1, v9, v5);
  }
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)12>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0xC, a2, (const void *)a3);
}

{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)12>>(a1, a2, a3);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)13>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0xD, a2, (const void *)a3);
}

{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)13>>(a1, a2, a3);
}

uint64_t ot::Tlv::Append<ot::Mle::ScanMaskTlv>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 0xEu, a2);
}

{
  return ot::Tlv::Append<ot::Mle::ScanMaskTlv>(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(ot::Mle::Mle::TxMessage *this, unsigned __int8 a2)
{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(this, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 0x10u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x12u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(ot::Mle::Mle::TxMessage *this, unsigned __int8 a2, const ot::Ip6::Address *a3)
{
  unsigned int v9 = this;
  unsigned __int8 v8 = a2;
  char v7 = a3;
  unsigned char v6[4] = 0;
  *(_DWORD *)int v6 = ot::Mle::AddressRegistrationTlv::ControlByteFor((ot::Mle::AddressRegistrationTlv *)a2);
  *(_DWORD *)&v6[1] = ot::Message::Append<unsigned char>(this, v6);
  if (!*(_DWORD *)&v6[1])
  {
    Iid = (char *)ot::Ip6::Address::GetIid(v7);
    *(_DWORD *)&v6[1] = ot::Message::Append<ot::Ip6::InterfaceIdentifier>(this, Iid);
  }
  return *(unsigned int *)&v6[1];
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::ThreadNetif>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::ThreadNetif>(a1);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::DuaManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::DuaManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::DuaManager>(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddressEntry(ot::Mle::Mle::TxMessage *this, const ot::Ip6::Address *a2)
{
  char v7 = this;
  int v6 = (char *)a2;
  unsigned int v5 = 0;
  char v4 = 0;
  unsigned int v5 = ot::Message::Append<unsigned char>(this, &v4);
  if (!v5) {
    return ot::Message::Append<ot::Ip6::Address>(this, v6);
  }
  return v5;
}

uint64_t ot::Ip6::Netif::IterateExternalMulticastAddresses(uint64_t a1, char a2)
{
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::Builder((uint64_t)&v3, a1, a2);
  return v3;
}

{
  return ot::Ip6::Netif::IterateExternalMulticastAddresses(a1, a2);
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin@<X0>(ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *this@<X0>, uint64_t a2@<X8>)
{
  return ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(a2, *(void *)this, *((unsigned char *)this + 8));
}

{
  return ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin(this, a2);
}

void *ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end@<X0>(ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *this@<X0>, void *a2@<X8>)
{
  return ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(a2, *(void *)this);
}

{
  return ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(this, a2);
}

BOOL ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*(a1);
}

void ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(ot::Ip6::Netif::ExternalMulticastAddress **a1)
{
}

{
  ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(a1);
}

uint64_t ot::Message::Write<ot::Mle::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 2u);
}

{
  return ot::Message::Write<ot::Mle::Tlv>(a1, a2, a3);
}

uint64_t ot::Mle::AddressRegistrationTlv::ControlByteFor(ot::Mle::AddressRegistrationTlv *this)
{
  return this & 0xF | 0x80u;
}

{
  return ot::Mle::AddressRegistrationTlv::ControlByteFor(this);
}

uint64_t ot::Message::Append<ot::Ip6::InterfaceIdentifier>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 8u);
}

{
  return ot::Message::Append<ot::Ip6::InterfaceIdentifier>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x1Bu, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(a1, a2);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::MeshCoP::ActiveDatasetManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::ActiveDatasetManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::MeshCoP::ActiveDatasetManager>(a1);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::MeshCoP::PendingDatasetManager>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::MeshCoP::PendingDatasetManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::MeshCoP::PendingDatasetManager>(a1);
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)0x17, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(a1, a2);
}

uint64_t ot::Mle::CslChannelTlv::Init(ot::Mle::CslChannelTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 3);
}

{
  return ot::Mle::CslChannelTlv::Init(this);
}

uint64_t ot::Mle::CslChannelTlv::SetChannelPage(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::Mle::CslChannelTlv::SetChannelPage(this, a2);
}

uint64_t ot::Mle::CslChannelTlv::SetChannel(ot::Mle::CslChannelTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + ot::Tlv::SetType(this, 3) = result;
  return result;
}

{
  return ot::Mle::CslChannelTlv::SetChannel(this, a2);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::Mac::Mac>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::Mac::Mac>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::Mac::Mac>(a1);
}

uint64_t ot::Message::Append<ot::Mle::CslChannelTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 5u);
}

{
  return ot::Message::Append<ot::Mle::CslChannelTlv>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 0x55u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned __int8 v8 = this;
  uint64_t v1 = (ot::Radio *)ot::GetProvider<ot::Message>::Get<ot::Radio>(this);
  Cslchar Uncertainty = ot::Radio::GetCslUncertainty(v1);
  ot::Mle::CslClockAccuracyTlv::Init((ot::Mle::CslClockAccuracyTlv *)v7);
  char v2 = (ot::Radio *)ot::GetProvider<ot::Message>::Get<ot::Radio>(this);
  char CslAccuracy = ot::Radio::GetCslAccuracy(v2);
  ot::Mle::CslClockAccuracyTlv::SetCslClockAccuracy((uint64_t)v7, CslAccuracy);
  ot::Mle::CslClockAccuracyTlv::SetCslUncertainty((uint64_t)v7, 10 * CslUncertainty);
  return ot::Message::Append<ot::Mle::CslClockAccuracyTlv>(this, v7);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::Radio>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::Radio>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::Radio>(a1);
}

uint64_t ot::Mle::CslClockAccuracyTlv::Init(ot::Mle::CslClockAccuracyTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 2);
}

{
  return ot::Mle::CslClockAccuracyTlv::Init(this);
}

uint64_t ot::Mle::CslClockAccuracyTlv::SetCslClockAccuracy(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::Mle::CslClockAccuracyTlv::SetCslClockAccuracy(this, a2);
}

uint64_t ot::Mle::CslClockAccuracyTlv::SetCslUncertainty(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 3) = a2;
  return this;
}

{
  return ot::Mle::CslClockAccuracyTlv::SetCslUncertainty(this, a2);
}

uint64_t ot::Message::Append<ot::Mle::CslClockAccuracyTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<ot::Mle::CslClockAccuracyTlv>(a1, a2);
}

uint64_t ot::Mle::Mle::SecurityHeader::SetFrameCounter(ot::Mle::Mle::SecurityHeader *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::LittleEndian::HostSwap32(a2);
  *(_DWORD *)((char *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

{
  return ot::Mle::Mle::SecurityHeader::SetFrameCounter(this, a2);
}

uint64_t ot::Mle::Mle::SecurityHeader::SetKeyId(ot::Mle::Mle::SecurityHeader *this, unsigned int a2)
{
  char v4 = a2;
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 5) = result;
  *((unsigned char *)this + 9) = (v4 & 0x7F) + 1;
  return result;
}

{
  return ot::Mle::Mle::SecurityHeader::SetKeyId(this, a2);
}

uint64_t ot::Message::Write<ot::Mle::Mle::SecurityHeader>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::WriteBytes(a1, a2, a3, 0xAu);
}

{
  return ot::Message::Write<ot::Mle::Mle::SecurityHeader>(a1, a2, a3);
}

uint64_t ot::Mle::Mle::DelayedResponseMetadata::AppendTo(ot::Mle::Mle::DelayedResponseMetadata *this, ot::Message *a2)
{
  return ot::Message::Append<ot::Mle::Mle::DelayedResponseMetadata>(a2, (char *)this);
}

{
  return ot::Mle::Mle::DelayedResponseMetadata::AppendTo(this, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendConnectivityTlv(ot::Mle::Mle::TxMessage *this)
{
  unsigned int v5 = this;
  ot::Mle::ConnectivityTlv::Init((ot::Mle::ConnectivityTlv *)v4);
  uint64_t v1 = (ot::Mle::MleRouter *)ot::GetProvider<ot::Message>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::MleRouter::FillConnectivityTlv(v1, (ot::Mle::ConnectivityTlv *)v4);
  return ot::Tlv::AppendTo((ot::Tlv *)v4, this);
}

uint64_t ot::Mle::ConnectivityTlv::Init(ot::Mle::ConnectivityTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 10);
}

{
  return ot::Mle::ConnectivityTlv::Init(this);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::Mle::MleRouter>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::Mle::MleRouter>(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::TxMessage *this, ot::Child *a2)
{
  uint64_t v18 = this;
  uint64_t v17 = a2;
  unsigned int appended = 0;
  unsigned __int16 Length = ot::Message::GetLength(this);
  ot::Mle::Tlv::SetType(v15, 19);
  unsigned int appended = ot::Message::Append<ot::Mle::Tlv>(this, v15);
  if (!appended)
  {
    v10[0] = ot::Child::IterateIp6Addresses((uint64_t)v17, 0);
    v10[1] = v2;
    uint64_t v11 = (ot::Child::AddressIteratorBuilder *)v10;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v10, (uint64_t)v9);
    ot::Child::AddressIteratorBuilder::end(v11, (uint64_t)v8);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v9, (uint64_t)v8))
    {
      char v7 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v9);
      if (ot::Ip6::Address::IsMulticast(v7)
        || (uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::Message>::Get<ot::NetworkData::Leader>(this),
            ot::NetworkData::LeaderBase::GetContext(v3, v7, (ot::Ip6::Prefix *)v13)))
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressEntry(this, v7);
        if (appended) {
          return appended;
        }
      }
      else if (v14)
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(this, v14, v7);
        if (appended) {
          return appended;
        }
      }
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v9);
    }
    char v4 = ot::Message::GetLength(this);
    ot::Tlv::SetLength((uint64_t)v15, v4 - Length - 2);
    ot::Message::Write<ot::Mle::Tlv>(this, Length, v15);
  }
  return appended;
}

uint64_t ot::Child::IterateIp6Addresses(uint64_t a1, char a2)
{
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::Builder((uint64_t)&v3, a1, a2);
  return v3;
}

{
  return ot::Child::IterateIp6Addresses(a1, a2);
}

uint64_t ot::Child::AddressIteratorBuilder::begin@<X0>(ot::Child::AddressIteratorBuilder *this@<X0>, uint64_t a2@<X8>)
{
  return ot::Child::AddressIterator::AddressIterator(a2, *(void *)this, *((unsigned char *)this + 8));
}

{
  return ot::Child::AddressIteratorBuilder::begin(this, a2);
}

uint64_t ot::Child::AddressIteratorBuilder::end@<X0>(ot::Child::AddressIteratorBuilder *this@<X0>, uint64_t a2@<X8>)
{
  return ot::Child::AddressIterator::AddressIterator(a2, *(void *)this);
}

{
  return ot::Child::AddressIteratorBuilder::end(this, a2);
}

BOOL ot::Unequatable<ot::Child::AddressIterator>::operator!=(uint64_t a1, uint64_t a2)
{
  return !ot::Child::AddressIterator::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Child::AddressIterator>::operator!=(a1, a2);
}

uint64_t ot::Child::AddressIterator::operator*(ot::Child::AddressIterator *a1)
{
  return ot::Child::AddressIterator::GetAddress(a1);
}

{
  return ot::Child::AddressIterator::operator*(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Mle::Mle::TxMessage *this, ot::Neighbor *a2)
{
  ot::Mle::RouteTlv::Init((ot::Mle::RouteTlv *)v6);
  uint64_t v2 = (ot::RouterTable *)ot::GetProvider<ot::Message>::Get<ot::RouterTable>(this);
  ot::RouterTable::FillRouteTlv(v2, (ot::Mle::RouteTlv *)v6, a2);
  return ot::Tlv::AppendTo((ot::Tlv *)v6, this);
}

uint64_t ot::GetProvider<ot::Message>::Get<ot::RouterTable>(ot::Message *a1)
{
  Instance = ot::Message::GetInstance(a1);
  return ot::Instance::Get<ot::RouterTable>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::Message>::Get<ot::RouterTable>(a1);
}

uint64_t ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv(ot::Mle::Mle::TxMessage *this)
{
  active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  return ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(active, this);
}

uint64_t ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv(ot::Mle::Mle::TxMessage *this)
{
  uint64_t v1 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::Message>::Get<ot::MeshCoP::PendingDatasetManager>(this);
  return ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(v1, this);
}

uint64_t ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(ot::Mle::Mle::RxMessage *this, unsigned __int8 a2, ot::Mle::Mle::Challenge *a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned __int16 v12 = this;
  unsigned __int8 v11 = a2;
  uint64_t v10 = a3;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v8 = 0;
  unsigned __int16 v7 = 0;
  TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(this, (const ot::Message *)a2, &v8, &v7, a5);
  if (!TlvValueOffset)
  {
    if (v7 >= 4u)
    {
      unsigned __int16 v7 = ot::Min<unsigned short>(v7, 8u);
      ot::Message::ReadBytes(this, v8, (char *)v10, v7);
      *((unsigned char *)v10 + 8) = v7;
    }
    else
    {
      return 6;
    }
  }
  return TlvValueOffset;
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 5u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 8u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::LeaderDataTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xB, 0xAu, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::Mle::LeaderDataTlv>(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::LeaderDataTlv::IsValid(ot::Mle::LeaderDataTlv *this)
{
  return ot::Tlv::GetLength(this) >= 8uLL;
}

{
  return ot::Mle::LeaderDataTlv::IsValid(this);
}

uint64_t ot::Mle::LeaderDataTlv::Get(ot::Mle::LeaderDataTlv *this, ot::Mle::LeaderData *a2)
{
  int v2 = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
  ot::Mle::LeaderData::SetPartitionId(a2, v2);
  ot::Mle::LeaderData::SetWeighting((uint64_t)a2, *((unsigned char *)this + 6));
  ot::Mle::LeaderData::SetDataVersion((uint64_t)a2, *((unsigned char *)this + 7));
  ot::Mle::LeaderData::SetStableDataVersion((uint64_t)a2, *((unsigned char *)this + 8));
  return ot::Mle::LeaderData::SetLeaderRouterId((uint64_t)a2, *((unsigned char *)this + 9));
}

{
  return ot::Mle::LeaderDataTlv::Get(this, a2);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize()
{
  return 32;
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize();
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::SetLength(uint64_t result, char a2)
{
  *(unsigned char *)(result + 3ot::Tlv::SetType(this, 2) = a2;
  return result;
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::SetLength(result, a2);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::CslClockAccuracyTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x56, 4u, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::Mle::CslClockAccuracyTlv>(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::CslClockAccuracyTlv::IsValid(ot::Mle::CslClockAccuracyTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return ot::Mle::CslClockAccuracyTlv::IsValid(this);
}

unsigned char *ot::Mac::CslAccuracy::SetClockAccuracy(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

{
  return ot::Mac::CslAccuracy::SetClockAccuracy(this, a2);
}

uint64_t ot::Mle::CslClockAccuracyTlv::GetCslClockAccuracy(ot::Mle::CslClockAccuracyTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::Mle::CslClockAccuracyTlv::GetCslClockAccuracy(this);
}

uint64_t ot::Mac::CslAccuracy::SetUncertainty(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  return this;
}

{
  return ot::Mac::CslAccuracy::SetUncertainty(this, a2);
}

uint64_t ot::Mle::CslClockAccuracyTlv::GetCslUncertainty(ot::Mle::CslClockAccuracyTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::Mle::CslClockAccuracyTlv::GetCslUncertainty(this);
}

uint64_t ot::Mle::Mle::RxMessage::ReadRouteTlv(ot::Mle::Mle::RxMessage *this, ot::Mle::RouteTlv *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  unsigned int v6 = ot::Tlv::FindTlv<ot::Mle::RouteTlv>(this, a2, a3, a4, a5);
  if (!v6 && !ot::Mle::RouteTlv::IsValid(a2)) {
    return 6;
  }
  return v6;
}

uint64_t ot::Tlv::FindTlv<ot::Mle::RouteTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)9, 0x4Au, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::Mle::RouteTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::GetArrayLength<char const*,(unsigned short)11>()
{
  return 11;
}

{
  return ot::GetArrayLength<char const*,(unsigned short)11>();
}

uint64_t *std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:nn180100]<long long,std::ratio<1l,1000l>,0>(uint64_t *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t *result;
  void v5[3];

  char v5[2] = a1;
  v5[1] = a2;
  v5[0] = std::chrono::duration_cast[abi:nn180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>,long long,std::ratio<1l,1000l>,0>(a2);
  int v2 = std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100]((uint64_t)v5);
  uint64_t result = a1;
  *a1 = v2;
  return result;
}

uint64_t std::chrono::duration_cast[abi:nn180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>,long long,std::ratio<1l,1000l>,0>(uint64_t a1)
{
  uint64_t v3 = a1;
  return std::chrono::__duration_cast<std::chrono::duration<long long,std::ratio<1l,1000l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>,std::ratio<1000l,1l>,false,true>::operator()[abi:nn180100]((uint64_t)&v2, a1);
}

uint64_t std::chrono::__duration_cast<std::chrono::duration<long long,std::ratio<1l,1000l>>,std::chrono::duration<long long,std::ratio<1l,1000000l>>,std::ratio<1000l,1l>,false,true>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void v3[2] = a1;
  v3[1] = a2;
  v3[0] = 1000 * std::__wrap_iter<ot::Ip6::Address *>::operator*[abi:nn180100](a2);
  std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:nn180100]<long long,0>(&v4, v3);
  return v4;
}

void *std::chrono::duration<long long,std::ratio<1l,1000000l>>::duration[abi:nn180100]<long long,0>(void *a1, void *a2)
{
  return a1;
}

void *ot::Clearable<ot::SettingsBase::ParentInfo>::Clear(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  *(void *)((char *)result + 1--*(unsigned char *)(this + 4) = 0;
  return result;
}

{
  return ot::Clearable<ot::SettingsBase::ParentInfo>::Clear(result);
}

void *ot::Clearable<ot::SettingsBase::NetworkInfo>::Clear(void *a1)
{
  return memset(a1, 0, 0x2FuLL);
}

{
  return ot::Clearable<ot::SettingsBase::NetworkInfo>::Clear(a1);
}

BOOL ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::IsDone(void *a1)
{
  return *a1 == 0;
}

{
  return ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::IsDone(a1);
}

uint64_t ot::Mle::Mle::RxInfo::RxInfo(uint64_t this, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  *(void *)this = a2;
  *(void *)(this + 8) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 2ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 0;
  *(void *)(this + 2--*(unsigned char *)(this + 4) = 0;
  *(unsigned char *)(this + 3ot::Tlv::SetType(this, 2) = 0;
  return this;
}

BOOL ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(ot::Mle::ConnectivityTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0xAuLL;
}

{
  return ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(this);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::Array(uint64_t result)
{
  *(unsigned char *)(result + 3ot::Tlv::SetType(this, 2) = 0;
  return result;
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::Builder(uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::Builder(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = a3;
  return result;
}

void *ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(void *a1, uint64_t a2)
{
  return a1;
}

{
  void *result;

  ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::ItemPtrIterator(a1);
  uint64_t result = a1;
  a1[1] = a2;
  return result;
}

uint64_t ot::Message::Append<ot::Mle::Mle::DelayedResponseMetadata>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 0x14u);
}

{
  return ot::Message::Append<ot::Mle::Mle::DelayedResponseMetadata>(a1, a2);
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t ot::Child::AddressIterator::AddressIterator(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_WORD *)(result + 1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 16;
  return result;
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleAttachTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mle::Mle::HandleAttachTimer)(v2);
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDelayedResponseTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ot::Mle::Mle::HandleDelayedResponseTimer(v2);
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleMessageTransmissionTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mle::Mle::HandleMessageTransmissionTimer)(v2);
}

uint64_t ot::TimerMilliIn<ot::Mle::Mle,&ot::Mle::Mle::HandleDetachGracefullyTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ot::Mle::Mle::HandleDetachGracefullyTimer(v2);
}

uint64_t ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mle::Mle::HandleCslPeripheralAttachTimer)(v2);
}

uint64_t ot::TimerMicroIn<ot::Mle::Mle,&ot::Mle::Mle::HandleCslPeripheralAttachRetryTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  return ((uint64_t (*)(uint64_t))ot::Mle::Mle::HandleCslPeripheralAttachRetryTimer)(v2);
}

uint64_t ot::Instance::Get<ot::Dhcp6::Server>(uint64_t a1)
{
  return a1 + 86808;
}

{
  return ot::Instance::Get<ot::Dhcp6::Server>(a1);
}

uint64_t ot::Instance::Get<ot::LinkMetrics::Subject>(uint64_t a1)
{
  return a1 + 153960;
}

{
  return ot::Instance::Get<ot::LinkMetrics::Subject>(a1);
}

unsigned __int8 *ot::Array<unsigned char,(unsigned short)32,unsigned char>::Find(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v7 = 0;
  ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
  unsigned int v5 = v2;
  uint64_t v4 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end(a1);
  while (v5 != (unsigned __int8 *)v4)
  {
    if (*v5 == *a2) {
      return v5;
    }
    ++v5;
  }
  return (unsigned __int8 *)v7;
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::Find(a1, a2);
}

BOOL ot::Array<unsigned char,(unsigned short)32,unsigned char>::IsFull(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  return v2 == ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetMaxSize();
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::IsFull(a1);
}

void ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Advance(ot::Ip6::Netif::ExternalMulticastAddress **this)
{
  ot::Ip6::Netif::ExternalMulticastAddress::GetNext(*this);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom((ot::Ip6::Netif::ExternalMulticastAddress::Iterator *)this, v1);
}

{
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Advance(this);
}

BOOL ot::Child::AddressIterator::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
}

{
  return ot::Child::AddressIterator::operator==(a1, a2);
}

uint64_t __cxx_global_var_init_9()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_9()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_mle_cpp()
{
  return __cxx_global_var_init_1_9();
}

ot::Mle::MleRouter *ot::Mle::MleRouter::MleRouter(ot::Mle::MleRouter *this, ot::Instance *a2)
{
  ot::Mle::Mle::Mle(this, a2);
  ot::TrickleTimer::TrickleTimer((ot::Mle::MleRouter *)((char *)this + 1136), a2, (void (*)(ot::TrickleTimer *))ot::Mle::MleRouter::HandleAdvertiseTrickleTimer);
  ot::Mle::DeviceProperties::DeviceProperties((ot::Mle::MleRouter *)((char *)this + 1200));
  ot::ChildTable::ChildTable((ot::Mle::MleRouter *)((char *)this + 1208), a2);
  ot::RouterTable::RouterTable((ot::Mle::MleRouter *)((char *)this + 30912), a2);
  *((unsigned char *)this + 3562--*(unsigned char *)(this + 4) = 0;
  *((_WORD *)this + 1781ot::Tlv::SetType(this, 7) = 511;
  *((unsigned char *)this + 35636) = 120;
  *((unsigned char *)this + 3563ot::Tlv::SetType(this, 7) = 16;
  *((unsigned char *)this + 35638) = 23;
  *((unsigned char *)this + 3564ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = *((unsigned char *)this + 35640) & 0xFE | 1;
  *((unsigned char *)this + 35640) &= ~2u;
  *((unsigned char *)this + 35640) &= ~4u;
  ot::Utils::FifoHistogram<unsigned char,(short)24>::FifoHistogram((ot::Mle::MleRouter *)((char *)this + 35641));
  ot::Utils::FifoHistogram<unsigned char,(short)24>::FifoHistogram((ot::Mle::MleRouter *)((char *)this + 35665));
  *((_DWORD *)this + 8925) = 0;
  *((_DWORD *)this + 8926) = 0;
  *((unsigned char *)this + 35708) = 0;
  *((unsigned char *)this + 35709) = 0;
  *((unsigned char *)this + 3571ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 5;
  *((unsigned char *)this + 3571ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((unsigned char *)this + 3571ot::Tlv::SetType(this, 2) = 3;
  *(_WORD *)((char *)this + 3571ot::Tlv::SetType(this, 3) = 254;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 4465);
  ot::TimerMicro::TimerMicro((ot::Mle::MleRouter *)((char *)this + 35736), a2, (void (*)(ot::Timer *))ot::Mle::MleRouter::HandleConnectedNeighbourTimer);
  char v2 = ot::Mle::DeviceMode::Get((ot::Mle::MleRouter *)((char *)this + 240));
  ot::Mle::DeviceMode::Set((unsigned char *)this + 240, v2 | 3);
  *((unsigned char *)this + 35639) = ot::Mle::DeviceProperties::CalculateLeaderWeight((ot::Mle::MleRouter *)((char *)this + 1200));
  ot::Mle::MleRouter::SetRouterId((uint64_t)this, 63);
  unsigned int v3 = ot::Time::SecToMsec((ot::Time *)0xE10);
  ot::TimerMilli::Start((ot::Mle::MleRouter *)((char *)this + 35736), v3);
  return this;
}

{
  ot::Mle::MleRouter::MleRouter(this, a2);
  return this;
}

void ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(ot::Mle::MleRouter *this, ot::TrickleTimer *a2)
{
  char v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(v2);
}

void *ot::Utils::FifoHistogram<unsigned char,(short)24>::FifoHistogram(void *a1)
{
  return a1;
}

{
  ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear(a1);
  return a1;
}

uint64_t ot::Mle::MleRouter::HandleConnectedNeighbourTimer(ot::Mle::MleRouter *this, ot::Timer *a2)
{
  char v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  return ot::Mle::MleRouter::HandleConnectedNeighbourTimer(v2);
}

uint64_t ot::Mle::MleRouter::SetRouterId(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3569ot::Tlv::SetType(this, 7) = a2;
  *(unsigned char *)(this + 35698) = *(unsigned char *)(this + 35697);
  return this;
}

uint64_t ot::Mle::MleRouter::HandlePartitionChange(ot::Mle::MleRouter *this)
{
  *((_DWORD *)this + 8926) = ot::Mle::LeaderData::GetPartitionId((ot::Mle::MleRouter *)((char *)this + 64));
  *((unsigned char *)this + 35708) = ot::RouterTable::GetRouterIdSequence((ot::Mle::MleRouter *)((char *)this + 30912));
  *((unsigned char *)this + 35709) = ot::Mle::MleRouter::GetNetworkIdTimeout(this);
  uint64_t v1 = (ot::AddressResolver::CacheEntry *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
  ot::AddressResolver::Clear(v1);
  char v2 = (ot::Coap::MessageQueue *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  ot::Coap::CoapBase::AbortTransaction(v2, (uint64_t)ot::Mle::MleRouter::HandleAddressSolicitResponse, (uint64_t)this);
  IgnoreError();
  return ot::RouterTable::Clear((ot::Mle::MleRouter *)((char *)this + 30912));
}

uint64_t ot::Mle::MleRouter::HandleAddressSolicitResponse(unsigned char *a1, uint64_t a2, uint64_t a3, int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v7 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::Mle::MleRouter::HandleAddressSolicitResponse(a1, v7, v5, a4);
}

uint64_t ot::Mle::MleRouter::IsRouterEligible(ot::Mle::MleRouter *this)
{
  char v5 = 0;
  uint64_t v1 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
  uint64_t SecurityPolicy = ot::KeyManager::GetSecurityPolicy(v1);
  if ((*((unsigned char *)this + 35640) & 1) != 0
    && ot::Mle::Mle::IsFullThreadDevice(this)
    && ((*(_WORD *)(SecurityPolicy + 2) & 0x10) == 0 || (*(_WORD *)(SecurityPolicy + 2) & 0x100) != 0)
    && ((*(_WORD *)(SecurityPolicy + 2) & 4) != 0 || ((*(unsigned __int16 *)(SecurityPolicy + 2) >> 9) & 7) + 3 <= 4))
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t ot::Mle::MleRouter::SetRouterEligible(ot::Mle::MleRouter *this, char a2)
{
  char v8 = a2 & 1;
  unsigned int v7 = 0;
  if (ot::Mle::Mle::IsFullThreadDevice(this) || (v8 & 1) == 0)
  {
    *((unsigned char *)this + 3564ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = *((unsigned char *)this + 35640) & 0xFE | v8 & 1;
    unsigned int v5 = *((unsigned __int8 *)this + 73);
    if (v5 > 1)
    {
      if (v5 == 2)
      {
        unsigned int v3 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        ot::Mac::Mac::SetBeaconEnabled(v3, *((unsigned char *)this + 35640) & 1);
      }
      else
      {
        BOOL v2 = v5 == 4 || v5 == 3;
        if (v2 && (*((unsigned char *)this + 35640) & 1) == 0)
        {
          ot::Mle::Mle::BecomeDetached(this);
          IgnoreError();
        }
      }
    }
  }
  else
  {
    return 27;
  }
  return v7;
}

uint64_t ot::Mle::MleRouter::HandleSecurityPolicyChanged(ot::Mle::MleRouter *this)
{
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if (result)
  {
    uint64_t result = ot::Mle::MleRouter::IsRouterEligible(this);
    if ((result & 1) == 0 && !*((unsigned char *)this + 35711))
    {
      *((unsigned char *)this + 3571ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Random::NonCrypto::GetUint8InRange(0, *((unsigned char *)this + 35710)) + 1;
      uint64_t result = ot::Mle::Mle::IsLeader(this);
      if (result) {
        *((unsigned char *)this + 35711) += 10;
      }
    }
  }
  return result;
}

uint64_t ot::Mle::MleRouter::SetDeviceProperties(ot::Mle::MleRouter *this, const ot::Mle::DeviceProperties *a2)
{
  *((void *)this + 15ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = *(void *)a2;
  ot::Mle::DeviceProperties::ClampWeightAdjustment((ot::Mle::MleRouter *)((char *)this + 1200));
  char v2 = ot::Mle::DeviceProperties::CalculateLeaderWeight((ot::Mle::MleRouter *)((char *)this + 1200));
  return ot::Mle::MleRouter::SetLeaderWeight((uint64_t)this, v2);
}

uint64_t ot::Mle::MleRouter::BecomeRouter(uint64_t a1, unsigned __int8 a2)
{
  if (ot::Mle::Mle::IsDisabled((ot::Mle::Mle *)a1))
  {
    return 13;
  }
  else if (ot::Mle::Mle::IsRouter((ot::Mle::Mle *)a1))
  {
    return 0;
  }
  else if (ot::Mle::MleRouter::IsRouterEligible((ot::Mle::MleRouter *)a1))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Attempt to become router", v2, v3, v4, v5, v6, v7, v18);
    char v8 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>((ot::InstanceLocator *)a1);
    ot::MeshForwarder::SetRxOnWhenIdle(v8, 1, v9, v10, v11, v12, v13, v14);
    *(unsigned char *)(a1 + 3571ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
    int v20 = *(unsigned __int8 *)(a1 + 73);
    if (v20 == 1)
    {
      BOOL v19 = 1;
      if ((*(unsigned char *)(a1 + 321) & 1) == 0) {
        BOOL v19 = (unsigned __int16)ot::ChildTable::GetNumChildren((__int16 *)(a1 + 1208), 1u) >= 6u;
      }
      if (v19) {
        char v15 = 6;
      }
      else {
        char v15 = 3;
      }
      *(unsigned char *)(a1 + 32ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = v15;
      unsigned int v22 = ot::Mle::MleRouter::SendLinkRequest((ot::Mle::MleRouter *)a1, 0);
      if (!v22)
      {
        --*(unsigned char *)(a1 + 320);
        ot::Mle::Mle::ScheduleMessageTransmissionTimer((ot::Mle::Mle *)a1);
        char v16 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
        ot::TimeTicker::RegisterReceiver(v16, 1);
      }
    }
    else
    {
      if (v20 != 2) {
        __assert_rtn("BecomeRouter", "mle_router.cpp", 278, "false");
      }
      return ot::Mle::MleRouter::SendAddressSolicit((ot::InstanceLocator *)a1, a2);
    }
  }
  else
  {
    return 27;
  }
  return v22;
}

uint64_t ot::Mle::MleRouter::SendLinkRequest(ot::Mle::MleRouter *this, ot::Neighbor *a2)
{
  uint64_t v14 = this;
  uint64_t v13 = a2;
  unsigned int appended = 0;
  uint64_t v11 = 0;
  if (!*((unsigned char *)this + 35624))
  {
    ot::Clearable<ot::Ip6::Address>::Clear(&v10);
    uint64_t v11 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0);
    if (v11)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v11);
      if (!appended)
      {
        if (*((unsigned char *)this + 73))
        {
          uint64_t v3 = *((unsigned __int8 *)this + 73);
          char v2 = 1;
        }
        else
        {
          uint64_t v3 = *((unsigned __int8 *)this + 73);
          char v2 = 0;
        }
        if ((v2 & 1) == 0)
        {
          switch(v3)
          {
            case 0:
              __assert_rtn("SendLinkRequest", "mle_router.cpp", 644, "false");
            case 1:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>(v11, ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor *)::kDetachedTlvs);
              if (!appended) {
                break;
              }
              goto LABEL_34;
            case 2:
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v11);
              if (!appended)
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v11);
                if (!appended) {
                  break;
                }
              }
              goto LABEL_34;
            case 3:
            case 4:
              if (v13 && ot::Neighbor::IsStateValid(v13))
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>(v11, ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor *)::kValidNeighborTlvs);
                if (appended) {
                  goto LABEL_34;
                }
              }
              else
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)1>(v11, (unsigned __int8 *)&ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor *)::kRouterTlvs);
                if (appended) {
                  goto LABEL_34;
                }
              }
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v11);
              if (!appended)
              {
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v11);
                if (!appended) {
                  break;
                }
              }
              goto LABEL_34;
            default:
              JUMPOUT(0);
          }
        }
        if (v13)
        {
          if (ot::Neighbor::IsStateValid(v13))
          {
            ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::Mle::Challenge *)v15);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v11, (const ot::Mle::Mle::Challenge *)v15);
            if (appended) {
              goto LABEL_34;
            }
          }
          else
          {
            ot::Neighbor::GenerateChallenge(v13);
            char v8 = v11;
            Challenge = (unsigned __int8 *)ot::Neighbor::GetChallenge(v13);
            Challengechar Size = ot::Neighbor::GetChallengeSize(v13);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v8, Challenge, ChallengeSize);
            if (appended) {
              goto LABEL_34;
            }
          }
          ot::Neighbor::GetExtAddress(v13);
          ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v10, v5);
        }
        else
        {
          ot::Mle::Mle::Challenge::GenerateRandom((ot::Mle::MleRouter *)((char *)this + 35625));
          *((unsigned char *)this + 3562--*(unsigned char *)(this + 4) = 2;
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v11, (ot::Mle::MleRouter *)((char *)this + 35625));
          if (appended) {
            goto LABEL_34;
          }
          ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast((ot::Ip6::Address *)&v10);
        }
        unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v11, &v10);
        if (!appended) {
          ot::Mle::Mle::Log(0, 0x1Au, (ot::Ip6::Address *)&v10);
        }
      }
    }
    else
    {
      unsigned int appended = 3;
    }
  }
LABEL_34:
  if (appended && v11) {
    ot::Message::Free(v11);
  }
  return appended;
}

uint64_t ot::Mle::MleRouter::SendAddressSolicit(ot::InstanceLocator *a1, unsigned __int8 a2)
{
  char v15 = a1;
  unsigned __int8 v14 = a2;
  unsigned int v13 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v12, Instance);
  uint64_t v11 = 0;
  if ((*((unsigned char *)a1 + 35640) & 2) == 0)
  {
    uint64_t v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    uint64_t v11 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v3, 4u);
    if (v11)
    {
      uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
      ExtAddress = (void *)ot::Mac::Mac::GetExtAddress(v4);
      unsigned int v13 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(v11, ExtAddress);
      if (!v13)
      {
        if (!ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)*((unsigned __int8 *)a1 + 35698))
          || (unsigned __int16 v6 = ot::Mle::Rloc16FromRouterId((ot::Mle *)*((unsigned __int8 *)a1 + 35698)),
              (unsigned int v13 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v11, v6)) == 0))
        {
          unsigned int v13 = ot::Tlv::Append<ot::ThreadStatusTlv>(v11, v14);
          if (!v13)
          {
            unsigned int v13 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc((ot::Tmf::MessageInfo *)v12);
            if (!v13)
            {
              uint64_t v7 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
              unsigned int v13 = ot::Coap::CoapBase::SendMessage(v7, v11, (ot::Ip6::MessageInfo *)v12, (uint64_t)ot::Mle::MleRouter::HandleAddressSolicitResponse, (uint64_t)a1);
              if (!v13)
              {
                *((unsigned char *)a1 + 3564ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = *((unsigned char *)a1 + 35640) & 0xFD | 2;
                PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v12);
                ot::Mle::Mle::Log(0, 0x13u, PeerAddr);
              }
            }
          }
        }
      }
    }
    else
    {
      unsigned int v13 = 3;
    }
  }
  if (v13 && v11) {
    ot::Message::Free(v11);
  }
  return v13;
}

uint64_t ot::Mle::MleRouter::BecomeLeader(ot::Mle::MleRouter *this, char a2)
{
  char v24 = a2 & 1;
  unsigned int v23 = 0;
  active = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
  if (ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete(active))
  {
    return 13;
  }
  else if (ot::Mle::Mle::IsDisabled(this))
  {
    return 13;
  }
  else if (ot::Mle::Mle::IsLeader(this))
  {
    return 0;
  }
  else if (ot::Mle::MleRouter::IsRouterEligible(this))
  {
    if ((v24 & 1) != 0
      && ot::Mle::Mle::IsAttached(this)
      && (char v18 = *((unsigned char *)this + 35639),
          ot::Mle::LeaderData::GetWeighting((ot::Mle::MleRouter *)((char *)this + 64)),
          ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Leader re-election [BecomeLeader] Weight[%d] LeaderWeight[%d]", v3, v4, v5, v6, v7, v8, v18), int v17 = *((unsigned __int8 *)this + 35639), v17 <= ot::Mle::LeaderData::GetWeighting((ot::Mle::MleRouter *)((char *)this + 64))))
    {
      return 27;
    }
    else
    {
      uint64_t v9 = (ot::Random::NonCrypto *)ot::RouterTable::Clear((ot::Mle::MleRouter *)((char *)this + 30912));
      int Uint32 = ot::Random::NonCrypto::GetUint32(v9);
      if (ot::Mle::Mle::IsSleepyRouter(this))
      {
        unsigned __int8 Uint8InRange = ot::Random::NonCrypto::GetUint8InRange(0, 0x3Fu);
        ot::Mle::Mle::SetLeaderData(this, Uint32, *((unsigned char *)this + 35639), Uint8InRange);
      }
      else
      {
        if (ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)*((unsigned __int8 *)this + 35698))) {
          char v16 = *((unsigned char *)this + 35698);
        }
        else {
          char v16 = ot::Random::NonCrypto::GetUint8InRange(0, 0x3Fu);
        }
        unsigned __int8 Uint8InRange = v16;
        ot::Mle::Mle::SetLeaderData(this, Uint32, *((unsigned char *)this + 35639), v16);
      }
      unsigned int v22 = (void *)ot::RouterTable::Allocate((ot::Mle::MleRouter *)((char *)this + 30912), Uint8InRange);
      if (!v22) {
        __assert_rtn("BecomeLeader", "mle_router.cpp", 343, "router != nullptr");
      }
      ot::Mle::MleRouter::SetRouterId((uint64_t)this, Uint8InRange);
      __n128 v10 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v10);
      ot::Neighbor::SetExtAddress(v22, ExtAddress);
      uint64_t v12 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      ot::NetworkData::Leader::Reset(v12);
      unsigned int v13 = (ot::MeshCoP::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
      ot::MeshCoP::Leader::SetEmptyCommissionerData(v13);
      unsigned __int16 v14 = ot::Mle::Rloc16FromRouterId((ot::Mle *)Uint8InRange);
      ot::Mle::MleRouter::SetStateLeader((uint64_t)this, v14, 0);
    }
  }
  else
  {
    return 27;
  }
  return v23;
}

void ot::Mle::MleRouter::SetStateLeader(uint64_t a1, unsigned __int16 a2, char a3)
{
}

ot::Ip6::Netif::MulticastAddress *ot::Mle::MleRouter::StopLeader(ot::Mle::MleRouter *this)
{
  ot::Mle::MleRouter::StopAdvertiseTrickleTimer(this);
  uint64_t v1 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  return ot::Ip6::Netif::UnsubscribeAllRoutersMulticast(v1);
}

uint64_t ot::Mle::MleRouter::StopAdvertiseTrickleTimer(ot::Mle::MleRouter *this)
{
  return ot::TrickleTimer::Stop((ot::Mle::MleRouter *)((char *)this + 1136));
}

uint64_t ot::Mle::MleRouter::HandleDetachStart(ot::Mle::MleRouter *this)
{
  ot::RouterTable::ClearNeighbors((ot::Mle::MleRouter *)((char *)this + 30912));
  ot::Mle::MleRouter::StopLeader(this);
  uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
  return ot::TimeTicker::UnregisterReceiver(v1, 1);
}

uint64_t ot::Mle::MleRouter::HandleChildStart(uint64_t a1, unsigned __int8 a2)
{
  *(unsigned char *)(a1 + 35640) &= ~4u;
  *(unsigned char *)(a1 + 3571ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Random::NonCrypto::GetUint8InRange(0, *(unsigned char *)(a1 + 35710)) + 1;
  ot::Mle::MleRouter::StopLeader((ot::Mle::MleRouter *)a1);
  char v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
  ot::TimeTicker::RegisterReceiver(v2, 1);
  if (*(unsigned char *)(a1 + 35640))
  {
    uint64_t v3 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
    ot::Mac::Mac::SetBeaconEnabled(v3, 1);
  }
  uint64_t v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  ot::Ip6::Netif::SubscribeAllRoutersMulticast(v4);
  if (ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)*(unsigned __int8 *)(a1 + 35698)))
  {
    if (a2)
    {
      uint64_t v6 = a2;
      char v5 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      char v5 = 0;
    }
    if ((v5 & 1) == 0)
    {
      switch(v6)
      {
        case 0:
        case 4:
          if (ot::Mle::Mle::IsAnnounceAttach((ot::Mle::Mle *)a1)
            && ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1))
          {
            ot::Mle::MleRouter::RemoveChildren((ot::Mle::MleRouter *)a1);
          }
          goto LABEL_18;
        case 1:
          if (ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1))
          {
            ot::Mle::MleRouter::BecomeRouter(a1, 3u);
            IgnoreError();
          }
          break;
        case 2:
LABEL_18:
          if (ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1))
          {
            int v8 = *(_DWORD *)(a1 + 35700);
            if (v8 != ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)(a1 + 64)))
            {
              ot::Mle::MleRouter::BecomeRouter(a1, 4u);
              IgnoreError();
            }
          }
          break;
        case 3:
          ot::Mle::MleRouter::SendAddressRelease((ot::Mle::MleRouter *)a1);
          if (ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1)) {
            ot::Mle::MleRouter::RemoveChildren((ot::Mle::MleRouter *)a1);
          }
          ot::Mle::MleRouter::SetRouterId(a1, 63);
          break;
        default:
          JUMPOUT(0);
      }
    }
  }
  uint64_t result = ot::RouterTable::GetActiveRouterCount((ot::RouterTable *)(a1 + 30912));
  if (*(unsigned __int8 *)(a1 + 35637) <= (int)result)
  {
    if (!ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)*(unsigned __int8 *)(a1 + 35698))) {
      return ot::Mle::MleRouter::SetRouterId(a1, 63);
    }
    uint64_t result = ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1);
    if ((result & 1) == 0) {
      return ot::Mle::MleRouter::SetRouterId(a1, 63);
    }
  }
  return result;
}

void ot::Mle::MleRouter::SendAddressRelease(ot::Mle::MleRouter *this)
{
  uint64_t v12 = this;
  int v11 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v10, Instance);
  char v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v9 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v2, 3u);
  if (v9)
  {
    unsigned __int16 v3 = ot::Mle::Rloc16FromRouterId((ot::Mle *)*((unsigned __int8 *)this + 35697));
    int v11 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v9, v3);
    if (!v11)
    {
      uint64_t v4 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress = (void *)ot::Mac::Mac::GetExtAddress(v4);
      int v11 = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(v9, ExtAddress);
      if (!v11)
      {
        int v11 = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc((ot::Tmf::MessageInfo *)v10);
        if (!v11)
        {
          uint64_t v6 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
          int v11 = ot::Coap::CoapBase::SendMessage(v6, v9, (const ot::Ip6::MessageInfo *)v10);
          if (!v11)
          {
            PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v10);
            ot::Mle::Mle::Log(0, 0x10u, PeerAddr);
          }
        }
      }
    }
  }
  else
  {
    int v11 = 3;
  }
  if (v11 && v9) {
    ot::Message::Free(v9);
  }
  ot::Mle::Mle::LogSendError(0x10u, v11);
}

BOOL ot::Mle::MleRouter::HasChildren(ot::Mle::MleRouter *this)
{
  return ot::ChildTable::HasChildren((ot::Mle::MleRouter *)((char *)this + 1208), 3);
}

BOOL ot::Mle::MleRouter::RemoveChildren(ot::Mle::MleRouter *this)
{
  int v11 = this;
  uint64_t v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 1);
  __n128 v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1] = v2;
  v7[0] = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1] = v3;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7);
    if (!result) {
      break;
    }
    uint64_t v6 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    ot::Mle::MleRouter::RemoveNeighbor(this, v6);
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }
  return result;
}

BOOL ot::Mle::Mle::IsAnnounceAttach(ot::Mle::Mle *this)
{
  return *((unsigned __int16 *)this + 343) != 0xFFFF;
}

{
  return ot::Mle::Mle::IsAnnounceAttach(this);
}

uint64_t ot::RouterTable::GetActiveRouterCount(ot::RouterTable *this)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetLength((uint64_t)this + 8);
}

{
  return ot::RouterTable::GetActiveRouterCount(this);
}

void ot::Mle::MleRouter::SetStateRouter(ot::Mle::MleRouter *this, unsigned __int16 a2)
{
}

void ot::Mle::MleRouter::SetStateRouterOrLeader(uint64_t a1, char a2, unsigned __int16 a3, char a4)
{
  uint64_t v38 = a1;
  char v37 = a2;
  unsigned __int16 v36 = a3;
  char v35 = a4;
  if (a2 == 4)
  {
    active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::Restore(active);
    IgnoreError();
    char v5 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::DatasetManager::Restore(v5);
    IgnoreError();
  }
  ot::Mle::Mle::SetRloc16((ot::Mle::Mle *)a1, v36);
  ot::Mle::Mle::SetRole(a1, v37);
  ot::Mle::Mle::SetAttachState((unsigned __int8 *)a1, 0);
  ot::Mle::Mle::ResetAttachCounter(a1);
  ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 248));
  ot::TimerMilli::Stop((ot::TimerMilli *)(a1 + 296));
  ot::Mle::MleRouter::StopAdvertiseTrickleTimer((ot::Mle::MleRouter *)a1);
  ot::Mle::MleRouter::ResetAdvertiseInterval((ot::Mle::MleRouter *)a1);
  uint64_t v6 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
  ot::Ip6::Netif::SubscribeAllRoutersMulticast(v6);
  *(_DWORD *)(a1 + 3570ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)(a1 + 64));
  uint64_t v28 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
  BOOL IsRxOnWhenIdle = ot::Mle::Mle::IsRxOnWhenIdle((ot::Mle::Mle *)a1);
  ot::Mac::Mac::SetBeaconEnabled(v28, IsRxOnWhenIdle);
  if (v37 == 4)
  {
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress((ot::Ip6::Netif::UnicastAddress *)(a1 + 32));
    ot::Mle::Mle::GetLeaderAloc((ot::Mle::Mle *)a1, Address);
    IgnoreError();
    char v9 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>((ot::InstanceLocator *)a1);
    ot::Ip6::Netif::AddUnicastAddress(v9, (ot::Ip6::Netif::UnicastAddress *)(a1 + 32));
    __n128 v10 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>((ot::InstanceLocator *)a1);
    ot::TimeTicker::RegisterReceiver(v10, 1);
    int v11 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
    ot::NetworkData::Leader::Start(v11, v35);
    uint64_t v12 = (ot::MeshCoP::ActiveDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::ActiveDatasetManager::StartLeader(v12);
    unsigned int v13 = (ot::MeshCoP::PendingDatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>((ot::InstanceLocator *)a1);
    ot::MeshCoP::PendingDatasetManager::StartLeader(v13);
    unsigned __int16 v14 = (ot::AddressResolver::CacheEntry *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)a1);
    ot::AddressResolver::Clear(v14);
  }
  char v15 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
  char v33 = ot::ChildTable::Iterate(v15, 1);
  int v34 = (ot::ChildTable::IteratorBuilder *)&v33;
  v32[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v33);
  v32[1] = v16;
  v31[0] = ot::ChildTable::IteratorBuilder::end(v34);
  v31[1] = v17;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v32, v31))
  {
    uint64_t v30 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v32);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v30);
    if (*(unsigned __int8 *)(a1 + 35697) != ot::Mle::RouterIdFromRloc16((ot::Mle *)Rloc16)) {
      ot::Mle::MleRouter::RemoveNeighbor((ot::Mle::MleRouter *)a1, v30);
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v32);
  }
  BOOL v19 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
  ot::Mac::Mac::UpdateCsl(v19, 0);
  uint64_t PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)(a1 + 64));
  char v21 = ot::ToUlong(PartitionId);
  ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Partition ID 0x%lx", v22, v23, v24, v25, v26, v27, v21);
}

uint64_t ot::Mle::MleRouter::ResetAdvertiseInterval(ot::Mle::MleRouter *this)
{
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if (result)
  {
    if (!ot::TrickleTimer::IsRunning((ot::Mle::MleRouter *)((char *)this + 1136)))
    {
      unsigned int v3 = ot::Time::SecToMsec((ot::Time *)1);
      unsigned int v2 = ot::Time::SecToMsec((ot::Time *)0x20);
      ot::TrickleTimer::Start((uint64_t)this + 1136, 0, v3, v2, 0xFFFF);
    }
    return ot::TrickleTimer::IndicateInconsistent((uint64_t)this + 1136);
  }
  return result;
}

uint64_t ot::Mle::Mle::GetLeaderAloc(ot::Mle::Mle *this, ot::Ip6::Address *a2)
{
  return ot::Mle::Mle::GetLocatorAddress(this, a2, 0xFC00u);
}

{
  return ot::Mle::Mle::GetLeaderAloc(this, a2);
}

void ot::Mle::MleRouter::RemoveNeighbor(ot::Mle::MleRouter *this, ot::Neighbor *a2)
{
  if (!ot::Neighbor::IsStateInvalid(a2))
  {
    if (a2 == (ot::Mle::MleRouter *)((char *)this + 80))
    {
      if (ot::Mle::Mle::IsChild(this))
      {
        ot::Mle::Mle::BecomeDetached(this);
        IgnoreError();
      }
    }
    else if (a2 == (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(this))
    {
      ot::Mle::Mle::ClearParentCandidate(this);
    }
    else
    {
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
      if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16))
      {
        if (ot::Neighbor::IsStateValid(a2))
        {
          if (!ot::RouterTable::Contains((ot::Mle::MleRouter *)((char *)this + 30912), a2)) {
            __assert_rtn("RemoveNeighbor", "mle_router.cpp", 4050, "mRouterTable.Contains(aNeighbor)");
          }
          ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 232), 4u, a2);
          ot::RouterTable::RemoveRouterLink((ot::Mle::MleRouter *)((char *)this + 30912), a2);
        }
      }
      else
      {
        if (!ot::ChildTable::Contains((ot::Mle::MleRouter *)((char *)this + 1208), a2)) {
          __assert_rtn("RemoveNeighbor", "mle_router.cpp", 4031, "mChildTable.Contains(aNeighbor)");
        }
        if (ot::Neighbor::IsStateValidOrRestoring(a2)) {
          ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 232), 1u, a2);
        }
        unsigned int v3 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
        ot::IndirectSender::ClearAllMessagesForSleepyChild(v3, a2);
        if (ot::Neighbor::IsFullThreadDevice(a2))
        {
          uint64_t v22 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
          unsigned __int16 v4 = ot::Neighbor::GetRloc16(a2);
          ot::AddressResolver::RemoveEntriesForRloc16(v22, v4);
        }
        ot::ChildTable::RemoveStoredChild((ot::Mle::MleRouter *)((char *)this + 1208), a2);
      }
    }
    LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(a2);
    ot::LinkQualityInfo::Clear(LinkInfo);
    ot::Neighbor::SetState(a2, 0);
    ot::Neighbor::RemoveAllForwardTrackingSeriesInfo(a2);
    if (a2 == (ot::Neighbor *)ot::Mle::Mle::GetCslPeripheral(this))
    {
      *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 0;
      char v6 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachState = %s, %s", v7, v8, v9, v10, v11, v12, v6);
      unsigned int v13 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ot::Mac::Mac::UpdateCsl(v13, 0);
      ot::Mle::Mle::SetCslPeripheral((uint64_t)this, 0);
      ot::Neighbor::GetExtAddress(a2);
      ot::Mac::ExtAddress::ToString(v14, (ot::StringWriter *)v25);
      char v15 = ot::String<(unsigned short)17>::AsCString((uint64_t)v25);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "CSL peripheral %s detached", v16, v17, v18, v19, v20, v21, v15);
      ot::Mle::Mle::SetPeripheralDetachState((uint64_t)this, 0);
      ot::Mle::Mle::SetThreadCoexConfig(this, 0, *((unsigned char *)this + 73), *((unsigned char *)this + 241));
    }
  }
}

void ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(ot::Mle::MleRouter *this)
{
  if (ot::Mle::MleRouter::IsRouterEligible(this)) {
    ot::Mle::MleRouter::SendAdvertisement(this);
  }
  else {
    ot::TrickleTimer::Stop((ot::Mle::MleRouter *)((char *)this + 1136));
  }
}

void ot::Mle::MleRouter::SendAdvertisement(ot::Mle::MleRouter *this)
{
  unsigned __int16 v14 = this;
  int appended = 0;
  uint64_t v11 = 0;
  if (!ot::Mle::Mle::IsAttaching(this))
  {
    if (ot::Mle::Mle::IsSleepyRouter(this)) {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "ThreadConnection: Supress sending any advertisements", v1, v2, v3, v4, v5, v6, v8);
    }
    if (ot::Mle::Mle::IsRxOnWhenIdle(this) && (*((unsigned char *)this + 35640) & 2) == 0)
    {
      uint64_t v11 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 4u);
      if (v11)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v11);
        if (!appended)
        {
          int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v11);
          if (!appended)
          {
            ot::Message::SetSubType(v11, 12);
            unsigned int v9 = *((unsigned __int8 *)this + 73);
            if (v9 <= 1) {
              __assert_rtn("SendAdvertisement", "mle_router.cpp", 587, "false");
            }
            if (v9 == 2
              || (v9 != 4 && v9 != 3 ? (char v7 = 0) : (char v7 = 1),
                  (v7 & 1) == 0 || (int appended = ot::Mle::Mle::TxMessage::AppendRouteTlv(v11, 0)) == 0))
            {
              ot::Ip6::Address::SetToLinkLocalAllNodesMulticast((ot::Ip6::Address *)&v12);
              int appended = ot::Mle::Mle::TxMessage::SendTo(v11, &v12);
              if (!appended) {
                ot::Mle::Mle::Log(0, 0, (ot::Ip6::Address *)&v12);
              }
            }
          }
        }
      }
      else
      {
        int appended = 3;
      }
    }
  }
  if (appended && v11) {
    ot::Message::Free(v11);
  }
  ot::Mle::Mle::LogSendError(0, appended);
}

uint64_t ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>(ot::Mle::Mle::TxMessage *a1, unsigned __int8 *a2)
{
  return ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(a1, a2, 2u);
}

{
  return ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>(a1, a2);
}

uint64_t ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)1>(ot::Mle::Mle::TxMessage *a1, unsigned __int8 *a2)
{
  return ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(a1, a2, 1u);
}

{
  return ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)1>(a1, a2);
}

uint64_t ot::Neighbor::GetChallenge(ot::Neighbor *this)
{
  return (uint64_t)this + 12;
}

{
  return ot::Neighbor::GetChallenge(this);
}

uint64_t ot::Neighbor::GetChallengeSize(ot::Neighbor *this)
{
  return 8;
}

{
  return ot::Neighbor::GetChallengeSize(this);
}

void ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::MleRouter *this, ot::Neighbor **a2)
{
  uint64_t v101 = this;
  char v100 = a2;
  int ChallengeTlv = 0;
  char v98 = 0;
  unsigned __int16 v97 = 0;
  unsigned __int16 v95 = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v106);
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v100[1]);
  ot::Mle::Mle::Log(1, 0x1Au, PeerAddr);
  if (!ot::Mle::Mle::IsRouterOrLeader(this))
  {
    int ChallengeTlv = 13;
    goto LABEL_40;
  }
  if (ot::Mle::Mle::IsAttaching(this))
  {
    int ChallengeTlv = 13;
    goto LABEL_40;
  }
  if (!ot::Mle::Mle::IsRxOnWhenIdle(this))
  {
    int ChallengeTlv = 13;
    goto LABEL_40;
  }
  int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*v100, (ot::Mle::Mle::Challenge *)v107, v3, v4, v5);
  if (!ChallengeTlv)
  {
    int ChallengeTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*v100, &v97, v6, v7);
    if (!ChallengeTlv)
    {
      if (v97 < 2u)
      {
        int ChallengeTlv = 6;
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Link request Parse error", v8, v9, (uint64_t)v10, v11, v12, v13, v84);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "version:%d less than Thread 1.1 version:%d", v14, v15, v16, v17, v18, v19, v97);
        goto LABEL_40;
      }
      int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v100, (ot::Mle::LeaderData *)v96, v8, v9, v10);
      if (LeaderDataTlv)
      {
        if (LeaderDataTlv != 23)
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Link request Parse error ReadLeaderData failed", v20, (uint64_t)v21, v22, v23, v24, v25, v84);
          int ChallengeTlv = 6;
          goto LABEL_40;
        }
      }
      else
      {
        int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)v96);
        if (PartitionId != ot::Mle::LeaderData::GetPartitionId((ot::Mle::MleRouter *)((char *)this + 64)))
        {
          int ChallengeTlv = 13;
          goto LABEL_40;
        }
      }
      int v91 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v100, &v95, v20, v21);
      if (v91)
      {
        if (v91 != 23)
        {
          char v70 = ot::ErrorToString(6);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "HandleLinkRequest source address TLV unhandled case. Exit here error:%s", v71, v72, v73, v74, v75, v76, v70);
          int ChallengeTlv = 6;
          goto LABEL_40;
        }
        if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v100)
          || (unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v100[3]), !ot::Mle::IsActiveRouter((ot::Mle *)Rloc16)))
        {
          int ChallengeTlv = 2;
          if (v100[3])
          {
            char v86 = ot::ErrorToString(ChallengeTlv);
            ot::Neighbor::GetState(v100[3]);
            ot::Neighbor::IsStateValid(v100[3]);
            ot::Neighbor::GetRloc16(v100[3]);
            unsigned __int8 RouterId = ot::Neighbor::GetRouterId(v100[3]);
            ot::Mle::IsActiveRouter((ot::Mle *)RouterId);
            ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "HandleLinkRequest source address TLV not found (router coming out of reset) error:%s nbr.state:%d isNbrStateValid:%d nbr.rloc16:0x%x Router Id:%d", v57, v58, v59, v60, v61, v62, v86);
          }
          else
          {
            char v63 = ot::ErrorToString(ChallengeTlv);
            ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "HandleLinkRequest source address TLV not found (router coming out of reset) error:%s aNeighbor NULL ", v64, v65, v66, v67, v68, v69, v63);
          }
          goto LABEL_40;
        }
        char v98 = v100[3];
      }
      else if (ot::Mle::IsActiveRouter((ot::Mle *)v95))
      {
        ot::RouterTable::FindRouterByRloc16((ot::Mle::MleRouter *)((char *)this + 30912), v95);
        char v98 = v35;
        if (!v35)
        {
          int ChallengeTlv = 6;
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Link request Parse error Neighbor src address is NULL:sourceAddress:%x", v29, v30, v31, v32, v33, v34, v95);
          goto LABEL_40;
        }
        if (ot::Neighbor::IsStateLinkRequest(v98))
        {
          int ChallengeTlv = 24;
          goto LABEL_40;
        }
        if (ot::Neighbor::IsStateValid(v98))
        {
          unsigned __int16 v36 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v100[1]);
          Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v36);
          ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v105);
          char State = ot::Neighbor::GetState(v98);
          ot::Neighbor::GetExtAddress(v98);
          ot::Mac::ExtAddress::ToString(v38, (ot::StringWriter *)v104);
          ot::String<(unsigned short)17>::AsCString((uint64_t)v104);
          ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "Current neighbor state: %u nbr.extAddr:%s", v39, v40, v41, v42, v43, v44, State);
          ot::Neighbor::GetExtAddress(v98);
          if (!ot::Equatable<ot::Mac::ExtAddress>::operator==(v45, v105))
          {
            int ChallengeTlv = 6;
            char v89 = ot::Neighbor::GetState(v98);
            ot::Neighbor::GetExtAddress(v98);
            ot::Mac::ExtAddress::ToString(v46, (ot::StringWriter *)v103);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v103);
            ot::Mac::ExtAddress::ToString((ot::Mac::ExtAddress *)v105, (ot::StringWriter *)v102);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v102);
            ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Link request Parse error, nbr.state:%d nbr.extAddr(%s) != extAddr(%s)", v47, v48, v49, v50, v51, v52, v89);
            goto LABEL_40;
          }
          unsigned __int16 v87 = v98;
          Dataunsigned __int16 Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v96, 0);
          ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v87, DataVersion);
          uint64_t v88 = v98;
          char v54 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v96, 1);
          ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v88, v54);
        }
        else
        {
          ot::Mle::Mle::InitNeighbor(this, v98, v100);
          ot::Neighbor::SetState(v98, 5);
        }
      }
      int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*v100, (ot::Mle::Mle::TlvList *)v106, v26, v27, v28);
      if (TlvRequestTlv && TlvRequestTlv != 23)
      {
        char v77 = ot::ErrorToString(6);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "HandleLinkRequest Request TLV unhandled case. Exit here error:%s", v78, v79, v80, v81, v82, v83, v77);
        int ChallengeTlv = 6;
      }
      else
      {
        *((unsigned char *)v100 + 3ot::Tlv::SetType(this, 2) = 2;
        ot::Mle::Mle::ProcessKeySequence(this, (ot::Mle::Mle::RxInfo *)v100);
        int ChallengeTlv = ot::Mle::MleRouter::SendLinkAccept(this, v100[1], v98, (const ot::Mle::Mle::TlvList *)v106, (const ot::Mle::Mle::Challenge *)v107);
      }
    }
  }
LABEL_40:
  ot::Mle::Mle::LogProcessError(0x1Au, ChallengeTlv);
}

void ot::RouterTable::FindRouterByRloc16(ot::RouterTable *this, unsigned __int16 a2)
{
  ot::AsConst<ot::RouterTable>();
  ot::RouterTable::FindRouterByRloc16(v2, a2);
  ot::AsNonConst<ot::Router>();
}

{
  ot::RouterTable::FindRouterByRloc16(this, a2);
}

BOOL ot::Neighbor::IsStateLinkRequest(ot::Neighbor *this)
{
  return (*((unsigned char *)this + 30) & 0xF) == 5;
}

{
  return ot::Neighbor::IsStateLinkRequest(this);
}

uint64_t ot::Mle::MleRouter::SendLinkAccept(ot::Mle::MleRouter *this, const ot::Ip6::MessageInfo *a2, ot::Neighbor *a3, const ot::Mle::Mle::TlvList *a4, const ot::Mle::Mle::Challenge *a5)
{
  BOOL IsStateValid = 1;
  if (a3) {
    BOOL IsStateValid = ot::Neighbor::IsStateValid(a3);
  }
  if (IsStateValid) {
    unsigned __int8 v5 = 1;
  }
  else {
    unsigned __int8 v5 = 2;
  }
  unsigned __int8 v33 = v5;
  uint64_t v34 = ot::Mle::Mle::NewMleMessage((uint64_t)this, v5);
  if (!v34)
  {
    unsigned int appended = 3;
    goto LABEL_45;
  }
  unsigned int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v34);
  if (!appended)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v34);
    if (!appended)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendResponseTlv(v34, a5);
      if (!appended)
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v34);
        if (!appended)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v34);
          if (!appended)
          {
            uint64_t v26 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            uint64_t ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(a2);
            char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
            unsigned __int8 v32 = ot::Mac::Mac::ComputeLinkMargin(v26, Rss);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(v34, v32);
            if (!appended)
            {
              if (!a3
                || (unsigned __int16 v8 = ot::Neighbor::GetRloc16(a3), !ot::Mle::IsActiveRouter((ot::Mle *)v8))
                || (unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v34)) == 0)
              {
                ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
                uint64_t v31 = v9;
                uint64_t v30 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a4);
                while (v31 != (unsigned __int8 *)v30)
                {
                  int v25 = *v31;
                  switch(v25)
                  {
                    case 9:
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendRouteTlv(v34, a3);
                      if (appended) {
                        goto LABEL_45;
                      }
                      break;
                    case 10:
                      if (!a3)
                      {
                        unsigned int appended = 2;
                        goto LABEL_45;
                      }
                      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a3);
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddress16Tlv(v34, Rloc16);
                      if (appended) {
                        goto LABEL_45;
                      }
                      break;
                    case 16:
                      break;
                    default:
                      unsigned int appended = 2;
                      goto LABEL_45;
                  }
                  ++v31;
                }
                if (a3 && !ot::Neighbor::IsStateValid(a3))
                {
                  ot::Neighbor::GenerateChallenge(a3);
                  Challenge = (unsigned __int8 *)ot::Neighbor::GetChallenge(a3);
                  Challengechar Size = ot::Neighbor::GetChallengeSize(a3);
                  unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v34, Challenge, ChallengeSize);
                  if (appended) {
                    goto LABEL_45;
                  }
                  uint64_t v12 = (ot::TimerMilli *)ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)1>(v34, (unsigned __int8 *)&ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&,ot::Neighbor *,ot::Mle::Mle::TlvList const&,ot::Mle::Mle::Challenge const&)::kRouterTlvs);
                  unsigned int appended = v12;
                  if (v12) {
                    goto LABEL_45;
                  }
                  int Now = ot::TimerMilli::GetNow(v12);
                  ot::Neighbor::SetLastHeard((uint64_t)a3, Now);
                  ot::Neighbor::SetState(a3, 5);
                }
                SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(a2);
                if (ot::Ip6::Address::IsMulticast(SockAddr))
                {
                  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
                  __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0, 0x3E8u);
                  unsigned int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v34, PeerAddr, Uint16InRange + 1);
                  if (!appended)
                  {
                    if (v33 == 1) {
                      char v15 = 23;
                    }
                    else {
                      char v15 = 24;
                    }
                    unsigned __int8 v22 = v15;
                    uint64_t v16 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
                    ot::Mle::Mle::Log(2, v22, v16);
                  }
                }
                else
                {
                  uint64_t v17 = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
                  unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v34, v17);
                  if (!appended)
                  {
                    if (v33 == 1) {
                      char v18 = 23;
                    }
                    else {
                      char v18 = 24;
                    }
                    unsigned __int8 v21 = v18;
                    uint64_t v19 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
                    ot::Mle::Mle::Log(0, v21, v19);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_45:
  if (appended && v34) {
    ot::Message::Free(v34);
  }
  return appended;
}

void ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::MleRouter *this, ot::Mle::Mle::RxInfo *a2, uint64_t a3, unsigned __int16 *a4)
{
  int v4 = ot::Mle::MleRouter::HandleLinkAccept(this, a2, 0, a4);
  ot::Mle::Mle::LogProcessError(0x17u, v4);
}

uint64_t ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::MleRouter *this, ot::Mle::Mle::RxInfo *a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v90 = this;
  char v89 = a2;
  char v88 = a3 & 1;
  unsigned int ResponseTlv = 0;
  *(void *)&v86[6] = 0;
  v86[5] = 0;
  *(_DWORD *)char v86 = 0;
  unsigned int v85 = 0;
  unsigned int v84 = 0;
  unsigned __int8 v83 = 0;
  unsigned __int16 v82 = 0;
  unsigned __int8 v80 = 0;
  unsigned int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*(ot::Tlv **)a2, (unsigned __int16 *)v86, a3, a4);
  if (!ResponseTlv)
  {
    if (v88) {
      char v4 = 24;
    }
    else {
      char v4 = 23;
    }
    unsigned __int8 v77 = v4;
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v89 + 1));
    ot::Mle::Mle::Log(1, v77, PeerAddr, *(unsigned __int16 *)v86);
    if (ot::Mle::IsActiveRouter((ot::Mle *)*(unsigned __int16 *)v86))
    {
      unsigned __int8 v83 = ot::Mle::RouterIdFromRloc16((ot::Mle *)*(unsigned __int16 *)v86);
      ot::RouterTable::FindRouterById((ot::Mle::MleRouter *)((char *)this + 30912), v83);
      *(void *)&v86[6] = v9;
      if (v9) {
        char State = ot::Neighbor::GetState(*(ot::Neighbor **)&v86[6]);
      }
      else {
        char State = 0;
      }
      v86[5] = State;
      unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*(ot::Mle::Mle::RxMessage **)v89, (ot::Mle::Mle::Challenge *)v95, v6, v7, v8);
      if (!ResponseTlv)
      {
        if (v86[5])
        {
          if (v86[5] == 5)
          {
            Challenge = (unsigned __int8 *)ot::Neighbor::GetChallenge(*(ot::Neighbor **)&v86[6]);
            Challengechar Size = ot::Neighbor::GetChallengeSize(*(ot::Neighbor **)&v86[6]);
            if (!ot::Mle::Mle::Challenge::Matches((ot::Mle::Mle::Challenge *)v95, Challenge, ChallengeSize)) {
              return 8;
            }
          }
          else if (v86[5] != 7)
          {
            return 8;
          }
        }
        else if (!*((unsigned char *)this + 320) && !*((unsigned char *)this + 35624) {
               || !ot::Mle::Mle::Challenge::operator==((ot::Mle::Mle::Challenge *)v95, (uint64_t)this + 35625))
        }
        {
          return 8;
        }
        if (*((void *)v89 + 3))
        {
          unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(*((ot::Neighbor **)v89 + 3));
          if (*(unsigned __int16 *)v86 != Rloc16) {
            ot::Mle::MleRouter::RemoveNeighbor(this, *((ot::Neighbor **)v89 + 3));
          }
        }
        unsigned int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*(ot::Tlv **)v89, (unsigned __int16 *)&v86[2], v10, v11);
        if (!ResponseTlv)
        {
          if (*(unsigned __int16 *)&v86[2] >= 2u)
          {
            unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(*(ot::Mle::Mle::RxMessage **)v89, &v85, &v84, v14);
            if (!ResponseTlv)
            {
              char v15 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v89 + 1));
              ot::Ip6::Address::ToString(v15, (ot::StringWriter *)v93);
              ot::String<(unsigned short)40>::AsCString((uint64_t)v93);
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d", v16, v17, v18, v19, v20, v21, (char)"HandleLinkAccept");
              int v74 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)16,unsigned char>>(*(ot::Tlv **)v89, &v80, v22, v23);
              if (v74)
              {
                if (v74 != 23) {
                  return 6;
                }
                if (!ot::Mle::Mle::IsDetached(this)) {
                  return 23;
                }
                unsigned __int8 v80 = 0;
              }
              if (*((unsigned char *)this + 73))
              {
                uint64_t v28 = *((unsigned __int8 *)this + 73);
                char v27 = 1;
              }
              else
              {
                uint64_t v28 = *((unsigned __int8 *)this + 73);
                char v27 = 0;
              }
              if ((v27 & 1) == 0)
              {
                switch(v28)
                {
                  case 0:
                    __assert_rtn("HandleLinkAccept", "mle_router.cpp", 1216, "false");
                  case 1:
                    unsigned int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)10,unsigned short>>(*(ot::Tlv **)v89, &v82, v24, v25);
                    if (ResponseTlv) {
                      return ResponseTlv;
                    }
                    unsigned __int16 v29 = ot::Mle::Mle::GetRloc16(this);
                    if (v82 != v29) {
                      return 2;
                    }
                    unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*(ot::Mle::Mle::RxMessage **)v89, (ot::Mle::LeaderData *)&v81, v30, v31, v32);
                    if (ResponseTlv) {
                      return ResponseTlv;
                    }
                    unsigned int PartitionId = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)&v81);
                    char Weighting = ot::Mle::LeaderData::GetWeighting((ot::Mle::LeaderData *)&v81);
                    char LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::LeaderData *)&v81);
                    ot::Mle::Mle::SetLeaderData(this, PartitionId, Weighting, LeaderRouterId);
                    ot::RouterTable::Clear((ot::Mle::MleRouter *)((char *)this + 30912));
                    unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadRouteTlv(*(ot::Mle::Mle::RxMessage **)v89, (ot::Mle::RouteTlv *)v94, v34, v35, v36);
                    if (ResponseTlv) {
                      return ResponseTlv;
                    }
                    unsigned int ResponseTlv = ot::Mle::MleRouter::ProcessRouteTlv(this, (const ot::Mle::RouteTlv *)v94, (ot::Neighbor **)v89);
                    if (ResponseTlv) {
                      return ResponseTlv;
                    }
                    ot::RouterTable::FindRouterById((ot::Mle::MleRouter *)((char *)this + 30912), v83);
                    *(void *)&v86[6] = v37;
                    if (!v37) {
                      return ResponseTlv;
                    }
                    int v71 = ot::Mle::LeaderData::GetLeaderRouterId((ot::Mle::MleRouter *)((char *)this + 64));
                    unsigned __int16 v38 = ot::Mle::Mle::GetRloc16(this);
                    if (v71 == ot::Mle::RouterIdFromRloc16((ot::Mle *)v38))
                    {
                      unsigned __int16 v39 = ot::Mle::Mle::GetRloc16(this);
                      ot::Mle::MleRouter::SetStateLeader((uint64_t)this, v39, 1);
                    }
                    else
                    {
                      unsigned __int16 v40 = ot::Mle::Mle::GetRloc16(this);
                      ot::Mle::MleRouter::SetStateRouter(this, v40);
                    }
                    *((unsigned char *)this + 32ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 0;
                    *((unsigned char *)this + 7ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 72) & 0xFE | 1;
                    uint64_t v41 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v89 + 1));
                    ot::Mle::Mle::SendDataRequest(this, v41);
                    IgnoreError();
                    break;
                  case 2:
                    if (*(void *)&v86[6]) {
                      break;
                    }
                    return ResponseTlv;
                  case 3:
                  case 4:
                    if (!*(void *)&v86[6]) {
                      return ResponseTlv;
                    }
                    unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*(ot::Mle::Mle::RxMessage **)v89, (ot::Mle::LeaderData *)&v81, v24, (uint64_t)v25, v26);
                    if (ResponseTlv) {
                      return ResponseTlv;
                    }
                    int v70 = ot::Mle::LeaderData::GetPartitionId((ot::Mle::LeaderData *)&v81);
                    if (v70 != ot::Mle::LeaderData::GetPartitionId((ot::Mle::MleRouter *)((char *)this + 64))) {
                      return ResponseTlv;
                    }
                    if ((*((unsigned char *)this + 72) & 1) != 0
                      || (Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)&v81, 0),
                          uint64_t v42 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this),
                          char Version = ot::NetworkData::LeaderBase::GetVersion(v42, 0),
                          ot::SerialNumber::IsGreater<unsigned char>(DataVersion, Version)))
                    {
                      uint64_t v47 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v89
                                                                                        + 1));
                      ot::Mle::Mle::SendDataRequest(this, v47);
                      IgnoreError();
                    }
                    int RouteTlv = ot::Mle::Mle::RxMessage::ReadRouteTlv(*(ot::Mle::Mle::RxMessage **)v89, (ot::Mle::RouteTlv *)v94, v44, v45, v46);
                    if (RouteTlv)
                    {
                      if (RouteTlv != 23) {
                        return 6;
                      }
                    }
                    else
                    {
                      if (!ot::Mle::RouteTlv::IsRouterIdSet((ot::Mle::RouteTlv *)v94, v83)) {
                        return 6;
                      }
                      if (ot::RouterTable::IsRouteTlvIdSequenceMoreRecent((ot::Mle::MleRouter *)((char *)this + 30912), (const ot::Mle::RouteTlv *)v94))
                      {
                        unsigned int ResponseTlv = ot::Mle::MleRouter::ProcessRouteTlv(this, (const ot::Mle::RouteTlv *)v94, (ot::Neighbor **)v89);
                        if (ResponseTlv) {
                          return ResponseTlv;
                        }
                        ot::RouterTable::FindRouterById((ot::Mle::MleRouter *)((char *)this + 30912), v83);
                        *(void *)&v86[6] = v48;
                        if (!v48) {
                          __assert_rtn("HandleLinkAccept", "mle_router.cpp", 1195, "router != nullptr");
                        }
                      }
                      ot::RouterTable::UpdateRoutes((ot::Mle::MleRouter *)((char *)this + 30912), (const ot::Mle::RouteTlv *)v94, v83);
                    }
                    if (v83 != *((unsigned __int8 *)this + 35697))
                    {
                      unsigned __int8 NextHop = ot::Router::GetNextHop(*(ot::Router **)&v86[6]);
                      if (!ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)NextHop)) {
                        ot::Mle::MleRouter::ResetAdvertiseInterval(this);
                      }
                    }
                    break;
                  default:
                    JUMPOUT(0);
                }
              }
              ot::Mle::Mle::InitNeighbor(this, *(ot::Neighbor **)&v86[6], (ot::Ip6::MessageInfo **)v89);
              ot::Neighbor::SetRloc16(*(uint64_t *)&v86[6], *(__int16 *)v86);
              LinkFrameCounters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(*(ot::Neighbor **)&v86[6]);
              ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v85);
              ot::Neighbor::SetLinkAckFrameCounter(*(uint64_t *)&v86[6], v85);
              ot::Neighbor::SetMleFrameCounter(*(uint64_t *)&v86[6], v84);
              ot::Neighbor::SetVersion(*(uint64_t *)&v86[6], *(__int16 *)&v86[2]);
              uint64_t v63 = *(void *)&v86[6];
              ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v79, 11);
              ot::Neighbor::SetDeviceMode(v63, v79);
              uint64_t v64 = *(void *)&v86[6];
              char v51 = ot::LinkQualityForLinkMargin((ot *)v80);
              ot::Router::SetLinkQualityOut(v64, v51);
              ot::Neighbor::SetState(*(ot::InstanceLocator **)&v86[6], 7);
              ot::Neighbor::SetKeySequence(*(uint64_t *)&v86[6], *((_DWORD *)v89 + 5));
              uint64_t v65 = *(ot::Neighbor **)&v86[6];
              char v52 = ot::Mle::LeaderData::GetDataVersion((uint64_t)&v81, 0);
              ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v65, v52);
              uint64_t v66 = *(ot::Neighbor **)&v86[6];
              char v53 = ot::Mle::LeaderData::GetDataVersion((uint64_t)&v81, 1);
              ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v66, v53);
              uint64_t v67 = *(ot::Neighbor **)&v86[6];
              RouterIdchar Sequence = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v94);
              ot::Neighbor::SetIdSeqNum((uint64_t)v67, RouterIdSequence);
              ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 232), 3u, *(const ot::Neighbor **)&v86[6]);
              *((unsigned char *)v89 + 3ot::Tlv::SetType(this, 2) = 1;
              ot::Mle::Mle::ProcessKeySequence(this, v89);
              if (v88)
              {
                ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v91);
                unsigned int ResponseTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*(ot::Mle::Mle::RxMessage **)v89, (ot::Mle::Mle::Challenge *)v92, v55, v56, v57);
                if (!ResponseTlv)
                {
                  int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*(ot::Mle::Mle::RxMessage **)v89, (ot::Mle::Mle::TlvList *)v91, v58, v59, v60);
                  if (TlvRequestTlv && TlvRequestTlv != 23) {
                    return 6;
                  }
                  else {
                    return ot::Mle::MleRouter::SendLinkAccept(this, *((const ot::Ip6::MessageInfo **)v89 + 1), *(ot::Neighbor **)&v86[6], (const ot::Mle::Mle::TlvList *)v91, (const ot::Mle::Mle::Challenge *)v92);
                  }
                }
              }
            }
          }
          else
          {
            return 6;
          }
        }
      }
    }
    else
    {
      return 6;
    }
  }
  return ResponseTlv;
}

void ot::Mle::MleRouter::HandleLinkAcceptAndRequest(ot::Mle::MleRouter *this, ot::Mle::Mle::RxInfo *a2, uint64_t a3, unsigned __int16 *a4)
{
  int v4 = ot::Mle::MleRouter::HandleLinkAccept(this, a2, 1, a4);
  ot::Mle::Mle::LogProcessError(0x18u, v4);
}

uint64_t ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::MleRouter *this, const ot::Mle::RouteTlv *a2, ot::Neighbor **a3)
{
  unsigned int v16 = 0;
  unsigned __int16 Rloc16 = -2;
  if (a3[3])
  {
    uint64_t v3 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    if (ot::RouterTable::Contains(v3, a3[3])) {
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a3[3]);
    }
  }
  RouterIdchar Sequence = ot::Mle::RouteTlv::GetRouterIdSequence(a2);
  RouterIdMasunsigned __int8 k = (const ot::Mle::RouterIdSet *)ot::Mle::RouteTlv::GetRouterIdMask(a2);
  ot::RouterTable::UpdateRouterIdSet((ot::Mle::MleRouter *)((char *)this + 30912), RouterIdSequence, RouterIdMask);
  if (ot::Mle::Mle::IsRouter(this)
    && !ot::RouterTable::IsAllocated((ot::Mle::MleRouter *)((char *)this + 30912), *((unsigned char *)this + 35697)))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Error while processing Route TLV - Router ID: %d", v5, v6, v7, v8, v9, v10, *((unsigned char *)this + 35697));
    ot::Mle::Mle::BecomeDetached(this);
    IgnoreError();
    unsigned int v16 = 4;
  }
  if (Rloc16 != 65534)
  {
    uint64_t v11 = (ot::NeighborTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    a3[3] = (ot::Neighbor *)ot::NeighborTable::FindNeighbor(v11, Rloc16, 1);
  }
  return v16;
}

uint64_t ot::Router::GetNextHop(ot::Router *this)
{
  return *((unsigned __int8 *)this + 140);
}

{
  return ot::Router::GetNextHop(this);
}

uint64_t ot::Neighbor::SetIdSeqNum(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3ot::Tlv::SetType(this, 3) = a2;
  return this;
}

{
  return ot::Neighbor::SetIdSeqNum(this, a2);
}

uint64_t ot::Mle::RouteTlv::GetRouterIdSequence(ot::Mle::RouteTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::Mle::RouteTlv::GetRouterIdSequence(this);
}

uint64_t ot::Mle::MleRouter::SetRouterSelectionJitter(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v3 = 0;
  if (a2) {
    *((unsigned char *)this + 3571ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  }
  else {
    return 7;
  }
  return v3;
}

BOOL ot::RouterTable::Contains(ot::RouterTable *this, const ot::Neighbor *a2)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsInArrayBuffer((unint64_t)this + 8, (unint64_t)a2);
}

{
  return ot::RouterTable::Contains(this, a2);
}

uint64_t ot::Mle::RouteTlv::GetRouterIdMask(ot::Mle::RouteTlv *this)
{
  return (uint64_t)this + 3;
}

{
  return ot::Mle::RouteTlv::GetRouterIdMask(this);
}

uint64_t ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(ot::Mle::MleRouter *this, ot::Mle::Mle::RxMessage **a2, unsigned __int8 a3)
{
  unsigned int v9 = 0;
  if (ot::Mle::Mle::IsFullThreadDevice(this))
  {
    int RouteTlv = ot::Mle::Mle::RxMessage::ReadRouteTlv(*a2, (ot::Mle::RouteTlv *)v12, v3, v4, v5);
    if (RouteTlv)
    {
      if (RouteTlv != 23) {
        return 6;
      }
    }
    else
    {
      unsigned int v9 = ot::Mle::MleRouter::ProcessRouteTlv(this, (const ot::Mle::RouteTlv *)v12, a2);
      if (!v9)
      {
        ot::RouterTable::UpdateRoutesOnFed((BOOL)this + 30912, (const ot::Mle::RouteTlv *)v12, a3);
        *((unsigned char *)this + 72) &= ~2u;
      }
    }
  }
  return v9;
}

BOOL ot::Mle::MleRouter::IsSingleton(ot::Mle::MleRouter *this)
{
  BOOL v3 = 1;
  if (ot::Mle::Mle::IsAttached(this) && (ot::Mle::MleRouter::IsRouterEligible(this) & 1) != 0) {
    return ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 30912)) <= 1u;
  }
  return v3;
}

uint64_t ot::Mle::MleRouter::ComparePartitions(ot::Mle::MleRouter *this, ot::Mle::LeaderData *a2, const ot::Mle::LeaderData *a3, ot::Mle::LeaderData *a4, const ot::Mle::LeaderData *a5)
{
  char v20 = this & 1;
  char v18 = a3 & 1;
  unsigned __int8 Weighting = ot::Mle::LeaderData::GetWeighting(a2);
  unsigned __int8 v5 = ot::Mle::LeaderData::GetWeighting(a4);
  unsigned int v16 = ot::ThreeWayCompare<unsigned char>(Weighting, v5);
  if (!v16)
  {
    unsigned int v16 = ot::ThreeWayCompare<BOOL>((v20 ^ 1) & 1, (v18 ^ 1) & 1);
    if (!v16)
    {
      unsigned int PartitionId = ot::Mle::LeaderData::GetPartitionId(a2);
      unsigned int v6 = ot::Mle::LeaderData::GetPartitionId(a4);
      unsigned int v16 = ot::ThreeWayCompare<unsigned int>(PartitionId, v6);
    }
  }
  ot::Mle::LeaderData::GetWeighting(a2);
  ot::Mle::LeaderData::GetWeighting(a4);
  ot::Mle::LeaderData::GetPartitionId(a2);
  ot::Mle::LeaderData::GetPartitionId(a4);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "MleRouter::ComparePartitions rval:%d, weighting:[%u %u], !singleton:[%d %d], partId:[%u %u]", v7, v8, v9, v10, v11, v12, v16);
  return v16;
}

uint64_t ot::ThreeWayCompare<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 == a2)
  {
    return 0;
  }
  else if (a1 > a2)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

{
  return ot::ThreeWayCompare<unsigned int>(a1, a2);
}

uint64_t ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::MleRouter *this, ot::Neighbor **a2, unsigned __int16 a3, const ot::Mle::LeaderData *a4)
{
  uint64_t v129 = this;
  uint64_t v128 = a2;
  unsigned __int16 v127 = a3;
  uint64_t v126 = a4;
  uint64_t v116 = this;
  unsigned int v125 = 0;
  unsigned __int8 v124 = 0;
  uint64_t v117 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  uint64_t ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(v128[1]);
  char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
  unsigned __int8 v124 = ot::Mac::Mac::ComputeLinkMargin(v117, Rss);
  uint64_t v123 = 0;
  unsigned __int8 v122 = 0;
  if (ot::Mle::Mle::IsCslPeripheralAttaching(v116) || ot::Mle::Mle::IsCslPeripheralAttached(v116))
  {
    unsigned int v125 = 2;
  }
  else
  {
    int RouteTlv = ot::Mle::Mle::RxMessage::ReadRouteTlv(*v128, (ot::Mle::RouteTlv *)v130, v6, v7, v8);
    if (RouteTlv)
    {
      if (RouteTlv != 23)
      {
        unsigned int v125 = 6;
        goto LABEL_69;
      }
      ot::Tlv::SetLength((uint64_t)v130, 0);
    }
    int PartitionId = ot::Mle::LeaderData::GetPartitionId(v126);
    if (PartitionId == ot::Mle::LeaderData::GetPartitionId((ot::InstanceLocator *)((char *)v116 + 64)))
    {
      int LeaderRouterId = ot::Mle::LeaderData::GetLeaderRouterId(v126);
      if (LeaderRouterId == ot::Mle::Mle::GetLeaderId(v116))
      {
        if (ot::Mle::IsActiveRouter((ot::Mle *)v127) && ot::Mle::RouteTlv::IsValid((ot::Mle::RouteTlv *)v130))
        {
          unsigned __int8 v122 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v127);
          int v92 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
          int v89 = 0;
          Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v126, 0);
          int v90 = 1;
          int v94 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v126, 1);
          int v95 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v116 + 64, 0);
          int v96 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v116 + 64, 1);
          int v91 = (ot::Mle::RouteTlv *)v130;
          RouterIdchar Sequence = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v130);
          uint64_t v68 = DataVersion;
          uint64_t v69 = v94;
          uint64_t v70 = v95;
          uint64_t v71 = v96;
          uint64_t v72 = RouterIdSequence;
          uint64_t IsRouteTlvIdSequenceMoreRecent = ot::RouterTable::IsRouteTlvIdSequenceMoreRecent((ot::InstanceLocator *)((char *)v116 + 30912), (const ot::Mle::RouteTlv *)v130);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "MLE Advertisement received from router (0x%04x), aleaderDataVersion:[full:%d stable:%d] myLeaderDataVer:[full:%d, stable:%d] ,routeTlvIdSeqNum(%d), isRouteTlvIdSeqNumMoreRecent(%d)", v27, v28, v29, v30, v31, v32, v92);
          if (!ot::Mle::Mle::RxInfo::IsNeighborStateValid(v128)
            || !ot::RouterTable::IsRouteTlvIdSequenceMoreRecent((ot::InstanceLocator *)((char *)v116 + 30912), (const ot::Mle::RouteTlv *)v130))
          {
            goto LABEL_41;
          }
          BOOL IsStateValid = 0;
          if (ot::Mle::Mle::IsChild(v116))
          {
            int v88 = v127;
            if (v127 == (unsigned __int16)ot::Neighbor::GetRloc16((ot::InstanceLocator *)((char *)v116 + 80)))
            {
              BOOL IsStateValid = 1;
            }
            else
            {
              ot::RouterTable::FindRouterById((ot::InstanceLocator *)((char *)v116 + 30912), v122);
              uint64_t v123 = v33;
              if (v33) {
                BOOL IsStateValid = ot::Neighbor::IsStateValid(v123);
              }
            }
          }
          else
          {
            BOOL IsStateValid = 1;
          }
          if (!IsStateValid
            || (unsigned int v125 = ot::Mle::MleRouter::ProcessRouteTlv(v116, (const ot::Mle::RouteTlv *)v130, v128)) == 0)
          {
LABEL_41:
            if (ot::Mle::Mle::IsChild(v116))
            {
              if (v128[3] == (ot::InstanceLocator *)((char *)v116 + 80))
              {
                uint64_t v123 = (ot::InstanceLocator *)((char *)v116 + 80);
                if (v127 != (unsigned __int16)ot::Neighbor::GetRloc16((ot::InstanceLocator *)((char *)v116 + 80)))
                {
                  char Rloc16 = ot::Neighbor::GetRloc16((ot::InstanceLocator *)((char *)v116 + 80));
                  uint64_t v68 = v127;
                  ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "RLOC16 of the parent mismatches parentRloc16:0x%x sourceAddr:0x%x", v35, v36, v37, v38, v39, v40, Rloc16);
                  ot::Mle::Mle::BecomeDetached(v116);
                  IgnoreError();
                  unsigned int v125 = 16;
                  goto LABEL_69;
                }
                if (!*((unsigned char *)v116 + 35711)
                  && *((unsigned __int8 *)v116 + 35637) > (int)ot::RouterTable::GetActiveRouterCount((ot::InstanceLocator *)((char *)v116 + 30912)))
                {
                  *((unsigned char *)v116 + 3571ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Random::NonCrypto::GetUint8InRange(0, *((unsigned char *)v116 + 35710)) + 1;
                }
                int updated = (ot::TimerMilli *)ot::RouterTable::UpdateRoutesOnFed((BOOL)v116 + 30912, (const ot::Mle::RouteTlv *)v130, v122);
              }
              else
              {
                ot::RouterTable::FindRouterById((ot::InstanceLocator *)((char *)v116 + 30912), v122);
                uint64_t v123 = v42;
                if (!v42) {
                  goto LABEL_69;
                }
                int updated = (ot::TimerMilli *)ot::Neighbor::IsStateValid(v123);
                if ((updated & 1) == 0)
                {
                  int updated = (ot::TimerMilli *)ot::Neighbor::IsStateLinkRequest(v123);
                  if ((updated & 1) == 0)
                  {
                    int updated = (ot::TimerMilli *)ot::RouterTable::GetNeighborCount((ot::InstanceLocator *)((char *)v116 + 30912));
                    if (*((unsigned __int8 *)v116 + 35712) > (int)updated)
                    {
                      ot::Mle::Mle::InitNeighbor(v116, v123, v128);
                      ot::Neighbor::SetState(v123, 5);
                      ot::Mle::MleRouter::SendLinkRequest(v116, v123);
                      IgnoreError();
                      unsigned int v125 = 4;
                      goto LABEL_69;
                    }
                  }
                }
              }
              unsigned __int16 v87 = v123;
              int Now = ot::TimerMilli::GetNow(updated);
              ot::Neighbor::SetLastHeard((uint64_t)v123, Now);
              goto LABEL_69;
            }
            if (ot::Mle::Mle::IsRouter(v116)
              && (ot::Mle::MleRouter::ShouldDowngrade(v116, v122, (const ot::Mle::RouteTlv *)v130) & 1) != 0)
            {
              *((unsigned char *)v116 + 3571ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Random::NonCrypto::GetUint8InRange(0, *((unsigned char *)v116 + 35710)) + 1;
            }
            ot::RouterTable::FindRouterById((ot::InstanceLocator *)((char *)v116 + 30912), v122);
            uint64_t v123 = v43;
            if (v43)
            {
              unsigned int v84 = v123;
              char v44 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v126, 0);
              ot::Neighbor::SetLeaderFullDataVersion((uint64_t)v123, v44);
              unsigned int v85 = v123;
              char v45 = ot::Mle::LeaderData::GetDataVersion((uint64_t)v126, 1);
              ot::Neighbor::SetLeaderStableDataVersion((uint64_t)v123, v45);
              char v86 = v123;
              char v46 = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v130);
              ot::Neighbor::SetIdSeqNum((uint64_t)v123, v46);
              if (!ot::Neighbor::IsStateValid(v123) && ot::Mle::Mle::RxInfo::IsNeighborStateValid(v128))
              {
                uint64_t v47 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(v116);
                if (ot::ChildTable::Contains(v47, v128[3]))
                {
                  char v48 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Advertisement received from former child which is now a router (0x%04x),copy entries from child table to router table and update eid cache", v49, v50, v51, v52, v53, v54, v48);
                  memcpy(v123, v128[3], 0x8CuLL);
                  unsigned __int8 v80 = v123;
                  __int16 v55 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
                  ot::Neighbor::SetRloc16((uint64_t)v123, v55);
                  uint64_t v81 = v123;
                  ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v119, 11);
                  ot::Neighbor::SetDeviceMode((uint64_t)v81, v119);
                  ot::NeighborTable::Signal((ot::InstanceLocator *)((char *)v116 + 232), 3u, v123);
                  unsigned __int8 v83 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(v116);
                  int v82 = ot::Neighbor::GetRloc16(v128[3]);
                  __int16 v56 = ot::Neighbor::GetRloc16(v123);
                  ot::AddressResolver::ReplaceEntriesForRloc16((BOOL)v83, v82, v56);
                }
              }
              BOOL IsStateLinkRequest = ot::Neighbor::IsStateValid(v123);
              if (IsStateLinkRequest
                || (BOOL IsStateLinkRequest = ot::Neighbor::IsStateLinkRequest(v123))
                || *((unsigned char *)v116 + 35624)
                || v124 < 0xAu)
              {
                char v79 = v123;
                int v118 = ot::TimerMilli::GetNow((ot::TimerMilli *)IsStateLinkRequest);
                ot::Neighbor::SetLastHeard((uint64_t)v79, v118);
                ot::RouterTable::UpdateRoutes((ot::InstanceLocator *)((char *)v116 + 30912), (const ot::Mle::RouteTlv *)v130, v122);
              }
              else
              {
                ot::Mle::Mle::InitNeighbor(v116, v123, v128);
                ot::Neighbor::SetState(v123, 5);
                ot::Mle::MleRouter::SendLinkRequest(v116, v123);
                IgnoreError();
                char v58 = ot::Mle::Rloc16FromRouterId((ot::Mle *)v122);
                ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Advertisement received from router (0x%04x) to which no link exists", v59, v60, v61, v62, v63, v64, v58);
                unsigned int v125 = 4;
              }
            }
          }
        }
      }
      else if (ot::Mle::Mle::RxInfo::IsNeighborStateValid(v128) && !ot::Mle::Mle::IsChild(v116))
      {
        int LeaderId = ot::Mle::Mle::GetLeaderId(v116);
        uint64_t v68 = ot::Mle::LeaderData::GetLeaderRouterId(v126);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Leader ID mismatch leaderId=%d, leaderData.leaderRouterId=%d", v21, v22, v23, v24, v25, v26, LeaderId);
        ot::Mle::Mle::BecomeDetached(v116);
        IgnoreError();
        unsigned int v125 = 2;
      }
    }
    else
    {
      uint64_t v9 = ot::Mle::LeaderData::GetPartitionId(v126);
      uint64_t v103 = ot::ToUlong(v9);
      uint64_t v10 = ot::Mle::LeaderData::GetPartitionId((ot::InstanceLocator *)((char *)v116 + 64));
      uint64_t v104 = ot::ToUlong(v10);
      int v105 = v124;
      uint64_t v102 = (ot::Mle::RouteTlv *)v130;
      BOOL IsValid = ot::Mle::RouteTlv::IsValid((ot::Mle::RouteTlv *)v130);
      unsigned int v107 = *((unsigned __int8 *)v116 + 35709);
      unsigned int v108 = ot::Mle::LeaderData::GetPartitionId(v126);
      uint64_t v109 = *((unsigned int *)v116 + 8926);
      int v110 = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v130);
      unsigned int v111 = *((unsigned __int8 *)v116 + 35708);
      BOOL IsSingleton = ot::Mle::RouteTlv::IsSingleton((ot::Mle::RouteTlv *)v130);
      uint64_t v113 = &v67;
      uint64_t v68 = v104;
      uint64_t v69 = v124;
      uint64_t v70 = 10;
      uint64_t v71 = IsValid;
      uint64_t v72 = v107;
      uint64_t IsRouteTlvIdSequenceMoreRecent = v108;
      uint64_t v74 = v109;
      uint64_t v75 = v110;
      uint64_t v76 = v111;
      BOOL v77 = IsSingleton;
      BOOL v78 = ot::Mle::MleRouter::IsSingleton(v116);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Different partition (peer:%lu, local:%lu), linkMargin:%d, partitionMergeLinkMargin:%d, routeTlvIsValid:%d, mPrevPartIdTimeout:%d, leaderDataPartId:%d, prevPartId:%d, routerIdSeq:%d, prevPartRouterIdSeq:%d, routeTlvIsSingleton:%d isSingleTon:%d", v11, v12, v13, v14, v15, v16, v103);
      if (v124 >= 0xAu)
      {
        if (ot::Mle::RouteTlv::IsValid((ot::Mle::RouteTlv *)v130)
          && *((unsigned char *)v116 + 35709)
          && (int v17 = ot::Mle::LeaderData::GetPartitionId(v126), v17 == *((_DWORD *)v116 + 8926))
          && (char v18 = ot::Mle::RouteTlv::GetRouterIdSequence((ot::Mle::RouteTlv *)v130),
              !ot::SerialNumber::IsGreater<unsigned char>(v18, *((unsigned char *)v116 + 35708))))
        {
          unsigned int v125 = 2;
        }
        else if (!ot::Mle::Mle::IsChild(v116) || v128[3] != (ot::InstanceLocator *)((char *)v116 + 80))
        {
          BOOL v101 = ot::Mle::RouteTlv::IsSingleton((ot::Mle::RouteTlv *)v130);
          *(void *)char v100 = v126;
          BOOL v19 = ot::Mle::MleRouter::IsSingleton(v116);
          if ((int)ot::Mle::MleRouter::ComparePartitions((ot::Mle::MleRouter *)v101, *(ot::Mle::LeaderData **)v100, (const ot::Mle::LeaderData *)v19, (ot::InstanceLocator *)((char *)v116 + 64), v20) > 0)ot::Mle::Mle::Attach((uint64_t)v116, 2); {
          unsigned int v125 = 2;
          }
        }
      }
      else
      {
        unsigned int v125 = 34;
      }
    }
  }
LABEL_69:
  if (v128[3])
  {
    unsigned __int16 v65 = ot::Neighbor::GetRloc16(v128[3]);
    if (v127 != v65) {
      ot::Mle::MleRouter::RemoveNeighbor(v116, v128[3]);
    }
  }
  return v125;
}

BOOL ot::Mle::RouteTlv::IsSingleton(ot::Mle::RouteTlv *this)
{
  BOOL v3 = 0;
  if (ot::Mle::RouteTlv::IsValid(this)) {
    return ot::Mle::RouterIdSet::GetNumberOfAllocatedIds((ot::Mle::RouteTlv *)((char *)this + 3)) <= 1u;
  }
  return v3;
}

{
  return ot::Mle::RouteTlv::IsSingleton(this);
}

uint64_t ot::Mle::MleRouter::ShouldDowngrade(ot::Mle::MleRouter *this, unsigned __int8 a2, const ot::Mle::RouteTlv *a3)
{
  char v12 = 0;
  unsigned __int8 ActiveRouterCount = ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 30912));
  if (ot::Mle::Mle::IsRouter(this)
    && ot::RouterTable::IsAllocated((ot::Mle::MleRouter *)((char *)this + 30912), a2)
    && !*((unsigned char *)this + 35711)
    && ActiveRouterCount > (int)*((unsigned __int8 *)this + 35638))
  {
    unsigned __int8 v9 = 0;
    ot::RouterTable::begin((ot::Mle::MleRouter *)((char *)this + 30912));
    uint64_t v8 = v3;
    uint64_t v7 = ot::RouterTable::end((ot::Mle::MleRouter *)((char *)this + 30912));
    while (v8 != (ot::Neighbor *)v7)
    {
      if (ot::Neighbor::IsStateValid(v8) && ot::Router::GetTwoWayLinkQuality(v8) >= 2u && ++v9 >= 7u) {
        break;
      }
      uint64_t v8 = (ot::Neighbor *)((char *)v8 + 144);
    }
    if (v9 >= 7u)
    {
      unsigned __int8 v10 = ActiveRouterCount - *((unsigned char *)this + 35638);
      if (3 * v10 > (unsigned __int16)ot::ChildTable::GetNumChildren((__int16 *)this + 604, 0)
        && (ot::Mle::MleRouter::NeighborHasComparableConnectivity(this, a3, a2) & 1) != 0)
      {
        uint64_t v4 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
        if (!ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(v4)) {
          char v12 = 1;
        }
      }
    }
  }
  return v12 & 1;
}

void ot::Mle::MleRouter::HandleParentRequest(ot::Mle::MleRouter *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v129 = this;
  *(void *)&v128[7] = a2;
  *(_DWORD *)&v128[3] = 0;
  *(_WORD *)&v128[1] = 0;
  v128[0] = 0;
  NewChild = 0;
  unsigned __int8 v126 = 0;
  unsigned __int16 v124 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 0x1Bu, PeerAddr);
  if ((ot::Mle::MleRouter::IsRouterEligible(this) & 1) == 0)
  {
    *(_DWORD *)&v128[3] = 13;
    char v3 = ot::ErrorToString(13);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request dropped as not router eligible error:%s", v4, v5, v6, v7, v8, v9, v3);
    goto LABEL_67;
  }
  BOOL IsRxOnWhenIdle = ot::Mle::Mle::IsRxOnWhenIdle(this);
  SockAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(*(ot::Ip6::MessageInfo **)(*(void *)&v128[7] + 8));
  if (IsRxOnWhenIdle != ot::Ip6::Address::IsMulticast(SockAddr))
  {
    *(_DWORD *)&v128[3] = 13;
    goto LABEL_67;
  }
  if (ot::Mle::Mle::IsDetached(this) || ot::Mle::Mle::IsAttaching(this))
  {
    *(_DWORD *)&v128[3] = 2;
    BOOL IsDetached = ot::Mle::Mle::IsDetached(this);
    ot::Mle::Mle::IsAttaching(this);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request dropped as isDetached(%d) isAttaching(%d)", v11, v12, v13, v14, v15, v16, IsDetached);
    goto LABEL_67;
  }
  if (ot::RouterTable::GetLeaderAge((ot::Mle::MleRouter *)((char *)this + 30912)) >= *((unsigned __int8 *)this + 35636))
  {
    *(_DWORD *)&v128[3] = 2;
    char LeaderAge = ot::RouterTable::GetLeaderAge((ot::Mle::MleRouter *)((char *)this + 30912));
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request dropped as routerTable.leaderAge(%d) nwIdTimeout(%d)", v18, v19, v20, v21, v22, v23, LeaderAge);
    goto LABEL_67;
  }
  if (ot::RouterTable::GetPathCostToLeader((ot::Mle::MleRouter *)((char *)this + 30912)) >= 0x10u)
  {
    char PathCostToLeader = ot::RouterTable::GetPathCostToLeader((ot::Mle::MleRouter *)((char *)this + 30912));
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request dropped here LinkCostToLeader:%d", v25, v26, v27, v28, v29, v30, PathCostToLeader);
    goto LABEL_67;
  }
  uint64_t v31 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*(ot::Ip6::MessageInfo **)(*(void *)&v128[7] + 8));
  Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v31);
  ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v135);
  *(_DWORD *)&v128[3] = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(**(ot::Tlv ***)&v128[7], (unsigned __int16 *)&v128[1], v33, v34);
  if (!*(_DWORD *)&v128[3])
  {
    if (*(unsigned __int16 *)&v128[1] < 2u)
    {
      *(_DWORD *)&v128[3] = 6;
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request dropped due to Parse error version:%d", v35, (uint64_t)v36, v37, v38, v39, v40, v128[1]);
      goto LABEL_67;
    }
    *(_DWORD *)&v128[3] = ot::Tlv::Find<ot::Mle::ScanMaskTlv>(**(ot::Tlv ***)&v128[7], v128, v35, v36);
    if (!*(_DWORD *)&v128[3])
    {
      unsigned int v116 = *((unsigned __int8 *)this + 73);
      if (v116 > 1)
      {
        if (v116 == 2)
        {
          if (!ot::Mle::ScanMaskTlv::IsEndDeviceFlagSet((ot::Mle::ScanMaskTlv *)v128[0])) {
            goto LABEL_67;
          }
          if (ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 30912)) >= 0x20u)
          {
            *(_DWORD *)&v128[3] = 2;
            goto LABEL_67;
          }
        }
        else
        {
          BOOL v44 = v116 == 4 || v116 == 3;
          if (v44 && !ot::Mle::ScanMaskTlv::IsRouterFlagSet((ot::Mle::ScanMaskTlv *)v128[0])) {
            goto LABEL_67;
          }
        }
        *(_DWORD *)&v128[3] = ot::Mle::Mle::RxMessage::ReadChallengeTlv(**(ot::Mle::Mle::RxMessage ***)&v128[7], (ot::Mle::Mle::Challenge *)v134, v41, v42, v43);
        if (*(_DWORD *)&v128[3])
        {
          char v45 = ot::ErrorToString(*(int *)&v128[3]);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request dropped error:%s as ReadChallenge failed", v46, v47, v48, v49, v50, v51, v45);
        }
        else
        {
          ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1208), (uint64_t)v135, 5);
          NewChild = v52;
          if (v52)
          {
            int Now = ot::TimerMilli::GetNow(v52);
            int LastHeard = ot::Neighbor::GetLastHeard(NewChild);
            if (ot::Time::operator-(&Now, &LastHeard) < 0x2BC)
            {
              *(_DWORD *)&v128[3] = 29;
              goto LABEL_67;
            }
          }
          else
          {
            NewChild = ot::ChildTable::GetNewChild((ot::Mle::MleRouter *)((char *)this + 1208));
            if (!NewChild)
            {
              *(_DWORD *)&v128[3] = 3;
              goto LABEL_67;
            }
            ot::Mle::Mle::InitNeighbor(this, NewChild, *(ot::Ip6::MessageInfo ***)&v128[7]);
            ot::Neighbor::SetState(NewChild, 2);
            if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(**(ot::Tlv ***)&v128[7], &v126, v53, v54))
            {
              ot::Mle::DeviceMode::Set(&v125, v126);
              v123[2] = v125;
              ot::Child::SetDeviceMode(NewChild, v125);
              ot::Neighbor::SetVersion((uint64_t)NewChild, *(__int16 *)&v128[1]);
            }
            if (*((unsigned char *)this + 384) == 2)
            {
              int CslClockAccuracyTlv = ot::Mle::Mle::RxMessage::ReadCslClockAccuracyTlv(**(ot::Mle::Mle::RxMessage ***)&v128[7], (ot::Mac::CslAccuracy *)v123, v55, v56, v57);
              if (CslClockAccuracyTlv)
              {
                if (CslClockAccuracyTlv != 23)
                {
                  *(_DWORD *)&v128[3] = 6;
                  goto LABEL_67;
                }
                ot::Mac::CslAccuracy::Init(v123);
              }
              Instance = ot::InstanceLocator::GetInstance(this);
              otPlatRadioStopWakeup((uint64_t)Instance, v59, v60, v61, v62, v63, v64, v65);
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Stopping Wakeup after receiving parent request ", v66, v67, v68, v69, v70, v71, v109);
              uint64_t v72 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
              ot::Mac::Mac::SetCslParentAccuracy(v72, (const ot::Mac::CslAccuracy *)v123);
            }
          }
          BOOL IsStateValidOrRestoring = ot::Neighbor::IsStateValidOrRestoring(NewChild);
          if (!IsStateValidOrRestoring)
          {
            uint64_t v113 = NewChild;
            int v120 = ot::TimerMilli::GetNow((ot::TimerMilli *)IsStateValidOrRestoring);
            ot::Neighbor::SetLastHeard((uint64_t)v113, v120);
            uint64_t v114 = NewChild;
            int v76 = ot::Time::MsecToSec((ot::Time *)0x1388);
            ot::Child::SetTimeout((uint64_t)v114, v76);
          }
          if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(**(ot::Tlv ***)&v128[7], &v126, v74, v75))
          {
            ot::Mle::DeviceMode::Set(&v125, v126);
            if (!ot::Mle::Mle::IsSleepyRouter(this))
            {
              if (*((unsigned char *)this + 35689))
              {
                if (ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v125))
                {
                  ot::Mle::DeviceMode::ToString((ot::Mle::MleRouter *)((char *)this + 240), (ot::StringWriter *)v131);
                  char v111 = ot::String<(unsigned short)45>::AsCString((uint64_t)v131);
                  ot::Mle::DeviceMode::ToString((ot::Mle::DeviceMode *)&v125, (ot::StringWriter *)v130);
                  ot::String<(unsigned short)45>::AsCString((uint64_t)v130);
                  ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request accepted from Non-Sleepy Accessories, DUT mode: %s, Joiner Mode: %s: %s", v84, v85, v86, v87, v88, v89, v111);
                  int v90 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
                  ot::Notifier::Signal(v90, 0x800000000);
                }
                else
                {
                  ot::Mle::DeviceMode::ToString((ot::Mle::MleRouter *)((char *)this + 240), (ot::StringWriter *)v133);
                  char v112 = ot::String<(unsigned short)45>::AsCString((uint64_t)v133);
                  ot::Mle::DeviceMode::ToString((ot::Mle::DeviceMode *)&v125, (ot::StringWriter *)v132);
                  ot::String<(unsigned short)45>::AsCString((uint64_t)v132);
                  ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Parent Request accepted from Sleepy Accessories, DUT mode: %s, Joiner Mode: %s: %s", v77, v78, v79, v80, v81, v82, v112);
                  unsigned __int8 v83 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
                  ot::Notifier::Signal(v83, 0x400000000);
                }
                ot::Mle::Mle::SetThreadCoexConfig(this, 0, *((unsigned char *)this + 73), *((unsigned char *)this + 241));
              }
            }
          }
          if (*((unsigned char *)this + 384) == 2)
          {
            ot::WakeupTxScheduler::Stop((ot::Mle::MleRouter *)((char *)this + 328));
            *((unsigned char *)this + 38--*(unsigned char *)(this + 4) = 3;
            char v91 = ot::Mle::Mle::WorAttachStateToString((uint64_t)this, *((unsigned char *)this + 384));
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "mCslPeripheralAttachchar State = %s, %s", v92, v93, v94, v95, v96, v97, v91);
            ot::Mle::Mle::SetCslPeripheral((uint64_t)this, NewChild);
            int v110 = NewChild;
            int v98 = ot::Time::MsecToSec((ot::Time *)0x3E8);
            ot::Child::SetTimeout((uint64_t)v110, v98);
            if (!ot::Mle::Mle::IsRxOnWhenIdle(this))
            {
              uint64_t v99 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
              ot::MeshForwarder::SetRxOnWhenIdle(v99, 0, v100, v101, v102, v103, v104, v105);
            }
            char v106 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            ot::Mac::Mac::UpdateCsl(v106, 0);
          }
          *(unsigned char *)(*(void *)&v128[7] + 3ot::Tlv::SetType(this, 2) = 2;
          ot::Mle::Mle::ProcessKeySequence(this, *(ot::Mle::Mle::RxInfo **)&v128[7]);
          unsigned int v107 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(*(ot::Ip6::MessageInfo **)(*(void *)&v128[7]
                                                                                                + 8));
          if (ot::Ip6::Address::IsMulticast(v107))
          {
            if (ot::Mle::ScanMaskTlv::IsEndDeviceFlagSet((ot::Mle::ScanMaskTlv *)v128[0])) {
              unsigned __int16 v108 = 1000;
            }
            else {
              unsigned __int16 v108 = 500;
            }
            unsigned __int16 v124 = v108;
          }
          else
          {
            unsigned __int16 v124 = 0;
          }
          ot::Mle::MleRouter::SendParentResponse(this, NewChild, (const ot::Mle::Mle::Challenge *)v134, v124);
        }
      }
    }
  }
LABEL_67:
  ot::Mle::Mle::LogProcessError(0x1Bu, *(int *)&v128[3]);
}

uint64_t ot::Tlv::Find<ot::Mle::ScanMaskTlv>(ot::Tlv *a1, unsigned char *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned char>(a1, 0xEu, a2, a4);
}

{
  return ot::Tlv::Find<ot::Mle::ScanMaskTlv>(a1, a2, a3, a4);
}

BOOL ot::Mle::ScanMaskTlv::IsEndDeviceFlagSet(ot::Mle::ScanMaskTlv *this)
{
  return (this & 0x40) != 0;
}

{
  return ot::Mle::ScanMaskTlv::IsEndDeviceFlagSet(this);
}

BOOL ot::Mle::ScanMaskTlv::IsRouterFlagSet(ot::Mle::ScanMaskTlv *this)
{
  return (char)this < 0;
}

{
  return ot::Mle::ScanMaskTlv::IsRouterFlagSet(this);
}

uint64_t ot::Mle::Mle::SetCslPeripheral(uint64_t this, ot::Neighbor *a2)
{
  *(void *)(this + 108ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
  return this;
}

{
  return ot::Mle::Mle::SetCslPeripheral(this, a2);
}

void ot::Mle::MleRouter::SendParentResponse(ot::Mle::MleRouter *this, ot::Child *a2, const ot::Mle::Mle::Challenge *a3, unsigned __int16 a4)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  unsigned __int16 v13 = a4;
  int appended = 0;
  unsigned __int8 v10 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xAu);
  if (v10)
  {
    ot::Message::SetDirectTransmission(v10);
    int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v10);
    if (!appended)
    {
      int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v10);
      if (!appended)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v10);
        if (!appended)
        {
          int appended = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v10);
          if (!appended)
          {
            int appended = ot::Mle::Mle::TxMessage::AppendResponseTlv(v10, v14);
            if (!appended)
            {
              ot::Message::SetSubType(v10, 13);
              if (!ot::Neighbor::IsThreadVersionCslCapable(v15)
                || (int appended = ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv(v10)) == 0)
              {
                ot::Child::GenerateChallenge(v15);
                Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v15);
                Challengechar Size = ot::Child::GetChallengeSize(v15);
                int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v10, Challenge, ChallengeSize);
                if (!appended)
                {
                  if (ot::Mle::Mle::IsCslPeripheralPresent(this)
                    || (LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v15),
                        unsigned __int8 LinkMargin = ot::LinkQualityInfo::GetLinkMargin(LinkInfo),
                        (int appended = ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(v10, LinkMargin)) == 0)
                    && (int appended = ot::Mle::Mle::TxMessage::AppendConnectivityTlv(v10)) == 0)
                  {
                    int appended = ot::Mle::Mle::TxMessage::AppendVersionTlv(v10);
                    if (!appended)
                    {
                      ot::Neighbor::GetExtAddress(v15);
                      ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)v11, v7);
                      int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v10, (const ot::Ip6::Address *)v11, v13);
                      if (!appended) {
                        ot::Mle::Mle::Log(2, 0xFu, (ot::Ip6::Address *)v11);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int appended = 3;
  }
  if (appended && v10) {
    ot::Message::Free(v10);
  }
  ot::Mle::Mle::LogSendError(0xFu, appended);
}

uint64_t ot::Mle::MleRouter::HasNeighborWithGoodLinkQuality(ot::Mle::MleRouter *this)
{
  char v13 = 1;
  uint64_t v9 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo((ot::Mle::MleRouter *)((char *)this + 80));
  char LastRss = ot::LinkQualityInfo::GetLastRss(LinkInfo);
  if (ot::Mac::Mac::ComputeLinkMargin(v9, LastRss) < 0xAu)
  {
    uint64_t v12 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    ot::RouterTable::begin(v12);
    uint64_t v11 = v3;
    uint64_t v10 = ot::RouterTable::end(v12);
    while (v11 != (ot::Neighbor *)v10)
    {
      if (ot::Neighbor::IsStateValid(v11))
      {
        uint64_t v7 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        uint64_t v4 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v11);
        char v5 = ot::LinkQualityInfo::GetLastRss(v4);
        if (ot::Mac::Mac::ComputeLinkMargin(v7, v5) >= 0xAu) {
          return v13 & 1;
        }
      }
      uint64_t v11 = (ot::Neighbor *)((char *)v11 + 144);
    }
    char v13 = 0;
  }
  return v13 & 1;
}

void ot::Mle::MleRouter::HandleTimeTick(ot::Mle::MleRouter *this)
{
  uint64_t v138 = this;
  char v137 = 0;
  if (!ot::Mle::Mle::IsFullThreadDevice(this))
  {
    uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    ot::TimeTicker::UnregisterReceiver(v1, 1);
    return;
  }
  if (*((unsigned char *)this + 35624)) {
    --*((unsigned char *)this + 35624);
  }
  if (*((unsigned char *)this + 35709)) {
    --*((unsigned char *)this + 35709);
  }
  if (*((unsigned char *)this + 35711))
  {
    if (!--*((unsigned char *)this + 35711)) {
      char v137 = 1;
    }
  }
  else if (*((unsigned char *)this + 35714))
  {
    if (!--*((unsigned char *)this + 35714))
    {
      uint64_t v2 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
      if (!ot::BackboneRouter::Leader::HasPrimary(v2))
      {
        char v3 = (ot::BackboneRouter::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Local>(this);
        if (!ot::BackboneRouter::Local::AddService(v3, 0))
        {
          uint64_t v4 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
          ot::NetworkData::Notifier::HandleServerDataUpdated(v4);
        }
      }
    }
  }
  if (*((unsigned char *)this + 73))
  {
    uint64_t v6 = *((unsigned __int8 *)this + 73);
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = *((unsigned __int8 *)this + 73);
    char v5 = 0;
  }
  if ((v5 & 1) == 0)
  {
    switch(v6)
    {
      case 0:
        __assert_rtn("HandleTimeTick", "mle_router.cpp", 2085, "false");
      case 1:
        if (*((unsigned char *)this + 35624) || *((unsigned char *)this + 320)) {
          break;
        }
        ot::Mle::Mle::BecomeDetached(this);
        IgnoreError();
        return;
      case 2:
        if ((v137 & 1) == 0) {
          goto LABEL_33;
        }
        if (*((unsigned __int8 *)this + 35637) > (int)ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 30912))
          && (ot::Mle::MleRouter::HasNeighborWithGoodLinkQuality(this) & 1) != 0)
        {
          ot::Mle::MleRouter::BecomeRouter((uint64_t)this, 2u);
          IgnoreError();
        }
        else
        {
          ot::Mle::Mle::InformPreviousChannel((uint64_t)this);
        }
        if (!ot::TrickleTimer::IsRunning((ot::Mle::MleRouter *)((char *)this + 1136)))
        {
          ot::Mle::MleRouter::SendAdvertisement(this);
          unsigned int v112 = ot::Time::SecToMsec((ot::Time *)0x23A);
          unsigned int v7 = ot::Time::SecToMsec((ot::Time *)0x276);
          ot::TrickleTimer::Start((uint64_t)this + 1136, 1, v112, v7, 0xFFFF);
        }
        return;
      case 3:
LABEL_33:
        if (!(ot::RouterTable::GetLeaderAge((ot::Mle::MleRouter *)((char *)this + 30912)) % 0xA))
        {
          uint64_t LeaderAge = ot::RouterTable::GetLeaderAge((ot::Mle::MleRouter *)((char *)this + 30912));
          char v9 = ot::ToUlong(LeaderAge);
          ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "network id timeout = %lu", v10, v11, v12, v13, v14, v15, v9);
        }
        char ActiveRouterCount = ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 30912));
        if (v17 | (ActiveRouterCount == 0)) {
          char v18 = 1;
        }
        else {
          char v18 = 0;
        }
        if ((v18 & 1) == 0
          && ot::RouterTable::GetLeaderAge((ot::Mle::MleRouter *)((char *)this + 30912)) >= *((unsigned __int8 *)this + 35636))
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Router ID Sequence timeout", v19, v20, v21, v22, v23, v24, v98);
          ot::Mle::Mle::Attach((uint64_t)this, 1);
        }
        if ((v137 & 1) != 0
          && *((unsigned __int8 *)this + 35638) < (int)ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 30912)))
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Downgrade to REED", v25, v26, v27, v28, v29, v30, v98);
          ot::Mle::Mle::Attach((uint64_t)this, 3);
        }
        goto LABEL_44;
      case 4:
LABEL_44:
        if ((v137 & 1) != 0 && (ot::Mle::MleRouter::IsRouterEligible(this) & 1) == 0)
        {
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "No longer router eligible", v31, v32, v33, v34, v35, v36, v98);
          ot::Mle::Mle::BecomeDetached(this);
          IgnoreError();
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
  uint64_t v37 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v135 = ot::ChildTable::Iterate(v37, 5);
  uint64_t v136 = (ot::ChildTable::IteratorBuilder *)&v135;
  v134[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v135);
  v134[1] = v38;
  v133[0] = ot::ChildTable::IteratorBuilder::end(v136);
  v133[1] = v39;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v134, v133))
  {
    uint64_t v132 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v134);
    unsigned int v131 = 0;
    BOOL v130 = 1;
    char v129 = 1;
    int State = ot::Neighbor::GetState(v132);
    if (!State) {
      goto LABEL_83;
    }
    if (State == 2 || State == 1) {
      goto LABEL_65;
    }
    if (State == 3) {
      goto LABEL_66;
    }
    if (State != 4)
    {
      if (State == 5) {
LABEL_66:
      }
        __assert_rtn("HandleTimeTick", "mle_router.cpp", 2111, "false");
      if (State == 7 || State == 6)
      {
LABEL_65:
        unsigned int Timeout = (ot::Time *)ot::Child::GetTimeout(v132);
        unsigned int v131 = ot::Time::SecToMsec(Timeout);
      }
      unint64_t IsCslPeripheralPresent = ot::Mle::Mle::IsCslPeripheralPresent(this);
      if (IsCslPeripheralPresent)
      {
        char v129 = 0;
        unint64_t IsCslPeripheralPresent = ot::Child::GetSupervisionInterval(v132);
        BOOL v130 = (unsigned __int16)IsCslPeripheralPresent == 0;
      }
      if (v129)
      {
        unint64_t IsCslPeripheralPresent = ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Neighbor *)((char *)v132 + 168));
        if (IsCslPeripheralPresent)
        {
          int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsCslPeripheralPresent);
          Cslint LastHeard = ot::CslTxScheduler::ChildInfo::GetCslLastHeard((ot::Neighbor *)((char *)v132 + 168));
          unsigned int v110 = ot::Time::operator-(&Now, &CslLastHeard);
          Cslunsigned int Timeout = (ot::Time *)ot::CslTxScheduler::ChildInfo::GetCslTimeout((ot::Neighbor *)((char *)v132 + 168));
          unsigned int v45 = ot::Time::SecToMsec(CslTimeout);
          unint64_t IsCslPeripheralPresent = v110;
          if (v110 < v45)
          {
            BOOL v130 = 0;
          }
          else
          {
            uint64_t v46 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
            uint64_t Counters = ot::Mac::Mac::GetCounters(v46);
            ++*(_DWORD *)(Counters + 88);
            char Rloc16 = ot::Neighbor::GetRloc16(v132);
            ot::Neighbor::GetExtAddress(v132);
            ot::Mac::ExtAddress::ToString(v47, (ot::StringWriter *)v143);
            ot::String<(unsigned short)17>::AsCString((uint64_t)v143);
            ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Child CSL synchronization expired RLOC16: 0x%04x ExtAddr: %s", v48, v49, v50, v51, v52, v53, Rloc16);
            ot::CslTxScheduler::ChildInfo::SetCslSynchronized((unsigned char *)v132 + 168, 0);
            ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((unsigned char *)v132 + 168, 0);
            uint64_t v54 = (ot::CslTxScheduler *)ot::GetProvider<ot::InstanceLocator>::Get<ot::CslTxScheduler>(this);
            ot::CslTxScheduler::Update(v54);
          }
        }
      }
      BOOL v108 = 0;
      if (v130)
      {
        int v125 = ot::TimerMilli::GetNow((ot::TimerMilli *)IsCslPeripheralPresent);
        int LastHeard = ot::Neighbor::GetLastHeard(v132);
        unsigned int v55 = ot::Time::operator-(&v125, &LastHeard);
        BOOL v108 = v55 >= v131;
      }
      if (v108)
      {
        char v107 = ot::Neighbor::GetRloc16(v132);
        ot::Neighbor::GetExtAddress(v132);
        ot::Mac::ExtAddress::ToString(v56, (ot::StringWriter *)v142);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v142);
        ot::Neighbor::GetState(v132);
        ot::Neighbor::GetLinkFailures(v132);
        v123[1] = ot::Neighbor::GetLastHeard(v132);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Child timeout expired, RLOC16: 0x%04x, ExtAddr: %s State:%d LinkFailureCount:%d LastHeard:%d", v57, v58, v59, v60, v61, v62, v107);
        ot::Mle::MleRouter::RemoveNeighbor(this, v132);
        ot::Mle::Mle::IncrementChildLossCounter((uint64_t)this);
        uint64_t v63 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        BOOL IsSleepyRouter = ot::Mle::Mle::IsSleepyRouter(v63);
        if (IsSleepyRouter)
        {
          v123[0] = ot::TimerMilli::GetNow((ot::TimerMilli *)IsSleepyRouter);
          int v122 = ot::Neighbor::GetLastHeard(v132);
          char v65 = ot::Time::operator-(v123, &v122);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Child timeout expired, mCslPeripheralAttachRetryTimer.Start Timeout=%d mSec", v66, v67, v68, v69, v70, v71, v65);
          uint64_t v72 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          ot::TimerMicro::Start((ot::TimerMicro *)(v72 + 8), 0x3E8u);
        }
      }
      else if (ot::Mle::Mle::IsRouterOrLeader(this) && ot::Neighbor::IsStateRestored(v132))
      {
        ot::Mle::MleRouter::SendChildUpdateRequest(this, v132);
        IgnoreError();
      }
    }
LABEL_83:
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v134);
  }
  uint64_t v121 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  ot::RouterTable::begin(v121);
  int v120 = v73;
  char v119 = (ot::Neighbor *)ot::RouterTable::end(v121);
  while (v120 != v119)
  {
    int v118 = v120;
    unsigned int v117 = 0;
    int v106 = (unsigned __int16)ot::Neighbor::GetRloc16(v120);
    uint64_t v74 = (ot::TimerMilli *)ot::Mle::Mle::GetRloc16(this);
    if (v106 == (unsigned __int16)v74)
    {
      uint64_t v105 = v118;
      int v116 = ot::TimerMilli::GetNow(v74);
      ot::Neighbor::SetLastHeard((uint64_t)v105, v116);
      goto LABEL_102;
    }
    int v115 = ot::TimerMilli::GetNow(v74);
    int v114 = ot::Neighbor::GetLastHeard(v118);
    unsigned int v117 = ot::Time::operator-(&v115, &v114);
    if (ot::Neighbor::IsStateValid(v118))
    {
      unsigned int v104 = v117;
      if (v104 >= ot::Time::SecToMsec((ot::Time *)0x64))
      {
        unsigned int v103 = v117;
        if (v103 >= ot::Time::SecToMsec((ot::Time *)0x64) + 3000)
        {
          ot::Mle::MleRouter::RemoveNeighbor(this, v118);
          ot::Mle::Mle::IncrementRouterLossCounter((uint64_t)this);
          goto LABEL_102;
        }
        char v102 = ot::Neighbor::GetRloc16(v118);
        ot::Neighbor::GetExtAddress(v118);
        ot::Mac::ExtAddress::ToString(v75, (ot::StringWriter *)v141);
        ot::String<(unsigned short)17>::AsCString((uint64_t)v141);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Router timeout expired, RLOC16: 0x%04x, ExtAddr: %s", v76, v77, v78, v79, v80, v81, v102);
        ot::Mle::MleRouter::SendLinkRequest(this, v118);
        IgnoreError();
      }
    }
    else if (ot::Neighbor::IsStateLinkRequest(v118) && v117 >= 0x7D0)
    {
      char v101 = ot::Neighbor::GetRloc16(v118);
      ot::Neighbor::GetExtAddress(v118);
      ot::Mac::ExtAddress::ToString(v82, (ot::StringWriter *)v140);
      ot::String<(unsigned short)17>::AsCString((uint64_t)v140);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Link Request timeout expired, RLOC16: 0x%04x extAddr:%s", v83, v84, v85, v86, v87, v88, v101);
      ot::Mle::MleRouter::RemoveNeighbor(this, v118);
      goto LABEL_102;
    }
    if (ot::Mle::Mle::IsLeader(this))
    {
      ot::RouterTable::FindNextHopOf((ot::Mle::MleRouter *)((char *)this + 30912), v118);
      if (!v89
        && ot::RouterTable::GetLinkCost((ot::Mle::MleRouter *)((char *)this + 30912), v118) >= 0x10u)
      {
        unsigned int v100 = v117;
        if (v100 >= ot::Time::SecToMsec((ot::Time *)0x5A))
        {
          char v99 = ot::Neighbor::GetRloc16(v118);
          ot::Neighbor::GetExtAddress(v118);
          ot::Mac::ExtAddress::ToString(v90, (ot::StringWriter *)v139);
          ot::String<(unsigned short)17>::AsCString((uint64_t)v139);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Router ID timeout expired (no route), RLOC16: 0x%04x extAddr:%s", v91, v92, v93, v94, v95, v96, v99);
          unsigned __int8 RouterId = ot::Neighbor::GetRouterId(v118);
          ot::RouterTable::Release((ot::Mle::MleRouter *)((char *)this + 30912), RouterId);
          IgnoreError();
        }
      }
    }
LABEL_102:
    int v120 = (ot::Neighbor *)((char *)v120 + 144);
  }
  ot::RouterTable::HandleTimeTick((ot::Mle::MleRouter *)((char *)this + 30912));
  ot::Mle::MleRouter::SynchronizeChildNetworkData(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslLastHeard(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned int *)this + 3);
}

{
  return ot::CslTxScheduler::ChildInfo::GetCslLastHeard(this);
}

uint64_t ot::CslTxScheduler::ChildInfo::GetCslTimeout(ot::CslTxScheduler::ChildInfo *this)
{
  return *((unsigned int *)this + 1);
}

{
  return ot::CslTxScheduler::ChildInfo::GetCslTimeout(this);
}

uint64_t ot::Mle::Mle::IncrementChildLossCounter(uint64_t this)
{
  return this;
}

{
  return ot::Mle::Mle::IncrementChildLossCounter(this);
}

BOOL ot::Neighbor::IsStateRestored(ot::Neighbor *this)
{
  return (*((unsigned char *)this + 30) & 0xF) == 1;
}

{
  return ot::Neighbor::IsStateRestored(this);
}

uint64_t ot::Mle::MleRouter::SendChildUpdateRequest(ot::Mle::MleRouter *this, ot::Child *a2)
{
  uint64_t v29 = this;
  uint64_t v28 = a2;
  unsigned int appended = 0;
  uint64_t v25 = 0;
  if (!ot::Neighbor::IsRxOnWhenIdle(a2))
  {
    uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    unsigned __int16 ChildIndex = ot::ChildTable::GetChildIndex(v2, (uint64_t)v28);
    char v3 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
    SendQueue = (ot::PriorityQueue *)ot::MeshForwarder::GetSendQueue(v3);
    uint64_t v22 = (ot::Message *)ot::PriorityQueue::begin(SendQueue);
    uint64_t v21 = ot::PriorityQueue::end(SendQueue);
    while (ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator!=(&v22, &v21))
    {
      uint64_t v20 = (ot::Message *)ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator*((uint64_t)&v22);
      if (ot::Message::GetChildMask(v20, ChildIndex) && ot::Message::GetSubType(v20) == 8)
      {
        if (ot::Neighbor::IsStateRestoring(v28)) {
          goto LABEL_25;
        }
        uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
        ot::MeshForwarder::RemoveMessages(v4, v28, 8u);
        break;
      }
      ot::ItemPtrIterator<ot::Message const,ot::Message::ConstIterator>::operator++(&v22);
    }
  }
  uint64_t v25 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xDu);
  if (v25)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v25);
    if (!appended)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v25);
      if (!appended)
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "%s AppendNetworkDataTlv", v5, v6, v7, v8, v9, v10, (char)"SendChildUpdateRequest");
        char v18 = v25;
        NetworkDataint Type = ot::Neighbor::GetNetworkDataType(v28);
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v18, NetworkDataType);
        if (!appended)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v25);
          if (!appended)
          {
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v25);
            if (!appended)
            {
              if (ot::Neighbor::IsStateValid(v28)) {
                goto LABEL_21;
              }
              unsigned int appended = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv<(unsigned char)2>(v25, ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child &)::kTlvs);
              if (!appended)
              {
                if (!ot::Neighbor::IsStateRestored(v28)) {
                  ot::Child::GenerateChallenge(v28);
                }
                char v17 = v25;
                Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v28);
                Challengechar Size = ot::Child::GetChallengeSize(v28);
                unsigned int appended = ot::Mle::Mle::TxMessage::AppendChallengeTlv(v17, Challenge, ChallengeSize);
                if (!appended)
                {
LABEL_21:
                  ot::Neighbor::GetExtAddress(v28);
                  ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v26, v13);
                  unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v25, &v26);
                  if (!appended)
                  {
                    if (ot::Neighbor::IsRxOnWhenIdle(v28)) {
                      ot::Neighbor::SetState(v28, 6);
                    }
                    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v28);
                    ot::Mle::Mle::Log(0, 0x14u, (ot::Ip6::Address *)&v26, Rloc16);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
LABEL_25:
  if (appended && v25) {
    ot::Message::Free(v25);
  }
  return appended;
}

uint64_t ot::Mle::Mle::IncrementRouterLossCounter(uint64_t this)
{
  return this;
}

{
  return ot::Mle::Mle::IncrementRouterLossCounter(this);
}

void ot::RouterTable::FindNextHopOf(ot::RouterTable *this, const ot::Router *a2)
{
  ot::AsConst<ot::RouterTable>();
  ot::RouterTable::FindNextHopOf(v2, a2);
  ot::AsNonConst<ot::Router>();
}

{
  ot::RouterTable::FindNextHopOf(this, a2);
}

uint64_t ot::Mle::MleRouter::SynchronizeChildNetworkData(ot::Mle::MleRouter *this)
{
  uint64_t v14 = this;
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if (result)
  {
    uint64_t v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v12 = ot::ChildTable::Iterate(v2, 0);
    uint64_t v13 = (ot::ChildTable::IteratorBuilder *)&v12;
    v11[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v12);
    v11[1] = v3;
    v10[0] = ot::ChildTable::IteratorBuilder::end(v13);
    v10[1] = v4;
    while (1)
    {
      uint64_t result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v11, v10);
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v9 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v11);
      if (!ot::Neighbor::IsRxOnWhenIdle(v9))
      {
        NetworkDatachar Version = ot::Child::GetNetworkDataVersion(v9);
        uint64_t v6 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        NetworkDataint Type = ot::Neighbor::GetNetworkDataType(v9);
        if (NetworkDataVersion != ot::NetworkData::LeaderBase::GetVersion(v6, NetworkDataType))
        {
          uint64_t result = ot::Mle::MleRouter::SendChildUpdateRequest(this, v9);
          if (result) {
            break;
          }
        }
      }
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v11);
    }
  }
  return result;
}

void ot::Mle::MleRouter::GetConnectedRouterNodesHistogram(ot::Mle::MleRouter *this, unsigned __int8 *a2)
{
  *a2 = ot::Utils::FifoHistogram<unsigned char,(short)24>::GetCount();
  ot::Utils::FifoHistogram<unsigned char,(short)24>::GetData();
}

uint64_t ot::Utils::FifoHistogram<unsigned char,(short)24>::GetCount()
{
  return 24;
}

{
  return ot::Utils::FifoHistogram<unsigned char,(short)24>::GetCount();
}

void ot::Mle::MleRouter::GetConnectedChildNodesHistogram(ot::Mle::MleRouter *this, unsigned __int8 *a2)
{
  *a2 = ot::Utils::FifoHistogram<unsigned char,(short)24>::GetCount();
  ot::Utils::FifoHistogram<unsigned char,(short)24>::GetData();
}

void *ot::Mle::MleRouter::ClearConnectedRouterNodesHistogram(ot::Mle::MleRouter *this)
{
  return ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear((ot::Mle::MleRouter *)((char *)this + 35641));
}

void *ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  return ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear(result);
}

void *ot::Mle::MleRouter::ClearConnectedChildNodesHistogram(ot::Mle::MleRouter *this)
{
  return ot::Utils::FifoHistogram<unsigned char,(short)24>::Clear((ot::Mle::MleRouter *)((char *)this + 35665));
}

uint64_t ot::Mle::MleRouter::HandleConnectedNeighbourTimer(ot::Mle::MleRouter *this)
{
  if (ot::Mle::Mle::IsFullThreadDevice(this))
  {
    char NeighborCount = ot::RouterTable::GetNeighborCount((ot::Mle::MleRouter *)((char *)this + 30912));
    ot::Utils::FifoHistogram<unsigned char,(short)24>::Update((uint64_t)this + 35641, NeighborCount);
    char NumChildren = ot::ChildTable::GetNumChildren((__int16 *)this + 604, 0);
    ot::Utils::FifoHistogram<unsigned char,(short)24>::Update((uint64_t)this + 35665, NumChildren);
  }
  unsigned int v3 = ot::Time::SecToMsec((ot::Time *)0xE10);
  return ot::TimerMilli::Start((ot::Mle::MleRouter *)((char *)this + 35736), v3);
}

__n128 ot::Utils::FifoHistogram<unsigned char,(short)24>::Update(uint64_t a1, char a2)
{
  __n128 result = *(__n128 *)a1;
  int v3 = *(_DWORD *)(a1 + 16);
  __int16 v4 = *(_WORD *)(a1 + 20);
  char v5 = *(unsigned char *)(a1 + 22);
  *(_OWORD *)(a1 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = *(_OWORD *)a1;
  *(_DWORD *)(a1 + 1ot::Tlv::SetType(this, 7) = v3;
  *(_WORD *)(a1 + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v4;
  *(unsigned char *)(a1 + 2ot::Tlv::SetType(this, 3) = v5;
  *(unsigned char *)a1 = a2;
  return result;
}

BOOL ot::Neighbor::IsThreadVersionCslCapable(ot::Neighbor *this)
{
  LOBYTE(vot::Tlv::SetType(this, 3) = 0;
  if (ot::Neighbor::IsThreadVersion1p2OrHigher(this)) {
    return !ot::Neighbor::IsRxOnWhenIdle(this);
  }
  return v3;
}

{
  return ot::Neighbor::IsThreadVersionCslCapable(this);
}

uint64_t ot::Child::GetChallenge(ot::Child *this)
{
  return (uint64_t)this + 449;
}

{
  return ot::Child::GetChallenge(this);
}

uint64_t ot::Child::GetChallengeSize(ot::Child *this)
{
  return 8;
}

{
  return ot::Child::GetChallengeSize(this);
}

uint64_t ot::Mle::MleRouter::GetMaxChildIpAddresses(ot::Mle::MleRouter *this)
{
  return 16;
}

uint64_t ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::MleRouter *this, ot::Tlv **a2, ot::Child *a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v84 = this;
  uint64_t v83 = a2;
  uint64_t v82 = a3;
  memset(v81, 0, sizeof(v81));
  unsigned __int16 v80 = 0;
  unsigned __int16 v79 = 0;
  char v78 = 0;
  char v77 = 0;
  DomainUnicastAddress = 0;
  char v74 = 0;
  unsigned __int16 v73 = 0;
  *(_DWORD *)&v81[2] = ot::Tlv::FindTlvValueOffset(*a2, (const ot::Message *)0x13, v81, &v80, a5);
  if (*(_DWORD *)&v81[2]) {
    return *(unsigned int *)&v81[2];
  }
  unsigned __int16 v79 = *(_WORD *)v81 + v80;
  DomainUnicastAddress = ot::Child::GetDomainUnicastAddress(v82);
  if (DomainUnicastAddress) {
    long long v76 = *(_OWORD *)DomainUnicastAddress;
  }
  if (ot::Child::HasAnyMlrRegisteredAddress(v82))
  {
    if (!ot::Neighbor::IsStateValid(v82)) {
      __assert_rtn("ProcessAddressRegistrationTlv", "mle_router.cpp", 2451, "aChild.IsStateValid()");
    }
    v71[0] = ot::Child::IterateIp6Addresses((uint64_t)v82, 3);
    v71[1] = v5;
    uint64_t v72 = (ot::Child::AddressIteratorBuilder *)v71;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v71, (uint64_t)v70);
    ot::Child::AddressIteratorBuilder::end(v72, (uint64_t)v69);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v70, (uint64_t)v69))
    {
      *(void *)&v68[1] = ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v70);
      if (ot::Child::GetAddressMlrState(v82, *(const ot::Ip6::Address **)&v68[1]) == 2)
      {
        uint64_t v6 = v73++;
        v87[v6] = **(_OWORD **)&v68[1];
      }
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v70);
    }
  }
  ot::Child::ClearIp6Addresses(v82);
  while (*(unsigned __int16 *)v81 < (int)v79)
  {
    v68[0] = 0;
    *(_DWORD *)&v81[2] = ot::Message::Read<unsigned char>(*v83, *(unsigned __int16 *)v81, v68);
    if (*(_DWORD *)&v81[2]) {
      return *(unsigned int *)&v81[2];
    }
    *(_DWORD *)uint64_t v81 = (unsigned __int16)(*(_WORD *)v81 + 1);
    ++v78;
    ot::Clearable<ot::Ip6::Address>::Clear(v67);
    if (ot::Mle::AddressRegistrationTlv::IsEntryCompressed((ot::Mle::AddressRegistrationTlv *)v68[0]))
    {
      char ContextId = 0;
      char ContextId = ot::Mle::AddressRegistrationTlv::GetContextId((ot::Mle::AddressRegistrationTlv *)v68[0]);
      if ((unint64_t)*(unsigned __int16 *)v81 + 8 > v79)
      {
        *(_DWORD *)&v81[2] = 6;
        return *(unsigned int *)&v81[2];
      }
      uint64_t v58 = *v83;
      unsigned __int16 v57 = *(_WORD *)v81;
      Iid = (char *)ot::Ip6::Address::GetIid((ot::Ip6::Address *)v67);
      ot::Message::Read<ot::Ip6::InterfaceIdentifier>(v58, v57, Iid);
      IgnoreError();
      *(_WORD *)v81 += 8;
      uint64_t v8 = (ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      if (!ot::NetworkData::LeaderBase::GetContext(v8, ContextId, (ot::Ip6::Prefix *)v65))
      {
        ot::Ip6::Address::SetPrefix((ot::Ip6::Address *)v67, (const ot::Ip6::Prefix *)v65);
        goto LABEL_24;
      }
      char v56 = ContextId;
      ot::Neighbor::GetRloc16(v82);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Failed to get context %u for compressed address from child 0x%04x", v9, v10, v11, v12, v13, v14, v56);
    }
    else
    {
      if ((unint64_t)*(unsigned __int16 *)v81 + 16 > v79)
      {
        *(_DWORD *)&v81[2] = 6;
        return *(unsigned int *)&v81[2];
      }
      ot::Message::Read<ot::Ip6::Address>(*v83, *(unsigned __int16 *)v81, (char *)v67);
      IgnoreError();
      *(_WORD *)v81 += 16;
LABEL_24:
      *(_DWORD *)&v81[2] = ot::Child::AddIp6Address(v82, (const ot::Ip6::Address *)v67);
      if (*(_DWORD *)&v81[2])
      {
        uint64_t v24 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
        if (ot::BackboneRouter::Leader::IsDomainUnicast(v24, (const ot::Ip6::Address *)v67)) {
          char v74 = 0;
        }
        char v52 = ot::ErrorToString(*(int *)&v81[2]);
        ot::Ip6::Address::ToString((ot::Ip6::Address *)v67, (ot::StringWriter *)v85);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v85);
        ot::Neighbor::GetRloc16(v82);
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Error %s adding IPv6 address %s to child 0x%04x", v25, v26, v27, v28, v29, v30, v52);
      }
      else
      {
        ++v77;
        uint64_t v15 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
        if (ot::BackboneRouter::Leader::IsDomainUnicast(v15, (const ot::Ip6::Address *)v67))
        {
          char v74 = 1;
          if (DomainUnicastAddress)
          {
            unsigned int v55 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
            uint64_t v54 = v82;
            if (ot::Unequatable<ot::Ip6::Address>::operator!=(&v76, v67)) {
              char v16 = 1;
            }
            else {
              char v16 = 3;
            }
            ot::DuaManager::UpdateChildDomainUnicastAddress(v55, (uint64_t)v54, v16);
          }
          else
          {
            char v17 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
            ot::DuaManager::UpdateChildDomainUnicastAddress(v17, (uint64_t)v82, 0);
          }
        }
        char Rloc16 = ot::Neighbor::GetRloc16(v82);
        ot::Ip6::Address::ToString((ot::Ip6::Address *)v67, (ot::StringWriter *)v86);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v86);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Child 0x%04x IPv6 address[%u]=%s", v18, v19, v20, v21, v22, v23, Rloc16);
      }
      if (!ot::Ip6::Address::IsMulticast((ot::Ip6::Address *)v67))
      {
        uint64_t v31 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        char v63 = ot::ChildTable::Iterate(v31, 1);
        uint64_t v64 = (ot::ChildTable::IteratorBuilder *)&v63;
        v62[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v63);
        v62[1] = v32;
        v61[0] = ot::ChildTable::IteratorBuilder::end(v64);
        v61[1] = v33;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v62, v61))
        {
          uint64_t v60 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v62);
          if (v60 != v82)
          {
            ot::Child::RemoveIp6Address(v60, (const ot::Ip6::Address *)v67);
            IgnoreError();
          }
          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v62);
        }
        uint64_t v34 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
        ot::AddressResolver::RemoveEntryForAddress(v34, (const ot::Ip6::Address *)v67);
      }
    }
  }
  if (DomainUnicastAddress && (v74 & 1) == 0)
  {
    uint64_t v35 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
    ot::DuaManager::UpdateChildDomainUnicastAddress(v35, (uint64_t)v82, 2);
  }
  uint64_t v36 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
  ot::MlrManager::UpdateProxiedSubscriptions(v36, v82, (const ot::Ip6::Address *)v87, v73);
  if (v78)
  {
    char v44 = ot::Neighbor::GetRloc16(v82);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Child 0x%04x has %u registered IPv6 address%s, %u address%s stored", v45, v46, v47, v48, v49, v50, v44);
  }
  else
  {
    char v37 = ot::Neighbor::GetRloc16(v82);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Child 0x%04x has no registered IPv6 address", v38, v39, v40, v41, v42, v43, v37);
  }
  *(_DWORD *)&v81[2] = 0;
  return *(unsigned int *)&v81[2];
}

uint64_t ot::Child::HasAnyMlrRegisteredAddress(ot::Child *this)
{
  return ot::BitVector<(unsigned short)15>::HasAny((unsigned char *)this + 446) & 1;
}

{
  return ot::Child::HasAnyMlrRegisteredAddress(this);
}

BOOL ot::Mle::AddressRegistrationTlv::IsEntryCompressed(ot::Mle::AddressRegistrationTlv *this)
{
  return (char)this < 0;
}

{
  return ot::Mle::AddressRegistrationTlv::IsEntryCompressed(this);
}

uint64_t ot::Mle::AddressRegistrationTlv::GetContextId(ot::Mle::AddressRegistrationTlv *this)
{
  return this & 0xF;
}

{
  return ot::Mle::AddressRegistrationTlv::GetContextId(this);
}

uint64_t ot::Message::Read<ot::Ip6::InterfaceIdentifier>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 8u);
}

{
  return ot::Message::Read<ot::Ip6::InterfaceIdentifier>(a1, a2, a3);
}

void ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::MleRouter *this, ot::Tlv **a2)
{
  uint64_t v96 = this;
  uint64_t v95 = a2;
  int ResponseTlv = 0;
  __int16 v93 = 0;
  unsigned int v92 = 0;
  unsigned int v91 = 0;
  char v90 = 0;
  unsigned int v88 = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v98);
  BOOL v86 = 0;
  BOOL v85 = 0;
  char v84 = 0;
  uint64_t v83 = 0;
  uint64_t v82 = 0;
  unsigned __int8 Length = 0;
  unsigned __int16 v80 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v95[1]);
  ot::Mle::Mle::Log(1, 2u, PeerAddr);
  if (ot::Mle::Mle::IsCslPeripheralAttaching(this))
  {
    char v3 = ot::ToUlong(*((unsigned int *)v95 + 4));
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Received Parent Request FC: %lu", v4, v5, v6, v7, v8, v9, v3);
  }
  if (ot::Mle::MleRouter::IsRouterEligible(this))
  {
    if (ot::Mle::Mle::IsAttached(this))
    {
      uint64_t v10 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v95[1]);
      Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v10);
      ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v100);
      ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1208), (uint64_t)v100, 5);
      uint64_t v83 = v14;
      if (v14)
      {
        int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)18,unsigned short>>(*v95, (unsigned __int16 *)&v93, v12, v13);
        if (!ResponseTlv)
        {
          if ((unsigned __int16)v93 >= 2u)
          {
            int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v95, (ot::Mle::Mle::Challenge *)v99, v15, v16, v17);
            if (!ResponseTlv)
            {
              Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v83);
              Challengechar Size = ot::Child::GetChallengeSize(v83);
              if (ot::Mle::Mle::Challenge::Matches((ot::Mle::Mle::Challenge *)v99, Challenge, ChallengeSize))
              {
                uint64_t v19 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v19, v83, 6u);
                uint64_t v20 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v20, v83, 0xAu);
                uint64_t v21 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v21, v83, 8u);
                uint64_t v22 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveMessages(v22, v83, 9u);
                int ResponseTlv = ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(*v95, &v92, &v91, v23);
                if (!ResponseTlv)
                {
                  uint64_t v24 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v95[1]);
                  ot::Ip6::Address::ToString(v24, (ot::StringWriter *)v97);
                  ot::String<(unsigned short)40>::AsCString((uint64_t)v97);
                  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d", v25, v26, v27, v28, v29, v30, (char)"HandleChildIdRequest");
                  int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(*v95, &v90, v31, v32);
                  if (!ResponseTlv)
                  {
                    ot::Mle::DeviceMode::Set(&v89, v90);
                    int ResponseTlv = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v95, &v88, v33, v34);
                    if (!ResponseTlv)
                    {
                      char v84 = 0;
                      int v76 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(*v95, &v80, v35, v36);
                      if (v76)
                      {
                        if (v76 != 23)
                        {
                          int ResponseTlv = 6;
                          goto LABEL_69;
                        }
                        if ((unsigned __int16)v93 > 4u) {
                          unsigned __int16 v40 = 0;
                        }
                        else {
                          unsigned __int16 v40 = 129;
                        }
                        unsigned __int16 v80 = v40;
                      }
                      else
                      {
                        char v84 = 1;
                      }
                      int ResponseTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*v95, (ot::Mle::Mle::TlvList *)v98, v37, v38, v39);
                      if (!ResponseTlv)
                      {
                        BOOL v86 = 1;
                        int v75 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(*v95, (uint64_t)v87, v41, v42, v43);
                        if (v75)
                        {
                          if (v75 != 23)
                          {
                            int ResponseTlv = 6;
                            goto LABEL_69;
                          }
                        }
                        else
                        {
                          active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
                          int Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
                          BOOL v86 = ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v87, Timestamp, v49) != 0;
                        }
                        BOOL v85 = 1;
                        int v74 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(*v95, (uint64_t)v87, v44, v45, v46);
                        if (v74)
                        {
                          if (v74 != 23)
                          {
                            int ResponseTlv = 6;
                            goto LABEL_69;
                          }
                        }
                        else
                        {
                          uint64_t v50 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
                          uint64_t v51 = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v50);
                          BOOL v85 = ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v87, v51, v52) != 0;
                        }
                        unsigned __int8 Length = ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetLength((uint64_t)v98);
                        if (v86) {
                          ++Length;
                        }
                        if (v85) {
                          ++Length;
                        }
                        if (v84) {
                          ++Length;
                        }
                        if (Length <= 6u)
                        {
                          if (ot::Mle::DeviceMode::IsFullThreadDevice((ot::Mle::DeviceMode *)&v89)
                            || (int ResponseTlv = ot::Mle::MleRouter::ProcessAddressRegistrationTlv(this, v95, v83, v53, v54)) == 0)
                          {
                            ot::RouterTable::FindRouter((ot::Mle::MleRouter *)((char *)this + 30912), (const ot::Mac::ExtAddress *)v100);
                            uint64_t v82 = v55;
                            if (v55) {
                              ot::Mle::MleRouter::RemoveNeighbor(this, v82);
                            }
                            if (ot::Neighbor::IsStateValid(v83)) {
                              ot::Mle::MleRouter::RemoveNeighbor(this, v83);
                            }
                            else {
                              char v56 = ot::Neighbor::SetState(v83, 4);
                            }
                            uint64_t v71 = v83;
                            int Now = ot::TimerMilli::GetNow(v56);
                            ot::Neighbor::SetLastHeard((uint64_t)v71, Now);
                            LinkFrameuint64_t Counters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(v83);
                            ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v92);
                            ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v83, v92);
                            ot::Neighbor::SetMleFrameCounter((uint64_t)v83, v91);
                            ot::Neighbor::SetKeySequence((uint64_t)v83, *((_DWORD *)v95 + 5));
                            ot::Child::SetDeviceMode(v83, v89);
                            ot::Neighbor::SetVersion((uint64_t)v83, v93);
                            LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v83);
                            uint64_t ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(v95[1]);
                            char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
                            ot::LinkQualityInfo::AddRss(LinkInfo, Rss);
                            ot::Child::SetTimeout((uint64_t)v83, v88);
                            ot::Child::SetSupervisionInterval((uint64_t)v83, v80);
                            unsigned __int16 v73 = v83;
                            NetworkDataint Type = ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::DeviceMode *)&v89);
                            Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)this + 64, NetworkDataType);
                            ot::Child::SetNetworkDataVersion((uint64_t)v73, DataVersion);
                            ot::Child::ClearRequestTlvs((uint64_t)v83);
                            for (unsigned __int8 Length = 0; ; ++Length)
                            {
                              int v70 = Length;
                              if (v70 >= ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetLength((uint64_t)v98)) {
                                break;
                              }
                              uint64_t v69 = v83;
                              unsigned __int8 v68 = Length;
                              uint64_t v62 = (char *)ot::Array<unsigned char,(unsigned short)32,unsigned char>::operator[]((uint64_t)v98, Length);
                              ot::Child::SetRequestTlv((uint64_t)v69, v68, *v62);
                            }
                            if (v86)
                            {
                              unsigned __int8 v63 = Length++;
                              ot::Child::SetRequestTlv((uint64_t)v83, v63, 24);
                            }
                            if (v85)
                            {
                              unsigned __int8 v64 = Length++;
                              ot::Child::SetRequestTlv((uint64_t)v83, v64, 25);
                            }
                            if (v84)
                            {
                              unsigned __int8 v65 = Length++;
                              ot::Child::SetRequestTlv((uint64_t)v83, v65, 27);
                            }
                            *((unsigned char *)v95 + 3ot::Tlv::SetType(this, 2) = 1;
                            ot::Mle::Mle::ProcessKeySequence(this, (ot::Mle::Mle::RxInfo *)v95);
                            unsigned int v67 = *((unsigned __int8 *)this + 73);
                            if (v67 <= 1) {
                              __assert_rtn("HandleChildIdRequest", "mle_router.cpp", 2892, "false");
                            }
                            if (v67 == 2)
                            {
                              ot::Neighbor::SetState(v83, 4);
                              ot::Mle::MleRouter::BecomeRouter((uint64_t)this, 3u);
                              IgnoreError();
                            }
                            else if (v67 == 4 || v67 == 3)
                            {
                              int ResponseTlv = ot::Mle::MleRouter::SendChildIdResponse(this, v83);
                            }
                          }
                        }
                        else
                        {
                          int ResponseTlv = 6;
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                int ResponseTlv = 8;
              }
            }
          }
          else
          {
            int ResponseTlv = 6;
          }
        }
      }
      else
      {
        int ResponseTlv = 24;
      }
    }
    else
    {
      int ResponseTlv = 13;
    }
  }
  else
  {
    int ResponseTlv = 13;
  }
LABEL_69:
  ot::Mle::Mle::LogProcessError(2u, ResponseTlv);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned short>(a1, 0x1Bu, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(a1, a2, a3, a4);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::GetLength(a1);
}

uint64_t ot::Child::SetSupervisionInterval(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 458) = a2;
  return this;
}

{
  return ot::Child::SetSupervisionInterval(this, a2);
}

uint64_t ot::Child::SetNetworkDataVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 448) = a2;
  return this;
}

{
  return ot::Child::SetNetworkDataVersion(this, a2);
}

uint64_t ot::Child::ClearRequestTlvs(uint64_t this)
{
  *(_DWORD *)(this + 449) = -1;
  *(_WORD *)(this + 45ot::Tlv::SetType(this, 3) = -1;
  return this;
}

{
  return ot::Child::ClearRequestTlvs(this);
}

uint64_t ot::Child::SetRequestTlv(uint64_t this, unsigned __int8 a2, char a3)
{
  *(unsigned char *)(this + 449 + aot::Tlv::SetType(this, 2) = a3;
  return this;
}

{
  return ot::Child::SetRequestTlv(this, a2, a3);
}

uint64_t ot::Array<unsigned char,(unsigned short)32,unsigned char>::operator[](uint64_t a1, unsigned __int8 a2)
{
  return a1 + a2;
}

{
  return ot::Array<unsigned char,(unsigned short)32,unsigned char>::operator[](a1, a2);
}

uint64_t ot::Mle::MleRouter::SendChildIdResponse(ot::Mle::MleRouter *this, ot::Child *a2)
{
  uint64_t v30 = this;
  uint64_t v29 = a2;
  unsigned int appended = 0;
  uint64_t v26 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xCu);
  if (v26)
  {
    unsigned int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v26);
    if (!appended)
    {
      unsigned int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v26);
      if (!appended)
      {
        unsigned int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v26);
        if (!appended)
        {
          unsigned int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v26);
          if (!appended)
          {
            if (!(unsigned __int16)ot::Neighbor::GetRloc16(v29)
              || (unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v29),
                  unsigned __int16 v2 = ot::Mle::Mle::GetRloc16(this),
                  !ot::Mle::RouterIdMatch((ot::Mle *)Rloc16, v2)))
            {
              do
              {
                if ((unsigned __int16)++*((_WORD *)this + 17817) > 0x1FFu) {
                  *((_WORD *)this + 1781ot::Tlv::SetType(this, 7) = 1;
                }
                char v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
                __int16 v25 = ot::Mac::Mac::GetShortAddress(v3) | *((_WORD *)this + 17817);
                ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1208), v25, 5);
              }
              while (v4);
              ot::Neighbor::SetRloc16((uint64_t)v29, v25);
            }
            unsigned __int16 v5 = ot::Neighbor::GetRloc16(v29);
            unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddress16Tlv(v26, v5);
            if (!appended)
            {
              for (unsigned __int8 i = 0; i < 6u; ++i)
              {
                unsigned __int8 RequestTlv = ot::Child::GetRequestTlv(v29, i);
                if (RequestTlv <= 9u)
                {
                  uint64_t v14 = RequestTlv - 9;
                  char v13 = 0;
                }
                else
                {
                  uint64_t v14 = RequestTlv - 9;
                  char v13 = 1;
                }
                if ((v13 & 1) == 0)
                {
                  switch(v14)
                  {
                    case 0:
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendRouteTlv(v26, 0);
                      if (!appended) {
                        continue;
                      }
                      goto LABEL_39;
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 17:
                      continue;
                    case 3:
                      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "%s AppendNetworkDataTlv", v7, v8, v9, v10, v11, v12, (char)"SendChildIdResponse");
                      NetworkDataint Type = ot::Neighbor::GetNetworkDataType(v29);
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v26, NetworkDataType);
                      if (!appended) {
                        continue;
                      }
                      goto LABEL_39;
                    case 15:
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv(v26);
                      if (!appended) {
                        continue;
                      }
                      goto LABEL_39;
                    case 16:
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv(v26);
                      if (!appended) {
                        continue;
                      }
                      goto LABEL_39;
                    case 18:
                      unsigned __int16 SupervisionInterval = ot::Child::GetSupervisionInterval(v29);
                      unsigned int appended = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v26, SupervisionInterval);
                      if (!appended) {
                        continue;
                      }
                      goto LABEL_39;
                    default:
                      JUMPOUT(0);
                  }
                }
              }
              if (ot::Neighbor::IsFullThreadDevice(v29)
                || (unsigned int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v26, v29)) == 0)
              {
                ot::Mle::MleRouter::SetChildStateToValid(this, v29);
                if (!ot::Neighbor::IsRxOnWhenIdle(v29))
                {
                  char v17 = (ot::IndirectSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
                  ot::IndirectSender::SetChildUseShortAddress(v17, v29, 0);
                }
                if (ot::Mle::Mle::IsCslPeripheralPresent(this))
                {
                  uint64_t v18 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
                  ot::Mac::Mac::UpdateCsl(v18, 0);
                }
                ot::Neighbor::GetExtAddress(v29);
                ot::Ip6::Address::SetToLinkLocalAddress((ot::Ip6::Address *)&v27, v19);
                unsigned int appended = ot::Mle::Mle::TxMessage::SendTo(v26, &v27);
                if (!appended)
                {
                  unsigned __int16 v20 = ot::Neighbor::GetRloc16(v29);
                  ot::Mle::Mle::Log(0, 4u, (ot::Ip6::Address *)&v27, v20);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int appended = 3;
  }
LABEL_39:
  if (appended && v26) {
    ot::Message::Free(v26);
  }
  return appended;
}

void ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::MleRouter *this, ot::Tlv **a2)
{
  uint64_t v69 = this;
  unsigned __int8 v68 = a2;
  int v67 = 0;
  char v66 = 0;
  unsigned int v63 = 0;
  unsigned __int16 v62 = 0;
  uint64_t v61 = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v72);
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v71);
  char v59 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
  ot::Mle::Mle::Log(1, 0x14u, PeerAddr);
  int v67 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)1,unsigned char>>(*v68, &v66, v3, v4);
  if (!v67)
  {
    ot::Mle::DeviceMode::Set(&v65, v66);
    int ChallengeTlv = ot::Mle::Mle::RxMessage::ReadChallengeTlv(*v68, (ot::Mle::Mle::Challenge *)v73, v5, v6, v7);
    if (ChallengeTlv)
    {
      if (ChallengeTlv != 23)
      {
        int v67 = 6;
        goto LABEL_56;
      }
      char v74 = 0;
    }
    else
    {
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 4);
    }
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 0);
    uint64_t v8 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v68[1]);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v8);
    ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, (ot::Mac::ExtAddress *)v75);
    ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1208), (uint64_t)v75, 5);
    uint64_t v61 = v10;
    if (v10)
    {
      if (ot::Neighbor::IsStateValid(v61))
      {
        char DeviceMode = ot::Neighbor::GetDeviceMode(v61);
        char v60 = DeviceMode;
        v57[5] = v65;
        ot::Child::SetDeviceMode(v61, v65);
        ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 1);
        ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 11);
        if (v74)
        {
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 8);
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 5);
        }
        int v49 = ot::Mle::MleRouter::ProcessAddressRegistrationTlv(this, v68, v61, v11, v12);
        if (v49)
        {
          if (v49 != 23)
          {
            int v67 = 6;
            goto LABEL_56;
          }
        }
        else
        {
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 19);
        }
        int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v68, (ot::Mle::LeaderData *)v64, v13, v14, v15);
        if (LeaderDataTlv)
        {
          if (LeaderDataTlv != 23)
          {
            int v67 = 6;
            goto LABEL_56;
          }
        }
        else
        {
          NetworkDataint Type = ot::Neighbor::GetNetworkDataType(v61);
          Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v64, NetworkDataType);
          ot::Child::SetNetworkDataVersion((uint64_t)v61, DataVersion);
        }
        int v47 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v68, &v63, v16, v17);
        if (v47)
        {
          if (v47 != 23)
          {
            int v67 = 6;
            goto LABEL_56;
          }
        }
        else
        {
          int Timeout = ot::Child::GetTimeout(v61);
          if (Timeout != v63)
          {
            ot::Child::SetTimeout((uint64_t)v61, v63);
            char v59 = 1;
          }
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 2);
        }
        int v46 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(*v68, &v62, v20, v21);
        if (v46)
        {
          if (v46 != 23)
          {
            int v67 = 6;
            goto LABEL_56;
          }
          if ((unsigned __int16)ot::Neighbor::GetVersion(v61) > 4u) {
            unsigned __int16 v23 = 0;
          }
          else {
            unsigned __int16 v23 = 129;
          }
          unsigned __int16 v62 = v23;
        }
        else
        {
          ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 27);
        }
        ot::Child::SetSupervisionInterval((uint64_t)v61, v62);
        int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*v68, (ot::Mle::Mle::TlvList *)v72, v24, v25, v26);
        if (TlvRequestTlv)
        {
          if (TlvRequestTlv != 23)
          {
            int v67 = 6;
            goto LABEL_56;
          }
        }
        else
        {
          ot::Mle::Mle::TlvList::AddElementsFrom((ot::Mle::Mle::TlvList *)v71, (const ot::Mle::Mle::TlvList *)v72);
        }
        uint64_t IsCslSynchronized = ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Child *)((char *)v61 + 168));
        if (IsCslSynchronized)
        {
          unsigned int v56 = 0;
          int v44 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(*v68, &v56, v28, v29);
          if (v44)
          {
            if (v44 != 23)
            {
              int v67 = 0;
              goto LABEL_56;
            }
          }
          else
          {
            ot::CslTxScheduler::ChildInfo::SetCslTimeout((uint64_t)v61 + 168, v56);
            ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 86);
          }
          uint64_t IsCslSynchronized = ot::Tlv::FindTlv<ot::Mle::CslChannelTlv>(*v68, v57, v30, v31, v32);
          if (!IsCslSynchronized)
          {
            if (!ot::Mle::CslChannelTlv::IsValid((ot::Mle::CslChannelTlv *)v57))
            {
              int v67 = 6;
              goto LABEL_56;
            }
            uint64_t v43 = (ot::Child *)((char *)v61 + 168);
            char Channel = ot::Mle::CslChannelTlv::GetChannel((ot::Mle::CslChannelTlv *)v57);
            uint64_t IsCslSynchronized = ot::CslTxScheduler::ChildInfo::SetCslChannel((uint64_t)v43, Channel);
          }
        }
        uint64_t v42 = v61;
        int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsCslSynchronized);
        ot::Neighbor::SetLastHeard((uint64_t)v42, Now);
        char v54 = ot::Neighbor::GetDeviceMode(v61);
        if (ot::Unequatable<ot::Mle::DeviceMode>::operator!=(&v60, &v54))
        {
          char Rloc16 = ot::Neighbor::GetRloc16(v61);
          ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v60);
          char v53 = ot::Neighbor::GetDeviceMode(v61);
          ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v53);
          char v52 = ot::Neighbor::GetDeviceMode(v61);
          ot::Mle::DeviceMode::ToString((ot::Mle::DeviceMode *)&v52, (ot::StringWriter *)v70);
          ot::String<(unsigned short)45>::AsCString((uint64_t)v70);
          ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)&ot::Mle::kLogModuleName, "Child 0x%04x mode change 0x%02x -> 0x%02x [%s]", v34, v35, v36, v37, v38, v39, Rloc16);
          char v59 = 1;
          if (ot::Neighbor::IsRxOnWhenIdle(v61))
          {
            ot::CslTxScheduler::ChildInfo::SetCslSynchronized((unsigned char *)v61 + 168, 0);
            ot::CslTxScheduler::ChildInfo::SetCslPrevSnValid((unsigned char *)v61 + 168, 0);
          }
          uint64_t v40 = ot::GetProvider<ot::InstanceLocator>::Get<ot::IndirectSender>(this);
          ot::IndirectSender::HandleChildModeChange(v40, v61, v60);
        }
        if (v59)
        {
          ot::ChildTable::StoreChild((ot::Mle::MleRouter *)((char *)this + 1208), v61);
          IgnoreError();
        }
        ot::Mle::MleRouter::SendChildUpdateResponse(this, v61, v68[1], (const ot::Mle::Mle::TlvList *)v71, (const ot::Mle::Mle::Challenge *)v73);
        *((unsigned char *)v68 + 3ot::Tlv::SetType(this, 2) = 2;
      }
    }
    else if (ot::Mle::DeviceMode::IsRxOnWhenIdle((ot::Mle::DeviceMode *)&v65))
    {
      ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v71, 17);
      ot::Mle::MleRouter::SendChildUpdateResponse(this, 0, v68[1], (const ot::Mle::Mle::TlvList *)v71, (const ot::Mle::Mle::Challenge *)v73);
    }
  }
LABEL_56:
  ot::Mle::Mle::LogProcessError(0x14u, v67);
}

void ot::Mle::MleRouter::SendChildUpdateResponse(ot::Mle::MleRouter *this, ot::Child *a2, const ot::Ip6::MessageInfo *a3, const ot::Mle::Mle::TlvList *a4, const ot::Mle::Mle::Challenge *a5)
{
  uint64_t v25 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0xEu);
  if (v25)
  {
    ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
    uint64_t v24 = v5;
    uint64_t v23 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a4);
    while (v24 != (unsigned __int8 *)v23)
    {
      unsigned __int8 v22 = *v24;
      if (*v24)
      {
        uint64_t v13 = *v24;
        char v12 = 1;
      }
      else
      {
        uint64_t v13 = *v24;
        char v12 = 0;
      }
      if ((v12 & 1) == 0)
      {
        switch(v13)
        {
          case 0:
            int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v25);
            if (!appended) {
              break;
            }
            goto LABEL_48;
          case 1:
          case 2:
          case 3:
          case 6:
          case 7:
          case 9:
          case 10:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
            break;
          case 4:
            int appended = ot::Mle::Mle::TxMessage::AppendResponseTlv(v25, a5);
            if (!appended) {
              break;
            }
            goto LABEL_48;
          case 5:
            int appended = ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv(v25);
            if (!appended) {
              break;
            }
            goto LABEL_48;
          case 8:
            int appended = ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv(v25);
            if (!appended) {
              break;
            }
            goto LABEL_48;
          case 11:
            int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v25);
            if (!appended) {
              break;
            }
            goto LABEL_48;
          case 17:
            int appended = ot::Mle::Mle::TxMessage::AppendStatusTlv(v25, 1u);
            if (!appended) {
              break;
            }
            goto LABEL_48;
          default:
            JUMPOUT(0);
        }
      }
      if (a2)
      {
        switch(v22)
        {
          case 1u:
            char DeviceMode = ot::Neighbor::GetDeviceMode(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendModeTlv(v25, DeviceMode);
            if (appended) {
              goto LABEL_48;
            }
            break;
          case 2u:
            unsigned int Timeout = ot::Child::GetTimeout(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendTimeoutTlv(v25, Timeout);
            if (appended) {
              goto LABEL_48;
            }
            break;
          case 0xCu:
            ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "%s AppendNetworkDataTlv", v6, v7, v8, v9, v10, v11, (char)"SendChildUpdateResponse");
            NetworkDataint Type = ot::Neighbor::GetNetworkDataType(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v25, NetworkDataType);
            if (appended) {
              goto LABEL_48;
            }
            int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v25);
            if (appended) {
              goto LABEL_48;
            }
            int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v25);
            if (appended) {
              goto LABEL_48;
            }
            break;
          case 0x13u:
            int appended = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(v25, a2);
            if (appended) {
              goto LABEL_48;
            }
            break;
          case 0x1Bu:
            unsigned __int16 SupervisionInterval = ot::Child::GetSupervisionInterval(a2);
            int appended = ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(v25, SupervisionInterval);
            if (appended) {
              goto LABEL_48;
            }
            break;
          default:
            if (v22 == 86 && !ot::Neighbor::IsRxOnWhenIdle(a2))
            {
              int appended = ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv(v25);
              if (appended) {
                goto LABEL_48;
              }
            }
            break;
        }
      }
      ++v24;
    }
    PeerAddr = (__n128 *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
    int appended = ot::Mle::Mle::TxMessage::SendTo(v25, PeerAddr);
    if (!appended)
    {
      if (a2)
      {
        uint64_t v20 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
        unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
        ot::Mle::Mle::Log(0, 0x15u, v20, Rloc16);
      }
      else
      {
        uint64_t v18 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
        ot::Mle::Mle::Log(0, 0x15u, v18);
      }
    }
  }
  else
  {
    int appended = 3;
  }
LABEL_48:
  if (appended)
  {
    if (v25) {
      ot::Message::Free(v25);
    }
  }
}

BOOL ot::Neighbor::GetNetworkDataType(ot::Neighbor *this)
{
  uint64_t v3 = this;
  char DeviceMode = ot::Neighbor::GetDeviceMode(this);
  return ot::Mle::DeviceMode::GetNetworkDataType((ot::Mle::DeviceMode *)&DeviceMode);
}

{
  return ot::Neighbor::GetNetworkDataType(this);
}

uint64_t ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(ot::Tlv *a1, unsigned int *a2, uint64_t a3, unsigned __int16 *a4)
{
  return ot::Tlv::FindUintTlv<unsigned int>(a1, 0x55u, a2, a4);
}

{
  return ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)85,unsigned int>>(a1, a2, a3, a4);
}

uint64_t ot::Tlv::FindTlv<ot::Mle::CslChannelTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0x50, 5u, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::Mle::CslChannelTlv>(a1, a2, a3, a4, a5);
}

BOOL ot::Mle::CslChannelTlv::IsValid(ot::Mle::CslChannelTlv *this)
{
  return ot::Tlv::GetLength(this) >= 3uLL;
}

{
  return ot::Mle::CslChannelTlv::IsValid(this);
}

uint64_t ot::Mle::CslChannelTlv::GetChannel(ot::Mle::CslChannelTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 3));
}

{
  return ot::Mle::CslChannelTlv::GetChannel(this);
}

void ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::MleRouter *this, ot::Tlv **a2)
{
  unsigned __int8 v68 = this;
  int v67 = a2;
  int v66 = 0;
  unsigned __int16 v65 = 0;
  unsigned int v64 = 0;
  char v63 = 0;
  unsigned int v62 = 0;
  int v61 = 0;
  char v59 = 0;
  if (a2[3]
    && (unsigned __int16 v2 = ot::Neighbor::GetRloc16(v67[3]), !ot::Mle::IsActiveRouter((ot::Mle *)v2))
    && (uint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this),
        ot::ChildTable::Contains(v3, v67[3])))
  {
    char v59 = v67[3];
    int ResponseTlv = ot::Mle::Mle::RxMessage::ReadResponseTlv(*v67, (ot::Mle::Mle::Challenge *)v70, v4, v5, v6);
    if (ResponseTlv)
    {
      if (ResponseTlv != 23)
      {
        int v66 = 0;
        goto LABEL_52;
      }
      if (!ot::Neighbor::IsStateValid(v59))
      {
        int v66 = 8;
        goto LABEL_52;
      }
      char v71 = 0;
    }
    else
    {
      Challenge = (unsigned __int8 *)ot::Child::GetChallenge(v59);
      Challengechar Size = ot::Child::GetChallengeSize(v59);
      if (!ot::Mle::Mle::Challenge::Matches((ot::Mle::Mle::Challenge *)v70, Challenge, ChallengeSize))
      {
        int v66 = 8;
        goto LABEL_52;
      }
    }
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v67[1]);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v59);
    ot::Mle::Mle::Log(1, 0x15u, PeerAddr, Rloc16);
    int v53 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)0,unsigned short>>(*v67, &v65, v10, v11);
    if (v53)
    {
      if (v53 != 23)
      {
        int v66 = 6;
        goto LABEL_52;
      }
    }
    else
    {
      unsigned __int16 v14 = ot::Neighbor::GetRloc16(v59);
      if (v65 != v14)
      {
        ot::Mle::MleRouter::RemoveNeighbor(this, v59);
        goto LABEL_52;
      }
    }
    int v51 = ot::Tlv::Find<ot::Mle::StatusTlv>(*v67, &v63, v12, v13);
    if (v51)
    {
      if (v51 != 23)
      {
        int v66 = 6;
        goto LABEL_52;
      }
    }
    else if (v63 == 1)
    {
      ot::Mle::MleRouter::RemoveNeighbor(this, v59);
      goto LABEL_52;
    }
    int v50 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)5,unsigned int>>(*v67, &v62, v15, v16);
    if (v50)
    {
      if (v50 != 23)
      {
        int v66 = 6;
        goto LABEL_52;
      }
    }
    else
    {
      LinkFrameuint64_t Counters = (_DWORD *)ot::Neighbor::GetLinkFrameCounters(v59);
      ot::Mac::LinkFrameCounters::SetAll(LinkFrameCounters, v62);
      ot::Neighbor::SetLinkAckFrameCounter((uint64_t)v59, v62);
    }
    int v49 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)8,unsigned int>>(*v67, (unsigned int *)&v61, v17, v18);
    if (v49)
    {
      if (v49 != 23)
      {
        int v66 = 0;
        goto LABEL_52;
      }
    }
    else
    {
      ot::Neighbor::SetMleFrameCounter((uint64_t)v59, v61);
    }
    uint64_t v20 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v67[1]);
    ot::Ip6::Address::ToString(v20, (ot::StringWriter *)v69);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v69);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "%s Rx from %s linkFrameCounter=%d mleFrameCounter=%d", v21, v22, v23, v24, v25, v26, (char)"HandleChildUpdateResponse");
    int v48 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned int>>(*v67, &v64, v27, v28);
    if (v48)
    {
      if (v48 != 23)
      {
        int v66 = 6;
        goto LABEL_52;
      }
    }
    else
    {
      ot::Child::SetTimeout((uint64_t)v59, v64);
    }
    unsigned __int16 v58 = 0;
    int v47 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)27,unsigned short>>(*v67, &v58, v29, v30);
    if (v47)
    {
      if (v47 != 23)
      {
        int v66 = 6;
        goto LABEL_52;
      }
    }
    else
    {
      ot::Child::SetSupervisionInterval((uint64_t)v59, v58);
    }
    int v46 = ot::Mle::MleRouter::ProcessAddressRegistrationTlv(this, v67, v59, v31, v32);
    if (v46 && v46 != 23)
    {
      int v66 = 6;
    }
    else
    {
      int LeaderDataTlv = ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(*v67, (ot::Mle::LeaderData *)v60, v33, v34, v35);
      if (LeaderDataTlv)
      {
        if (LeaderDataTlv != 23)
        {
          int v66 = 6;
          goto LABEL_52;
        }
      }
      else
      {
        int v44 = v59;
        NetworkDataint Type = ot::Neighbor::GetNetworkDataType(v59);
        Datachar Version = ot::Mle::LeaderData::GetDataVersion((uint64_t)v60, NetworkDataType);
        ot::Child::SetNetworkDataVersion((uint64_t)v44, DataVersion);
      }
      uint64_t v38 = (ot::TimerMilli *)ot::Mle::MleRouter::SetChildStateToValid(this, v59);
      uint64_t v42 = v59;
      int Now = ot::TimerMilli::GetNow(v38);
      ot::Neighbor::SetLastHeard((uint64_t)v42, Now);
      ot::Neighbor::SetKeySequence((uint64_t)v59, *((_DWORD *)v67 + 5));
      LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v59);
      uint64_t ThreadLinkInfo = (ot::ThreadLinkInfo *)ot::Ip6::MessageInfo::GetThreadLinkInfo(v67[1]);
      char Rss = ot::ThreadLinkInfo::GetRss(ThreadLinkInfo);
      ot::LinkQualityInfo::AddRss(LinkInfo, Rss);
      if (v71) {
        char v41 = 1;
      }
      else {
        char v41 = 2;
      }
      *((unsigned char *)v67 + 3ot::Tlv::SetType(this, 2) = v41;
    }
  }
  else
  {
    uint64_t v7 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v67[1]);
    ot::Mle::Mle::Log(1, 0x16u, v7);
    int v66 = 23;
  }
LABEL_52:
  ot::Mle::Mle::LogProcessError(0x15u, v66);
}

uint64_t ot::Mle::MleRouter::SetChildStateToValid(ot::Mle::MleRouter *this, ot::Child *a2)
{
  uint64_t result = ot::Neighbor::IsStateValid(a2);
  if ((result & 1) == 0)
  {
    ot::Neighbor::SetState(a2, 7);
    ot::ChildTable::StoreChild((ot::Mle::MleRouter *)((char *)this + 1208), a2);
    IgnoreError();
    uint64_t v3 = (ot::MlrManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MlrManager>(this);
    ot::MlrManager::UpdateProxiedSubscriptions(v3, a2, 0, 0);
    return ot::NeighborTable::Signal((ot::Mle::MleRouter *)((char *)this + 232), 0, a2);
  }
  return result;
}

void ot::Mle::MleRouter::HandleDataRequest(ot::Mle::MleRouter *this, ot::Mle::Mle::RxInfo *a2)
{
  uint64_t v25 = this;
  uint64_t v24 = a2;
  int TlvRequestTlv = 0;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v26);
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v24 + 1));
  ot::Mle::Mle::Log(1, 7u, PeerAddr);
  if (ot::Mle::Mle::RxInfo::IsNeighborStateValid((ot::Neighbor **)v24))
  {
    int TlvRequestTlv = ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(*(ot::Mle::Mle::RxMessage **)v24, (ot::Mle::Mle::TlvList *)v26, v3, v4, v5);
    if (TlvRequestTlv) {
      goto LABEL_15;
    }
    int v20 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)22,ot::MeshCoP::Timestamp>>(*(ot::Tlv **)v24, (uint64_t)v22, v6, v7, v8);
    if (v20)
    {
      if (v20 != 23)
      {
        int TlvRequestTlv = 6;
        goto LABEL_15;
      }
    }
    else
    {
      active = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
      int Timestamp = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(active);
      if (!ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v22, Timestamp, v11)) {
        goto LABEL_9;
      }
    }
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v26, 24);
LABEL_9:
    int v19 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)23,ot::MeshCoP::Timestamp>>(*(ot::Tlv **)v24, (uint64_t)v22, v12, v13, v14);
    if (v19)
    {
      if (v19 != 23)
      {
        int TlvRequestTlv = 6;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v15 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
      uint64_t v16 = (const ot::MeshCoP::Timestamp *)ot::MeshCoP::DatasetManager::GetTimestamp(v15);
      if (!ot::MeshCoP::Timestamp::Compare((ot::MeshCoP::Timestamp *)v22, v16, v17))
      {
LABEL_14:
        *((unsigned char *)v24 + 3ot::Tlv::SetType(this, 2) = 2;
        ot::Mle::Mle::ProcessKeySequence(this, v24);
        uint64_t v18 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*((ot::Ip6::MessageInfo **)v24 + 1));
        ot::Mle::MleRouter::SendDataResponse(this, v18, (const ot::Mle::Mle::TlvList *)v26, 0, *(const ot::Message **)v24);
        goto LABEL_15;
      }
    }
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v26, 25);
    goto LABEL_14;
  }
  int TlvRequestTlv = 8;
LABEL_15:
  ot::Mle::Mle::LogProcessError(7u, TlvRequestTlv);
}

void ot::Mle::MleRouter::SendDataResponse(ot::Mle::MleRouter *this, const ot::Ip6::Address *a2, const ot::Mle::Mle::TlvList *a3, unsigned __int16 a4, const ot::Message *a5)
{
  int appended = 0;
  uint64_t v36 = 0;
  if (ot::Mle::Mle::IsSleepyRouter(this))
  {
    ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v42);
    char v11 = ot::String<(unsigned short)40>::AsCString((uint64_t)v42);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "ThreadConnection: Supress sending Data Responses, dst: %s", v12, v13, v14, v15, v16, v17, v11);
  }
  else if (*((unsigned char *)this + 72))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Suppressing Data Response - waiting for new network data", v5, v6, v7, v8, v9, v10, v28);
  }
  else
  {
    uint64_t v36 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 8u);
    if (v36)
    {
      int appended = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv(v36);
      if (!appended)
      {
        int appended = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv(v36);
        if (!appended)
        {
          int appended = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv(v36);
          if (!appended)
          {
            int appended = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv(v36);
            if (!appended)
            {
              ot::Array<unsigned char,(unsigned short)32,unsigned char>::begin();
              uint64_t v33 = v18;
              uint64_t v32 = ot::Array<unsigned char,(unsigned short)32,unsigned char>::end((uint64_t)a3);
              while (v33 != (unsigned __int8 *)v32)
              {
                int v30 = *v33;
                switch(v30)
                {
                  case 9:
                    int appended = ot::Mle::Mle::TxMessage::AppendRouteTlv(v36, 0);
                    if (appended) {
                      goto LABEL_41;
                    }
                    break;
                  case 12:
                    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor((ot::Mle::MleRouter *)((char *)this + 232), a2, 1);
                    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)&ot::Mle::kLogModuleName, "%s AppendNetworkDataTlv", v19, v20, v21, v22, v23, v24, (char)"SendDataResponse");
                    if (Neighbor)
                    {
                      NetworkDataint Type = ot::Neighbor::GetNetworkDataType(Neighbor);
                      int v25 = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v36, NetworkDataType);
                    }
                    else
                    {
                      int v25 = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(v36, 0);
                    }
                    int appended = v25;
                    if (v25) {
                      goto LABEL_41;
                    }
                    break;
                  case 24:
                    int appended = ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv(v36);
                    if (appended) {
                      goto LABEL_41;
                    }
                    break;
                  case 25:
                    int appended = ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv(v36);
                    if (appended) {
                      goto LABEL_41;
                    }
                    break;
                  case 89:
                    if (!a5) {
                      __assert_rtn("SendDataResponse", "mle_router.cpp", 3946, "aRequestMessage != nullptr");
                    }
                    uint64_t v35 = (ot::Neighbor *)ot::NeighborTable::FindNeighbor((ot::Mle::MleRouter *)((char *)this + 232), a2, 1);
                    if (!v35)
                    {
                      int appended = 13;
                      goto LABEL_41;
                    }
                    uint64_t v26 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
                    int appended = ot::LinkMetrics::Subject::AppendReport(v26, v36, a5, v35);
                    if (appended) {
                      goto LABEL_41;
                    }
                    break;
                }
                ++v33;
              }
              if (a4)
              {
                uint64_t v27 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(this);
                ot::MeshForwarder::RemoveDataResponseMessages(v27);
                ot::Mle::Mle::RemoveDelayedDataResponseMessage(this);
                int appended = ot::Mle::Mle::TxMessage::SendAfterDelay(v36, a2, a4);
                if (!appended) {
                  ot::Mle::Mle::Log(2, 8u, a2);
                }
              }
              else
              {
                int appended = ot::Mle::Mle::TxMessage::SendTo(v36, (__n128 *)a2);
                if (!appended) {
                  ot::Mle::Mle::Log(0, 8u, a2);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      int appended = 3;
    }
  }
LABEL_41:
  if (appended && v36) {
    ot::Message::Free(v36);
  }
  ot::Mle::Mle::LogSendError(8u, appended);
}

uint64_t ot::Mle::MleRouter::HandleNetworkDataUpdateRouter(ot::Mle::MleRouter *this)
{
  uint64_t v5 = this;
  ot::Mle::Mle::TlvList::TlvList((ot::Mle::Mle::TlvList *)v6);
  uint64_t result = ot::Mle::Mle::IsRouterOrLeader(this);
  if (result)
  {
    ot::Ip6::Address::SetToLinkLocalAllNodesMulticast((ot::Ip6::Address *)v4);
    ot::Mle::Mle::TlvList::Add((ot::Mle::Mle::TlvList *)v6, 12);
    if (ot::Mle::Mle::IsLeader(this)) {
      unsigned __int16 Uint16InRange = 0;
    }
    else {
      unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0, 0x1F4u);
    }
    ot::Mle::MleRouter::SendDataResponse(this, (const ot::Ip6::Address *)v4, (const ot::Mle::Mle::TlvList *)v6, Uint16InRange, 0);
    return ot::Mle::MleRouter::SynchronizeChildNetworkData(this);
  }
  return result;
}

uint64_t ot::Child::GetNetworkDataVersion(ot::Child *this)
{
  return *((unsigned __int8 *)this + 448);
}

{
  return ot::Child::GetNetworkDataVersion(this);
}

void ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::MleRouter *this, ot::Ip6::MessageInfo **a2)
{
  uint64_t v24 = this;
  uint64_t v23 = a2;
  TlvValueunsigned __int16 Offset = 0;
  unsigned __int16 v19 = 0;
  unsigned __int16 v18 = 0;
  unsigned __int16 v17 = 0;
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2[1]);
  ot::Mle::Mle::Log(1, 9u, PeerAddr);
  ot::Tlv::SetLength((uint64_t)v20, 0);
  if (ot::Mle::MleRouter::IsRouterEligible(this))
  {
    if (ot::Mle::Mle::IsRxOnWhenIdle(this))
    {
      TlvValueunsigned __int16 Offset = ot::Tlv::FindTlvValueOffset(*v23, (const ot::Message *)0x1A, &v19, &v18, v3);
      if (!TlvValueOffset)
      {
        unsigned __int16 v17 = v19 + v18;
        while (v19 < (int)v17)
        {
          ot::Message::Read<ot::MeshCoP::Tlv>(*v23, v19, v21);
          IgnoreError();
          int Type = ot::MeshCoP::Tlv::GetType((ot::MeshCoP::Tlv *)v21);
          if (Type == 2)
          {
            TlvValueunsigned __int16 Offset = ot::Tlv::Read<ot::MeshCoP::ExtendedPanIdTlv>(*v23, v19, (uint64_t)v27);
            if (TlvValueOffset) {
              goto LABEL_24;
            }
            uint64_t v4 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
            ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v4);
            if (!ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(v5, v27))
            {
              TlvValueunsigned __int16 Offset = 2;
              goto LABEL_24;
            }
          }
          else if (Type == 128)
          {
            ot::Message::Read<ot::MeshCoP::DiscoveryRequestTlv>(*v23, v19, v20);
            IgnoreError();
            if (!ot::MeshCoP::DiscoveryRequestTlv::IsValid((ot::MeshCoP::DiscoveryRequestTlv *)v20))
            {
              TlvValueunsigned __int16 Offset = 6;
              goto LABEL_24;
            }
          }
          unsigned __int8 Length = ot::Tlv::GetLength((ot::Tlv *)v21);
          v19 += Length + 2;
        }
        if (!ot::MeshCoP::DiscoveryRequestTlv::IsValid((ot::MeshCoP::DiscoveryRequestTlv *)v20)) {
          goto LABEL_23;
        }
        if (ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::IsSet((void *)this + 4465))
        {
          uint64_t v7 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v23[1]);
          Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v7);
          uint64_t v8 = (ot::Mac::ExtAddress *)ot::AsCoreType<otExtAddress>((uint64_t)v25);
          ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(Iid, v8);
          char Version = ot::MeshCoP::DiscoveryRequestTlv::GetVersion((ot::MeshCoP::DiscoveryRequestTlv *)v20);
          char v26 = v26 & 0xF0 | Version & 0xF;
          BOOL IsJoiner = ot::MeshCoP::DiscoveryRequestTlv::IsJoiner((ot::MeshCoP::DiscoveryRequestTlv *)v20);
          char v26 = v26 & 0xEF | (16 * IsJoiner);
          uint64_t v16 = v25;
          ot::Callback<void (*)(otThreadDiscoveryRequestInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otThreadDiscoveryRequestInfo*>((uint64_t)this + 35720, &v16);
        }
        if (ot::MeshCoP::DiscoveryRequestTlv::IsJoiner((ot::MeshCoP::DiscoveryRequestTlv *)v20)
          && (char v11 = (ot::NetworkData::LeaderBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this),
              (ot::NetworkData::LeaderBase::IsJoiningEnabled(v11) & 1) == 0))
        {
          TlvValueunsigned __int16 Offset = 8;
        }
        else
        {
LABEL_23:
          uint64_t v12 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v23[1]);
          TlvValueunsigned __int16 Offset = ot::Mle::MleRouter::SendDiscoveryResponse(this, v12, *v23);
        }
      }
    }
    else
    {
      TlvValueunsigned __int16 Offset = 13;
    }
  }
  else
  {
    TlvValueunsigned __int16 Offset = 13;
  }
LABEL_24:
  ot::Mle::Mle::LogProcessError(9u, TlvValueOffset);
}

uint64_t ot::Message::Read<ot::MeshCoP::DiscoveryRequestTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return ot::Message::Read<ot::MeshCoP::DiscoveryRequestTlv>(a1, a2, a3);
}

BOOL ot::MeshCoP::DiscoveryRequestTlv::IsValid(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return ot::MeshCoP::DiscoveryRequestTlv::IsValid(this);
}

BOOL ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::MeshCoP::ExtendedPanId>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::MeshCoP::ExtendedPanId>::operator!=(a1, a2);
}

BOOL ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::IsSet(void *a1)
{
  return *a1 != 0;
}

{
  return ot::CallbackBase<void (*)(otThreadDiscoveryRequestInfo const*,void *)>::IsSet(a1);
}

uint64_t ot::MeshCoP::DiscoveryRequestTlv::GetVersion(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  return (int)*((unsigned __int8 *)this + 2) >> 4;
}

{
  return ot::MeshCoP::DiscoveryRequestTlv::GetVersion(this);
}

BOOL ot::MeshCoP::DiscoveryRequestTlv::IsJoiner(ot::MeshCoP::DiscoveryRequestTlv *this)
{
  return (*((unsigned char *)this + 2) & 8) != 0;
}

{
  return ot::MeshCoP::DiscoveryRequestTlv::IsJoiner(this);
}

uint64_t ot::Callback<void (*)(otThreadDiscoveryRequestInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otThreadDiscoveryRequestInfo*>(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))a1)(*a2, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otThreadDiscoveryRequestInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otThreadDiscoveryRequestInfo*>(a1, a2);
}

uint64_t ot::Mle::MleRouter::SendDiscoveryResponse(ot::Mle::MleRouter *this, const ot::Ip6::Address *a2, const ot::Message *a3)
{
  uint64_t v32 = this;
  uint64_t v31 = a2;
  int v30 = a3;
  unsigned int v29 = 0;
  __int16 Length = 0;
  unsigned __int16 Uint16InRange = 0;
  char v28 = ot::Mle::Mle::NewMleMessage((uint64_t)this, 0x11u);
  if (v28)
  {
    ot::Message::SetDirectTransmission(v28);
    __int16 PanId = ot::Message::GetPanId(v30);
    ot::Message::SetPanId(v28, PanId);
    ot::Mle::Tlv::SetType(v26, 26);
    unsigned int v29 = ot::Message::Append<ot::Mle::Tlv>(v28, v26);
    if (!v29)
    {
      __int16 Length = ot::Message::GetLength(v28);
      ot::MeshCoP::DiscoveryResponseTlv::Init((ot::MeshCoP::DiscoveryResponseTlv *)v25);
      ot::MeshCoP::DiscoveryResponseTlv::SetVersion((uint64_t)v25, 4);
      uint64_t v4 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v4) + 2) & 2) != 0)
      {
        uint64_t v21 = v28;
        uint64_t v5 = (ot::MeshCoP::BorderAgent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        Udp__int16 Port = ot::MeshCoP::BorderAgent::GetUdpPort(v5);
        unsigned int v29 = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(v21, UdpPort);
        if (v29) {
          goto LABEL_18;
        }
        ot::MeshCoP::DiscoveryResponseTlv::SetNativeCommissioner((uint64_t)v25, 1);
      }
      else
      {
        ot::MeshCoP::DiscoveryResponseTlv::SetNativeCommissioner((uint64_t)v25, 0);
      }
      uint64_t v7 = (ot::KeyManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::KeyManager>(this);
      if ((*(_WORD *)(ot::KeyManager::GetSecurityPolicy(v7) + 2) & 0x10) != 0) {
        ot::MeshCoP::DiscoveryResponseTlv::SetCommercialCommissioningMode((uint64_t)v25, 1);
      }
      unsigned int v29 = ot::Tlv::AppendTo((ot::Tlv *)v25, v28);
      if (!v29)
      {
        uint64_t v20 = v28;
        uint64_t v8 = (ot::MeshCoP::ExtendedPanIdManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ExtendedPanIdManager>(this);
        ot::MeshCoP::ExtendedPanIdManager::GetExtPanId(v8);
        unsigned int v29 = ot::Tlv::Append<ot::MeshCoP::ExtendedPanIdTlv>(v20, v9);
        if (!v29)
        {
          ot::MeshCoP::NetworkNameTlv::Init((ot::MeshCoP::NetworkNameTlv *)v33);
          uint64_t v10 = (ot::MeshCoP::NetworkNameManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::NetworkNameManager>(this);
          ot::MeshCoP::NetworkNameManager::GetNetworkName(v10);
          v23[0] = ot::MeshCoP::NetworkName::GetAsData(v11);
          v23[1] = v12;
          ot::MeshCoP::NetworkNameTlv::SetNetworkName((ot::MeshCoP::NetworkNameTlv *)v33, (const ot::MeshCoP::NameData *)v23);
          unsigned int v29 = ot::Tlv::AppendTo((ot::Tlv *)v33, v28);
          if (!v29)
          {
            uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
            ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(v13, 8u);
            if (!v14 || (unsigned int v29 = ot::Tlv::AppendTo(v14, v28)) == 0)
            {
              unsigned __int16 v19 = v28;
              uint64_t v15 = (ot::MeshCoP::JoinerRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(this);
              JoinerUdp__int16 Port = ot::MeshCoP::JoinerRouter::GetJoinerUdpPort(v15);
              unsigned int v29 = ot::Tlv::Append<ot::MeshCoP::JoinerUdpPortTlv>(v19, JoinerUdpPort);
              if (!v29)
              {
                char v17 = ot::Message::GetLength(v28);
                ot::Tlv::SetLength((uint64_t)v26, v17 - Length);
                ot::Message::Write<ot::Mle::Tlv>(v28, Length - 2, v26);
                unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange(0, 0xFBu);
                unsigned int v29 = ot::Mle::Mle::TxMessage::SendAfterDelay(v28, v31, Uint16InRange);
                if (!v29) {
                  ot::Mle::Mle::Log(2, 0xAu, v31);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int v29 = 3;
  }
LABEL_18:
  if (v29 && v28) {
    ot::Message::Free(v28);
  }
  ot::Mle::Mle::LogProcessError(0xAu, v29);
  return v29;
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::Init(ot::MeshCoP::DiscoveryResponseTlv *this)
{
  ot::MeshCoP::Tlv::SetType(this, 129);
  uint64_t result = ot::Tlv::SetLength((uint64_t)this, 2);
  *((unsigned char *)this + ot::Tlv::SetType(this, 2) = 0;
  *((unsigned char *)this + ot::Tlv::SetType(this, 3) = 0;
  return result;
}

{
  return ot::MeshCoP::DiscoveryResponseTlv::Init(this);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::SetVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 2) = *(unsigned char *)(this + 2) & 0xF | (16 * a2);
  return this;
}

{
  return ot::MeshCoP::DiscoveryResponseTlv::SetVersion(this, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0xFu, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(a1, a2);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::SetNativeCommissioner(uint64_t this, char a2)
{
  if (a2) {
    *(unsigned char *)(this + 2) |= 8u;
  }
  else {
    *(unsigned char *)(this + 2) &= ~8u;
  }
  return this;
}

{
  return ot::MeshCoP::DiscoveryResponseTlv::SetNativeCommissioner(this, a2);
}

uint64_t ot::MeshCoP::DiscoveryResponseTlv::SetCommercialCommissioningMode(uint64_t this, char a2)
{
  if (a2) {
    *(unsigned char *)(this + 2) |= 4u;
  }
  else {
    *(unsigned char *)(this + 2) &= ~4u;
  }
  return this;
}

{
  return ot::MeshCoP::DiscoveryResponseTlv::SetCommercialCommissioningMode(this, a2);
}

uint64_t ot::Child::GetRequestTlv(ot::Child *this, unsigned __int8 a2)
{
  return *((unsigned __int8 *)this + a2 + 449);
}

{
  return ot::Child::GetRequestTlv(this, a2);
}

BOOL ot::Mle::MleRouter::IsMinimalChild(ot::Mle::MleRouter *this, unsigned __int16 a2)
{
  BOOL v9 = 0;
  int v7 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
  unsigned __int16 v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  unsigned __int16 ShortAddress = ot::Mac::Mac::GetShortAddress(v2);
  if (v7 == ot::Mle::RouterIdFromRloc16((ot::Mle *)ShortAddress))
  {
    unsigned int Neighbor = (ot::Neighbor *)ot::NeighborTable::FindNeighbor((ot::Mle::MleRouter *)((char *)this + 232), a2, 1);
    LOBYTE(v5) = 0;
    if (Neighbor) {
      return !ot::Neighbor::IsFullThreadDevice(Neighbor);
    }
    return v5;
  }
  return v9;
}

void ot::Mle::MleRouter::RemoveRouterLink(ot::Mle::MleRouter *this, ot::Router *a2)
{
  int v3 = *((unsigned __int8 *)this + 73);
  if (v3 == 2)
  {
    if (a2 == (ot::Mle::MleRouter *)((char *)this + 80))
    {
      ot::Mle::Mle::BecomeDetached(this);
      IgnoreError();
    }
  }
  else if (v3 == 4 || v3 == 3)
  {
    ot::RouterTable::RemoveRouterLink((ot::Mle::MleRouter *)((char *)this + 30912), a2);
  }
}

unsigned char *ot::Mle::Mle::ClearParentCandidate(ot::Mle::Mle *this)
{
  return ot::Mle::Mle::ParentCandidate::Clear((ot::Mle::Mle *)((char *)this + 416));
}

{
  return ot::Mle::Mle::ClearParentCandidate(this);
}

uint64_t ot::Mle::MleRouter::SetPreferredRouterId(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v4 = 0;
  if (ot::Mle::Mle::IsDetached(this) || ot::Mle::Mle::IsDisabled(this)) {
    *((unsigned char *)this + 35698) = a2;
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mle::MleRouter::ResetPairingDeviceExtAddr(uint64_t this)
{
  *(void *)(this + 35689) = 0;
  return this;
}

uint64_t ot::Mle::MleRouter::SetPairingDeviceExtAddr(ot::Mle::MleRouter *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t result = ot::Mle::MleRouter::ResetPairingDeviceExtAddr((uint64_t)this);
  *(void *)((char *)this + 35689) = *(void *)a2;
  return result;
}

uint64_t ot::Mle::MleRouter::GetPairingDeviceExtAddr(ot::Mle::MleRouter *this)
{
  return (uint64_t)this + 35689;
}

void ot::Mle::MleRouter::ResolveRoutingLoops(ot::Mle::MleRouter *this, unsigned __int16 a2, unsigned __int16 a3)
{
  char v19 = a2;
  if (a2 == (unsigned __int16)ot::Mle::MleRouter::GetNextHop(this, a3))
  {
    ot::RouterTable::FindRouterByRloc16((ot::Mle::MleRouter *)((char *)this + 30912), a3);
    char v17 = v9;
    if (!v9) {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Routing Loop exists srcRloc16=0x%x dstRloc16=0x%x", v3, v4, v5, v6, v7, v8, v19);
    }
    if (v17)
    {
      ot::Router::GetNextHop(v17);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Routing Loop exists srcRloc16=0x%x dstRloc16=0x%x nextHop=%d invalidate next hop and reset advertisement interval", v10, v11, v12, v13, v14, v15, v19);
      ot::Router::SetNextHopToInvalid(v17);
      ot::Mle::MleRouter::ResetAdvertiseInterval(this);
    }
  }
}

uint64_t ot::Mle::MleRouter::CheckReachability(ot::Mle::MleRouter *this, unsigned __int16 a2, const ot::Ip6::Header *a3)
{
  unsigned int v34 = 0;
  if (ot::Mle::Mle::IsChild(this)) {
    return ot::Mle::Mle::CheckReachability(this, a2, a3);
  }
  uint64_t v3 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  if (a2 != (unsigned __int16)ot::Mac::Mac::GetShortAddress(v3))
  {
    if (*((unsigned __int8 *)this + 35697) == ot::Mle::RouterIdFromRloc16((ot::Mle *)a2))
    {
      ot::ChildTable::FindChild((ot::Mle::MleRouter *)((char *)this + 1208), a2, 1);
      if (v14) {
        return v34;
      }
      __int16 Source = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
      ot::Ip6::Address::ToString(Source, (ot::StringWriter *)v40);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v40);
      __int16 Destination = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
      ot::Ip6::Address::ToString(Destination, (ot::StringWriter *)v39);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v39);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Check reachability mesh dst: %04hx, IPv6 src: [%s], ipv6 dst: [%s], not a child of this node.", v17, v18, v19, v20, v21, v22, a2);
    }
    else
    {
      if ((unsigned __int16)ot::Mle::MleRouter::GetNextHop(this, a2) != 65534) {
        return v34;
      }
      uint64_t v23 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
      ot::Ip6::Address::ToString(v23, (ot::StringWriter *)v38);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v38);
      uint64_t v24 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
      ot::Ip6::Address::ToString(v24, (ot::StringWriter *)v37);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v37);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Check reachability mesh dst: %04hx, IPv6 src: [%s], ipv6 dst: [%s], not able to generate next hop.", v25, v26, v27, v28, v29, v30, a2);
    }
    return 4;
  }
  uint64_t v32 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  uint64_t v4 = (const ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
  if (!ot::Ip6::Netif::HasUnicastAddress(v32, v4))
  {
    uint64_t v5 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
    if (!ot::NeighborTable::FindNeighbor((ot::Mle::MleRouter *)((char *)this + 232), v5, 1))
    {
      uint64_t v6 = (ot::Ip6::Address *)ot::Ip6::Header::GetSource(a3);
      ot::Ip6::Address::ToString(v6, (ot::StringWriter *)v42);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v42);
      uint64_t v7 = (ot::Ip6::Address *)ot::Ip6::Header::GetDestination(a3);
      ot::Ip6::Address::ToString(v7, (ot::StringWriter *)v41);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v41);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Check reachability mesh dst: %04hx, IPv6 src: [%s], ipv6 dst: [%s], neither this node nor neighbour", v8, v9, v10, v11, v12, v13, a2);
      return 4;
    }
  }
  return v34;
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)1, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(a1, a2);
}

uint64_t ot::Mle::MleRouter::HandleAddressSolicitResponse(unsigned char *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3, int a4)
{
  int v49 = a1;
  int v48 = a2;
  int v47 = a3;
  int v46 = a4;
  char v45 = 0;
  unsigned __int16 v44 = 0;
  unsigned __int8 v43 = 0;
  uint64_t v42 = 0;
  a1[35640] &= ~2u;
  if (!v46)
  {
    if (v48)
    {
      if (v47)
      {
        if (ot::Coap::Message::GetCode(v48) == 68)
        {
          PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v47);
          ot::Mle::Mle::Log(1, 0x12u, PeerAddr);
          if (!ot::Tlv::Find<ot::ThreadStatusTlv>(v48, &v45, v5, v6))
          {
            if (v45)
            {
              a1[35640] = a1[35640] & 0xFB | 4;
              unsigned __int8 v34 = a1[35698];
              ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)v34);
              ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1);
              ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)&ot::Mle::kLogModuleName, "Address Solicit Rejected mPreviousRouterId=%d IsPrevRouterIdValid=%d HasChildren=%d", v9, v10, v11, v12, v13, v14, v34);
              if (ot::Mle::MleRouter::IsRouterIdValid((ot::Mle::MleRouter *)a1[35698]))
              {
                if (ot::Mle::MleRouter::HasChildren((ot::Mle::MleRouter *)a1)) {
                  ot::Mle::MleRouter::RemoveChildren((ot::Mle::MleRouter *)a1);
                }
                ot::Mle::MleRouter::SetRouterId((uint64_t)a1, 63);
              }
            }
            else if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v48, &v44, v7, v8))
            {
              unsigned __int8 v43 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v44);
              if (!ot::Tlv::FindTlv<ot::ThreadRouterMaskTlv>(v48, v50, v15, v16, v17)
                && ot::ThreadRouterMaskTlv::IsValid((ot::ThreadRouterMaskTlv *)v50))
              {
                ot::Mle::MleRouter::SetRouterId((uint64_t)a1, v43);
                unsigned __int16 v18 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a1[35697]);
                ot::Mle::MleRouter::SetStateRouter((ot::Mle::MleRouter *)a1, v18);
                ot::RouterTable::ClearNeighbors((ot::RouterTable *)(a1 + 30912));
                Idchar Sequence = ot::ThreadRouterMaskTlv::GetIdSequence((ot::ThreadRouterMaskTlv *)v50);
                AssignedRouterIdMasunsigned __int8 k = (const ot::Mle::RouterIdSet *)ot::ThreadRouterMaskTlv::GetAssignedRouterIdMask((ot::ThreadRouterMaskTlv *)v50);
                ot::RouterTable::UpdateRouterIdSet((ot::RouterTable *)(a1 + 30912), IdSequence, AssignedRouterIdMask);
                ot::RouterTable::FindRouterById((ot::RouterTable *)(a1 + 30912), v43);
                uint64_t v42 = v20;
                if (v20)
                {
                  uint64_t v21 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>((ot::InstanceLocator *)a1);
                  ExtAddress = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v21);
                  ot::Neighbor::SetExtAddress(v42, ExtAddress);
                  ot::Router::SetNextHopToInvalid(v42);
                  unsigned __int8 RouterId = ot::Neighbor::GetRouterId((ot::Neighbor *)(a1 + 80));
                  ot::RouterTable::FindRouterById((ot::RouterTable *)(a1 + 30912), RouterId);
                  uint64_t v42 = v24;
                  if (v24)
                  {
                    ot::Router::SetFrom(v42, (const ot::Parent *)(a1 + 80));
                    ot::Neighbor::SetState(v42, 7);
                    ot::Router::SetNextHopToInvalid(v42);
                    if (ot::RouterTable::GetPathCostToLeader((ot::RouterTable *)(a1 + 30912)) >= 0x10u)
                    {
                      ot::RouterTable::GetLeader((ot::RouterTable *)(a1 + 30912));
                      char v41 = v25;
                      if (!v25) {
                        __assert_rtn("HandleAddressSolicitResponse", "mle_router.cpp", 4361, "leader != nullptr");
                      }
                      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16((ot::Neighbor *)(a1 + 80));
                      unsigned __int8 v32 = ot::Mle::RouterIdFromRloc16((ot::Mle *)Rloc16);
                      char LeaderCost = ot::Parent::GetLeaderCost((ot::Parent *)(a1 + 80));
                      ot::Router::SetNextHopAndCost(v41, v32, LeaderCost);
                    }
                    if ((unsigned __int16)ot::Neighbor::GetVersion((ot::Neighbor *)(a1 + 80)) < 4u)
                    {
                      ot::Mle::MleRouter::SendLinkRequest((ot::Mle::MleRouter *)a1, (ot::Neighbor *)(a1 + 80));
                      IgnoreError();
                    }
                    ot::Mle::MleRouter::SendAdvertisement((ot::Mle::MleRouter *)a1);
                    uint64_t v28 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>((ot::InstanceLocator *)a1);
                    char v39 = ot::ChildTable::Iterate(v28, 2);
                    uint64_t v40 = (ot::ChildTable::IteratorBuilder *)&v39;
                    v38[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v39);
                    v38[1] = v29;
                    v37[0] = ot::ChildTable::IteratorBuilder::end(v40);
                    v37[1] = v30;
                    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v38, v37))
                    {
                      uint64_t v36 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v38);
                      ot::Mle::MleRouter::SendChildIdResponse((ot::Mle::MleRouter *)a1, v36);
                      IgnoreError();
                      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v38);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return ot::Mle::Mle::InformPreviousChannel((uint64_t)a1);
}

uint64_t ot::Tlv::FindTlv<ot::ThreadRouterMaskTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)7, 0xBu, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::ThreadRouterMaskTlv>(a1, a2, a3, a4, a5);
}

BOOL ot::ThreadRouterMaskTlv::IsValid(ot::ThreadRouterMaskTlv *this)
{
  return ot::Tlv::GetLength(this) >= 9uLL;
}

{
  return ot::ThreadRouterMaskTlv::IsValid(this);
}

uint64_t ot::ThreadRouterMaskTlv::GetIdSequence(ot::ThreadRouterMaskTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::ThreadRouterMaskTlv::GetIdSequence(this);
}

uint64_t ot::ThreadRouterMaskTlv::GetAssignedRouterIdMask(ot::ThreadRouterMaskTlv *this)
{
  return (uint64_t)this + 3;
}

{
  return ot::ThreadRouterMaskTlv::GetAssignedRouterIdMask(this);
}

void ot::RouterTable::GetLeader(ot::RouterTable *this)
{
  ot::AsConst<ot::RouterTable>();
  ot::RouterTable::GetLeader(v1);
  ot::AsNonConst<ot::Router>();
}

{
  ot::RouterTable::GetLeader(this);
}

uint64_t ot::Parent::GetLeaderCost(ot::Parent *this)
{
  return *((unsigned __int8 *)this + 142);
}

{
  return ot::Parent::GetLeaderCost(this);
}

uint64_t ot::Mle::MleRouter::SetChildRouterLinks(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v4 = 0;
  if (ot::Mle::Mle::IsDisabled(this)) {
    *((unsigned char *)this + 3571ot::Tlv::SetType(this, 2) = a2;
  }
  else {
    return 13;
  }
  return v4;
}

uint64_t ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(ot::Mle::MleRouter *this)
{
  char v4 = 0;
  if (ot::Mle::MleRouter::IsRouterEligible(this))
  {
    char v4 = 0;
    if (ot::Mle::Mle::IsChild(this))
    {
      char v4 = 0;
      if ((*((unsigned char *)this + 35640) & 4) == 0)
      {
        if (!ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(this) {
          || (LOBYTE(vot::Tlv::SetType(this, 2) = 1, ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(this) > 0xAu))
        }
        {
          int v2 = (*((unsigned __int8 *)this + 35640) >> 1) & 1;
        }
        char v4 = v2;
      }
    }
  }
  return v4 & 1;
}

void ot::Mle::MleRouter::HandleTmf<(ot::Uri)4>(unsigned char *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v37 = a1;
  uint64_t v36 = a2;
  uint64_t v35 = a3;
  int v34 = 0;
  unsigned __int8 v33 = 1;
  *(void *)&v32[1] = 0;
  v32[0] = 0;
  char v31 = 0;
  if (a1[73] != 4)
  {
    int v34 = 13;
    goto LABEL_33;
  }
  if (!ot::Coap::Message::IsConfirmablePostRequest(v36))
  {
    int v34 = 6;
    goto LABEL_33;
  }
  PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v35);
  ot::Mle::Mle::Log(1, 0x13u, PeerAddr);
  int v34 = ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(v36, (uint64_t)v39, v4, v5, v6);
  if (v34) {
    goto LABEL_33;
  }
  int v34 = ot::Tlv::Find<ot::ThreadStatusTlv>(v36, &v31, v7, v8);
  if (v34) {
    goto LABEL_33;
  }
  int v29 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v36, v32, v9, v10);
  if (v29)
  {
    if (v29 != 23)
    {
      int v34 = 6;
      goto LABEL_33;
    }
    v32[0] = -2;
  }
  ot::RouterTable::FindRouter((ot::RouterTable *)(a1 + 30912), (const ot::Mac::ExtAddress *)v39);
  *(void *)&v32[1] = v11;
  if (v11)
  {
    unsigned __int8 v33 = 0;
    goto LABEL_33;
  }
  if (v31 == 2)
  {
    if (a1[35637] <= (int)ot::RouterTable::GetActiveRouterCount((ot::RouterTable *)(a1 + 30912))) {
      goto LABEL_33;
    }
  }
  else if (v31 != 4 && v31 != 3)
  {
    if (v31 != 5)
    {
      unsigned __int8 v33 = 6;
      goto LABEL_33;
    }
    if (a1[35637] <= (int)ot::RouterTable::GetActiveRouterCount((ot::RouterTable *)(a1 + 30912)))
    {
      uint64_t v13 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)a1);
      if (ot::NetworkData::NetworkData::CountBorderRouters(v13, 1) >= 2u)
      {
        ot::Mac::ExtAddress::ToString((ot::Mac::ExtAddress *)v39, (ot::StringWriter *)v38);
        char v14 = ot::String<(unsigned short)17>::AsCString((uint64_t)v38);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Rejecting BR %s router role req - have %u BR routers", v15, v16, v17, v18, v19, v20, v14);
        goto LABEL_33;
      }
    }
  }
  if (v32[0] != 65534)
  {
    unsigned __int8 v21 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v32[0]);
    *(void *)&v32[1] = ot::RouterTable::Allocate((ot::RouterTable *)(a1 + 30912), v21);
    if (*(void *)&v32[1])
    {
      char v22 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v32[0]);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)&ot::Mle::kLogModuleName, "Router id %u requested and provided!", v23, v24, v25, v26, v27, v28, v22);
    }
  }
  if (*(void *)&v32[1] || (*(void *)&v32[1] = ot::RouterTable::Allocate((ot::RouterTable *)(a1 + 30912))) != 0)
  {
    ot::Neighbor::SetExtAddress(*(void **)&v32[1], (const ot::Mac::ExtAddress *)v39);
    unsigned __int8 v33 = 0;
  }
LABEL_33:
  if (!v34) {
    ot::Mle::MleRouter::SendAddressSolicitResponse((uint64_t)a1, v36, v33, *(ot::Neighbor **)&v32[1], v35);
  }
}

uint64_t ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(ot::Tlv *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)1, a2, (void *)8, a5);
}

{
  return ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(a1, a2, a3, a4, a5);
}

void ot::Mle::MleRouter::SendAddressSolicitResponse(uint64_t a1, const ot::Coap::Message *a2, unsigned __int8 a3, ot::Neighbor *a4, ot::Ip6::MessageInfo *a5)
{
  uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
  uint64_t v18 = ot::Coap::CoapBase::NewPriorityResponseMessage(v5, a2);
  if (v18)
  {
    if (!ot::Tlv::Append<ot::ThreadStatusTlv>(v18, a3))
    {
      if (!a4
        || (unsigned __int16 v6 = ot::Neighbor::GetRloc16(a4),
            !ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v18, v6))
        && (ot::ThreadRouterMaskTlv::Init((ot::ThreadRouterMaskTlv *)v23),
            RouterIdchar Sequence = ot::RouterTable::GetRouterIdSequence((ot::RouterTable *)(a1 + 30912)),
            ot::ThreadRouterMaskTlv::SetIdSequence((uint64_t)v23, RouterIdSequence),
            AssignedRouterIdMasunsigned __int8 k = (ot::Mle::RouterIdSet *)ot::ThreadRouterMaskTlv::GetAssignedRouterIdMask((ot::ThreadRouterMaskTlv *)v23),
            ot::RouterTable::GetRouterIdSet((ot::RouterTable *)(a1 + 30912), AssignedRouterIdMask),
            !ot::Tlv::AppendTo((ot::Tlv *)v23, v18)))
      {
        uint64_t v9 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
        if (!ot::Coap::CoapBase::SendMessage(v9, v18, a5))
        {
          uint64_t v18 = 0;
          PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a5);
          ot::Mle::Mle::Log(0, 0x12u, PeerAddr);
          if (!a3)
          {
            if (a4)
            {
              uint64_t v11 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a5);
              if (ot::Mle::Mle::IsRoutingLocator((ot::Mle::Mle *)a1, v11))
              {
                uint64_t v12 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a5);
                Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v12);
                unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(Iid);
                if (Locator != (unsigned __int16)ot::Neighbor::GetRloc16(a4))
                {
                  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16((ot::Mle::Mle *)a1);
                  if (!ot::Mle::RouterIdMatch((ot::Mle *)Locator, Rloc16))
                  {
                    uint64_t v15 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>((ot::InstanceLocator *)a1);
                    ot::AddressResolver::RemoveEntriesForRloc16(v15, Locator);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v18) {
    ot::Message::Free(v18);
  }
}

void *ot::ThreadRouterMaskTlv::Init(ot::ThreadRouterMaskTlv *this)
{
  return ot::Mle::RouterIdSet::Clear((ot::ThreadRouterMaskTlv *)((char *)this + 3));
}

{
  return ot::ThreadRouterMaskTlv::Init(this);
}

uint64_t ot::ThreadRouterMaskTlv::SetIdSequence(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::ThreadRouterMaskTlv::SetIdSequence(this, a2);
}

void ot::Mle::MleRouter::HandleTmf<(ot::Uri)3>(unsigned char *a1, ot::Coap::Message *a2, uint64_t a3)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  *(void *)&v15[1] = a3;
  v15[0] = 0;
  if (a1[73] == 4 && ot::Coap::Message::IsConfirmablePostRequest(v16))
  {
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*(ot::Ip6::MessageInfo **)&v15[1]);
    ot::Mle::Mle::Log(1, 0x10u, PeerAddr);
    if (!ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v16, v15, v4, v5)
      && !ot::Tlv::Find<ot::SimpleTlvInfo<(unsigned char)1,ot::Mac::ExtAddress>>(v16, (uint64_t)v18, v6, v7, v8))
    {
      unsigned __int8 v14 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v15[0]);
      ot::RouterTable::FindRouterById((ot::RouterTable *)(a1 + 30912), v14);
      if (v9)
      {
        ot::Neighbor::GetExtAddress(v9);
        if (ot::Equatable<ot::Mac::ExtAddress>::operator==(v10, v18))
        {
          ot::RouterTable::Release((ot::RouterTable *)(a1 + 30912), v14);
          IgnoreError();
          uint64_t v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
          if (!ot::Coap::CoapBase::SendEmptyAck(v11, v16, *(const ot::Ip6::MessageInfo **)&v15[1]))
          {
            uint64_t v12 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(*(ot::Ip6::MessageInfo **)&v15[1]);
            ot::Mle::Mle::Log(0, 0x11u, v12);
          }
        }
      }
    }
  }
}

uint64_t ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::MleRouter *this, ot::Mle::ConnectivityTlv *a2)
{
  if (*((char *)this + 35713) == -2)
  {
    unsigned __int16 NumChildren = ot::ChildTable::GetNumChildren((__int16 *)this + 604, 0);
    unsigned __int16 MaxChildrenAllowed = ot::ChildTable::GetMaxChildrenAllowed((ot::Mle::MleRouter *)((char *)this + 1208));
    if (MaxChildrenAllowed - NumChildren >= MaxChildrenAllowed / 3) {
      ot::Mle::ConnectivityTlv::SetParentPriority(a2, 0);
    }
    else {
      ot::Mle::ConnectivityTlv::SetParentPriority(a2, 255);
    }
  }
  else
  {
    ot::Mle::ConnectivityTlv::SetParentPriority(a2, *((unsigned char *)this + 35713));
  }
  ot::Mle::ConnectivityTlv::SetLinkQuality1((uint64_t)a2, 0);
  ot::Mle::ConnectivityTlv::SetLinkQuality2((uint64_t)a2, 0);
  ot::Mle::ConnectivityTlv::SetLinkQuality3((uint64_t)a2, 0);
  if (ot::Mle::Mle::IsChild(this))
  {
    unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn((ot::Mle::MleRouter *)((char *)this + 80));
    ot::Mle::ConnectivityTlv::IncrementLinkQuality(a2, LinkQualityIn);
  }
  unsigned __int8 v14 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  ot::RouterTable::begin(v14);
  uint64_t v13 = v3;
  uint64_t v12 = ot::RouterTable::end(v14);
  while (v13 != (ot::Neighbor *)v12)
  {
    int Rloc16 = (unsigned __int16)ot::Neighbor::GetRloc16(v13);
    if (Rloc16 != (unsigned __int16)ot::Mle::Mle::GetRloc16(this) && ot::Neighbor::IsStateValid(v13))
    {
      TwoWayunsigned __int8 LinkQuality = ot::Router::GetTwoWayLinkQuality(v13);
      ot::Mle::ConnectivityTlv::IncrementLinkQuality(a2, TwoWayLinkQuality);
    }
    uint64_t v13 = (ot::Neighbor *)((char *)v13 + 144);
  }
  char ActiveRouterCount = ot::RouterTable::GetActiveRouterCount((ot::Mle::MleRouter *)((char *)this + 30912));
  ot::Mle::ConnectivityTlv::SetActiveRouters((uint64_t)a2, ActiveRouterCount);
  unsigned __int8 PathCostToLeader = ot::RouterTable::GetPathCostToLeader((ot::Mle::MleRouter *)((char *)this + 30912));
  char v7 = ot::Min<unsigned char>(PathCostToLeader, 0x10u);
  ot::Mle::ConnectivityTlv::SetLeaderCost((uint64_t)a2, v7);
  RouterIdchar Sequence = ot::RouterTable::GetRouterIdSequence((ot::Mle::MleRouter *)((char *)this + 30912));
  ot::Mle::ConnectivityTlv::SetIdSequence((uint64_t)a2, RouterIdSequence);
  ot::Mle::ConnectivityTlv::SetSedBufferSize(a2, 0x500u);
  return ot::Mle::ConnectivityTlv::SetSedDatagramCount((uint64_t)a2, 1);
}

uint64_t ot::Mle::ConnectivityTlv::SetLinkQuality1(uint64_t this, char a2)
{
  *(unsigned char *)(this + 5) = a2;
  return this;
}

{
  return ot::Mle::ConnectivityTlv::SetLinkQuality1(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetLinkQuality2(uint64_t this, char a2)
{
  *(unsigned char *)(this + --*(unsigned char *)(this + 4) = a2;
  return this;
}

{
  return ot::Mle::ConnectivityTlv::SetLinkQuality2(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetLinkQuality3(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Tlv::SetType(this, 3) = a2;
  return this;
}

{
  return ot::Mle::ConnectivityTlv::SetLinkQuality3(this, a2);
}

uint64_t ot::Neighbor::GetLinkQualityIn(ot::Neighbor *this)
{
  LinkInfo = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(this);
  return ot::LinkQualityInfo::GetLinkQuality(LinkInfo);
}

{
  return ot::Neighbor::GetLinkQualityIn(this);
}

uint64_t ot::Mle::ConnectivityTlv::SetActiveRouters(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

{
  return ot::Mle::ConnectivityTlv::SetActiveRouters(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetLeaderCost(uint64_t this, char a2)
{
  *(unsigned char *)(this + 6) = a2;
  return this;
}

{
  return ot::Mle::ConnectivityTlv::SetLeaderCost(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetIdSequence(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::ThreadTlv::SetType(this, 7) = a2;
  return this;
}

{
  return ot::Mle::ConnectivityTlv::SetIdSequence(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetSedBufferSize(ot::Mle::ConnectivityTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)((char *)this + ot::Tlv::SetLength((uint64_t)this, 9) = result;
  return result;
}

{
  return ot::Mle::ConnectivityTlv::SetSedBufferSize(this, a2);
}

uint64_t ot::Mle::ConnectivityTlv::SetSedDatagramCount(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  return this;
}

{
  return ot::Mle::ConnectivityTlv::SetSedDatagramCount(this, a2);
}

uint64_t ot::Mle::MleRouter::NeighborHasComparableConnectivity(ot::Mle::MleRouter *this, const ot::Mle::RouteTlv *a2, unsigned __int8 a3)
{
  char v11 = 1;
  unsigned __int8 v10 = 0;
  unsigned __int8 v9 = 0;
  while (v10 <= 0x3Eu)
  {
    if (v10 != *((unsigned __int8 *)this + 35697) && v10 != a3)
    {
      RouterById = (ot::Neighbor *)ot::RouterTable::FindRouterById((ot::Mle::MleRouter *)((char *)this + 30912), v10);
      if (RouterById)
      {
        if (ot::Neighbor::IsStateValid(RouterById))
        {
          TwoWayunsigned __int8 LinkQuality = ot::Router::GetTwoWayLinkQuality(RouterById);
          if (TwoWayLinkQuality >= 2u)
          {
            if (!ot::Mle::RouteTlv::IsRouterIdSet(a2, v10))
            {
              char v11 = 0;
              return v11 & 1;
            }
            unsigned __int8 LinkQualityIn = ot::Mle::RouteTlv::GetLinkQualityIn(a2, v9);
            unsigned __int8 LinkQualityOut = ot::Mle::RouteTlv::GetLinkQualityOut(a2, v9);
            if (ot::Min<ot::LinkQuality>(LinkQualityIn, LinkQualityOut) < (int)TwoWayLinkQuality)
            {
              char v11 = 0;
              return v11 & 1;
            }
          }
        }
      }
    }
    v9 += ot::Mle::RouteTlv::IsRouterIdSet(a2, v10++);
  }
  return v11 & 1;
}

uint64_t ot::Min<ot::LinkQuality>(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 >= (int)a2) {
    return a2;
  }
  else {
    return a1;
  }
}

{
  return ot::Min<ot::LinkQuality>(a1, a2);
}

uint64_t ot::Mle::RouteTlv::GetLinkQualityOut(ot::Mle::RouteTlv *this, unsigned __int8 a2)
{
  return (*((unsigned char *)this + a2 + 11) & 0xC0) >> 6;
}

{
  return ot::Mle::RouteTlv::GetLinkQualityOut(this, a2);
}

BOOL ot::Mle::MleRouter::HasChildrenInStateAnyExceptInvalid(ot::Mle::MleRouter *this)
{
  return ot::ChildTable::HasChildren((ot::Mle::MleRouter *)((char *)this + 1208), 5);
}

uint64_t ot::Mle::MleRouter::SetAssignParentPriority(ot::Mle::MleRouter *this, char a2)
{
  unsigned int v3 = 0;
  if (a2 <= 1 && a2 >= -2) {
    *((unsigned char *)this + 3571ot::Tlv::SetType(this, 3) = a2;
  }
  else {
    return 7;
  }
  return v3;
}

uint64_t ot::Mle::MleRouter::GetMaxChildTimeout(ot::Mle::MleRouter *this, unsigned int *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  unsigned int v14 = 23;
  *a2 = 0;
  if (ot::Mle::Mle::IsRouterOrLeader(this))
  {
    int v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v12 = ot::ChildTable::Iterate(v2, 0);
    uint64_t v13 = (ot::ChildTable::IteratorBuilder *)&v12;
    v11[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v12);
    v11[1] = v3;
    v10[0] = ot::ChildTable::IteratorBuilder::end(v13);
    v10[1] = v4;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v11, v10))
    {
      unsigned __int8 v9 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v11);
      if (!ot::Neighbor::IsFullThreadDevice(v9))
      {
        unsigned int Timeout = ot::Child::GetTimeout(v9);
        if (Timeout > *v15)
        {
          unsigned int v6 = ot::Child::GetTimeout(v9);
          unsigned int *v15 = v6;
        }
        unsigned int v14 = 0;
      }
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v11);
    }
  }
  else
  {
    return 13;
  }
  return v14;
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4608);
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetLength(a1);
}

BOOL ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsInArrayBuffer(unint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1 <= a2) {
    return a2 < ot::GetArrayEnd<ot::Router,(unsigned short)32>(a1);
  }
  return v3;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsInArrayBuffer(a1, a2);
}

uint64_t ot::GetArrayEnd<ot::Router,(unsigned short)32>(uint64_t a1)
{
  return a1 + 4608;
}

{
  return ot::GetArrayEnd<ot::Router,(unsigned short)32>(a1);
}

BOOL ot::Neighbor::IsThreadVersion1p2OrHigher(ot::Neighbor *this)
{
  BOOL v2 = 0;
  if ((*((unsigned char *)this + 30) & 0xF) != 0) {
    return *((unsigned __int16 *)this + 18) >= 3u;
  }
  return v2;
}

{
  return ot::Neighbor::IsThreadVersion1p2OrHigher(this);
}

uint64_t ot::BitVector<(unsigned short)15>::HasAny(unsigned char *a1)
{
  char v3 = 0;
  for (unsigned __int8 i = a1; i != a1 + 2; ++i)
  {
    if (*i)
    {
      char v3 = 1;
      return v3 & 1;
    }
  }
  return v3 & 1;
}

{
  return ot::BitVector<(unsigned short)15>::HasAny(a1);
}

uint64_t otHistoryTrackerInitIterator(uint64_t a1)
{
  uint64_t v1 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a1);
  return ot::Utils::HistoryTracker::Iterator::Init(v1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otHistoryTrackerIterator>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t ot::Utils::HistoryTracker::Iterator::Init(ot::Utils::HistoryTracker::Iterator *this)
{
  return ot::Utils::HistoryTracker::Iterator::SetInitTime(this);
}

{
  return ot::Utils::HistoryTracker::Iterator::Init(this);
}

uint64_t otHistoryTrackerIterateNetInfoHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateNetInfoHistory", "history_tracker_api.cpp", 52, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateNetInfoHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateNetInfoHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::Iterate((uint64_t)this + 4, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateNetInfoHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateUnicastAddressHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateUnicastAddressHistory", "history_tracker_api.cpp", 62, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateUnicastAddressHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateUnicastAddressHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::Iterate((uint64_t)this + 520, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateUnicastAddressHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateMulticastAddressHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateMulticastAddressHistory", "history_tracker_api.cpp", 73, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateMulticastAddressHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateMulticastAddressHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::Iterate((uint64_t)this + 1164, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateMulticastAddressHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateRxHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateRxHistory", "history_tracker_api.cpp", 83, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateRxHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateRxHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::Iterate((uint64_t)this + 1728, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateRxHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateTxHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateTxHistory", "history_tracker_api.cpp", 92, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateTxHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateTxHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::Iterate((uint64_t)this + 3332, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateTxHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateNeighborHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateNeighborHistory", "history_tracker_api.cpp", 101, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateNeighborHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateNeighborHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::Iterate((uint64_t)this + 4936, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateNeighborHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateRouterHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateRouterHistory", "history_tracker_api.cpp", 110, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateRouterHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateRouterHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::Iterate((uint64_t)this + 5964, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateRouterHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateOnMeshPrefixHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateOnMeshPrefixHistory", "history_tracker_api.cpp", 119, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateOnMeshPrefixHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateOnMeshPrefixHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::Iterate((uint64_t)this + 7760, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateOnMeshPrefixHistory(this, a2, a3);
}

uint64_t otHistoryTrackerIterateExternalRouteHistory(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    __assert_rtn("otHistoryTrackerIterateExternalRouteHistory", "history_tracker_api.cpp", 130, "(aEntryAge) != nullptr");
  }
  uint64_t v3 = ot::AsCoreType<otInstance>(a1);
  unsigned int v6 = (ot::Utils::HistoryTracker *)ot::Instance::Get<ot::Utils::HistoryTracker>(v3);
  uint64_t v4 = (ot::Utils::HistoryTracker::Iterator *)ot::AsCoreType<otHistoryTrackerIterator>(a2);
  return ot::Utils::HistoryTracker::IterateExternalRouteHistory(v6, v4, a3);
}

uint64_t ot::Utils::HistoryTracker::IterateExternalRouteHistory(ot::Utils::HistoryTracker *this, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::Iterate((uint64_t)this + 8788, a2, a3);
}

{
  return ot::Utils::HistoryTracker::IterateExternalRouteHistory(this, a2, a3);
}

ot::StringWriter *otHistoryTrackerEntryAgeToString(unsigned int a1, char *a2, unsigned __int16 a3)
{
  return ot::Utils::HistoryTracker::EntryAgeToString((ot::Utils::HistoryTracker *)a1, a2, (char *)a3);
}

uint64_t ot::Utils::HistoryTracker::Iterator::ResetEntryNumber(uint64_t this)
{
  *(_WORD *)(this + --*(unsigned char *)(this + 4) = 0;
  return this;
}

{
  return ot::Utils::HistoryTracker::Iterator::ResetEntryNumber(this);
}

uint64_t ot::Utils::HistoryTracker::Iterator::SetInitTime(ot::Utils::HistoryTracker::Iterator *this)
{
  uint64_t v4 = this;
  int Now = ot::TimerMilli::GetNow(this);
  uint64_t result = ot::Time::GetValue((ot::Time *)&Now);
  *(_DWORD *)this = result;
  return result;
}

{
  return ot::Utils::HistoryTracker::Iterator::SetInitTime(this);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x20u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 132 + 12 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNetworkInfo,(unsigned short)32>::Iterate(a1, a2, a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x14u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 84 + 28 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerUnicastAddressInfo,(unsigned short)20>::Iterate(a1, a2, a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x14u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 84 + 24 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMulticastAddressInfo,(unsigned short)20>::Iterate(a1, a2, a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x20u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 132 + 46 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerMessageInfo,(unsigned short)32>::Iterate(a1, a2, a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x40u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 260 + 12 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerNeighborInfo,(unsigned short)64>::Iterate(a1, a2, a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x100u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 1028 + 3 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerRouterInfo,(unsigned short)256>::Iterate(a1, a2, a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x20u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 132 + 28 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerOnMeshPrefixInfo,(unsigned short)32>::Iterate(a1, a2, a3);
}

uint64_t ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::Iterate(uint64_t a1, ot::Utils::HistoryTracker::Iterator *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned __int16 v6 = 0;
  if (ot::Utils::HistoryTracker::List::Iterate((ot::Utils::HistoryTracker::List *)a1, 0x20u, (const ot::Utils::HistoryTracker::Timestamp *)(a1 + 4), a2, &v6, a3))return 0; {
  else
  }
    return a1 + 132 + 28 * v6;
}

{
  return ot::Utils::HistoryTracker::EntryList<otHistoryTrackerExternalRouteInfo,(unsigned short)32>::Iterate(a1, a2, a3);
}

BOOL ot::Mle::DeviceMode::Get(ot::Mle::DeviceMode *a1, unsigned char *a2)
{
  *a2 = *a2 & 0xFE | ot::Mle::DeviceMode::IsRxOnWhenIdle(a1);
  *a2 = *a2 & 0xFD | (2 * ot::Mle::DeviceMode::IsFullThreadDevice(a1));
  BOOL result = ot::Mle::DeviceMode::GetNetworkDataType(a1);
  *a2 = *a2 & 0xFB | (4 * !result);
  return result;
}

unsigned char *ot::Mle::DeviceMode::Set(unsigned char *result, unsigned char *a2)
{
  *BOOL result = 4;
  if (*a2) {
    char v2 = 8;
  }
  else {
    char v2 = 0;
  }
  *result |= v2;
  if ((*a2 & 2) != 0) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *result |= v3;
  *result |= (*a2 & 4) != 0;
  return result;
}

ot::StringWriter *ot::Mle::DeviceMode::ToString@<X0>(ot::Mle::DeviceMode *this@<X0>, ot::StringWriter *a2@<X8>)
{
  ot::String<(unsigned short)45>::String((uint64_t)a2);
  BOOL IsRxOnWhenIdle = ot::Mle::DeviceMode::IsRxOnWhenIdle(this);
  uint64_t v8 = ot::ToYesNo((ot *)IsRxOnWhenIdle);
  BOOL IsFullThreadDevice = ot::Mle::DeviceMode::IsFullThreadDevice(this);
  uint64_t v9 = ot::ToYesNo((ot *)IsFullThreadDevice);
  NetworkDataint Type = ot::Mle::DeviceMode::GetNetworkDataType(this);
  uint64_t v5 = ot::ToYesNo((ot *)!NetworkDataType);
  return ot::StringWriter::Append(a2, "rx-on:%s ftd:%s full-net:%s", v8, v9, v5);
}

ot::Mle::DeviceProperties *ot::Mle::DeviceProperties::DeviceProperties(ot::Mle::DeviceProperties *this)
{
  ot::Clearable<ot::Mle::DeviceProperties>::Clear(this);
  BOOL result = this;
  *(_DWORD *)this = 1;
  *((unsigned char *)this + 5) = 0;
  return result;
}

{
  ot::Mle::DeviceProperties::DeviceProperties(this);
  return this;
}

void *ot::Clearable<ot::Mle::DeviceProperties>::Clear(void *result)
{
  *BOOL result = 0;
  return result;
}

{
  return ot::Clearable<ot::Mle::DeviceProperties>::Clear(result);
}

uint64_t ot::Mle::DeviceProperties::ClampWeightAdjustment(ot::Mle::DeviceProperties *this)
{
  uint64_t result = ot::Clamp<signed char>(*((unsigned char *)this + 5), -16, 16);
  *((unsigned char *)this + 5) = result;
  return result;
}

uint64_t ot::Mle::DeviceProperties::CalculateLeaderWeight(ot::Mle::DeviceProperties *this)
{
  char v5 = 64;
  unsigned __int8 v4 = ot::MapEnum<otPowerSupply>(*(unsigned int *)this);
  if (*((unsigned char *)this + 4))
  {
    if ((*((unsigned char *)this + 4) & 2) != 0) {
      char v1 = 8;
    }
    else {
      char v1 = 1;
    }
    char v5 = v1 + 64;
  }
  if (v4 < (int)(unsigned __int16)ot::GetArrayLength<signed char,(unsigned short)4>()) {
    v5 += ot::Mle::DeviceProperties::CalculateLeaderWeight(void)const::kPowerSupplyIncs[v4];
  }
  if ((*((unsigned char *)this + 4) & 4) != 0 && v4 && v4 != 3) {
    v5 -= 4;
  }
  return (v5 + *((unsigned char *)this + 5));
}

uint64_t ot::MapEnum<otPowerSupply>(uint64_t result)
{
  return result;
}

{
  return ot::MapEnum<otPowerSupply>(result);
}

uint64_t ot::GetArrayLength<signed char,(unsigned short)4>()
{
  return 4;
}

{
  return ot::GetArrayLength<signed char,(unsigned short)4>();
}

uint64_t ot::Mle::RouterIdSet::GetNumberOfAllocatedIds(ot::Mle::RouterIdSet *this)
{
  unsigned __int8 v4 = 0;
  char v3 = (char *)this;
  char v2 = (char *)this + 8;
  while (v3 != v2)
    v4 += ot::CountBitsInMask<unsigned char>(*v3++);
  return v4;
}

uint64_t ot::CountBitsInMask<unsigned char>(char a1)
{
  unsigned __int8 v2 = 0;
  while (a1)
  {
    a1 &= a1 - 1;
    ++v2;
  }
  return v2;
}

{
  return ot::CountBitsInMask<unsigned char>(a1);
}

const char *ot::Mle::RoleToString(unsigned __int8 a1)
{
  if (a1 >= (int)(unsigned __int16)ot::GetArrayLength<char const*,(unsigned short)5>()) {
    return "invalid";
  }
  else {
    return ot::Mle::RoleToString(ot::Mle::DeviceRole)::kRoleStrings[a1];
  }
}

ot::MlrManager *ot::MlrManager::MlrManager(ot::MlrManager *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(this);
  uint64_t result = this;
  *((_DWORD *)this + --*(unsigned char *)(this + 4) = 0;
  *((_WORD *)this + 1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 22) &= ~1u;
  *((unsigned char *)this + 22) &= ~2u;
  return result;
}

{
  ot::MlrManager::MlrManager(this, a2);
  return this;
}

void ot::MlrManager::HandleNotifierEvents(ot::MlrManager *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (ot::Events::Contains(&v4, 4096)) {
    ot::MlrManager::UpdateLocalSubscriptions(a1);
  }
  if (ot::Events::Contains(&v4, 4))
  {
    unsigned __int8 v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
    if (ot::Mle::Mle::IsChild(v2)) {
      ot::MlrManager::UpdateReregistrationDelay(a1, 1);
    }
  }
}

uint64_t ot::MlrManager::UpdateLocalSubscriptions(ot::MlrManager *this)
{
  char v11 = this;
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v9[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v1, 3);
  v9[1] = v2;
  unsigned __int8 v10 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v9;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin((ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v9, (uint64_t)v8);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v10, v7);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(v8, v7))
  {
    unsigned __int16 v6 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v8);
    if (!ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v6))
    {
      Address = (const ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(v6);
      if (ot::MlrManager::IsAddressMlrRegisteredByAnyChild(this, Address)) {
        ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v6, 2);
      }
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v8);
  }
  ot::MlrManager::CheckInvariants(this);
  return ot::MlrManager::ScheduleSend((uint64_t)this, 0);
}

void ot::MlrManager::UpdateReregistrationDelay(ot::MlrManager *this, char a2)
{
  uint64_t v23 = this;
  char v22 = a2 & 1;
  unsigned __int8 v21 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  BOOL v20 = 0;
  if (ot::Mle::Mle::IsFullThreadDevice(v21)
    || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v21), BOOL HasPrimary = 0, ot::Neighbor::IsThreadVersion1p1(Parent)))
  {
    char v3 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    BOOL HasPrimary = ot::BackboneRouter::Leader::HasPrimary(v3);
  }
  BOOL v20 = HasPrimary;
  if (HasPrimary)
  {
    uint64_t v4 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    ot::BackboneRouter::Leader::GetConfig(v4, (uint64_t)v17);
    IgnoreError();
    if (v22)
    {
      if (v18 <= 1u) {
        int Uint16InRange = 1;
      }
      else {
        int Uint16InRange = (unsigned __int16)ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, v18);
      }
      unsigned int Uint32InRange = Uint16InRange;
    }
    else
    {
      unsigned int v15 = ot::Max<unsigned int>(v19, 0x12Cu);
      unsigned int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange((ot::Random::NonCrypto *)((v15 >> 1) + 1), v15 - 9);
    }
    if (!*((_DWORD *)this + 4) || *((_DWORD *)this + 4) > Uint32InRange) {
      *((_DWORD *)this + --*(unsigned char *)(this + 4) = Uint32InRange;
    }
  }
  else
  {
    *((_DWORD *)this + --*(unsigned char *)(this + 4) = 0;
  }
  ot::MlrManager::UpdateTimeTickerRegistration(this);
  char v11 = v22;
  ot::ToUlong(*((unsigned int *)this + 4));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MlrManager", "MlrManager::UpdateReregistrationDelay: rereg=%d, needSendMlr=%d, ReregDelay=%lu", v5, v6, v7, v8, v9, v10, v11 & 1);
}

void ot::MlrManager::HandleBackboneRouterPrimaryUpdate(ot::MlrManager *a1, char a2)
{
  BOOL v2 = 1;
  if (a2 != 1) {
    BOOL v2 = a2 == 3;
  }
  ot::MlrManager::UpdateReregistrationDelay(a1, v2);
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(ot::Ip6::Netif::ExternalMulticastAddress *this)
{
  return *((unsigned __int8 *)this + 24);
}

{
  return ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(this);
}

uint64_t ot::MlrManager::IsAddressMlrRegisteredByAnyChild(ot::MlrManager *this, const ot::Ip6::Address *a2)
{
  return ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(this, a2, 0) & 1;
}

{
  return ot::MlrManager::IsAddressMlrRegisteredByAnyChild(this, a2);
}

uint64_t ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState(uint64_t result, char a2)
{
  *(unsigned char *)(result + 2--*(unsigned char *)(this + 4) = a2;
  return result;
}

{
  return ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState(result, a2);
}

uint64_t ot::MlrManager::ScheduleSend(uint64_t this, unsigned __int16 a2)
{
  BOOL v2 = (ot::MlrManager *)this;
  BOOL v3 = 1;
  if (*(unsigned char *)(this + 22)) {
    BOOL v3 = *(_WORD *)(this + 20) == 0;
  }
  if (!v3) {
    __assert_rtn("ScheduleSend", "mlr_manager.cpp", 194, "!mMlrPending || mSendDelay == 0");
  }
  if ((*(unsigned char *)(this + 22) & 1) == 0)
  {
    if (a2)
    {
      if (!*(_WORD *)(this + 20) || *(unsigned __int16 *)(this + 20) > (int)a2) {
        *(_WORD *)(this + 2ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a2;
      }
    }
    else
    {
      *(_WORD *)(this + 2ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = 0;
      ot::MlrManager::SendMulticastListenerRegistration((ot::MlrManager *)this);
    }
    return ot::MlrManager::UpdateTimeTickerRegistration(v2);
  }
  return this;
}

uint64_t ot::MlrManager::IsAddressMlrRegisteredByNetif (ot::MlrManager *this, const ot::Ip6::Address *a2)
{
  unsigned int v14 = this;
  uint64_t v13 = a2;
  char v12 = 0;
  if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(a2)) {
    __assert_rtn("IsAddressMlrRegisteredByNetif", "mlr_manager.cpp", 113, "aAddress.IsMulticastLargerThanRealmLocal()");
  }
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v10[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v2, 0);
  v10[1] = v3;
  char v11 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v10;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin((ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v10, (uint64_t)v9);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v11, v8);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(v9, v8))
  {
    uint64_t v7 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v9);
    Address = (const void *)ot::Ip6::Netif::MulticastAddress::GetAddress(v7);
    if (ot::Equatable<ot::Ip6::Address>::operator==(Address, v13)
      && ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v7) == 2)
    {
      char v12 = 1;
      return v12 & 1;
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v9);
  }
  return v12 & 1;
}

uint64_t ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::MlrManager *this, const ot::Ip6::Address *a2, const ot::Child *a3)
{
  uint64_t v16 = this;
  unsigned int v15 = a2;
  unsigned int v14 = a3;
  char v13 = 0;
  if (!ot::Ip6::Address::IsMulticastLargerThanRealmLocal(a2)) {
    __assert_rtn("IsAddressMlrRegisteredByAnyChildExcept", "mlr_manager.cpp", 135, "aAddress.IsMulticastLargerThanRealmLocal()");
  }
  uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v11 = ot::ChildTable::Iterate(v3, 0);
  char v12 = (ot::ChildTable::IteratorBuilder *)&v11;
  v10[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v11);
  v10[1] = v4;
  v9[0] = ot::ChildTable::IteratorBuilder::end(v12);
  v9[1] = v5;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v10, v9))
  {
    uint64_t v8 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v10);
    if (v8 != v14 && (ot::Child::HasMlrRegisteredAddress(v8, v15) & 1) != 0)
    {
      char v13 = 1;
      return v13 & 1;
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v10);
  }
  return v13 & 1;
}

uint64_t ot::MlrManager::UpdateProxiedSubscriptions(ot::MlrManager *this, ot::Child *a2, const ot::Ip6::Address *a3, unsigned __int16 a4)
{
  uint64_t v28 = this;
  uint64_t v27 = a2;
  uint64_t v26 = a3;
  unsigned __int16 v25 = a4;
  if (ot::Neighbor::IsStateValid(a2))
  {
    v23[0] = ot::Child::IterateIp6Addresses((uint64_t)v27, 3);
    v23[1] = v11;
    uint64_t v24 = (ot::Child::AddressIteratorBuilder *)v23;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v23, (uint64_t)v22);
    ot::Child::AddressIteratorBuilder::end(v24, (uint64_t)v21);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v22, (uint64_t)v21))
    {
      BOOL v20 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v22);
      char v19 = 0;
      for (unint64_t i = 0; i < v25; ++i)
      {
        if (ot::Equatable<ot::Ip6::Address>::operator==((char *)v26 + 16 * i, v20))
        {
          char v19 = 1;
          break;
        }
      }
      char IsAddressMlrRegisteredByNetif = 1;
      if ((v19 & 1) == 0) {
        char IsAddressMlrRegisteredByNetif = ot::MlrManager::IsAddressMlrRegisteredByNetif (this, v20);
      }
      char IsAddressMlrRegisteredByAnyChildExcept = 1;
      if ((IsAddressMlrRegisteredByNetif & 1) == 0) {
        char IsAddressMlrRegisteredByAnyChildExcept = ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(this, v20, v27);
      }
      if (IsAddressMlrRegisteredByAnyChildExcept) {
        char v12 = 2;
      }
      else {
        char v12 = 0;
      }
      ot::Child::SetAddressMlrState((uint64_t)v27, (unint64_t)v20, v12);
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v22);
    }
  }
  ot::MlrManager::LogMulticastAddresses(this, v4, v5, v6, v7, v8, v9, v10);
  ot::MlrManager::CheckInvariants(this);
  uint64_t result = ot::Child::HasAnyMlrToRegisterAddress(v27);
  if (result)
  {
    unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, 5u);
    return ot::MlrManager::ScheduleSend((uint64_t)this, Uint16InRange);
  }
  return result;
}

BOOL ot::MlrManager::LogMulticastAddresses(ot::MlrManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v47 = this;
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MlrManager", "-------- Multicast Addresses --------", a3, a4, a5, a6, a7, a8, v28);
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v45[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v8, 0);
  v45[1] = v9;
  int v46 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v45;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin((ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v45, (uint64_t)v44);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v46, v43);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(v44, v43))
  {
    uint64_t v42 = (ot::Ip6::Netif::ExternalMulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v44);
    Address = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(v42);
    ot::Ip6::Address::ToString(Address, (ot::StringWriter *)v49);
    char v30 = ot::String<(unsigned short)40>::AsCString((uint64_t)v49);
    ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v42);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MlrManager", "%-32s%c", v11, v12, v13, v14, v15, v16, v30);
    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v44);
  }
  uint64_t v17 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v40 = ot::ChildTable::Iterate(v17, 0);
  char v41 = (ot::ChildTable::IteratorBuilder *)&v40;
  v39[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v40);
  v39[1] = v18;
  v38[0] = ot::ChildTable::IteratorBuilder::end(v41);
  v38[1] = v19;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v39, v38);
    if (!result) {
      break;
    }
    uint64_t v37 = (ot::Neighbor *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v39);
    v35[0] = ot::Child::IterateIp6Addresses((uint64_t)v37, 3);
    v35[1] = v21;
    uint64_t v36 = (ot::Child::AddressIteratorBuilder *)v35;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v35, (uint64_t)v34);
    ot::Child::AddressIteratorBuilder::end(v36, (uint64_t)v33);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v34, (uint64_t)v33))
    {
      unsigned __int8 v32 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v34);
      ot::Ip6::Address::ToString(v32, (ot::StringWriter *)v48);
      char v29 = ot::String<(unsigned short)40>::AsCString((uint64_t)v48);
      ot::Child::GetAddressMlrState(v37, v32);
      ot::Neighbor::GetRloc16(v37);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"MlrManager", "%-32s%c %04x", v22, v23, v24, v25, v26, v27, v29);
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v34);
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v39);
  }
  return result;
}

uint64_t ot::Child::HasAnyMlrToRegisterAddress(ot::Child *this)
{
  return ot::BitVector<(unsigned short)15>::HasAny((unsigned char *)this + 444) & 1;
}

{
  return ot::Child::HasAnyMlrToRegisterAddress(this);
}

void ot::MlrManager::SendMulticastListenerRegistration(ot::MlrManager *this)
{
  unsigned int v56 = this;
  int v55 = 0;
  char v54 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int8 v53 = 0;
  if (*((unsigned char *)this + 22))
  {
    int v55 = 5;
  }
  else if (ot::Mle::Mle::IsAttached(v54))
  {
    if (ot::Mle::Mle::IsFullThreadDevice(v54)
      || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v54), ot::Neighbor::IsThreadVersion1p1(Parent)))
    {
      uint64_t v9 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
      if (ot::BackboneRouter::Leader::HasPrimary(v9))
      {
        char v36 = *((unsigned char *)this + 22) & 1;
        ot::Mle::Mle::IsAttached(v54);
        ot::Mle::Mle::IsFullThreadDevice(v54);
        uint64_t v10 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
        ot::BackboneRouter::Leader::HasPrimary(v10);
        otLogDebgPlat("MlrManager::SendMulticastListenerRegistration mlrPending:%d isAttached:%d isFTD:%d hasPrimary:%d", v11, v12, v13, v14, v15, v16, v17, v36 & 1);
        uint64_t v18 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
        v51[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v18, 3);
        v51[1] = v19;
        char v52 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v51;
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin((ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v51, (uint64_t)v50);
        ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v52, v49);
        while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(v50, v49))
        {
          int v48 = (ot::Ip6::Netif::ExternalMulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v50);
          if (v53 >= 0xFu) {
            break;
          }
          Address = (ot::Ip6::Address *)ot::Ip6::Netif::MulticastAddress::GetAddress(v48);
          ot::Ip6::Address::ToString(Address, (ot::StringWriter *)v57);
          char v35 = ot::String<(unsigned short)40>::AsCString((uint64_t)v57);
          ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v48);
          otLogInfoPlat("MlrManager::SendMulticastListenerRegistration addr:%s state:%d", v21, v22, v23, v24, v25, v26, v27, v35);
          if (!ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v48))
          {
            char v28 = (__n128 *)ot::Ip6::Netif::MulticastAddress::GetAddress(v48);
            ot::MlrManager::AppendToUniqueAddressList((uint64_t)this, (uint64_t)v58, &v53, v28);
            ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v48, 1);
          }
          ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v50);
        }
        char v29 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
        char v46 = ot::ChildTable::Iterate(v29, 0);
        int v47 = (ot::ChildTable::IteratorBuilder *)&v46;
        v45[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v46);
        v45[1] = v30;
        v44[0] = ot::ChildTable::IteratorBuilder::end(v47);
        v44[1] = v31;
        while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v45, v44))
        {
          unsigned __int8 v43 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v45);
          if (v53 >= 0xFu) {
            break;
          }
          if (ot::Child::HasAnyMlrToRegisterAddress(v43))
          {
            v41[0] = ot::Child::IterateIp6Addresses((uint64_t)v43, 3);
            v41[1] = v32;
            uint64_t v42 = (ot::Child::AddressIteratorBuilder *)v41;
            ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v41, (uint64_t)v40);
            ot::Child::AddressIteratorBuilder::end(v42, (uint64_t)v39);
            while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v40, (uint64_t)v39))
            {
              uint64_t v38 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v40);
              if (v53 >= 0xFu) {
                break;
              }
              if (!ot::Child::GetAddressMlrState(v43, v38))
              {
                ot::MlrManager::AppendToUniqueAddressList((uint64_t)this, (uint64_t)v58, &v53, (__n128 *)v38);
                ot::Child::SetAddressMlrState((uint64_t)v43, (unint64_t)v38, 1);
              }
              ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v40);
            }
          }
          ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v45);
        }
        if (v53)
        {
          int v55 = ot::MlrManager::SendMulticastListenerRegistrationMessage(this, v58, v53, 0, (uint64_t)ot::MlrManager::HandleMulticastListenerRegistrationResponse, (uint64_t)this);
          if (!v55)
          {
            *((unsigned char *)this + 2ot::Tlv::SetType(this, 2) = *((unsigned char *)this + 22) & 0xFE | 1;
            unsigned __int8 v33 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
            if (!ot::Mle::Mle::IsRxOnWhenIdle(v33))
            {
              int v34 = (ot::DataPollSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DataPollSender>(this);
              ot::DataPollSender::SendFastPolls(v34, 0);
            }
          }
        }
        else
        {
          int v55 = 23;
        }
      }
      else
      {
        int v55 = 13;
      }
    }
    else
    {
      int v55 = 13;
    }
  }
  else
  {
    int v55 = 13;
  }
  if (v55)
  {
    ot::MlrManager::SetMulticastAddressMlrState(this, 1, 0);
    if (v55 == 3) {
      ot::MlrManager::ScheduleSend(this, 1u);
    }
  }
  ot::MlrManager::LogMulticastAddresses(this, v1, v2, v3, v4, v5, v6, v7);
  ot::MlrManager::CheckInvariants(this);
}

uint64_t ot::MlrManager::UpdateTimeTickerRegistration(ot::MlrManager *this)
{
  if (*((_WORD *)this + 10) || *((_DWORD *)this + 4))
  {
    uint64_t v3 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::RegisterReceiver(v3, 5);
  }
  else
  {
    uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
    return ot::TimeTicker::UnregisterReceiver(v1, 5);
  }
}

__n128 ot::MlrManager::AppendToUniqueAddressList(uint64_t a1, uint64_t a2, unsigned char *a3, __n128 *a4)
{
  for (unsigned __int8 i = 0; i < (int)*a3; ++i)
  {
    if (ot::Equatable<ot::Ip6::Address>::operator==((const void *)(a2 + 16 * i), a4)) {
      return result;
    }
  }
  uint64_t v5 = (*a3)++;
  __n128 result = *a4;
  *(__n128 *)(a2 + 16 * v5) = *a4;
  return result;
}

uint64_t ot::MlrManager::SendMulticastListenerRegistrationMessage(ot::InstanceLocator *a1, char *a2, unsigned __int8 a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  int v50 = a1;
  int v49 = a2;
  unsigned __int8 v48 = a3;
  int v47 = a4;
  uint64_t v46 = a5;
  uint64_t v45 = a6;
  unsigned int appended = 0;
  unsigned __int8 v43 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  uint64_t v42 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v41, Instance);
  uint64_t v7 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  if (!ot::BackboneRouter::Leader::HasPrimary(v7))
  {
    unsigned int appended = 13;
    goto LABEL_18;
  }
  uint64_t v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v42 = ot::Coap::CoapBase::NewConfirmablePostMessage(v8, 0x26u);
  if (!v42)
  {
    unsigned int appended = 3;
    goto LABEL_18;
  }
  ot::Ip6AddressesTlv::Init((ot::Ip6AddressesTlv *)v40);
  ot::Tlv::SetLength((uint64_t)v40, 16 * v48);
  unsigned int appended = ot::Message::Append<ot::Ip6AddressesTlv>(v42, v40);
  if (appended) {
    goto LABEL_18;
  }
  unsigned int appended = ot::Message::AppendBytes(v42, v49, 16 * v48);
  if (appended) {
    goto LABEL_18;
  }
  uint64_t v9 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  if (ot::MeshCoP::Commissioner::IsActive(v9))
  {
    uint64_t v37 = v42;
    uint64_t v10 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
    unsigned __int16 SessionId = ot::MeshCoP::Commissioner::GetSessionId(v10);
    unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(v37, SessionId);
    if (appended) {
      goto LABEL_18;
    }
  }
  if (v47)
  {
    unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)11,unsigned int>>(v42, *v47);
    if (appended) {
      goto LABEL_18;
    }
  }
  if (ot::Mle::Mle::IsFullThreadDevice(v43)
    || (Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v43), !ot::Neighbor::IsThreadVersion1p1(Parent)))
  {
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v41);
    ot::Mle::Mle::GetMeshLocalPrefix(v43);
    unsigned __int8 v33 = v15;
    uint64_t v16 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
    unsigned __int16 Server16 = ot::BackboneRouter::Leader::GetServer16(v16);
    ot::Ip6::Address::SetToRoutingLocator(PeerAddr, v33, Server16);
LABEL_17:
    ot::Tmf::MessageInfo::SetSockAddrToRloc((ot::Tmf::MessageInfo *)v41);
    uint64_t v18 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    unsigned int appended = ot::Coap::CoapBase::SendMessage(v18, v42, (ot::Ip6::MessageInfo *)v41, v46, v45);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MlrManager", "Sent MLR.req: addressNum=%d", v19, v20, v21, v22, v23, v24, v48);
    goto LABEL_18;
  }
  unsigned __int8 v39 = 0;
  uint64_t v13 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  unsigned int appended = ot::BackboneRouter::Leader::GetServiceId(v13, &v39);
  if (!appended)
  {
    char v36 = v43;
    unsigned __int8 v35 = v39;
    uint64_t v14 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr((ot::Ip6::MessageInfo *)v41);
    unsigned int appended = ot::Mle::Mle::GetServiceAloc(v36, v35, v14);
    if (!appended) {
      goto LABEL_17;
    }
  }
LABEL_18:
  char v25 = ot::ErrorToString(appended);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MlrManager", "SendMulticastListenerRegistrationMessage(): %s", v26, v27, v28, v29, v30, v31, v25);
  if (appended && v42) {
    ot::Message::Free(v42);
  }
  return appended;
}

uint64_t ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::MlrManager *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v11 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::MlrManager::HandleMulticastListenerRegistrationResponse(a1, v11, v5, a4, v6, v7, v8, v9);
}

BOOL ot::MlrManager::SetMulticastAddressMlrState(ot::InstanceLocator *a1, char a2, char a3)
{
  uint64_t v30 = a1;
  char v29 = a2;
  char v28 = a3;
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(a1);
  v26[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v3, 3);
  v26[1] = v4;
  uint64_t v27 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v26;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin((ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v26, (uint64_t)v25);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v27, v24);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(v25, v24))
  {
    uint64_t v23 = (ot::Ip6::Netif::ExternalMulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v25);
    Mlrint State = ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v23);
    if (v29 == MlrState) {
      ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v23, v28);
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v25);
  }
  uint64_t v6 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
  char v21 = ot::ChildTable::Iterate(v6, 0);
  uint64_t v22 = (ot::ChildTable::IteratorBuilder *)&v21;
  v20[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v21);
  v20[1] = v7;
  v19[0] = ot::ChildTable::IteratorBuilder::end(v22);
  v19[1] = v8;
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v20, v19);
    if (!result) {
      break;
    }
    uint64_t v18 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v20);
    v16[0] = ot::Child::IterateIp6Addresses((uint64_t)v18, 3);
    v16[1] = v10;
    uint64_t v17 = (ot::Child::AddressIteratorBuilder *)v16;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v16, (uint64_t)v15);
    ot::Child::AddressIteratorBuilder::end(v17, (uint64_t)v14);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v15, (uint64_t)v14))
    {
      uint64_t v13 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v15);
      AddressMlrint State = ot::Child::GetAddressMlrState(v18, v13);
      if (v29 == AddressMlrState) {
        ot::Child::SetAddressMlrState((uint64_t)v18, (unint64_t)v13, v28);
      }
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v15);
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v20);
  }
  return result;
}

uint64_t ot::MlrManager::RegisterMulticastListeners(ot::InstanceLocator *a1, char *a2, unsigned __int8 a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    if (a3 && a3 <= 0xFu)
    {
      if (!a6 || a5)
      {
        uint64_t v6 = (ot::MeshCoP::Commissioner *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
        if (ot::MeshCoP::Commissioner::IsActive(v6))
        {
          if ((*((unsigned char *)a1 + 22) & 2) != 0)
          {
            return 5;
          }
          else
          {
            unsigned int v9 = ot::MlrManager::SendMulticastListenerRegistrationMessage(a1, a2, a3, a4, (uint64_t)ot::MlrManager::HandleRegisterMulticastListenersResponse, (uint64_t)a1);
            if (!v9)
            {
              *((unsigned char *)a1 + 2ot::Tlv::SetType(this, 2) = *((unsigned char *)a1 + 22) & 0xFD | 2;
              ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Set(a1, a5, a6);
            }
          }
        }
        else
        {
          return 13;
        }
      }
      else
      {
        return 7;
      }
    }
    else
    {
      return 7;
    }
  }
  else
  {
    return 7;
  }
  return v9;
}

void *ot::MlrManager::HandleRegisterMulticastListenersResponse(long long *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v7 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::MlrManager::HandleRegisterMulticastListenersResponse(a1, v7, v5, a4);
}

{
  ot::Tlv *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  long long v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  long long *v17;
  unsigned char v18[240];

  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  uint64_t v10 = *a1;
  *((unsigned char *)a1 + 22) &= ~2u;
  ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Clear(a1);
  unsigned int v9 = v14;
  ot::AsCoapMessagePtr();
  uint64_t v12 = ot::MlrManager::ParseMulticastListenerRegistrationResponse(v9, v4, &v13, (uint64_t)v18, &v11, v5, v6, v7);
  return ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::InvokeIfSet<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>(&v10, &v12, &v13, (uint64_t)v18, &v11);
}

void *ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Set(result, a2, a3);
}

void *ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Clear(void *result)
{
  *BOOL result = 0;
  return result;
}

{
  return ot::CallbackBase<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char)>::Clear(result);
}

uint64_t ot::MlrManager::ParseMulticastListenerRegistrationResponse(unsigned int a1, ot::Tlv *a2, unsigned char *a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  uint64_t v18 = a4;
  uint64_t v17 = a5;
  unsigned int v16 = 0;
  __int16 v15 = 0;
  unsigned __int16 v14 = 0;
  *a3 = 6;
  if (v21 || !v20)
  {
    unsigned int v16 = 6;
    goto LABEL_18;
  }
  if (ot::Coap::Message::GetCode(v20) != 68)
  {
    unsigned int v16 = 6;
    goto LABEL_18;
  }
  unsigned int v16 = ot::Tlv::Find<ot::ThreadStatusTlv>(v20, v19, v8, v9);
  if (!v16)
  {
    if (!ot::Tlv::FindTlvValueOffset(v20, (const ot::Message *)0xE, &v15, &v14, v10))
    {
      if (v14 % 0x10uLL)
      {
        unsigned int v16 = 6;
        goto LABEL_18;
      }
      if (v14 / 0x10uLL > 0xF)
      {
        unsigned int v16 = 6;
        goto LABEL_18;
      }
      for (unsigned __int16 i = 0; i < (int)v14; i += 16)
      {
        ot::Message::Read<ot::Ip6::Address>(v20, v15 + i, (char *)(v18 + 16 * *v17));
        IgnoreError();
        ++*v17;
      }
    }
    if (*v17 && !*v19) {
      unsigned int v16 = 6;
    }
  }
LABEL_18:
  ot::MlrManager::LogMlrResponse(v21, v16, *v19, v18, *v17, a6, a7, a8);
  if (v21) {
    return v21;
  }
  else {
    return v16;
  }
}

void *ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::InvokeIfSet<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>(void *result, unsigned int *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::Invoke<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>((uint64_t)result, a2, a3, a4, a5);
  }
  return result;
}

{
  return ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::InvokeIfSet<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>(result, a2, a3, a4, a5);
}

uint64_t ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::MlrManager *a1, ot::Tlv *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  unsigned int v18 = a4;
  char v17 = 0;
  int v16 = 0;
  unsigned __int8 v15 = 0;
  int v16 = ot::MlrManager::ParseMulticastListenerRegistrationResponse(a4, a2, &v17, (uint64_t)v22, &v15, a6, a7, a8);
  BOOL v11 = 0;
  if (!v16) {
    BOOL v11 = v17 == 0;
  }
  ot::MlrManager::FinishMulticastListenerRegistration(a1, v11, (const ot::Ip6::Address *)v22, v15);
  if (!v16 && !v17) {
    return ot::MlrManager::ScheduleSend(a1, 0);
  }
  unsigned int v9 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(a1);
  uint64_t result = ot::BackboneRouter::Leader::GetConfig(v9, (uint64_t)v13);
  if (!result)
  {
    if (v14 <= 1u) {
      unsigned __int16 Uint16InRange = 1;
    }
    else {
      unsigned __int16 Uint16InRange = ot::Random::NonCrypto::GetUint16InRange((ot::Random::NonCrypto *)1, v14);
    }
    return ot::MlrManager::ScheduleSend(a1, Uint16InRange);
  }
  return result;
}

void ot::MlrManager::FinishMulticastListenerRegistration(ot::MlrManager *this, char a2, const ot::Ip6::Address *a3, unsigned __int8 a4)
{
  uint64_t v46 = this;
  char v45 = a2 & 1;
  unsigned __int16 v44 = a3;
  unsigned __int8 v43 = a4;
  if ((*((unsigned char *)this + 22) & 1) == 0) {
    __assert_rtn("FinishMulticastListenerRegistration", "mlr_manager.cpp", 571, "mMlrPending");
  }
  *((unsigned char *)this + 22) &= ~1u;
  uint64_t v4 = ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  v41[0] = ot::Ip6::Netif::IterateExternalMulticastAddresses(v4, 3);
  v41[1] = v5;
  uint64_t v42 = (ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v41;
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::begin((ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *)v41, (uint64_t)v40);
  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder::end(v42, v39);
  while (ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator!=(v40, v39))
  {
    uint64_t v38 = (ot::Ip6::Netif::MulticastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator*((uint64_t)v40);
    if (ot::Ip6::Netif::ExternalMulticastAddress::GetMlrState(v38) == 1)
    {
      char v37 = 0;
      LOBYTE(v25) = 1;
      if ((v45 & 1) == 0)
      {
        uint64_t v24 = v44;
        unsigned int v23 = v43;
        Address = (const void *)ot::Ip6::Netif::MulticastAddress::GetAddress(v38);
        int v25 = ot::MlrManager::AddressListContains(v24, (const ot::Ip6::Address *)v23, Address, v7) ^ 1;
      }
      char v37 = v25 & 1;
      if (v25) {
        char v8 = 2;
      }
      else {
        char v8 = 0;
      }
      ot::Ip6::Netif::ExternalMulticastAddress::SetMlrState((uint64_t)v38, v8);
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::ExternalMulticastAddress,ot::Ip6::Netif::ExternalMulticastAddress::Iterator>::operator++(v40);
  }
  unsigned int v9 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v35 = ot::ChildTable::Iterate(v9, 0);
  char v36 = (ot::ChildTable::IteratorBuilder *)&v35;
  v34[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v35);
  v34[1] = v10;
  v33[0] = ot::ChildTable::IteratorBuilder::end(v36);
  v33[1] = v11;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v34, v33))
  {
    uint64_t v32 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v34);
    v30[0] = ot::Child::IterateIp6Addresses((uint64_t)v32, 3);
    v30[1] = v19;
    uint64_t v31 = (ot::Child::AddressIteratorBuilder *)v30;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v30, (uint64_t)v29);
    ot::Child::AddressIteratorBuilder::end(v31, (uint64_t)v28);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v29, (uint64_t)v28))
    {
      uint64_t v27 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v29);
      if (ot::Child::GetAddressMlrState(v32, v27) == 1)
      {
        LOBYTE(v2ot::Tlv::SetType(this, 2) = 1;
        if ((v45 & 1) == 0) {
          int v22 = ot::MlrManager::AddressListContains(v44, (const ot::Ip6::Address *)v43, v27, v20) ^ 1;
        }
        if (v22) {
          char v21 = 2;
        }
        else {
          char v21 = 0;
        }
        ot::Child::SetAddressMlrState((uint64_t)v32, (unint64_t)v27, v21);
      }
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v29);
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v34);
  }
  ot::MlrManager::LogMulticastAddresses(this, v12, v13, v14, v15, v16, v17, v18);
  ot::MlrManager::CheckInvariants(this);
}

void ot::MlrManager::LogMlrResponse(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v24 = a5;
  if (a1 || a2 || (_BYTE)a3)
  {
    char v22 = ot::ErrorToString(a1);
    ot::ErrorToString(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MlrManager", "Receive MLR.rsp: result=%s, error=%s, status=%d, failedAddressNum=%d", v8, v9, v10, v11, v12, v13, v22);
    for (unsigned __int8 i = 0; i < (int)v24; ++i)
    {
      ot::Ip6::Address::ToString((ot::Ip6::Address *)(a4 + 16 * i), (ot::StringWriter *)v27);
      char v14 = ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"MlrManager", "MA failed: %s", v15, v16, v17, v18, v19, v20, v14);
    }
  }
  else
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MlrManager", "Receive MLR.rsp OK", a3, a4, a5, a6, a7, a8, v21);
  }
}

uint64_t ot::MlrManager::AddressListContains(ot::MlrManager *this, const ot::Ip6::Address *a2, const void *a3, const ot::Ip6::Address *a4)
{
  unsigned __int8 v8 = a2;
  char v6 = 0;
  if ((_BYTE)a2)
  {
    for (unsigned __int8 i = 0; i < (int)v8; ++i)
    {
      if (ot::Equatable<ot::Ip6::Address>::operator==((char *)this + 16 * i, a3))
      {
        char v6 = 1;
        return v6 & 1;
      }
    }
  }
  else
  {
    char v6 = 1;
  }
  return v6 & 1;
}

uint64_t ot::MlrManager::HandleTimeTick(ot::MlrManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_WORD *)this + 10))
  {
    __int16 v8 = *((_WORD *)this + 10);
    *((_WORD *)this + 1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = v8 - 1;
    if (v8 == 1) {
      ot::MlrManager::SendMulticastListenerRegistration(this);
    }
  }
  if (*((_DWORD *)this + 4))
  {
    int v9 = *((_DWORD *)this + 4) - 1;
    *((_DWORD *)this + --*(unsigned char *)(this + 4) = v9;
    if (!v9) {
      ot::MlrManager::Reregister(this, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return ot::MlrManager::UpdateTimeTickerRegistration(this);
}

void ot::MlrManager::Reregister(ot::MlrManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MlrManager", "MLR Reregister!", a3, a4, a5, a6, a7, a8, v8);
  ot::MlrManager::SetMulticastAddressMlrState(this, 2, 0);
  ot::MlrManager::CheckInvariants(this);
  ot::MlrManager::ScheduleSend((uint64_t)this, 0);
  ot::MlrManager::UpdateReregistrationDelay(this, 0);
}

uint64_t ot::Max<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 >= a2) {
    return a1;
  }
  else {
    return a2;
  }
}

{
  return ot::Max<unsigned int>(a1, a2);
}

uint64_t ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::Invoke<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, void))a1)(*(void *)(a1 + 8), *a2, *a3, a4, *a5);
}

{
  return ot::Callback<void (*)(void *,otError,unsigned char,otIp6Address const*,unsigned char),(ot::CallbackContextPosition)0>::Invoke<otError&,unsigned char &,ot::Ip6::Address (&)[15],unsigned char &>(a1, a2, a3, a4, a5);
}

ot::NeighborTable *ot::NeighborTable::NeighborTable(ot::NeighborTable *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  uint64_t result = this;
  *(void *)this = 0;
  return result;
}

{
  ot::NeighborTable::NeighborTable(this, a2);
  return this;
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v6 = 0;
  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v5);
  if (ot::Neighbor::Matches(Parent, a2)) {
    return ot::Mle::Mle::GetParent(v5);
  }
  ParentCandidate = (ot::Neighbor *)ot::Mle::Mle::GetParentCandidate(v5);
  if (ot::Neighbor::Matches(ParentCandidate, a2)) {
    return ot::Mle::Mle::GetParentCandidate(v5);
  }
  return v6;
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *a1, __int16 a2, char a3)
{
  uint64_t v7 = a1;
  __int16 v6 = a2;
  v5[21] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindParent(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *a1, uint64_t a2, char a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindParent(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindParent(ot::NeighborTable *a1, ot::Mac::Address *a2, char a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindParent(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t ChildOrRouter = 0;
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::IsRouterOrLeader(v2)) {
    uint64_t ChildOrRouter = ot::NeighborTable::FindChildOrRouter(this, a2);
  }
  if (!ChildOrRouter) {
    return ot::NeighborTable::FindParent(this, a2);
  }
  return ChildOrRouter;
}

uint64_t ot::NeighborTable::FindChildOrRouter(ot::NeighborTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v2 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  ot::ChildTable::FindChild(v2, a2);
  uint64_t v8 = v3;
  if (!v3)
  {
    uint64_t v4 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    ot::RouterTable::FindRouter(v4, a2);
    return v5;
  }
  return v8;
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *a1, unsigned __int16 a2, char a3)
{
  int v9 = a1;
  unsigned __int16 v8 = a2;
  char v7 = a3;
  uint64_t v6 = 0;
  if (a2 != 0xFFFF && v8 != 65534)
  {
    ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, v8, v7);
    return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v5);
  }
  return v6;
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *a1, uint64_t a2, char a3)
{
  char v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

uint64_t ot::NeighborTable::FindNeighbor(ot::NeighborTable *a1, ot::Mac::Address *a2, char a3)
{
  char v7 = a1;
  uint64_t v6 = a2;
  v5[23] = a3;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v5, a2, a3);
  return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v5);
}

void ot::RouterTable::FindRouter(ot::RouterTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  ot::AsConst<ot::RouterTable>();
  ot::RouterTable::FindRouter(v2, a2);
  ot::AsNonConst<ot::Router>();
}

{
  ot::RouterTable::FindRouter(this, a2);
}

uint64_t ot::NeighborTable::FindNeighbor(ot::InstanceLocator *a1, ot::Ip6::Address *a2, char a3)
{
  char v22 = a1;
  char v21 = a2;
  char v20 = a3;
  uint64_t v19 = 0;
  ot::Mac::Address::Address((ot::Mac::Address *)v18);
  if (ot::Ip6::Address::IsLinkLocal(v21))
  {
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
    ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(Iid, (ot::Mac::Address *)v18);
  }
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsRoutingLocator(v4, v21))
  {
    uint64_t v5 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v21);
    __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v5);
    ot::Mac::Address::SetShort((uint64_t)v18, Locator);
  }
  if (ot::Mac::Address::IsNone((ot::Mac::Address *)v18))
  {
    char v7 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
    char v15 = ot::ChildTable::Iterate(v7, v20);
    uint64_t v16 = (ot::ChildTable::IteratorBuilder *)&v15;
    v14[0] = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v15);
    v14[1] = v8;
    v13[0] = ot::ChildTable::IteratorBuilder::end(v16);
    v13[1] = v9;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v14, v13))
    {
      uint64_t v12 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v14);
      if (ot::Child::HasIp6Address(v12, v21)) {
        return (uint64_t)v12;
      }
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v14);
    }
  }
  else
  {
    ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v17, (ot::Mac::Address *)v18, v20);
    return ot::NeighborTable::FindNeighbor(a1, (const ot::Neighbor::AddressMatcher *)v17);
  }
  return v19;
}

uint64_t ot::NeighborTable::FindRxOnlyNeighborRouter(ot::NeighborTable *this, const ot::Mac::Address *a2)
{
  uint64_t v7 = 0;
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::IsChild(v2))
  {
    uint64_t v3 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    ot::RouterTable::FindNeighbor(v3, a2);
    return v4;
  }
  return v7;
}

uint64_t ot::NeighborTable::GetNextNeighborInfo(ot::InstanceLocator *a1, __int16 *a2, ot::Neighbor::Info *a3)
{
  unsigned int v18 = 0;
  __int16 v15 = *a2;
  if (*a2 < 0)
  {
LABEL_8:
    for (__int16 i = -*a2; i <= 62; ++i)
    {
      uint64_t v4 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(a1);
      ot::RouterTable::FindRouterById(v4, i);
      uint64_t v13 = v5;
      if (v5 && ot::Neighbor::IsStateValid(v5))
      {
        ot::Neighbor::Info::SetFrom(a3, v13);
        *((unsigned char *)a3 + 54) &= ~8u;
        *a2 = -(__int16)(i + 1);
        return v18;
      }
    }
    *a2 = -i;
    unsigned int v18 = 23;
    if (!v15)
    {
      uint64_t v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
      if (ot::Mle::Mle::GetRole(v6) == 2)
      {
        uint64_t v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
        Parent = (ot::Neighbor *)ot::Mle::Mle::GetParent(v7);
        if (ot::Neighbor::IsStateValid(Parent))
        {
          uint64_t v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
          uint64_t v10 = (const ot::Neighbor *)ot::Mle::Mle::GetParent(v9);
          ot::Neighbor::Info::SetFrom(a3, v10);
          *((unsigned char *)a3 + 54) &= ~8u;
          return 0;
        }
      }
    }
  }
  else
  {
    for (unsigned __int16 j = *a2; ; ++j)
    {
      uint64_t v3 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
      ChildAtIndex = (ot::Neighbor *)ot::ChildTable::GetChildAtIndex(v3, j);
      if (!ChildAtIndex)
      {
        *a2 = 0;
        goto LABEL_8;
      }
      if (ot::Neighbor::IsStateValid(ChildAtIndex)) {
        break;
      }
    }
    ot::Neighbor::Info::SetFrom(a3, ChildAtIndex);
    *((unsigned char *)a3 + 5--*(unsigned char *)(this + 4) = *((unsigned char *)a3 + 54) & 0xF7 | 8;
    *a2 = j + 1;
  }
  return v18;
}

uint64_t ot::NeighborTable::Signal(ot::InstanceLocator *a1, unsigned __int8 a2, const ot::Neighbor *a3)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  if (a2 <= 2u)
  {
    uint64_t v4 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(a1);
    if (!ot::ChildTable::Contains(v4, a3)) {
      __assert_rtn("Signal", "neighbor_table.cpp", 346, "Get<ChildTable>().Contains(aNeighbor)");
    }
    ot::Child::Info::SetFrom((ot::Child::Info *)v14, a3);
  }
  else if (a2 == 4 || a2 == 3)
  {
    ot::Neighbor::Info::SetFrom((ot::Neighbor::Info *)v14, a3);
  }
  uint64_t v5 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(a1);
  uint64_t result = ot::Utils::HistoryTracker::RecordNeighborEvent(v5, a2, (uint64_t)&Instance);
  if (*(void *)a1) {
    uint64_t result = (*(uint64_t (**)(void, void **))a1)(a2, &Instance);
  }
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v8 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
      ot::Notifier::Signal(v8, 2048);
      uint64_t v9 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(a1);
      return ot::DuaManager::UpdateChildDomainUnicastAddress(v9, (uint64_t)a3, 2);
    }
  }
  else
  {
    uint64_t v7 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(a1);
    return ot::Notifier::Signal(v7, 1024);
  }
  return result;
}

uint64_t ot::NetworkData::NetworkData::CopyNetworkData(ot::InstanceLocator *a1, char a2, unsigned __int8 *a3, char *a4)
{
  uint64_t v13 = a1;
  char v12 = a2;
  uint64_t v11 = a3;
  uint64_t v10 = a4;
  unsigned int v9 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::NetworkData::MutableNetworkData::MutableNetworkData((ot::NetworkData::MutableNetworkData *)v8, Instance, v11, 0, *v10);
  unsigned int v9 = ot::NetworkData::NetworkData::CopyNetworkData((uint64_t)a1, v12, (ot::NetworkData::MutableNetworkData *)v8);
  if (!v9)
  {
    char Length = ot::NetworkData::NetworkData::GetLength((ot::NetworkData::NetworkData *)v8);
    char *v10 = Length;
  }
  return v9;
}

uint64_t ot::NetworkData::NetworkData::CopyNetworkData(uint64_t a1, char a2, ot::NetworkData::MutableNetworkData *a3)
{
  unsigned int v6 = 0;
  if (*(unsigned __int8 *)(a1 + 8) <= (int)ot::NetworkData::MutableNetworkData::GetSize(a3))
  {
    ot::NetworkData::MutableNetworkData::GetBytes(a3);
    memcpy(v3, *(const void **)a1, *(unsigned __int8 *)(a1 + 8));
    ot::NetworkData::MutableNetworkData::SetLength((uint64_t)a3, *(unsigned char *)(a1 + 8));
    ot::NetworkData::NetworkData::PrintServiceTLVInfo(a3);
    if (a2 == 1) {
      ot::NetworkData::MutableNetworkData::RemoveTemporaryData(a3);
    }
  }
  else
  {
    return 3;
  }
  return v6;
}

uint64_t ot::NetworkData::MutableNetworkData::GetSize(ot::NetworkData::MutableNetworkData *this)
{
  return *((unsigned __int8 *)this + 9);
}

{
  return ot::NetworkData::MutableNetworkData::GetSize(this);
}

void ot::NetworkData::MutableNetworkData::GetBytes(ot::NetworkData::MutableNetworkData *this)
{
  ot::AsConst<ot::NetworkData::MutableNetworkData>();
  ot::NetworkData::NetworkData::GetBytes(v1);
  ot::AsNonConst<unsigned char>();
}

{
  ot::NetworkData::MutableNetworkData::GetBytes(this);
}

uint64_t ot::NetworkData::MutableNetworkData::SetLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

{
  return ot::NetworkData::MutableNetworkData::SetLength(this, a2);
}

void ot::NetworkData::NetworkData::PrintServiceTLVInfo(ot::NetworkData::NetworkData *this)
{
  char v52 = this;
  unsigned __int8 v43 = this;
  unsigned __int8 v51 = 0;
  NextThreadService = 0;
  unsigned __int16 v44 = v49;
  ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>((uint64_t)v49, (uint64_t)&ot::NetworkData::Service::DnsSrpUnicast::kServiceData);
  uint64_t v1 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v43);
  NextThreadService = ot::NetworkData::NetworkData::FindNextThreadService(v1, NextThreadService, (uint64_t)v49, 0);
  if (NextThreadService)
  {
    int v48 = 0;
    if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v49) <= 3uLL)
    {
      char v41 = v49;
      *(void *)uint64_t v42 = ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v49);
      unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v49);
      encode_data_into_string(*(unsigned __int8 **)v42, Length, (char *)&v48, 4uLL, 0);
      ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v47, NextThreadService);
      uint64_t v46 = 0;
      while (1)
      {
        ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>((uint64_t)v47);
        uint64_t v46 = v3;
        if (!v3) {
          break;
        }
        ++v51;
        memset(__b, 0, sizeof(__b));
        char v40 = v45;
        ot::NetworkData::ServerTlv::GetServerData(v46, (uint64_t)v45);
        if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v40) >= 0x64uLL)
        {
          uint64_t v19 = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v45);
          ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"NetworkData", "%s:Error ServerDataLen:%d", v12, v13, v14, v15, v16, v17, (char)"PrintServiceTLVInfo");
        }
        else
        {
          uint64_t v30 = v45;
          *(void *)char v29 = ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v45);
          unsigned __int8 v4 = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v30);
          char v36 = __b;
          encode_data_into_string(*(unsigned __int8 **)v29, v4, __b, 0x64uLL, 0);
          unsigned int v31 = v51;
          int Type = ot::NetworkData::NetworkDataTlv::GetType(NextThreadService);
          unsigned int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(NextThreadService);
          ServiceDataunsigned __int8 Length = ot::NetworkData::ServiceTlv::GetServiceDataLength(NextThreadService);
          BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(v46);
          int v37 = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v30);
          int Server16 = ot::NetworkData::ServerTlv::GetServer16(v46);
          unsigned __int8 ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(NextThreadService);
          unsigned __int8 v39 = &v18;
          uint64_t v19 = v31;
          uint64_t v20 = Type;
          uint64_t v21 = EnterpriseNumber;
          char v22 = &v48;
          uint64_t v23 = ServiceDataLength;
          BOOL v24 = IsStable;
          int v25 = v36;
          uint64_t v26 = v37;
          uint64_t v27 = (unsigned __int16)Server16;
          uint64_t v28 = ServiceId;
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "%s: Entry:%d ServiceType:%d, EnterpriseNumber:%d, ServiceData:%s, ServiceDataLen:%d, Stable:%d, ServerData:%s, ServerDataLen:%d, Rloc16:0x%04x, Sid:%d", v6, v7, v8, v9, v10, v11, (char)"PrintServiceTLVInfo");
        }
      }
    }
  }
}

void ot::NetworkData::MutableNetworkData::RemoveTemporaryData(ot::NetworkData::MutableNetworkData *this)
{
  ot::NetworkData::MutableNetworkData::GetTlvsStart(this);
  uint64_t Next = v1;
  while (1)
  {
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
    if ((unint64_t)Next >= v2) {
      break;
    }
    int Type = ot::NetworkData::NetworkDataTlv::GetType(Next);
    if (Type == 1)
    {
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      uint64_t v8 = v3;
      ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(this, v3);
      if (ot::NetworkData::PrefixTlv::GetSubTlvsLength(v8)) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (Type == 5)
    {
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      uint64_t v7 = v4;
      ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(this, v4);
      if (ot::NetworkData::ServiceTlv::GetSubTlvsLength(v7)) {
        goto LABEL_13;
      }
LABEL_12:
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, Next);
    }
    else
    {
      if (!ot::NetworkData::NetworkDataTlv::IsStable(Next)) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
    }
  }
}

uint64_t ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>(uint64_t a1, uint64_t a2)
{
  return ot::Data<(ot::DataLengthType)0>::Init(a1, a2, 1);
}

{
  return ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>(a1, a2);
}

ot::NetworkData::ServiceTlv *ot::NetworkData::NetworkData::FindNextThreadService(uint64_t a1, ot::NetworkData::NetworkDataTlv *a2, uint64_t a3, char a4)
{
  return ot::NetworkData::NetworkData::FindNextService(a1, a2, 44970, a3, a4);
}

ot::NetworkData::TlvIterator *ot::NetworkData::TlvIterator::TlvIterator(ot::NetworkData::TlvIterator *this, const ot::NetworkData::ServiceTlv *a2)
{
  uint64_t SubTlvs = ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
  ot::Cli::Dataset::Dataset(this, SubTlvs, Next);
  return this;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>(uint64_t a1)
{
}

{
  ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>(a1);
}

uint64_t ot::NetworkData::ServerTlv::GetServerData(ot::NetworkData::ServerTlv *a1, uint64_t a2)
{
  Serveruint64_t Data = ot::NetworkData::ServerTlv::GetServerData(a1);
  ServerDataunsigned __int8 Length = ot::NetworkData::ServerTlv::GetServerDataLength(a1);
  return ot::Data<(ot::DataLengthType)0>::Init(a2, ServerData, ServerDataLength);
}

{
  return ot::NetworkData::ServerTlv::GetServerData(a1, a2);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetType(ot::NetworkData::NetworkDataTlv *this)
{
  return (int)*(unsigned __int8 *)this >> 1;
}

{
  return ot::NetworkData::NetworkDataTlv::GetType(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetEnterpriseNumber(ot::NetworkData::ServiceTlv *this)
{
  if (ot::NetworkData::ServiceTlv::IsThreadEnterprise(this)) {
    return 44970;
  }
  else {
    return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 3));
  }
}

{
  return ot::NetworkData::ServiceTlv::GetEnterpriseNumber(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetServiceDataLength(ot::NetworkData::ServiceTlv *this)
{
  if (ot::NetworkData::ServiceTlv::IsThreadEnterprise(this)) {
    return *((unsigned char *)this + 3);
  }
  else {
    return *((unsigned char *)this + 7);
  }
}

{
  return ot::NetworkData::ServiceTlv::GetServiceDataLength(this);
}

BOOL ot::NetworkData::NetworkDataTlv::IsStable(ot::NetworkData::NetworkDataTlv *this)
{
  return (*(unsigned char *)this & 1) != 0;
}

{
  return ot::NetworkData::NetworkDataTlv::IsStable(this);
}

uint64_t ot::NetworkData::ServerTlv::GetServer16(ot::NetworkData::ServerTlv *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::NetworkData::ServerTlv::GetServer16(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetServiceId(ot::NetworkData::ServiceTlv *this)
{
  return *((unsigned char *)this + 2) & 0xF;
}

{
  return ot::NetworkData::ServiceTlv::GetServiceId(this);
}

uint64_t ot::NetworkData::NetworkData::GetNextOnMeshPrefix(const unsigned __int8 **this, unsigned int *a2, ot::NetworkData::OnMeshPrefixConfig *a3)
{
  return ot::NetworkData::NetworkData::GetNextOnMeshPrefix(this, a2, 0xFFFFu, a3);
}

uint64_t ot::NetworkData::NetworkData::GetNextOnMeshPrefix(const unsigned __int8 **this, unsigned int *a2, unsigned __int16 a3, ot::NetworkData::OnMeshPrefixConfig *a4)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned __int16 v6 = a3;
  v5[4] = a4;
  v5[0] = a4;
  memset(&v5[1], 0, 24);
  return ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, a3, v5);
}

uint64_t ot::NetworkData::NetworkData::Iterate(const unsigned __int8 **a1, uint64_t a2, unsigned __int16 a3, ot::NetworkData::OnMeshPrefixConfig **a4)
{
  char v45 = a1;
  uint64_t v44 = a2;
  unsigned __int16 v43 = a3;
  uint64_t v42 = a4;
  unsigned int v41 = 23;
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v40, a2);
  while (1)
  {
    Tlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetTlv((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40, *a1);
    BOOL v26 = 0;
    if ((unint64_t)Tlv + 2 <= ot::NetworkData::NetworkData::GetTlvsEnd((ot::NetworkData::NetworkData *)a1))
    {
      unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(Tlv);
      BOOL v26 = Next <= ot::NetworkData::NetworkData::GetTlvsEnd((ot::NetworkData::NetworkData *)a1);
    }
    if (!v26) {
      break;
    }
    uint64_t SubTlvs = 0;
    int Type = ot::NetworkData::NetworkDataTlv::GetType(Tlv);
    if (Type == 1)
    {
      if (*v42 || v42[1] || v42[3])
      {
        ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
        uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(v4);
      }
    }
    else if (Type == 5 && v42[2])
    {
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(v5);
    }
    if (SubTlvs)
    {
      while (1)
      {
        SubTlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlv((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40, SubTlvs);
        BOOL v23 = 0;
        if ((unint64_t)SubTlv + 2 <= ot::NetworkData::NetworkDataTlv::GetNext(Tlv))
        {
          unint64_t v22 = ot::NetworkData::NetworkDataTlv::GetNext(SubTlv);
          BOOL v23 = v22 <= ot::NetworkData::NetworkDataTlv::GetNext(Tlv);
        }
        if (!v23) {
          break;
        }
        if (ot::NetworkData::NetworkDataTlv::GetType(Tlv) == 1)
        {
          ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
          char v36 = v6;
          int v21 = ot::NetworkData::NetworkDataTlv::GetType(SubTlv);
          if (v21)
          {
            if (v21 == 2)
            {
              ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
              char v35 = v7;
              if (*v42)
              {
                while (1)
                {
                  unsigned __int8 v34 = ot::NetworkData::NetworkData::NetworkDataIterator::GetAndAdvanceIndex((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                  if (v34 >= (int)ot::NetworkData::BorderRouterTlv::GetNumEntries(v35)) {
                    break;
                  }
                  if (v43 != 0xFFFF)
                  {
                    Entry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v35, v34);
                    unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(Entry);
                    if (v43 != Rloc) {
                      continue;
                    }
                  }
                  uint64_t v10 = (const ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v35, v34);
                  v42[1] = 0;
                  int v42[2] = 0;
                  v42[3] = 0;
                  ot::NetworkData::OnMeshPrefixConfig::SetFrom(*v42, v36, v35, v10);
                  return 0;
                }
              }
            }
            else if (v21 == 3)
            {
              ot::NetworkData::As<ot::NetworkData::ContextTlv>();
              uint64_t v30 = v15;
              if (v42[3])
              {
                if (ot::NetworkData::NetworkData::NetworkDataIterator::IsNewEntry((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40))
                {
                  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *v42 = 0;
                  v42[1] = 0;
                  int v42[2] = 0;
                  ot::NetworkData::LowpanContextInfo::SetFrom(v42[3], v36, v30);
                  ot::NetworkData::NetworkData::NetworkDataIterator::MarkEntryAsNotNew((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                  return 0;
                }
              }
            }
          }
          else
          {
            ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
            unsigned __int8 v33 = v11;
            if (v42[1])
            {
              while (1)
              {
                unsigned __int8 v32 = ot::NetworkData::NetworkData::NetworkDataIterator::GetAndAdvanceIndex((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                if (v32 >= (int)ot::NetworkData::HasRouteTlv::GetNumEntries(v33)) {
                  break;
                }
                if (v43 != 0xFFFF)
                {
                  uint64_t v12 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v33, v32);
                  unsigned __int16 v13 = ot::NetworkData::HasRouteEntry::GetRloc(v12);
                  if (v43 != v13) {
                    continue;
                  }
                }
                unsigned int v31 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v33, v32);
                ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *v42 = 0;
                int v42[2] = 0;
                v42[3] = 0;
                uint64_t v20 = v42[1];
                Instance = (ot::Instance *)ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
                ot::NetworkData::ExternalRouteConfig::SetFrom(v20, Instance, v36, v33, v31);
                return 0;
              }
            }
          }
        }
        else
        {
          ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
          char v29 = v16;
          if (v42[2])
          {
            if (ot::NetworkData::NetworkDataTlv::GetType(SubTlv) == 6)
            {
              ot::NetworkData::As<ot::NetworkData::ServerTlv>();
              uint64_t v28 = v17;
              if (ot::NetworkData::NetworkData::NetworkDataIterator::IsNewEntry((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40))
              {
                if (v43 == 0xFFFF || (unsigned __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v28), v43 == Server16))
                {
                  ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder *v42 = 0;
                  v42[1] = 0;
                  v42[3] = 0;
                  ot::NetworkData::ServiceConfig::SetFrom(v42[2], v29, v28);
                  ot::NetworkData::NetworkData::NetworkDataIterator::MarkEntryAsNotNew((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40);
                  return 0;
                }
              }
            }
          }
        }
        ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceSubTlv((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40, SubTlvs);
      }
    }
    ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceTlv((ot::NetworkData::NetworkData::NetworkDataIterator *)&v40, *a1);
  }
  return v41;
}

uint64_t ot::NetworkData::NetworkData::GetNextExternalRoute(const unsigned __int8 **this, unsigned int *a2, ot::NetworkData::ExternalRouteConfig *a3)
{
  return ot::NetworkData::NetworkData::GetNextExternalRoute(this, a2, 0xFFFFu, a3);
}

uint64_t ot::NetworkData::NetworkData::GetNextExternalRoute(const unsigned __int8 **this, unsigned int *a2, unsigned __int16 a3, ot::NetworkData::ExternalRouteConfig *a4)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned __int16 v6 = a3;
  v5[4] = a4;
  v5[0] = 0;
  v5[1] = a4;
  char v5[2] = 0;
  uint64_t v5[3] = 0;
  return ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, a3, v5);
}

uint64_t ot::NetworkData::NetworkData::GetNextService(const unsigned __int8 **this, unsigned int *a2, ot::NetworkData::ServiceConfig *a3)
{
  return ot::NetworkData::NetworkData::GetNextService(this, a2, 0xFFFFu, a3);
}

uint64_t ot::NetworkData::NetworkData::GetNextService(const unsigned __int8 **this, unsigned int *a2, unsigned __int16 a3, ot::NetworkData::ServiceConfig *a4)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned __int16 v6 = a3;
  v5[4] = a4;
  v5[0] = 0;
  v5[1] = 0;
  char v5[2] = a4;
  uint64_t v5[3] = 0;
  return ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, a3, v5);
}

uint64_t ot::NetworkData::NetworkData::GetNextLowpanContextInfo(ot::NetworkData::NetworkData *this, ot::NetworkData::OnMeshPrefixConfig *a2, ot::NetworkData::LowpanContextInfo *a3)
{
  v4[6] = this;
  v4[5] = a2;
  v4[4] = a3;
  memset(v4, 0, 24);
  v4[3] = a3;
  return ot::NetworkData::NetworkData::Iterate((const unsigned __int8 **)this, (uint64_t)a2, 0xFFFFu, v4);
}

const unsigned __int8 *ot::NetworkData::NetworkData::NetworkDataIterator::GetTlv(ot::NetworkData::NetworkData::NetworkDataIterator *this, const unsigned __int8 *a2)
{
  return &a2[ot::NetworkData::NetworkData::NetworkDataIterator::GetTlvOffset(this)];
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetTlv(this, a2);
}

uint64_t ot::NetworkData::NetworkData::GetTlvsEnd(ot::NetworkData::NetworkData *this)
{
  return *(void *)this + *((unsigned __int8 *)this + 8);
}

{
  return ot::NetworkData::NetworkData::GetTlvsEnd(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetNext(ot::NetworkData::NetworkDataTlv *this)
{
  return (uint64_t)this + *((unsigned __int8 *)this + 1) + 2;
}

{
  return (uint64_t)this + *((unsigned __int8 *)this + 1) + 2;
}

{
  return ot::NetworkData::NetworkDataTlv::GetNext(this);
}

{
  return ot::NetworkData::NetworkDataTlv::GetNext(this);
}

uint64_t ot::NetworkData::PrefixTlv::GetSubTlvs(ot::NetworkData::PrefixTlv *this)
{
  uint64_t Prefix = ot::NetworkData::PrefixTlv::GetPrefix(this);
  return Prefix + ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3));
}

{
  uint64_t Prefix;

  uint64_t Prefix = ot::NetworkData::PrefixTlv::GetPrefix(this);
  return Prefix + ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3));
}

{
  return ot::NetworkData::PrefixTlv::GetSubTlvs(this);
}

{
  return ot::NetworkData::PrefixTlv::GetSubTlvs(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetSubTlvs(ot::NetworkData::ServiceTlv *this)
{
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::ServiceTlv::GetFieldsLength(this);
}

{
  uint64_t Value;

  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::ServiceTlv::GetFieldsLength(this);
}

{
  return ot::NetworkData::ServiceTlv::GetSubTlvs(this);
}

{
  return ot::NetworkData::ServiceTlv::GetSubTlvs(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlv(ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2)
{
  return (uint64_t)a2 + ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlvOffset(this);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlv(this, a2);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetAndAdvanceIndex(ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t result = *(unsigned __int8 *)(*(void *)this + 2);
  *(unsigned char *)(v1 + ot::Tlv::SetType(this, 2) = result + 1;
  return result;
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetAndAdvanceIndex(this);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetNumEntries(ot::NetworkData::BorderRouterTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetLength(this) / 4u;
}

{
  return ot::NetworkData::BorderRouterTlv::GetNumEntries(this);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetEntry(ot::NetworkData::BorderRouterTlv *this, unsigned __int8 a2)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 4 * a2;
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 4 * a2;
}

{
  return ot::NetworkData::BorderRouterTlv::GetEntry(this, a2);
}

{
  return ot::NetworkData::BorderRouterTlv::GetEntry(this, a2);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetRloc(ot::NetworkData::BorderRouterEntry *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::NetworkData::BorderRouterEntry::GetRloc(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetNumEntries(ot::NetworkData::HasRouteTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetLength(this) / 3u;
}

{
  return ot::NetworkData::HasRouteTlv::GetNumEntries(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetEntry(ot::NetworkData::HasRouteTlv *this, unsigned __int8 a2)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 3 * a2;
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this) + 3 * a2;
}

{
  return ot::NetworkData::HasRouteTlv::GetEntry(this, a2);
}

{
  return ot::NetworkData::HasRouteTlv::GetEntry(this, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::GetRloc(ot::NetworkData::HasRouteEntry *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)this);
}

{
  return ot::NetworkData::HasRouteEntry::GetRloc(this);
}

BOOL ot::NetworkData::NetworkData::NetworkDataIterator::IsNewEntry(ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetEntryIndex(this) == 0;
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::IsNewEntry(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::MarkEntryAsNotNew(ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex((uint64_t)this, 1);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::MarkEntryAsNotNew(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceSubTlv(ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2)
{
  SubTlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlv(this, a2);
  unint64_t Next = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(SubTlv);
  ot::NetworkData::NetworkData::NetworkDataIterator::SaveSubTlvOffset(this, Next, a2);
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex((uint64_t)this, 0);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceSubTlv(this, a2);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceTlv(ot::NetworkData::NetworkData::NetworkDataIterator *this, const unsigned __int8 *a2)
{
  Tlv = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::NetworkDataIterator::GetTlv(this, a2);
  unint64_t Next = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Tlv);
  ot::NetworkData::NetworkData::NetworkDataIterator::SaveTlvOffset(this, Next, a2);
  ot::NetworkData::NetworkData::NetworkDataIterator::SetSubTlvOffset((uint64_t)this, 0);
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex((uint64_t)this, 0);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::AdvanceTlv(this, a2);
}

uint64_t ot::NetworkData::NetworkData::ContainsOnMeshPrefix(const unsigned __int8 **this, const ot::NetworkData::OnMeshPrefixConfig *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = (unsigned __int16 *)a2;
  char v6 = 0;
  unsigned int v5 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix(this, &v5, v7[10], (ot::NetworkData::OnMeshPrefixConfig *)v4))
  {
    if (ot::Equatable<ot::NetworkData::OnMeshPrefixConfig>::operator==(v4, v7))
    {
      char v6 = 1;
      return v6 & 1;
    }
  }
  return v6 & 1;
}

BOOL ot::Equatable<ot::NetworkData::OnMeshPrefixConfig>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x18uLL) == 0;
}

{
  return ot::Equatable<ot::NetworkData::OnMeshPrefixConfig>::operator==(a1, a2);
}

uint64_t ot::NetworkData::NetworkData::ContainsExternalRoute(const unsigned __int8 **this, const ot::NetworkData::ExternalRouteConfig *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = (unsigned __int16 *)a2;
  char v6 = 0;
  unsigned int v5 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute(this, &v5, v7[9], (ot::NetworkData::ExternalRouteConfig *)v4))
  {
    if (ot::Equatable<ot::NetworkData::ExternalRouteConfig>::operator==(v4, v7))
    {
      char v6 = 1;
      return v6 & 1;
    }
  }
  return v6 & 1;
}

BOOL ot::Equatable<ot::NetworkData::ExternalRouteConfig>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x18uLL) == 0;
}

{
  return ot::Equatable<ot::NetworkData::ExternalRouteConfig>::operator==(a1, a2);
}

uint64_t ot::NetworkData::NetworkData::ContainsService(const unsigned __int8 **this, const ot::NetworkData::ServiceConfig *a2)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  char v6 = 0;
  unsigned int v5 = 0;
  while (1)
  {
    uint64_t ServerConfig = ot::NetworkData::ServiceConfig::GetServerConfig(v7);
    if (ot::NetworkData::NetworkData::GetNextService(this, &v5, *(_WORD *)(ServerConfig + 250), (ot::NetworkData::ServiceConfig *)v9))break; {
    if (ot::NetworkData::ServiceConfig::operator==((uint64_t)v9, (uint64_t)v7))
    }
    {
      char v6 = 1;
      return v6 & 1;
    }
  }
  return v6 & 1;
}

uint64_t ot::NetworkData::ServiceConfig::GetServerConfig(ot::NetworkData::ServiceConfig *this)
{
  return (uint64_t)this + 262;
}

{
  return (uint64_t)this + 262;
}

{
  return ot::NetworkData::ServiceConfig::GetServerConfig(this);
}

{
  return ot::NetworkData::ServiceConfig::GetServerConfig(this);
}

uint64_t ot::NetworkData::NetworkData::ContainsEntriesFrom(const unsigned __int8 **this, const unsigned __int8 **a2, unsigned __int16 a3)
{
  uint64_t v15 = this;
  uint64_t v14 = a2;
  unsigned __int16 v13 = a3;
  char v12 = 1;
  int v11 = 0;
  while (1)
  {
    uint64_t v7 = (ot::NetworkData::OnMeshPrefixConfig *)&v6;
    uint64_t v8 = (ot::NetworkData::ExternalRouteConfig *)&v5;
    uint64_t v9 = (ot::NetworkData::ServiceConfig *)&v16;
    uint64_t v10 = 0;
    if (ot::NetworkData::NetworkData::Iterate(v14, (uint64_t)&v11, v13, &v7)) {
      break;
    }
    if (v7 && (ot::NetworkData::NetworkData::ContainsOnMeshPrefix(this, v7) & 1) == 0
      || v8 && (ot::NetworkData::NetworkData::ContainsExternalRoute(this, v8) & 1) == 0
      || v9 && (ot::NetworkData::NetworkData::ContainsService(this, v9) & 1) == 0)
    {
      char v12 = 0;
      return v12 & 1;
    }
  }
  return v12 & 1;
}

void ot::NetworkData::MutableNetworkData::GetTlvsStart(ot::NetworkData::MutableNetworkData *this)
{
  ot::AsConst<ot::NetworkData::MutableNetworkData>();
  ot::NetworkData::NetworkData::GetTlvsStart(v1);
  ot::AsNonConst<ot::NetworkData::NetworkDataTlv>();
}

{
  ot::NetworkData::MutableNetworkData::GetTlvsStart(this);
}

void ot::NetworkData::MutableNetworkData::GetTlvsEnd(ot::NetworkData::MutableNetworkData *this)
{
  ot::AsConst<ot::NetworkData::MutableNetworkData>();
  ot::NetworkData::NetworkData::GetTlvsEnd(v1);
  ot::AsNonConst<ot::NetworkData::NetworkDataTlv>();
}

{
  ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
}

unint64_t ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::MutableNetworkData *this, ot::NetworkData::PrefixTlv *a2)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  while (1)
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    if ((unint64_t)SubTlvs >= result) {
      break;
    }
    if (ot::NetworkData::NetworkDataTlv::IsStable(SubTlvs))
    {
      int Type = ot::NetworkData::NetworkDataTlv::GetType(SubTlvs);
      if (Type)
      {
        if (Type == 2)
        {
          ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
          uint64_t v15 = v3;
          ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>((uint64_t)a2);
          uint64_t v14 = v4;
          for (__int16 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v15);
                (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(v15);
                __int16 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(i))
          {
            if ((ot::NetworkData::BorderRouterEntry::IsDhcp(i) || ot::NetworkData::BorderRouterEntry::IsConfigure(i))
              && v14)
            {
              unsigned __int8 ContextId = ot::NetworkData::ContextTlv::GetContextId(v14);
              ot::NetworkData::BorderRouterEntry::SetRloc(i, ContextId | 0xFC00);
            }
            else
            {
              ot::NetworkData::BorderRouterEntry::SetRloc(i, 0xFFFEu);
            }
          }
        }
      }
      else
      {
        ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
        char v12 = v6;
        for (unsigned __int16 j = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(v6);
              (unint64_t)j <= ot::NetworkData::HasRouteTlv::GetLastEntry(v12);
              unsigned __int16 j = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteEntry::GetNext(j))
        {
          ot::NetworkData::HasRouteEntry::SetRloc(j, 0xFFFEu);
        }
      }
      uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(SubTlvs);
    }
    else
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(SubTlvs);
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, SubTlvs);
      SubTlvsunsigned __int8 Length = ot::NetworkData::PrefixTlv::GetSubTlvsLength(a2);
      ot::NetworkData::PrefixTlv::SetSubTlvsLength(a2, SubTlvsLength - Size);
    }
  }
  return result;
}

uint64_t ot::NetworkData::PrefixTlv::GetSubTlvsLength(ot::NetworkData::PrefixTlv *this)
{
  char Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
  return (Length
                         - (ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3))
                          + 2));
}

{
  return ot::NetworkData::PrefixTlv::GetSubTlvsLength(this);
}

void *ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::MutableNetworkData *this, ot::NetworkData::NetworkDataTlv *a2)
{
  unsigned __int8 Size = ot::NetworkData::NetworkDataTlv::GetSize(a2);
  return ot::NetworkData::MutableNetworkData::Remove(this, (char *)a2, Size);
}

unint64_t ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::MutableNetworkData *this, ot::NetworkData::ServiceTlv *a2)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  while (1)
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    if ((unint64_t)SubTlvs >= result) {
      break;
    }
    if (ot::NetworkData::NetworkDataTlv::IsStable(SubTlvs))
    {
      if (ot::NetworkData::NetworkDataTlv::GetType(SubTlvs) == 6)
      {
        ot::NetworkData::As<ot::NetworkData::ServerTlv>();
        uint64_t v7 = v3;
        unsigned __int8 ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(a2);
        unsigned __int16 v5 = ot::Mle::ServiceAlocFromId((ot::Mle *)ServiceId);
        ot::NetworkData::ServerTlv::SetServer16(v7, v5);
      }
      uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(SubTlvs);
    }
    else
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(SubTlvs);
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, SubTlvs);
      SubTlvschar Length = ot::NetworkData::ServiceTlv::GetSubTlvsLength(a2);
      ot::NetworkData::ServiceTlv::SetSubTlvsLength(a2, SubTlvsLength - Size);
    }
  }
  return result;
}

uint64_t ot::NetworkData::ServiceTlv::GetSubTlvsLength(ot::NetworkData::ServiceTlv *this)
{
  char Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
  return (Length - ot::NetworkData::ServiceTlv::GetFieldsLength(this));
}

{
  return ot::NetworkData::ServiceTlv::GetSubTlvsLength(this);
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(uint64_t a1)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(a1);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetFirstEntry(ot::NetworkData::BorderRouterTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return ot::NetworkData::BorderRouterTlv::GetFirstEntry(this);
}

{
  return ot::NetworkData::BorderRouterTlv::GetFirstEntry(this);
}

uint64_t ot::NetworkData::BorderRouterTlv::GetLastEntry(ot::NetworkData::BorderRouterTlv *this)
{
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 4;
}

{
  uint64_t Value;

  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 4;
}

{
  return ot::NetworkData::BorderRouterTlv::GetLastEntry(this);
}

{
  return ot::NetworkData::BorderRouterTlv::GetLastEntry(this);
}

BOOL ot::NetworkData::BorderRouterEntry::IsDhcp(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x800) != 0;
}

{
  return ot::NetworkData::BorderRouterEntry::IsDhcp(this);
}

BOOL ot::NetworkData::BorderRouterEntry::IsConfigure(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x400) != 0;
}

{
  return ot::NetworkData::BorderRouterEntry::IsConfigure(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::SetRloc(ot::NetworkData::BorderRouterEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this = result;
  return result;
}

{
  return ot::NetworkData::BorderRouterEntry::SetRloc(this, a2);
}

uint64_t ot::NetworkData::ContextTlv::GetContextId(ot::NetworkData::ContextTlv *this)
{
  return *((unsigned char *)this + 2) & 0xF;
}

{
  return ot::NetworkData::ContextTlv::GetContextId(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetNext(ot::NetworkData::BorderRouterEntry *this)
{
  return (uint64_t)this + 4;
}

{
  return (uint64_t)this + 4;
}

{
  return ot::NetworkData::BorderRouterEntry::GetNext(this);
}

{
  return ot::NetworkData::BorderRouterEntry::GetNext(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetFirstEntry(ot::NetworkData::HasRouteTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return ot::NetworkData::HasRouteTlv::GetFirstEntry(this);
}

{
  return ot::NetworkData::HasRouteTlv::GetFirstEntry(this);
}

uint64_t ot::NetworkData::HasRouteTlv::GetLastEntry(ot::NetworkData::HasRouteTlv *this)
{
  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 3;
}

{
  uint64_t Value;

  uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(this);
  return Value + ot::NetworkData::NetworkDataTlv::GetLength(this) - 3;
}

{
  return ot::NetworkData::HasRouteTlv::GetLastEntry(this);
}

{
  return ot::NetworkData::HasRouteTlv::GetLastEntry(this);
}

uint64_t ot::NetworkData::HasRouteEntry::SetRloc(ot::NetworkData::HasRouteEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this = result;
  return result;
}

{
  return ot::NetworkData::HasRouteEntry::SetRloc(this, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::GetNext(ot::NetworkData::HasRouteEntry *this)
{
  return (uint64_t)this + 3;
}

{
  return (uint64_t)this + 3;
}

{
  return ot::NetworkData::HasRouteEntry::GetNext(this);
}

{
  return ot::NetworkData::HasRouteEntry::GetNext(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetSize(ot::NetworkData::NetworkDataTlv *this)
{
  return (*((unsigned char *)this + 1) + 2);
}

{
  return ot::NetworkData::NetworkDataTlv::GetSize(this);
}

uint64_t ot::NetworkData::PrefixTlv::SetSubTlvsLength(ot::NetworkData::PrefixTlv *this, char a2)
{
  char v2 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3));
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, v2 + 2 + a2);
}

{
  return ot::NetworkData::PrefixTlv::SetSubTlvsLength(this, a2);
}

uint64_t ot::NetworkData::ServerTlv::SetServer16(ot::NetworkData::ServerTlv *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

{
  return ot::NetworkData::ServerTlv::SetServer16(this, a2);
}

uint64_t ot::NetworkData::ServiceTlv::SetSubTlvsLength(ot::NetworkData::ServiceTlv *this, char a2)
{
  Fieldschar Length = ot::NetworkData::ServiceTlv::GetFieldsLength(this);
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, a2 + FieldsLength);
}

{
  return ot::NetworkData::ServiceTlv::SetSubTlvsLength(this, a2);
}

ot::NetworkData::PrefixTlv *ot::NetworkData::NetworkData::FindPrefix(ot::NetworkData::NetworkData *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  uint64_t v9 = this;
  uint64_t v8 = a2;
  unsigned __int8 v7 = a3;
  ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v6, *(const unsigned __int8 **)this, *((unsigned char *)this + 8));
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v6);
    unsigned __int16 v5 = v3;
  }
  while (v3 && !ot::NetworkData::PrefixTlv::IsEqual(v3, v8, v7));
  return v5;
}

ot::NetworkData::TlvIterator *ot::NetworkData::TlvIterator::TlvIterator(ot::NetworkData::TlvIterator *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  return this;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>(uint64_t a1)
{
}

{
  ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>(a1);
}

BOOL ot::NetworkData::PrefixTlv::IsEqual(ot::NetworkData::PrefixTlv *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  BOOL v7 = 0;
  if (a3 == *((unsigned __int8 *)this + 3))
  {
    uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::PrefixTlv::GetPrefix(this);
    unsigned __int8 v3 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
    return *((unsigned __int8 *)this + 3) <= (int)ot::Ip6::Prefix::MatchLength(Prefix, a2, (const unsigned __int8 *)v3);
  }
  return v7;
}

{
  return ot::NetworkData::PrefixTlv::IsEqual(this, a2, a3);
}

ot::NetworkData::ServiceTlv *ot::NetworkData::NetworkData::FindService(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v11 = a1;
  int v10 = a2;
  uint64_t v9 = a3;
  char v8 = a4;
  ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v7, *(const unsigned __int8 **)a1, *(unsigned char *)(a1 + 8));
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServiceTlv>((uint64_t)v7);
    char v6 = v4;
  }
  while (v4 && !ot::NetworkData::NetworkData::MatchService(v4, v10, v9, v8));
  return v6;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServiceTlv>(uint64_t a1)
{
}

{
  ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServiceTlv>(a1);
}

BOOL ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv *a1, int a2, uint64_t a3, char a4)
{
  int v10 = a1;
  int v9 = a2;
  uint64_t v8 = a3;
  char v7 = a4;
  BOOL v6 = 0;
  if (ot::NetworkData::ServiceTlv::GetEnterpriseNumber(a1) == a2)
  {
    ot::NetworkData::ServiceTlv::GetServiceData(v10, (uint64_t)v5);
    if (v7)
    {
      if (v7 == 1) {
        return ot::Data<(ot::DataLengthType)0>::operator==((uint64_t)v5, v8);
      }
    }
    else
    {
      return ot::Data<(ot::DataLengthType)0>::StartsWith((uint64_t)v5, v8);
    }
  }
  return v6;
}

ot::NetworkData::ServiceTlv *ot::NetworkData::NetworkData::FindNextService(uint64_t a1, ot::NetworkData::NetworkDataTlv *a2, int a3, uint64_t a4, char a5)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  int v13 = a3;
  uint64_t v12 = a4;
  char v11 = a5;
  unint64_t Next = 0;
  unsigned __int8 v9 = 0;
  if (a2)
  {
    unint64_t Next = (unsigned __int8 *)ot::NetworkData::NetworkDataTlv::GetNext(v14);
    unsigned __int8 v9 = *(unsigned char *)a1 + *(unsigned char *)(a1 + 8) - (_BYTE)Next;
  }
  else
  {
    unint64_t Next = *(unsigned __int8 **)a1;
    unsigned __int8 v9 = *(unsigned char *)(a1 + 8);
  }
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance((ot::InstanceLocator *)a1);
  ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v8, Instance, Next, v9);
  return ot::NetworkData::NetworkData::FindService((uint64_t)v8, v13, v12, v11);
}

uint64_t ot::NetworkData::ServiceTlv::GetServiceData(ot::NetworkData::ServiceTlv *a1, uint64_t a2)
{
  Serviceuint64_t Data = ot::NetworkData::ServiceTlv::GetServiceData(a1);
  ServiceDatachar Length = ot::NetworkData::ServiceTlv::GetServiceDataLength(a1);
  return ot::Data<(ot::DataLengthType)0>::Init(a2, (uint64_t)ServiceData, ServiceDataLength);
}

{
  return ot::NetworkData::ServiceTlv::GetServiceData(a1, a2);
}

BOOL ot::Data<(ot::DataLengthType)0>::StartsWith(uint64_t a1, uint64_t a2)
{
  BOOL v3 = 0;
  if (*(unsigned __int8 *)(a1 + 8) >= (int)*(unsigned __int8 *)(a2 + 8)) {
    return ot::Data<(ot::DataLengthType)0>::MatchesBytesIn(a2, *(const void **)a1);
  }
  return v3;
}

{
  return ot::Data<(ot::DataLengthType)0>::StartsWith(a1, a2);
}

uint64_t ot::NetworkData::MutableNetworkData::AppendTlv(ot::NetworkData::MutableNetworkData *this, unsigned __int16 a2)
{
  char v6 = a2;
  if (!ot::NetworkData::MutableNetworkData::CanInsert(this, a2)) {
    return 0;
  }
  ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
  uint64_t v5 = v2;
  *((unsigned char *)this + 8) += v6;
  return v5;
}

BOOL ot::NetworkData::MutableNetworkData::CanInsert(ot::NetworkData::MutableNetworkData *this, unsigned __int16 a2)
{
  return *((unsigned __int8 *)this + 8) + a2 <= *((unsigned __int8 *)this + 9);
}

{
  return ot::NetworkData::MutableNetworkData::CanInsert(this, a2);
}

void *ot::NetworkData::MutableNetworkData::Insert(ot::NetworkData::MutableNetworkData *this, char *a2, unsigned __int8 a3)
{
  BOOL v5 = 0;
  if (ot::NetworkData::MutableNetworkData::CanInsert(this, a3))
  {
    BOOL v5 = 0;
    if (*(void *)this <= (unint64_t)a2) {
      BOOL v5 = (unint64_t)a2 <= *(void *)this + (unint64_t)*((unsigned __int8 *)this + 8);
    }
  }
  if (!v5) {
    __assert_rtn("Insert", "network_data.cpp", 711, "CanInsert(aLength) && mTlvs <= start && start <= mTlvs + mLength");
  }
  uint64_t result = memmove(&a2[a3], a2, *((unsigned __int8 *)this + 8) - (void)&a2[-*(void *)this]);
  *((unsigned char *)this + 8) += a3;
  return result;
}

void *ot::NetworkData::MutableNetworkData::Remove(ot::NetworkData::MutableNetworkData *this, char *a2, unsigned __int8 a3)
{
  ot::NetworkData::MutableNetworkData::GetBytes(this);
  unint64_t v9 = v3 + *((unsigned __int8 *)this + 8);
  __src = &a2[a3];
  BOOL v7 = 0;
  if (a3 <= (int)*((unsigned __int8 *)this + 8))
  {
    ot::NetworkData::MutableNetworkData::GetBytes(this);
    BOOL v7 = 0;
    if (v4 <= (unint64_t)a2) {
      BOOL v7 = (unint64_t)__src <= v9;
    }
  }
  if (!v7) {
    __assert_rtn("Remove", "network_data.cpp", 722, "(aRemoveLength <= mLength) && (GetBytes() <= removeStart) && (removeEnd <= end)");
  }
  uint64_t result = memmove(a2, __src, (v9 - (_BYTE)__src));
  *((unsigned char *)this + 8) -= a3;
  return result;
}

uint64_t ot::NetworkData::NetworkData::GetNextServer(const unsigned __int8 **this, unsigned int *a2, unsigned __int16 *a3)
{
  int v13 = this;
  uint64_t v12 = a2;
  char v11 = a3;
  unsigned int v10 = 0;
  unint64_t v4 = (ot::NetworkData::OnMeshPrefixConfig *)&v9;
  BOOL v5 = &v8;
  char v6 = &v14;
  uint64_t v7 = 0;
  unsigned int v10 = ot::NetworkData::NetworkData::Iterate(this, (uint64_t)a2, 0xFFFFu, &v4);
  if (!v10)
  {
    if (v4)
    {
      unsigned __int16 *v11 = *((_WORD *)v4 + 10);
    }
    else if (v5)
    {
      unsigned __int16 *v11 = *((_WORD *)v5 + 9);
    }
    else
    {
      if (!v6) {
        __assert_rtn("GetNextServer", "network_data.cpp", 759, "false");
      }
      unsigned __int16 *v11 = *((_WORD *)v6 + 256);
    }
  }
  return v10;
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(const unsigned __int8 **a1, char a2, uint64_t a3, char *a4)
{
  uint64_t v18 = a1;
  char v17 = a2;
  uint64_t v16 = a3;
  uint64_t v15 = a4;
  unsigned int v14 = 0;
  ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::Rlocs((uint64_t)v13, a2, a3, *a4);
  unsigned int v12 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute(a1, &v12, (ot::NetworkData::ExternalRouteConfig *)v10))
  {
    unsigned int v14 = ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::AddRloc16(v13, v11);
    if (v14) {
      goto LABEL_11;
    }
  }
  unsigned int v12 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix(a1, &v12, (ot::NetworkData::OnMeshPrefixConfig *)v7))
  {
    if ((v8 & 0x40) != 0 && v8 < 0)
    {
      unsigned int v14 = ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::AddRloc16(v13, v9);
      if (v14) {
        break;
      }
    }
  }
LABEL_11:
  char Length = ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::GetLength((uint64_t)v13);
  char *v15 = Length;
  return v14;
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::Rlocs(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return a1;
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::AddRloc16(unsigned __int8 *a1, unsigned __int16 a2)
{
  unsigned int v8 = 0;
  int v6 = *a1;
  if (*a1)
  {
    if (v6 == 1)
    {
      if (!ot::Mle::IsActiveRouter((ot::Mle *)a2)) {
        return v8;
      }
    }
    else if (v6 == 2 && ot::Mle::IsActiveRouter((ot::Mle *)a2))
    {
      return v8;
    }
  }
  for (unsigned __int8 i = 0; i < (int)a1[16] && *(unsigned __int16 *)(*((void *)a1 + 1) + 2 * i) != a2; ++i)
    ;
  if (i == a1[16])
  {
    if (a1[16] < (int)a1[17])
    {
      uint64_t v2 = *((void *)a1 + 1);
      uint64_t v3 = a1[16]++;
      *(_WORD *)(v2 + 2 * vot::Tlv::SetType(this, 3) = a2;
    }
    else
    {
      return 3;
    }
  }
  return v8;
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::GetLength(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t ot::NetworkData::NetworkData::CountBorderRouters(const unsigned __int8 **a1, char a2)
{
  unint64_t v4 = a1;
  v3[1] = a2;
  v3[0] = 85;
  if (ot::NetworkData::NetworkData::FindBorderRouters(a1, a2, (uint64_t)v5, v3)) {
    __assert_rtn("CountBorderRouters", "network_data.cpp", 869, "false");
  }
  return v3[0];
}

uint64_t ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(const unsigned __int8 **this, __int16 a2)
{
  unsigned int v12 = this;
  __int16 v11 = a2;
  char v10 = 0;
  unsigned int v9 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute(this, &v9, (ot::NetworkData::ExternalRouteConfig *)v7))
  {
    if (v8 == v11)
    {
      char v10 = 1;
      return v10 & 1;
    }
  }
  unsigned int v9 = 0;
  while (!ot::NetworkData::NetworkData::GetNextOnMeshPrefix(this, &v9, (ot::NetworkData::OnMeshPrefixConfig *)v4))
  {
    if (v6 == v11 && (v5 & 0x80) != 0 && ((v5 & 0x40) != 0 || (v5 & 0x400) != 0))
    {
      char v10 = 1;
      return v10 & 1;
    }
  }
  return v10 & 1;
}

uint64_t ot::NetworkData::NetworkData::GetBytes(ot::NetworkData::NetworkData *this)
{
  return *(void *)this;
}

{
  return ot::NetworkData::NetworkData::GetBytes(this);
}

uint64_t ot::NetworkData::ServerTlv::GetServerData(ot::NetworkData::ServerTlv *this)
{
  return (uint64_t)this + 4;
}

{
  return ot::NetworkData::ServerTlv::GetServerData(this);
}

uint64_t ot::NetworkData::ServerTlv::GetServerDataLength(ot::NetworkData::ServerTlv *this)
{
  return (ot::NetworkData::NetworkDataTlv::GetLength(this) - 2);
}

{
  return ot::NetworkData::ServerTlv::GetServerDataLength(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetLength(ot::NetworkData::NetworkDataTlv *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::NetworkData::NetworkDataTlv::GetLength(this);
}

BOOL ot::NetworkData::ServiceTlv::IsThreadEnterprise(ot::NetworkData::ServiceTlv *this)
{
  return *((char *)this + 2) < 0;
}

{
  return ot::NetworkData::ServiceTlv::IsThreadEnterprise(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetTlvOffset(ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return **(unsigned __int8 **)this;
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetTlvOffset(this);
}

uint64_t ot::NetworkData::PrefixTlv::GetPrefix(ot::NetworkData::PrefixTlv *this)
{
  return (uint64_t)this + 4;
}

{
  return (uint64_t)this + 4;
}

{
  return ot::NetworkData::PrefixTlv::GetPrefix(this);
}

{
  return ot::NetworkData::PrefixTlv::GetPrefix(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::GetValue(ot::NetworkData::NetworkDataTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return (uint64_t)this + 2;
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

{
  return ot::NetworkData::NetworkDataTlv::GetValue(this);
}

uint64_t ot::NetworkData::ServiceTlv::GetFieldsLength(ot::NetworkData::ServiceTlv *this)
{
  BOOL IsThreadEnterprise = ot::NetworkData::ServiceTlv::IsThreadEnterprise(this);
  char v2 = 0;
  if (!IsThreadEnterprise) {
    char v2 = 4;
  }
  return (v2 + 2 + ot::NetworkData::ServiceTlv::GetServiceDataLength(this));
}

{
  return ot::NetworkData::ServiceTlv::GetFieldsLength(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlvOffset(ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return *(unsigned __int8 *)(*(void *)this + 1);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetSubTlvOffset(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::GetEntryIndex(ot::NetworkData::NetworkData::NetworkDataIterator *this)
{
  return *(unsigned __int8 *)(*(void *)this + 2);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::GetEntryIndex(this);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + ot::Tlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetEntryIndex(this, a2);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::SaveSubTlvOffset(ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2, const ot::NetworkData::NetworkDataTlv *a3)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetSubTlvOffset((uint64_t)this, a2 - a3);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SaveSubTlvOffset(this, a2, a3);
}

uint64_t ot::NetworkData::NetworkData::NetworkDataIterator::SetSubTlvOffset(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  return this;
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetSubTlvOffset(this, a2);
}

unsigned char **ot::NetworkData::NetworkData::NetworkDataIterator::SaveTlvOffset(ot::NetworkData::NetworkData::NetworkDataIterator *this, const ot::NetworkData::NetworkDataTlv *a2, const unsigned __int8 *a3)
{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetTlvOffset((unsigned char **)this, a2 - a3);
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SaveTlvOffset(this, a2, a3);
}

unsigned char **ot::NetworkData::NetworkData::NetworkDataIterator::SetTlvOffset(unsigned char **this, char a2)
{
  **this = a2;
  return this;
}

{
  return ot::NetworkData::NetworkData::NetworkDataIterator::SetTlvOffset(this, a2);
}

uint64_t ot::NetworkData::NetworkData::GetTlvsStart(ot::NetworkData::NetworkData *this)
{
  return *(void *)this;
}

{
  return ot::NetworkData::NetworkData::GetTlvsStart(this);
}

uint64_t ot::NetworkData::NetworkDataTlv::SetLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  return this;
}

{
  return ot::NetworkData::NetworkDataTlv::SetLength(this, a2);
}

char *ot::NetworkData::ServiceTlv::GetServiceData(ot::NetworkData::ServiceTlv *this)
{
  if (ot::NetworkData::ServiceTlv::IsThreadEnterprise(this)) {
    char v2 = (char *)this + 3;
  }
  else {
    char v2 = (char *)this + 7;
  }
  return v2 + 1;
}

{
  return ot::NetworkData::ServiceTlv::GetServiceData(this);
}

uint64_t ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter,unsigned short *,unsigned char &)const::Rlocs::Rlocs(uint64_t result, char a2, uint64_t a3, char a4)
{
  *(unsigned char *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 1ot::ThreadTlv::SetType(this, 7) = a4;
  return result;
}

void ot::NetworkData::PrefixTlv::FindSubTlv(uint64_t a1, unsigned __int8 a2)
{
  ot::AsConst<ot::NetworkData::PrefixTlv>();
  ot::NetworkData::PrefixTlv::FindSubTlv(v2, a2);
  ot::AsNonConst<ot::NetworkData::NetworkDataTlv>();
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv(a1, a2);
}

ot::Crypto::LiteralKey *ot::Crypto::LiteralKey::LiteralKey(ot::Crypto::LiteralKey *this, const ot::Crypto::Key *a2)
{
  *(void *)this = ot::Crypto::Key::GetBytes(a2);
  __int16 Length = ot::Crypto::Key::GetLength(a2);
  uint64_t result = this;
  *((_WORD *)this + --*(unsigned char *)(this + 4) = Length;
  return result;
}

{
  ot::Crypto::LiteralKey::LiteralKey(this, a2);
  return this;
}

uint64_t ot::Crypto::Key::GetBytes(ot::Crypto::Key *this)
{
  return *(void *)this;
}

{
  return ot::Crypto::Key::GetBytes(this);
}

uint64_t ot::Crypto::Key::GetLength(ot::Crypto::Key *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::Crypto::Key::GetLength(this);
}

uint64_t ot::NetworkData::LeaderBase::Reset(ot::NetworkData::LeaderBase *this)
{
  Uint8 = (ot::Random::NonCrypto *)ot::Random::NonCrypto::GetUint8(this);
  *((unsigned char *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = (_BYTE)Uint8;
  *((unsigned char *)this + 1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = ot::Random::NonCrypto::GetUint8(Uint8);
  ot::NetworkData::MutableNetworkData::SetLength((uint64_t)this, 0);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"NetworkData", "%s: SignalNetDataChanged", v2, v3, v4, v5, v6, v7, (char)"Reset");
  return ot::NetworkData::LeaderBase::SignalNetDataChanged(this);
}

uint64_t ot::NetworkData::LeaderBase::SignalNetDataChanged(ot::NetworkData::LeaderBase *this)
{
  unsigned __int8 v4 = *((unsigned char *)this + 266);
  unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(this);
  *((unsigned char *)this + 266) = ot::Max<unsigned char>(v4, Length);
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
  return ot::Notifier::Signal(v2, 512);
}

uint64_t ot::NetworkData::LeaderBase::GetServiceId(const unsigned __int8 **a1, int a2, uint64_t a3, char a4, unsigned char *a5)
{
  unsigned int v14 = a1;
  int v13 = a2;
  uint64_t v12 = a3;
  char v11 = a4 & 1;
  char v10 = a5;
  unsigned int v9 = 23;
  unsigned int v8 = 0;
  while (!ot::NetworkData::NetworkData::GetNextService(a1, &v8, (ot::NetworkData::ServiceConfig *)v15))
  {
    ot::NetworkData::ServiceConfig::GetServiceData((uint64_t)v15, (uint64_t)v7);
    if (v13 == v16 && ot::Data<(ot::DataLengthType)0>::operator==(v12, (uint64_t)v7) && (v11 & 1) == (v17 & 1))
    {
      unsigned char *v10 = v15[0];
      return 0;
    }
  }
  return v9;
}

uint64_t ot::NetworkData::ServiceConfig::GetServiceData(uint64_t a1, uint64_t a2)
{
  return ot::Data<(ot::DataLengthType)0>::Init(a2, a1 + 9, *(unsigned char *)(a1 + 8));
}

{
  return ot::NetworkData::ServiceConfig::GetServiceData(a1, a2);
}

uint64_t ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(const unsigned __int8 **this, ot::NetworkData::ExternalRouteConfig *a2)
{
  char v17 = this;
  int v16 = a2;
  unsigned int v15 = 23;
  unsigned int v14 = 0;
  while (!ot::NetworkData::NetworkData::GetNextExternalRoute(this, &v14, (ot::NetworkData::ExternalRouteConfig *)&v12))
  {
    if ((v13 & 0x400000000) != 0)
    {
      uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::ExternalRouteConfig::GetPrefix((ot::NetworkData::ExternalRouteConfig *)&v12);
      if (ot::Ip6::Prefix::IsValidNat64(Prefix))
      {
        if (v15 == 23
          || ((int v3 = (char)(BYTE4(v13) << 6) >> 6,
               BOOL v4 = __OFSUB__(v3, (char)(*((unsigned char *)v16 + 20) << 6) >> 6),
               int v5 = v3 - ((char)(*((unsigned char *)v16 + 20) << 6) >> 6),
               (v5 < 0) ^ v4 | (v5 == 0))
            ? (char v6 = 0)
            : (char v6 = 1),
              (v6 & 1) != 0
           || (char)((char)(BYTE4(v13) << 6) >> 6) == (char)((char)(*((unsigned char *)v16 + 20) << 6) >> 6)
           && (char v10 = (ot::Ip6::Prefix *)ot::NetworkData::ExternalRouteConfig::GetPrefix((ot::NetworkData::ExternalRouteConfig *)&v12),
               uint64_t v7 = (ot::Ip6::Prefix *)ot::NetworkData::ExternalRouteConfig::GetPrefix(v16),
               ot::Ip6::Prefix::operator<(v10, v7))))
        {
          unsigned int v8 = v16;
          *(_OWORD *)int v16 = v12;
          *((void *)v8 + ot::Tlv::SetType(this, 2) = v13;
          unsigned int v15 = 0;
        }
      }
    }
  }
  return v15;
}

ot::NetworkData::PrefixTlv *ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::NetworkData::LeaderBase *this, const ot::Ip6::Address *a2, const ot::NetworkData::PrefixTlv *a3)
{
  unsigned int v15 = this;
  unsigned int v14 = a2;
  uint64_t v13 = a3;
  long long v12 = 0;
  if (a3) {
    uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(v13);
  }
  else {
    uint64_t Next = ot::NetworkData::NetworkData::GetTlvsStart(this);
  }
  uint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  ot::Cli::Dataset::Dataset(v11, Next, TlvsEnd);
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v11);
    long long v12 = v4;
    if (!v4) {
      break;
    }
    unsigned int v8 = v14;
    uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(v12);
    Prefixunsigned __int8 Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v12);
  }
  while (!ot::Ip6::Address::MatchesPrefix(v8, Prefix, PrefixLength));
  return v12;
}

uint64_t ot::NetworkData::PrefixTlv::GetPrefixLength(ot::NetworkData::PrefixTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::NetworkData::PrefixTlv::GetPrefixLength(this);
}

uint64_t ot::NetworkData::LeaderBase::GetContext(ot::InstanceLocator *a1, const ot::Ip6::Address *a2, ot::Ip6::Prefix *a3)
{
  NextMatchingPrefixTlv = 0;
  ot::Ip6::Prefix::SetLength((uint64_t)a3, 0);
  int v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  if (ot::Mle::Mle::IsMeshLocalAddress(v3, a2)) {
    ot::NetworkData::LeaderBase::GetContextForMeshLocalPrefix(a1, a3);
  }
  while (1)
  {
    NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(a1, a2, NextMatchingPrefixTlv);
    if (!NextMatchingPrefixTlv) {
      break;
    }
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(NextMatchingPrefixTlv);
    char v11 = v4;
    if (v4)
    {
      Prefixchar Length = ot::NetworkData::PrefixTlv::GetPrefixLength(NextMatchingPrefixTlv);
      if (PrefixLength > ot::Ip6::Prefix::GetLength(a3))
      {
        ot::NetworkData::PrefixTlv::CopyPrefixTo(NextMatchingPrefixTlv, a3);
        *((unsigned char *)a3 + 1ot::ThreadTlv::SetType(this, 7) = ot::NetworkData::ContextTlv::GetContextId(v11);
        *((unsigned char *)a3 + 18) = ot::NetworkData::ContextTlv::IsCompress(v11);
        *((unsigned char *)a3 + 1ot::Tlv::SetLength((uint64_t)this, 9) = 1;
      }
    }
  }
  char Length = ot::Ip6::Prefix::GetLength(a3);
  if (v6 | (Length == 0)) {
    char v7 = 0;
  }
  else {
    char v7 = 1;
  }
  if (v7) {
    return 0;
  }
  else {
    return 23;
  }
}

void *ot::NetworkData::LeaderBase::GetContextForMeshLocalPrefix(ot::InstanceLocator *a1, ot::Ip6::Prefix *a2)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  ot::Mle::Mle::GetMeshLocalPrefix(v2);
  uint64_t result = ot::Ip6::Prefix::Set(a2, v3);
  *((unsigned char *)a2 + 1ot::ThreadTlv::SetType(this, 7) = 0;
  *((unsigned char *)a2 + 18) = 1;
  *((unsigned char *)a2 + 1ot::Tlv::SetLength((uint64_t)this, 9) = 1;
  return result;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(ot::NetworkData::PrefixTlv *a1)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(a1);
}

void *ot::NetworkData::PrefixTlv::CopyPrefixTo(ot::NetworkData::PrefixTlv *this, ot::Ip6::Prefix *a2)
{
  uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(this);
  Prefixchar Length = ot::NetworkData::PrefixTlv::GetPrefixLength(this);
  return ot::Ip6::Prefix::Set(a2, Prefix, PrefixLength);
}

{
  return ot::NetworkData::PrefixTlv::CopyPrefixTo(this, a2);
}

BOOL ot::NetworkData::ContextTlv::IsCompress(ot::NetworkData::ContextTlv *this)
{
  return (*((unsigned char *)this + 2) & 0x10) != 0;
}

{
  return ot::NetworkData::ContextTlv::IsCompress(this);
}

uint64_t ot::NetworkData::LeaderBase::GetContext(ot::NetworkData::NetworkData *a1, char a2, ot::Ip6::Prefix *a3)
{
  uint64_t v18 = a1;
  char v17 = a2;
  int v16 = a3;
  unsigned int v15 = 23;
  uint64_t TlvsStart = ot::NetworkData::NetworkData::GetTlvsStart(a1);
  uint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(a1);
  ot::Cli::Dataset::Dataset(v14, TlvsStart, TlvsEnd);
  if (v17)
  {
    while (1)
    {
      ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v14);
      uint64_t v13 = v4;
      if (!v4) {
        break;
      }
      ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(v4);
      long long v12 = v5;
      if (v5)
      {
        char ContextId = ot::NetworkData::ContextTlv::GetContextId(v5);
        if (v17 == ContextId)
        {
          ot::NetworkData::PrefixTlv::CopyPrefixTo(v13, v16);
          char v7 = ot::NetworkData::ContextTlv::GetContextId(v12);
          *((unsigned char *)v16 + 1ot::ThreadTlv::SetType(this, 7) = v7;
          BOOL IsCompress = ot::NetworkData::ContextTlv::IsCompress(v12);
          *((unsigned char *)v16 + 18) = IsCompress;
          *((unsigned char *)v16 + 1ot::Tlv::SetLength((uint64_t)this, 9) = 1;
          return 0;
        }
      }
    }
  }
  else
  {
    ot::NetworkData::LeaderBase::GetContextForMeshLocalPrefix(a1, v16);
    return 0;
  }
  return v15;
}

void *ot::Ip6::Prefix::Set(ot::Ip6::Prefix *a1, const unsigned __int8 *a2)
{
  return ot::Ip6::Prefix::Set(a1, a2, 0x40u);
}

{
  return ot::Ip6::Prefix::Set(a1, a2);
}

uint64_t ot::NetworkData::LeaderBase::IsOnMesh(ot::NetworkData::LeaderBase *this, const ot::Ip6::Address *a2)
{
  long long v12 = this;
  char v11 = a2;
  NextMatchingPrefixTlv = 0;
  char v9 = 0;
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsMeshLocalAddress(v2, v11))
  {
    char v9 = 1;
  }
  else
  {
    while (1)
    {
      NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(this, v11, NextMatchingPrefixTlv);
      if (!NextMatchingPrefixTlv) {
        break;
      }
      ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v8, NextMatchingPrefixTlv);
      while (1)
      {
        ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::BorderRouterTlv>((uint64_t)v8);
        char v7 = v3;
        if (!v3) {
          break;
        }
        for (unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v3);
              (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(v7);
              unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(i))
        {
          if (ot::NetworkData::BorderRouterEntry::IsOnMesh(i))
          {
            char v9 = 1;
            return v9 & 1;
          }
        }
      }
    }
  }
  return v9 & 1;
}

ot::NetworkData::TlvIterator *ot::NetworkData::TlvIterator::TlvIterator(ot::NetworkData::TlvIterator *this, const ot::NetworkData::PrefixTlv *a2)
{
  uint64_t SubTlvs = ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
  ot::Cli::Dataset::Dataset(this, SubTlvs, Next);
  return this;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::BorderRouterTlv>(uint64_t a1)
{
}

{
  ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::BorderRouterTlv>(a1);
}

BOOL ot::NetworkData::BorderRouterEntry::IsOnMesh(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x100) != 0;
}

{
  return ot::NetworkData::BorderRouterEntry::IsOnMesh(this);
}

uint64_t ot::NetworkData::LeaderBase::RouteLookup(ot::NetworkData::LeaderBase *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3, unsigned __int16 *a4)
{
  unsigned int v9 = 4;
  NextMatchingPrefixTlv = 0;
  while (1)
  {
    NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(this, a2, NextMatchingPrefixTlv);
    if (!NextMatchingPrefixTlv) {
      break;
    }
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(NextMatchingPrefixTlv);
    if (v4)
    {
      char DomainId = ot::NetworkData::PrefixTlv::GetDomainId(NextMatchingPrefixTlv);
      if (!ot::NetworkData::LeaderBase::ExternalRouteLookup(this, DomainId, a3, a4)) {
        return 0;
      }
      if (!ot::NetworkData::LeaderBase::DefaultRouteLookup(this, NextMatchingPrefixTlv, a4)) {
        return 0;
      }
    }
  }
  return v9;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(ot::NetworkData::PrefixTlv *a1)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(a1);
}

uint64_t ot::NetworkData::LeaderBase::ExternalRouteLookup(ot::NetworkData::LeaderBase *this, char a2, const ot::Ip6::Address *a3, unsigned __int16 *a4)
{
  uint64_t v20 = this;
  char v19 = a2;
  uint64_t v18 = a3;
  char v17 = a4;
  unsigned int v16 = 4;
  NextMatchingPrefixTlv = 0;
  unsigned int v14 = 0;
  unsigned __int8 v13 = 0;
  while (1)
  {
    NextMatchingPrefixTlv = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(this, v18, NextMatchingPrefixTlv);
    if (!NextMatchingPrefixTlv) {
      break;
    }
    long long v12 = 0;
    Prefixchar Length = 0;
    Prefixchar Length = ot::NetworkData::PrefixTlv::GetPrefixLength(NextMatchingPrefixTlv);
    ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v10, NextMatchingPrefixTlv);
    char DomainId = ot::NetworkData::PrefixTlv::GetDomainId(NextMatchingPrefixTlv);
    if (v19 == DomainId && (!v14 || PrefixLength > (int)v13))
    {
      while (1)
      {
        ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::HasRouteTlv>((uint64_t)v10);
        long long v12 = v5;
        if (!v5) {
          break;
        }
        for (unsigned __int8 i = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(v12);
              (unint64_t)i <= ot::NetworkData::HasRouteTlv::GetLastEntry(v12);
              unsigned __int8 i = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteEntry::GetNext(i))
        {
          if (!v14
            || PrefixLength > (int)v13
            || (int)ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::HasRouteEntry>(this, i, v14) > 0)
          {
            unsigned int v14 = i;
            unsigned __int8 v13 = PrefixLength;
          }
        }
      }
    }
  }
  if (v14)
  {
    unsigned __int16 Rloc = ot::NetworkData::HasRouteEntry::GetRloc(v14);
    unsigned __int16 *v17 = Rloc;
    return 0;
  }
  return v16;
}

uint64_t ot::NetworkData::PrefixTlv::GetDomainId(ot::NetworkData::PrefixTlv *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::NetworkData::PrefixTlv::GetDomainId(this);
}

uint64_t ot::NetworkData::LeaderBase::DefaultRouteLookup(ot::NetworkData::LeaderBase *this, const ot::NetworkData::PrefixTlv *a2, unsigned __int16 *a3)
{
  unsigned int v14 = this;
  unsigned __int8 v13 = a2;
  long long v12 = a3;
  unsigned int v11 = 4;
  ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v10, a2);
  unsigned int v8 = 0;
  while (1)
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::BorderRouterTlv>((uint64_t)v10);
    unsigned int v9 = v3;
    if (!v3) {
      break;
    }
    for (unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v3);
          (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(v9);
          unsigned __int8 i = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(i))
    {
      if (ot::NetworkData::BorderRouterEntry::IsDefaultRoute(i)
        && (!v8
         || (int)ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::BorderRouterEntry>(this, i, v8) > 0))
      {
        unsigned int v8 = i;
      }
    }
  }
  if (v8)
  {
    unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(v8);
    unsigned __int16 *v12 = Rloc;
    return 0;
  }
  return v11;
}

uint64_t ot::NetworkData::LeaderBase::CompareRouteEntries(ot::NetworkData::LeaderBase *this, char a2, unsigned __int16 a3, char a4, unsigned __int16 a5)
{
  unsigned int v13 = ot::ThreeWayCompare<signed char>(a2, a4);
  if (!v13)
  {
    int v5 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    unsigned __int8 PathCost = ot::RouterTable::GetPathCost(v5, a5);
    char v6 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    unsigned __int8 v7 = ot::RouterTable::GetPathCost(v6, a3);
    unsigned int v13 = ot::ThreeWayCompare<unsigned char>(PathCost, v7);
    if (!v13)
    {
      BOOL IsActiveRouter = ot::Mle::IsActiveRouter((ot::Mle *)a3);
      BOOL v8 = ot::Mle::IsActiveRouter((ot::Mle *)a5);
      return ot::ThreeWayCompare<BOOL>(IsActiveRouter, v8);
    }
  }
  return v13;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::HasRouteTlv>(uint64_t a1)
{
}

{
  ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::HasRouteTlv>(a1);
}

uint64_t ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::HasRouteEntry>(ot::NetworkData::LeaderBase *a1, ot::NetworkData::HasRouteEntry *a2, ot::NetworkData::HasRouteEntry *a3)
{
  char Preference = ot::NetworkData::HasRouteEntry::GetPreference(a2);
  unsigned __int16 Rloc = ot::NetworkData::HasRouteEntry::GetRloc(a2);
  char v7 = ot::NetworkData::HasRouteEntry::GetPreference(a3);
  unsigned __int16 v3 = ot::NetworkData::HasRouteEntry::GetRloc(a3);
  return ot::NetworkData::LeaderBase::CompareRouteEntries(a1, Preference, Rloc, v7, v3);
}

{
  return ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::HasRouteEntry>(a1, a2, a3);
}

BOOL ot::NetworkData::BorderRouterEntry::IsDefaultRoute(ot::NetworkData::BorderRouterEntry *this)
{
  return (ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1)) & 0x200) != 0;
}

{
  return ot::NetworkData::BorderRouterEntry::IsDefaultRoute(this);
}

uint64_t ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::BorderRouterEntry>(ot::NetworkData::LeaderBase *a1, ot::NetworkData::BorderRouterEntry *a2, ot::NetworkData::BorderRouterEntry *a3)
{
  char Preference = ot::NetworkData::BorderRouterEntry::GetPreference(a2);
  unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(a2);
  char v7 = ot::NetworkData::BorderRouterEntry::GetPreference(a3);
  unsigned __int16 v3 = ot::NetworkData::BorderRouterEntry::GetRloc(a3);
  return ot::NetworkData::LeaderBase::CompareRouteEntries(a1, Preference, Rloc, v7, v3);
}

{
  return ot::NetworkData::LeaderBase::CompareRouteEntries<ot::NetworkData::BorderRouterEntry>(a1, a2, a3);
}

uint64_t ot::NetworkData::LeaderBase::SetNetworkData(ot::NetworkData::MutableNetworkData *a1, char a2, char a3, char a4, ot::Message *a5, unsigned __int16 a6, unsigned __int16 a7)
{
  if (a7 <= 0xFEu)
  {
    ot::NetworkData::MutableNetworkData::GetBytes(a1);
    unsigned int v22 = ot::Message::Read(a5, a6, v7, a7);
    if (!v22)
    {
      ot::NetworkData::MutableNetworkData::SetLength((uint64_t)a1, a7);
      *((unsigned char *)a1 + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
      *((unsigned char *)a1 + 1ot::LinkQualityInfo::SetLinkQuality((uint64_t)this, 0) = a3;
      if (a4 == 1) {
        ot::NetworkData::MutableNetworkData::RemoveTemporaryData(a1);
      }
      BOOL v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      if (ot::Mle::Mle::IsLeader(v8))
      {
        unsigned int v9 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
        ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset(v9);
      }
      ot::NetworkData::MutableNetworkData::GetBytes(a1);
      char v19 = v10;
      unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(a1);
      encode_data_into_string(v19, Length, __b, 0x3E8uLL, 0);
      char v20 = *((unsigned char *)a1 + 11);
      ot::NetworkData::NetworkData::GetLength(a1);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"NetworkData", "SetNetworkData, SignalNetDataChanged ver=%d, stable_ver=%d, len=%d, data=%s", v12, v13, v14, v15, v16, v17, v20);
      ot::NetworkData::LeaderBase::SignalNetDataChanged(a1);
    }
  }
  else
  {
    return 6;
  }
  return v22;
}

uint64_t ot::NetworkData::LeaderBase::setStringAsNetworkData(ot::NetworkData::LeaderBase *this, char *a2, size_t a3, char a4, char a5)
{
  BOOL v23 = this;
  unsigned int v22 = a2;
  size_t v21 = a3;
  char v20 = a4;
  char v19 = a5;
  uint64_t v13 = this;
  unsigned int v18 = 0;
  if (a3)
  {
    uint64_t v17 = v10;
    unint64_t v11 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
    __chkstk_darwin(this, a2);
    uint64_t v12 = &v10[-v11];
    uint64_t v16 = v5;
    bzero(&v10[-v11], v21);
    int v15 = 0;
    int v15 = parse_string_into_data(v12, v21, v22);
    if (v15 == v21)
    {
      unsigned int v18 = 6;
      int v14 = 4;
    }
    else
    {
      ot::NetworkData::MutableNetworkData::SetLength((uint64_t)v13, v15);
      ot::NetworkData::MutableNetworkData::GetBytes(v13);
      memcpy(v6, v12, v15);
      char v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v13);
      if (ot::Mle::Mle::IsLeader(v7))
      {
        BOOL v8 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v13);
        ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset(v8);
      }
      int v14 = 0;
    }
  }
  return v18;
}

uint64_t ot::NetworkData::LeaderBase::SetCommissioningData(ot::NetworkData::LeaderBase *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  unsigned int v14 = 0;
  ot::NetworkData::LeaderBase::RemoveCommissioningData(this);
  if (!a3) {
    goto LABEL_7;
  }
  if (a3 <= 0xFCuLL)
  {
    ot::NetworkData::MutableNetworkData::AppendTlv(this, a3 + 2);
    ot::NetworkData::As<ot::NetworkData::CommissioningDataTlv>();
    uint64_t v13 = v9;
    if (!v9) {
      return 3;
    }
    ot::NetworkData::CommissioningDataTlv::Init(v9);
    ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)v13, a3);
    uint64_t Value = (void *)ot::NetworkData::NetworkDataTlv::GetValue(v13);
    memcpy(Value, a2, a3);
LABEL_7:
    ++*((unsigned char *)this + 11);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"NetworkData", "%s: SignalNetDataChanged", v3, v4, v5, v6, v7, v8, (char)"SetCommissioningData");
    ot::NetworkData::LeaderBase::SignalNetDataChanged(this);
    return v14;
  }
  return 3;
}

void ot::NetworkData::LeaderBase::RemoveCommissioningData(ot::NetworkData::LeaderBase *this)
{
  ot::NetworkData::LeaderBase::GetCommissioningData(this);
  if (v1) {
    ot::NetworkData::MutableNetworkData::RemoveTlv(this, v1);
  }
}

uint64_t ot::NetworkData::CommissioningDataTlv::Init(ot::NetworkData::CommissioningDataTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 0);
}

{
  return ot::NetworkData::CommissioningDataTlv::Init(this);
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::CommissioningDataTlv>(ot::NetworkData::NetworkDataTlv *a1, unint64_t a2)
{
}

{
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::CommissioningDataTlv>(a1, a2);
}

ot::Tlv *ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::NetworkData::LeaderBase *a1, unsigned __int8 a2)
{
  uint64_t v7 = 0;
  ot::NetworkData::LeaderBase::GetCommissioningData(a1);
  uint64_t v6 = v2;
  if (v2)
  {
    uint64_t Value = (ot::Tlv *)ot::NetworkData::NetworkDataTlv::GetValue(v2);
    unsigned __int8 Length = ot::NetworkData::NetworkDataTlv::GetLength(v6);
    return ot::MeshCoP::Tlv::FindTlv(Value, Length, a2);
  }
  return (ot::Tlv *)v7;
}

uint64_t ot::NetworkData::LeaderBase::IsJoiningEnabled(ot::NetworkData::LeaderBase *this)
{
  char v4 = 0;
  if (ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(this, 9u))
  {
    CommissioningDataSubTlv = ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(this, 8u);
    if (CommissioningDataSubTlv)
    {
      for (int i = 0; i < ot::Tlv::GetLength(CommissioningDataSubTlv); ++i)
      {
        if (*(unsigned char *)(ot::Tlv::GetValue(CommissioningDataSubTlv) + i))
        {
          char v4 = 1;
          return v4 & 1;
        }
      }
    }
  }
  return v4 & 1;
}

uint64_t ot::NetworkData::LeaderBase::SteeringDataCheck(ot::NetworkData::LeaderBase *a1, unsigned __int16 *a2)
{
  unsigned int v4 = 0;
  if (ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(a1, 8u))
  {
    ot::As<ot::MeshCoP::SteeringDataTlv>();
    ot::MeshCoP::SteeringDataTlv::CopyTo(v2, (ot::MeshCoP::SteeringData *)v6);
    if (!ot::MeshCoP::SteeringData::Contains((ot::MeshCoP::SteeringData *)v6, a2)) {
      return 23;
    }
  }
  else
  {
    return 13;
  }
  return v4;
}

uint64_t ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::NetworkData::LeaderBase *this, const ot::Mac::ExtAddress *a2, ot::Mac::ExtAddress *a3)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  ot::MeshCoP::ComputeJoinerId(a2, (const ot::Mac::ExtAddress *)v8, a3);
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(v8, v5);
  return ot::NetworkData::LeaderBase::SteeringDataCheck(this, v5);
}

uint64_t ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::NetworkData::LeaderBase *this, const ot::MeshCoP::JoinerDiscerner *a2)
{
  uint64_t v6 = this;
  uint64_t v5 = a2;
  ot::MeshCoP::SteeringData::CalculateHashBitIndexes(a2, v4);
  return ot::NetworkData::LeaderBase::SteeringDataCheck(this, v4);
}

uint64_t ot::Max<unsigned char>(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 >= (int)a2) {
    return a1;
  }
  else {
    return a2;
  }
}

{
  return ot::Max<unsigned char>(a1, a2);
}

unsigned char *ot::NetworkData::NetworkDataTlv::Init(unsigned char *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  return ot::NetworkData::NetworkDataTlv::Init(this);
}

unsigned char *ot::NetworkData::NetworkDataTlv::SetType(unsigned char *result, char a2)
{
  *uint64_t result = *result & 1 | (2 * a2);
  return result;
}

{
  return ot::NetworkData::NetworkDataTlv::SetType(result, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::GetPreference(ot::NetworkData::HasRouteEntry *this)
{
  unsigned __int8 Flags = ot::NetworkData::HasRouteEntry::GetFlags(this);
  return (char)ot::NetworkData::HasRouteEntry::PreferenceFromFlags((ot::NetworkData::HasRouteEntry *)Flags);
}

{
  return ot::NetworkData::HasRouteEntry::GetPreference(this);
}

uint64_t ot::NetworkData::HasRouteEntry::PreferenceFromFlags(ot::NetworkData::HasRouteEntry *this)
{
  return (char)ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)this >> 6));
}

{
  return ot::NetworkData::HasRouteEntry::PreferenceFromFlags(this);
}

uint64_t ot::NetworkData::HasRouteEntry::GetFlags(ot::NetworkData::HasRouteEntry *this)
{
  return *((unsigned __int8 *)this + 2);
}

{
  return ot::NetworkData::HasRouteEntry::GetFlags(this);
}

uint64_t ot::NetworkData::RoutePreferenceFromValue(ot::NetworkData *this)
{
  return (char)ot::Preference::From2BitUint((ot::Preference *)this);
}

{
  return ot::NetworkData::RoutePreferenceFromValue(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetPreference(ot::NetworkData::BorderRouterEntry *this)
{
  unsigned __int16 Flags = ot::NetworkData::BorderRouterEntry::GetFlags(this);
  return (char)ot::NetworkData::BorderRouterEntry::PreferenceFromFlags((ot::NetworkData::BorderRouterEntry *)Flags);
}

{
  return ot::NetworkData::BorderRouterEntry::GetPreference(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::PreferenceFromFlags(ot::NetworkData::BorderRouterEntry *this)
{
  return (char)ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)(unsigned __int16)this >> 14));
}

{
  return ot::NetworkData::BorderRouterEntry::PreferenceFromFlags(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::GetFlags(ot::NetworkData::BorderRouterEntry *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 1));
}

{
  return ot::NetworkData::BorderRouterEntry::GetFlags(this);
}

ot::NetworkData::Leader *ot::NetworkData::Leader::Leader(ot::NetworkData::Leader *this, ot::Instance *a2)
{
  *((unsigned char *)this + 26ot::ThreadTlv::SetType(this, 7) = 0;
  *((unsigned char *)this + 268) = 0;
  ot::NetworkData::Leader::ContextIds::ContextIds((ot::NetworkData::Leader *)((char *)this + 272), a2);
  ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::TimerMilliIn((ot::NetworkData::Leader *)((char *)this + 344), a2);
  ot::NetworkData::Leader::Reset(this);
  return this;
}

{
  ot::NetworkData::Leader::Leader(this, a2);
  return this;
}

void ot::NetworkData::Leader::HandleTimer(ot::NetworkData::Leader *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 268))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Timed out waiting for netdata on restoring leader role after reset", a3, a4, a5, a6, a7, a8, (char)this);
    uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v9);
    ot::Mle::Mle::BecomeDetached(v8);
    IgnoreError();
  }
  else
  {
    ot::NetworkData::Leader::ContextIds::HandleTimer((ot::NetworkData::Leader *)((char *)this + 272));
  }
}

ot::NetworkData::LeaderBase *ot::NetworkData::LeaderBase::LeaderBase(ot::NetworkData::LeaderBase *this, ot::Instance *a2)
{
  *((unsigned char *)this + 266) = 0;
  ot::NetworkData::LeaderBase::Reset(this);
  return this;
}

ot::NetworkData::Leader::ContextIds *ot::NetworkData::Leader::ContextIds::ContextIds(ot::NetworkData::Leader::ContextIds *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkData::Leader::ContextIds *result;

  ot::InstanceLocator::InstanceLocator();
  uint64_t result = this;
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 15) = 300;
  *((unsigned char *)this + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return result;
}

ot::TimerMilli *ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::HandleTimer);
  return a1;
}

void ot::NetworkData::Leader::Reset(ot::NetworkData::Leader *this)
{
  ot::NetworkData::LeaderBase::Reset(this);
  ot::NetworkData::Leader::ContextIds::Clear((ot::NetworkData::Leader *)((char *)this + 272));
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"NetworkData", "%s: Leader Network Data", v1, v2, v3, v4, v5, v6, (char)"Reset");
}

ot::NetworkData::Leader::ContextIds *ot::NetworkData::Leader::ContextIds::Clear(ot::NetworkData::Leader::ContextIds *this)
{
  uint64_t v1 = this;
  for (unsigned __int8 i = 1; i <= 0xFu; ++i)
    this = (ot::NetworkData::Leader::ContextIds *)ot::NetworkData::Leader::ContextIds::MarkAsUnallocated(v1, i);
  return this;
}

unsigned char *ot::NetworkData::Leader::Start(unsigned char *result, char a2)
{
  if (result[267]) {
    __assert_rtn("Start", "network_data_leader_ftd.cpp", 89, "!mIsClone");
  }
  result[268] = a2 == 1;
  if (result[268]) {
    return (unsigned char *)ot::TimerMilli::Start((ot::TimerMilli *)(result + 344), 0xEA60u);
  }
  return result;
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::IncrementVersion(ot::NetworkData::Leader *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = (ot::NetworkData::LeaderBase *)ot::Mle::Mle::IsLeader(v1);
  if (result) {
    return ot::NetworkData::Leader::IncrementVersions(this, 0, v3, v4, v5, v6, v7, v8);
  }
  return result;
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::IncrementVersions(ot::NetworkData::LeaderBase *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = this;
  if ((*((unsigned char *)this + 267) & 1) == 0)
  {
    if (a2) {
      ++*((unsigned char *)this + 10);
    }
    ++*((unsigned char *)this + 11);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"NetworkData", "%s: SignalNetDataChanged", a3, a4, a5, a6, a7, a8, (char)"IncrementVersions");
    return (ot::NetworkData::LeaderBase *)ot::NetworkData::LeaderBase::SignalNetDataChanged(v8);
  }
  return this;
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::IncrementVersionAndStableVersion(ot::NetworkData::Leader *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = (ot::NetworkData::LeaderBase *)ot::Mle::Mle::IsLeader(v1);
  if (result) {
    return ot::NetworkData::Leader::IncrementVersions(this, 1, v3, v4, v5, v6, v7, v8);
  }
  return result;
}

uint64_t ot::NetworkData::Leader::IncrementVersions(ot::NetworkData::Leader *this, const ot::NetworkData::Leader::ChangedFlags *a2)
{
  uint64_t result = ot::NetworkData::Leader::ChangedFlags::DidChange(a2);
  if (result)
  {
    char v3 = ot::NetworkData::Leader::ChangedFlags::DidStableChange(a2);
    return (uint64_t)ot::NetworkData::Leader::IncrementVersions(this, v3 & 1, v4, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ot::NetworkData::Leader::ChangedFlags::DidChange(ot::NetworkData::Leader::ChangedFlags *this)
{
  return *(unsigned char *)this & 1;
}

{
  return ot::NetworkData::Leader::ChangedFlags::DidChange(this);
}

uint64_t ot::NetworkData::Leader::ChangedFlags::DidStableChange(ot::NetworkData::Leader::ChangedFlags *this)
{
  return *((unsigned char *)this + 1) & 1;
}

{
  return ot::NetworkData::Leader::ChangedFlags::DidStableChange(this);
}

uint64_t ot::NetworkData::Leader::RemoveBorderRouter(ot::InstanceLocator *a1, unsigned __int16 a2, char a3)
{
  uint64_t v8 = a1;
  unsigned __int16 v7 = a2;
  char v6 = a3;
  ot::NetworkData::Leader::ChangedFlags::ChangedFlags((ot::NetworkData::Leader::ChangedFlags *)v5);
  ot::NetworkData::Leader::RemoveRloc(a1, v7, v6, (ot::NetworkData::Leader::ChangedFlags *)v5);
  return ot::NetworkData::Leader::IncrementVersions(a1, (const ot::NetworkData::Leader::ChangedFlags *)v5);
}

ot::NetworkData::Leader::ChangedFlags *ot::NetworkData::Leader::ChangedFlags::ChangedFlags(ot::NetworkData::Leader::ChangedFlags *this)
{
  return this;
}

void ot::NetworkData::Leader::RemoveRloc(ot::InstanceLocator *a1, unsigned __int16 a2, char a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  char v10 = a1;
  unsigned __int16 v9 = a2;
  char v8 = a3;
  unsigned __int16 v7 = a4;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v6, Instance, 0, 0);
  ot::NetworkData::Leader::RemoveRloc(a1, v9, v8, (ot::NetworkData::NetworkData *)v6, v7);
}

void ot::NetworkData::Leader::HandleTmf<(ot::Uri)5>(ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v38 = a1;
  int v37 = a2;
  char v36 = a3;
  unsigned __int16 v35 = 0;
  char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3) && (*((unsigned char *)a1 + 268) & 1) == 0)
  {
    char v4 = ot::UriToString<(ot::Uri)5>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Received %s", v5, v6, v7, v8, v9, v10, v4);
    PeerAddr = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v36);
    Iid = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
    if (ot::Ip6::InterfaceIdentifier::IsRoutingLocator(Iid))
    {
      int v32 = ot::Tlv::Find<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v37, &v35, v13, v14);
      if (v32)
      {
        if (v32 != 23) {
          return;
        }
      }
      else
      {
        ot::NetworkData::Leader::RemoveBorderRouter(a1, v35, 0);
      }
      if (!ot::Tlv::FindTlv<ot::ThreadNetworkDataTlv>(v37, v39, v15, v16, v17))
      {
        if ((ot::ThreadNetworkDataTlv::IsValid((ot::ThreadNetworkDataTlv *)v39) & 1) == 0) {
          return;
        }
        Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
        Tlvs = (unsigned __int8 *)ot::ThreadNetworkDataTlv::GetTlvs((ot::ThreadNetworkDataTlv *)v39);
        char Length = ot::Tlv::GetLength((ot::Tlv *)v39);
        ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v34, Instance, Tlvs, Length);
        char v19 = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v36);
        char v20 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v19);
        unsigned __int16 Locator = ot::Ip6::InterfaceIdentifier::GetLocator(v20);
        ot::NetworkData::Leader::RegisterNetworkData(a1, Locator, (const ot::NetworkData::NetworkData *)v34);
      }
      unsigned int v22 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      if (!ot::Coap::CoapBase::SendEmptyAck(v22, v37, v36))
      {
        char v23 = ot::UriToString<(ot::Uri)5>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Sent %s ack", v24, v25, v26, v27, v28, v29, v23);
      }
    }
  }
}

uint64_t ot::Tlv::FindTlv<ot::ThreadNetworkDataTlv>(ot::Tlv *a1, void *a2, uint64_t a3, uint64_t a4, ot::Tlv *a5)
{
  return ot::Tlv::FindTlv(a1, (const ot::Message *)0xA, 0x101u, a2, a5);
}

{
  return ot::Tlv::FindTlv<ot::ThreadNetworkDataTlv>(a1, a2, a3, a4, a5);
}

uint64_t ot::ThreadNetworkDataTlv::IsValid(ot::ThreadNetworkDataTlv *this)
{
  return 1;
}

{
  return ot::ThreadNetworkDataTlv::IsValid(this);
}

uint64_t ot::ThreadNetworkDataTlv::GetTlvs(ot::ThreadNetworkDataTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::ThreadNetworkDataTlv::GetTlvs(this);
}

void ot::NetworkData::Leader::RegisterNetworkData(ot::NetworkData::Leader *this, unsigned __int16 a2, const ot::NetworkData::NetworkData *a3)
{
  uint64_t v25 = this;
  unsigned __int16 v24 = a2;
  char v23 = a3;
  int v22 = 0;
  ot::NetworkData::Leader::ChangedFlags::ChangedFlags((ot::NetworkData::Leader::ChangedFlags *)v21);
  unsigned int v18 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
  unsigned __int8 v3 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v24);
  if (ot::RouterTable::IsAllocated(v18, v3))
  {
    int v22 = ot::NetworkData::Leader::Validate(v23, (const ot::NetworkData::NetworkData *)v24);
    if (!v22)
    {
      ot::NetworkData::Leader::RemoveRloc(this, v24, 0, v23, (ot::NetworkData::Leader::ChangedFlags *)v21);
      for (unsigned __int8 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(v23);
            (unint64_t)i < ot::NetworkData::NetworkData::GetTlvsEnd(v23);
            unsigned __int8 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
      {
        int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
        if (Type == 1)
        {
          ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
          int v22 = ot::NetworkData::Leader::AddPrefix(this, v4, (ot::NetworkData::Leader::ChangedFlags *)v21);
          if (v22) {
            goto LABEL_14;
          }
        }
        else if (Type == 5)
        {
          ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
          int v22 = ot::NetworkData::Leader::AddService(this, v5, (ot::NetworkData::Leader::ChangedFlags *)v21);
          if (v22) {
            goto LABEL_14;
          }
        }
      }
      ot::NetworkData::MutableNetworkData::GetBytes(this);
      uint64_t v16 = v6;
      unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(this);
      ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"Register", v16, Length);
    }
  }
  else
  {
    int v22 = 4;
  }
LABEL_14:
  ot::NetworkData::Leader::IncrementVersions(this, (const ot::NetworkData::Leader::ChangedFlags *)v21);
  if (v22 == 3)
  {
    uint64_t v8 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(this);
    ot::NetworkData::Notifier::SignalNetworkDataFull(v8);
  }
  if ((*((unsigned char *)this + 267) & 1) == 0)
  {
    if (v22)
    {
      char v9 = ot::ErrorToString(v22);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"NetworkData", "Failed to register network data: %s", v10, v11, v12, v13, v14, v15, v9);
    }
  }
}

void ot::NetworkData::Leader::HandleTmf<(ot::Uri)16>(ot::InstanceLocator *a1, ot::Message *a2, const ot::Ip6::MessageInfo *a3)
{
  unsigned __int16 Offset = ot::Message::GetOffset(a2);
  __int16 Length = ot::Message::GetLength(a2);
  unsigned __int16 v25 = Length - ot::Message::GetOffset(a2);
  unsigned __int8 v24 = -1;
  char v23 = 0;
  char v22 = 0;
  Commissionerunsigned __int16 SessionId = 0;
  unsigned __int8 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3) && (*((unsigned char *)a1 + 268) & 1) == 0 && v25 <= 0xFEuLL)
  {
    ot::Message::ReadBytes(a2, Offset, v29, v25);
    unsigned int v18 = (ot::Tlv *)v29;
    uint64_t v17 = (unsigned __int8 *)&v29[v25];
    while (v18 < (ot::Tlv *)v17)
    {
      if ((char *)v18 + 2 > (char *)v17) {
        goto LABEL_32;
      }
      if (ot::Tlv::IsExtended(v18)) {
        goto LABEL_32;
      }
      ot::MeshCoP::Tlv::GetNext(v18);
      if (v4 > (unint64_t)v17) {
        goto LABEL_32;
      }
      char Type = ot::MeshCoP::Tlv::GetType(v18);
      switch(Type)
      {
        case 18:
        case 8:
          char v22 = 1;
          break;
        case 9:
          goto LABEL_32;
        case 11:
          ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
          uint64_t v15 = v5;
          if (!ot::MeshCoP::CommissionerSessionIdTlv::IsValid(v5)) {
            goto LABEL_32;
          }
          Commissionerunsigned __int16 SessionId = ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(v15);
          char v23 = 1;
          break;
      }
      ot::MeshCoP::Tlv::GetNext(v18);
      unsigned int v18 = v6;
    }
    if (v23 & 1) != 0 && (v22)
    {
      ot::NetworkData::LeaderBase::GetCommissioningData(a1);
      char v20 = v7;
      if (v7)
      {
        for (unsigned __int8 i = (ot::Tlv *)ot::NetworkData::NetworkDataTlv::GetValue(v7); ; unsigned __int8 i = v10)
        {
          uint64_t Value = ot::NetworkData::NetworkDataTlv::GetValue(v20);
          if ((unint64_t)i >= Value
                                    + (unint64_t)ot::NetworkData::NetworkDataTlv::GetLength(v20))
            break;
          if (ot::MeshCoP::Tlv::GetType(i) == 11)
          {
            ot::As<ot::MeshCoP::CommissionerSessionIdTlv>();
            if (CommissionerSessionId != (unsigned __int16)ot::MeshCoP::CommissionerSessionIdTlv::GetCommissionerSessionId(v8)) {
              goto LABEL_32;
            }
          }
          else if (ot::MeshCoP::Tlv::GetType(i) == 9)
          {
            if (v25 + ot::Tlv::GetSize(i) > 0xFEuLL) {
              goto LABEL_32;
            }
            unsigned int Size = ot::Tlv::GetSize(i);
            memcpy(&v29[v25], i, Size);
            v25 += ot::Tlv::GetSize(i);
          }
          ot::MeshCoP::Tlv::GetNext(i);
        }
      }
      ot::NetworkData::LeaderBase::SetCommissioningData(a1, (const unsigned __int8 *)v29, v25);
      IgnoreError();
      unsigned __int8 v24 = 1;
    }
  }
LABEL_32:
  uint64_t v11 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  if (ot::Mle::Mle::IsLeader(v11)) {
    ot::NetworkData::Leader::SendCommissioningSetResponse(a1, a2, a3, v24);
  }
}

BOOL ot::MeshCoP::CommissionerSessionIdTlv::IsValid(ot::MeshCoP::CommissionerSessionIdTlv *this)
{
  return ot::Tlv::GetLength(this) >= 2uLL;
}

{
  return ot::MeshCoP::CommissionerSessionIdTlv::IsValid(this);
}

void ot::NetworkData::Leader::SendCommissioningSetResponse(ot::InstanceLocator *a1, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, unsigned __int8 a4)
{
  unint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v14 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, a2);
  if (v14)
  {
    int v15 = ot::Tlv::Append<ot::MeshCoP::StateTlv>(v14, a4);
    if (!v15)
    {
      uint64_t v5 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      int v15 = ot::Coap::CoapBase::SendMessage(v5, v14, a3);
      if (!v15)
      {
        char v6 = ot::UriToString<(ot::Uri)16>();
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "sent %s response", v7, v8, v9, v10, v11, v12, v6);
      }
    }
  }
  else
  {
    int v15 = 3;
  }
  if (v15)
  {
    if (v14) {
      ot::Message::Free(v14);
    }
  }
}

void ot::NetworkData::Leader::HandleTmf<(ot::Uri)14>(ot::InstanceLocator *a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unsigned __int16 v8 = 0;
  unsigned __int16 v7 = 0;
  unsigned __int8 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  if (ot::Mle::Mle::IsLeader(v3)
    && (*((unsigned char *)a1 + 268) & 1) == 0
    && !ot::Tlv::FindTlvValueOffset(v10, (const ot::Message *)0xD, &v7, &v8, v4))
  {
    ot::Message::SetOffset(v10, v7);
  }
  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
  if (ot::Mle::Mle::IsLeader(v5)) {
    ot::NetworkData::Leader::SendCommissioningGetResponse(a1, v10, v8, v9);
  }
}

void ot::NetworkData::Leader::SendCommissioningGetResponse(ot::NetworkData::Leader *this, const ot::Coap::Message *a2, unsigned __int16 a3, const ot::Ip6::MessageInfo *a4)
{
  uint64_t v29 = this;
  uint64_t v28 = a2;
  unsigned __int16 v27 = a3;
  uint64_t v26 = a4;
  int appended = 0;
  char v23 = 0;
  memset(v22, 0, sizeof(v22));
  unint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  unsigned __int8 v24 = ot::Coap::CoapBase::NewPriorityResponseMessage(v4, v28);
  if (!v24)
  {
    int appended = 3;
    goto LABEL_22;
  }
  ot::NetworkData::LeaderBase::GetCommissioningData(this);
  char v23 = v5;
  if (v5)
  {
    *(void *)&v22[1] = ot::NetworkData::NetworkDataTlv::GetValue(v23);
    v22[0] = ot::NetworkData::NetworkDataTlv::GetLength(v23);
  }
  if (!*(void *)&v22[1] || !v22[0])
  {
    int appended = 2;
    goto LABEL_22;
  }
  if (v27)
  {
    for (unsigned __int16 i = 0; i < (int)v27; ++i)
    {
      char v20 = 0;
      uint64_t v17 = v28;
      __int16 Offset = ot::Message::GetOffset(v28);
      ot::Message::Read<unsigned char>(v17, i + Offset, &v20);
      IgnoreError();
      for (unsigned __int16 j = *(ot::MeshCoP::Tlv **)&v22[1]; (unint64_t)j < *(void *)&v22[1] + (unint64_t)v22[0]; unsigned __int16 j = v8)
      {
        char Type = ot::MeshCoP::Tlv::GetType(j);
        if (v20 == Type)
        {
          int appended = ot::Tlv::AppendTo(j, v24);
          if (appended) {
            goto LABEL_22;
          }
          break;
        }
        ot::MeshCoP::Tlv::GetNext(j);
      }
    }
  }
  else
  {
    int appended = ot::Message::AppendBytes(v24, *(char **)&v22[1], v22[0]);
    if (appended) {
      goto LABEL_22;
    }
  }
  uint64_t v9 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  int appended = ot::Coap::CoapBase::SendMessage(v9, v24, v26);
  if (!appended)
  {
    char v10 = ot::UriToString<(ot::Uri)14>();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Sent %s response", v11, v12, v13, v14, v15, v16, v10);
  }
LABEL_22:
  if (appended)
  {
    if (v24) {
      ot::Message::Free(v24);
    }
  }
}

BOOL ot::NetworkData::Leader::RlocMatch(unsigned __int16 a1, unsigned __int16 a2, char a3)
{
  BOOL v4 = 0;
  if (a3)
  {
    if (a3 == 1) {
      return ot::Mle::RouterIdMatch((ot::Mle *)a1, a2);
    }
  }
  else
  {
    return a1 == a2;
  }
  return v4;
}

uint64_t ot::NetworkData::Leader::Validate(ot::NetworkData::Leader *this, const ot::NetworkData::NetworkData *a2)
{
  char v20 = this;
  unsigned __int16 v19 = (unsigned __int16)a2;
  unsigned int v18 = 0;
  unint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(v20);
        (unint64_t)i < TlvsEnd;
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(v20);
    uint64_t TlvsStart = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkData::GetTlvsStart(v20);
    ot::NetworkData::NetworkData::NetworkData((ot::NetworkData::NetworkData *)v15, Instance, TlvsStart, i);
    if ((unint64_t)i + 2 > TlvsEnd) {
      return 6;
    }
    unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(i);
    if (Next > TlvsEnd) {
      return 6;
    }
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type == 1)
    {
      uint64_t v14 = 0;
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      uint64_t v14 = v4;
      if (!ot::NetworkData::PrefixTlv::IsValid(v4)) {
        return 6;
      }
      uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(v14);
      Prefix__int16 Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v14);
      if (ot::NetworkData::NetworkData::FindPrefix((ot::NetworkData::NetworkData *)v15, Prefix, PrefixLength)) {
        return 6;
      }
      unsigned int v18 = ot::NetworkData::Leader::ValidatePrefix(v14, (const ot::NetworkData::PrefixTlv *)v19);
      if (v18) {
        return v18;
      }
    }
    else if (Type == 5)
    {
      uint64_t v13 = 0;
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      uint64_t v13 = v6;
      if (!ot::NetworkData::ServiceTlv::IsValid(v6)) {
        return 6;
      }
      ot::NetworkData::ServiceTlv::GetServiceData(v13, (uint64_t)v12);
      int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v13);
      if (ot::NetworkData::NetworkData::FindService((uint64_t)v15, EnterpriseNumber, (uint64_t)v12, 1)) {
        return 6;
      }
      unsigned int v18 = ot::NetworkData::Leader::ValidateService(v13, (const ot::NetworkData::ServiceTlv *)v19);
      if (v18) {
        return v18;
      }
    }
  }
  return v18;
}

ot::NetworkData::NetworkData *ot::NetworkData::NetworkData::NetworkData(ot::NetworkData::NetworkData *this, ot::Instance *a2, const ot::NetworkData::NetworkDataTlv *a3, const ot::NetworkData::NetworkDataTlv *a4)
{
  return this;
}

{
  ot::NetworkData::NetworkData *result;
  char v6;

  char v6 = (char)a4;
  ot::InstanceLocator::InstanceLocator();
  uint64_t result = this;
  *(void *)this = a3;
  *((unsigned char *)this + 8) = v6 - (_BYTE)a3;
  return result;
}

BOOL ot::NetworkData::PrefixTlv::IsValid(ot::NetworkData::PrefixTlv *this)
{
  BOOL v4 = 0;
  if (ot::NetworkData::NetworkDataTlv::GetLength(this) >= 2uLL)
  {
    unsigned __int8 Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
    BOOL v4 = 0;
    if ((unint64_t)ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this
                                                                                              + 3))
       + 2 <= Length)
      return ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)*((unsigned __int8 *)this + 3)) <= 0x10uLL;
  }
  return v4;
}

{
  return ot::NetworkData::PrefixTlv::IsValid(this);
}

uint64_t ot::NetworkData::Leader::ValidatePrefix(ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2)
{
  unsigned __int16 v19 = (unsigned __int16)a2;
  unsigned int v18 = 6;
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(this);
  char v16 = 0;
  char v15 = 0;
  char v14 = 0;
  char v13 = 0;
  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(this);
        (unint64_t)i < Next;
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    if ((unint64_t)i + 2 > Next || ot::NetworkData::NetworkDataTlv::GetNext(i) > Next) {
      return v18;
    }
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type)
    {
      if (Type == 2)
      {
        ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
        uint64_t v11 = v2;
        if (ot::NetworkData::NetworkDataTlv::IsStable(v2))
        {
          if (v13) {
            return v18;
          }
          char v13 = 1;
        }
        else
        {
          if (v14) {
            return v18;
          }
          char v14 = 1;
        }
        uint64_t FirstEntry = ot::NetworkData::BorderRouterTlv::GetFirstEntry(v11);
        if (FirstEntry != ot::NetworkData::BorderRouterTlv::GetLastEntry(v11)) {
          return v18;
        }
        unsigned __int8 v3 = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v11);
        if (v19 != (unsigned __int16)ot::NetworkData::BorderRouterEntry::GetRloc(v3)) {
          return v18;
        }
      }
    }
    else
    {
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      char v10 = v4;
      if (ot::NetworkData::NetworkDataTlv::IsStable(v4))
      {
        if (v15) {
          return v18;
        }
        char v15 = 1;
      }
      else
      {
        if (v16) {
          return v18;
        }
        char v16 = 1;
      }
      uint64_t v7 = ot::NetworkData::HasRouteTlv::GetFirstEntry(v10);
      if (v7 != ot::NetworkData::HasRouteTlv::GetLastEntry(v10)) {
        return v18;
      }
      uint64_t v5 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(v10);
      if (v19 != (unsigned __int16)ot::NetworkData::HasRouteEntry::GetRloc(v5)) {
        return v18;
      }
    }
  }
  if (v13 & 1) != 0 || (v14 & 1) != 0 || (v15 & 1) != 0 || (v16) {
    return 0;
  }
  return v18;
}

BOOL ot::NetworkData::ServiceTlv::IsValid(ot::NetworkData::ServiceTlv *this)
{
  unsigned __int8 Length = ot::NetworkData::NetworkDataTlv::GetLength(this);
  BOOL v7 = 0;
  if (Length)
  {
    BOOL IsThreadEnterprise = ot::NetworkData::ServiceTlv::IsThreadEnterprise(this);
    uint64_t v2 = 0;
    if (!IsThreadEnterprise) {
      uint64_t v2 = 4;
    }
    BOOL v7 = 0;
    if (Length >= (unint64_t)(v2 + 2))
    {
      unsigned int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(this);
      ServiceDataunsigned __int8 Length = ot::NetworkData::ServiceTlv::GetServiceDataLength(this);
      return (unint64_t)Length + 2 >= (unsigned __int16)ot::NetworkData::ServiceTlv::CalculateSize((ot::NetworkData::ServiceTlv *)EnterpriseNumber, ServiceDataLength);
    }
  }
  return v7;
}

{
  return ot::NetworkData::ServiceTlv::IsValid(this);
}

uint64_t ot::NetworkData::Leader::ValidateService(ot::NetworkData::Leader *this, const ot::NetworkData::ServiceTlv *a2)
{
  unsigned __int16 v9 = (unsigned __int16)a2;
  unsigned int v8 = 6;
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(this);
  char v6 = 0;
  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(this);
        (unint64_t)i < Next;
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    if ((unint64_t)i + 2 > Next) {
      return v8;
    }
    if (ot::NetworkData::NetworkDataTlv::GetNext(i) > Next) {
      return v8;
    }
    if (ot::NetworkData::NetworkDataTlv::GetType(i) == 6)
    {
      ot::NetworkData::As<ot::NetworkData::ServerTlv>();
      BOOL v4 = v2;
      if (v6) {
        return v8;
      }
      char v6 = 1;
      if (!ot::NetworkData::ServerTlv::IsValid(v2)
        || v9 != (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(v4))
      {
        return v8;
      }
    }
  }
  if (v6) {
    return 0;
  }
  return v8;
}

BOOL ot::NetworkData::ServerTlv::IsValid(ot::NetworkData::ServerTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::GetLength(this) >= 2uLL;
}

{
  return ot::NetworkData::ServerTlv::IsValid(this);
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::HasRouteTlv *a3, const ot::NetworkData::HasRouteEntry *a4)
{
  if (this)
  {
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>(this, a2 & 1);
    char v7 = ot::NetworkData::Leader::ContainsMatchingEntry(v4, a3, v5);
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::Leader *this, const ot::NetworkData::HasRouteTlv *a2, const ot::NetworkData::HasRouteEntry *a3)
{
  char v5 = 0;
  if (this)
  {
    for (unsigned __int16 i = (char *)ot::NetworkData::HasRouteTlv::GetFirstEntry(this);
          (unint64_t)i <= ot::NetworkData::HasRouteTlv::GetLastEntry(this);
          i += 3)
    {
      if (ot::Equatable<ot::NetworkData::HasRouteEntry>::operator==(i, a2))
      {
        char v5 = 1;
        return v5 & 1;
      }
    }
  }
  return v5 & 1;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>(ot::NetworkData::PrefixTlv *a1, char a2)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>(a1, a2);
}

BOOL ot::Equatable<ot::NetworkData::HasRouteEntry>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 3uLL) == 0;
}

{
  return ot::Equatable<ot::NetworkData::HasRouteEntry>::operator==(a1, a2);
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::BorderRouterTlv *a3, const ot::NetworkData::BorderRouterEntry *a4)
{
  if (this)
  {
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(this, a2 & 1);
    char v7 = ot::NetworkData::Leader::ContainsMatchingEntry(v4, a3, v5);
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::Leader *this, const ot::NetworkData::BorderRouterTlv *a2, const ot::NetworkData::BorderRouterEntry *a3)
{
  char v5 = 0;
  if (this)
  {
    for (unsigned __int16 i = (char *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(this);
          (unint64_t)i <= ot::NetworkData::BorderRouterTlv::GetLastEntry(this);
          i += 4)
    {
      if (ot::Equatable<ot::NetworkData::BorderRouterEntry>::operator==(i, a2))
      {
        char v5 = 1;
        return v5 & 1;
      }
    }
  }
  return v5 & 1;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(ot::NetworkData::PrefixTlv *a1, char a2)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(a1, a2);
}

BOOL ot::Equatable<ot::NetworkData::BorderRouterEntry>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 4uLL) == 0;
}

{
  return ot::Equatable<ot::NetworkData::BorderRouterEntry>::operator==(a1, a2);
}

uint64_t ot::NetworkData::Leader::ContainsMatchingServer(ot::NetworkData::Leader *this, const ot::NetworkData::ServiceTlv *a2, const ot::NetworkData::ServerTlv *a3)
{
  char v10 = this;
  unsigned __int16 v9 = a2;
  char v8 = 0;
  if (this)
  {
    char v7 = 0;
    ot::NetworkData::TlvIterator::TlvIterator((ot::NetworkData::TlvIterator *)v6, v10);
    while (1)
    {
      BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(v9);
      ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>((uint64_t)v6, IsStable);
      char v7 = v4;
      if (!v4) {
        break;
      }
      if (ot::NetworkData::ServerTlv::operator==(v7, v9))
      {
        char v8 = 1;
        return v8 & 1;
      }
    }
  }
  return v8 & 1;
}

void ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>(uint64_t a1, char a2)
{
}

{
  ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServerTlv>(a1, a2);
}

BOOL ot::NetworkData::ServerTlv::operator==(ot::NetworkData::NetworkDataTlv *a1, ot::NetworkData::NetworkDataTlv *a2)
{
  int Length = ot::NetworkData::NetworkDataTlv::GetLength(a1);
  BOOL v8 = 0;
  if (Length == ot::NetworkData::NetworkDataTlv::GetLength(a2))
  {
    __s1 = (void *)ot::NetworkData::NetworkDataTlv::GetValue(a1);
    __s2 = (void *)ot::NetworkData::NetworkDataTlv::GetValue(a2);
    unsigned __int8 v2 = ot::NetworkData::NetworkDataTlv::GetLength(a1);
    return memcmp(__s1, __s2, v2) == 0;
  }
  return v8;
}

{
  return ot::NetworkData::ServerTlv::operator==(a1, a2);
}

uint64_t ot::NetworkData::Leader::UpdatePrefix(ot::NetworkData::Leader *this, ot::NetworkData::PrefixTlv *a2)
{
  uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  return ot::NetworkData::Leader::UpdateTlv(this, a2, SubTlvs);
}

uint64_t ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::Leader *this, ot::NetworkData::NetworkDataTlv *a2, const ot::NetworkData::NetworkDataTlv *a3)
{
  unsigned __int8 v6 = 1;
  if (a3 == (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(a2))
  {
    ot::NetworkData::MutableNetworkData::RemoveTlv(this, a2);
    return 0;
  }
  else
  {
    for (unsigned __int16 i = a3;
          (unint64_t)i < ot::NetworkData::NetworkDataTlv::GetNext(a2);
          unsigned __int16 i = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
    {
      if (ot::NetworkData::NetworkDataTlv::IsStable(i))
      {
        ot::NetworkData::NetworkDataTlv::SetStable(a2);
        return v6;
      }
    }
    ot::NetworkData::NetworkDataTlv::ClearStable(a2);
  }
  return v6;
}

uint64_t ot::NetworkData::Leader::UpdateService(ot::NetworkData::Leader *this, ot::NetworkData::ServiceTlv *a2)
{
  uint64_t SubTlvs = (const ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  return ot::NetworkData::Leader::UpdateTlv(this, a2, SubTlvs);
}

unsigned char *ot::NetworkData::NetworkDataTlv::SetStable(unsigned char *this)
{
  *this |= 1u;
  return this;
}

{
  return ot::NetworkData::NetworkDataTlv::SetStable(this);
}

unsigned char *ot::NetworkData::NetworkDataTlv::ClearStable(unsigned char *this)
{
  *this &= ~1u;
  return this;
}

{
  return ot::NetworkData::NetworkDataTlv::ClearStable(this);
}

void ot::NetworkData::Leader::CheckForNetDataGettingFull(ot::NetworkData::Leader *this, const ot::NetworkData::NetworkData *a2, unsigned __int16 a3)
{
  unsigned __int8 v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (!ot::Mle::Mle::IsLeader(v3))
  {
    Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
    ot::NetworkData::Leader::Leader((ot::NetworkData::Leader *)v10, Instance);
    ot::NetworkData::Leader::MarkAsClone((ot::NetworkData::Leader *)v10);
    if (ot::NetworkData::NetworkData::CopyNetworkData((uint64_t)this, 0, (ot::NetworkData::MutableNetworkData *)v10))__assert_rtn("CheckForNetDataGettingFull", "network_data_leader_ftd.cpp", 732, "false"); {
    if (a3 != 65534)
    }
      ot::NetworkData::Leader::RemoveBorderRouter((ot::InstanceLocator *)v10, a3, 0);
    char v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v5);
    ot::NetworkData::Leader::RegisterNetworkData((ot::NetworkData::Leader *)v10, Rloc16, a2);
  }
}

uint64_t ot::NetworkData::Leader::MarkAsClone(ot::NetworkData::Leader *this)
{
  *((unsigned char *)this + 26ot::ThreadTlv::SetType(this, 7) = 1;
  return ot::NetworkData::Leader::ContextIds::MarkAsClone((uint64_t)this + 272);
}

uint64_t ot::NetworkData::Leader::ContextIds::MarkAsClone(uint64_t this)
{
  *(unsigned char *)(this + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 1;
  return this;
}

{
  return ot::NetworkData::Leader::ContextIds::MarkAsClone(this);
}

void ot::NetworkData::Leader::RemoveRloc(ot::NetworkData::MutableNetworkData *a1, unsigned __int16 a2, char a3, ot::NetworkData::NetworkData *a4, ot::NetworkData::Leader::ChangedFlags *a5)
{
  unsigned __int16 v27 = a1;
  unsigned __int16 v26 = a2;
  char v25 = a3;
  unsigned __int8 v24 = a4;
  char v23 = a5;
  ot::NetworkData::MutableNetworkData::GetTlvsStart(a1);
  unint64_t Next = v5;
  while (1)
  {
    char v15 = Next;
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(a1);
    if ((unint64_t)v15 >= v6) {
      break;
    }
    int Type = ot::NetworkData::NetworkDataTlv::GetType(Next);
    if (Type == 1)
    {
      size_t v21 = 0;
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      size_t v21 = v7;
      char v20 = 0;
      char v13 = v24;
      uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(v7);
      Prefixint Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v21);
      char v20 = ot::NetworkData::NetworkData::FindPrefix(v13, Prefix, PrefixLength);
      ot::NetworkData::Leader::RemoveRlocInPrefix((uint64_t)a1, v21, v26, v25, v20, v23);
      if (ot::NetworkData::Leader::UpdatePrefix(a1, v21)) {
        goto LABEL_9;
      }
    }
    else
    {
      if (Type != 5) {
        goto LABEL_9;
      }
      unsigned __int16 v19 = 0;
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      unsigned __int16 v19 = v9;
      ot::NetworkData::ServiceTlv::GetServiceData(v9, (uint64_t)v18);
      uint64_t v11 = (uint64_t)v24;
      int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v19);
      Service = ot::NetworkData::NetworkData::FindService(v11, EnterpriseNumber, (uint64_t)v18, 1);
      ot::NetworkData::Leader::RemoveRlocInService(a1, v19, v26, v25, Service, v23);
      if (ot::NetworkData::Leader::UpdateService(a1, v19)) {
LABEL_9:
      }
        unint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
    }
  }
}

uint64_t ot::NetworkData::Leader::AddPrefix(ot::NetworkData::Leader *this, const ot::NetworkData::PrefixTlv *a2, ot::NetworkData::Leader::ChangedFlags *a3)
{
  unsigned int HasRoute = 0;
  uint64_t Prefix = (unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(a2);
  Prefixint Length = ot::NetworkData::PrefixTlv::GetPrefixLength(a2);
  ot::NetworkData::MutableNetworkData::FindPrefix(this, Prefix, PrefixLength);
  unsigned int v18 = v4;
  if (!v4)
  {
    unsigned __int8 v5 = ot::NetworkData::PrefixTlv::GetPrefixLength(a2);
    unsigned __int16 v6 = ot::NetworkData::PrefixTlv::CalculateSize((ot::NetworkData::PrefixTlv *)v5);
    ot::NetworkData::MutableNetworkData::AppendTlv(this, v6);
    ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
    unsigned int v18 = v7;
    if (!v7)
    {
      unsigned int HasRoute = 3;
      goto LABEL_14;
    }
    char DomainId = ot::NetworkData::PrefixTlv::GetDomainId(a2);
    unsigned __int8 v14 = ot::NetworkData::PrefixTlv::GetPrefixLength(a2);
    BOOL v8 = (const unsigned __int8 *)ot::NetworkData::PrefixTlv::GetPrefix(a2);
    ot::NetworkData::PrefixTlv::Init(v18, DomainId, v14, v8);
  }
  for (unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
        (unint64_t)i < ot::NetworkData::NetworkDataTlv::GetNext(a2);
        unsigned __int16 i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type)
    {
      if (Type == 2)
      {
        ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
        unsigned int HasRoute = ot::NetworkData::Leader::AddBorderRouter(this, v10, v18, a3);
        if (HasRoute) {
          break;
        }
      }
    }
    else
    {
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      unsigned int HasRoute = ot::NetworkData::Leader::AddHasRoute(this, v9, v18, a3);
      if (HasRoute) {
        break;
      }
    }
  }
LABEL_14:
  if (v18) {
    ot::NetworkData::Leader::UpdatePrefix(this, v18);
  }
  return HasRoute;
}

uint64_t ot::NetworkData::Leader::AddService(ot::NetworkData::Leader *this, const ot::NetworkData::ServiceTlv *a2, ot::NetworkData::Leader::ChangedFlags *a3)
{
  unsigned __int8 v24 = this;
  char v23 = a2;
  char v22 = a3;
  unsigned int v21 = 0;
  char v20 = 0;
  unsigned int v18 = 0;
  ot::NetworkData::ServiceTlv::GetServiceData(a2, (uint64_t)v19);
  int EnterpriseNumber = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v23);
  ot::NetworkData::MutableNetworkData::FindService((uint64_t)this, EnterpriseNumber, (uint64_t)v19, 1);
  char v20 = v4;
  if (!v4)
  {
    unsigned __int8 v17 = 0;
    unsigned int v21 = ot::NetworkData::Leader::AllocateServiceId(this, &v17);
    if (v21) {
      goto LABEL_9;
    }
    unsigned int v15 = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v23);
    unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v19);
    unsigned __int16 v6 = ot::NetworkData::ServiceTlv::CalculateSize((ot::NetworkData::ServiceTlv *)v15, Length);
    ot::NetworkData::MutableNetworkData::AppendTlv(this, v6);
    ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
    char v20 = v7;
    if (!v7)
    {
      unsigned int v21 = 3;
      goto LABEL_9;
    }
    unsigned __int8 v14 = v20;
    char v13 = v17;
    unsigned int v8 = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v23);
    ot::NetworkData::ServiceTlv::Init(v14, v13, v8, (uint64_t)v19);
  }
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(v23);
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(v23);
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(SubTlvs, Next);
  unsigned int v18 = v10;
  if (!v10) {
    __assert_rtn("AddService", "network_data_leader_ftd.cpp", 882, "server != nullptr");
  }
  unsigned int v21 = ot::NetworkData::Leader::AddServer(this, v18, v20, v22);
LABEL_9:
  if (v20) {
    ot::NetworkData::Leader::UpdateService(this, v20);
  }
  return v21;
}

void ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>(ot *a1, uint64_t a2, unsigned __int16 a3)
{
}

{
  ot::Logger::DumpAtLevel<(ot::LogLevel)5>((ot *)"NetworkData", a1, a2, a3);
}

uint64_t ot::NetworkData::Notifier::SignalNetworkDataFull(ot::NetworkData::Notifier *this)
{
  return ot::Tasklet::Post((ot::NetworkData::Notifier *)((char *)this + 56));
}

{
  return ot::NetworkData::Notifier::SignalNetworkDataFull(this);
}

void ot::NetworkData::MutableNetworkData::FindPrefix(ot::NetworkData::MutableNetworkData *this, const unsigned __int8 *a2, unsigned __int8 a3)
{
  ot::AsConst<ot::NetworkData::MutableNetworkData>();
  ot::NetworkData::NetworkData::FindPrefix(v3, a2, a3);
  ot::AsNonConst<ot::NetworkData::PrefixTlv>();
}

{
  ot::NetworkData::MutableNetworkData::FindPrefix(this, a2, a3);
}

uint64_t ot::NetworkData::PrefixTlv::CalculateSize(ot::NetworkData::PrefixTlv *this)
{
  return (unsigned __int16)(ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)this) + 4);
}

{
  return ot::NetworkData::PrefixTlv::CalculateSize(this);
}

uint64_t ot::NetworkData::PrefixTlv::Init(ot::NetworkData::PrefixTlv *this, char a2, unsigned __int8 a3, const unsigned __int8 *a4)
{
  ot::NetworkData::NetworkDataTlv::Init(this);
  ot::NetworkData::NetworkDataTlv::SetType(this, 1);
  *((unsigned char *)this + ot::Tlv::SetType(this, 2) = a2;
  *((unsigned char *)this + ot::Tlv::SetType(this, 3) = a3;
  __dst = (void *)ot::NetworkData::PrefixTlv::GetPrefix(this);
  unsigned __int8 v4 = ot::Ip6::Prefix::SizeForLength((ot::Ip6::Prefix *)a3);
  memcpy(__dst, a4, v4);
  return ot::NetworkData::PrefixTlv::SetSubTlvsLength(this, 0);
}

{
  return ot::NetworkData::PrefixTlv::Init(this, a2, a3, a4);
}

uint64_t ot::NetworkData::Leader::AddHasRoute(ot::NetworkData::Leader *this, const ot::NetworkData::HasRouteTlv *a2, ot::NetworkData::PrefixTlv *a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  unsigned int v15 = 0;
  BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a2);
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>((uint64_t)a3, IsStable);
  unsigned __int8 v14 = v5;
  uint64_t FirstEntry = (ot::NetworkData::HasRouteTlv *)ot::NetworkData::HasRouteTlv::GetFirstEntry(a2);
  if (!v14)
  {
    if (!ot::NetworkData::MutableNetworkData::CanInsert(this, 5u)) {
      return 3;
    }
    ot::NetworkData::NetworkDataTlv::GetNext(a3);
    ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
    unsigned __int8 v14 = (ot::NetworkData::NetworkDataTlv *)v7;
    ot::NetworkData::MutableNetworkData::Insert(this, v7, 2u);
    ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)a3, 2);
    ot::NetworkData::HasRouteTlv::Init(v14);
    if (ot::NetworkData::NetworkDataTlv::IsStable(a2)) {
      ot::NetworkData::NetworkDataTlv::SetStable(v14);
    }
  }
  if ((ot::NetworkData::Leader::ContainsMatchingEntry(v14, FirstEntry, v6) & 1) == 0)
  {
    if (ot::NetworkData::MutableNetworkData::CanInsert(this, 3u))
    {
      unint64_t Next = (char *)ot::NetworkData::NetworkDataTlv::GetNext(v14);
      ot::NetworkData::MutableNetworkData::Insert(this, Next, 3u);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v14, 3);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)a3, 3);
      uint64_t LastEntry = ot::NetworkData::HasRouteTlv::GetLastEntry(v14);
      *(_WORD *)uint64_t LastEntry = *(_WORD *)FirstEntry;
      *(unsigned char *)(LastEntry + ot::Tlv::SetType(this, 2) = *((unsigned char *)FirstEntry + 2);
      ot::NetworkData::Leader::ChangedFlags::Update(a4, v14);
    }
    else
    {
      return 3;
    }
  }
  return v15;
}

uint64_t ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::Leader *this, const ot::NetworkData::BorderRouterTlv *a2, ot::NetworkData::PrefixTlv *a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  unsigned __int16 v27 = this;
  unsigned __int16 v26 = a2;
  char v25 = a3;
  unsigned __int8 v24 = a4;
  unsigned int UnallocatedId = 0;
  BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a2);
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>((uint64_t)a3, IsStable);
  char v22 = v5;
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>((uint64_t)v25);
  unsigned int v21 = v6;
  unsigned __int8 v20 = 0;
  uint64_t FirstEntry = (ot::NetworkData::BorderRouterTlv *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(v26);
  if (v21
    || (unsigned int UnallocatedId = ot::NetworkData::Leader::ContextIds::GetUnallocatedId((ot::NetworkData::Leader *)((char *)this + 272), &v20)) == 0)
  {
    if (!v22)
    {
      __int16 v7 = 4;
      if (v21) {
        __int16 v7 = 0;
      }
      if (!ot::NetworkData::MutableNetworkData::CanInsert(this, v7 + 6)) {
        return 3;
      }
      ot::NetworkData::NetworkDataTlv::GetNext(v25);
      ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
      char v22 = v8;
      ot::NetworkData::MutableNetworkData::Insert(this, (char *)v8, 2u);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v25, 2);
      ot::NetworkData::BorderRouterTlv::Init(v22);
      if (ot::NetworkData::NetworkDataTlv::IsStable(v26)) {
        ot::NetworkData::NetworkDataTlv::SetStable(v22);
      }
    }
    if (!v21)
    {
      if (!ot::NetworkData::MutableNetworkData::CanInsert(this, 8u)) {
        return 3;
      }
      ot::NetworkData::NetworkDataTlv::GetNext(v25);
      ot::NetworkData::As<ot::NetworkData::ContextTlv>();
      unsigned int v21 = v9;
      ot::NetworkData::MutableNetworkData::Insert(this, (char *)v9, 4u);
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v25, 4);
      char v16 = v21;
      char v15 = v20;
      Prefixunsigned __int8 Length = ot::NetworkData::PrefixTlv::GetPrefixLength(v25);
      ot::NetworkData::ContextTlv::Init(v16, v15, PrefixLength);
    }
    if (ot::NetworkData::NetworkDataTlv::IsStable(v26)) {
      ot::NetworkData::NetworkDataTlv::SetStable(v21);
    }
    ot::NetworkData::ContextTlv::SetCompress((uint64_t)v21);
    unsigned __int8 ContextId = ot::NetworkData::ContextTlv::GetContextId(v21);
    ot::NetworkData::Leader::ContextIds::MarkAsInUse((ot::NetworkData::Leader *)((char *)this + 272), ContextId);
    if ((ot::NetworkData::Leader::ContainsMatchingEntry(v22, FirstEntry, v12) & 1) == 0)
    {
      if (ot::NetworkData::MutableNetworkData::CanInsert(this, 4u))
      {
        unint64_t Next = (char *)ot::NetworkData::NetworkDataTlv::GetNext(v22);
        ot::NetworkData::MutableNetworkData::Insert(this, Next, 4u);
        ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v22, 4);
        ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v25, 4);
        *(_DWORD *)ot::NetworkData::BorderRouterTlv::GetLastEntry(v2ot::Tlv::SetType(this, 2) = *(_DWORD *)FirstEntry;
        ot::NetworkData::Leader::ChangedFlags::Update(v24, v22);
      }
      else
      {
        return 3;
      }
    }
  }
  return UnallocatedId;
}

void ot::NetworkData::MutableNetworkData::FindService(uint64_t a1, int a2, uint64_t a3, char a4)
{
  ot::AsConst<ot::NetworkData::MutableNetworkData>();
  ot::NetworkData::NetworkData::FindService(v4, a2, a3, a4);
  ot::AsNonConst<ot::NetworkData::ServiceTlv>();
}

{
  ot::NetworkData::MutableNetworkData::FindService(a1, a2, a3, a4);
}

uint64_t ot::NetworkData::Leader::AllocateServiceId(ot::NetworkData::Leader *this, unsigned __int8 *a2)
{
  unsigned int v11 = 23;
  if (*((unsigned char *)this + 267))
  {
    *a2 = 0;
    return 0;
  }
  else
  {
    for (unsigned __int8 i = 0; i <= 0xFu; ++i)
    {
      if (!ot::NetworkData::Leader::FindServiceById(this, i))
      {
        *a2 = i;
        unsigned int v11 = 0;
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Allocated Service ID = %d", v2, v3, v4, v5, v6, v7, i);
        return v11;
      }
    }
  }
  return v11;
}

uint64_t ot::NetworkData::ServiceTlv::CalculateSize(ot::NetworkData::ServiceTlv *this, unsigned __int8 a2)
{
  __int16 v2 = 0;
  if (this != 44970) {
    __int16 v2 = 4;
  }
  return (unsigned __int16)(a2 + 4 + v2);
}

{
  return ot::NetworkData::ServiceTlv::CalculateSize(this, a2);
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(ot::NetworkData::NetworkDataTlv *a1, unint64_t a2)
{
}

{
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(a1, a2);
}

uint64_t ot::NetworkData::Leader::AddServer(ot::NetworkData::Leader *this, const ot::NetworkData::ServerTlv *a2, ot::NetworkData::ServiceTlv *a3, ot::NetworkData::Leader::ChangedFlags *a4)
{
  unsigned __int8 v17 = this;
  char v16 = a2;
  char v15 = a3;
  unsigned __int8 v14 = a4;
  unsigned int v13 = 0;
  uint64_t v12 = 0;
  unsigned __int8 Size = ot::NetworkData::NetworkDataTlv::GetSize(a2);
  if ((ot::NetworkData::Leader::ContainsMatchingServer(v15, v16, v4) & 1) == 0)
  {
    if (ot::NetworkData::MutableNetworkData::CanInsert(this, Size))
    {
      ot::NetworkData::ServerTlv::GetServerData(v16, (uint64_t)v11);
      ot::NetworkData::NetworkDataTlv::GetNext(v15);
      ot::NetworkData::As<ot::NetworkData::ServerTlv>();
      uint64_t v12 = v5;
      ot::NetworkData::MutableNetworkData::Insert(this, (char *)v5, Size);
      unsigned int v8 = v12;
      unsigned __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v16);
      ot::NetworkData::ServerTlv::Init(v8, Server16, (uint64_t)v11);
      if (ot::NetworkData::NetworkDataTlv::IsStable(v16)) {
        ot::NetworkData::NetworkDataTlv::SetStable(v12);
      }
      ot::NetworkData::NetworkDataTlv::IncreaseLength((uint64_t)v15, Size);
      ot::NetworkData::Leader::ChangedFlags::Update(v14, v12);
    }
    else
    {
      return 3;
    }
  }
  return v13;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>(uint64_t a1, char a2)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::HasRouteTlv>(a1, a2);
}

uint64_t ot::NetworkData::NetworkDataTlv::IncreaseLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1) += a2;
  return this;
}

{
  return ot::NetworkData::NetworkDataTlv::IncreaseLength(this, a2);
}

uint64_t ot::NetworkData::HasRouteTlv::Init(ot::NetworkData::HasRouteTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 0);
}

{
  return ot::NetworkData::HasRouteTlv::Init(this);
}

BOOL ot::NetworkData::Leader::ChangedFlags::Update(ot::NetworkData::Leader::ChangedFlags *this, const ot::NetworkData::NetworkDataTlv *a2)
{
  *(unsigned char *)this = 1;
  char v2 = *((unsigned char *)this + 1);
  BOOL result = 1;
  char v5 = 1;
  if ((v2 & 1) == 0)
  {
    BOOL result = ot::NetworkData::NetworkDataTlv::IsStable(a2);
    char v5 = result;
  }
  *((unsigned char *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v5 & 1;
  return result;
}

{
  return ot::NetworkData::Leader::ChangedFlags::Update(this, a2);
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(uint64_t a1, char a2)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(a1, a2);
}

uint64_t ot::NetworkData::Leader::ContextIds::GetUnallocatedId(ot::NetworkData::Leader::ContextIds *this, unsigned __int8 *a2)
{
  unsigned int v5 = 23;
  if (*((unsigned char *)this + 64))
  {
    *a2 = 1;
    return 0;
  }
  else
  {
    for (unsigned __int8 i = 1; i <= 0xFu; ++i)
    {
      if (ot::NetworkData::Leader::ContextIds::IsUnallocated(this, i))
      {
        *a2 = i;
        return 0;
      }
    }
  }
  return v5;
}

uint64_t ot::NetworkData::BorderRouterTlv::Init(ot::NetworkData::BorderRouterTlv *this)
{
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 0);
}

{
  return ot::NetworkData::BorderRouterTlv::Init(this);
}

uint64_t ot::NetworkData::ContextTlv::Init(ot::NetworkData::ContextTlv *this, char a2, char a3)
{
  ot::NetworkData::NetworkDataTlv::Init(this);
  ot::NetworkData::NetworkDataTlv::SetType(this, 3);
  uint64_t result = ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)this, 2);
  *((unsigned char *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = a2 & 0xF;
  *((unsigned char *)this + ot::Tlv::SetType(this, 3) = a3;
  return result;
}

{
  return ot::NetworkData::ContextTlv::Init(this, a2, a3);
}

uint64_t ot::NetworkData::ContextTlv::SetCompress(uint64_t this)
{
  *(unsigned char *)(this + 2) |= 0x10u;
  return this;
}

{
  return ot::NetworkData::ContextTlv::SetCompress(this);
}

_DWORD *ot::NetworkData::Leader::ContextIds::MarkAsInUse(ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::SetValue((_DWORD *)this + a2 - 1, 1);
}

{
  return ot::NetworkData::Leader::ContextIds::MarkAsInUse(this, a2);
}

uint64_t ot::NetworkData::ServerTlv::Init(ot::NetworkData::ServerTlv *a1, unsigned __int16 a2, uint64_t a3)
{
  ot::NetworkData::NetworkDataTlv::Init(a1);
  ot::NetworkData::NetworkDataTlv::SetType(a1, 6);
  ot::NetworkData::ServerTlv::SetServer16(a1, a2);
  ot::NetworkData::ServerTlv::GetServerData(a1);
  ot::Data<(ot::DataLengthType)0>::CopyBytesTo(a3, v3);
  char Length = ot::Data<(ot::DataLengthType)0>::GetLength(a3);
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)a1, Length + 2);
}

{
  return ot::NetworkData::ServerTlv::Init(a1, a2, a3);
}

ot::NetworkData::ServiceTlv *ot::NetworkData::Leader::FindServiceById(ot::NetworkData::Leader *this, char a2)
{
  unsigned int v11 = this;
  char v10 = a2;
  unsigned __int16 v9 = 0;
  uint64_t TlvsStart = ot::NetworkData::NetworkData::GetTlvsStart(this);
  uint64_t TlvsEnd = ot::NetworkData::NetworkData::GetTlvsEnd(this);
  ot::Cli::Dataset::Dataset(v8, TlvsStart, TlvsEnd);
  do
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::ServiceTlv>((uint64_t)v8);
    unsigned __int16 v9 = v3;
    if (!v3) {
      break;
    }
    char ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(v9);
  }
  while (v10 != ServiceId);
  return v9;
}

void ot::NetworkData::Leader::RemoveRlocInPrefix(uint64_t a1, ot::NetworkData::PrefixTlv *a2, unsigned __int16 a3, char a4, ot::NetworkData::Leader *a5, ot::NetworkData::Leader::ChangedFlags *a6)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  while ((unint64_t)SubTlvs < ot::NetworkData::NetworkDataTlv::GetNext(a2))
  {
    int Type = ot::NetworkData::NetworkDataTlv::GetType(SubTlvs);
    if (Type)
    {
      if (Type == 2)
      {
        ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
        ot::NetworkData::Leader::RemoveRlocInBorderRouter((ot::NetworkData::MutableNetworkData *)a1, (uint64_t)a2, v7, a3, a4, a5, a6);
        if (!ot::NetworkData::NetworkDataTlv::GetLength(SubTlvs)) {
          goto LABEL_7;
        }
      }
LABEL_10:
      uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(SubTlvs);
    }
    else
    {
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      ot::NetworkData::Leader::RemoveRlocInHasRoute((ot::NetworkData::MutableNetworkData *)a1, (uint64_t)a2, v6, a3, a4, a5, a6);
      if (ot::NetworkData::NetworkDataTlv::GetLength(SubTlvs)) {
        goto LABEL_10;
      }
LABEL_7:
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a2, 2);
      ot::NetworkData::MutableNetworkData::RemoveTlv((ot::NetworkData::MutableNetworkData *)a1, SubTlvs);
    }
  }
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>((uint64_t)a2);
  unsigned __int8 v14 = v8;
  if (v8)
  {
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>((uint64_t)a2);
    if (v9)
    {
      ot::NetworkData::ContextTlv::SetCompress((uint64_t)v14);
      unsigned __int8 ContextId = ot::NetworkData::ContextTlv::GetContextId(v14);
      ot::NetworkData::Leader::ContextIds::MarkAsInUse((ot::NetworkData::Leader::ContextIds *)(a1 + 272), ContextId);
    }
    else
    {
      ot::NetworkData::ContextTlv::ClearCompress((uint64_t)v14);
      unsigned __int8 v10 = ot::NetworkData::ContextTlv::GetContextId(v14);
      ot::NetworkData::Leader::ContextIds::ScheduleToRemove(a1 + 272, v10);
    }
  }
}

void ot::NetworkData::Leader::RemoveRlocInService(ot::NetworkData::MutableNetworkData *a1, ot::NetworkData::ServiceTlv *a2, unsigned __int16 a3, char a4, ot::NetworkData::Leader *a5, ot::NetworkData::Leader::ChangedFlags *a6)
{
  uint64_t SubTlvs = ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
  while (1)
  {
    uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(SubTlvs, Next);
    uint64_t v12 = v7;
    if (!v7) {
      break;
    }
    unsigned __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v7);
    if (!ot::NetworkData::Leader::RlocMatch(Server16, a3, a4)
      || (ot::NetworkData::Leader::ContainsMatchingServer(a5, v12, v9) & 1) != 0)
    {
      uint64_t SubTlvs = ot::NetworkData::NetworkDataTlv::GetNext(v12);
    }
    else
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(v12);
      ot::NetworkData::Leader::ChangedFlags::Update(a6, v12);
      ot::NetworkData::MutableNetworkData::RemoveTlv(a1, v12);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a2, Size);
    }
  }
}

unint64_t ot::NetworkData::Leader::RemoveRlocInHasRoute(ot::NetworkData::MutableNetworkData *a1, uint64_t a2, ot::NetworkData::HasRouteTlv *a3, unsigned __int16 a4, char a5, ot::NetworkData::Leader *a6, ot::NetworkData::Leader::ChangedFlags *a7)
{
  uint64_t FirstEntry = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetFirstEntry(a3);
  while (1)
  {
    unint64_t result = ot::NetworkData::HasRouteTlv::GetLastEntry(a3);
    if ((unint64_t)FirstEntry > result) {
      break;
    }
    unsigned __int16 Rloc = ot::NetworkData::HasRouteEntry::GetRloc(FirstEntry);
    if (!ot::NetworkData::Leader::RlocMatch(Rloc, a4, a5)
      || (BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a3),
          (ot::NetworkData::Leader::ContainsMatchingEntry(a6, (const ot::NetworkData::PrefixTlv *)IsStable, FirstEntry, v10) & 1) != 0))
    {
      uint64_t FirstEntry = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteEntry::GetNext(FirstEntry);
    }
    else
    {
      ot::NetworkData::Leader::ChangedFlags::Update(a7, a3);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a3, 3);
      ot::NetworkData::NetworkDataTlv::DecreaseLength(a2, 3);
      ot::NetworkData::MutableNetworkData::Remove(a1, (char *)FirstEntry, 3u);
    }
  }
  return result;
}

uint64_t ot::NetworkData::NetworkDataTlv::DecreaseLength(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1) -= a2;
  return this;
}

{
  return ot::NetworkData::NetworkDataTlv::DecreaseLength(this, a2);
}

unint64_t ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::MutableNetworkData *a1, uint64_t a2, ot::NetworkData::BorderRouterTlv *a3, unsigned __int16 a4, char a5, ot::NetworkData::Leader *a6, ot::NetworkData::Leader::ChangedFlags *a7)
{
  uint64_t FirstEntry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetFirstEntry(a3);
  while (1)
  {
    unint64_t result = ot::NetworkData::BorderRouterTlv::GetLastEntry(a3);
    if ((unint64_t)FirstEntry > result) {
      break;
    }
    unsigned __int16 Rloc = ot::NetworkData::BorderRouterEntry::GetRloc(FirstEntry);
    if (!ot::NetworkData::Leader::RlocMatch(Rloc, a4, a5)
      || (BOOL IsStable = ot::NetworkData::NetworkDataTlv::IsStable(a3),
          (ot::NetworkData::Leader::ContainsMatchingEntry(a6, (const ot::NetworkData::PrefixTlv *)IsStable, FirstEntry, v10) & 1) != 0))
    {
      uint64_t FirstEntry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterEntry::GetNext(FirstEntry);
    }
    else
    {
      ot::NetworkData::Leader::ChangedFlags::Update(a7, a3);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a3, 4);
      ot::NetworkData::NetworkDataTlv::DecreaseLength(a2, 4);
      ot::NetworkData::MutableNetworkData::Remove(a1, (char *)FirstEntry, 4u);
    }
  }
  return result;
}

void ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(uint64_t a1)
{
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::BorderRouterTlv>(a1);
}

uint64_t ot::NetworkData::ContextTlv::ClearCompress(uint64_t this)
{
  *(unsigned char *)(this + 2) &= ~0x10u;
  return this;
}

{
  return ot::NetworkData::ContextTlv::ClearCompress(this);
}

uint64_t ot::NetworkData::Leader::ContextIds::ScheduleToRemove(uint64_t this, unsigned __int8 a2)
{
  uint64_t v10 = this;
  unsigned __int8 v9 = a2;
  unsigned int v5 = (unsigned int *)this;
  if ((*(unsigned char *)(this + 64) & 1) == 0)
  {
    this = ot::NetworkData::Leader::ContextIds::IsInUse((ot::NetworkData::Leader::ContextIds *)this, v9);
    if (this)
    {
      unsigned __int8 v3 = v9;
      int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)this);
      int v2 = ot::Time::SecToMsec((ot::Time *)v5[15]);
      int v8 = ot::Time::operator+(&Now, v2);
      ot::NetworkData::Leader::ContextIds::SetRemoveTime((uint64_t)v5, v3, v8);
      uint64_t v4 = (int *)(ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>((ot::InstanceLocator *)v5) + 344);
      int v6 = ot::NetworkData::Leader::ContextIds::GetRemoveTime((ot::NetworkData::Leader::ContextIds *)v5, v9);
      return ot::TimerMilli::FireAtIfEarlier(v4, v6);
    }
  }
  return this;
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(uint64_t a1, uint64_t a2)
{
}

{
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(a1, a2);
}

ot::NetworkData::LeaderBase *ot::NetworkData::Leader::RemoveContext(ot::NetworkData::Leader *this, unsigned __int8 a2)
{
  ot::NetworkData::MutableNetworkData::GetTlvsStart(this);
  uint64_t Next = v2;
  while (1)
  {
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::PrefixTlv>(Next, v3);
    unsigned int v13 = v4;
    if (!v4) {
      break;
    }
    ot::NetworkData::Leader::RemoveContext(this, v4, a2);
    if (ot::NetworkData::Leader::UpdatePrefix(this, v13)) {
      uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(v13);
    }
  }
  return ot::NetworkData::Leader::IncrementVersions(this, 1, v5, v6, v7, v8, v9, v10);
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::PrefixTlv>(uint64_t a1, uint64_t a2)
{
}

{
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::PrefixTlv>(a1, a2);
}

void ot::NetworkData::Leader::RemoveContext(ot::NetworkData::Leader *this, ot::NetworkData::PrefixTlv *a2, unsigned __int8 a3)
{
  uint64_t SubTlvs = ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
  while (1)
  {
    uint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ContextTlv>(SubTlvs, Next);
    uint64_t v7 = v4;
    if (!v4) {
      break;
    }
    if (a3 == ot::NetworkData::ContextTlv::GetContextId(v4))
    {
      char Size = ot::NetworkData::NetworkDataTlv::GetSize(v7);
      ot::NetworkData::MutableNetworkData::RemoveTlv(this, v7);
      ot::NetworkData::NetworkDataTlv::DecreaseLength((uint64_t)a2, Size);
    }
    else
    {
      uint64_t SubTlvs = ot::NetworkData::NetworkDataTlv::GetNext(v7);
    }
  }
}

void ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ContextTlv>(uint64_t a1, uint64_t a2)
{
}

{
  ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ContextTlv>(a1, a2);
}

void ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset(ot::NetworkData::Leader *this)
{
  unsigned __int8 v17 = this;
  char v16 = 0;
  ot::NetworkData::MutableNetworkData::GetTlvsStart(this);
  uint64_t v9 = v1;
  ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
  ot::Cli::Dataset::Dataset(v15, v9, v2);
  unsigned int v14 = 0;
  ot::NetworkData::Leader::ChangedFlags::ChangedFlags((ot::NetworkData::Leader::ChangedFlags *)v13);
  unsigned __int16 v12 = 0;
  *((unsigned char *)this + 268) = 0;
  while (!ot::NetworkData::NetworkData::GetNextServer((const unsigned __int8 **)this, &v14, &v12))
  {
    uint64_t v8 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
    unsigned __int8 v3 = ot::Mle::RouterIdFromRloc16((ot::Mle *)v12);
    if (!ot::RouterTable::IsAllocated(v8, v3))
    {
      ot::NetworkData::Leader::RemoveRloc(this, v12, 1, (ot::NetworkData::Leader::ChangedFlags *)v13);
      unsigned int v14 = 0;
    }
  }
  ot::NetworkData::Leader::IncrementVersions(this, (const ot::NetworkData::Leader::ChangedFlags *)v13);
  while (1)
  {
    ot::NetworkData::TlvIterator::Iterate<ot::NetworkData::PrefixTlv>((uint64_t)v15);
    char v16 = v4;
    if (!v4) {
      break;
    }
    ot::NetworkData::PrefixTlv::FindSubTlv<ot::NetworkData::ContextTlv>(v16);
    unsigned int v11 = v5;
    if (v5)
    {
      unsigned __int8 ContextId = ot::NetworkData::ContextTlv::GetContextId(v5);
      ot::NetworkData::Leader::ContextIds::MarkAsInUse((ot::NetworkData::Leader *)((char *)this + 272), ContextId);
      if (!ot::NetworkData::ContextTlv::IsCompress(v11))
      {
        unsigned __int8 v7 = ot::NetworkData::ContextTlv::GetContextId(v11);
        ot::NetworkData::Leader::ContextIds::ScheduleToRemove((uint64_t)this + 272, v7);
      }
    }
  }
}

uint64_t ot::NetworkData::Leader::ContextIds::HandleTimer(ot::NetworkData::Leader::ContextIds *this)
{
  unsigned int v13 = this;
  int Now = 0;
  int Now = ot::TimerMilli::GetNow(this);
  int DistantFuture = ot::Time::GetDistantFuture((ot::Time *)&Now);
  if (*((unsigned char *)this + 64)) {
    __assert_rtn("HandleTimer", "network_data_leader_ftd.cpp", 1533, "!mIsClone");
  }
  for (unsigned __int8 i = 1; i <= 0xFu; ++i)
  {
    if (!ot::NetworkData::Leader::ContextIds::IsUnallocated(this, i)
      && !ot::NetworkData::Leader::ContextIds::IsInUse(this, i))
    {
      int v9 = ot::NetworkData::Leader::ContextIds::GetRemoveTime(this, i);
      if (ot::Time::operator>=(&Now, &v9))
      {
        ot::NetworkData::Leader::ContextIds::MarkAsUnallocated(this, i);
        uint64_t v1 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        ot::NetworkData::Leader::RemoveContext(v1, i);
      }
      else
      {
        int v7 = DistantFuture;
        int v6 = ot::NetworkData::Leader::ContextIds::GetRemoveTime(this, i);
        int v8 = ot::Min<ot::Time>(v7, v6);
        int DistantFuture = v8;
      }
    }
  }
  int v5 = ot::Time::GetDistantFuture((ot::Time *)&Now);
  uint64_t result = ot::Unequatable<ot::Time>::operator!=(&DistantFuture, &v5);
  if (result)
  {
    uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    return ot::TimerMilli::FireAt((ot::InstanceLocator *)(v3 + 344), DistantFuture);
  }
  return result;
}

_DWORD *ot::NetworkData::Leader::ContextIds::MarkAsUnallocated(ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::SetValue((_DWORD *)this + a2 - 1, 0);
}

{
  return ot::NetworkData::Leader::ContextIds::MarkAsUnallocated(this, a2);
}

BOOL ot::NetworkData::Leader::ContextIds::IsUnallocated(ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::GetValue((ot::NetworkData::Leader::ContextIds *)((char *)this + 4 * a2 - 4)) == 0;
}

{
  return ot::NetworkData::Leader::ContextIds::IsUnallocated(this, a2);
}

BOOL ot::NetworkData::Leader::ContextIds::IsInUse(ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return ot::Time::GetValue((ot::NetworkData::Leader::ContextIds *)((char *)this + 4 * a2 - 4)) == 1;
}

{
  return ot::NetworkData::Leader::ContextIds::IsInUse(this, a2);
}

_DWORD *ot::NetworkData::Leader::ContextIds::SetRemoveTime(uint64_t a1, unsigned __int8 a2, int a3)
{
  int v8 = a3;
  for (unsigned int i = ot::Time::GetValue((ot::Time *)&v8); ; ++i)
  {
    BOOL v4 = 1;
    if (i) {
      BOOL v4 = i == 1;
    }
    if (!v4) {
      break;
    }
  }
  return ot::Time::SetValue((_DWORD *)(a1 + 4 * (a2 - 1)), i);
}

uint64_t ot::NetworkData::Leader::ContextIds::GetRemoveTime(ot::NetworkData::Leader::ContextIds *this, unsigned __int8 a2)
{
  return *((unsigned int *)this + a2 - 1);
}

{
  return ot::NetworkData::Leader::ContextIds::GetRemoveTime(this, a2);
}

BOOL ot::Unequatable<ot::Time>::operator!=(_DWORD *a1, _DWORD *a2)
{
  return !ot::Time::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Time>::operator!=(a1, a2);
}

unsigned char *ot::NetworkData::Leader::ChangedFlags::ChangedFlags(unsigned char *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

void ot::NetworkData::ServerTlv::GetServerData(ot::NetworkData::ServerTlv *this)
{
  ot::AsConst<ot::NetworkData::ServerTlv>();
  ot::NetworkData::ServerTlv::GetServerData(v1);
  ot::AsNonConst<unsigned char>();
}

{
  ot::NetworkData::ServerTlv::GetServerData(this);
}

uint64_t ot::TimerMilliIn<ot::NetworkData::Leader,&ot::NetworkData::Leader::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
  return ((uint64_t (*)(uint64_t))ot::NetworkData::Leader::HandleTimer)(v2);
}

void ot::NetworkData::PrefixTlv::FindSubTlv(uint64_t a1, unsigned __int8 a2, char a3)
{
  char v4 = a3 & 1;
  ot::AsConst<ot::NetworkData::PrefixTlv>();
  ot::NetworkData::PrefixTlv::FindSubTlv(v3, a2, v4 & 1);
  ot::AsNonConst<ot::NetworkData::NetworkDataTlv>();
}

{
  ot::NetworkData::PrefixTlv::FindSubTlv(a1, a2, a3);
}

void ot::NetworkData::NetworkDataTlv::Find(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  ot::AsConst<ot::NetworkData::NetworkDataTlv>();
  int v5 = v3;
  ot::AsConst<ot::NetworkData::NetworkDataTlv>();
  ot::NetworkData::NetworkDataTlv::Find(v5, v4, a3);
  ot::AsNonConst<ot::NetworkData::NetworkDataTlv>();
}

{
  ot::NetworkData::NetworkDataTlv::Find(a1, a2, a3);
}

uint64_t ot::NetworkData::Local::AddOnMeshPrefix(ot::NetworkData::Local *this, const ot::NetworkData::OnMeshPrefixConfig *a2)
{
  unsigned int v8 = 7;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  if (ot::NetworkData::OnMeshPrefixConfig::IsValid(a2, Instance))
  {
    uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix(a2);
    unsigned __int16 v3 = ot::NetworkData::OnMeshPrefixConfig::ConvertToTlvFlags(a2);
    return ot::NetworkData::Local::AddPrefix(this, Prefix, 2, v3, HIBYTE(*(_WORD *)((char *)a2 + 17)) & 1);
  }
  return v8;
}

uint64_t ot::NetworkData::Local::AddPrefix(ot::NetworkData::Local *a1, ot::Ip6::Prefix *a2, char a3, unsigned __int16 a4, char a5)
{
  unsigned __int8 v34 = a1;
  unsigned __int8 v33 = a2;
  char v32 = a3;
  unsigned __int16 v31 = a4;
  char v30 = a5 & 1;
  unsigned int v29 = 0;
  unsigned __int8 v28 = 0;
  unsigned __int16 v27 = 0;
  ot::NetworkData::Local::RemovePrefix(a1, a2);
  IgnoreError();
  unsigned __int8 v5 = 6;
  if (v32 != 2) {
    unsigned __int8 v5 = 5;
  }
  unsigned __int8 v28 = v5;
  unsigned __int8 BytesSize = ot::Ip6::Prefix::GetBytesSize(v33);
  ot::NetworkData::MutableNetworkData::AppendTlv(a1, BytesSize + 4 + v28);
  ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
  unsigned __int16 v27 = v7;
  if (v7)
  {
    long long v25 = *(_OWORD *)v33;
    char v26 = *((unsigned char *)v33 + 16);
    ot::NetworkData::PrefixTlv::Init(v27, 0, (ot::Ip6::Prefix *)&v25);
    ot::NetworkData::PrefixTlv::SetSubTlvsLength(v27, v28);
    if (v32 == 2)
    {
      ot::NetworkData::PrefixTlv::GetSubTlvs(v27);
      ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
      unsigned __int8 v24 = v8;
      ot::NetworkData::BorderRouterTlv::Init(v8);
      char Length = ot::NetworkData::NetworkDataTlv::GetLength(v24);
      ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)v24, Length + 4);
      Entry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v24, 0);
      ot::NetworkData::BorderRouterEntry::Init(Entry);
      unsigned int v11 = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v24, 0);
      ot::NetworkData::BorderRouterEntry::SetFlags(v11, v31);
    }
    else
    {
      ot::NetworkData::PrefixTlv::GetSubTlvs(v27);
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      char v23 = v12;
      ot::NetworkData::HasRouteTlv::Init(v12);
      char v13 = ot::NetworkData::NetworkDataTlv::GetLength(v23);
      ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)v23, v13 + 3);
      unsigned int v14 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v23, 0);
      ot::NetworkData::HasRouteEntry::Init(v14);
      uint64_t v15 = ot::NetworkData::HasRouteTlv::GetEntry(v23, 0);
      ot::NetworkData::HasRouteEntry::SetFlags(v15, v31);
    }
    if (v30)
    {
      ot::NetworkData::NetworkDataTlv::SetStable(v27);
      uint64_t SubTlvs = (unsigned char *)ot::NetworkData::PrefixTlv::GetSubTlvs(v27);
      ot::NetworkData::NetworkDataTlv::SetStable(SubTlvs);
    }
    ot::NetworkData::MutableNetworkData::GetBytes(a1);
    uint64_t v21 = v17;
    unsigned __int8 v18 = ot::NetworkData::NetworkData::GetLength(a1);
    ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"AddPrefix", v21, v18);
  }
  else
  {
    unsigned int v29 = 3;
  }
  if (v29 == 3)
  {
    unsigned __int16 v19 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
    ot::NetworkData::Notifier::SignalNetworkDataFull(v19);
  }
  return v29;
}

BOOL ot::NetworkData::Local::ContainsOnMeshPrefix(ot::NetworkData::Local *this, const ot::Ip6::Prefix *a2)
{
  BOOL v3 = 0;
  uint64_t Prefix = ot::NetworkData::NetworkData::FindPrefix(this, a2);
  if (Prefix) {
    return ot::NetworkData::PrefixTlv::FindSubTlv(Prefix, 2u) != 0;
  }
  return v3;
}

ot::NetworkData::PrefixTlv *ot::NetworkData::NetworkData::FindPrefix(ot::NetworkData::NetworkData *this, const ot::Ip6::Prefix *a2)
{
  ot::Ip6::Prefix::GetBytes(a2);
  unsigned __int8 v5 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  return ot::NetworkData::NetworkData::FindPrefix(this, v5, Length);
}

{
  return ot::NetworkData::NetworkData::FindPrefix(this, a2);
}

uint64_t ot::NetworkData::Local::AddHasRoutePrefix(ot::NetworkData::Local *this, const ot::NetworkData::ExternalRouteConfig *a2)
{
  unsigned int v8 = 7;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  if (ot::NetworkData::ExternalRouteConfig::IsValid(a2, Instance))
  {
    uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::ExternalRouteConfig::GetPrefix(a2);
    unsigned __int8 v3 = ot::NetworkData::ExternalRouteConfig::ConvertToTlvFlags(a2);
    return ot::NetworkData::Local::AddPrefix(this, Prefix, 0, v3, (*((unsigned char *)a2 + 20) & 8) != 0);
  }
  return v8;
}

uint64_t ot::NetworkData::Local::RemovePrefix(ot::NetworkData::Local *this, const ot::Ip6::Prefix *a2)
{
  unsigned int v8 = 0;
  ot::NetworkData::MutableNetworkData::FindPrefix(this, a2);
  if (v2) {
    ot::NetworkData::MutableNetworkData::RemoveTlv(this, v2);
  }
  else {
    unsigned int v8 = 23;
  }
  ot::NetworkData::MutableNetworkData::GetBytes(this);
  uint64_t v6 = v3;
  unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(this);
  ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"RmvPrefix", v6, Length);
  return v8;
}

uint64_t ot::NetworkData::PrefixTlv::Init(ot::NetworkData::PrefixTlv *a1, char a2, ot::Ip6::Prefix *a3)
{
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a3);
  ot::Ip6::Prefix::GetBytes(a3);
  return ot::NetworkData::PrefixTlv::Init(a1, a2, Length, v3);
}

{
  return ot::NetworkData::PrefixTlv::Init(a1, a2, a3);
}

uint64_t ot::NetworkData::BorderRouterEntry::Init(ot::NetworkData::BorderRouterEntry *this)
{
  uint64_t result = ot::NetworkData::BorderRouterEntry::SetRloc(this, 0xFFFEu);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  return result;
}

{
  return ot::NetworkData::BorderRouterEntry::Init(this);
}

uint64_t ot::NetworkData::BorderRouterEntry::SetFlags(ot::NetworkData::BorderRouterEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *((_WORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = result;
  return result;
}

{
  return ot::NetworkData::BorderRouterEntry::SetFlags(this, a2);
}

uint64_t ot::NetworkData::HasRouteEntry::Init(ot::NetworkData::HasRouteEntry *this)
{
  uint64_t result = ot::NetworkData::HasRouteEntry::SetRloc(this, 0xFFFEu);
  *((unsigned char *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  return result;
}

{
  return ot::NetworkData::HasRouteEntry::Init(this);
}

uint64_t ot::NetworkData::HasRouteEntry::SetFlags(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::NetworkData::HasRouteEntry::SetFlags(this, a2);
}

void ot::NetworkData::MutableNetworkData::FindPrefix(ot::NetworkData::MutableNetworkData *this, const ot::Ip6::Prefix *a2)
{
  ot::Ip6::Prefix::GetBytes(a2);
  unint64_t v4 = v2;
  unsigned __int8 Length = ot::Ip6::Prefix::GetLength(a2);
  ot::NetworkData::MutableNetworkData::FindPrefix(this, v4, Length);
}

{
  ot::NetworkData::MutableNetworkData::FindPrefix(this, a2);
}

unint64_t ot::NetworkData::Local::UpdateRloc(ot::NetworkData::Local *this, ot::NetworkData::PrefixTlv *a2)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v2);
  for (unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a2);
        ;
        unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    if ((unint64_t)i >= result) {
      break;
    }
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type)
    {
      if (Type != 2) {
        __assert_rtn("UpdateRloc", "network_data_local.cpp", 179, "false");
      }
      ot::NetworkData::As<ot::NetworkData::BorderRouterTlv>();
      Entry = (ot::NetworkData::BorderRouterEntry *)ot::NetworkData::BorderRouterTlv::GetEntry(v6, 0);
      ot::NetworkData::BorderRouterEntry::SetRloc(Entry, Rloc16);
    }
    else
    {
      ot::NetworkData::As<ot::NetworkData::HasRouteTlv>();
      unsigned __int8 v5 = (ot::NetworkData::HasRouteEntry *)ot::NetworkData::HasRouteTlv::GetEntry(v4, 0);
      ot::NetworkData::HasRouteEntry::SetRloc(v5, Rloc16);
    }
  }
  return result;
}

uint64_t ot::NetworkData::Local::AddService(ot::NetworkData::MutableNetworkData *a1, unsigned int a2, uint64_t a3, char a4, uint64_t a5)
{
  char v25 = a4 & 1;
  unsigned int v23 = 0;
  unsigned __int8 Length = ot::Data<(ot::DataLengthType)0>::GetLength(a3);
  __int16 v18 = ot::NetworkData::ServiceTlv::CalculateSize((ot::NetworkData::ServiceTlv *)a2, Length) + 4;
  uint64_t v20 = (unsigned __int16)(v18 + ot::Data<(ot::DataLengthType)0>::GetLength(a5));
  ot::NetworkData::Local::RemoveService(a1, a2, a3);
  IgnoreError();
  if ((unsigned __int16)v20 <= 0xFEu)
  {
    ot::NetworkData::MutableNetworkData::AppendTlv(a1, v20);
    ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
    char v22 = v6;
    if (v6)
    {
      ot::NetworkData::ServiceTlv::Init(v6, 0, a2, a3);
      char v7 = ot::Data<(ot::DataLengthType)0>::GetLength(a5);
      ot::NetworkData::ServiceTlv::SetSubTlvsLength(v22, v7 + 4);
      ot::NetworkData::ServiceTlv::GetSubTlvs(v22);
      ot::NetworkData::As<ot::NetworkData::ServerTlv>();
      uint64_t v21 = v8;
      char v16 = v8;
      int v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(a1);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v9);
      ot::NetworkData::ServerTlv::Init(v16, Rloc16, a5);
      if (v25)
      {
        ot::NetworkData::NetworkDataTlv::SetStable(v22);
        ot::NetworkData::NetworkDataTlv::SetStable(v21);
      }
      ot::NetworkData::MutableNetworkData::GetBytes(a1);
      uint64_t v15 = v11;
      unsigned __int8 v12 = ot::NetworkData::NetworkData::GetLength(a1);
      ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"AddService", v15, v12);
    }
    else
    {
      unsigned int v23 = 3;
    }
  }
  else
  {
    unsigned int v23 = 3;
  }
  if (v23 == 3)
  {
    char v13 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
    ot::NetworkData::Notifier::SignalNetworkDataFull(v13);
  }
  return v23;
}

uint64_t ot::NetworkData::Local::RemoveService(ot::NetworkData::MutableNetworkData *a1, int a2, uint64_t a3)
{
  unsigned int v9 = 0;
  ot::NetworkData::MutableNetworkData::FindService((uint64_t)a1, a2, a3, 1);
  if (v3) {
    ot::NetworkData::MutableNetworkData::RemoveTlv(a1, v3);
  }
  else {
    unsigned int v9 = 23;
  }
  ot::NetworkData::MutableNetworkData::GetBytes(a1);
  uint64_t v7 = v4;
  unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(a1);
  ot::Logger::Dump<(ot::LogLevel)5,&ot::NetworkData::kLogModuleName>((ot *)"RmvService", v7, Length);
  return v9;
}

unint64_t ot::NetworkData::Local::UpdateRloc(ot::NetworkData::Local *this, ot::NetworkData::ServiceTlv *a2)
{
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v2);
  for (unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(a2);
        ;
        unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    unint64_t result = ot::NetworkData::NetworkDataTlv::GetNext(a2);
    if ((unint64_t)i >= result) {
      break;
    }
    if (ot::NetworkData::NetworkDataTlv::GetType(i) != 6) {
      __assert_rtn("UpdateRloc", "network_data_local.cpp", 262, "false");
    }
    ot::NetworkData::As<ot::NetworkData::ServerTlv>();
    ot::NetworkData::ServerTlv::SetServer16(v4, Rloc16);
  }
  return result;
}

void ot::NetworkData::Local::UpdateRloc(ot::NetworkData::Local *this)
{
  ot::NetworkData::MutableNetworkData::GetTlvsStart(this);
  for (unsigned int i = v1; ; unsigned int i = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(i))
  {
    ot::NetworkData::MutableNetworkData::GetTlvsEnd(this);
    if ((unint64_t)i >= v2) {
      break;
    }
    int Type = ot::NetworkData::NetworkDataTlv::GetType(i);
    if (Type == 1)
    {
      ot::NetworkData::As<ot::NetworkData::PrefixTlv>();
      ot::NetworkData::Local::UpdateRloc(this, v3);
    }
    else
    {
      if (Type != 5) {
        __assert_rtn("UpdateRloc", "network_data_local.cpp", 289, "false");
      }
      ot::NetworkData::As<ot::NetworkData::ServiceTlv>();
      ot::NetworkData::Local::UpdateRloc(this, v4);
    }
  }
}

ot::NetworkData::Notifier *ot::NetworkData::Notifier::Notifier(ot::NetworkData::Notifier *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::TimerMilliIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleTimer>::TimerMilliIn((ot::NetworkData::Notifier *)((char *)this + 8), a2);
  ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::SynchronizeServerData>::TaskletIn((void *)this + 4, (uint64_t)a2);
  *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *((_WORD *)this + 26) = -2;
  *((unsigned char *)this + 54) &= ~1u;
  ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::TaskletIn((void *)this + 7, (uint64_t)a2);
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback((void *)this + 9);
  unint64_t result = this;
  *((unsigned char *)this + 88) &= ~1u;
  *((unsigned char *)this + 8ot::Tlv::SetLength((uint64_t)this, 9) = 0;
  return result;
}

{
  ot::NetworkData::Notifier::Notifier(this, a2);
  return this;
}

uint64_t ot::NetworkData::Notifier::HandleTimer(ot::NetworkData::Notifier *this)
{
  return ot::NetworkData::Notifier::SynchronizeServerData(this);
}

uint64_t ot::NetworkData::Notifier::SynchronizeServerData(ot::NetworkData::Notifier *this)
{
  unsigned int v9 = 23;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = ot::Mle::Mle::IsAttached(v1);
  if ((result & 1) != 0 && (*((unsigned char *)this + 54) & 1) == 0)
  {
    if (!*((_DWORD *)this + 12)
      || (uint64_t result = ot::Timer::IsRunning((ot::NetworkData::Notifier *)((char *)this + 8)), (result & 1) == 0))
    {
      *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 5000;
      uint64_t result = ot::NetworkData::Notifier::RemoveStaleChildEntries(this);
      unsigned int v9 = result;
      if (result == 23)
      {
        *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 300000;
        uint64_t result = ot::NetworkData::Notifier::UpdateInconsistentData(this);
        unsigned int v9 = result;
      }
    }
  }
  if (v9)
  {
    uint64_t v4 = v9;
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v3 = 0;
  }
  if (v3) {
LABEL_16:
  }
    __assert_rtn("SynchronizeServerData", "network_data_notifier.cpp", 123, "false");
  switch(v4)
  {
    case 0:
      *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((unsigned char *)this + 54) & 0xFE | 1;
      return result;
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      goto LABEL_16;
    case 3:
      return ot::TimerMilli::Start((ot::NetworkData::Notifier *)((char *)this + 8), 0x3E8u);
    case 13:
      unsigned __int8 v5 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      RouterSelectionJitterunsigned int Timeout = ot::Mle::MleRouter::GetRouterSelectionJitterTimeout(v5);
      unsigned int v7 = ot::Time::SecToMsec((ot::Time *)(RouterSelectionJitterTimeout + 1));
      return ot::TimerMilli::Start((ot::NetworkData::Notifier *)((char *)this + 8), v7);
    case 23:
      return result;
    default:
      JUMPOUT(0);
  }
}

uint64_t ot::NetworkData::Notifier::HandleNetDataFull(ot::NetworkData::Notifier *this)
{
  ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::InvokeIfSet<>((void *)this + 9);
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = ot::Mle::Mle::IsLeader(v1);
  if ((result & 1) == 0) {
    return trigger_leader_override();
  }
  return result;
}

ot::TimerMilli *ot::TimerMilliIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleTimer>::HandleTimer);
  return a1;
}

void *ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::SynchronizeServerData>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::SynchronizeServerData>::HandleTasklet);
  return a1;
}

void *ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::HandleTasklet);
  return a1;
}

uint64_t ot::NetworkData::Notifier::HandleServerDataUpdated(ot::NetworkData::Notifier *this)
{
  *((unsigned char *)this + 88) &= ~1u;
  ot::NetworkData::Notifier::ScheduleRouterRoleUpgradeIfEligible((uint64_t)this);
  *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  return ot::Tasklet::Post((ot::NetworkData::Notifier *)((char *)this + 32));
}

uint64_t ot::NetworkData::Notifier::ScheduleRouterRoleUpgradeIfEligible(uint64_t this)
{
  char v3 = (ot::NetworkData::Notifier *)this;
  if ((*(unsigned char *)(this + 88) & 1) == 0)
  {
    uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>((ot::InstanceLocator *)this);
    this = ot::Mle::Mle::IsChild(v1);
    if (this)
    {
      this = ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(v3);
      if ((this & 1) != 0 && !*((unsigned char *)v3 + 89))
      {
        *((unsigned char *)v3 + 8ot::Tlv::SetLength((uint64_t)this, 9) = ot::Random::NonCrypto::GetUint8InRange((ot::Random::NonCrypto *)1, 0xBu);
        unint64_t v2 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(v3);
        return ot::TimeTicker::RegisterReceiver(v2, 6);
      }
    }
  }
  return this;
}

uint64_t ot::NetworkData::Notifier::RemoveStaleChildEntries(ot::NetworkData::Notifier *this)
{
  uint64_t v10 = this;
  *(void *)&v9[1] = 0x1700000000;
  v9[0] = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsRouterOrLeader(v1))
  {
    while (1)
    {
      unint64_t v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      if (ot::NetworkData::NetworkData::GetNextServer(v2, (unsigned int *)&v9[1], v9)) {
        break;
      }
      if (!ot::Mle::IsActiveRouter((ot::Mle *)v9[0]))
      {
        char v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v3);
        if (ot::Mle::RouterIdMatch((ot::Mle *)Rloc16, v9[0]))
        {
          unsigned __int8 v5 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
          ot::ChildTable::FindChild(v5, v9[0], 0);
          if (!v6)
          {
            *(_DWORD *)&v9[3] = ot::NetworkData::Notifier::SendServerDataNotification(this, v9[0], 0);
            return *(unsigned int *)&v9[3];
          }
        }
      }
    }
  }
  return *(unsigned int *)&v9[3];
}

uint64_t ot::NetworkData::Notifier::UpdateInconsistentData(ot::NetworkData::Notifier *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  int Rloc16 = (unsigned __int16)ot::Mle::Mle::GetRloc16(v1);
  unint64_t v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::MleRouter::IsExpectedToBecomeRouterSoon(v2))
  {
    return 13;
  }
  else
  {
    char v3 = (ot::NetworkData::Local *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    ot::NetworkData::Local::UpdateRloc(v3);
    uint64_t v10 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    uint64_t v4 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
    if ((ot::NetworkData::NetworkData::ContainsEntriesFrom(v10, v4, Rloc16) & 1) != 0
      && (unsigned int v9 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this),
          unsigned __int8 v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this),
          (ot::NetworkData::NetworkData::ContainsEntriesFrom(v9, v5, Rloc16) & 1) != 0))
    {
      return 23;
    }
    else
    {
      if (*((unsigned __int16 *)this + 26) == (unsigned __int16)Rloc16) {
        *((_WORD *)this + 26) = -2;
      }
      unsigned __int16 v8 = *((_WORD *)this + 26);
      uint64_t v6 = (const ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
      unsigned int v13 = ot::NetworkData::Notifier::SendServerDataNotification(this, v8, v6);
      if (!v13) {
        *((_WORD *)this + 26) = Rloc16;
      }
    }
  }
  return v13;
}

uint64_t ot::NetworkData::Notifier::SendServerDataNotification(ot::NetworkData::Notifier *this, unsigned __int16 a2, const ot::NetworkData::NetworkData *a3)
{
  char v26 = this;
  unsigned __int16 v25 = a2;
  unsigned __int8 v24 = a3;
  unsigned int appended = 0;
  char v22 = 0;
  Instance = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v21, Instance);
  uint64_t v4 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  char v22 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v4, 5u);
  if (!v22)
  {
    unsigned int appended = 3;
    goto LABEL_11;
  }
  if (v24)
  {
    ot::ThreadTlv::SetType(v20, 10);
    char Length = ot::NetworkData::NetworkData::GetLength(v24);
    ot::Tlv::SetLength((uint64_t)v20, Length);
    unsigned int appended = ot::Message::Append<ot::ThreadTlv>(v22, v20);
    if (appended) {
      goto LABEL_11;
    }
    __int16 v18 = v22;
    unsigned __int16 Bytes = (char *)ot::NetworkData::NetworkData::GetBytes(v24);
    unsigned __int8 v6 = ot::NetworkData::NetworkData::GetLength(v24);
    unsigned int appended = ot::Message::AppendBytes(v18, Bytes, v6);
    if (appended) {
      goto LABEL_11;
    }
    unsigned int v7 = (ot::NetworkData::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    ot::NetworkData::Leader::CheckForNetDataGettingFull(v7, v24, v25);
  }
  if (v25 == 65534 || (unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned short>>(v22, v25)) == 0)
  {
    ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc((ot::Tmf::MessageInfo *)v21);
    IgnoreError();
    unsigned __int16 v8 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
    unsigned int appended = ot::Coap::CoapBase::SendMessage(v8, v22, (ot::Ip6::MessageInfo *)v21, (uint64_t)ot::NetworkData::Notifier::HandleCoapResponse, (uint64_t)this);
    if (!appended)
    {
      char v9 = ot::UriToString<(ot::Uri)5>();
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Sent %s", v10, v11, v12, v13, v14, v15, v9);
    }
  }
LABEL_11:
  if (appended && v22) {
    ot::Message::Free(v22);
  }
  return appended;
}

uint64_t ot::Message::Append<ot::ThreadTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<ot::ThreadTlv>(a1, a2);
}

uint64_t ot::NetworkData::Notifier::HandleCoapResponse(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ot::NetworkData::Notifier::HandleCoapResponse(a1, a4);
}

uint64_t ot::NetworkData::Notifier::HandleNotifierEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (ot::Events::ContainsAny((ot::Events *)&v4, 2052)) {
    *(_DWORD *)(a1 + 48) = 0;
  }
  if (ot::Events::Contains(&v4, 128)) {
    *(unsigned char *)(a1 + 88) &= ~1u;
  }
  if (ot::Events::ContainsAny((ot::Events *)&v4, 644)) {
    ot::NetworkData::Notifier::ScheduleRouterRoleUpgradeIfEligible(a1);
  }
  uint64_t result = ot::Events::ContainsAny((ot::Events *)&v4, 2564);
  if (result) {
    return ot::NetworkData::Notifier::SynchronizeServerData((ot::NetworkData::Notifier *)a1);
  }
  return result;
}

uint64_t ot::NetworkData::Notifier::HandleCoapResponse(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 54) &= ~1u;
  if (!a2) {
    return ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 8), *(_DWORD *)(a1 + 48) + 1);
  }
  if (a2 != 11 && a2 != 28) {
    __assert_rtn("HandleCoapResponse", "network_data_notifier.cpp", 287, "false");
  }
  return ot::NetworkData::Notifier::SynchronizeServerData((ot::NetworkData::Notifier *)a1);
}

void *ot::NetworkData::Notifier::SetNetDataFullCallback(ot::NetworkData::Notifier *this, void (*a2)(void *), uint64_t a3)
{
  return ot::CallbackBase<void (*)(void *)>::Set((void *)this + 9, (uint64_t)a2, a3);
}

void *ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::InvokeIfSet<>(void *result)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::Invoke<>((uint64_t)result);
  }
  return result;
}

{
  return ot::Callback<void (*)(void *),(ot::CallbackContextPosition)0>::InvokeIfSet<>(result);
}

BOOL ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(ot::NetworkData::Notifier *this)
{
  BOOL v13 = 0;
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v1);
  unint64_t v2 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::MleRouter::IsRouterEligible(v2))
  {
    char v3 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::MleRouter::GetRouterUpgradeThreshold(v3))
    {
      uint64_t v4 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
      if (ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(v4, Rloc16))
      {
        unsigned __int8 v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        if (ot::NetworkData::NetworkData::ContainsBorderRouterWithRloc(v5, Rloc16))
        {
          unsigned __int8 v6 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
          unsigned __int8 ActiveRouterCount = ot::RouterTable::GetActiveRouterCount(v6);
          unsigned int v7 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          if (ActiveRouterCount >= (int)ot::Mle::MleRouter::GetRouterUpgradeThreshold(v7)
            && ActiveRouterCount < 0x20u)
          {
            unsigned __int16 v8 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
            return ot::NetworkData::NetworkData::CountBorderRouters(v8, 1) < 2u;
          }
        }
      }
    }
  }
  return v13;
}

void ot::NetworkData::Notifier::HandleTimeTick(ot::NetworkData::Notifier *this)
{
  if (*((unsigned char *)this + 89))
  {
    if (!--*((unsigned char *)this + 89))
    {
      uint64_t v1 = (_DWORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::TimeTicker>(this);
      ot::TimeTicker::UnregisterReceiver(v1, 6);
      unint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      if (ot::Mle::Mle::IsChild(v2) && ot::NetworkData::Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(this))
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetworkData", "Requesting router role as BR", v3, v4, v5, v6, v7, v8, (char)this);
        *((unsigned char *)v11 + 88) = *((unsigned char *)v11 + 88) & 0xFE | 1;
        uint64_t v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v11);
        ot::Mle::MleRouter::BecomeRouter(v9, 5u);
        IgnoreError();
      }
    }
  }
}

uint64_t ot::TimerMilliIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  unint64_t v2 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
  return ot::NetworkData::Notifier::HandleTimer(v2);
}

uint64_t ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::SynchronizeServerData>::HandleTasklet(ot::InstanceLocator *a1)
{
  unint64_t v2 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
  return ot::NetworkData::Notifier::SynchronizeServerData(v2);
}

uint64_t ot::TaskletIn<ot::NetworkData::Notifier,&ot::NetworkData::Notifier::HandleNetDataFull>::HandleTasklet(ot::InstanceLocator *a1)
{
  unint64_t v2 = (ot::NetworkData::Notifier *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Notifier>(a1);
  return ot::NetworkData::Notifier::HandleNetDataFull(v2);
}

uint64_t ot::NetworkData::Service::Manager::AddService(ot::NetworkData::Service::Manager *this, uint64_t a2, char a3, char a4, uint64_t a5, char a6)
{
  char v16 = this;
  uint64_t v15 = a2;
  char v14 = a3;
  char v13 = a4 & 1;
  uint64_t v12 = a5;
  char v11 = a6;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v10, a2, a3);
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v9, v12, v11);
  uint64_t v6 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
  return ot::NetworkData::Local::AddService(v6, 0xAFAAu, (uint64_t)v10, v13 & 1, (uint64_t)v9);
}

uint64_t ot::NetworkData::Service::Manager::RemoveService(ot::NetworkData::Service::Manager *this, uint64_t a2, char a3)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  unsigned char v6[23] = a3;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v6, a2, a3);
  uint64_t v3 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Local>(this);
  return ot::NetworkData::Local::RemoveService(v3, 44970, (uint64_t)v6);
}

uint64_t ot::NetworkData::Service::Manager::GetServiceId(ot::NetworkData::Service::Manager *this, uint64_t a2, char a3, char a4, unsigned __int8 *a5)
{
  char v13 = this;
  uint64_t v12 = a2;
  char v11 = a3;
  char v10 = a4 & 1;
  uint64_t v9 = a5;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v8, a2, a3);
  uint64_t v5 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
  return ot::NetworkData::LeaderBase::GetServiceId(v5, 44970, (uint64_t)v8, v10 & 1, v9);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(ot::InstanceLocator *a1, uint64_t a2)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = 0;
  char v14 = 0;
  char v13 = 0;
  ot::Data<(ot::DataLengthType)0>::Init((uint64_t)v12, (uint64_t)&ot::NetworkData::Service::BackboneRouter::kServiceData, 1);
  *(_WORD *)uint64_t v16 = -2;
  while (1)
  {
    uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
    uint64_t result = ot::NetworkData::NetworkData::FindNextThreadService(v2, v13, (uint64_t)v12, 0);
    char v13 = result;
    if (!result) {
      break;
    }
    ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(&v10);
    char v10 = v13;
    while (!ot::NetworkData::Service::Manager::IterateToNextServer(a1, &v10))
    {
      ot::NetworkData::ServerTlv::GetServerData(v11, (uint64_t)v9);
      if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v9) >= 7uLL)
      {
        unsigned __int16 Bytes = (ot::NetworkData::Service::BackboneRouter::ServerData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v9);
        if (!v15 || (ot::NetworkData::Service::Manager::IsBackboneRouterPreferredTo(a1, v11, Bytes, v15, v14) & 1) != 0)
        {
          uint64_t v15 = v11;
          char v14 = Bytes;
        }
      }
    }
  }
  if (v15)
  {
    __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v15);
    *(_WORD *)uint64_t v16 = Server16;
    char SequenceNumber = ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(v14);
    *(unsigned char *)(v16 + 8) = SequenceNumber;
    __int16 ReregistrationDelay = ot::NetworkData::Service::BackboneRouter::ServerData::GetReregistrationDelay(v14);
    *(_WORD *)(v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ReregistrationDelay;
    uint64_t result = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::Service::BackboneRouter::ServerData::GetMlrTimeout(v14);
    *(_DWORD *)(v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  }
  return result;
}

uint64_t ot::NetworkData::Service::Manager::IterateToNextServer(ot::NetworkData::Service::Manager *this, ot::NetworkData::NetworkDataTlv **a2)
{
  unsigned int v6 = 23;
  if (*a2)
  {
    if (a2[1]) {
      uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(a2[1]);
    }
    else {
      uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::ServiceTlv::GetSubTlvs(*a2);
    }
    unint64_t v2 = ot::NetworkData::NetworkDataTlv::GetNext(*a2);
    ot::NetworkData::NetworkDataTlv::Find<ot::NetworkData::ServerTlv>(Next, v2);
    a2[1] = v3;
    if (a2[1]) {
      return 0;
    }
  }
  return v6;
}

uint64_t ot::NetworkData::Service::Manager::IsBackboneRouterPreferredTo(ot::NetworkData::Service::Manager *this, const ot::NetworkData::ServerTlv *a2, const ot::NetworkData::Service::BackboneRouter::ServerData *a3, const ot::NetworkData::ServerTlv *a4, const ot::NetworkData::Service::BackboneRouter::ServerData *a5)
{
  uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int8 LeaderId = ot::Mle::Mle::GetLeaderId(v5);
  unsigned __int16 v13 = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderId);
  if (v13 == (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a2))
  {
    char v14 = 1;
  }
  else if (v13 == (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a4))
  {
    char v14 = 0;
  }
  else
  {
    int SequenceNumber = ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a3);
    char v12 = 1;
    if (SequenceNumber <= ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a5))
    {
      int v9 = ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a3);
      BOOL v10 = 0;
      if (v9 == ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(a5))
      {
        int Server16 = (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a2);
        BOOL v10 = Server16 > (unsigned __int16)ot::NetworkData::ServerTlv::GetServer16(a4);
      }
      char v12 = v10;
    }
    char v14 = v12;
  }
  return v14 & 1;
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::NetworkData::Service::BackboneRouter::ServerData::GetSequenceNumber(this);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetReregistrationDelay(ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 1));
}

{
  return ot::NetworkData::Service::BackboneRouter::ServerData::GetReregistrationDelay(this);
}

uint64_t ot::NetworkData::Service::BackboneRouter::ServerData::GetMlrTimeout(ot::NetworkData::Service::BackboneRouter::ServerData *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 3));
}

{
  return ot::NetworkData::Service::BackboneRouter::ServerData::GetMlrTimeout(this);
}

uint64_t ot::NetworkData::Service::Manager::GetNextDnsSrpAnycastInfo(ot::InstanceLocator *a1, ot::NetworkData::NetworkDataTlv **a2, ot::Ip6::Address *a3)
{
  unsigned __int16 v19 = a1;
  __int16 v18 = a2;
  uint64_t v17 = a3;
  unsigned int v16 = 0;
  NextThreadService = *a2;
  ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>((uint64_t)v15, (uint64_t)&ot::NetworkData::Service::DnsSrpAnycast::kServiceData);
  do
  {
    uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(a1);
    NextThreadService = ot::NetworkData::NetworkData::FindNextThreadService(v3, NextThreadService, (uint64_t)v15, 0);
    if (!NextThreadService) {
      return 23;
    }
  }
  while (ot::NetworkData::ServiceTlv::GetServiceDataLength(NextThreadService) < 2uLL);
  ot::NetworkData::ServiceTlv::GetServiceData(NextThreadService, (uint64_t)v15);
  char v12 = v17;
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
  ot::Mle::Mle::GetMeshLocalPrefix(v4);
  char v11 = v5;
  unsigned __int8 ServiceId = ot::NetworkData::ServiceTlv::GetServiceId(NextThreadService);
  unsigned __int16 v7 = ot::Mle::ServiceAlocFromId((ot::Mle *)ServiceId);
  ot::Ip6::Address::SetToAnycastLocator(v12, v11, v7);
  unsigned __int16 Bytes = (ot::NetworkData::Service::DnsSrpAnycast::ServiceData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v15);
  char SequenceNumber = ot::NetworkData::Service::DnsSrpAnycast::ServiceData::GetSequenceNumber(Bytes);
  *((unsigned char *)v17 + 16) = SequenceNumber;
  *__int16 v18 = NextThreadService;
  return v16;
}

uint64_t ot::NetworkData::Service::DnsSrpAnycast::ServiceData::GetSequenceNumber(ot::NetworkData::Service::DnsSrpAnycast::ServiceData *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::NetworkData::Service::DnsSrpAnycast::ServiceData::GetSequenceNumber(this);
}

uint64_t ot::NetworkData::Service::Manager::FindPreferredDnsSrpAnycastInfo(ot::InstanceLocator *a1, uint64_t a2)
{
  char v14 = a1;
  uint64_t v13 = a2;
  unsigned int v12 = 23;
  ot::Callback<void (*)(otError,otMeshDiagRouterInfo *,void *),(ot::CallbackContextPosition)1>::Callback(v11);
  while (!ot::NetworkData::Service::Manager::GetNextDnsSrpAnycastInfo(a1, v11, (ot::Ip6::Address *)&v9))
  {
    if (v12 == 23)
    {
      uint64_t v2 = v13;
      *(_OWORD *)uint64_t v13 = v9;
      *(unsigned char *)(v2 + 16) = v10;
      long long v7 = v9;
      unsigned __int8 v8 = v10;
      unsigned int v12 = 0;
    }
    else
    {
      if (ot::SerialNumber::IsGreater<unsigned char>(v10, *(unsigned char *)(v13 + 16)))
      {
        uint64_t v3 = v13;
        *(_OWORD *)uint64_t v13 = v9;
        *(unsigned char *)(v3 + 16) = v10;
      }
      if (v10 > (int)v8)
      {
        long long v7 = v9;
        unsigned __int8 v8 = v10;
      }
    }
  }
  if (!v12)
  {
    ot::NetworkData::Service::Manager::Iterator::Reset(v11);
    while (!ot::NetworkData::Service::Manager::GetNextDnsSrpAnycastInfo(a1, v11, (ot::Ip6::Address *)&v9))
    {
      if (v10 != *(unsigned __int8 *)(v13 + 16)
        && ((v10 - *(unsigned char *)(v13 + 16)) == 128
         || !ot::SerialNumber::IsGreater<unsigned char>(*(unsigned char *)(v13 + 16), v10)))
      {
        uint64_t v4 = v13;
        *(_OWORD *)uint64_t v13 = v7;
        *(unsigned char *)(v4 + 16) = v8;
        return v12;
      }
    }
  }
  return v12;
}

void *ot::NetworkData::Service::Manager::Iterator::Reset(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  return ot::NetworkData::Service::Manager::Iterator::Reset(this);
}

uint64_t ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager *this, ot::NetworkData::NetworkDataTlv **a2, ot::NetworkData::Service::DnsSrpUnicast::Info *a3)
{
  unsigned __int8 v33 = this;
  char v32 = a2;
  unsigned __int16 v31 = a3;
  unsigned int v30 = 0;
  ot::Data<(ot::DataLengthType)0>::InitFrom<unsigned char>((uint64_t)v29, (uint64_t)&ot::NetworkData::Service::DnsSrpUnicast::kServiceData);
  do
  {
    while (!ot::NetworkData::Service::Manager::IterateToNextServer(this, v32))
    {
      ot::NetworkData::ServerTlv::GetServerData(v32[1], (uint64_t)v28);
      if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v28) >= 0x12uLL)
      {
        unsigned __int16 Bytes = (ot::NetworkData::Service::DnsSrpUnicast::ServerData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v28);
        unsigned int v23 = v31;
        ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetAddress(Bytes);
        ot::Ip6::SockAddr::SetAddress((__n128 *)v23, v3);
        unsigned __int8 v24 = v31;
        __int16 Port = ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetPort(Bytes);
        ot::Ip6::SockAddr::SetPort((uint64_t)v24, Port);
        *((unsigned char *)v31 + 18) = 1;
        __int16 Server16 = ot::NetworkData::ServerTlv::GetServer16(v32[1]);
        *((_WORD *)v31 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = Server16;
        return v30;
      }
      if (ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v28) == 2)
      {
        Address = (ot::Ip6::Address *)ot::Ip6::SockAddr::GetAddress(v31);
        unsigned int v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
        ot::Mle::Mle::GetMeshLocalPrefix(v6);
        uint64_t v20 = v7;
        unsigned __int16 v8 = ot::NetworkData::ServerTlv::GetServer16(v32[1]);
        ot::Ip6::Address::SetToRoutingLocator(Address, v20, v8);
        char v22 = v31;
        long long v9 = (ot::Encoding::BigEndian *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v28);
        __int16 Uint16 = ot::Encoding::BigEndian::ReadUint16(v9, v10);
        ot::Ip6::SockAddr::SetPort((uint64_t)v22, Uint16);
        *((unsigned char *)v31 + 18) = 1;
        __int16 v12 = ot::NetworkData::ServerTlv::GetServer16(v32[1]);
        *((_WORD *)v31 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v12;
        return v30;
      }
    }
    uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
    NextThreadService = ot::NetworkData::NetworkData::FindNextThreadService(v13, *v32, (uint64_t)v29, 0);
    *char v32 = NextThreadService;
    if (!*v32) {
      return 23;
    }
  }
  while (ot::NetworkData::ServiceTlv::GetServiceDataLength(*v32) < 0x13uLL);
  ot::NetworkData::ServiceTlv::GetServiceData(*v32, (uint64_t)v29);
  char v26 = (ot::NetworkData::Service::DnsSrpUnicast::ServiceData *)ot::Data<(ot::DataLengthType)0>::GetBytes((uint64_t)v29);
  __int16 v18 = v31;
  uint64_t v15 = (__n128 *)ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetAddress(v26);
  ot::Ip6::SockAddr::SetAddress((__n128 *)v18, v15);
  unsigned __int16 v19 = v31;
  __int16 v16 = ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetPort(v26);
  ot::Ip6::SockAddr::SetPort((uint64_t)v19, v16);
  *((unsigned char *)v31 + 18) = 0;
  *((_WORD *)v31 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = -2;
  return v30;
}

__n128 ot::Ip6::SockAddr::SetAddress(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this = *a2;
  return result;
}

void ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetAddress(ot::NetworkData::Service::DnsSrpUnicast::ServerData *this)
{
}

{
  ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetAddress(this);
}

uint64_t ot::Ip6::SockAddr::SetPort(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 16)  = a2;
  return this;
}

{
  return ot::Ip6::SockAddr::SetPort(this, a2);
}

uint64_t ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetPort(ot::NetworkData::Service::DnsSrpUnicast::ServerData *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 8));
}

{
  return ot::NetworkData::Service::DnsSrpUnicast::ServerData::GetPort(this);
}

uint64_t ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetAddress(ot::NetworkData::Service::DnsSrpUnicast::ServiceData *this)
{
  return (uint64_t)this + 1;
}

{
  return ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetAddress(this);
}

uint64_t ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetPort(ot::NetworkData::Service::DnsSrpUnicast::ServiceData *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*(unsigned __int16 *)((char *)this + 17));
}

{
  return ot::NetworkData::Service::DnsSrpUnicast::ServiceData::GetPort(this);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv *Next, unint64_t a2, unsigned __int8 a3)
{
  while (1)
  {
    BOOL v4 = 0;
    if ((unint64_t)Next + 2 <= a2) {
      BOOL v4 = ot::NetworkData::NetworkDataTlv::GetNext(Next) <= a2;
    }
    if (!v4) {
      break;
    }
    if (a3 == ot::NetworkData::NetworkDataTlv::GetType(Next)) {
      return Next;
    }
    uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
  }
  return 0;
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv *Next, unint64_t a2, unsigned __int8 a3, char a4)
{
  char v7 = a4 & 1;
  while (1)
  {
    BOOL v5 = 0;
    if ((unint64_t)Next + 2 <= a2) {
      BOOL v5 = ot::NetworkData::NetworkDataTlv::GetNext(Next) <= a2;
    }
    if (!v5) {
      break;
    }
    if (a3 == ot::NetworkData::NetworkDataTlv::GetType(Next)
      && ot::NetworkData::NetworkDataTlv::IsStable(Next) == (v7 & 1))
    {
      return Next;
    }
    uint64_t Next = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::NetworkDataTlv::GetNext(Next);
  }
  return 0;
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::PrefixTlv *a1, unsigned __int8 a2)
{
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a1);
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a1);
  return ot::NetworkData::NetworkDataTlv::Find(SubTlvs, Next, a2);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::PrefixTlv *a1, unsigned __int8 a2, char a3)
{
  char v7 = a3 & 1;
  uint64_t SubTlvs = (ot::NetworkData::NetworkDataTlv *)ot::NetworkData::PrefixTlv::GetSubTlvs(a1);
  unint64_t Next = ot::NetworkData::NetworkDataTlv::GetNext(a1);
  return ot::NetworkData::NetworkDataTlv::Find(SubTlvs, Next, a2, v7 & 1);
}

uint64_t ot::NetworkData::ServiceTlv::Init(unsigned char *a1, char a2, unsigned int a3, uint64_t a4)
{
  ot::NetworkData::NetworkDataTlv::Init(a1);
  ot::NetworkData::NetworkDataTlv::SetType(a1, 5);
  if (a3 == 44970) {
    char v4 = 0x80;
  }
  else {
    char v4 = 0;
  }
  a1[2]  = v4;
  a1[2] |= a2 & 0xF;
  if (a3 == 44970)
  {
    a1[3]  = ot::Data<(ot::DataLengthType)0>::GetLength(a4);
    ot::Data<(ot::DataLengthType)0>::CopyBytesTo(a4, a1 + 4);
  }
  else
  {
    *(_DWORD *)(a1 + ot::Tlv::SetType(this, 3) = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a3);
    a1[7]  = ot::Data<(ot::DataLengthType)0>::GetLength(a4);
    ot::Data<(ot::DataLengthType)0>::CopyBytesTo(a4, a1 + 8);
  }
  Fieldschar Length = ot::NetworkData::ServiceTlv::GetFieldsLength((ot::NetworkData::ServiceTlv *)a1);
  return ot::NetworkData::NetworkDataTlv::SetLength((uint64_t)a1, FieldsLength);
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::TlvIterator::Iterate(uint64_t a1, unsigned __int8 a2)
{
  char v4 = ot::NetworkData::NetworkDataTlv::Find(*(ot::NetworkData::NetworkDataTlv **)a1, *(void *)(a1 + 8), a2);
  if (v4) {
    *(void *)a1  = ot::NetworkData::NetworkDataTlv::GetNext(v4);
  }
  return v4;
}

ot::NetworkData::NetworkDataTlv *ot::NetworkData::TlvIterator::Iterate(uint64_t a1, unsigned __int8 a2, char a3)
{
  BOOL v5 = ot::NetworkData::NetworkDataTlv::Find(*(ot::NetworkData::NetworkDataTlv **)a1, *(void *)(a1 + 8), a2, a3 & 1);
  if (v5) {
    *(void *)a1  = ot::NetworkData::NetworkDataTlv::GetNext(v5);
  }
  return v5;
}

uint64_t ot::NetworkData::OnMeshPrefixConfig::IsValid(ot::NetworkData::OnMeshPrefixConfig *this, ot::Instance *a2)
{
  char v11 = 0;
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x10) == 0 || (*(_WORD *)((unsigned char *)this + 17) & 8) == 0)
  {
    if ((*(_WORD *)((unsigned char *)this + 17) & 8) == 0
      || (uint64_t v2 = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this),
          ot::Ip6::Prefix::GetLength(v2) == 64))
    {
      if (ot::NetworkData::IsRoutePreferenceValid((ot::NetworkData *)((char)(*((unsigned char *)this + 17) << 6) >> 6)))
      {
        uint64_t Prefix = (ot::Instance *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
        if (ot::NetworkData::IsPrefixValid(a2, Prefix, v4))
        {
          BOOL v5 = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
          char Length = ot::Ip6::Prefix::GetLength(v5);
          if (v7 | (Length == 0)) {
            char v8 = 0;
          }
          else {
            char v8 = 1;
          }
          if (v8) {
            char v11 = 1;
          }
        }
      }
    }
  }
  return v11 & 1;
}

BOOL ot::NetworkData::IsRoutePreferenceValid(ot::NetworkData *this)
{
  return ot::Preference::IsValid((ot::Preference *)(char)this);
}

{
  return ot::NetworkData::IsRoutePreferenceValid(this);
}

BOOL ot::NetworkData::IsPrefixValid(ot::NetworkData *this, ot::Instance *a2, const ot::Ip6::Prefix *a3)
{
  LOBYTE(v6)  = 0;
  if (ot::Ip6::Prefix::IsValid(a2))
  {
    uint64_t v3 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::Mle>((uint64_t)this);
    ot::Mle::Mle::GetMeshLocalPrefix(v3);
    return !ot::Ip6::Prefix::ContainsPrefix((unsigned __int8 *)a2, v4);
  }
  return v6;
}

uint64_t ot::NetworkData::OnMeshPrefixConfig::ConvertToTlvFlags(ot::NetworkData::OnMeshPrefixConfig *this)
{
  __int16 v2 = 0;
  if ((*(_WORD *)((unsigned char *)this + 17) & 4) != 0) {
    __int16 v2 = 0x2000;
  }
  if ((*(_WORD *)((unsigned char *)this + 17) & 8) != 0) {
    v2 |= 0x1000u;
  }
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x10) != 0) {
    v2 |= 0x800u;
  }
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x20) != 0) {
    v2 |= 0x400u;
  }
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x40) != 0) {
    v2 |= 0x200u;
  }
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x80) != 0) {
    v2 |= 0x100u;
  }
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x200) != 0) {
    v2 |= 0x80u;
  }
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x400) != 0) {
    v2 |= 0x40u;
  }
  return (unsigned __int16)(v2 | (ot::NetworkData::RoutePreferenceToValue((ot::NetworkData *)((char)(*((unsigned char *)this + 17) << 6) >> 6)) << 14));
}

uint64_t ot::NetworkData::RoutePreferenceToValue(ot::NetworkData *this)
{
  return ot::Preference::To2BitUint((ot::Preference *)(char)this);
}

{
  return ot::NetworkData::RoutePreferenceToValue(this);
}

BOOL ot::NetworkData::OnMeshPrefixConfig::SetFrom(ot::NetworkData::OnMeshPrefixConfig *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::BorderRouterTlv *a3, const ot::NetworkData::BorderRouterEntry *a4)
{
  ot::Clearable<ot::NetworkData::OnMeshPrefixConfig>::Clear(this);
  uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
  ot::NetworkData::PrefixTlv::CopyPrefixTo(a2, Prefix);
  unsigned __int16 Flags = ot::NetworkData::BorderRouterEntry::GetFlags(a4);
  ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags(this, Flags);
  *((_WORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::NetworkData::BorderRouterEntry::GetRloc(a4);
  BOOL result = ot::NetworkData::NetworkDataTlv::IsStable(a3);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFEFF | (result << 8);
  return result;
}

void *ot::Clearable<ot::NetworkData::OnMeshPrefixConfig>::Clear(void *result)
{
  *BOOL result = 0;
  result[1]  = 0;
  result[2]  = 0;
  return result;
}

{
  return ot::Clearable<ot::NetworkData::OnMeshPrefixConfig>::Clear(result);
}

uint64_t ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags(ot::NetworkData::OnMeshPrefixConfig *this, unsigned __int16 a2)
{
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFFFB | (4 * ((a2 & 0x2000) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFFF7 | (8 * ((a2 & 0x1000) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFFEF | (16 * ((a2 & 0x800) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFFDF | (32 * ((a2 & 0x400) != 0));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFFBF | (((a2 & 0x200) != 0) << 6);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFF7F | (((a2 & 0x100) != 0) << 7);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFDFF | (((a2 & 0x80u) != 0) << 9);
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFBFF | (((a2 & 0x40) != 0) << 10);
  uint64_t result = ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)a2 >> 14));
  *(_WORD *)((char *)this + 1ot::ThreadTlv::SetType(this, 7) = *(_WORD *)((unsigned char *)this + 17) & 0xFFFC | result & 3;
  return result;
}

uint64_t ot::NetworkData::ExternalRouteConfig::IsValid(ot::NetworkData::ExternalRouteConfig *this, ot::Instance *a2)
{
  char v7 = 0;
  if ((*((unsigned char *)this + 20) & 4) == 0
    || (__int16 v2 = (ot::Ip6::Prefix *)ot::NetworkData::ExternalRouteConfig::GetPrefix(this), ot::Ip6::Prefix::IsValidNat64(v2)))
  {
    if (ot::NetworkData::IsRoutePreferenceValid((ot::NetworkData *)((char)(*((unsigned char *)this + 20) << 6) >> 6)))
    {
      uint64_t Prefix = (ot::Instance *)ot::NetworkData::ExternalRouteConfig::GetPrefix(this);
      if (ot::NetworkData::IsPrefixValid(a2, Prefix, v4)) {
        char v7 = 1;
      }
    }
  }
  return v7 & 1;
}

uint64_t ot::NetworkData::ExternalRouteConfig::ConvertToTlvFlags(ot::NetworkData::ExternalRouteConfig *this)
{
  char v2 = 0;
  if ((*((unsigned char *)this + 20) & 4) != 0) {
    char v2 = 32;
  }
  return (v2 | (ot::NetworkData::RoutePreferenceToValue((ot::NetworkData *)((char)(*((unsigned char *)this + 20) << 6) >> 6)) << 6));
}

uint64_t ot::NetworkData::ExternalRouteConfig::SetFrom(ot::NetworkData::ExternalRouteConfig *this, ot::Instance *a2, const ot::NetworkData::PrefixTlv *a3, const ot::NetworkData::HasRouteTlv *a4, const ot::NetworkData::HasRouteEntry *a5)
{
  ot::Clearable<ot::NetworkData::ExternalRouteConfig>::Clear(this);
  uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::ExternalRouteConfig::GetPrefix(this);
  ot::NetworkData::PrefixTlv::CopyPrefixTo(a3, Prefix);
  unsigned __int8 Flags = ot::NetworkData::HasRouteEntry::GetFlags(a5);
  ot::NetworkData::ExternalRouteConfig::SetFromTlvFlags(this, Flags);
  *((unsigned char *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((unsigned char *)this + 20) & 0xF7 | (8 * ot::NetworkData::NetworkDataTlv::IsStable(a4));
  *((_WORD *)this + ot::Tlv::SetLength((uint64_t)this, 9) = ot::NetworkData::HasRouteEntry::GetRloc(a5);
  int Rloc = (unsigned __int16)ot::NetworkData::HasRouteEntry::GetRloc(a5);
  char v7 = (ot::Mle::Mle *)ot::Instance::Get<ot::Mle::MleRouter>((uint64_t)a2);
  uint64_t result = ot::Mle::Mle::GetRloc16(v7);
  *((unsigned char *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((unsigned char *)this + 20) & 0xEF | (16 * (Rloc == (unsigned __int16)result));
  return result;
}

void *ot::Clearable<ot::NetworkData::ExternalRouteConfig>::Clear(void *result)
{
  *uint64_t result = 0;
  result[1]  = 0;
  result[2]  = 0;
  return result;
}

{
  return ot::Clearable<ot::NetworkData::ExternalRouteConfig>::Clear(result);
}

uint64_t ot::NetworkData::ExternalRouteConfig::SetFromTlvFlags(ot::NetworkData::ExternalRouteConfig *this, unsigned __int8 a2)
{
  *((unsigned char *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((unsigned char *)this + 20) & 0xFB | (4 * ((a2 & 0x20) != 0));
  uint64_t result = ot::NetworkData::RoutePreferenceFromValue((ot::NetworkData *)((int)a2 >> 6));
  *((unsigned char *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((unsigned char *)this + 20) & 0xFC | result & 3;
  return result;
}

BOOL ot::NetworkData::ServiceConfig::ServerConfig::operator==(unsigned char *a1, unsigned char *a2)
{
  BOOL v3 = 0;
  if ((*a1 & 1) == (*a2 & 1))
  {
    BOOL v3 = 0;
    if (a1[1] == a2[1]) {
      return memcmp(a1 + 2, a2 + 2, a1[1]) == 0;
    }
  }
  return v3;
}

void *ot::NetworkData::ServiceConfig::ServerConfig::SetFrom(ot::NetworkData::ServiceConfig::ServerConfig *this, const ot::NetworkData::ServerTlv *a2)
{
  BOOL v6 = this;
  BOOL v5 = a2;
  ot::NetworkData::ServerTlv::GetServerData(a2, (uint64_t)v4);
  *(unsigned char *)this  = *(unsigned char *)this & 0xFE | ot::NetworkData::NetworkDataTlv::IsStable(v5);
  *((_WORD *)this + 125)  = ot::NetworkData::ServerTlv::GetServer16(v5);
  *((unsigned char *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v4);
  return ot::Data<(ot::DataLengthType)0>::CopyBytesTo((uint64_t)v4, (char *)this + 2);
}

BOOL ot::NetworkData::ServiceConfig::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v6 = 0;
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
  {
    BOOL v6 = 0;
    if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
    {
      BOOL v6 = 0;
      if (!memcmp((const void *)(a1 + 9), (const void *)(a2 + 9), *(unsigned __int8 *)(a1 + 8)))
      {
        uint64_t ServerConfig = (unsigned char *)ot::NetworkData::ServiceConfig::GetServerConfig((ot::NetworkData::ServiceConfig *)a1);
        char v2 = (unsigned char *)ot::NetworkData::ServiceConfig::GetServerConfig((ot::NetworkData::ServiceConfig *)a2);
        return ot::NetworkData::ServiceConfig::ServerConfig::operator==(ServerConfig, v2);
      }
    }
  }
  return v6;
}

void *ot::NetworkData::ServiceConfig::SetFrom(ot::NetworkData::ServiceConfig *this, const ot::NetworkData::ServiceTlv *a2, const ot::NetworkData::ServerTlv *a3)
{
  long long v9 = this;
  char v8 = a2;
  char v7 = a3;
  ot::Clearable<ot::NetworkData::ServiceConfig>::Clear(this);
  ot::NetworkData::ServiceTlv::GetServiceData(v8, (uint64_t)v6);
  *(unsigned char *)this  = ot::NetworkData::ServiceTlv::GetServiceId(v8);
  *((_DWORD *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::NetworkData::ServiceTlv::GetEnterpriseNumber(v8);
  *((unsigned char *)this + 8)  = ot::Data<(ot::DataLengthType)0>::GetLength((uint64_t)v6);
  ot::Data<(ot::DataLengthType)0>::CopyBytesTo((uint64_t)v6, (char *)this + 9);
  uint64_t ServerConfig = (ot::NetworkData::ServiceConfig::ServerConfig *)ot::NetworkData::ServiceConfig::GetServerConfig(this);
  return ot::NetworkData::ServiceConfig::ServerConfig::SetFrom(ServerConfig, v7);
}

void ot::Clearable<ot::NetworkData::ServiceConfig>::Clear(void *a1)
{
}

{
  ot::Clearable<ot::NetworkData::ServiceConfig>::Clear(a1);
}

uint64_t ot::NetworkData::LowpanContextInfo::SetFrom(ot::NetworkData::LowpanContextInfo *this, const ot::NetworkData::PrefixTlv *a2, const ot::NetworkData::ContextTlv *a3)
{
  *(unsigned char *)this  = ot::NetworkData::ContextTlv::GetContextId(a3);
  *((unsigned char *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::NetworkData::ContextTlv::IsCompress(a3);
  uint64_t Prefix = (ot::Ip6::Prefix *)ot::NetworkData::LowpanContextInfo::GetPrefix(this);
  ot::NetworkData::PrefixTlv::CopyPrefixTo(a2, Prefix);
  char v7 = (ot::Ip6::Prefix *)ot::NetworkData::LowpanContextInfo::GetPrefix(this);
  Contextchar Length = ot::NetworkData::ContextTlv::GetContextLength(a3);
  return ot::Ip6::Prefix::SetLength((uint64_t)v7, ContextLength);
}

uint64_t ot::NetworkData::LowpanContextInfo::GetPrefix(ot::NetworkData::LowpanContextInfo *this)
{
  return ot::AsCoreType<otIp6Prefix>((uint64_t)this + 2);
}

{
  return ot::NetworkData::LowpanContextInfo::GetPrefix(this);
}

uint64_t ot::NetworkData::ContextTlv::GetContextLength(ot::NetworkData::ContextTlv *this)
{
  return *((unsigned __int8 *)this + 3);
}

{
  return ot::NetworkData::ContextTlv::GetContextLength(this);
}

BOOL ot::Ip6::Prefix::IsValid(ot::Ip6::Prefix *this)
{
  return *((unsigned __int8 *)this + 16) <= 0x80u;
}

{
  return ot::Ip6::Prefix::IsValid(this);
}

ot::NetworkDiagnostic::Server *ot::NetworkDiagnostic::Server::Server(ot::NetworkDiagnostic::Server *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkDiagnostic::Server::Server(this, a2);
  return this;
}

double ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::NetworkDiagnostic::Server *this, const ot::Ip6::Address *a2, __n128 *a3)
{
  if (ot::Ip6::Address::IsMulticast(a2)) {
    ot::Ip6::MessageInfo::SetMulticastLoop((uint64_t)a3, 1);
  }
  if (ot::Ip6::Address::IsLinkLocal(a2) || ot::Ip6::Address::IsLinkLocalMulticast(a2))
  {
    BOOL v3 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    LinkLocalAddress  = (__n128 *)ot::Mle::Mle::GetLinkLocalAddress(v3);
    ot::Ip6::MessageInfo::SetSockAddr(a3, LinkLocalAddress);
  }
  else
  {
    ot::Tmf::MessageInfo::SetSockAddrToRloc((ot::Tmf::MessageInfo *)a3);
  }
  return ot::Ip6::MessageInfo::SetPeerAddr(a3, (__n128 *)a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendIp6AddressList(ot::NetworkDiagnostic::Server *this, ot::Message *a2)
{
  uint64_t v21 = this;
  uint64_t v20 = a2;
  unsigned int v19 = 0;
  unsigned __int16 v18 = 0;
  char v2 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v2);
  v17[1]  = v3;
  v17[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v3);
  uint64_t v16 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v17, &v16))
  {
    uint64_t v15 = ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v17);
    ++v18;
    ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v17);
  }
  if (16 * v18 > 254)
  {
    ot::Tlv::SetType(v13, 8);
    ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v13, 16 * v18);
    unsigned int v19 = ot::Message::Append<ot::ExtendedTlv>(v20, v13);
    if (v19) {
      return v19;
    }
  }
  else
  {
    ot::NetworkDiagnostic::Tlv::SetType(v14, 8);
    ot::Tlv::SetLength((uint64_t)v14, 16 * v18);
    unsigned int v19 = ot::Message::Append<ot::NetworkDiagnostic::Tlv>(v20, v14);
    if (v19) {
      return v19;
    }
  }
  char v4 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(this);
  ot::Ip6::Netif::GetUnicastAddresses(v4);
  v12[1]  = v5;
  v12[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v5);
  uint64_t v11 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
  while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v12, &v11))
  {
    unsigned __int8 v10 = (ot::Ip6::Netif::UnicastAddress *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v12);
    char v8 = v20;
    Address  = (char *)ot::Ip6::Netif::UnicastAddress::GetAddress(v10);
    unsigned int v19 = ot::Message::Append<ot::Ip6::Address>(v8, Address);
    if (v19) {
      break;
    }
    ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v12);
  }
  return v19;
}

unsigned char *ot::NetworkDiagnostic::Tlv::SetType(unsigned char *a1, char a2)
{
  return ot::Tlv::SetType(a1, a2);
}

{
  return ot::NetworkDiagnostic::Tlv::SetType(a1, a2);
}

uint64_t ot::Message::Append<ot::NetworkDiagnostic::Tlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 2u);
}

{
  return ot::Message::Append<ot::NetworkDiagnostic::Tlv>(a1, a2);
}

uint64_t ot::Message::Append<ot::ExtendedTlv>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<ot::ExtendedTlv>(a1, a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendChildTable(ot::NetworkDiagnostic::Server *this, ot::Message *a2)
{
  unsigned __int8 v28 = this;
  unsigned __int16 v27 = a2;
  unsigned int v26 = 0;
  unsigned __int16 v25 = 0;
  char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsRouterOrLeader(v2))
  {
    uint64_t v3 = (__int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    unsigned __int16 NumChildren = ot::ChildTable::GetNumChildren(v3, 0);
    unsigned __int16 v25 = ot::Min<unsigned short>(NumChildren, 0x18Eu);
    if (3 * (unint64_t)v25 > 0xFE)
    {
      ot::Tlv::SetType(v23, 16);
      ot::ExtendedTlv::SetLength((ot::ExtendedTlv *)v23, 3 * v25);
      unsigned int v26 = ot::Message::Append<ot::ExtendedTlv>(v27, v23);
      if (v26) {
        return v26;
      }
    }
    else
    {
      ot::NetworkDiagnostic::Tlv::SetType(v24, 16);
      ot::Tlv::SetLength((uint64_t)v24, 3 * v25);
      unsigned int v26 = ot::Message::Append<ot::NetworkDiagnostic::Tlv>(v27, v24);
      if (v26) {
        return v26;
      }
    }
    uint64_t v5 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
    char v21 = ot::ChildTable::Iterate(v5, 0);
    char v22 = (ot::ChildTable::IteratorBuilder *)&v21;
    v20[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v21);
    v20[1]  = v6;
    v19[0]  = ot::ChildTable::IteratorBuilder::end(v22);
    v19[1]  = v7;
    while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v20, v19))
    {
      unsigned __int16 v18 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v20);
      char v17 = 0;
      if (!v25--) {
        break;
      }
      while (1)
      {
        unsigned int v13 = 1 << v17;
        if (v13 >= ot::Child::GetTimeout(v18)) {
          break;
        }
        ++v17;
      }
      ot::Clearable<ot::NetworkDiagnostic::ChildTableEntry>::Clear((uint64_t)v16);
      ot::NetworkDiagnostic::ChildTableEntry::SetTimeout((ot::NetworkDiagnostic::ChildTableEntry *)v16, v17 + 4);
      unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(v18);
      ot::NetworkDiagnostic::ChildTableEntry::SetLinkQuality((ot::NetworkDiagnostic::ChildTableEntry *)v16, LinkQualityIn);
      unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v18);
      __int16 v11 = ot::Mle::ChildIdFromRloc16((ot::Mle *)Rloc16);
      ot::NetworkDiagnostic::ChildTableEntry::SetChildId((ot::NetworkDiagnostic::ChildTableEntry *)v16, v11);
      char DeviceMode = ot::Neighbor::GetDeviceMode(v18);
      ot::NetworkDiagnostic::ChildTableEntry::SetMode((uint64_t)v16, DeviceMode);
      unsigned int v26 = ot::Message::Append<ot::NetworkDiagnostic::ChildTableEntry>(v27, v16);
      if (v26) {
        break;
      }
      ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v20);
    }
  }
  return v26;
}

uint64_t ot::Clearable<ot::NetworkDiagnostic::ChildTableEntry>::Clear(uint64_t result)
{
  *(_WORD *)uint64_t result = 0;
  *(unsigned char *)(result + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  return result;
}

{
  return ot::Clearable<ot::NetworkDiagnostic::ChildTableEntry>::Clear(result);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetTimeout(ot::NetworkDiagnostic::ChildTableEntry *this, unsigned __int8 a2)
{
  TimeoutChildId  = ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this);
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(this, TimeoutChildId & 0x7FFu | (a2 << 11));
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeout(this, a2);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetLinkQuality(ot::NetworkDiagnostic::ChildTableEntry *a1, unsigned __int8 a2)
{
  TimeoutChildId  = ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(a1);
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(a1, TimeoutChildId & 0xF9FF | (a2 << 9) & 0x600u);
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::SetLinkQuality(a1, a2);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetChildId(ot::NetworkDiagnostic::ChildTableEntry *this, __int16 a2)
{
  TimeoutChildId  = ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this);
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(this, TimeoutChildId & 0xFE00 | a2 & 0x1FFu);
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::SetChildId(this, a2);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetMode(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t result = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v4);
  *(unsigned char *)(a1 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::SetMode(a1, a2);
}

uint64_t ot::Message::Append<ot::NetworkDiagnostic::ChildTableEntry>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 3u);
}

{
  return ot::Message::Append<ot::NetworkDiagnostic::ChildTableEntry>(a1, a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendMacCounters(ot::NetworkDiagnostic::Server *this, ot::Message *a2)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  char v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  uint64_t Counters = (unsigned int *)ot::Mac::Mac::GetCounters(v2);
  memset(__b, 0, sizeof(__b));
  ot::NetworkDiagnostic::MacCountersTlv::Init((ot::NetworkDiagnostic::MacCountersTlv *)__b);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInUnknownProtos((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[31]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInErrors((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[35] + Counters[36] + Counters[37] + Counters[38] + Counters[39] + Counters[40]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutErrors((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[14]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInUcastPkts((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[25]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInBroadcastPkts((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[26]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfInDiscards((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[32] + Counters[33] + Counters[34]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutUcastPkts((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[1]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutBroadcastPkts((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[2]);
  ot::NetworkDiagnostic::MacCountersTlv::SetIfOutDiscards((ot::NetworkDiagnostic::MacCountersTlv *)__b, Counters[16]);
  return ot::Tlv::AppendTo((ot::Tlv *)__b, v6);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::Init(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 36);
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::Init(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInUnknownProtos(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfInUnknownProtos(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInErrors(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 6)  = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfInErrors(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutErrors(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfOutErrors(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInUcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfInUcastPkts(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInBroadcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 18)  = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfInBroadcastPkts(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfInDiscards(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 2) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfInDiscards(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutUcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 26)  = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfOutUcastPkts(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutBroadcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfOutBroadcastPkts(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::SetIfOutDiscards(ot::NetworkDiagnostic::MacCountersTlv *this, unsigned int a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)a2);
  *(_DWORD *)((char *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::SetIfOutDiscards(this, a2);
}

uint64_t ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::NetworkDiagnostic::Server *this, const ot::Message *a2, ot::Message *a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned int v13 = this;
  __int16 v12 = a2;
  __int16 v11 = a3;
  memset(v10, 0, sizeof(v10));
  unsigned __int16 v9 = 0;
  unsigned __int16 v8 = 0;
  *(_DWORD *)&void v10[2] = ot::Tlv::FindTlvValueOffset(a2, (const ot::Message *)0x12, v10, &v9, a5);
  if (!*(_DWORD *)&v10[2])
  {
    unsigned __int16 v8 = *(_WORD *)v10 + v9;
    while (*(unsigned __int16 *)v10 < (int)v8)
    {
      unsigned __int8 v7 = 0;
      *(_DWORD *)&void v10[2] = ot::Message::Read<unsigned char>(v12, *(unsigned __int16 *)v10, (char *)&v7);
      if (*(_DWORD *)&v10[2]) {
        break;
      }
      *(_DWORD *)&void v10[2] = ot::NetworkDiagnostic::Server::AppendDiagTlv(this, v7, v11);
      if (*(_DWORD *)&v10[2]) {
        break;
      }
      *(_DWORD *)unsigned __int8 v10 = (unsigned __int16)(*(_WORD *)v10 + 1);
    }
  }
  return *(unsigned int *)&v10[2];
}

uint64_t ot::NetworkDiagnostic::Server::AppendDiagTlv(ot::NetworkDiagnostic::Server *this, unsigned __int8 a2, ot::Message *a3)
{
  int v55 = this;
  unsigned __int8 v54 = a2;
  unsigned __int8 v53 = a3;
  unsigned int appended = 0;
  if (a2)
  {
    uint64_t v4 = a2;
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v3 = 0;
  }
  if ((v3 & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        uint64_t v5 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
        ExtAddress  = (void *)ot::Mac::Mac::GetExtAddress(v5);
        unsigned int appended = ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(v53, ExtAddress);
        break;
      case 1:
        unsigned __int8 v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v7);
        unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(v53, Rloc16);
        break;
      case 2:
        unsigned __int16 v43 = v53;
        unsigned __int16 v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        char DeviceMode = ot::Mle::Mle::GetDeviceMode(v9);
        unsigned __int8 v10 = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&DeviceMode);
        unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned char>>(v43, v10);
        break;
      case 3:
        __int16 v11 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        if (!ot::Mle::Mle::IsRxOnWhenIdle(v11))
        {
          __int16 v12 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
          unsigned int Timeout = ot::Mle::Mle::GetTimeout(v12);
          unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)3,unsigned int>>(v53, Timeout);
        }
        break;
      case 4:
        ot::NetworkDiagnostic::ConnectivityTlv::Init((ot::NetworkDiagnostic::ConnectivityTlv *)v46);
        uint64_t v38 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::FillConnectivityTlv(v38, (ot::Mle::ConnectivityTlv *)v46);
        unsigned int appended = ot::Tlv::AppendTo((ot::Tlv *)v46, v53);
        break;
      case 5:
        ot::NetworkDiagnostic::RouteTlv::Init((ot::NetworkDiagnostic::RouteTlv *)v56);
        unsigned __int8 v39 = (ot::RouterTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(this);
        ot::RouterTable::FillRouteTlv(v39, (ot::Mle::RouteTlv *)v56, 0);
        unsigned int appended = ot::Tlv::AppendTo((ot::Tlv *)v56, v53);
        break;
      case 6:
        ot::NetworkDiagnostic::LeaderDataTlv::Init((ot::NetworkDiagnostic::LeaderDataTlv *)v50);
        char v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        Leaderuint64_t Data = (const ot::Mle::LeaderData *)ot::Mle::Mle::GetLeaderData(v14);
        ot::Mle::LeaderDataTlv::Set((ot::Mle::LeaderDataTlv *)v50, LeaderData);
        unsigned int appended = ot::Tlv::AppendTo((ot::Tlv *)v50, v53);
        break;
      case 7:
        uint64_t v16 = (ot::NetworkData::MutableNetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        ot::NetworkData::MutableNetworkData::GetBytes(v16);
        uint64_t v42 = v17;
        unsigned __int16 v18 = (ot::NetworkData::NetworkData *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        unsigned __int8 Length = ot::NetworkData::NetworkData::GetLength(v18);
        unsigned int appended = ot::Tlv::Append<ot::TlvInfo<(unsigned char)7>>(v53, v42, Length);
        break;
      case 8:
        unsigned int appended = ot::NetworkDiagnostic::Server::AppendIp6AddressList(this, v53);
        break;
      case 9:
        unsigned int appended = ot::NetworkDiagnostic::Server::AppendMacCounters(this, v53);
        break;
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
        return appended;
      case 16:
        unsigned int appended = ot::NetworkDiagnostic::Server::AppendChildTable(this, v53);
        break;
      case 17:
        unsigned __int8 v48 = 0;
        ot::NetworkDiagnostic::ChannelPagesTlv::Init((ot::NetworkDiagnostic::ChannelPagesTlv *)v49);
        for (unsigned __int8 i = 0; i < 0x20uLL; ++i)
        {
          if ((1 << i))
          {
            ChannelPages  = ot::NetworkDiagnostic::ChannelPagesTlv::GetChannelPages((ot::NetworkDiagnostic::ChannelPagesTlv *)v49);
            uint64_t v37 = v48++;
            *(unsigned char *)(ChannelPages + v3ot::ThreadTlv::SetType(this, 7) = i;
          }
        }
        ot::Tlv::SetLength((uint64_t)v49, v48);
        unsigned int appended = ot::Tlv::AppendTo((ot::Tlv *)v49, v53);
        break;
      case 19:
        unsigned int v45 = 0;
        uint64_t v40 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        if (!ot::Mle::MleRouter::GetMaxChildTimeout(v40, &v45)) {
          unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)19,unsigned int>>(v53, v45);
        }
        break;
      case 24:
        unsigned int appended = ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(v53, 4u);
        break;
      case 25:
        VendorName  = (ot *)ot::NetworkDiagnostic::Server::GetVendorName(this);
        unsigned int appended = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>(v53, VendorName, v21, v22, v23);
        break;
      case 26:
        VendorModel  = (ot *)ot::NetworkDiagnostic::Server::GetVendorModel(this);
        unsigned int appended = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>(v53, VendorModel, v25, v26, v27);
        break;
      case 27:
        VendorSwchar Version = (ot *)ot::NetworkDiagnostic::Server::GetVendorSwVersion(this);
        unsigned int appended = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>(v53, VendorSwVersion, v29, v30, v31);
        break;
      case 28:
        VersionString  = (ot *)otGetVersionString();
        unsigned int appended = ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>(v53, VersionString, v33, v34, v35);
        break;
      default:
        JUMPOUT(0);
    }
  }
  return appended;
}

uint64_t ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(ot::Tlv *a1, void *a2)
{
  return ot::Tlv::AppendTlv(a1, 0, a2, (const void *)8);
}

{
  return ot::Tlv::Append<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 1u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned char>>(ot::Tlv *a1, unsigned __int8 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned char>(a1, 2u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)2,unsigned char>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2)
{
  return ot::Tlv::AppendUintTlv<unsigned short>(a1, 0x18u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(a1, a2);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)3,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 3u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)3,unsigned int>>(a1, a2);
}

unsigned char *ot::NetworkDiagnostic::LeaderDataTlv::Init(ot::NetworkDiagnostic::LeaderDataTlv *this)
{
  return ot::Tlv::SetType(this, 6);
}

{
  return ot::NetworkDiagnostic::LeaderDataTlv::Init(this);
}

uint64_t ot::Tlv::Append<ot::TlvInfo<(unsigned char)7>>(ot::Tlv *a1, void *a2, unsigned __int8 a3)
{
  return ot::Tlv::AppendTlv(a1, (ot::Message *)7, a2, (const void *)a3);
}

{
  return ot::Tlv::Append<ot::TlvInfo<(unsigned char)7>>(a1, a2, a3);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x19, 0x20u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x1A, 0x20u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x1B, 0x10u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>(ot::Tlv *a1, ot *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return ot::Tlv::AppendStringTlv(a1, (ot::Message *)0x1C, 0x40u, a2, a5);
}

{
  return ot::Tlv::Append<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>(a1, a2, a3, a4, a5);
}

uint64_t ot::NetworkDiagnostic::ChannelPagesTlv::Init(ot::NetworkDiagnostic::ChannelPagesTlv *this)
{
  return ot::Tlv::SetLength((uint64_t)this, 1);
}

{
  return ot::NetworkDiagnostic::ChannelPagesTlv::Init(this);
}

uint64_t ot::NetworkDiagnostic::ChannelPagesTlv::GetChannelPages(ot::NetworkDiagnostic::ChannelPagesTlv *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::NetworkDiagnostic::ChannelPagesTlv::GetChannelPages(this);
}

unsigned char *ot::NetworkDiagnostic::ConnectivityTlv::Init(ot::NetworkDiagnostic::ConnectivityTlv *this)
{
  return ot::Tlv::SetType(this, 4);
}

{
  return ot::NetworkDiagnostic::ConnectivityTlv::Init(this);
}

unsigned char *ot::NetworkDiagnostic::RouteTlv::Init(ot::NetworkDiagnostic::RouteTlv *this)
{
  return ot::Tlv::SetType(this, 5);
}

{
  return ot::NetworkDiagnostic::RouteTlv::Init(this);
}

uint64_t ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)19,unsigned int>>(ot::Tlv *a1, unsigned int a2)
{
  return ot::Tlv::AppendUintTlv<unsigned int>(a1, 0x13u, a2);
}

{
  return ot::Tlv::Append<ot::UintTlvInfo<(unsigned char)19,unsigned int>>(a1, a2);
}

void ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)34>(ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  unsigned __int8 v24 = a1;
  unsigned int v23 = a2;
  uint64_t v22 = a3;
  int appended = 0;
  uint64_t v20 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v19, Instance);
  if (ot::Coap::Message::IsPostRequest(v23))
  {
    char v17 = ot::UriToString<(ot::Uri)34>();
    PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v22);
    ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v25);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v25);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v5, v6, v7, v8, v9, v10, v17);
    if (ot::Coap::Message::IsConfirmable(v23))
    {
      __int16 v11 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      ot::Coap::CoapBase::SendEmptyAck(v11, v23, v22);
      IgnoreError();
    }
    __int16 v12 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    uint64_t v20 = ot::Coap::CoapBase::NewConfirmablePostMessage(v12, 0x20u);
    if (v20)
    {
      int appended = ot::NetworkDiagnostic::Server::AppendRequestedTlvs(a1, v23, v20, v13, v14);
      if (!appended)
      {
        uint64_t v15 = (const ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v22);
        ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(a1, v15, v19);
        uint64_t v16 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        int appended = ot::Coap::CoapBase::SendMessage(v16, v20, (const ot::Ip6::MessageInfo *)v19);
      }
    }
    else
    {
      int appended = 3;
    }
  }
  else
  {
    int appended = 2;
  }
  if (appended)
  {
    if (v20) {
      ot::Message::Free(v20);
    }
  }
}

void ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)33>(ot::InstanceLocator *a1, const ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v16 = 0;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v14 = ot::UriToString<(ot::Uri)33>();
    PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a3);
    ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v20);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v20);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v4, v5, v6, v7, v8, v9, v14);
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    uint64_t v16 = ot::Coap::CoapBase::NewResponseMessage(v10, a2);
    if (v16)
    {
      int appended = ot::NetworkDiagnostic::Server::AppendRequestedTlvs(a1, a2, v16, v11, v12);
      if (!appended)
      {
        uint64_t v13 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
        int appended = ot::Coap::CoapBase::SendMessage(v13, v16, a3);
      }
    }
    else
    {
      int appended = 3;
    }
  }
  else
  {
    int appended = 2;
  }
  if (appended)
  {
    if (v16) {
      ot::Message::Free(v16);
    }
  }
}

void ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)35>(ot::InstanceLocator *a1, ot::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  unsigned int v19 = a3;
  __int16 v18 = 0;
  char v17 = 0;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v13 = ot::UriToString<(ot::Uri)35>();
    PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v19);
    ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v22);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v22);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v4, v5, v6, v7, v8, v9, v13);
    unsigned __int16 Offset = ot::Message::GetOffset(v20);
    if (!ot::Message::Read<ot::NetworkDiagnostic::Tlv>(v20, Offset, v16)
      && ot::NetworkDiagnostic::Tlv::GetType((ot::NetworkDiagnostic::Tlv *)v16) == 18)
    {
      __int16 v18 = ot::Message::GetOffset(v20) + 2;
      for (unsigned __int8 i = 0; i < (int)ot::Tlv::GetLength((ot::Tlv *)v16); ++i)
      {
        if (ot::Message::Read<unsigned char>(v20, v18 + i, &v17)) {
          return;
        }
        if (v17 == 9)
        {
          uint64_t v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(a1);
          ot::Mac::Mac::ResetCounters(v11);
        }
      }
      __int16 v12 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      ot::Coap::CoapBase::SendEmptyAck(v12, v20, v19);
      IgnoreError();
    }
  }
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::Tlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 2u);
}

{
  return ot::Message::Read<ot::NetworkDiagnostic::Tlv>(a1, a2, a3);
}

uint64_t ot::NetworkDiagnostic::Tlv::GetType(ot::NetworkDiagnostic::Tlv *this)
{
  return ot::Tlv::GetType(this);
}

{
  return ot::NetworkDiagnostic::Tlv::GetType(this);
}

ot::NetworkDiagnostic::Client *ot::NetworkDiagnostic::Client::Client(ot::NetworkDiagnostic::Client *this, ot::Instance *a2)
{
  return this;
}

{
  ot::NetworkDiagnostic::Client::Client(this, a2);
  return this;
}

uint64_t ot::NetworkDiagnostic::Client::SendDiagnosticGet(ot::InstanceLocator *a1, ot::Ip6::Address *a2, void *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  if (ot::Ip6::Address::IsMulticast(a2)) {
    unsigned int v8 = ot::NetworkDiagnostic::Client::SendCommand(a1, 0x22u, a2, a3, a4, 0, 0);
  }
  else {
    unsigned int v8 = ot::NetworkDiagnostic::Client::SendCommand(a1, 0x21u, a2, a3, a4, (uint64_t)ot::NetworkDiagnostic::Client::HandleGetResponse, (uint64_t)a1);
  }
  if (!v8) {
    ot::CallbackBase<void (*)(otError,otMessage *,otMessageInfo const*,void *)>::Set(a1, a5, a6);
  }
  return v8;
}

uint64_t ot::NetworkDiagnostic::Client::SendCommand(ot::InstanceLocator *a1, unsigned __int8 a2, ot::Ip6::Address *a3, void *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a1;
  unsigned __int8 v29 = a2;
  unsigned __int8 v28 = a3;
  unsigned __int16 v27 = a4;
  unsigned __int8 v26 = a5;
  uint64_t v25 = a6;
  uint64_t v24 = a7;
  unsigned int v23 = 0;
  uint64_t v22 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(a1);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v21, Instance);
  if (v29 != 33)
  {
    if (v29 == 34)
    {
      unsigned int v8 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      uint64_t v22 = ot::Coap::CoapBase::NewNonConfirmablePostMessage(v8, v29);
      goto LABEL_7;
    }
    if (v29 != 35) {
      __assert_rtn("SendCommand", "network_diagnostic.cpp", 711, "false");
    }
  }
  uint64_t v9 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
  uint64_t v22 = ot::Coap::CoapBase::NewConfirmablePostMessage(v9, v29);
LABEL_7:
  if (v22)
  {
    if (!v26 || (unsigned int v23 = ot::Tlv::Append<ot::NetworkDiagnostic::TypeListTlv>(v22, v27, v26)) == 0)
    {
      uint64_t v10 = (ot::NetworkDiagnostic::Server *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(a1);
      ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(v10, v28, v21);
      uint64_t v11 = (ot::Coap::TxParameters *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
      unsigned int v23 = ot::Coap::CoapBase::SendMessage(v11, v22, (ot::Ip6::MessageInfo *)v21, v25, v24);
      if (!v23)
      {
        char v19 = ot::NetworkDiagnostic::Client::UriToString(v29);
        ot::Ip6::Address::ToString(v28, (ot::StringWriter *)v31);
        ot::String<(unsigned short)40>::AsCString((uint64_t)v31);
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Sent %s to %s", v12, v13, v14, v15, v16, v17, v19);
      }
    }
  }
  else
  {
    unsigned int v23 = 3;
  }
  if (v23 && v22) {
    ot::Message::Free(v22);
  }
  return v23;
}

void *ot::NetworkDiagnostic::Client::HandleGetResponse(ot::Coap::Message *a1, uint64_t a2, uint64_t a3, BOOL a4)
{
  ot::AsCoapMessagePtr();
  uint64_t v7 = v4;
  ot::AsCoreTypePtr<otMessageInfo>();
  return ot::NetworkDiagnostic::Client::HandleGetResponse(a1, v7, v5, a4);
}

void *ot::CallbackBase<void (*)(otError,otMessage *,otMessageInfo const*,void *)>::Set(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1]  = a3;
  return result;
}

{
  return ot::CallbackBase<void (*)(otError,otMessage *,otMessageInfo const*,void *)>::Set(result, a2, a3);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkDiagnostic::Server>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(a1);
}

const char *ot::NetworkDiagnostic::Client::UriToString(char a1)
{
  char v2 = "";
  switch(a1)
  {
    case '!':
      return ot::UriToString<(ot::Uri)33>();
    case '""':
      return ot::UriToString<(ot::Uri)34>();
    case '#':
      return ot::UriToString<(ot::Uri)35>();
  }
  return v2;
}

void *ot::NetworkDiagnostic::Client::HandleGetResponse(ot::Coap::Message *a1, ot::Coap::Message *a2, uint64_t a3, BOOL a4)
{
  v8[1]  = a1;
  v8[0]  = a2;
  uint64_t v7 = a3;
  BOOL v6 = a4;
  if (!a4) {
    BOOL v6 = ot::Coap::Message::GetCode(v8[0]) != 68;
  }
  return ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>(a1, (unsigned int *)&v6, v8, &v7);
}

void *ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>(void *result, unsigned int *a2, void *a3, void *a4)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>((uint64_t)result, a2, a3, a4);
  }
  return result;
}

{
  return ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>(result, a2, a3, a4);
}

void ot::NetworkDiagnostic::Client::HandleTmf<(ot::Uri)32>(ot::InstanceLocator *a1, ot::Coap::Message *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  if (ot::Coap::Message::IsConfirmablePostRequest(a2))
  {
    char v11 = ot::UriToString<(ot::Uri)32>();
    PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(v15);
    ot::Ip6::Address::ToString(PeerAddr, (ot::StringWriter *)v18);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v18);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"NetDiag", "Received %s from %s", v4, v5, v6, v7, v8, v9, v11);
    uint64_t v14 = v16;
    uint64_t v13 = v15;
    ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>(a1, &ot::kErrorNone, &v14, &v13);
    uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(a1);
    ot::Coap::CoapBase::SendEmptyAck(v10, v16, v15);
    IgnoreError();
  }
}

void *ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>(void *result, unsigned int *a2, void *a3, void *a4)
{
  if (*result) {
    return (void *)ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>((uint64_t)result, a2, a3, a4);
  }
  return result;
}

{
  return ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::InvokeIfSet<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>(result, a2, a3, a4);
}

uint64_t ot::NetworkDiagnostic::Client::SendDiagnosticReset(ot::NetworkDiagnostic::Client *this, const ot::Ip6::Address *a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  return ot::NetworkDiagnostic::Client::SendCommand(this, 0x23u, a2, a3, a4, 0, 0);
}

uint64_t ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Tlv *a1, unsigned __int16 *a2, uint64_t a3)
{
  int v50 = a1;
  int v49 = a2;
  uint64_t v48 = a3;
  unsigned int v47 = 0;
  unsigned __int16 v46 = 0;
  if (*a2) {
    unsigned __int16 Offset = *v49;
  }
  else {
    unsigned __int16 Offset = ot::Message::GetOffset(v50);
  }
  unsigned __int16 v46 = Offset;
  while (1)
  {
    int v26 = v46;
    if (v26 >= (unsigned __int16)ot::Message::GetLength(v50)) {
      return 23;
    }
    char v45 = 0;
    unsigned __int16 v44 = 0;
    unsigned __int16 Length = 0;
    unsigned int v47 = ot::Message::Read<ot::NetworkDiagnostic::Tlv>(v50, v46, v42);
    if (v47) {
      return v47;
    }
    if (ot::Tlv::IsExtended((ot::Tlv *)v42))
    {
      unsigned int v47 = ot::Message::Read<ot::ExtendedTlv>(v50, v46, v42);
      if (v47) {
        return v47;
      }
      unsigned __int16 v44 = v46 + 4;
      unsigned __int16 Length = ot::ExtendedTlv::GetLength((ot::ExtendedTlv *)v42);
    }
    else
    {
      unsigned __int16 v44 = v46 + 2;
      LOBYTE(Length)  = ot::Tlv::GetLength((ot::Tlv *)v42);
      unsigned __int16 Length = Length;
    }
    int v24 = v46;
    unsigned int v25 = v24 + ot::Tlv::GetSize((ot::Tlv *)v42);
    if (v25 > (unsigned __int16)ot::Message::GetLength(v50)) {
      return 6;
    }
    unsigned __int8 Type = ot::NetworkDiagnostic::Tlv::GetType((ot::NetworkDiagnostic::Tlv *)v42);
    if (Type)
    {
      uint64_t v7 = Type;
      char v6 = 1;
    }
    else
    {
      uint64_t v7 = Type;
      char v6 = 0;
    }
    if (v6)
    {
LABEL_86:
      char v45 = 1;
    }
    else
    {
      switch(v7)
      {
        case 0:
          unsigned int v23 = v50;
          unsigned __int16 v22 = v46;
          uint64_t v8 = ot::AsCoreType<otExtAddress>(v48 + 4);
          unsigned int v47 = ot::Tlv::Read<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(v23, v22, v8);
          if (!v47) {
            break;
          }
          return v47;
        case 1:
          unsigned int v47 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(v50, v46, (unsigned __int16 *)(v48 + 4));
          if (!v47) {
            break;
          }
          return v47;
        case 2:
          char v41 = 0;
          unsigned int v47 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)2,unsigned char>>(v50, v46, &v41);
          if (v47) {
            return v47;
          }
          ot::Mle::DeviceMode::DeviceMode((ot::Mle::DeviceMode *)&v40, v41);
          ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v40, (unsigned char *)(v48 + 4));
          break;
        case 3:
          unsigned int v47 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)3,unsigned int>>(v50, v46, (unsigned int *)(v48 + 4));
          if (!v47) {
            break;
          }
          return v47;
        case 4:
          if (ot::Tlv::IsExtended((ot::Tlv *)v42)) {
            return 6;
          }
          unsigned int v47 = ot::Message::Read<ot::NetworkDiagnostic::ConnectivityTlv>(v50, v46, v39);
          if (v47) {
            return v47;
          }
          if (!ot::Mle::ConnectivityTlv::IsValid((ot::Mle::ConnectivityTlv *)v39)) {
            return 6;
          }
          ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity((ot::Mle::ConnectivityTlv *)v39, v48 + 4);
          break;
        case 5:
          unsigned __int16 v38 = 0;
          unsigned int Size = ot::Tlv::GetSize((ot::Tlv *)v42);
          unsigned __int16 v38 = ot::Min<unsigned int>(Size, 0x4Au);
          if (ot::Tlv::IsExtended((ot::Tlv *)v42)) {
            return 6;
          }
          unsigned int v47 = ot::Message::Read(v50, v46, v51, v38);
          if (v47) {
            return v47;
          }
          if (!ot::Mle::RouteTlv::IsValid((ot::Mle::RouteTlv *)v51)) {
            return 6;
          }
          ot::NetworkDiagnostic::ParseRoute((ot::Mle::RouteTlv *)v51, (unsigned char *)(v48 + 4));
          break;
        case 6:
          if (ot::Tlv::IsExtended((ot::Tlv *)v42)) {
            return 6;
          }
          unsigned int v47 = ot::Message::Read<ot::NetworkDiagnostic::LeaderDataTlv>(v50, v46, v37);
          if (v47) {
            return v47;
          }
          if (!ot::Mle::LeaderDataTlv::IsValid((ot::Mle::LeaderDataTlv *)v37)) {
            return 6;
          }
          uint64_t v10 = (ot::Mle::LeaderData *)ot::AsCoreType<otLeaderData>(v48 + 4);
          ot::Mle::LeaderDataTlv::Get((ot::Mle::LeaderDataTlv *)v37, v10);
          break;
        case 7:
          if (Length > 0xFEu) {
            return 6;
          }
          *(unsigned char *)(v48 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = Length;
          ot::Message::ReadBytes(v50, v44, (char *)(v48 + 5), Length);
          break;
        case 8:
          unsigned __int16 Array = 0;
          unsigned __int16 Array = ot::GetArrayLength<otIp6Address,(unsigned short)15>();
          unsigned __int16 v35 = 0;
          ot::AsCoreTypePtr<otIp6Address>();
          unsigned __int16 v35 = v11;
          uint64_t v34 = (unsigned char *)(v48 + 4);
          if (Length % 16) {
            return 6;
          }
          *uint64_t v34 = 0;
          while (1)
          {
            BOOL v21 = 0;
            if (Length) {
              BOOL v21 = *v34 < (int)Array;
            }
            if (!v21) {
              break;
            }
            unsigned int v47 = ot::Message::Read<ot::Ip6::Address>(v50, v44, v35);
            if (v47) {
              return v47;
            }
            ++*v34;
            v35 += 16;
            v44 += 16;
            Length -= 16;
          }
          break;
        case 9:
          unsigned int v47 = ot::Message::Read<ot::NetworkDiagnostic::MacCountersTlv>(v50, v46, v33);
          if (v47) {
            return v47;
          }
          if (!ot::NetworkDiagnostic::MacCountersTlv::IsValid((ot::NetworkDiagnostic::MacCountersTlv *)v33)) {
            return 6;
          }
          ot::NetworkDiagnostic::ParseMacCounters((ot::NetworkDiagnostic::MacCountersTlv *)v33, (_DWORD *)(v48 + 4));
          break;
        case 10:
        case 11:
        case 12:
        case 13:
        case 18:
        case 20:
        case 21:
        case 22:
        case 23:
          goto LABEL_86;
        case 14:
          unsigned int v47 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)14,unsigned char>>(v50, v46, (unsigned char *)(v48 + 4));
          if (!v47) {
            break;
          }
          return v47;
        case 15:
          unsigned int v47 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(v50, v46, (unsigned __int16 *)(v48 + 4));
          if (!v47) {
            break;
          }
          return v47;
        case 16:
          unsigned __int16 v32 = 0;
          unsigned __int16 v32 = ot::GetArrayLength<otNetworkDiagChildEntry,(unsigned short)84>();
          uint64_t v31 = v48 + 6;
          uint64_t v30 = (unsigned char *)(v48 + 4);
          if (Length % 3uLL) {
            return 6;
          }
          unsigned char *v30 = 0;
          while (1)
          {
            BOOL v20 = 0;
            if (Length) {
              BOOL v20 = *v30 < (int)v32;
            }
            if (!v20) {
              break;
            }
            unsigned int v47 = ot::Message::Read<ot::NetworkDiagnostic::ChildTableEntry>(v50, v44, v29);
            if (v47) {
              return v47;
            }
            char Timeout = ot::NetworkDiagnostic::ChildTableEntry::GetTimeout((ot::NetworkDiagnostic::ChildTableEntry *)v29);
            *(_WORD *)uint64_t v31 = *(_WORD *)v31 & 0xFFE0 | Timeout & 0x1F;
            char LinkQuality = ot::NetworkDiagnostic::ChildTableEntry::GetLinkQuality((ot::NetworkDiagnostic::ChildTableEntry *)v29);
            *(_WORD *)uint64_t v31 = *(_WORD *)v31 & 0xFF9F | (32 * (LinkQuality & 3));
            ChildId  = ot::NetworkDiagnostic::ChildTableEntry::GetChildId((ot::NetworkDiagnostic::ChildTableEntry *)v29);
            *(_WORD *)uint64_t v31 = *(_WORD *)v31 & 0x7F | ((ChildId & 0x1FF) << 7);
            char Mode = ot::NetworkDiagnostic::ChildTableEntry::GetMode((ot::NetworkDiagnostic::ChildTableEntry *)v29);
            ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&Mode, (unsigned char *)(v31 + 2));
            ++*v30;
            v31 += 4;
            Length -= 3;
            v44 += 3;
          }
          break;
        case 17:
          unsigned __int16 v19 = Length;
          unsigned __int16 v15 = ot::GetArrayLength<unsigned char,(unsigned short)254>();
          *(unsigned char *)(v48 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Min<unsigned short>(v19, v15);
          ot::Message::ReadBytes(v50, v44, (char *)(v48 + 5), *(unsigned __int8 *)(v48 + 4));
          break;
        case 19:
          unsigned int v47 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)19,unsigned int>>(v50, v46, (unsigned int *)(v48 + 4));
          if (!v47) {
            break;
          }
          return v47;
        case 24:
          unsigned int v47 = ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(v50, v46, (unsigned __int16 *)(v48 + 4));
          if (!v47) {
            break;
          }
          return v47;
        case 25:
          unsigned int v47 = ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>(v50, v46, (void *)(v48 + 4), v4, v5);
          if (!v47) {
            break;
          }
          return v47;
        case 26:
          unsigned int v47 = ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>(v50, v46, (void *)(v48 + 4), v4, v5);
          if (!v47) {
            break;
          }
          return v47;
        case 27:
          unsigned int v47 = ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>(v50, v46, (void *)(v48 + 4), v4, v5);
          if (!v47) {
            break;
          }
          return v47;
        case 28:
          unsigned int v47 = ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>(v50, v46, (void *)(v48 + 4), v4, v5);
          if (!v47) {
            break;
          }
          return v47;
        default:
          JUMPOUT(0);
      }
    }
    __int16 v16 = ot::Tlv::GetSize((ot::Tlv *)v42);
    v46 += v16;
    if ((v45 & 1) == 0)
    {
      char v17 = ot::NetworkDiagnostic::Tlv::GetType((ot::NetworkDiagnostic::Tlv *)v42);
      *(unsigned char *)uint64_t v48 = v17;
      *int v49 = v46;
      return 0;
    }
  }
}

uint64_t ot::Tlv::Read<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(ot::Tlv *a1, unsigned __int16 a2, uint64_t a3)
{
  return ot::Tlv::ReadTlvValue(a1, (const ot::Message *)a2, a3, (void *)8);
}

{
  return ot::Tlv::Read<ot::SimpleTlvInfo<(unsigned char)0,ot::Mac::ExtAddress>>(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)1,unsigned short>>(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)2,unsigned char>>(ot::Tlv *a1, unsigned __int16 a2, unsigned char *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)2,unsigned char>>(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)3,unsigned int>>(ot::Tlv *a1, unsigned __int16 a2, unsigned int *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned int>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)3,unsigned int>>(a1, a2, a3);
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::ConnectivityTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xCu);
}

{
  return ot::Message::Read<ot::NetworkDiagnostic::ConnectivityTlv>(a1, a2, a3);
}

BOOL ot::Mle::ConnectivityTlv::IsValid(ot::Mle::ConnectivityTlv *this)
{
  BOOL v3 = 1;
  if (!ot::Mle::ConnectivityTlv::IsSedBufferingIncluded(this)) {
    return ot::Tlv::GetLength(this) == 7;
  }
  return v3;
}

{
  return ot::Mle::ConnectivityTlv::IsValid(this);
}

uint64_t ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity(ot::Mle::ConnectivityTlv *a1, uint64_t a2)
{
  *(unsigned char *)a2  = ot::Mle::ConnectivityTlv::GetParentPriority(a1);
  *(unsigned char *)(a2 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Mle::ConnectivityTlv::GetLinkQuality3(a1);
  *(unsigned char *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ot::Mle::ConnectivityTlv::GetLinkQuality2(a1);
  *(unsigned char *)(a2 + ot::Tlv::SetType(this, 3) = ot::Mle::ConnectivityTlv::GetLinkQuality1(a1);
  *(unsigned char *)(a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Mle::ConnectivityTlv::GetLeaderCost(a1);
  *(unsigned char *)(a2 + 5)  = ot::Mle::ConnectivityTlv::GetIdSequence(a1);
  *(unsigned char *)(a2 + 6)  = ot::Mle::ConnectivityTlv::GetActiveRouters(a1);
  *(_WORD *)(a2 + 8)  = ot::Mle::ConnectivityTlv::GetSedBufferSize(a1);
  uint64_t result = ot::Mle::ConnectivityTlv::GetSedDatagramCount(a1);
  *(unsigned char *)(a2 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = result;
  return result;
}

{
  return ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity(a1, a2);
}

uint64_t ot::NetworkDiagnostic::ParseRoute(ot::Mle::RouteTlv *a1, unsigned char *a2)
{
  unsigned __int8 v4 = 0;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    if (ot::Mle::RouteTlv::IsRouterIdSet(a1, i))
    {
      a2[2 * v4 + 2]  = i;
      a2[2 * v4 + 3]  = a2[2 * v4 + 3] & 0xF | (16 * (ot::Mle::RouteTlv::GetRouteCost(a1, v4) & 0xF));
      a2[2 * v4 + 3]  = a2[2 * v4 + 3] & 0xF3 | (4 * (ot::Mle::RouteTlv::GetLinkQualityIn(a1, v4) & 3));
      a2[2 * v4 + 3]  = a2[2 * v4 + 3] & 0xFC | ot::Mle::RouteTlv::GetLinkQualityOut(a1, v4) & 3;
      ++v4;
    }
  }
  a2[1]  = v4;
  uint64_t result = ot::Mle::RouteTlv::GetRouterIdSequence(a1);
  *a2  = result;
  return result;
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::LeaderDataTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0xAu);
}

{
  return ot::Message::Read<ot::NetworkDiagnostic::LeaderDataTlv>(a1, a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otLeaderData>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

uint64_t ot::GetArrayLength<otIp6Address,(unsigned short)15>()
{
  return 15;
}

{
  return ot::GetArrayLength<otIp6Address,(unsigned short)15>();
}

uint64_t ot::Message::Read<ot::NetworkDiagnostic::MacCountersTlv>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 0x26u);
}

{
  return ot::Message::Read<ot::NetworkDiagnostic::MacCountersTlv>(a1, a2, a3);
}

BOOL ot::NetworkDiagnostic::MacCountersTlv::IsValid(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Tlv::GetLength(this) >= 0x24uLL;
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::IsValid(this);
}

uint64_t ot::NetworkDiagnostic::ParseMacCounters(ot::NetworkDiagnostic::MacCountersTlv *a1, _DWORD *a2)
{
  *a2  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInUnknownProtos(a1);
  a2[1]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInErrors(a1);
  a2[2]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutErrors(a1);
  a2[3]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInUcastPkts(a1);
  a2[4]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInBroadcastPkts(a1);
  a2[5]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfInDiscards(a1);
  a2[6]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutUcastPkts(a1);
  a2[7]  = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutBroadcastPkts(a1);
  uint64_t result = ot::NetworkDiagnostic::MacCountersTlv::GetIfOutDiscards(a1);
  a2[8]  = result;
  return result;
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)14,unsigned char>>(ot::Tlv *a1, unsigned __int16 a2, unsigned char *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned char>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)14,unsigned char>>(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)15,unsigned short>>(a1, a2, a3);
}

uint64_t ot::GetArrayLength<otNetworkDiagChildEntry,(unsigned short)84>()
{
  return 84;
}

{
  return ot::GetArrayLength<otNetworkDiagChildEntry,(unsigned short)84>();
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::GetTimeout(ot::NetworkDiagnostic::ChildTableEntry *this)
{
  return (int)(ot::NetworkDiagnostic::ChildTableEntry::GetTimeoutChildId(this) & 0xF800) >> 11;
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::GetTimeout(this);
}

uint64_t ot::GetArrayLength<unsigned char,(unsigned short)254>()
{
  return 254;
}

{
  return ot::GetArrayLength<unsigned char,(unsigned short)254>();
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)19,unsigned int>>(ot::Tlv *a1, unsigned __int16 a2, unsigned int *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned int>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)19,unsigned int>>(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(ot::Tlv *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  return ot::Tlv::ReadUintTlv<unsigned short>(a1, a2, a3);
}

{
  return ot::Tlv::Read<ot::UintTlvInfo<(unsigned char)24,unsigned short>>(a1, a2, a3);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>(ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x20u, a3, a5);
}

{
  return ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)25,(unsigned char)32>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>(ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x20u, a3, a5);
}

{
  return ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)26,(unsigned char)32>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>(ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x10u, a3, a5);
}

{
  return ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)27,(unsigned char)16>>(a1, a2, a3, a4, a5);
}

uint64_t ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>(ot::Tlv *a1, unsigned __int16 a2, void *a3, uint64_t a4, char *a5)
{
  return ot::Tlv::ReadStringTlv(a1, (const ot::Message *)a2, 0x40u, a3, a5);
}

{
  return ot::Tlv::Read<ot::StringTlvInfo<(unsigned char)28,(unsigned char)64>>(a1, a2, a3, a4, a5);
}

uint64_t ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(ot::NetworkDiagnostic::ChildTableEntry *this, unsigned __int16 a2)
{
  uint64_t result = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)a2);
  *(_WORD *)this  = result;
  return result;
}

{
  return ot::NetworkDiagnostic::ChildTableEntry::SetTimeoutChildId(this, a2);
}

uint64_t ot::Mle::RouteTlv::GetRouteCost(ot::Mle::RouteTlv *this, unsigned __int8 a2)
{
  return *((unsigned char *)this + a2 + 11) & 0xF;
}

{
  return ot::Mle::RouteTlv::GetRouteCost(this, a2);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInUnknownProtos(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 2));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfInUnknownProtos(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInErrors(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 6));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfInErrors(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutErrors(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 10));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfOutErrors(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInUcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 14));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfInUcastPkts(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInBroadcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 18));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfInBroadcastPkts(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfInDiscards(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 22));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfInDiscards(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutUcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 26));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfOutUcastPkts(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutBroadcastPkts(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 30));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfOutBroadcastPkts(this);
}

uint64_t ot::NetworkDiagnostic::MacCountersTlv::GetIfOutDiscards(ot::NetworkDiagnostic::MacCountersTlv *this)
{
  return ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*(unsigned int *)((char *)this + 34));
}

{
  return ot::NetworkDiagnostic::MacCountersTlv::GetIfOutDiscards(this);
}

uint64_t ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError&,ot::Coap::Message *&,ot::Ip6::MessageInfo const*&>(a1, a2, a3, a4);
}

uint64_t ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void, void))a1)(*a2, *a3, *a4, *(void *)(a1 + 8));
}

{
  return ot::Callback<void (*)(otError,otMessage *,otMessageInfo const*,void *),(ot::CallbackContextPosition)1>::Invoke<otError const&,ot::Coap::Message *,ot::Ip6::MessageInfo const*>(a1, a2, a3, a4);
}

ot::PanIdQueryServer *ot::PanIdQueryServer::PanIdQueryServer(ot::PanIdQueryServer *this, ot::Instance *a2)
{
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((_WORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = -1;
  ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::TimerMilliIn((ot::PanIdQueryServer *)((char *)this + 24), a2);
  return this;
}

{
  ot::PanIdQueryServer::PanIdQueryServer(this, a2);
  return this;
}

void ot::PanIdQueryServer::HandleTimer(ot::PanIdQueryServer *this)
{
  uint64_t v1 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  ot::Mac::Mac::ActiveScan(v1, *((_DWORD *)this + 4), 0, (uint64_t)ot::PanIdQueryServer::HandleScanResult, (uint64_t)this);
  IgnoreError();
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
}

ot::TimerMilli *ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::HandleTimer);
  return a1;
}

void ot::PanIdQueryServer::HandleTmf<(ot::Uri)26>(uint64_t a1, ot::Tlv *a2, ot::Ip6::MessageInfo *a3)
{
  uint64_t v23 = a1;
  unsigned __int16 v22 = a2;
  BOOL v21 = a3;
  unsigned __int16 v20 = 0;
  if (ot::Coap::Message::IsPostRequest(a2))
  {
    int ChannelMask = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(v22, v3, v4, v5, v6);
    if (ChannelMask)
    {
      if (!ot::Tlv::Find<ot::MeshCoP::PanIdTlv>(v22, &v20, v7, v8))
      {
        *(_DWORD *)(a1 + 16)  = ChannelMask;
        *(_OWORD *)a1  = *(_OWORD *)ot::Ip6::MessageInfo::GetPeerAddr(v21);
        *(_WORD *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v20;
        ot::TimerMilli::Start((ot::TimerMilli *)(a1 + 24), 0x3E8u);
        if (ot::Coap::Message::IsConfirmable(v22))
        {
          SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(v21);
          if (!ot::Ip6::Address::IsMulticast(SockAddr))
          {
            uint64_t v10 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>((ot::InstanceLocator *)a1);
            if (!ot::Coap::CoapBase::SendEmptyAck(v10, v22, v21))
            {
              char v11 = ot::UriToString<(ot::Uri)26>();
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoP", "Sent %s ack", v12, v13, v14, v15, v16, v17, v11);
            }
          }
        }
      }
    }
  }
}

void ot::PanIdQueryServer::HandleScanResult(uint64_t a1, uint64_t a2)
{
}

{
  if (a2)
  {
    if (*(unsigned __int16 *)(a2 + 50) == *(unsigned __int16 *)(a1 + 20)) {
      *(_DWORD *)(a1 + 16) |= 1 << *(unsigned char *)(a2 + 54);
    }
  }
  else if (*(_DWORD *)(a1 + 16))
  {
    ot::PanIdQueryServer::SendConflict((ot::PanIdQueryServer *)a1);
  }
}

void ot::PanIdQueryServer::SendConflict(ot::PanIdQueryServer *this)
{
  uint64_t v16 = this;
  int v15 = 0;
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  ot::Tmf::MessageInfo::MessageInfo((ot::Tmf::MessageInfo *)v13, Instance);
  char v2 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
  uint64_t v12 = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(v2, 0x18u);
  if (v12)
  {
    ot::MeshCoP::ChannelMaskTlv::Init((ot::MeshCoP::ChannelMaskTlv *)v14);
    ot::MeshCoP::ChannelMaskTlv::SetChannelMask((ot::MeshCoP::ChannelMaskTlv *)v14, *((_DWORD *)this + 4));
    int v15 = ot::Tlv::AppendTo((ot::Tlv *)v14, v12);
    if (!v15)
    {
      int v15 = ot::Tlv::Append<ot::MeshCoP::PanIdTlv>(v12, *((_WORD *)this + 10));
      if (!v15)
      {
        ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo((ot::Tmf::MessageInfo *)v13, (__n128 *)this);
        BOOL v3 = (ot::Coap::CoapBase *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
        int v15 = ot::Coap::CoapBase::SendMessage(v3, v12, (const ot::Ip6::MessageInfo *)v13);
        if (!v15)
        {
          char v4 = ot::UriToString<(ot::Uri)24>();
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"MeshCoP", "Sent %s", v5, v6, v7, v8, v9, v10, v4);
        }
      }
    }
  }
  else
  {
    int v15 = 3;
  }
  if (v15 && v12) {
    ot::Message::Free(v12);
  }
  ot::MeshCoP::LogError((char)"send panid conflict", v15);
}

uint64_t ot::TimerMilliIn<ot::PanIdQueryServer,&ot::PanIdQueryServer::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryServer>(a1);
  return ((uint64_t (*)(uint64_t))ot::PanIdQueryServer::HandleTimer)(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryServer>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::PanIdQueryServer>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryServer>(a1);
}

uint64_t ot::Instance::Get<ot::PanIdQueryServer>(uint64_t a1)
{
  return a1 + 153800;
}

{
  return ot::Instance::Get<ot::PanIdQueryServer>(a1);
}

ot::RouterTable *ot::RouterTable::RouterTable(ot::RouterTable *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::Array((uint64_t)this + 8, a2);
  ot::TaskletIn<ot::RouterTable,&ot::RouterTable::HandleTableChanged>::TaskletIn((void *)this + 578, (uint64_t)a2);
  ot::RouterTable::RouterIdMap::RouterIdMap((ot::RouterTable *)((char *)this + 4640));
  uint64_t v2 = ot::Time::Time((ot::RouterTable *)((char *)this + 4704), 0);
  *((unsigned char *)this + 4708)  = ot::Random::NonCrypto::GetUint8(v2);
  ot::RouterTable::Clear(this);
  return this;
}

{
  ot::RouterTable::RouterTable(this, a2);
  return this;
}

uint64_t ot::RouterTable::HandleTableChanged(ot::RouterTable *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::RouterTable::LogRouteTable(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v8 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::HistoryTracker>(this);
  return ot::Utils::HistoryTracker::RecordRouterTableChange(v8);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::Array(uint64_t a1, ot::Instance *a2)
{
  return a1;
}

{
  BOOL v2;
  ot::Child *v5;
  ot::Router *i;

  uint64_t v5 = (ot::Child *)a1;
  do
  {
    ot::Child::Child(v5);
    uint64_t v2 = (ot::Child *)((char *)v5 + 144) != (ot::Child *)(a1 + 4608);
    uint64_t v5 = (ot::Child *)((char *)v5 + 144);
  }
  while (v2);
  *(unsigned char *)(a1 + 4608)  = 0;
  for (unsigned __int8 i = (ot::Router *)a1; i != (ot::Router *)(a1 + 4608); unsigned __int8 i = (ot::Router *)((char *)i + 144))
    ot::Router::Init(i, a2);
  return a1;
}

void *ot::TaskletIn<ot::RouterTable,&ot::RouterTable::HandleTableChanged>::TaskletIn(void *a1, uint64_t a2)
{
  return a1;
}

{
  ot::Tasklet::Tasklet(a1, a2, (uint64_t)ot::TaskletIn<ot::RouterTable,&ot::RouterTable::HandleTableChanged>::HandleTasklet);
  return a1;
}

ot::RouterTable::RouterIdMap *ot::RouterTable::RouterIdMap::RouterIdMap(ot::RouterTable::RouterIdMap *this)
{
  return this;
}

{
  ot::RouterTable::RouterIdMap::Clear(this);
  return this;
}

uint64_t ot::RouterTable::Clear(ot::RouterTable *this)
{
  return ot::RouterTable::SignalTableChanged(this);
}

uint64_t ot::RouterTable::ClearNeighbors(ot::RouterTable *this)
{
  uint64_t v7 = (char *)this + 8;
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  uint64_t v6 = v1;
  uint64_t result = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)v7);
  uint64_t v5 = result;
  while (v6 != (const ot::Neighbor *)v5)
  {
    if (ot::Neighbor::IsStateValid(v6))
    {
      BOOL v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
      ot::NeighborTable::Signal(v3, 4u, v6);
      ot::RouterTable::SignalTableChanged(this);
    }
    uint64_t result = (uint64_t)ot::Neighbor::SetState(v6, 0);
    uint64_t v6 = (const ot::Neighbor *)((char *)v6 + 144);
  }
  return result;
}

void *ot::RouterTable::RouterIdMap::Clear(ot::RouterTable::RouterIdMap *this)
{
  return memset(this, 0, 0x3FuLL);
}

{
  return ot::RouterTable::RouterIdMap::Clear(this);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::Clear(uint64_t result)
{
  *(unsigned char *)(result + 4608)  = 0;
  return result;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::Clear(result);
}

uint64_t ot::RouterTable::SignalTableChanged(ot::RouterTable *this)
{
  return ot::Tasklet::Post((ot::RouterTable *)((char *)this + 4624));
}

BOOL ot::RouterTable::IsRouteTlvIdSequenceMoreRecent(ot::RouterTable *this, const ot::Mle::RouteTlv *a2)
{
  BOOL v6 = 1;
  if (ot::RouterTable::GetActiveRouterCount(this))
  {
    RouterIdchar Sequence = ot::Mle::RouteTlv::GetRouterIdSequence(a2);
    char v2 = ot::RouterTable::GetRouterIdSequence(this);
    return ot::SerialNumber::IsGreater<unsigned char>(RouterIdSequence, v2);
  }
  return v6;
}

ot::Router *ot::RouterTable::AddRouter(ot::RouterTable *this, unsigned __int8 a2)
{
  uint64_t v16 = (ot::Router *)ot::Array<ot::Router,(unsigned short)32,unsigned char>::PushBack((uint64_t)this + 8);
  if (v16)
  {
    ot::Router::Clear(v16);
    __int16 v2 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a2);
    ot::Neighbor::SetRloc16((uint64_t)v16, v2);
    ot::Router::SetNextHopToInvalid(v16);
    char v3 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::IndexOf((uint64_t)this + 8, (uint64_t)v16);
    ot::RouterTable::RouterIdMap::SetIndex((uint64_t)this + 4640, a2, v3);
    ot::RouterTable::SignalTableChanged(this);
    char v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    int Rloc16 = (unsigned __int16)ot::Mle::Mle::GetRloc16(v4);
    if (Rloc16 == (unsigned __int16)ot::Mle::Rloc16FromRouterId((ot::Mle *)a2))
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"RouterTable", "Updating Ext Address for routerId  = %d", v5, v6, v7, v8, v9, v10, a2);
      char v11 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
      ExtAddress  = (const ot::Mac::ExtAddress *)ot::Mac::Mac::GetExtAddress(v11);
      ot::Neighbor::SetExtAddress(v16, ExtAddress);
    }
  }
  return v16;
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::PushBack(uint64_t a1)
{
  if (ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsFull(a1)) {
    return 0;
  }
  uint64_t v1 = (*(unsigned char *)(a1 + 4608))++;
  return a1 + 144 * v1;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::PushBack(a1);
}

uint64_t ot::RouterTable::RouterIdMap::SetIndex(uint64_t this, unsigned __int8 a2, char a3)
{
  *(unsigned char *)(this + aot::NetworkData::NetworkDataTlv::SetType(this, 2) = a3 | 0x80;
  return this;
}

{
  return ot::RouterTable::RouterIdMap::SetIndex(this, a2, a3);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::IndexOf(uint64_t a1, uint64_t a2)
{
  return ((a2 - a1) / 144);
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::IndexOf(a1, a2);
}

uint64_t ot::RouterTable::RemoveRouter(ot::RouterTable *this, ot::Router *a2)
{
  if (ot::Neighbor::IsStateValid(a2))
  {
    __int16 v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(this);
    ot::NeighborTable::Signal(v2, 4u, a2);
  }
  unsigned __int8 RouterId = ot::Neighbor::GetRouterId(a2);
  ot::RouterTable::RouterIdMap::Release((uint64_t)this + 4640, RouterId);
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::Remove((uint64_t)this + 8, a2);
  unsigned __int8 v4 = ot::Neighbor::GetRouterId(a2);
  if (ot::RouterTable::IsAllocated(this, v4))
  {
    unsigned __int8 v7 = ot::Neighbor::GetRouterId(a2);
    char v5 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::IndexOf((uint64_t)this + 8, (uint64_t)a2);
    ot::RouterTable::RouterIdMap::SetIndex((uint64_t)this + 4640, v7, v5);
  }
  return ot::RouterTable::SignalTableChanged(this);
}

uint64_t ot::RouterTable::RouterIdMap::Release(uint64_t this, unsigned __int8 a2)
{
  *(unsigned char *)(this + aot::NetworkData::NetworkDataTlv::SetType(this, 2) = 100;
  return this;
}

{
  return ot::RouterTable::RouterIdMap::Release(this, a2);
}

void *ot::Array<ot::Router,(unsigned short)32,unsigned char>::Remove(uint64_t a1, void *a2)
{
  uint64_t result = (void *)ot::Array<ot::Router,(unsigned short)32,unsigned char>::PopBack(a1);
  if (result != a2) {
    return memcpy(a2, result, 0x8EuLL);
  }
  return result;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::Remove(a1, a2);
}

uint64_t ot::RouterTable::Allocate(ot::RouterTable *this)
{
  uint64_t v6 = 0;
  unsigned __int8 v5 = 0;
  unsigned __int8 v4 = 63;
  if (!ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsFull((uint64_t)this + 8))
  {
    for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
    {
      if (ot::RouterTable::RouterIdMap::CanAllocate((ot::RouterTable *)((char *)this + 4640), i)
        && !ot::Random::NonCrypto::GetUint8InRange(0, ++v5))
      {
        unsigned __int8 v4 = i;
      }
    }
    if (v4 != 63)
    {
      uint64_t v6 = ot::RouterTable::Allocate(this, v4);
      if (!v6) {
        __assert_rtn("Allocate", "router_table.cpp", 174, "router != nullptr");
      }
    }
  }
  return v6;
}

BOOL ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsFull(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 4608);
  return v2 == ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetMaxSize();
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsFull(a1);
}

BOOL ot::RouterTable::RouterIdMap::CanAllocate(ot::RouterTable::RouterIdMap *this, unsigned __int8 a2)
{
  return *((unsigned char *)this + a2) == 0;
}

{
  return ot::RouterTable::RouterIdMap::CanAllocate(this, a2);
}

uint64_t ot::RouterTable::Allocate(ot::RouterTable *this, unsigned __int8 a2)
{
  uint64_t v14 = 0;
  if (a2 <= 0x3Eu && ot::RouterTable::RouterIdMap::CanAllocate((ot::RouterTable *)((char *)this + 4640), a2))
  {
    int v2 = ot::RouterTable::AddRouter(this, a2);
    uint64_t v14 = (uint64_t)v2;
    if (v2)
    {
      int Now = ot::TimerMilli::GetNow(v2);
      Heard  = (ot::TimerMilli *)ot::Neighbor::SetLastHeard(v14, Now);
      ++*((unsigned char *)this + 4708);
      *((_DWORD *)this + 1176)  = ot::TimerMilli::GetNow(Heard);
      unsigned __int8 v4 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::MleRouter::ResetAdvertiseInterval(v4);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"RouterTable", "Allocate router id %d", v5, v6, v7, v8, v9, v10, a2);
    }
  }
  return v14;
}

uint64_t ot::RouterTable::Release(ot::RouterTable *this, unsigned __int8 a2)
{
  unsigned int v20 = 0;
  if (a2 > 0x3Eu) {
    __assert_rtn("Release", "router_table.cpp", 206, "aRouterId <= Mle::kMaxRouterId");
  }
  int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (ot::Mle::Mle::IsLeader(v2))
  {
    ot::RouterTable::FindRouterById(this, a2);
    if (v3)
    {
      ot::RouterTable::RemoveRouter(this, v3);
      ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
      unsigned __int16 v19 = v4;
      unsigned __int8 NextHop = (ot::TimerMilli *)ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
      __int16 v18 = NextHop;
      while (v19 != v18)
      {
        unsigned __int8 NextHop = (ot::TimerMilli *)ot::Router::GetNextHop(v19);
        if (a2 == NextHop) {
          unsigned __int8 NextHop = (ot::TimerMilli *)ot::Router::SetNextHopToInvalid(v19);
        }
        unsigned __int16 v19 = (ot::Router *)((char *)v19 + 144);
      }
      ++*((unsigned char *)this + 4708);
      *((_DWORD *)this + 1176)  = ot::TimerMilli::GetNow(NextHop);
      uint64_t v6 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
      ot::AddressResolver::RemoveEntriesForRouterId(v6, a2);
      uint64_t v16 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
      unsigned __int16 v7 = ot::Mle::Rloc16FromRouterId((ot::Mle *)a2);
      ot::NetworkData::Leader::RemoveBorderRouter(v16, v7, 1);
      uint64_t v8 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
      ot::Mle::MleRouter::ResetAdvertiseInterval(v8);
      ot::Logger::LogAtLevel<(ot::LogLevel)3>((ot *)"RouterTable", "Release router id %d", v9, v10, v11, v12, v13, v14, a2);
    }
    else
    {
      return 23;
    }
  }
  else
  {
    return 13;
  }
  return v20;
}

ot::AddressResolver::CacheEntry *ot::RouterTable::RemoveRouterLink(ot::RouterTable *this, ot::Router *a2)
{
  if (ot::Router::GetLinkQualityOut(a2))
  {
    int v2 = (ot::TimerMilli *)ot::Router::SetLinkQualityOut((uint64_t)a2, 0);
    int Now = ot::TimerMilli::GetNow(v2);
    ot::Neighbor::SetLastHeard((uint64_t)a2, Now);
    ot::RouterTable::SignalTableChanged(this);
  }
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  uint64_t v12 = v3;
  uint64_t v11 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
  while (v12 != (ot::Router *)v11)
  {
    int NextHop = ot::Router::GetNextHop(v12);
    if (NextHop == ot::Neighbor::GetRouterId(a2))
    {
      ot::Router::SetNextHopToInvalid(v12);
      ot::RouterTable::SignalTableChanged(this);
      if (ot::RouterTable::GetLinkCost(this, v12) >= 0x10u)
      {
        unsigned __int8 v4 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::ResetAdvertiseInterval(v4);
      }
    }
    uint64_t v12 = (ot::Router *)((char *)v12 + 144);
  }
  uint64_t result = (ot::AddressResolver::CacheEntry *)ot::Router::GetNextHop(a2);
  if (result == 63)
  {
    uint64_t v6 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::MleRouter::ResetAdvertiseInterval(v6);
    uint64_t v8 = (ot::AddressResolver *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
    unsigned __int8 RouterId = ot::Neighbor::GetRouterId(a2);
    return ot::AddressResolver::RemoveEntriesForRouterId(v8, RouterId);
  }
  return result;
}

uint64_t ot::Router::GetLinkQualityOut(ot::Router *this)
{
  return *((unsigned char *)this + 141) & 3;
}

{
  return ot::Router::GetLinkQualityOut(this);
}

uint64_t ot::RouterTable::GetLinkCost(ot::RouterTable *this, const ot::Router *a2)
{
  unsigned __int8 v7 = 16;
  int Rloc16 = (unsigned __int16)ot::Neighbor::GetRloc16(a2);
  int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (Rloc16 != (unsigned __int16)ot::Mle::Mle::GetRloc16(v2) && ot::Neighbor::IsStateValid(a2))
  {
    TwoWaychar LinkQuality = ot::Router::GetTwoWayLinkQuality(a2);
    return ot::CostForLinkQuality(TwoWayLinkQuality);
  }
  return v7;
}

ot::Neighbor *ot::RouterTable::FindRouter(ot::RouterTable *this, const ot::Neighbor::AddressMatcher *a2)
{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::FindMatching<ot::Neighbor::AddressMatcher>((uint64_t)this + 8, a2);
}

ot::Neighbor *ot::Array<ot::Router,(unsigned short)32,unsigned char>::FindMatching<ot::Neighbor::AddressMatcher>(uint64_t a1, const ot::Neighbor::AddressMatcher *a2)
{
  uint64_t v7 = 0;
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  uint64_t v5 = v2;
  uint64_t v4 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end(a1);
  while (v5 != (ot::Neighbor *)v4)
  {
    if (ot::Neighbor::Matches(v5, a2)) {
      return v5;
    }
    uint64_t v5 = (ot::Neighbor *)((char *)v5 + 144);
  }
  return (ot::Neighbor *)v7;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::FindMatching<ot::Neighbor::AddressMatcher>(a1, a2);
}

uint64_t ot::RouterTable::FindNeighbor(ot::RouterTable *this, unsigned __int16 a2)
{
  uint64_t v10 = this;
  unsigned __int16 v9 = a2;
  uint64_t v8 = 0;
  int v5 = a2;
  int v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  if (v5 != (unsigned __int16)ot::Mle::Mle::GetRloc16(v2))
  {
    ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v7, v9, 0);
    ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v7);
    return v3;
  }
  return v8;
}

void ot::RouterTable::FindNeighbor(ot::RouterTable *this, const ot::Mac::ExtAddress *a2)
{
  int v5 = this;
  uint64_t v4 = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v3, (uint64_t)a2, 0);
  ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v3);
}

void ot::RouterTable::FindNeighbor(ot::RouterTable *this, const ot::Mac::Address *a2)
{
  int v5 = this;
  uint64_t v4 = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v3, a2, 0);
  ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v3);
}

uint64_t ot::RouterTable::FindRouterById(ot::RouterTable *this, unsigned __int8 a2)
{
  uint64_t v5 = 0;
  if (a2 <= 0x3Eu && ot::RouterTable::IsAllocated(this, a2))
  {
    Index  = ot::RouterTable::RouterIdMap::GetIndex((ot::RouterTable *)((char *)this + 4640), a2);
    return ot::Array<ot::Router,(unsigned short)32,unsigned char>::operator[]((uint64_t)this + 8, Index);
  }
  return v5;
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::operator[](uint64_t a1, unsigned __int8 a2)
{
  return a1 + 144 * a2;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::operator[](a1, a2);
}

uint64_t ot::RouterTable::RouterIdMap::GetIndex(ot::RouterTable::RouterIdMap *this, unsigned __int8 a2)
{
  return *((unsigned char *)this + a2) & 0x7F;
}

{
  return ot::RouterTable::RouterIdMap::GetIndex(this, a2);
}

uint64_t ot::RouterTable::FindRouterByRloc16(ot::RouterTable *this, unsigned __int16 a2)
{
  unsigned __int8 v2 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
  return ot::RouterTable::FindRouterById(this, v2);
}

uint64_t ot::RouterTable::FindNextHopOf(ot::RouterTable *this, const ot::Router *a2)
{
  unsigned __int8 NextHop = ot::Router::GetNextHop(a2);
  return ot::RouterTable::FindRouterById(this, NextHop);
}

void ot::RouterTable::FindRouter(ot::RouterTable *this, const ot::Mac::ExtAddress *a2)
{
  uint64_t v5 = this;
  uint64_t v4 = a2;
  ot::Neighbor::AddressMatcher::AddressMatcher((uint64_t)v3, (uint64_t)a2, 7);
  ot::RouterTable::FindRouter(this, (const ot::Neighbor::AddressMatcher *)v3);
}

uint64_t ot::RouterTable::GetRouterInfo(ot::RouterTable *a1, unsigned __int16 a2, ot::Router::Info *a3)
{
  unsigned int v7 = 0;
  if (a2 > 0x3Eu)
  {
    if (!ot::Mle::IsActiveRouter((ot::Mle *)a2)) {
      return 7;
    }
    unsigned __int8 v6 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
    if (v6 > 0x3Eu) {
      return 7;
    }
    ot::RouterTable::FindRouterById(a1, v6);
  }
  else
  {
    ot::RouterTable::FindRouterById(a1, a2);
  }
  if (v3) {
    ot::Router::Info::SetFrom(a3, v3);
  }
  else {
    return 23;
  }
  return v7;
}

uint64_t ot::RouterTable::GetLeader(ot::RouterTable *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  unsigned __int8 LeaderId = ot::Mle::Mle::GetLeaderId(v1);
  return ot::RouterTable::FindRouterById(this, LeaderId);
}

uint64_t ot::RouterTable::GetLeaderAge(ot::RouterTable *this)
{
  unsigned int v7 = this;
  IsEmpty  = ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsEmpty((uint64_t)this + 8);
  if (IsEmpty)
  {
    return -1;
  }
  else
  {
    int Now = ot::TimerMilli::GetNow((ot::TimerMilli *)IsEmpty);
    unsigned __int8 v2 = (ot::Time *)ot::Time::operator-(&Now, (_DWORD *)this + 1176);
    return ot::Time::MsecToSec(v2);
  }
}

BOOL ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsEmpty(uint64_t a1)
{
  return *(unsigned char *)(a1 + 4608) == 0;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsEmpty(a1);
}

uint64_t ot::RouterTable::GetNeighborCount(ot::RouterTable *this)
{
  unsigned __int8 v6 = 0;
  uint64_t v5 = (char *)this + 8;
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  uint64_t v4 = v1;
  uint64_t v3 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)v5);
  while (v4 != (ot::Neighbor *)v3)
  {
    if (ot::Neighbor::IsStateValid(v4)) {
      ++v6;
    }
    uint64_t v4 = (ot::Neighbor *)((char *)v4 + 144);
  }
  return v6;
}

uint64_t ot::RouterTable::GetLinkCost(ot::RouterTable *this, unsigned __int8 a2)
{
  unsigned __int8 v5 = 16;
  RouterById  = (ot::Router *)ot::RouterTable::FindRouterById(this, a2);
  if (RouterById) {
    return ot::RouterTable::GetLinkCost(this, RouterById);
  }
  return v5;
}

uint64_t ot::RouterTable::GetPathCost(ot::RouterTable *this, unsigned __int16 a2)
{
  unsigned __int8 v6 = this;
  unsigned __int16 v5 = a2;
  unsigned __int8 v4 = 0;
  unsigned __int16 v3 = 0;
  ot::RouterTable::GetNextHopAndPathCost(this, a2, &v3, &v4);
  return v4;
}

void ot::RouterTable::GetNextHopAndPathCost(ot::RouterTable *this, unsigned __int16 a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  *a4  = 16;
  *a3  = -2;
  unsigned __int8 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  if (ot::Mle::Mle::IsAttached(v4))
  {
    unsigned __int16 v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (a2 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v5))
    {
      *a4  = 0;
      *a3  = a2;
      return;
    }
    unsigned __int8 v20 = ot::Mle::RouterIdFromRloc16((ot::Mle *)a2);
    RouterById  = (const ot::Router *)ot::RouterTable::FindRouterById(this, v20);
    if (RouterById) {
      NextHopOf  = (const ot::Router *)ot::RouterTable::FindNextHopOf(this, RouterById);
    }
    else {
      NextHopOf  = 0;
    }
    unsigned __int8 v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsChild(v6))
    {
      unsigned int v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v7);
      if (ot::Neighbor::IsStateValid(Parent)) {
        *a3  = ot::Neighbor::GetRloc16(Parent);
      }
      if (v20 == ot::Neighbor::GetRouterId(Parent) || NextHopOf)
      {
        unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(Parent);
        *a4  = ot::CostForLinkQuality(LinkQualityIn);
        if (v20 != ot::Neighbor::GetRouterId(Parent)) {
          *a4 += ot::Router::GetCost(RouterById);
        }
LABEL_24:
        if (!ot::Mle::IsActiveRouter((ot::Mle *)a2)) {
          ++*a4;
        }
      }
    }
    else
    {
      unsigned __int16 v9 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v9);
      if (v20 != ot::Mle::RouterIdFromRloc16((ot::Mle *)Rloc16))
      {
        if (!RouterById) {
          return;
        }
        *a4  = ot::RouterTable::GetLinkCost(this, RouterById);
        if (*a4 < 0x10u) {
          *a3  = ot::Neighbor::GetRloc16(RouterById);
        }
        if (NextHopOf)
        {
          Cost  = ot::Router::GetCost(RouterById);
          unsigned __int8 v17 = ot::RouterTable::GetLinkCost(this, NextHopOf) + Cost;
          if (v17 < (int)*a4)
          {
            *a4  = v17;
            *a3  = ot::Neighbor::GetRloc16(NextHopOf);
          }
        }
        goto LABEL_24;
      }
      uint64_t v11 = (ot::ChildTable *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
      ot::ChildTable::FindChild(v11, a2, 5);
      if (v12)
      {
        *a3  = a2;
        unsigned __int8 v13 = ot::Neighbor::GetLinkQualityIn(v12);
        *a4  = ot::CostForLinkQuality(v13);
      }
    }
  }
}

uint64_t ot::RouterTable::GetPathCostToLeader(ot::RouterTable *this)
{
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
  unsigned __int8 LeaderId = ot::Mle::Mle::GetLeaderId(v1);
  unsigned __int16 v3 = ot::Mle::Rloc16FromRouterId((ot::Mle *)LeaderId);
  return ot::RouterTable::GetPathCost(this, v3);
}

uint64_t ot::Router::GetCost(ot::Router *this)
{
  return (*((unsigned char *)this + 141) >> 2) & 0xF;
}

{
  return ot::Router::GetCost(this);
}

uint64_t ot::RouterTable::GetNextHop(ot::RouterTable *this, unsigned __int16 a2)
{
  unsigned __int8 v6 = this;
  unsigned __int16 v5 = a2;
  unsigned __int8 v4 = 0;
  unsigned __int16 v3 = 0;
  ot::RouterTable::GetNextHopAndPathCost(this, a2, &v3, &v4);
  return v3;
}

uint64_t ot::RouterTable::UpdateRouterIdSet(ot::RouterTable *this, char a2, const ot::Mle::RouterIdSet *a3)
{
  char v11 = 0;
  *((unsigned char *)this + 4708)  = a2;
  uint64_t result = ot::TimerMilli::GetNow(this);
  *((_DWORD *)this + 1176)  = result;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    IsAllocated  = ot::RouterTable::IsAllocated(this, i);
    uint64_t result = ot::Mle::RouterIdSet::Contains(a3, i);
    if (IsAllocated != (result & 1))
    {
      uint64_t result = ot::RouterTable::IsAllocated(this, i);
      if (result)
      {
        ot::RouterTable::FindRouterById(this, i);
        unsigned __int16 v9 = v4;
        if (!v4) {
          __assert_rtn("UpdateRouterIdSet", "router_table.cpp", 542, "router != nullptr");
        }
        ot::Router::SetNextHopToInvalid(v4);
        ot::RouterTable::RemoveRouterLink(this, v9);
        uint64_t result = ot::RouterTable::RemoveRouter(this, v9);
      }
      else
      {
        char v11 = 1;
      }
    }
  }
  if (v11)
  {
    for (unsigned __int8 j = 0; j <= 0x3Eu; ++j)
    {
      if (!ot::RouterTable::IsAllocated(this, j) && ot::Mle::RouterIdSet::Contains(a3, j)) {
        ot::RouterTable::AddRouter(this, j);
      }
    }
    unsigned __int16 v5 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    return ot::Mle::MleRouter::ResetAdvertiseInterval(v5);
  }
  return result;
}

void ot::RouterTable::UpdateRoutes(ot::RouterTable *this, const ot::Mle::RouteTlv *a2, unsigned __int8 a3)
{
  ot::RouterTable::FindRouterById(this, a3);
  uint64_t v30 = v3;
  if (v3)
  {
    ot::Mle::RouterIdSet::Clear(&v33);
    for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
    {
      unsigned __int16 v4 = ot::Mle::Rloc16FromRouterId((ot::Mle *)i);
      if (ot::RouterTable::GetPathCost(this, v4) < 0x10u) {
        ot::Mle::RouterIdSet::Add((ot::Mle::RouterIdSet *)&v33, i);
      }
    }
    unsigned __int8 v27 = 0;
    unsigned __int8 v26 = 0;
    while (v27 <= 0x3Eu)
    {
      unsigned __int16 v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      unsigned __int16 Rloc16 = ot::Mle::Mle::GetRloc16(v5);
      if (v27 == ot::Mle::RouterIdFromRloc16((ot::Mle *)Rloc16))
      {
        if (ot::Mle::RouteTlv::IsRouterIdSet(a2, v27))
        {
          unsigned __int8 LinkQualityIn = ot::Mle::RouteTlv::GetLinkQualityIn(a2, v26);
          if (LinkQualityIn != ot::Router::GetLinkQualityOut(v30))
          {
            ot::Router::SetLinkQualityOut((uint64_t)v30, LinkQualityIn);
            ot::RouterTable::SignalTableChanged(this);
          }
        }
        break;
      }
      v26 += ot::Mle::RouteTlv::IsRouterIdSet(a2, v27++);
    }
    LinkCost  = ot::RouterTable::GetLinkCost(this, v30);
    unsigned __int8 v24 = 0;
    unsigned __int8 v23 = 0;
    while (v24 <= 0x3Eu)
    {
      if (ot::Mle::RouteTlv::IsRouterIdSet(a2, v24))
      {
        ot::RouterTable::FindRouterById(this, v24);
        unsigned __int16 v22 = v7;
        if (v7)
        {
          int v15 = (unsigned __int16)ot::Neighbor::GetRloc16(v7);
          uint64_t v8 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
          if (v15 != (unsigned __int16)ot::Mle::Mle::GetRloc16(v8) && v22 != v30)
          {
            ot::RouterTable::FindNextHopOf(this, v22);
            BOOL v21 = v9;
            RouteCost  = ot::Mle::RouteTlv::GetRouteCost(a2, v23);
            if (RouteCost) {
              unsigned __int8 v14 = RouteCost;
            }
            else {
              unsigned __int8 v14 = 16;
            }
            if (v21 && v21 != v30)
            {
              Cost  = ot::Router::GetCost(v22);
              if ((v14 + LinkCost) < (int)(ot::RouterTable::GetLinkCost(this, v21)
                                                                            + Cost))
              {
                ot::Router::SetNextHopAndCost(v22, a3, v14);
                ot::RouterTable::SignalTableChanged(this);
              }
            }
            else if (v14 + LinkCost >= 16)
            {
              if (v21 == v30)
              {
                HopToInvalid  = (ot::TimerMilli *)ot::Router::SetNextHopToInvalid(v22);
                int Now = ot::TimerMilli::GetNow(HopToInvalid);
                ot::Neighbor::SetLastHeard((uint64_t)v22, Now);
                ot::RouterTable::SignalTableChanged(this);
              }
            }
            else if (ot::Router::SetNextHopAndCost(v22, a3, v14))
            {
              ot::RouterTable::SignalTableChanged(this);
            }
          }
        }
      }
      v23 += ot::Mle::RouteTlv::IsRouterIdSet(a2, v24++);
    }
    for (unsigned __int8 j = 0; j <= 0x3Eu; ++j)
    {
      BOOL v17 = ot::Mle::RouterIdSet::Contains((ot::Mle::RouterIdSet *)&v33, j);
      unsigned __int16 v11 = ot::Mle::Rloc16FromRouterId((ot::Mle *)j);
      if (ot::RouterTable::GetPathCost(this, v11) < 0x10u != v17)
      {
        uint64_t v12 = (ot::Mle::MleRouter *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::ResetAdvertiseInterval(v12);
        return;
      }
    }
  }
}

uint64_t ot::Mle::RouterIdSet::Add(ot::Mle::RouterIdSet *this, unsigned __int8 a2)
{
  uint64_t result = ot::Mle::RouterIdSet::MaskFor((ot::Mle::RouterIdSet *)a2);
  *((unsigned char *)this + a2 / 8) |= result;
  return result;
}

{
  return ot::Mle::RouterIdSet::Add(this, a2);
}

BOOL ot::RouterTable::UpdateRoutesOnFed(BOOL this, const ot::Mle::RouteTlv *a2, unsigned __int8 a3)
{
  unsigned __int16 v5 = (ot::RouterTable *)this;
  unsigned __int8 v9 = 0;
  unsigned __int8 v8 = 0;
  while (v9 <= 0x3Eu)
  {
    if (ot::Mle::RouteTlv::IsRouterIdSet(a2, v9) && v9 != a3)
    {
      ot::RouterTable::FindRouterById(v5, v9);
      unsigned int v7 = v3;
      if (v3)
      {
        RouteCost  = ot::Mle::RouteTlv::GetRouteCost(a2, v8);
        if (RouteCost) {
          unsigned __int8 v4 = a3;
        }
        else {
          unsigned __int8 v4 = 63;
        }
        if (ot::Router::SetNextHopAndCost(v7, v4, RouteCost)) {
          ot::RouterTable::SignalTableChanged(v5);
        }
      }
    }
    this  = ot::Mle::RouteTlv::IsRouterIdSet(a2, v9);
    v8 += this;
    ++v9;
  }
  return this;
}

uint64_t ot::RouterTable::FillRouteTlv(ot::RouterTable *this, ot::Mle::RouteTlv *a2, const ot::Neighbor *a3)
{
  char v19 = *((unsigned char *)this + 4708);
  ot::RouterTable::RouterIdMap::GetAsRouterIdSet((ot::RouterTable *)((char *)this + 4640), (ot::Mle::RouterIdSet *)v22);
  if (a3)
  {
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a3);
    if (ot::Mle::IsActiveRouter((ot::Mle *)Rloc16))
    {
      unsigned __int8 Length = ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetLength((uint64_t)this + 8);
      if (Length > 0x14u)
      {
        for (unsigned __int8 i = 0; i <= 0x3Eu && Length > 0x14u; ++i)
        {
          unsigned __int8 v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
          unsigned __int16 v5 = ot::Mle::Mle::GetRloc16(v4);
          if (i != ot::Mle::RouterIdFromRloc16((ot::Mle *)v5)
            && i != ot::Neighbor::GetRouterId(a3))
          {
            unsigned __int8 v6 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
            if (i != ot::Mle::Mle::GetLeaderId(v6)
              && ot::Mle::RouterIdSet::Contains((ot::Mle::RouterIdSet *)v22, i))
            {
              ot::Mle::RouterIdSet::Remove((ot::Mle::RouterIdSet *)v22, i);
              --Length;
            }
          }
        }
        v19 -= 64;
      }
    }
  }
  ot::Mle::RouteTlv::SetRouterIdSequence((uint64_t)a2, v19);
  ot::Mle::RouteTlv::SetRouterIdMask((uint64_t)a2, (const ot::Mle::RouterIdSet *)v22);
  char v18 = 0;
  for (unsigned __int8 j = 0; j <= 0x3Eu; ++j)
  {
    if (ot::Mle::RouterIdSet::Contains((ot::Mle::RouterIdSet *)v22, j))
    {
      unsigned __int16 v14 = ot::Mle::Rloc16FromRouterId((ot::Mle *)j);
      unsigned int v7 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      if (v14 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v7))
      {
        ot::Mle::RouteTlv::SetRouteData((uint64_t)a2, v18, 0, 0, 1);
      }
      else
      {
        RouterById  = (ot::Neighbor *)ot::RouterTable::FindRouterById(this, j);
        if (!RouterById) {
          __assert_rtn("FillRouteTlv", "router_table.cpp", 797, "router != nullptr");
        }
        unsigned __int8 PathCost = ot::RouterTable::GetPathCost(this, v14);
        if (PathCost >= 0x10u) {
          unsigned __int8 PathCost = 0;
        }
        char LinkQualityIn = ot::Neighbor::GetLinkQualityIn(RouterById);
        char LinkQualityOut = ot::Router::GetLinkQualityOut(RouterById);
        ot::Mle::RouteTlv::SetRouteData((uint64_t)a2, v18, LinkQualityIn, LinkQualityOut, PathCost);
      }
      ++v18;
    }
  }
  return ot::Mle::RouteTlv::SetRouteDataLength(a2, v18);
}

uint64_t ot::RouterTable::RouterIdMap::GetAsRouterIdSet(ot::RouterTable::RouterIdMap *this, ot::Mle::RouterIdSet *a2)
{
  uint64_t result = (uint64_t)ot::Mle::RouterIdSet::Clear(a2);
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    uint64_t result = ot::RouterTable::RouterIdMap::IsAllocated(this, i);
    if (result) {
      uint64_t result = ot::Mle::RouterIdSet::Add(a2, i);
    }
  }
  return result;
}

uint64_t ot::Mle::RouteTlv::SetRouterIdSequence(uint64_t this, char a2)
{
  *(unsigned char *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::Mle::RouteTlv::SetRouterIdSequence(this, a2);
}

uint64_t ot::Mle::RouteTlv::SetRouterIdMask(uint64_t this, const ot::Mle::RouterIdSet *a2)
{
  *(void *)(this + ot::Tlv::SetType(this, 3) = *(void *)a2;
  return this;
}

{
  return ot::Mle::RouteTlv::SetRouterIdMask(this, a2);
}

uint64_t ot::Mle::RouteTlv::SetRouteData(uint64_t result, unsigned __int8 a2, char a3, char a4, char a5)
{
  *(unsigned char *)(result + 11 + aot::NetworkData::NetworkDataTlv::SetType(this, 2) = (16 * a3) & 0x30 | (a4 << 6) | a5 & 0xF;
  return result;
}

{
  return ot::Mle::RouteTlv::SetRouteData(result, a2, a3, a4, a5);
}

uint64_t ot::Mle::RouteTlv::SetRouteDataLength(ot::Mle::RouteTlv *this, char a2)
{
  return ot::Tlv::SetLength((uint64_t)this, a2 + 9);
}

{
  return ot::Mle::RouteTlv::SetRouteDataLength(this, a2);
}

uint64_t ot::RouterTable::HandleTimeTick(ot::RouterTable *this)
{
  ot::RouterTable::RouterIdMap::HandleTimeTick((BOOL)this + 4640);
  uint64_t v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  uint64_t result = ot::Mle::Mle::IsLeader(v1);
  if (result)
  {
    uint64_t result = ot::RouterTable::GetLeaderAge(this);
    if (result >= 0xA)
    {
      ++*((unsigned char *)this + 4708);
      uint64_t result = ot::TimerMilli::GetNow((ot::TimerMilli *)result);
      *((_DWORD *)this + 1176)  = result;
    }
  }
  return result;
}

BOOL ot::RouterTable::RouterIdMap::HandleTimeTick(BOOL this)
{
  uint64_t v1 = (ot::RouterTable::RouterIdMap *)this;
  for (unsigned __int8 i = 0; i <= 0x3Eu; ++i)
  {
    this  = ot::RouterTable::RouterIdMap::IsAllocated(v1, i);
    if (!this)
    {
      if (*((unsigned char *)v1 + i)) {
        --*((unsigned char *)v1 + i);
      }
    }
  }
  return this;
}

void ot::RouterTable::LogRouteTable(ot::RouterTable *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"RouterTable", "Route table", a3, a4, a5, a6, a7, a8, v30);
  ot::Array<ot::Router,(unsigned short)32,unsigned char>::begin();
  char v41 = v8;
  uint64_t v40 = ot::Array<ot::Router,(unsigned short)32,unsigned char>::end((uint64_t)this + 8);
  while (v41 != (ot::Neighbor *)v40)
  {
    ot::String<(unsigned short)128>::String((uint64_t)v42);
    unsigned __int8 RouterId = ot::Neighbor::GetRouterId(v41);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v41);
    ot::StringWriter::Append((ot::StringWriter *)v42, "    %2d 0x%04x", RouterId, Rloc16);
    int v38 = (unsigned __int16)ot::Neighbor::GetRloc16(v41);
    uint64_t v16 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (v38 == (unsigned __int16)ot::Mle::Mle::GetRloc16(v16))
    {
      ot::StringWriter::Append((ot::StringWriter *)v42, " - me");
    }
    else
    {
      BOOL v17 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      if (ot::Mle::Mle::IsChild(v17)
        && (int v36 = (unsigned __int16)ot::Neighbor::GetRloc16(v41),
            char v18 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this),
            Parent  = (ot::Neighbor *)ot::Mle::Mle::GetParent(v18),
            v36 == (unsigned __int16)ot::Neighbor::GetRloc16(Parent)))
      {
        ot::StringWriter::Append((ot::StringWriter *)v42, " - parent");
      }
      else
      {
        if (ot::Neighbor::IsStateValid(v41))
        {
          unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(v41);
          unsigned __int8 LinkQualityOut = ot::Router::GetLinkQualityOut(v41);
          LinkCost  = ot::RouterTable::GetLinkCost(this, v41);
          ot::StringWriter::Append((ot::StringWriter *)v42, " - nbr{lq[i/o]:%d/%d cost:%d}", LinkQualityIn, LinkQualityOut, LinkCost);
        }
        if (ot::Router::GetNextHop(v41) != 63)
        {
          unsigned __int8 NextHop = ot::Router::GetNextHop(v41);
          Cost  = ot::Router::GetCost(v41);
          ot::StringWriter::Append((ot::StringWriter *)v42, " - nexthop{%d cost:%d}", NextHop, Cost);
        }
      }
    }
    int v32 = ot::Neighbor::GetRouterId(v41);
    unsigned __int16 v22 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
    if (v32 == ot::Mle::Mle::GetLeaderId(v22)) {
      ot::StringWriter::Append((ot::StringWriter *)v42, " - leader");
    }
    char v23 = ot::String<(unsigned short)128>::AsCString((uint64_t)v42);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"RouterTable", "%s", v24, v25, v26, v27, v28, v29, v23);
    char v41 = (ot::Neighbor *)((char *)v41 + 144);
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"RouterTable", "Route table dump end", v9, v10, v11, v12, v13, v14, v31);
}

ot::InstanceLocator *ot::Router::Init(ot::Router *this, ot::Instance *a2)
{
  return ot::Neighbor::Init(this, a2);
}

{
  return ot::Router::Init(this, a2);
}

uint64_t ot::TaskletIn<ot::RouterTable,&ot::RouterTable::HandleTableChanged>::HandleTasklet(ot::InstanceLocator *a1)
{
  uint64_t v2 = ot::GetProvider<ot::InstanceLocator>::Get<ot::RouterTable>(a1);
  return ((uint64_t (*)(uint64_t))ot::RouterTable::HandleTableChanged)(v2);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::PopBack(uint64_t a1)
{
  if (ot::Array<ot::Router,(unsigned short)32,unsigned char>::IsEmpty(a1)) {
    return 0;
  }
  char v1 = *(unsigned char *)(a1 + 4608);
  *(unsigned char *)(a1 + 4608)  = v1 - 1;
  return a1 + 144 * (v1 - 1);
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::PopBack(a1);
}

uint64_t ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetMaxSize()
{
  return 32;
}

{
  return ot::Array<ot::Router,(unsigned short)32,unsigned char>::GetMaxSize();
}

ot::SourceMatchController *ot::SourceMatchController::SourceMatchController(ot::SourceMatchController *this, ot::Instance *a2)
{
  *(unsigned char *)this  = 0;
  ot::SourceMatchController::ClearTable(this);
  return this;
}

{
  ot::SourceMatchController::SourceMatchController(this, a2);
  return this;
}

void ot::SourceMatchController::ClearTable(ot::SourceMatchController *this)
{
  char v1 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::ClearSrcMatchShortEntries(v1);
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::ClearSrcMatchExtEntries(v2);
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "Cleared all entries", v3, v4, v5, v6, v7, v8, (char)this);
}

uint64_t ot::SourceMatchController::IncrementMessageCount(ot::SourceMatchController *this, ot::Child *a2, char a3)
{
  char v5 = a3 & 1;
  if (!(unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 144))) {
    ot::SourceMatchController::AddEntry(this, a2);
  }
  uint64_t result = ot::IndirectSender::ChildInfo::IncrementIndirectMessageCount((uint64_t)a2 + 144);
  if (v5) {
    return ot::IndirectSender::ChildInfo::IncrementApplicationMessageCount((uint64_t)a2 + 144);
  }
  return result;
}

void ot::SourceMatchController::AddEntry(ot::SourceMatchController *this, ot::Child *a2)
{
  if (ot::SourceMatchController::IsEnabled(this))
  {
    if (ot::SourceMatchController::AddAddress(this, a2))
    {
      ot::SourceMatchController::Enable(this, 0);
    }
    else
    {
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending((uint64_t)a2 + 144, 0);
      ot::SourceMatchController::Enable(this, 1);
    }
  }
  else if (!ot::SourceMatchController::AddPendingEntries(this))
  {
    ot::SourceMatchController::Enable(this, 1);
  }
}

uint64_t ot::IndirectSender::ChildInfo::IncrementIndirectMessageCount(uint64_t this)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFFC000FFFFLL | ((unint64_t)(((WORD1(*(void *)(this + 8)) & 0x3FFF)
                                                                                            + 1) & 0x3FFF) << 16);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::IncrementIndirectMessageCount(this);
}

uint64_t ot::IndirectSender::ChildInfo::IncrementApplicationMessageCount(uint64_t this)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFC000FFFFFFFFLL | ((((HIDWORD(*(void *)(this + 8)) & 0x3FFF) + 1) & 0x3FFF) << 32);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::IncrementApplicationMessageCount(this);
}

void ot::SourceMatchController::DecrementMessageCount(ot::SourceMatchController *this, ot::Child *a2, char a3)
{
  char v21 = a3 & 1;
  if ((unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 144)))
  {
    if (v21) {
      ot::IndirectSender::ChildInfo::DecrementApplicationMessageCount((uint64_t)a2 + 144);
    }
    ot::IndirectSender::ChildInfo::DecrementIndirectMessageCount((uint64_t)a2 + 144);
    if (!(unsigned __int16)ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 144)))
    {
      ApplicationMessageCount  = ot::IndirectSender::ChildInfo::GetApplicationMessageCount((ot::Child *)((char *)a2 + 144));
      if (v17 | (ApplicationMessageCount == 0)) {
        char v18 = 1;
      }
      else {
        char v18 = 0;
      }
      if ((v18 & 1) == 0)
      {
        ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SrcMatchCtrl", "As __int16 IndirectMessageCount = 0 and Application MessageCount > 0 which is invalid.", v11, v12, v13, v14, v15, v16, v19);
        ot::IndirectSender::ChildInfo::ResetApplicationMessageCount((uint64_t)a2 + 144);
      }
      ot::SourceMatchController::ClearEntry(this, a2);
    }
  }
  else
  {
    char Rloc16 = ot::Neighbor::GetRloc16(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"SrcMatchCtrl", "DecrementMessageCount(child 0x%04x) called when already at zero count.", v4, v5, v6, v7, v8, v9, Rloc16);
  }
}

uint64_t ot::IndirectSender::ChildInfo::DecrementApplicationMessageCount(uint64_t this)
{
  if (v1 | ((*(void *)(this + 8) & 0x3FFF00000000) == 0)) {
    char v2 = 1;
  }
  else {
    char v2 = 0;
  }
  if ((v2 & 1) == 0) {
    *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFC000FFFFFFFFLL | ((((HIDWORD(*(void *)(this + 8)) & 0x3FFF)
  }
                                                                            - 1) & 0x3FFF) << 32);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::DecrementApplicationMessageCount(this);
}

uint64_t ot::IndirectSender::ChildInfo::DecrementIndirectMessageCount(uint64_t this)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFFC000FFFFLL | ((unint64_t)(((WORD1(*(void *)(this + 8)) & 0x3FFF)
                                                                                            - 1) & 0x3FFF) << 16);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::DecrementIndirectMessageCount(this);
}

uint64_t ot::IndirectSender::ChildInfo::ResetApplicationMessageCount(uint64_t this)
{
  *(void *)(this + 8) &= 0xFFFFC000FFFFFFFFLL;
  return this;
}

{
  return ot::IndirectSender::ChildInfo::ResetApplicationMessageCount(this);
}

void ot::SourceMatchController::ClearEntry(ot::SourceMatchController *this, ot::Child *a2)
{
  if (ot::IndirectSender::ChildInfo::IsIndirectSourceMatchPending((ot::Child *)((char *)a2 + 144)))
  {
    char Rloc16 = ot::Neighbor::GetRloc16(a2);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "Clearing pending flag for 0x%04x", v3, v4, v5, v6, v7, v8, Rloc16);
    ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending((uint64_t)a2 + 144, 0);
  }
  else
  {
    if (ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort((ot::Child *)((char *)a2 + 144)))
    {
      uint64_t v26 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      unsigned __int16 v9 = ot::Neighbor::GetRloc16(a2);
      int matched = ot::Radio::ClearSrcMatchShortEntry(v26, v9);
      char v27 = ot::Neighbor::GetRloc16(a2);
      ot::ErrorToString(matched);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "Clearing short addr: 0x%04x -- %s (%d)", v10, v11, v12, v13, v14, v15, v27);
    }
    else
    {
      ot::Neighbor::GetExtAddress(a2);
      ot::Mac::ExtAddress::Set(v32, v16, 1);
      char v17 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
      int matched = ot::Radio::ClearSrcMatchExtEntry(v17, (const ot::Mac::ExtAddress *)v32);
      ot::Neighbor::GetExtAddress(a2);
      ot::Mac::ExtAddress::ToString(v18, (ot::StringWriter *)v31);
      char v25 = ot::String<(unsigned short)17>::AsCString((uint64_t)v31);
      ot::ErrorToString(matched);
      ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "Clearing addr: %s -- %s (%d)", v19, v20, v21, v22, v23, v24, v25);
    }
    if (!matched
      && (ot::SourceMatchController::IsEnabled(this) & 1) == 0
      && !ot::SourceMatchController::AddPendingEntries(this))
    {
      ot::SourceMatchController::Enable(this, 1);
    }
  }
}

void ot::SourceMatchController::ResetMessageCount(ot::SourceMatchController *this, ot::Child *a2)
{
}

uint64_t ot::IndirectSender::ChildInfo::ResetIndirectMessageCount(uint64_t this)
{
  *(void *)(this + 8) &= 0xFFFFFFFFC000FFFFLL;
  return this;
}

{
  return ot::IndirectSender::ChildInfo::ResetIndirectMessageCount(this);
}

void ot::SourceMatchController::SetSrcMatchAsShort(ot::SourceMatchController *this, ot::Child *a2, char a3)
{
  char v7 = a3 & 1;
  if ((ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort((ot::Child *)((char *)a2 + 144)) & 1) != (a3 & 1))
  {
    __int16 IndirectMessageCount = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Child *)((char *)a2 + 144));
    if (v4 | (IndirectMessageCount == 0)) {
      char v5 = 1;
    }
    else {
      char v5 = 0;
    }
    if (v5)
    {
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchShort((uint64_t)a2 + 144, v7 & 1);
    }
    else
    {
      ot::SourceMatchController::ClearEntry(this, a2);
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchShort((uint64_t)a2 + 144, v7 & 1);
      ot::SourceMatchController::AddEntry(this, a2);
    }
  }
}

uint64_t ot::IndirectSender::ChildInfo::SetIndirectSourceMatchShort(uint64_t this, char a2)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFFBFFFFFFFLL | ((unint64_t)(a2 & 1) << 30);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::SetIndirectSourceMatchShort(this, a2);
}

uint64_t ot::Radio::ClearSrcMatchShortEntries(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchShortEntries((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::ClearSrcMatchShortEntries(this);
}

uint64_t ot::Radio::ClearSrcMatchExtEntries(ot::Radio *this)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchExtEntries((uint64_t)InstancePtr, v2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::ClearSrcMatchExtEntries(this);
}

void ot::SourceMatchController::Enable(ot::SourceMatchController *this, char a2)
{
  *(unsigned char *)this  = a2 & 1;
  uint64_t v2 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
  ot::Radio::EnableSrcMatch(v2, *(unsigned char *)this & 1);
  unsigned __int16 v9 = "En";
  if ((*(unsigned char *)this & 1) == 0) {
    unsigned __int16 v9 = "Dis";
  }
  ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "%sabling", v3, v4, v5, v6, v7, v8, (char)v9);
}

uint64_t ot::Radio::EnableSrcMatch(ot::Radio *this, char a2)
{
  char v10 = a2 & 1;
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioEnableSrcMatch((uint64_t)InstancePtr, v10 & 1, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::EnableSrcMatch(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending(uint64_t this, char a2)
{
  *(void *)(this + 8)  = *(void *)(this + 8) & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)(a2 & 1) << 31);
  return this;
}

{
  return ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending(this, a2);
}

uint64_t ot::SourceMatchController::IsEnabled(ot::SourceMatchController *this)
{
  return *(unsigned char *)this & 1;
}

{
  return ot::SourceMatchController::IsEnabled(this);
}

uint64_t ot::SourceMatchController::AddPendingEntries(ot::SourceMatchController *this)
{
  uint64_t v12 = this;
  unsigned int v11 = 0;
  char v1 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ChildTable>(this);
  char v9 = ot::ChildTable::Iterate(v1, 1);
  char v10 = (ot::ChildTable::IteratorBuilder *)&v9;
  v8[0]  = ot::ChildTable::IteratorBuilder::begin((ot::ChildTable::IteratorBuilder *)&v9);
  v8[1]  = v2;
  v7[0]  = ot::ChildTable::IteratorBuilder::end(v10);
  v7[1]  = v3;
  while (ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator!=(v8, v7))
  {
    uint64_t v6 = (ot::Child *)ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator*((uint64_t)v8);
    if (ot::IndirectSender::ChildInfo::IsIndirectSourceMatchPending((ot::Child *)((char *)v6 + 144)))
    {
      unsigned int v11 = ot::SourceMatchController::AddAddress(this, v6);
      if (v11) {
        return v11;
      }
      ot::IndirectSender::ChildInfo::SetIndirectSourceMatchPending((uint64_t)v6 + 144, 0);
    }
    ot::ItemPtrIterator<ot::Child,ot::ChildTable::Iterator>::operator++((uint64_t)v8);
  }
  return v11;
}

uint64_t ot::SourceMatchController::AddAddress(ot::SourceMatchController *this, const ot::Child *a2)
{
  if (ot::IndirectSender::ChildInfo::IsIndirectSourceMatchShort((const ot::Child *)((char *)a2 + 144)))
  {
    uint64_t v20 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(a2);
    unsigned int matched = ot::Radio::AddSrcMatchShortEntry(v20, Rloc16);
    char v21 = ot::Neighbor::GetRloc16(a2);
    ot::ErrorToString(matched);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "Adding short addr: 0x%04x -- %s (%d)", v3, v4, v5, v6, v7, v8, v21);
  }
  else
  {
    ot::Neighbor::GetExtAddress(a2);
    ot::Mac::ExtAddress::Set(v26, v9, 1);
    char v10 = (ot::Radio *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Radio>(this);
    unsigned int matched = ot::Radio::AddSrcMatchExtEntry(v10, (const ot::Mac::ExtAddress *)v26);
    ot::Neighbor::GetExtAddress(a2);
    ot::Mac::ExtAddress::ToString(v11, (ot::StringWriter *)v25);
    char v19 = ot::String<(unsigned short)17>::AsCString((uint64_t)v25);
    ot::ErrorToString(matched);
    ot::Logger::LogAtLevel<(ot::LogLevel)5>((ot *)"SrcMatchCtrl", "Adding addr: %s -- %s (%d)", v12, v13, v14, v15, v16, v17, v19);
  }
  return matched;
}

uint64_t ot::Radio::AddSrcMatchShortEntry(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioAddSrcMatchShortEntry((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::AddSrcMatchShortEntry(this, a2);
}

uint64_t ot::Radio::AddSrcMatchExtEntry(ot::Radio *this, const ot::Mac::ExtAddress *a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioAddSrcMatchExtEntry((uint64_t)InstancePtr, (uint64_t)a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::AddSrcMatchExtEntry(this, a2);
}

uint64_t ot::IndirectSender::ChildInfo::IsIndirectSourceMatchPending(ot::IndirectSender::ChildInfo *this)
{
  return (*((void *)this + 1) >> 31) & 1;
}

{
  return ot::IndirectSender::ChildInfo::IsIndirectSourceMatchPending(this);
}

uint64_t ot::Radio::ClearSrcMatchShortEntry(ot::Radio *this, unsigned __int16 a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchShortEntry((uint64_t)InstancePtr, a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::ClearSrcMatchShortEntry(this, a2);
}

uint64_t ot::Radio::ClearSrcMatchExtEntry(ot::Radio *this, const ot::Mac::ExtAddress *a2)
{
  InstancePtr  = ot::Radio::GetInstancePtr(this);
  return otPlatRadioClearSrcMatchExtEntry((uint64_t)InstancePtr, (uint64_t)a2, v3, v4, v5, v6, v7, v8);
}

{
  return ot::Radio::ClearSrcMatchExtEntry(this, a2);
}

ot::ThreadNetif *ot::ThreadNetif::ThreadNetif (ot::ThreadNetif *this, ot::Instance *a2)
{
  ot::Ip6::Netif::Netif (this, a2);
  uint64_t result = this;
  *((unsigned char *)this + 696)  = 0;
  return result;
}

{
  ot::ThreadNetif::ThreadNetif (this, a2);
  return this;
}

uint64_t ot::ThreadNetif::Up(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(unsigned char *)(this + 696) & 1) == 0)
  {
    otLogDebgPlat("ThreadNetif: Up", a2, a3, a4, a5, a6, a7, a8, this);
    uint64_t v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(v20);
    ot::Mac::Mac::SetEnabled(v8, 1);
    char v9 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v20);
    ot::MeshForwarder::Start(v9);
    *((unsigned char *)v20 + 696)  = 1;
    ot::Ip6::Netif::SubscribeAllNodesMulticast(v20);
    char v10 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v20);
    ot::Mle::Mle::Enable(v10, v11, v12, v13, v14, v15, v16, v17);
    IgnoreError();
    char v18 = (ot::Tmf::Agent *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(v20);
    ot::Tmf::Agent::Start(v18);
    IgnoreError();
    char v19 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(v20);
    return ot::Notifier::Signal(v19, 0x1000000);
  }
  return this;
}

uint64_t ot::ThreadNetif::Down(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(this + 696))
  {
    otLogDebgPlat("ThreadNetif: Down", a2, a3, a4, a5, a6, a7, a8, this);
    uint64_t v8 = (void **)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::SecureAgent>(v20);
    ot::Coap::CoapSecure::Stop(v8);
    char v9 = (ot::Coap::Coap *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(v20);
    ot::Coap::Coap::Stop(v9);
    IgnoreError();
    char v10 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(v20);
    ot::Mle::Mle::Disable(v10, v11, v12, v13, v14, v15, v16, v17);
    IgnoreError();
    ot::Ip6::Netif::RemoveAllExternalUnicastAddresses(v20);
    ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses(v20);
    ot::Ip6::Netif::UnsubscribeAllRoutersMulticast(v20);
    ot::Ip6::Netif::UnsubscribeAllNodesMulticast(v20);
    *((unsigned char *)v20 + 696)  = 0;
    char v18 = (ot::MeshForwarder *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshForwarder>(v20);
    ot::MeshForwarder::Stop(v18);
    char v19 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(v20);
    return ot::Notifier::Signal(v19, 0x1000000);
  }
  return this;
}

uint64_t ot::FrameData::ReadUint8(ot::FrameData *this, unsigned __int8 *a2)
{
  return ot::FrameData::ReadBytes(this, a2, 1u);
}

uint64_t ot::FrameData::ReadBytes(ot::FrameData *this, void *a2, unsigned __int16 a3)
{
  unsigned int v6 = 0;
  if (ot::FrameData::CanRead(this, a3))
  {
    unsigned __int16 Bytes = (const void *)ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
    memcpy(a2, Bytes, a3);
    ot::FrameData::SkipOver(this, a3);
  }
  else
  {
    return 6;
  }
  return v6;
}

uint64_t ot::FrameData::ReadBigEndianUint16(ot::FrameData *this, unsigned __int16 *a2)
{
  unsigned int Bytes = ot::FrameData::ReadBytes(this, a2, 2u);
  if (!Bytes) {
    *a2  = ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::ReadBigEndianUint32(ot::FrameData *this, unsigned int *a2)
{
  unsigned int Bytes = ot::FrameData::ReadBytes(this, a2, 4u);
  if (!Bytes) {
    *a2  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::ReadLittleEndianUint16(ot::FrameData *this, unsigned __int16 *a2)
{
  unsigned int Bytes = ot::FrameData::ReadBytes(this, a2, 2u);
  if (!Bytes) {
    *a2  = ot::Encoding::LittleEndian::HostSwap16(*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::ReadLittleEndianUint32(ot::FrameData *this, unsigned int *a2)
{
  unsigned int Bytes = ot::FrameData::ReadBytes(this, a2, 4u);
  if (!Bytes) {
    *a2  = ot::Encoding::LittleEndian::HostSwap32(*a2);
  }
  return Bytes;
}

uint64_t ot::FrameData::SkipOver(ot::FrameData *this, unsigned __int16 a2)
{
  uint64_t Bytes = ot::Data<(ot::DataLengthType)1>::GetBytes((uint64_t)this);
  __int16 Length = ot::Data<(ot::DataLengthType)1>::GetLength((uint64_t)this);
  return ot::Data<(ot::DataLengthType)1>::Init((uint64_t)this, Bytes + a2, Length - a2);
}

double ot::Tmf::MessageInfo::SetSockAddrToRloc(ot::Tmf::MessageInfo *this)
{
  char v1 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  MeshLocal16  = (__n128 *)ot::Mle::Mle::GetMeshLocal16(v1);
  return ot::Ip6::MessageInfo::SetSockAddr((__n128 *)this, MeshLocal16);
}

uint64_t ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc(ot::Tmf::MessageInfo *this)
{
  ot::Tmf::MessageInfo::SetSockAddrToRloc(this);
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(this);
  return ot::Mle::Mle::GetLeaderAloc(v4, PeerAddr);
}

uint64_t ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc(ot::Tmf::MessageInfo *this)
{
  ot::Tmf::MessageInfo::SetSockAddrToRloc(this);
  uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(this);
  return ot::Mle::Mle::GetLeaderAddress(v4, PeerAddr);
}

double ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast(ot::Tmf::MessageInfo *this)
{
  ot::Tmf::MessageInfo::SetSockAddrToRloc(this);
  PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(this);
  *(void *)&double result = ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast(PeerAddr).n128_u64[0];
  return result;
}

uint64_t ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Tmf::MessageInfo *this, unsigned __int16 a2)
{
  ot::Tmf::MessageInfo::SetSockAddrToRloc(this);
  uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
  MeshLocal16  = (__n128 *)ot::Mle::Mle::GetMeshLocal16(v2);
  ot::Ip6::MessageInfo::SetPeerAddr((__n128 *)this, MeshLocal16);
  PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(this);
  Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(PeerAddr);
  return ot::Ip6::InterfaceIdentifier::SetLocator(Iid, a2);
}

double ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Tmf::MessageInfo *this, __n128 *a2)
{
  return ot::Ip6::MessageInfo::SetPeerAddr((__n128 *)this, a2);
}

ot::Tmf::Agent *ot::Tmf::Agent::Agent(ot::Tmf::Agent *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Tmf::Agent::Agent(this, a2);
  return this;
}

uint64_t ot::Tmf::Agent::Filter(ot::Tmf::Agent *this, const ot::Coap::Message *a2, const ot::Ip6::MessageInfo *a3, void *a4)
{
  PeerAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetPeerAddr(a2);
  SockAddr  = (ot::Ip6::Address *)ot::Ip6::MessageInfo::GetSockAddr(a2);
  Sock__int16 Port = ot::Ip6::MessageInfo::GetSockPort(a2);
  if (ot::Tmf::Agent::IsTmfMessage(a3, PeerAddr, SockAddr, SockPort)) {
    return 0;
  }
  else {
    return 31;
  }
}

uint64_t ot::Tmf::Agent::HandleResource(ot::Tmf::Agent *this, ot::Coap::CoapBase *a2, ot::Coap::Message *a3, ot::Coap::Message *a4, const ot::Ip6::MessageInfo *a5, int (*a6)(const void *, const void *))
{
  return ot::Tmf::Agent::HandleResource(this, a2, a3, a4, (uint64_t)a5, a6) & 1;
}

uint64_t ot::Tmf::Agent::Start(ot::Tmf::Agent *this)
{
  return ot::Coap::Coap::Start((uint64_t)this, 61631, 1);
}

void ot::Tmf::Agent::HandleTmf<(ot::Uri)28>(ot::InstanceLocator *a1, ot::Tlv *a2, uint64_t a3)
{
  uint64_t v3 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(a1);
  ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)28>(v3, a2, a3);
  uint64_t v4 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(a1);
  ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)28>(v4, a2);
}

uint64_t ot::Tmf::Agent::HandleResource(ot::Tmf::Agent *this, ot *a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  char v41 = 1;
  unsigned __int8 v6 = ot::UriFromPath(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  if (v6)
  {
    uint64_t v8 = v6;
    char v7 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    char v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    switch(v8)
    {
      case 0:
        char v9 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
        ot::AddressResolver::HandleTmf<(ot::Uri)0>(v9, a3, a4);
        return v41 & 1;
      case 1:
        uint64_t v15 = (ot::AddressResolver::CacheEntry **)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
        ot::AddressResolver::HandleTmf<(ot::Uri)1>(v15, a3, a4);
        return v41 & 1;
      case 2:
        uint64_t v14 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AddressResolver>(this);
        ot::AddressResolver::HandleTmf<(ot::Uri)2>(v14, a3, a4);
        return v41 & 1;
      case 3:
        uint64_t v17 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::HandleTmf<(ot::Uri)3>(v17, a3, (uint64_t)a4);
        return v41 & 1;
      case 4:
        uint64_t v16 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
        ot::Mle::MleRouter::HandleTmf<(ot::Uri)4>(v16, a3, a4);
        return v41 & 1;
      case 5:
        uint64_t v22 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        ot::NetworkData::Leader::HandleTmf<(ot::Uri)5>(v22, a3, a4);
        return v41 & 1;
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 21:
      case 30:
      case 31:
        break;
      case 10:
        char v25 = (ot::AnnounceBeginServer *)ot::GetProvider<ot::InstanceLocator>::Get<ot::AnnounceBeginServer>(this);
        ot::AnnounceBeginServer::HandleTmf<(ot::Uri)10>(v25, a3, a4);
        return v41 & 1;
      case 11:
        active  = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
        ot::MeshCoP::ActiveDatasetManager::HandleTmf<(ot::Uri)11>(active, a3, a4);
        return v41 & 1;
      case 12:
        char v18 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::ActiveDatasetManager>(this);
        ot::MeshCoP::ActiveDatasetManager::HandleTmf<(ot::Uri)12>(v18, a3, a4);
        return v41 & 1;
      case 14:
        uint64_t v23 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        ot::NetworkData::Leader::HandleTmf<(ot::Uri)14>(v23, a3, a4);
        return v41 & 1;
      case 16:
        uint64_t v24 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(this);
        ot::NetworkData::Leader::HandleTmf<(ot::Uri)16>(v24, a3, a4);
        return v41 & 1;
      case 17:
        char v30 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
        ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)17>(v30, a3, a4);
        return v41 & 1;
      case 18:
        uint64_t v29 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanClient>(this);
        ot::EnergyScanClient::HandleTmf<(ot::Uri)18>(v29, a3, a4);
        return v41 & 1;
      case 19:
        uint64_t v10 = ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanServer>(this);
        ot::EnergyScanServer::HandleTmf<(ot::Uri)19>(v10, a3, a4);
        return v41 & 1;
      case 20:
        char v27 = (unsigned char *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Joiner>(this);
        ot::MeshCoP::Joiner::HandleTmf<(ot::Uri)20>(v27, a3, a4);
        return v41 & 1;
      case 22:
        char v21 = (unsigned __int16 *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
        ot::MeshCoP::Leader::HandleTmf<(ot::Uri)22>(v21, a3, a4);
        return v41 & 1;
      case 23:
        uint64_t v20 = (_WORD *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Leader>(this);
        ot::MeshCoP::Leader::HandleTmf<(ot::Uri)23>(v20, a3, a4);
        return v41 & 1;
      case 24:
        uint64_t v28 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryClient>(this);
        ot::PanIdQueryClient::HandleTmf<(ot::Uri)24>(v28, a3, a4);
        return v41 & 1;
      case 25:
        uint64_t v12 = (ot::MeshCoP::DatasetManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
        ot::MeshCoP::PendingDatasetManager::HandleTmf<(ot::Uri)25>(v12, a3, a4);
        return v41 & 1;
      case 26:
        uint64_t v13 = ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryServer>(this);
        ot::PanIdQueryServer::HandleTmf<(ot::Uri)26>(v13, a3, a4);
        return v41 & 1;
      case 27:
        char v19 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::PendingDatasetManager>(this);
        ot::MeshCoP::PendingDatasetManager::HandleTmf<(ot::Uri)27>(v19, a3, a4);
        return v41 & 1;
      case 28:
        char v31 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Tmf::Agent>(this);
        ot::Tmf::Agent::HandleTmf<(ot::Uri)28>(v31, a3, (uint64_t)a4);
        return v41 & 1;
      case 29:
        uint64_t v26 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::JoinerRouter>(this);
        ot::MeshCoP::JoinerRouter::HandleTmf<(ot::Uri)29>(v26, a3, (uint64_t)a4);
        return v41 & 1;
      case 32:
        int v36 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Client>(this);
        ot::NetworkDiagnostic::Client::HandleTmf<(ot::Uri)32>(v36, a3, a4);
        return v41 & 1;
      case 33:
        uint64_t v33 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(this);
        ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)33>(v33, a3, a4);
        return v41 & 1;
      case 34:
        uint64_t v34 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(this);
        ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)34>(v34, a3, a4);
        return v41 & 1;
      case 35:
        unsigned __int16 v35 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Server>(this);
        ot::NetworkDiagnostic::Server::HandleTmf<(ot::Uri)35>(v35, a3, a4);
        return v41 & 1;
      case 36:
        int v32 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::DuaManager>(this);
        ot::DuaManager::HandleTmf<(ot::Uri)36>(v32, a3, a4);
        return v41 & 1;
      case 37:
        int v38 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
        ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)37>(v38, a3, a4);
        return v41 & 1;
      case 38:
        uint64_t v37 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Manager>(this);
        ot::BackboneRouter::Manager::HandleTmf<(ot::Uri)38>(v37, a3, a4);
        return v41 & 1;
      default:
        JUMPOUT(0);
    }
  }
  char v41 = 0;
  return v41 & 1;
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryClient>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::PanIdQueryClient>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::PanIdQueryClient>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanClient>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::EnergyScanClient>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::EnergyScanClient>(a1);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Client>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::NetworkDiagnostic::Client>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkDiagnostic::Client>(a1);
}

uint64_t ot::Tmf::Agent::IsTmfMessage(ot::Tmf::Agent *this, const ot::Ip6::Address *a2, const ot::Ip6::Address *a3, unsigned __int16 a4)
{
  char v9 = 0;
  if (a4 == 61631)
  {
    if (ot::Ip6::Address::IsLinkLocal(a2))
    {
      IsLinkLocalMulticast  = 1;
      if (!ot::Ip6::Address::IsLinkLocal(a3)) {
        IsLinkLocalMulticast  = ot::Ip6::Address::IsLinkLocalMulticast(a3);
      }
      char v9 = IsLinkLocalMulticast;
    }
    else
    {
      uint64_t v4 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
      if (ot::Mle::Mle::IsMeshLocalAddress(v4, a2))
      {
        uint64_t v5 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(this);
        if (ot::Mle::Mle::IsMeshLocalAddress(v5, a3)
          || ot::Ip6::Address::IsLinkLocalMulticast(a3)
          || ot::Ip6::Address::IsRealmLocalMulticast(a3))
        {
          char v9 = 1;
        }
      }
    }
  }
  return v9 & 1;
}

uint64_t ot::Tmf::Agent::PriorityToDscp(char a1)
{
  unsigned __int8 v3 = 15;
  if (a1)
  {
    BOOL v1 = a1 == 2 || a1 == 1;
    if (!v1 && a1 == 3) {
      return 7;
    }
  }
  else
  {
    return 23;
  }
  return v3;
}

uint64_t ot::Tmf::Agent::DscpToPriority(ot::Tmf::Agent *this)
{
  unsigned __int8 v2 = 3;
  if (this != 7)
  {
    if (this == 15)
    {
      return 1;
    }
    else if (this == 23)
    {
      return 0;
    }
  }
  return v2;
}

ot::Tmf::SecureAgent *ot::Tmf::SecureAgent::SecureAgent(ot::Tmf::SecureAgent *this, ot::Instance *a2)
{
  return this;
}

{
  ot::Tmf::SecureAgent::SecureAgent(this, a2);
  return this;
}

uint64_t ot::Tmf::SecureAgent::HandleResource(ot::Tmf::SecureAgent *this, ot::Coap::CoapBase *a2, ot::Coap::Message *a3, ot::Coap::Message *a4, const ot::Ip6::MessageInfo *a5, int (*a6)(const void *, const void *))
{
  return ot::Tmf::SecureAgent::HandleResource(this, a2, a3, a4, (uint64_t)a5, a6) & 1;
}

uint64_t ot::Tmf::SecureAgent::HandleResource(ot::Tmf::SecureAgent *this, ot *a2, ot::Coap::Message *a3, const ot::Ip6::MessageInfo *a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  char v22 = 1;
  unsigned __int8 v6 = ot::UriFromPath(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  if (v6 <= 0xBu)
  {
    uint64_t v8 = v6 - 11;
    char v7 = 0;
  }
  else
  {
    uint64_t v8 = v6 - 11;
    char v7 = 1;
  }
  if ((v7 & 1) == 0)
  {
    switch(v8)
    {
      case 0:
        uint64_t v15 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)11>(v15, a3, a4);
        return v22 & 1;
      case 1:
        uint64_t v16 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)12>(v16, a3, a4);
        return v22 & 1;
      case 2:
        uint64_t v11 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)13>(v11, a3, a4);
        return v22 & 1;
      case 3:
        uint64_t v13 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)14>(v13, a3, a4);
        return v22 & 1;
      case 4:
        uint64_t v10 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)15>(v10, a3, a4);
        return v22 & 1;
      case 5:
        uint64_t v14 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)16>(v14, a3, a4);
        return v22 & 1;
      case 6:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 17:
      case 19:
        break;
      case 10:
        uint64_t v9 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::Commissioner>(this);
        ot::MeshCoP::Commissioner::HandleTmf<(ot::Uri)21>(v9, a3);
        return v22 & 1;
      case 14:
        uint64_t v17 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)25>(v17, a3, a4);
        return v22 & 1;
      case 16:
        char v18 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)27>(v18, a3, a4);
        return v22 & 1;
      case 18:
        uint64_t v12 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)29>(v12, a3, (uint64_t)a4);
        return v22 & 1;
      case 20:
        uint64_t v19 = ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::BorderAgent>(this);
        ot::MeshCoP::BorderAgent::HandleTmf<(ot::Uri)31>(v19, a3, (uint64_t)a4);
        return v22 & 1;
      default:
        JUMPOUT(0);
    }
  }
  char v22 = 0;
  return v22 & 1;
}

uint64_t ot::Instance::Get<ot::PanIdQueryClient>(uint64_t a1)
{
  return ot::MeshCoP::Commissioner::GetPanIdQueryClient((ot::MeshCoP::Commissioner *)(a1 + 143592));
}

{
  return ot::Instance::Get<ot::PanIdQueryClient>(a1);
}

uint64_t ot::Instance::Get<ot::EnergyScanClient>(uint64_t a1)
{
  return ot::MeshCoP::Commissioner::GetEnergyScanClient((ot::MeshCoP::Commissioner *)(a1 + 143592));
}

{
  return ot::Instance::Get<ot::EnergyScanClient>(a1);
}

ot::InstanceLocator *ot::Neighbor::SetState(ot::InstanceLocator *result, char a2)
{
  uint64_t v4 = result;
  if (a2 != (*((unsigned char *)result + 30) & 0xF))
  {
    *((unsigned char *)result + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((unsigned char *)result + 30) & 0xF0 | a2 & 0xF;
    if ((*((unsigned char *)result + 30) & 0xF) == 7)
    {
      unsigned __int8 v2 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(result);
      unint64_t Uptime = ot::Uptime::GetUptime(v2);
      double result = (ot::InstanceLocator *)ot::Uptime::MsecToSec(Uptime);
      *((_DWORD *)v4 + 1ot::ThreadTlv::SetType(this, 7) = result;
    }
  }
  return result;
}

unint64_t ot::Uptime::MsecToSec(unint64_t this)
{
  return this / 0x3E8;
}

{
  return ot::Uptime::MsecToSec(this);
}

uint64_t ot::Neighbor::GetConnectionTime(ot::Neighbor *this)
{
  if (ot::Neighbor::IsStateValid(this))
  {
    BOOL v1 = (ot::Uptime *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Uptime>(this);
    unint64_t Uptime = ot::Uptime::GetUptime(v1);
    return (ot::Uptime::MsecToSec(Uptime) - *((_DWORD *)this + 17));
  }
  else
  {
    return 0;
  }
}

uint64_t ot::Neighbor::AddressMatcher::Matches(ot::Neighbor::AddressMatcher *this, const ot::Neighbor *a2)
{
  char v7 = 0;
  if (ot::Neighbor::MatchesFilter(a2, *(unsigned char *)this))
  {
    if (*((unsigned __int16 *)this + 1) == 65534
      || (int v5 = *((unsigned __int16 *)this + 1), v5 == (unsigned __int16)ot::Neighbor::GetRloc16(a2)))
    {
      if (!*((void *)this + 1)
        || (uint64_t v4 = (const void *)*((void *)this + 1),
            ot::Neighbor::GetExtAddress(a2),
            ot::Equatable<ot::Mac::ExtAddress>::operator==(v4, v2)))
      {
        char v7 = 1;
      }
    }
  }
  return v7 & 1;
}

uint64_t ot::Neighbor::MatchesFilter(ot::Neighbor *a1, unsigned __int8 a2)
{
  char IsStateValid = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    char v2 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v2 = 0;
  }
  if ((v2 & 1) == 0)
  {
    switch(v3)
    {
      case 0:
        char IsStateValid = ot::Neighbor::IsStateValid(a1);
        break;
      case 1:
        char IsStateValid = ot::Neighbor::IsStateValidOrRestoring(a1);
        break;
      case 2:
        char IsStateValid = ot::Neighbor::IsStateChildIdRequest(a1);
        break;
      case 3:
        char IsStateValid = ot::Neighbor::IsStateValidOrAttaching(a1) & 1;
        break;
      case 4:
        char IsStateValid = ot::Neighbor::IsStateInvalid(a1);
        break;
      case 5:
        char IsStateValid = !ot::Neighbor::IsStateInvalid(a1);
        break;
      case 6:
        char IsStateValid = !ot::Neighbor::IsStateValidOrRestoring(a1);
        break;
      case 7:
        char IsStateValid = 1;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return IsStateValid & 1;
}

void *ot::Neighbor::Info::SetFrom(ot::Neighbor::Info *this, const ot::Neighbor *a2)
{
  uint64_t v17 = this;
  uint64_t v16 = a2;
  ot::Clearable<ot::Neighbor::Info>::Clear(this);
  ot::Neighbor::GetExtAddress(v16);
  *(void *)this  = *(void *)v2;
  int Now = ot::TimerMilli::GetNow(v2);
  int LastHeard = ot::Neighbor::GetLastHeard(v16);
  uint64_t v3 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ot::Time::MsecToSec(v3);
  *((_WORD *)this + 8)  = ot::Neighbor::GetRloc16(v16);
  LinkFrameuint64_t Counters = (ot::Mac::LinkFrameCounters *)ot::Neighbor::GetLinkFrameCounters(v16);
  *((_DWORD *)this + 5)  = ot::Mac::LinkFrameCounters::GetMaximum(LinkFrameCounters);
  *((_DWORD *)this + 6)  = ot::Neighbor::GetMleFrameCounter(v16);
  *((unsigned char *)this + 28)  = ot::Neighbor::GetLinkQualityIn(v16);
  LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((unsigned char *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::LinkQualityInfo::GetAverageRss(LinkInfo);
  unsigned __int8 v6 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((unsigned char *)this + 45)  = ot::LinkQualityInfo::GetLastRss(v6);
  char v7 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((unsigned char *)this + 46)  = ot::LinkQualityInfo::GetLinkMargin(v7);
  uint64_t v8 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_WORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::LinkQualityInfo::GetFrameErrorRate(v8);
  uint64_t v9 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_WORD *)this + 25)  = ot::LinkQualityInfo::GetMessageErrorRate(v9);
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((unsigned char *)this + 54) & 0xFE | ot::Neighbor::IsRxOnWhenIdle(v16);
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((unsigned char *)this + 54) & 0xFD | (2 * ot::Neighbor::IsFullThreadDevice(v16));
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((unsigned char *)this + 54) & 0xFB | (4 * !ot::Neighbor::GetNetworkDataType(v16));
  *((_WORD *)this + 26)  = ot::Neighbor::GetVersion(v16);
  *((_DWORD *)this + ot::Tlv::SetType(this, 3) = ot::Neighbor::GetConnectionTime(v16);
  *((unsigned char *)this + 2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::Neighbor::GetVersion(v16);
  *((unsigned char *)this + 3ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Neighbor::GetLeaderFullDataVersion(v16);
  *((unsigned char *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ot::Neighbor::GetLeaderStableDataVersion(v16);
  *((unsigned char *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::Neighbor::GetIdSeqNum(v16);
  uint64_t v10 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_DWORD *)this + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::LinkQualityInfo::GetHomeKitMessageErrorRatePercent(v10);
  uint64_t v11 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v16);
  *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::LinkQualityInfo::GetMatterMessageErrorRatePercent(v11);
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((unsigned char *)this + 54) & 0xEF | (16 * (ot::Neighbor::IsEnhacedAckEnabled(v16) & 1));
  return memcpy((char *)this + 56, (char *)v16 + 72, 0x40uLL);
}

void *ot::Clearable<ot::Neighbor::Info>::Clear(void *a1)
{
  return memset(a1, 0, 0x78uLL);
}

{
  return ot::Clearable<ot::Neighbor::Info>::Clear(a1);
}

uint64_t ot::LinkQualityInfo::GetFrameErrorRate(ot::LinkQualityInfo *this)
{
  return (unsigned __int16)ot::SuccessRateTracker::GetFailureRate((ot::LinkQualityInfo *)((char *)this + 4));
}

{
  return ot::LinkQualityInfo::GetFrameErrorRate(this);
}

uint64_t ot::LinkQualityInfo::GetMessageErrorRate(ot::LinkQualityInfo *this)
{
  return (unsigned __int16)ot::SuccessRateTracker::GetFailureRate((ot::LinkQualityInfo *)((char *)this + 6));
}

{
  return ot::LinkQualityInfo::GetMessageErrorRate(this);
}

uint64_t ot::Neighbor::GetLeaderFullDataVersion(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 31);
}

{
  return ot::Neighbor::GetLeaderFullDataVersion(this);
}

uint64_t ot::Neighbor::GetLeaderStableDataVersion(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 32);
}

{
  return ot::Neighbor::GetLeaderStableDataVersion(this);
}

uint64_t ot::Neighbor::GetIdSeqNum(ot::Neighbor *this)
{
  return *((unsigned __int8 *)this + 33);
}

{
  return ot::Neighbor::GetIdSeqNum(this);
}

ot::InstanceLocator *ot::Neighbor::Init(ot::Neighbor *this, ot::Instance *a2)
{
  return ot::Neighbor::SetState(this, 0);
}

void ot::LinkQualityInfo::Init(ot::LinkQualityInfo *this, ot::Instance *a2)
{
}

{
  ot::LinkQualityInfo::Init(this, a2);
}

uint64_t ot::Neighbor::IsStateValidOrAttaching(ot::Neighbor *this)
{
  char v4 = 0;
  int State = ot::Neighbor::GetState(this);
  if (State)
  {
    if (State == 1 || (State != 3 && State != 2 ? (char v1 = 0) : (char v1 = 1), (v1 & 1) == 0 && (State - 4) <= 3)) {
      char v4 = 1;
    }
  }
  return v4 & 1;
}

BOOL ot::Neighbor::IsStateChildIdRequest(ot::Neighbor *this)
{
  return (*((unsigned char *)this + 30) & 0xF) == 4;
}

{
  return ot::Neighbor::IsStateChildIdRequest(this);
}

void ot::Neighbor::GenerateChallenge(ot::Neighbor *this)
{
}

uint64_t ot::Neighbor::SetDeviceMode(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t result = ot::Mle::DeviceMode::Get((ot::Mle::DeviceMode *)&v4);
  *(unsigned char *)(a1 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *(unsigned char *)(a1 + 30) & 0xF | (16 * (result & 0xF));
  return result;
}

BOOL ot::Neighbor::AggregateLinkMetrics(ot::Neighbor *this, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, char a5)
{
  uint64_t v14 = this;
  unsigned __int8 v13 = a2;
  unsigned __int8 v12 = a3;
  unsigned __int8 v11 = a4;
  char v10 = a5;
  v9[1]  = (uint64_t)this + 56;
  v9[0]  = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::begin((uint64_t)this + 56);
  uint64_t v8 = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::end();
  while (1)
  {
    BOOL result = ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator!=(v9, &v8);
    if (!result) {
      break;
    }
    char v7 = (ot::LinkMetrics::SeriesInfo *)ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator*((uint64_t)v9);
    if (!v13 || (int v6 = v13, v6 == ot::LinkMetrics::SeriesInfo::GetSeriesId(v7))) {
      ot::LinkMetrics::SeriesInfo::AggregateLinkMetrics(v7, v12, v11, v10);
    }
    ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator++(v9);
  }
  return result;
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::begin(uint64_t a1)
{
  uint64_t Head = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::GetHead(a1);
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v3, Head);
  return v3;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::begin(a1);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::end()
{
  ot::LinkedList<ot::Coap::Resource>::Iterator::Iterator(&v1, 0);
  return v1;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::end();
}

BOOL ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

{
  return ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator!=(a1, a2);
}

uint64_t ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator*(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator*(a1);
}

uint64_t ot::LinkMetrics::SeriesInfo::GetSeriesId(ot::LinkMetrics::SeriesInfo *this)
{
  return *((unsigned __int8 *)this + 8);
}

{
  return ot::LinkMetrics::SeriesInfo::GetSeriesId(this);
}

uint64_t ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator++(uint64_t *a1)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator::Advance(a1);
}

{
  return ot::ItemPtrIterator<ot::LinkMetrics::SeriesInfo,ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator>::operator++(a1);
}

void ot::Neighbor::GetForwardTrackingSeriesInfo(ot::Neighbor *this, ot::LinkMetrics::SeriesInfo *a2)
{
}

void ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(uint64_t a1, ot::LinkMetrics::SeriesInfo *a2)
{
  ot::AsConst<ot::LinkedList<ot::LinkMetrics::SeriesInfo>>();
  ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(v2, a2);
  ot::AsNonConst<ot::LinkMetrics::SeriesInfo>();
}

{
  ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(a1, a2);
}

void *ot::Neighbor::AddForwardTrackingSeriesInfo(ot::Neighbor *this, ot::LinkMetrics::SeriesInfo *a2)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Push((uint64_t *)this + 7, a2);
}

uint64_t ot::Neighbor::RemoveForwardTrackingSeriesInfo(ot::Neighbor *this, ot::LinkMetrics::SeriesInfo *a2)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::RemoveMatching<unsigned char>((ot::Neighbor *)((char *)this + 56), a2);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::RemoveMatching<unsigned char>(ot::LinkMetrics::SeriesInfo *a1, ot::LinkMetrics::SeriesInfo *a2)
{
  char v6[2] = a1;
  v6[1]  = a2;
  v6[0]  = 0;
  ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>((uint64_t)a1, (const unsigned __int8 *)a2, v6);
  uint64_t v5 = v2;
  if (v2) {
    ot::LinkedList<ot::LinkMetrics::SeriesInfo>::PopAfter((uint64_t *)a1, (void *)v6[0]);
  }
  return v5;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::RemoveMatching<unsigned char>(a1, a2);
}

BOOL ot::Neighbor::RemoveAllForwardTrackingSeriesInfo(ot::Neighbor *this)
{
  while (1)
  {
    BOOL result = ot::LinkedList<ot::LinkMetrics::SeriesInfo>::IsEmpty((void *)this + 7);
    if (result) {
      break;
    }
    char v4 = (ot::LinkMetrics::SeriesInfo *)ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop((uint64_t *)this + 7);
    uint64_t v2 = (ot::LinkMetrics::Subject *)ot::GetProvider<ot::InstanceLocator>::Get<ot::LinkMetrics::Subject>(this);
    ot::LinkMetrics::Subject::Free(v2, v4);
  }
  return result;
}

BOOL ot::LinkedList<ot::LinkMetrics::SeriesInfo>::IsEmpty(void *a1)
{
  return *a1 == 0;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::IsEmpty(a1);
}

char *ot::Neighbor::StateToString(unsigned __int8 a1)
{
  return ot::Neighbor::StateToString(ot::Neighbor::State)::kStateStrings[a1];
}

uint64_t ot::Child::Info::SetFrom(ot::Child::Info *this, const ot::Child *a2)
{
  uint64_t v16 = this;
  uint64_t v15 = a2;
  ot::Clearable<ot::Child::Info>::Clear(this);
  ot::Neighbor::GetExtAddress(v15);
  *(void *)this  = *v2;
  *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ot::Child::GetTimeout(v15);
  *((_WORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ot::Neighbor::GetRloc16(v15);
  unsigned __int16 Rloc16 = ot::Neighbor::GetRloc16(v15);
  *((_WORD *)this + 1ot::Tlv::SetType(this, 3) = ot::Mle::ChildIdFromRloc16((ot::Mle *)Rloc16);
  NetworkDataunsigned __int16 Version = (ot::TimerMilli *)ot::Child::GetNetworkDataVersion(v15);
  *((unsigned char *)this + 28)  = (_BYTE)NetworkDataVersion;
  int Now = ot::TimerMilli::GetNow(NetworkDataVersion);
  int LastHeard = ot::Neighbor::GetLastHeard(v15);
  uint64_t v5 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  *((_DWORD *)this + ot::Tlv::SetType(this, 3) = ot::Time::MsecToSec(v5);
  *((unsigned char *)this + 2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::Neighbor::GetLinkQualityIn(v15);
  LinkInfo  = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v15);
  *((unsigned char *)this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::LinkQualityInfo::GetAverageRss(LinkInfo);
  char v7 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v15);
  *((unsigned char *)this + 3ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::LinkQualityInfo::GetLastRss(v7);
  uint64_t v8 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v15);
  *((_WORD *)this + 16)  = ot::LinkQualityInfo::GetFrameErrorRate(v8);
  uint64_t v9 = (ot::LinkQualityInfo *)ot::Neighbor::GetLinkInfo(v15);
  *((_WORD *)this + 1ot::ThreadTlv::SetType(this, 7) = ot::LinkQualityInfo::GetMessageErrorRate(v9);
  *((_WORD *)this + 18)  = ot::IndirectSender::ChildInfo::GetIndirectMessageCount((ot::Neighbor *)((char *)v15 + 144));
  unsigned __int16 Version = ot::Neighbor::GetVersion(v15);
  *((unsigned char *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::ClampToUint8<unsigned short>(Version);
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((unsigned char *)this + 52) & 0xFE | ot::Neighbor::IsRxOnWhenIdle(v15);
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((unsigned char *)this + 52) & 0xFD | (2 * ot::Neighbor::IsFullThreadDevice(v15));
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((unsigned char *)this + 52) & 0xFB | (4 * !ot::Neighbor::GetNetworkDataType(v15));
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((unsigned char *)this + 52) & 0xF7 | (8 * ot::Neighbor::IsStateRestoring(v15));
  *((_WORD *)this + 1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = ot::Child::GetSupervisionInterval(v15);
  *((unsigned char *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((unsigned char *)this + 52) & 0xEF | (16
                                                        * ot::CslTxScheduler::ChildInfo::IsCslSynchronized((ot::Neighbor *)((char *)v15 + 168)));
  *((unsigned char *)this + 4ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::CslTxScheduler::ChildInfo::GetCslChannel((ot::Neighbor *)((char *)v15 + 168));
  *((_DWORD *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::CslTxScheduler::ChildInfo::GetCslTimeout((ot::Neighbor *)((char *)v15 + 168));
  *((_WORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::CslTxScheduler::ChildInfo::GetCslPeriod((ot::Neighbor *)((char *)v15 + 168));
  *((_WORD *)this + 25)  = ot::CslTxScheduler::ChildInfo::GetCslPhase((ot::Neighbor *)((char *)v15 + 168));
  uint64_t result = ot::Neighbor::GetConnectionTime(v15);
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = result;
  return result;
}

void *ot::Clearable<ot::Child::Info>::Clear(void *a1)
{
  return memset(a1, 0, 0x38uLL);
}

{
  return ot::Clearable<ot::Child::Info>::Clear(a1);
}

uint64_t ot::ClampToUint8<unsigned short>(unsigned __int16 a1)
{
  return ot::Min<unsigned short>(a1, 0xFFu);
}

{
  return ot::ClampToUint8<unsigned short>(a1);
}

uint64_t ot::Child::AddressIterator::GetAddress(ot::Child::AddressIterator *this)
{
  if (!*((_WORD *)this + 5)) {
    return (uint64_t)this + 12;
  }
  if (*((unsigned __int16 *)this + 5) >= 0x10u) {
    return 0;
  }
  else {
    return *(void *)this + 200 + 16 * (*((unsigned __int16 *)this + 5) - 1);
  }
}

uint64_t ot::Child::AddressIterator::Update(ot::Child::AddressIterator *this)
{
  if (!*((_WORD *)this + 5)
    && ot::Child::GetMeshLocalIp6Address(*(ot::Child **)this, (ot::Child::AddressIterator *)((char *)this + 12)))
  {
    ++*((_WORD *)this + 5);
  }
  while (1)
  {
    uint64_t result = ot::Child::AddressIterator::GetAddress(this);
    uint64_t v3 = (ot::Ip6::Address *)result;
    if (!result) {
      break;
    }
    uint64_t result = ot::Ip6::Address::IsUnspecified((ot::Ip6::Address *)result);
    if (result) {
      break;
    }
    uint64_t result = ot::Ip6::Address::MatchesFilter(v3, *((unsigned char *)this + 8));
    if (result) {
      return result;
    }
    ++*((_WORD *)this + 5);
  }
  *((_WORD *)this + 5)  = 16;
  return result;
}

uint64_t ot::Child::GetMeshLocalIp6Address(ot::Child *this, ot::Ip6::Address *a2)
{
  unsigned int v6 = 0;
  if (ot::Ip6::InterfaceIdentifier::IsUnspecified((ot::Child *)((char *)this + 192)))
  {
    return 23;
  }
  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    ot::Mle::Mle::GetMeshLocalPrefix(v2);
    ot::Ip6::Address::SetPrefix(a2, v3);
    ot::Ip6::Address::SetIid(a2, (ot::Child *)((char *)this + 192));
  }
  return v6;
}

ot::InstanceLocator *ot::Child::Clear(ot::Child *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  bzero(this, 0x1D0uLL);
  return ot::Child::Init(this, Instance);
}

_WORD *ot::Child::ClearIp6Addresses(ot::Child *this)
{
  return ot::Clearable<ot::BitVector<(unsigned short)15>>::Clear((_WORD *)this + 223);
}

_WORD *ot::Clearable<ot::BitVector<(unsigned short)15>>::Clear(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

{
  return ot::Clearable<ot::BitVector<(unsigned short)15>>::Clear(result);
}

uint64_t ot::Child::SetDeviceMode(ot::Neighbor *a1, char a2)
{
  char v7 = a2;
  unsigned int v6 = a1;
  char DeviceMode = ot::Neighbor::GetDeviceMode(a1);
  uint64_t result = ot::Unequatable<ot::Mle::DeviceMode>::operator!=(&v7, &DeviceMode);
  if (result)
  {
    ot::Neighbor::SetDeviceMode((uint64_t)a1, v7);
    uint64_t result = ot::Neighbor::IsStateValid(a1);
    if (result)
    {
      uint64_t v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::NeighborTable>(a1);
      return ot::NeighborTable::Signal(v3, 2u, a1);
    }
  }
  return result;
}

uint64_t ot::Child::AddIp6Address(ot::Child *this, const ot::Ip6::Address *a2)
{
  unsigned int v6 = 0;
  if (ot::Ip6::Address::IsUnspecified(a2))
  {
    return 7;
  }
  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsMeshLocalAddress(v2, a2))
    {
      if (ot::Ip6::InterfaceIdentifier::IsUnspecified((ot::Child *)((char *)this + 192))) {
        *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *(void *)ot::Ip6::Address::GetIid(a2);
      }
      else {
        return 24;
      }
    }
    else
    {
      for (unsigned __int8 i = (ot::Child *)((char *)this + 200);
            i != (ot::Child *)((char *)this + 440);
            unsigned __int8 i = (ot::Ip6::Address *)((char *)i + 16))
      {
        if (ot::Ip6::Address::IsUnspecified(i))
        {
          *(_OWORD *)unsigned __int8 i = *(_OWORD *)a2;
          return v6;
        }
        if (!ot::Unequatable<ot::Ip6::Address>::operator!=(i, a2)) {
          return 24;
        }
      }
      return 3;
    }
  }
  return v6;
}

uint64_t ot::Child::RemoveIp6Address(ot::Child *this, const ot::Ip6::Address *a2)
{
  unsigned int v7 = 23;
  if (ot::Ip6::Address::IsUnspecified(a2))
  {
    return 7;
  }
  else
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsMeshLocalAddress(v2, a2))
    {
      Iid  = (const void *)ot::Ip6::Address::GetIid(a2);
      if (ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(Iid, (char *)this + 192))
      {
        ot::Clearable<ot::Ip6::InterfaceIdentifier>::Clear((void *)this + 24);
        return 0;
      }
    }
    else
    {
      for (unsigned __int16 i = 0; i < 0xFu; ++i)
      {
        if (ot::Ip6::Address::IsUnspecified((ot::Child *)((char *)this + 16 * i + 200))) {
          return v7;
        }
        if (ot::Equatable<ot::Ip6::Address>::operator==((char *)this + 16 * i + 200, a2))
        {
          unsigned int v7 = 0;
          break;
        }
      }
      if (!v7)
      {
        while (i < 0xEu)
        {
          *(_OWORD *)((char *)this + 16 * i + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *(_OWORD *)((char *)this + 16 * i + 216);
          ++i;
        }
        ot::Clearable<ot::Ip6::Address>::Clear((void *)this + 53);
      }
    }
  }
  return v7;
}

BOOL ot::Child::HasIp6Address(ot::Child *this, const ot::Ip6::Address *a2)
{
  BOOL v7 = 0;
  if (!ot::Ip6::Address::IsUnspecified(a2))
  {
    uint64_t v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::MleRouter>(this);
    if (ot::Mle::Mle::IsMeshLocalAddress(v2, a2))
    {
      Iid  = (const void *)ot::Ip6::Address::GetIid(a2);
      return ot::Equatable<ot::Ip6::InterfaceIdentifier>::operator==(Iid, (char *)this + 192);
    }
    else
    {
      for (unsigned __int16 i = (char *)this + 200;
            i != (char *)this + 440 && !ot::Ip6::Address::IsUnspecified((ot::Ip6::Address *)i);
            i += 16)
      {
        if (ot::Equatable<ot::Ip6::Address>::operator==(i, a2)) {
          return 1;
        }
      }
    }
  }
  return v7;
}

const ot::Ip6::Address *ot::Child::GetDomainUnicastAddress(ot::Child *this)
{
  uint64_t v6 = 0;
  uint64_t v5 = (ot::Child *)((char *)this + 200);
  char v4 = (ot::Child *)((char *)this + 440);
  while (v5 != v4 && !ot::Ip6::Address::IsUnspecified(v5))
  {
    uint64_t v1 = (ot::BackboneRouter::Leader *)ot::GetProvider<ot::InstanceLocator>::Get<ot::BackboneRouter::Leader>(this);
    if (ot::BackboneRouter::Leader::IsDomainUnicast(v1, v5)) {
      return v5;
    }
    uint64_t v5 = (const ot::Ip6::Address *)((char *)v5 + 16);
  }
  return (const ot::Ip6::Address *)v6;
}

void ot::Child::GenerateChallenge(ot::Child *this)
{
}

uint64_t ot::Child::HasMlrRegisteredAddress(ot::Child *this, const ot::Ip6::Address *a2)
{
  unsigned __int8 v12 = this;
  unsigned __int8 v11 = a2;
  char v10 = 0;
  if (ot::BitVector<(unsigned short)15>::HasAny((unsigned char *)this + 446))
  {
    v8[0]  = ot::Child::IterateIp6Addresses((uint64_t)this, 3);
    v8[1]  = v2;
    uint64_t v9 = (ot::Child::AddressIteratorBuilder *)v8;
    ot::Child::AddressIteratorBuilder::begin((ot::Child::AddressIteratorBuilder *)v8, (uint64_t)v7);
    ot::Child::AddressIteratorBuilder::end(v9, (uint64_t)v6);
    while (ot::Unequatable<ot::Child::AddressIterator>::operator!=((uint64_t)v7, (uint64_t)v6))
    {
      uint64_t v5 = (ot::Ip6::Address *)ot::Child::AddressIterator::operator*((ot::Child::AddressIterator *)v7);
      if (ot::Child::GetAddressMlrState(this, v5) == 2
        && ot::Equatable<ot::Ip6::Address>::operator==(v5, v11))
      {
        char v10 = 1;
        return v10 & 1;
      }
      ot::Child::AddressIterator::operator++((ot::Child::AddressIterator *)v7);
    }
  }
  return v10 & 1;
}

uint64_t ot::Child::GetAddressMlrState(ot::Child *this, const ot::Ip6::Address *a2)
{
  BOOL v6 = 0;
  if ((ot::Child *)((char *)this + 200) <= a2) {
    BOOL v6 = (unint64_t)a2 < ot::GetArrayEnd<ot::Ip6::Address,(unsigned short)15>((uint64_t)this + 200);
  }
  if (!v6) {
    __assert_rtn("GetAddressMlrState", "topology.cpp", 738, "&mIp6Address[0] <= &aAddress && &aAddress < GetArrayEnd(mIp6Address)");
  }
  if (ot::BitVector<(unsigned short)15>::Get((uint64_t)this + 444, (a2 - (ot::Child *)((char *)this + 200)) / 16))
  {
    return 0;
  }
  else if (ot::BitVector<(unsigned short)15>::Get((uint64_t)this + 446, (a2 - (ot::Child *)((char *)this + 200)) / 16))
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

uint64_t ot::GetArrayEnd<ot::Ip6::Address,(unsigned short)15>(uint64_t a1)
{
  return a1 + 240;
}

{
  return a1 + 240;
}

{
  return ot::GetArrayEnd<ot::Ip6::Address,(unsigned short)15>(a1);
}

{
  return ot::GetArrayEnd<ot::Ip6::Address,(unsigned short)15>(a1);
}

BOOL ot::BitVector<(unsigned short)15>::Get(uint64_t a1, unsigned __int16 a2)
{
  if (a2 >= 0xFu) {
    __assert_rtn("Get", "bit_vector.hpp", 76, "aIndex < N");
  }
  return (*(unsigned __int8 *)(a1 + a2 / 8) & (128 >> (a2 % 8))) != 0;
}

{
  return ot::BitVector<(unsigned short)15>::Get(a1, a2);
}

uint64_t ot::Child::SetAddressMlrState(uint64_t a1, unint64_t a2, char a3)
{
  BOOL v5 = 0;
  if (a1 + 200 <= a2) {
    BOOL v5 = a2 < ot::GetArrayEnd<ot::Ip6::Address,(unsigned short)15>(a1 + 200);
  }
  if (!v5) {
    __assert_rtn("SetAddressMlrState", "topology.cpp", 751, "&mIp6Address[0] <= &aAddress && &aAddress < GetArrayEnd(mIp6Address)");
  }
  ot::BitVector<(unsigned short)15>::Set(a1 + 444, (uint64_t)(a2 - (a1 + 200)) / 16, a3 == 0);
  return ot::BitVector<(unsigned short)15>::Set(a1 + 446, (uint64_t)(a2 - (a1 + 200)) / 16, a3 == 2);
}

uint64_t ot::BitVector<(unsigned short)15>::Set(uint64_t result, unsigned __int16 a2, char a3)
{
  if (a2 >= 0xFu) {
    __assert_rtn("Set", "bit_vector.hpp", 89, "aIndex < N");
  }
  if (a3) {
    *(unsigned char *)(result + a2 / 8) |= 128 >> (a2 % 8);
  }
  else {
    *(unsigned char *)(result + a2 / 8) &= ~(128 >> (a2 % 8));
  }
  return result;
}

{
  return ot::BitVector<(unsigned short)15>::Set(result, a2, a3);
}

uint64_t ot::Router::Info::SetFrom(ot::Router::Info *this, const ot::Router *a2)
{
  unsigned __int8 v11 = this;
  char v10 = a2;
  ot::Clearable<ot::Router::Info>::Clear((uint64_t)this);
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Neighbor::GetRloc16(v10);
  *((unsigned char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::Mle::RouterIdFromRloc16((ot::Mle *)*((unsigned __int16 *)this + 4));
  ot::Neighbor::GetExtAddress(v10);
  *(void *)this  = *v2;
  *((unsigned char *)this + 16)  = *((unsigned char *)this + 16) & 0xFE | 1;
  *((unsigned char *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Router::GetNextHop(v10);
  *((unsigned char *)this + 16)  = *((unsigned char *)this + 16) & 0xFD | (2 * ot::Neighbor::IsStateValid(v10));
  *((unsigned char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = ot::Router::GetCost(v10);
  *((unsigned char *)this + 1ot::Tlv::SetType(this, 3) = ot::Neighbor::GetLinkQualityIn(v10);
  unsigned __int8 LinkQualityOut = (ot::TimerMilli *)ot::Router::GetLinkQualityOut(v10);
  *((unsigned char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (_BYTE)LinkQualityOut;
  int Now = ot::TimerMilli::GetNow(LinkQualityOut);
  int LastHeard = ot::Neighbor::GetLastHeard(v10);
  char v4 = (ot::Time *)ot::Time::operator-(&Now, &LastHeard);
  *((unsigned char *)this + ot::Mle::Tlv::SetType(this, 15) = ot::Time::MsecToSec(v4);
  unsigned __int16 Version = ot::Neighbor::GetVersion(v10);
  uint64_t result = ot::ClampToUint8<unsigned short>(Version);
  *((unsigned char *)this + 1ot::ThreadTlv::SetType(this, 7) = result;
  return result;
}

uint64_t ot::Clearable<ot::Router::Info>::Clear(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8)  = 0;
  *(_DWORD *)(result + 16)  = 0;
  return result;
}

{
  return ot::Clearable<ot::Router::Info>::Clear(result);
}

uint64_t ot::Router::Info::SetFrom(ot::Router::Info *this, const ot::Parent *a2)
{
  ot::Router::Info::SetFrom(this, a2);
  char CslAccuracy = (ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy(a2);
  *((unsigned char *)this + 18)  = ot::Mac::CslAccuracy::GetClockAccuracy(CslAccuracy);
  uint64_t v3 = (ot::Mac::CslAccuracy *)ot::Parent::GetCslAccuracy(a2);
  uint64_t result = ot::Mac::CslAccuracy::GetUncertainty(v3);
  *((unsigned char *)this + 1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = result;
  return result;
}

ot::InstanceLocator *ot::Router::Clear(ot::Router *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  memset(this, 0, 0x90uLL);
  return ot::Router::Init(this, Instance);
}

uint64_t ot::Router::GetTwoWayLinkQuality(ot::Router *this)
{
  unsigned __int8 LinkQualityIn = ot::Neighbor::GetLinkQualityIn(this);
  unsigned __int8 LinkQualityOut = ot::Router::GetLinkQualityOut(this);
  return ot::Min<ot::LinkQuality>(LinkQualityIn, LinkQualityOut);
}

void *ot::Router::SetFrom(ot::Router *this, const ot::Parent *a2)
{
  return memcpy(this, a2, 0x8EuLL);
}

unsigned char *ot::Parent::Clear(ot::Parent *this)
{
  Instance  = (ot::Instance *)ot::InstanceLocator::GetInstance(this);
  memset(this, 0, 0x98uLL);
  return ot::Parent::Init(this, Instance);
}

uint64_t ot::Router::SetNextHopAndCost(ot::Router *this, unsigned __int8 a2, char a3)
{
  char v4 = 0;
  if (*((unsigned __int8 *)this + 140) != a2)
  {
    *((unsigned char *)this + 14ot::NetworkData::NetworkDataTlv::SetType(this, 0) = a2;
    char v4 = 1;
  }
  if (a3 != ((*((unsigned char *)this + 141) >> 2) & 0xF))
  {
    *((unsigned char *)this + 14ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = *((unsigned char *)this + 141) & 0xC3 | (4 * (a3 & 0xF));
    char v4 = 1;
  }
  return v4 & 1;
}

uint64_t ot::Router::SetNextHopToInvalid(ot::Router *this)
{
  return ot::Router::SetNextHopAndCost(this, 0x3Fu, 0) & 1;
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::GetHead(uint64_t a1)
{
  return *(void *)a1;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::GetHead(a1);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator::Advance(uint64_t *a1)
{
  uint64_t result = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(*a1);
  *a1  = result;
  return result;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Iterator::Advance(a1);
}

ot::LinkMetrics::SeriesInfo *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(ot::LinkMetrics::SeriesInfo *a1, ot::LinkMetrics::SeriesInfo *a2)
{
  char v3[2] = a1;
  v3[1]  = a2;
  v3[0]  = 0;
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>((ot::LinkMetrics::SeriesInfo **)a1, (const unsigned __int8 *)a2, v3);
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(a1, a2);
}

ot::LinkMetrics::SeriesInfo *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(ot::LinkMetrics::SeriesInfo **a1, const unsigned __int8 *a2, ot::LinkMetrics::SeriesInfo **a3)
{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>((uint64_t)a1, *a1, 0, a2, a3);
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(a1, a2, a3);
}

ot::LinkMetrics::SeriesInfo *ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(uint64_t a1, ot::LinkMetrics::SeriesInfo *Next, ot::LinkMetrics::SeriesInfo *a3, const unsigned __int8 *a4, ot::LinkMetrics::SeriesInfo **a5)
{
  *a5  = 0;
  while (Next != a3 && !ot::LinkMetrics::SeriesInfo::Matches(Next, a4))
  {
    *a5  = Next;
    unint64_t Next = (ot::LinkMetrics::SeriesInfo *)ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext((uint64_t)Next);
  }
  return Next;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(a1, Next, a3, a4, a5);
}

BOOL ot::LinkMetrics::SeriesInfo::Matches(ot::LinkMetrics::SeriesInfo *this, const unsigned __int8 *a2)
{
  return *((unsigned __int8 *)this + 8) == *a2;
}

{
  return ot::LinkMetrics::SeriesInfo::Matches(this, a2);
}

void ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(uint64_t a1, const unsigned __int8 *a2, ot::LinkMetrics::SeriesInfo **a3)
{
  ot::AsConst<ot::LinkedList<ot::LinkMetrics::SeriesInfo>>();
  ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(v3, a2, a3);
  ot::AsNonConst<ot::LinkMetrics::SeriesInfo>();
}

{
  ot::LinkedList<ot::LinkMetrics::SeriesInfo>::FindMatching<unsigned char>(a1, a2, a3);
}

uint64_t ot::LinkedList<ot::LinkMetrics::SeriesInfo>::PopAfter(uint64_t *a1, void *a2)
{
  if (!a2) {
    return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::Pop(a1);
  }
  uint64_t Next = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext((uint64_t)a2);
  if (Next)
  {
    uint64_t v2 = ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::GetNext(Next);
    ot::LinkedListEntry<ot::LinkMetrics::SeriesInfo>::SetNext(a2, v2);
  }
  return Next;
}

{
  return ot::LinkedList<ot::LinkMetrics::SeriesInfo>::PopAfter(a1, a2);
}

char *ot::PathForUri(unsigned __int8 a1)
{
  if (a1 == 39) {
    __assert_rtn("PathForUri", "uri_paths.cpp", 147, "aUri != kUriUnknown");
  }
  return ot::UriList::kEntries[a1];
}

uint64_t ot::UriFromPath(ot *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  uint64_t v9 = this;
  unsigned __int8 v8 = 39;
  BOOL v7 = ot::BinarySearch::Find<char const*,ot::UriList::Entry,(unsigned short)39>((ot::BinarySearch *)&v9, (char *)ot::UriList::kEntries, a3, a4, a5, a6);
  if (v7) {
    return ((v7 - (char *)ot::UriList::kEntries) / 8);
  }
  return v8;
}

char *ot::BinarySearch::Find<char const*,ot::UriList::Entry,(unsigned short)39>(ot::BinarySearch *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int (*a6)(const void *, const void *))
{
  return ot::BinarySearch::Find(a1, a2, (const void *)0x27, 8u, (uint64_t (*)(ot::BinarySearch *, char *))ot::BinarySearch::Compare<char const*,ot::UriList::Entry>, a6);
}

{
  return ot::BinarySearch::Find<char const*,ot::UriList::Entry,(unsigned short)39>(a1, a2, a3, a4, a5, a6);
}

const char *ot::UriToString<(ot::Uri)0>()
{
  return "AddressError";
}

const char *ot::UriToString<(ot::Uri)1>()
{
  return "AddressNotify";
}

const char *ot::UriToString<(ot::Uri)2>()
{
  return "AddressQuery";
}

const char *ot::UriToString<(ot::Uri)3>()
{
  return "AddressRelease";
}

const char *ot::UriToString<(ot::Uri)4>()
{
  return "AddressSolicit";
}

const char *ot::UriToString<(ot::Uri)5>()
{
  return "ServerData";
}

const char *ot::UriToString<(ot::Uri)6>()
{
  return "AnycastLocate";
}

const char *ot::UriToString<(ot::Uri)7>()
{
  return "BackboneAnswer";
}

const char *ot::UriToString<(ot::Uri)8>()
{
  return "BackboneMlr";
}

const char *ot::UriToString<(ot::Uri)9>()
{
  return "BackboneQuery";
}

const char *ot::UriToString<(ot::Uri)10>()
{
  return "AnnounceBegin";
}

const char *ot::UriToString<(ot::Uri)11>()
{
  return "ActiveGet";
}

const char *ot::UriToString<(ot::Uri)12>()
{
  return "ActiveSet";
}

const char *ot::UriToString<(ot::Uri)13>()
{
  return "CommissionerKeepAlive";
}

const char *ot::UriToString<(ot::Uri)14>()
{
  return "CommissionerGet";
}

const char *ot::UriToString<(ot::Uri)15>()
{
  return "CommissionerPetition";
}

const char *ot::UriToString<(ot::Uri)16>()
{
  return "CommissionerSet";
}

const char *ot::UriToString<(ot::Uri)17>()
{
  return "DatasetChanged";
}

const char *ot::UriToString<(ot::Uri)18>()
{
  return "EnergyReport";
}

const char *ot::UriToString<(ot::Uri)19>()
{
  return "EnergyScan";
}

const char *ot::UriToString<(ot::Uri)20>()
{
  return "JoinerEntrust";
}

const char *ot::UriToString<(ot::Uri)21>()
{
  return "JoinerFinalize";
}

const char *ot::UriToString<(ot::Uri)22>()
{
  return "LeaderKeepAlive";
}

const char *ot::UriToString<(ot::Uri)23>()
{
  return "LeaderPetition";
}

const char *ot::UriToString<(ot::Uri)24>()
{
  return "PanIdConflict";
}

const char *ot::UriToString<(ot::Uri)25>()
{
  return "PendingGet";
}

const char *ot::UriToString<(ot::Uri)26>()
{
  return "PanIdQuery";
}

const char *ot::UriToString<(ot::Uri)27>()
{
  return "PendingSet";
}

const char *ot::UriToString<(ot::Uri)28>()
{
  return "RelayRx";
}

const char *ot::UriToString<(ot::Uri)29>()
{
  return "RelayTx";
}

const char *ot::UriToString<(ot::Uri)30>()
{
  return "ProxyRx";
}

const char *ot::UriToString<(ot::Uri)31>()
{
  return "ProxyTx";
}

const char *ot::UriToString<(ot::Uri)32>()
{
  return "DiagGetAnswer";
}

const char *ot::UriToString<(ot::Uri)33>()
{
  return "DiagGetRequest";
}

const char *ot::UriToString<(ot::Uri)34>()
{
  return "DiagGetQuery";
}

const char *ot::UriToString<(ot::Uri)35>()
{
  return "DiagReset";
}

const char *ot::UriToString<(ot::Uri)36>()
{
  return "DuaRegNotify";
}

const char *ot::UriToString<(ot::Uri)37>()
{
  return "DuaRegRequest";
}

const char *ot::UriToString<(ot::Uri)38>()
{
  return "Mlr";
}

uint64_t ot::BinarySearch::Compare<char const*,ot::UriList::Entry>(const char **a1, const char **a2)
{
  return ot::UriList::Entry::Compare(a2, *a1);
}

uint64_t ot::UriList::Entry::Compare(const char **this, const char *a2)
{
  return strcmp(a2, *this);
}

{
  return ot::UriList::Entry::Compare(this, a2);
}

ot::Utils::ChannelManager *ot::Utils::ChannelManager::ChannelManager(ot::Utils::ChannelManager *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Mac::ChannelMask::ChannelMask(this, 0);
  ot::Mac::ChannelMask::ChannelMask((ot::Utils::ChannelManager *)((char *)this + 4), 0);
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 120;
  *((unsigned char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *((unsigned char *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::TimerMilliIn((ot::Utils::ChannelManager *)((char *)this + 16), a2);
  uint64_t result = this;
  *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 10800;
  *((unsigned char *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((_WORD *)this + 2ot::Tlv::SetType(this, 3) = 9174;
  return result;
}

{
  ot::Utils::ChannelManager::ChannelManager(this, a2);
  return this;
}

ot::Utils::ChannelManager *ot::Utils::ChannelManager::HandleTimer(ot::Utils::ChannelManager *this)
{
  if (*((unsigned char *)this + 11))
  {
    if (*((unsigned char *)this + 11) == 1) {
      return (ot::Utils::ChannelManager *)ot::Utils::ChannelManager::StartDatasetUpdate(this);
    }
  }
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::HandleTimer);
  return a1;
}

void ot::Utils::ChannelManager::RequestChannelChange(ot::Utils::ChannelManager *this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Request to change to channel %d with delay %d sec", a3, a4, a5, a6, a7, a8, a2);
  unsigned __int8 v8 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  if (a2 == ot::Mac::Mac::GetPanChannel(v8))
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Already operating on the requested channel %d", v9, v10, v11, v12, v13, v14, a2);
  }
  else if (*((unsigned char *)this + 11) != 2 || *((unsigned __int8 *)this + 10) != a2)
  {
    *((unsigned char *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 1;
    *((unsigned char *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = a2;
    int Uint32InRange = ot::Random::NonCrypto::GetUint32InRange(0, 0x2710u);
    ot::TimerMilli::Start((ot::Utils::ChannelManager *)((char *)this + 16), Uint32InRange + 1);
    uint64_t v16 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Notifier>(this);
    ot::Notifier::Signal(v16, 0x200000);
  }
}

uint64_t ot::Utils::ChannelManager::SetDelay(ot::Utils::ChannelManager *this, unsigned __int16 a2)
{
  unsigned int v3 = 0;
  if (a2 >= 0x78u) {
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  }
  else {
    return 7;
  }
  return v3;
}

uint64_t ot::Utils::ChannelManager::StartDatasetUpdate(ot::Utils::ChannelManager *this)
{
  ot::Clearable<ot::MeshCoP::Dataset::Info>::Clear(v13);
  ot::MeshCoP::Dataset::Info::SetChannel((uint64_t)v13, *((unsigned __int8 *)this + 10));
  int v1 = ot::Time::SecToMsec((ot::Time *)*((unsigned __int16 *)this + 4));
  ot::MeshCoP::Dataset::Info::SetDelay((uint64_t)v13, v1);
  uint64_t v2 = (void *)ot::GetProvider<ot::InstanceLocator>::Get<ot::MeshCoP::DatasetUpdater>(this);
  uint64_t result = ot::MeshCoP::DatasetUpdater::RequestUpdate(v2, v13, (uint64_t)ot::Utils::ChannelManager::HandleDatasetUpdateDone, (uint64_t)this);
  if (result)
  {
    uint64_t v11 = result;
    char v10 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    char v10 = 0;
  }
  if ((v10 & 1) == 0)
  {
    switch(v11)
    {
      case 0:
        *((unsigned char *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 2;
        return result;
      case 1:
      case 2:
      case 4:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 3:
      case 5:
        return ot::TimerMilli::Start((ot::Utils::ChannelManager *)((char *)this + 16), 0x4E20u);
      case 13:
        ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Request to change to channel %d failed. Device is disabled", v4, v5, v6, v7, v8, v9, *((unsigned char *)this + 10));
        break;
      default:
        JUMPOUT(0);
    }
  }
  *((unsigned char *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  return ot::Utils::ChannelManager::StartAutoSelectTimer((uint64_t)this);
}

uint64_t ot::Utils::ChannelManager::HandleDatasetUpdateDone(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Utils::ChannelManager::HandleDatasetUpdateDone(a2, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Utils::ChannelManager::StartAutoSelectTimer(uint64_t this)
{
  uint64_t v2 = this;
  if (!*(unsigned char *)(this + 11))
  {
    if (*(unsigned char *)(this + 44))
    {
      unsigned int v1 = ot::Time::SecToMsec((ot::Time *)*(unsigned int *)(this + 40));
      return ot::TimerMilli::Start((ot::TimerMilli *)(v2 + 16), v1);
    }
    else
    {
      return ot::TimerMilli::Stop((ot::TimerMilli *)(this + 16));
    }
  }
  return this;
}

uint64_t ot::Utils::ChannelManager::HandleDatasetUpdateDone(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Canceling channel change to %d%s", a3, a4, a5, a6, a7, a8, *(unsigned char *)(a1 + 10));
  }
  else {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Channel changed to %d", a3, a4, a5, a6, a7, a8, *(unsigned char *)(a1 + 10));
  }
  *(unsigned char *)(a1 + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  return ot::Utils::ChannelManager::StartAutoSelectTimer(a1);
}

uint64_t ot::Utils::ChannelManager::SetAutoChannelSelectionInterval(ot::Utils::ChannelManager *this, unsigned int a2)
{
  uint64_t v11 = this;
  unsigned int v10 = a2;
  unsigned int v9 = 0;
  unsigned int v8 = 0;
  unsigned int v8 = *((_DWORD *)this + 10);
  if (a2 && v10 <= ot::Time::MsecToSec((ot::Time *)0x7FFFFFFF))
  {
    *((_DWORD *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v10;
    if ((*((unsigned char *)this + 44) & 1) != 0
      && !*((unsigned char *)this + 11)
      && ot::Timer::IsRunning((ot::Utils::ChannelManager *)((char *)this + 16))
      && v8 != v10)
    {
      int FireTime = ot::Timer::GetFireTime((ot::Utils::ChannelManager *)((char *)this + 16));
      int v2 = ot::Time::SecToMsec((ot::Time *)v8);
      int v7 = ot::Time::operator-(&FireTime, v2);
      unsigned int v3 = ot::Time::SecToMsec((ot::Time *)v10);
      ot::TimerMilli::StartAt((ot::Utils::ChannelManager *)((char *)this + 16), v7, v3);
    }
  }
  else
  {
    return 7;
  }
  return v9;
}

void ot::Utils::ChannelManager::SetSupportedChannels(ot::Utils::ChannelManager *this, int a2)
{
  int v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  Supportedint ChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  Masunsigned __int8 k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
  ot::Mac::ChannelMask::SetMask(this, a2 & Mask);
  ot::Mac::ChannelMask::ToString(this, (ot::StringWriter *)v14);
  char v5 = ot::String<(unsigned short)45>::AsCString((uint64_t)v14);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Supported channels: %s", v6, v7, v8, v9, v10, v11, v5);
}

void ot::Utils::ChannelManager::SetFavoredChannels(ot::Utils::ChannelManager *this, int a2)
{
  int v2 = (ot::Mac::Mac *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mac::Mac>(this);
  Supportedint ChannelMask = (ot::Mac::ChannelMask *)ot::Mac::Mac::GetSupportedChannelMask(v2);
  Masunsigned __int8 k = ot::Mac::ChannelMask::GetMask(SupportedChannelMask);
  ot::Mac::ChannelMask::SetMask((_DWORD *)this + 1, a2 & Mask);
  ot::Mac::ChannelMask::ToString((ot::Utils::ChannelManager *)((char *)this + 4), (ot::StringWriter *)v14);
  char v5 = ot::String<(unsigned short)45>::AsCString((uint64_t)v14);
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "Favored channels: %s", v6, v7, v8, v9, v10, v11, v5);
}

void ot::Utils::ChannelManager::SetCcaFailureRateThreshold(ot::Utils::ChannelManager *this, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_WORD *)this + 2ot::Tlv::SetType(this, 3) = a2;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"ChannelManager", "CCA threshold: 0x%04x", a3, a4, a5, a6, a7, a8, *((_WORD *)this + 23));
}

ot::Utils::ChannelManager *ot::TimerMilliIn<ot::Utils::ChannelManager,&ot::Utils::ChannelManager::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  int v2 = (ot::Utils::ChannelManager *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::ChannelManager>(a1);
  return ot::Utils::ChannelManager::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::ChannelManager>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::ChannelManager>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::ChannelManager>(a1);
}

ot::Utils::Heap *ot::Utils::Heap::Heap(ot::Utils::Heap *this)
{
  uint64_t v7 = (const ot::Utils::Block *)ot::Utils::Heap::BlockAt(this, 6u);
  ot::Utils::Block::SetSize(v7, 4);
  uint64_t v6 = (const ot::Utils::Block *)ot::Utils::Heap::BlockRight(this, v7);
  ot::Utils::Block::SetSize(v6, 64492);
  char v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockRight(this, v6);
  ot::Utils::Block::SetSize(v5, 0xFFFF);
  unsigned __int16 v1 = ot::Utils::Heap::BlockOffset(this, v6);
  ot::Utils::Block::SetNext((unsigned __int16 *)v7, v1);
  unsigned __int16 v2 = ot::Utils::Heap::BlockOffset(this, v5);
  ot::Utils::Block::SetNext((unsigned __int16 *)v6, v2);
  uint64_t result = this;
  *(_WORD *)this  = -1044;
  return result;
}

{
  ot::Utils::Heap::Heap(this);
  return this;
}

uint64_t ot::Utils::Heap::BlockAt(ot::Utils::Heap *this, unsigned __int16 a2)
{
  return (uint64_t)this + 2 * (a2 / 2);
}

{
  return ot::Utils::Heap::BlockAt(this, a2);
}

_WORD *ot::Utils::Block::SetSize(_WORD *this, __int16 a2)
{
  *this  = a2;
  return this;
}

{
  return ot::Utils::Block::SetSize(this, a2);
}

uint64_t ot::Utils::Heap::BlockRight(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  __int16 v4 = ot::Utils::Heap::BlockOffset(this, a2) + 4;
  __int16 Size = ot::Utils::Block::GetSize(a2);
  return ot::Utils::Heap::BlockAt(this, v4 + Size);
}

{
  return ot::Utils::Heap::BlockRight(this, a2);
}

unsigned __int16 *ot::Utils::Block::SetNext(unsigned __int16 *this, unsigned __int16 a2)
{
  *(unsigned __int16 *)((char *)this + *this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = a2;
  return this;
}

{
  return ot::Utils::Block::SetNext(this, a2);
}

uint64_t ot::Utils::Heap::BlockOffset(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  return (unsigned __int16)((_WORD)a2 - (_WORD)this);
}

{
  return ot::Utils::Heap::BlockOffset(this, a2);
}

uint64_t ot::Utils::Heap::CAlloc(ot::Utils::Heap *this, __int16 a2, __int16 a3)
{
  uint64_t v14 = 0;
  if (a2 * a3)
  {
    unsigned __int16 v11 = ((a2 * a3 + 3) & 0xFFF8) + 4;
    uint64_t v13 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(this);
    uint64_t v12 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v13);
    for (unsigned __int16 i = ot::Utils::Block::GetSize(v12); v11 > (int)i; unsigned __int16 i = ot::Utils::Block::GetSize(v12))
    {
      uint64_t v13 = v12;
      uint64_t v12 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v12);
    }
    if (ot::Utils::Block::IsFree(v12))
    {
      unsigned __int16 Next = ot::Utils::Block::GetNext(v12);
      ot::Utils::Block::SetNext((unsigned __int16 *)v13, Next);
      if ((unint64_t)v11 + 4 < (unsigned __int16)ot::Utils::Block::GetSize(v12))
      {
        unsigned __int16 v10 = ot::Utils::Block::GetSize(v12) - v11 - 4;
        ot::Utils::Block::SetSize(v12, v11);
        uint64_t v9 = (ot::Utils::Block *)ot::Utils::Heap::BlockRight(this, v12);
        ot::Utils::Block::SetSize(v9, v10);
        ot::Utils::Block::SetNext((unsigned __int16 *)v9, 0);
        if (v10 <= (int)(unsigned __int16)ot::Utils::Block::GetSize(v13))
        {
          char v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(this);
          ot::Utils::Heap::BlockInsert(this, v5, v9);
        }
        else
        {
          ot::Utils::Heap::BlockInsert(this, v13, v9);
        }
        *(_WORD *)this -= 4;
      }
      *(_WORD *)this -= ot::Utils::Block::GetSize(v12);
      ot::Utils::Block::SetNext((unsigned __int16 *)v12, 0);
      Pointer  = (void *)ot::Utils::Block::GetPointer(v12);
      bzero(Pointer, v11);
      return ot::Utils::Block::GetPointer(v12);
    }
  }
  return v14;
}

uint64_t ot::Utils::Heap::BlockSuper(ot::Utils::Heap *this)
{
  return ot::Utils::Heap::BlockAt(this, 6u);
}

{
  return ot::Utils::Heap::BlockSuper(this);
}

uint64_t ot::Utils::Heap::BlockNext(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  unsigned __int16 Next = ot::Utils::Block::GetNext(a2);
  return ot::Utils::Heap::BlockAt(this, Next);
}

{
  return ot::Utils::Heap::BlockNext(this, a2);
}

uint64_t ot::Utils::Block::GetSize(ot::Utils::Block *this)
{
  return *(unsigned __int16 *)this;
}

{
  return ot::Utils::Block::GetSize(this);
}

BOOL ot::Utils::Block::IsFree(ot::Utils::Block *this)
{
  BOOL v2 = 0;
  if (*(unsigned __int16 *)this != 0xFFFF) {
    return (unsigned __int16)ot::Utils::Block::GetNext(this) != 0;
  }
  return v2;
}

{
  return ot::Utils::Block::IsFree(this);
}

uint64_t ot::Utils::Block::GetNext(ot::Utils::Block *this)
{
  return *(unsigned __int16 *)((char *)this + *(unsigned __int16 *)this + 2);
}

{
  return ot::Utils::Block::GetNext(this);
}

unsigned __int16 *ot::Utils::Heap::BlockInsert(ot::Utils::Heap *this, ot::Utils::Block *a2, ot::Utils::Block *a3)
{
  uint64_t v9 = a2;
  uint64_t v8 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, a2);
  for (unsigned __int16 i = ot::Utils::Block::GetSize(v8);
        i < (int)(unsigned __int16)ot::Utils::Block::GetSize(a3);
        unsigned __int16 i = ot::Utils::Block::GetSize(v8))
  {
    uint64_t v9 = v8;
    uint64_t v8 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v8);
  }
  unsigned __int16 Next = ot::Utils::Block::GetNext(v9);
  ot::Utils::Block::SetNext((unsigned __int16 *)a3, Next);
  unsigned __int16 v5 = ot::Utils::Heap::BlockOffset(this, a3);
  return ot::Utils::Block::SetNext((unsigned __int16 *)v9, v5);
}

uint64_t ot::Utils::Block::GetPointer(ot::Utils::Block *this)
{
  return (uint64_t)this + 2;
}

{
  return ot::Utils::Block::GetPointer(this);
}

ot::Utils::Block *ot::Utils::Heap::BlockPrev(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  unsigned __int16 v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(this);
  for (unsigned __int16 i = ot::Utils::Block::GetNext(v5);
        i != (unsigned __int16)ot::Utils::Heap::BlockOffset(this, a2);
        unsigned __int16 i = ot::Utils::Block::GetNext(v5))
  {
    unsigned __int16 v5 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(this, v5);
  }
  return v5;
}

unsigned __int16 *ot::Utils::Heap::Free(unsigned __int16 *this, void *a2)
{
  uint64_t v16 = (ot::Utils::Heap *)this;
  if (a2)
  {
    char v22 = (const ot::Utils::Block *)ot::Utils::Heap::BlockOf((ot::Utils::Heap *)this, a2);
    char v21 = (ot::Utils::Block *)ot::Utils::Heap::BlockRight(v16, v22);
    *(_WORD *)v16 += ot::Utils::Block::GetSize(v22);
    if (ot::Utils::Heap::IsLeftFree(v16, v22))
    {
      uint64_t v20 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(v16);
      uint64_t v19 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(v16, v20);
      *(_WORD *)v16 += 4;
      Leftunsigned __int16 Next = ot::Utils::Block::GetLeftNext(v22);
      for (__int16 i = ot::Utils::Block::GetNext(v19); LeftNext != i; __int16 i = ot::Utils::Block::GetNext(v19))
      {
        uint64_t v20 = v19;
        uint64_t v19 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(v16, v19);
      }
      unsigned __int16 Next = ot::Utils::Block::GetNext(v19);
      ot::Utils::Block::SetNext((unsigned __int16 *)v20, Next);
      ot::Utils::Block::SetNext((unsigned __int16 *)v19, 0);
      if (ot::Utils::Block::IsFree(v21))
      {
        *(_WORD *)v16 += 4;
        int Size = (unsigned __int16)ot::Utils::Block::GetSize(v21);
        if (Size <= (unsigned __int16)ot::Utils::Block::GetSize(v19))
        {
          uint64_t v20 = ot::Utils::Heap::BlockPrev(v16, v21);
        }
        else
        {
          __int16 v17 = ot::Utils::Heap::BlockOffset(v16, v21);
          for (__int16 j = ot::Utils::Block::GetNext(v20); v17 != j; __int16 j = ot::Utils::Block::GetNext(v20))
            uint64_t v20 = (ot::Utils::Block *)ot::Utils::Heap::BlockNext(v16, v20);
        }
        unsigned __int16 v5 = ot::Utils::Block::GetNext(v21);
        ot::Utils::Block::SetNext((unsigned __int16 *)v20, v5);
        ot::Utils::Block::SetNext((unsigned __int16 *)v21, 0);
        __int16 v14 = ot::Utils::Block::GetSize(v19);
        __int16 v6 = ot::Utils::Block::GetSize(v21);
        ot::Utils::Block::SetSize(v19, v6 + v14 + 4);
      }
      __int16 v13 = ot::Utils::Block::GetSize(v19);
      __int16 v7 = ot::Utils::Block::GetSize(v22);
      ot::Utils::Block::SetSize(v19, v7 + v13 + 4);
      return ot::Utils::Heap::BlockInsert(v16, v20, v19);
    }
    else if (ot::Utils::Block::IsFree(v21))
    {
      unsigned __int16 v11 = ot::Utils::Heap::BlockPrev(v16, v21);
      unsigned __int16 v8 = ot::Utils::Block::GetNext(v21);
      ot::Utils::Block::SetNext((unsigned __int16 *)v11, v8);
      __int16 v12 = ot::Utils::Block::GetSize(v22);
      __int16 v9 = ot::Utils::Block::GetSize(v21);
      ot::Utils::Block::SetSize(v22, v9 + v12 + 4);
      this  = ot::Utils::Heap::BlockInsert(v16, v11, v22);
      *(_WORD *)v16 += 4;
    }
    else
    {
      unsigned __int16 v10 = (ot::Utils::Block *)ot::Utils::Heap::BlockSuper(v16);
      return ot::Utils::Heap::BlockInsert(v16, v10, v22);
    }
  }
  return this;
}

uint64_t ot::Utils::Heap::BlockOf(ot::Utils::Heap *this, void *a2)
{
  return ot::Utils::Heap::BlockAt(this, (unsigned __int16)a2 - (unsigned __int16)this - 2);
}

{
  return ot::Utils::Heap::BlockOf(this, a2);
}

BOOL ot::Utils::Heap::IsLeftFree(ot::Utils::Heap *this, const ot::Utils::Block *a2)
{
  BOOL v3 = 0;
  if ((unsigned __int16)ot::Utils::Heap::BlockOffset(this, a2) != 14) {
    return ot::Utils::Block::IsLeftFree(a2);
  }
  return v3;
}

{
  return ot::Utils::Heap::IsLeftFree(this, a2);
}

uint64_t ot::Utils::Block::GetLeftNext(ot::Utils::Block *this)
{
  return *((unsigned __int16 *)this - 1);
}

{
  return ot::Utils::Block::GetLeftNext(this);
}

BOOL ot::Utils::Block::IsLeftFree(ot::Utils::Block *this)
{
  return (unsigned __int16)ot::Utils::Block::GetLeftNext(this) != 0;
}

{
  return ot::Utils::Block::IsLeftFree(this);
}

uint64_t ot::Utils::CmdLineParser::ParseCmd(ot::Utils::CmdLineParser *this, char *a2, ot::Utils::CmdLineParser::Arg *a3)
{
  unsigned __int8 v10 = a3;
  unsigned int v9 = 0;
  unsigned __int8 v8 = 0;
  while (*(unsigned char *)this)
  {
    if (*(unsigned char *)this == 92
      && ot::Utils::CmdLineParser::IsEscapable((ot::Utils::CmdLineParser *)*((char *)this + 1)))
    {
      size_t v3 = strlen((const char *)this);
      memmove(this, (char *)this + 1, v3);
    }
    else if (ot::Utils::CmdLineParser::IsSeparator((ot::Utils::CmdLineParser *)*(char *)this))
    {
      *(unsigned char *)this  = 0;
    }
    if (*(unsigned char *)this && (!v8 || !*((unsigned char *)this - 1)))
    {
      if (v8 == v10 - 1)
      {
        unsigned int v9 = 7;
        break;
      }
      uint64_t v4 = v8++;
      ot::Utils::CmdLineParser::Arg::SetCString(&a2[8 * v4], (char *)this);
    }
    this  = (ot::Utils::CmdLineParser *)((char *)this + 1);
  }
  while (v8 < (int)v10)
  {
    uint64_t v5 = v8++;
    ot::Utils::CmdLineParser::Arg::Clear(&a2[8 * v5]);
  }
  return v9;
}

BOOL ot::Utils::CmdLineParser::IsEscapable(ot::Utils::CmdLineParser *this)
{
  char v3 = (char)this;
  BOOL v2 = 1;
  if (!ot::Utils::CmdLineParser::IsSeparator((ot::Utils::CmdLineParser *)(char)this)) {
    return v3 == 92;
  }
  return v2;
}

BOOL ot::Utils::CmdLineParser::IsSeparator(ot::Utils::CmdLineParser *this)
{
  BOOL v2 = 1;
  if ((char)this != 32)
  {
    BOOL v2 = 1;
    if ((char)this != 9)
    {
      BOOL v2 = 1;
      if ((char)this != 13) {
        return (char)this == 10;
      }
    }
  }
  return v2;
}

void *ot::Utils::CmdLineParser::Arg::SetCString(void *this, char *a2)
{
  *this  = a2;
  return this;
}

{
  return ot::Utils::CmdLineParser::Arg::SetCString(this, a2);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint8(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseUint<unsigned char>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseUint<unsigned char>(ot::Utils::CmdLineParser *a1, unsigned char *a2, unsigned __int8 *a3)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  unsigned int v5 = 0;
  unint64_t v4 = 0;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint64(a1, (char *)&v4, a3);
  if (!v5)
  {
    if (v4 <= 0xFF) {
      *__int16 v6 = v4;
    }
    else {
      return 7;
    }
  }
  return v5;
}

{
  return ot::Utils::CmdLineParser::ParseUint<unsigned char>(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint16(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseUint<unsigned short>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseUint<unsigned short>(ot::Utils::CmdLineParser *a1, _WORD *a2, unsigned __int8 *a3)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  unsigned int v5 = 0;
  unint64_t v4 = 0;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint64(a1, (char *)&v4, a3);
  if (!v5)
  {
    if (v4 < 0x10000) {
      *__int16 v6 = v4;
    }
    else {
      return 7;
    }
  }
  return v5;
}

{
  return ot::Utils::CmdLineParser::ParseUint<unsigned short>(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint32(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseUint<unsigned int>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseUint<unsigned int>(ot::Utils::CmdLineParser *a1, _DWORD *a2, unsigned __int8 *a3)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  unsigned int v5 = 0;
  unint64_t v4 = 0;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint64(a1, (char *)&v4, a3);
  if (!v5)
  {
    if (v4 <= 0xFFFFFFFF) {
      *__int16 v6 = v4;
    }
    else {
      return 7;
    }
  }
  return v5;
}

{
  return ot::Utils::CmdLineParser::ParseUint<unsigned int>(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsUint64(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  __int16 v13 = this;
  __int16 v12 = a2;
  unsigned int v11 = 0;
  unint64_t v10 = 0;
  unsigned int v9 = this;
  char v8 = 0;
  if (this)
  {
    if (*(unsigned char *)v9 == 48 && (*((unsigned char *)v9 + 1) == 120 || *((unsigned char *)v9 + 1) == 88))
    {
      unsigned int v9 = (ot::Utils::CmdLineParser *)((char *)v9 + 2);
      char v8 = 1;
    }
    while (1)
    {
      unsigned __int8 v7 = 0;
      unsigned int v6 = (v8 & 1) != 0
         ? ot::Utils::CmdLineParser::ParseHexDigit((ot::Utils::CmdLineParser *)*(char *)v9, &v7, a3)
         : ot::Utils::CmdLineParser::ParseDigit((ot::Utils::CmdLineParser *)*(char *)v9, &v7, a3);
      unsigned int v11 = v6;
      if (v6) {
        break;
      }
      unint64_t v3 = 0xFFFFFFFFFFFFFFFLL;
      if ((v8 & 1) == 0) {
        unint64_t v3 = 0x1999999999999999;
      }
      if (v10 > v3) {
        return 7;
      }
      if (v8) {
        unint64_t v5 = 16 * v10;
      }
      else {
        unint64_t v5 = 10 * v10;
      }
      unint64_t v10 = v5;
      if (v5 + v7 < v5) {
        return 7;
      }
      unint64_t v10 = v5 + v7;
      unsigned int v9 = (ot::Utils::CmdLineParser *)((char *)v9 + 1);
      if (!*(unsigned char *)v9)
      {
        *(void *)__int16 v12 = v10;
        return v11;
      }
    }
  }
  else
  {
    return 7;
  }
  return v11;
}

uint64_t ot::Utils::CmdLineParser::ParseHexDigit(ot::Utils::CmdLineParser *this, unsigned char *a2, unsigned __int8 *a3)
{
  unsigned int v4 = 0;
  if ((char)this < 65 || (char)this > 70)
  {
    if ((char)this < 97 || (char)this > 102) {
      return ot::Utils::CmdLineParser::ParseDigit((ot::Utils::CmdLineParser *)(char)this, a2, a3);
    }
    else {
      *a2  = (_BYTE)this - 87;
    }
  }
  else
  {
    *a2  = (_BYTE)this - 55;
  }
  return v4;
}

uint64_t ot::Utils::CmdLineParser::ParseDigit(ot::Utils::CmdLineParser *this, unsigned char *a2, unsigned __int8 *a3)
{
  unsigned int v4 = 0;
  if ((char)this >= 48 && (char)this <= 57) {
    *a2  = (_BYTE)this - 48;
  }
  else {
    return 7;
  }
  return v4;
}

uint64_t ot::Utils::CmdLineParser::ParseAsInt8(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseInt<signed char>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseInt<signed char>(ot::Utils::CmdLineParser *a1, unsigned char *a2, unsigned __int8 *a3)
{
  unsigned __int8 v7 = a1;
  unsigned int v6 = a2;
  unsigned int v5 = 0;
  *(_DWORD *)unsigned int v4 = 0;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsInt32(a1, v4, a3);
  if (!v5)
  {
    if (*(int *)v4 >= -128 && *(int *)v4 <= 127) {
      *unsigned int v6 = v4[0];
    }
    else {
      return 7;
    }
  }
  return v5;
}

{
  return ot::Utils::CmdLineParser::ParseInt<signed char>(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsInt16(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseInt<short>(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseInt<short>(ot::Utils::CmdLineParser *a1, _WORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 v7 = a1;
  unsigned int v6 = a2;
  unsigned int v5 = 0;
  *(_DWORD *)unsigned int v4 = 0;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsInt32(a1, v4, a3);
  if (!v5)
  {
    if (*(int *)v4 >= -32768 && *(int *)v4 < 0x8000) {
      *unsigned int v6 = *(_WORD *)v4;
    }
    else {
      return 7;
    }
  }
  return v5;
}

{
  return ot::Utils::CmdLineParser::ParseInt<short>(a1, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::ParseAsInt32(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  unint64_t v10 = this;
  unsigned int v9 = a2;
  unsigned int v8 = 0;
  *(void *)unsigned __int8 v7 = 0;
  char v6 = 0;
  if (this)
  {
    if (*(unsigned char *)v10 == 45)
    {
      unint64_t v10 = (ot::Utils::CmdLineParser *)((char *)v10 + 1);
      char v6 = 1;
    }
    else if (*(unsigned char *)v10 == 43)
    {
      unint64_t v10 = (ot::Utils::CmdLineParser *)((char *)v10 + 1);
    }
    unsigned int v8 = ot::Utils::CmdLineParser::ParseAsUint64(v10, v7, a3);
    if (!v8)
    {
      unint64_t v3 = 0x80000000;
      if ((v6 & 1) == 0) {
        unint64_t v3 = 0x7FFFFFFFLL;
      }
      if (*(void *)v7 <= v3)
      {
        if (v6) {
          uint64_t v5 = -*(void *)v7;
        }
        else {
          LODWORD(v5)  = *(_DWORD *)v7;
        }
        *(_DWORD *)unsigned int v9 = v5;
      }
      else
      {
        return 7;
      }
    }
  }
  else
  {
    return 7;
  }
  return v8;
}

uint64_t ot::Utils::CmdLineParser::ParseAsBool(ot::Utils::CmdLineParser *this, char *a2, BOOL *a3)
{
  unsigned __int8 v7 = this;
  char v6 = a2;
  unsigned int v5 = 0;
  *(_DWORD *)unsigned int v4 = 0;
  unsigned int v5 = ot::Utils::CmdLineParser::ParseAsUint32(this, v4, (unsigned __int8 *)a3);
  if (!v5) {
    *char v6 = *(_DWORD *)v4 != 0;
  }
  return v5;
}

uint64_t ot::Utils::CmdLineParser::ParseAsIp6Address(const char *a1, uint64_t a2)
{
  if (a1) {
    return otIp6AddressFromString(a1, a2);
  }
  else {
    return 7;
  }
}

uint64_t ot::Utils::CmdLineParser::ParseAsIp4Address(const char *a1, uint64_t a2)
{
  if (a1) {
    return otIp4AddressFromString(a1, a2);
  }
  else {
    return 7;
  }
}

uint64_t ot::Utils::CmdLineParser::ParseAsIp6Prefix(ot *a1, uint64_t a2)
{
  if (a1) {
    return otIp6PrefixFromString(a1, a2);
  }
  else {
    return 7;
  }
}

uint64_t ot::Utils::CmdLineParser::ParseAsHexString(ot::Utils::CmdLineParser *this, char *a2, unsigned __int8 *a3)
{
  char v6 = (const char *)this;
  unsigned int v5 = a2;
  __int16 v4 = (__int16)a3;
  return ot::Utils::CmdLineParser::ParseHexString(&v6, &v4, a2, 0);
}

uint64_t ot::Utils::CmdLineParser::ParseHexString(const char **a1, _WORD *a2, unsigned char *a3, int a4)
{
  uint64_t v15 = a1;
  __int16 v14 = a2;
  __int16 v13 = a3;
  int v12 = a4;
  unsigned int v11 = 0;
  unint64_t v10 = 0;
  size_t v9 = 0;
  unint64_t v8 = 0;
  BOOL v7 = 0;
  if (*a1)
  {
    size_t v9 = strlen(*v15);
    unint64_t v8 = (v9 + 1) / 2;
    if (v12)
    {
      if (v12 == 1 && v8 > (unsigned __int16)*v14) {
        return 7;
      }
    }
    else if (v8 != (unsigned __int16)*v14)
    {
      return 7;
    }
    BOOL v7 = (v9 & 1) != 0;
    while (v10 < v8)
    {
      char v6 = 0;
      if (v12 == 2 && v10 == (unsigned __int16)*v14) {
        return 36;
      }
      if (v7)
      {
        unsigned char *v13 = 0;
        BOOL v7 = 0;
      }
      else
      {
        unsigned int v11 = ot::Utils::CmdLineParser::ParseHexDigit((ot::Utils::CmdLineParser *)**v15, &v6, v4);
        if (v11) {
          return v11;
        }
        ++*v15;
        unsigned char *v13 = 16 * v6;
      }
      unsigned int v11 = ot::Utils::CmdLineParser::ParseHexDigit((ot::Utils::CmdLineParser *)**v15, &v6, v4);
      if (v11) {
        return v11;
      }
      ++*v15;
      *v13++ |= v6;
      ++v10;
    }
    _WORD *v14 = v10;
  }
  else
  {
    return 7;
  }
  return v11;
}

uint64_t ot::Utils::CmdLineParser::ParseAsHexString(ot::Utils::CmdLineParser *this, char *a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  unsigned int v5 = (const char *)this;
  return ot::Utils::CmdLineParser::ParseHexString(&v5, a2, a3, 1);
}

uint64_t ot::Utils::CmdLineParser::ParseAsHexStringSegment(const char **this, const char **a2, unsigned __int16 *a3, unsigned __int8 *a4)
{
  return ot::Utils::CmdLineParser::ParseHexString(this, a2, a3, 2);
}

uint64_t ot::Utils::CmdLineParser::Arg::GetLength(const char **this)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)this)) {
    return 0;
  }
  else {
    return (unsigned __int16)strlen(*this);
  }
}

BOOL ot::Utils::CmdLineParser::Arg::operator==(const char **a1, const char *a2)
{
  BOOL v4 = 0;
  if (!ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)a1)) {
    return strcmp(*a1, a2) == 0;
  }
  return v4;
}

BOOL ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray(ot::Utils::CmdLineParser::Arg *this, ot::Utils::CmdLineParser::Arg *a2, char **a3)
{
  for (unsigned __int8 i = 0; ; ++i)
  {
    BOOL result = ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)this + 8 * i));
    if (result) {
      break;
    }
    *((void *)a2 + i)  = ot::Utils::CmdLineParser::Arg::GetCString((ot::Utils::CmdLineParser::Arg *)((char *)this + 8 * i));
  }
  return result;
}

uint64_t ot::Utils::CmdLineParser::Arg::GetArgsLength(ot::Utils::CmdLineParser::Arg *this, ot::Utils::CmdLineParser::Arg *a2)
{
  for (unsigned __int8 i = 0; !ot::Utils::CmdLineParser::Arg::IsEmpty((ot::Utils::CmdLineParser::Arg *)((char *)this + 8 * i)); ++i)
    ;
  return i;
}

uint64_t ot::Utils::PingSender::Config::SetUnspecifiedToDefault(uint64_t this)
{
  if (!*(_WORD *)(this + 56)) {
    *(_WORD *)(this + 56)  = 8;
  }
  if (!*(_WORD *)(this + 58)) {
    *(_WORD *)(this + 58)  = 1;
  }
  if (!*(_DWORD *)(this + 60)) {
    *(_DWORD *)(this + 6ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 1000;
  }
  if (!*(_WORD *)(this + 64)) {
    *(_WORD *)(this + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 3000;
  }
  return this;
}

uint64_t ot::Utils::PingSender::HandleTimer(ot::Utils::PingSender *this)
{
  if (*((_WORD *)this + 29)) {
    return ot::Utils::PingSender::SendPing(this);
  }
  else {
    return ot::Utils::PingSender::Config::InvokeStatisticsCallback((uint64_t)this, (uint64_t)this + 72);
  }
}

uint64_t ot::Utils::PingSender::Config::InvokeReplyCallback(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(uint64_t, void))(result + 32))(a2, *(void *)(result + 48));
  }
  return result;
}

uint64_t ot::Utils::PingSender::Config::InvokeStatisticsCallback(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40)) {
    return (*(uint64_t (**)(uint64_t, void))(result + 40))(a2, *(void *)(result + 48));
  }
  return result;
}

ot::Utils::PingSender *ot::Utils::PingSender::PingSender(ot::Utils::PingSender *this, ot::Instance *a2)
{
  ot::InstanceLocator::InstanceLocator();
  ot::Utils::PingSender::Statistics::Statistics((ot::Utils::PingSender *)((char *)this + 72));
  *((_WORD *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((_WORD *)this + 45)  = 0;
  ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::TimerMilliIn((ot::Utils::PingSender *)((char *)this + 96), a2);
  ot::Ip6::Icmp::Handler::Handler((void *)this + 15, (uint64_t)ot::Utils::PingSender::HandleIcmpReceive, (uint64_t)this);
  BOOL v2 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
  ot::Ip6::Icmp::RegisterHandler(v2, (ot::Utils::PingSender *)((char *)this + 120));
  IgnoreError();
  return this;
}

{
  ot::Utils::PingSender::PingSender(this, a2);
  return this;
}

ot::Utils::PingSender::Statistics *ot::Utils::PingSender::Statistics::Statistics(ot::Utils::PingSender::Statistics *this)
{
  return this;
}

{
  ot::Utils::PingSender::Statistics::Clear((uint64_t)this);
  return this;
}

ot::TimerMilli *ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::TimerMilliIn(ot::TimerMilli *a1, ot::Instance *a2)
{
  return a1;
}

{
  ot::TimerMilli::TimerMilli(a1, a2, (void (*)(ot::Timer *))ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::HandleTimer);
  return a1;
}

uint64_t ot::Utils::PingSender::HandleIcmpReceive(ot::Utils::PingSender *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = (ot::Message *)ot::AsCoreType<otMessage>(a2);
  BOOL v7 = (ot::Ip6::MessageInfo *)ot::AsCoreType<otMessageInfo>(a3);
  BOOL v4 = (const ot::Ip6::Icmp::Header *)ot::AsCoreType<otIcmp6Header>(a4);
  return ot::Utils::PingSender::HandleIcmpReceive(a1, v6, v7, v4);
}

uint64_t ot::Utils::PingSender::Ping(ot::Utils::PingSender *this, const ot::Utils::PingSender::Config *a2)
{
  unsigned int v5 = 0;
  if (ot::Timer::IsRunning((ot::Utils::PingSender *)((char *)this + 96)))
  {
    return 5;
  }
  else
  {
    memcpy(this, a2, 0x48uLL);
    ot::Utils::PingSender::Config::SetUnspecifiedToDefault((uint64_t)this);
    if (*((_DWORD *)this + 15) <= 0x7FFFFFFFu)
    {
      ot::Utils::PingSender::Statistics::Clear((uint64_t)this + 72);
      BOOL v2 = (ot::Ip6::Address *)ot::AsCoreType<otIp6Address>((uint64_t)this + 16);
      *((unsigned char *)this + 8ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Ip6::Address::IsMulticast(v2);
      ++*((_WORD *)this + 44);
      ot::Utils::PingSender::SendPing(this);
    }
    else
    {
      return 7;
    }
  }
  return v5;
}

uint64_t ot::Utils::PingSender::Statistics::Clear(uint64_t this)
{
  *(_WORD *)this  = 0;
  *(_WORD *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(_DWORD *)(this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(_WORD *)(this + 8)  = -1;
  *(_WORD *)(this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(unsigned char *)(this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  return this;
}

{
  return ot::Utils::PingSender::Statistics::Clear(this);
}

uint64_t ot::Utils::PingSender::SendPing(ot::Utils::PingSender *this)
{
  __int16 v17 = this;
  int Now = ot::TimerMilli::GetNow(this);
  uint64_t v15 = 0;
  ot::Ip6::MessageInfo::MessageInfo((ot::Ip6::MessageInfo *)v12);
  __int16 Source = (__n128 *)ot::Utils::PingSender::Config::GetSource(this);
  ot::Ip6::MessageInfo::SetSockAddr(v12, Source);
  __int16 Destination = (__n128 *)ot::Utils::PingSender::Config::GetDestination(this);
  ot::Ip6::MessageInfo::SetPeerAddr(v12, Destination);
  char v13 = *((unsigned char *)this + 66);
  char v14 = v14 & 0xF7 | (8 * (*((unsigned char *)this + 67) & 1));
  unint64_t v3 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
  uint64_t v15 = ot::Ip6::Icmp::NewMessage(v3);
  if (v15)
  {
    size_t v9 = v15;
    uint64_t Value = (ot::Encoding::BigEndian *)ot::Time::GetValue((ot::Time *)&Now);
    int v11 = ot::Encoding::BigEndian::HostSwap32(Value);
    if (!ot::Message::Append<unsigned int>(v9, (char *)&v11))
    {
      int v8 = *((unsigned __int16 *)this + 28);
      if (v8 <= (unsigned __int16)ot::Message::GetLength(v15)
        || !ot::Message::SetLength(v15, *((_WORD *)this + 28)))
      {
        unsigned int v5 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
        *((_WORD *)this + 45)  = ot::Ip6::Icmp::GetEchoSequence(v5);
        char v6 = (ot::Ip6::Icmp *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Ip6::Icmp>(this);
        if (!ot::Ip6::Icmp::SendEchoRequest(v6, v15, (const ot::Ip6::MessageInfo *)v12, *((_WORD *)this + 44)))
        {
          ++*((_WORD *)this + 36);
          uint64_t v15 = 0;
        }
      }
    }
  }
  if (v15) {
    ot::Message::Free(v15);
  }
  if (--*((_WORD *)this + 29)) {
    return ot::TimerMilli::Start((ot::Utils::PingSender *)((char *)this + 96), *((_DWORD *)this + 15));
  }
  else {
    return ot::TimerMilli::Start((ot::Utils::PingSender *)((char *)this + 96), *((unsigned __int16 *)this + 32));
  }
}

uint64_t ot::Utils::PingSender::Stop(ot::Utils::PingSender *this)
{
  uint64_t result = ot::TimerMilli::Stop((ot::Utils::PingSender *)((char *)this + 96));
  ++*((_WORD *)this + 44);
  return result;
}

uint64_t ot::Utils::PingSender::Config::GetSource(ot::Utils::PingSender::Config *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)this);
}

{
  return ot::Utils::PingSender::Config::GetSource(this);
}

uint64_t ot::Utils::PingSender::Config::GetDestination(ot::Utils::PingSender::Config *this)
{
  return ot::AsCoreType<otIp6Address>((uint64_t)this + 16);
}

{
  return ot::Utils::PingSender::Config::GetDestination(this);
}

uint64_t ot::Message::Append<unsigned int>(ot::Message *a1, char *a2)
{
  return ot::Message::AppendBytes(a1, a2, 4u);
}

{
  return ot::Message::Append<unsigned int>(a1, a2);
}

uint64_t ot::Ip6::Icmp::GetEchoSequence(ot::Ip6::Icmp *this)
{
  return *((unsigned __int16 *)this + 4);
}

{
  return ot::Ip6::Icmp::GetEchoSequence(this);
}

uint64_t ot::Utils::PingSender::HandleIcmpReceive(ot::Utils::PingSender *this, const ot::Message *a2, const ot::Ip6::MessageInfo *a3, const ot::Ip6::Icmp::Header *a4)
{
  uint64_t v20 = this;
  uint64_t v19 = a2;
  char v18 = a3;
  __int16 v17 = a4;
  v12[0]  = 0;
  uint64_t result = ot::Timer::IsRunning((ot::Utils::PingSender *)((char *)this + 96));
  if (result)
  {
    uint64_t result = ot::Ip6::Icmp::Header::GetType(v17);
    if (result == 129)
    {
      uint64_t result = ot::Ip6::Icmp::Header::GetId(v17);
      if (*((unsigned __int16 *)this + 44) == (unsigned __int16)result)
      {
        unsigned __int16 Offset = ot::Message::GetOffset(v19);
        uint64_t result = ot::Message::Read<unsigned int>(v19, Offset, (char *)v12);
        if (!result)
        {
          v12[0]  = ot::Encoding::BigEndian::HostSwap32((ot::Encoding::BigEndian *)v12[0]);
          PeerAddr  = (ot::TimerMilli *)ot::Ip6::MessageInfo::GetPeerAddr(v18);
          *(_OWORD *)&v12[1]  = *(_OWORD *)PeerAddr;
          int Now = ot::TimerMilli::GetNow(PeerAddr);
          ot::Time::Time((ot::Time *)&v10, v12[0]);
          unsigned int v7 = ot::Time::operator-(&Now, &v10);
          unsigned __int16 v13 = ot::ClampToUint16<unsigned int>(v7);
          __int16 Length = ot::Message::GetLength(v19);
          __int16 v14 = Length - ot::Message::GetOffset(v19);
          __int16 Sequence = ot::Ip6::Icmp::Header::GetSequence(v17);
          char HopLimit = ot::Ip6::MessageInfo::GetHopLimit(v18);
          ++*((_WORD *)this + 37);
          *((_DWORD *)this + 19) += v13;
          *((_WORD *)this + 4ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = ot::Max<unsigned short>(*((_WORD *)this + 41), v13);
          *((_WORD *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = ot::Min<unsigned short>(*((_WORD *)this + 40), v13);
          if ((*((unsigned char *)this + 84) & 1) == 0
            && !*((_WORD *)this + 29)
            && *((unsigned __int16 *)this + 45) == (unsigned __int16)ot::Ip6::Icmp::Header::GetSequence(v17))
          {
            ot::TimerMilli::Stop((ot::Utils::PingSender *)((char *)this + 96));
          }
          uint64_t result = ot::Utils::PingSender::Config::InvokeReplyCallback((uint64_t)this, (uint64_t)&v12[1]);
          if ((*((unsigned char *)this + 84) & 1) == 0 && !*((_WORD *)this + 29))
          {
            uint64_t result = ot::Ip6::Icmp::Header::GetSequence(v17);
            if (*((unsigned __int16 *)this + 45) == (unsigned __int16)result) {
              return ot::Utils::PingSender::Config::InvokeStatisticsCallback((uint64_t)this, (uint64_t)this + 72);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ot::Ip6::Icmp::Header::GetId(ot::Ip6::Icmp::Header *this)
{
  return (unsigned __int16)ot::Encoding::BigEndian::HostSwap16((ot::Encoding::BigEndian *)*((unsigned __int16 *)this + 2));
}

{
  return ot::Ip6::Icmp::Header::GetId(this);
}

uint64_t ot::Message::Read<unsigned int>(ot::Message *a1, unsigned __int16 a2, char *a3)
{
  return ot::Message::Read(a1, a2, a3, 4u);
}

{
  return ot::Message::Read<unsigned int>(a1, a2, a3);
}

uint64_t ot::ClampToUint16<unsigned int>(unsigned int a1)
{
  return (unsigned __int16)ot::Min<unsigned int>(a1, 0xFFFFu);
}

{
  return ot::ClampToUint16<unsigned int>(a1);
}

uint64_t ot::TimerMilliIn<ot::Utils::PingSender,&ot::Utils::PingSender::HandleTimer>::HandleTimer(ot::InstanceLocator *a1)
{
  BOOL v2 = (ot::Utils::PingSender *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::PingSender>(a1);
  return ot::Utils::PingSender::HandleTimer(v2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::PingSender>(ot::InstanceLocator *a1)
{
  Instance  = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Utils::PingSender>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Utils::PingSender>(a1);
}

ot::Utils::Slaac *ot::Utils::Slaac::Slaac(ot::Utils::Slaac *this, ot::Instance *a2)
{
  *(unsigned char *)this  = 1;
  *((void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  memset((char *)this + 16, 0, 0x80uLL);
  return this;
}

{
  ot::Utils::Slaac::Slaac(this, a2);
  return this;
}

unsigned char *ot::Utils::Slaac::Enable(unsigned char *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*this & 1) == 0)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Enabling", a3, a4, a5, a6, a7, a8, (char)this);
    *(unsigned char *)int v8 = 1;
    return (unsigned char *)ot::Utils::Slaac::Update((uint64_t)v8, 1);
  }
  return this;
}

uint64_t ot::Utils::Slaac::Update(uint64_t this, char a2)
{
  uint64_t v51 = this;
  char v50 = a2;
  unsigned __int16 v35 = (ot::InstanceLocator *)this;
  unsigned int v49 = 0;
  char v46 = 0;
  if ((a2 & 2) != 0)
  {
    uint64_t v45 = this + 16;
    unsigned __int16 v44 = (ot::Ip6::Netif::UnicastAddress *)(this + 16);
    unsigned __int16 v43 = (ot::Ip6::Netif::UnicastAddress *)(this + 144);
    while (v44 != v43)
    {
      uint64_t v42 = v44;
      if ((*((unsigned char *)v44 + 18) & 2) != 0)
      {
        char v46 = 0;
        if (*(unsigned char *)v35)
        {
          unsigned int v49 = 0;
          while (1)
          {
            BOOL v2 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v35);
            this  = ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v2, &v49, (ot::NetworkData::OnMeshPrefixConfig *)v47);
            if (this) {
              break;
            }
            if ((v48 & 0x400) == 0 && (v48 & 8) != 0)
            {
              uint64_t Prefix = (const ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v47);
              if ((ot::Utils::Slaac::ShouldFilter(v35, Prefix) & 1) == 0)
              {
                this  = ot::Utils::Slaac::DoesConfigMatchNetifAddr((ot::Utils::Slaac *)v47, v42, v4);
                if (this)
                {
                  char v46 = 1;
                  break;
                }
              }
            }
          }
        }
        if ((v46 & 1) == 0)
        {
          Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v42);
          ot::Ip6::Address::ToString(Address, (ot::StringWriter *)v53);
          char v6 = ot::String<(unsigned short)40>::AsCString((uint64_t)v53);
          ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Removing address %s", v7, v8, v9, v10, v11, v12, v6);
          unsigned __int16 v13 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v35);
          this  = ot::Ip6::Netif::RemoveUnicastAddress(v13, v42);
          *((unsigned char *)v42 + 18) &= ~2u;
        }
      }
      unsigned __int16 v44 = (ot::Ip6::Netif::UnicastAddress *)((char *)v44 + 32);
    }
  }
  if (v50 & 1) != 0 && (*(unsigned char *)v35)
  {
    unsigned int v49 = 0;
    while (1)
    {
      __int16 v14 = (const unsigned __int8 **)ot::GetProvider<ot::InstanceLocator>::Get<ot::NetworkData::Leader>(v35);
      this  = ot::NetworkData::NetworkData::GetNextOnMeshPrefix(v14, &v49, (ot::NetworkData::OnMeshPrefixConfig *)v47);
      if (this) {
        break;
      }
      char v41 = (ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix((ot::NetworkData::OnMeshPrefixConfig *)v47);
      if ((v48 & 0x400) == 0
        && (v48 & 8) != 0
        && ot::Ip6::Prefix::GetLength(v41) == 64
        && (ot::Utils::Slaac::ShouldFilter(v35, v41) & 1) == 0)
      {
        char v46 = 0;
        uint64_t v15 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v35);
        ot::Ip6::Netif::GetUnicastAddresses(v15);
        v40[1]  = v16;
        v40[0]  = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::begin(v16);
        uint64_t v39 = ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::end();
        while (ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator!=(v40, &v39))
        {
          int v38 = (ot::NetworkData::OnMeshPrefixConfig *)ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator*((uint64_t)v40);
          if (ot::Utils::Slaac::DoesConfigMatchNetifAddr((ot::Utils::Slaac *)v47, v38, v17))
          {
            char v46 = 1;
            break;
          }
          ot::ItemPtrIterator<ot::Ip6::Netif::UnicastAddress const,ot::LinkedList<ot::Ip6::Netif::UnicastAddress>::ConstIterator>::operator++(v40);
        }
        if ((v46 & 1) == 0)
        {
          char v37 = 0;
          for (unsigned __int8 i = (ot::InstanceLocator *)((char *)v35 + 16);
                i != (ot::InstanceLocator *)((char *)v35 + 144);
                unsigned __int8 i = (ot::Ip6::Netif::UnicastAddress *)((char *)i + 32))
          {
            if ((*((unsigned char *)i + 18) & 2) == 0)
            {
              if ((v48 & 0x80) != 0) {
                ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(i, *((unsigned char *)v41 + 16), (v48 & 4) != 0);
              }
              else {
                ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(i, 128, (v48 & 4) != 0);
              }
              char v18 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(i);
              ot::Ip6::Address::SetPrefix(v18, v41);
              ot::Utils::Slaac::GenerateIid(v35, i, 0, 0, 0);
              IgnoreError();
              uint64_t v19 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(i);
              ot::Ip6::Address::ToString(v19, (ot::StringWriter *)v52);
              char v20 = ot::String<(unsigned short)40>::AsCString((uint64_t)v52);
              ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Adding address %s", v21, v22, v23, v24, v25, v26, v20);
              char v27 = (ot::Ip6::Netif *)ot::GetProvider<ot::InstanceLocator>::Get<ot::ThreadNetif>(v35);
              ot::Ip6::Netif::AddUnicastAddress(v27, i);
              char v37 = 1;
              break;
            }
          }
          if ((v37 & 1) == 0)
          {
            char v28 = ot::GetArrayLength<ot::Ip6::Netif::UnicastAddress,(unsigned short)4>();
            ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Slaac", "Failed to add - max %d addresses supported and already in use", v29, v30, v31, v32, v33, v34, v28);
          }
        }
      }
    }
  }
  return this;
}

unsigned char *ot::Utils::Slaac::Disable(unsigned char *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*this)
  {
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Disabling", a3, a4, a5, a6, a7, a8, (char)this);
    *(unsigned char *)uint64_t v8 = 0;
    return (unsigned char *)ot::Utils::Slaac::Update((uint64_t)v8, 2);
  }
  return this;
}

void ot::Utils::Slaac::SetFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != *(void *)(a1 + 8))
  {
    *(void *)(a1 + 8)  = a2;
    uint64_t v8 = "updated";
    if (!*(void *)(a1 + 8)) {
      uint64_t v8 = "disabled";
    }
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Filter %s", a3, a4, a5, a6, a7, a8, (char)v8);
    if (*(unsigned char *)a1) {
      ot::Utils::Slaac::Update(a1, 3);
    }
  }
}

uint64_t ot::Utils::Slaac::ShouldFilter(ot::Utils::Slaac *this, const ot::Ip6::Prefix *a2)
{
  char v5 = 0;
  if (*((void *)this + 1))
  {
    BOOL v4 = (uint64_t (*)(void *, const ot::Ip6::Prefix *))*((void *)this + 1);
    Instance  = ot::InstanceLocator::GetInstance(this);
    char v5 = v4(Instance, a2);
  }
  return v5 & 1;
}

uint64_t ot::Utils::Slaac::HandleNotifierEvents(uint64_t result, uint64_t a2)
{
  uint64_t v4 = a2;
  BOOL v2 = (ot::Utils::Slaac *)result;
  char v3 = 0;
  if (*(unsigned char *)result)
  {
    if (ot::Events::Contains(&v4, 512)) {
      char v3 = 3;
    }
    uint64_t result = ot::Events::Contains(&v4, 2);
    if (result) {
      v3 |= 1u;
    }
    if (v3) {
      return ot::Utils::Slaac::Update((uint64_t)v2, v3);
    }
  }
  return result;
}

BOOL ot::Utils::Slaac::DoesConfigMatchNetifAddr(ot::Utils::Slaac *this, const ot::NetworkData::OnMeshPrefixConfig *a2, const ot::Ip6::Netif::UnicastAddress *a3)
{
  if ((*(_WORD *)((unsigned char *)this + 17) & 0x80) != 0 && *((unsigned __int8 *)a2 + 16) == *((unsigned __int8 *)this + 16)
    || (BOOL v6 = 0, (*(_WORD *)((unsigned char *)this + 17) & 0x80) == 0) && (BOOL v6 = 0, *((unsigned __int8 *)a2 + 16) == 128))
  {
    Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(a2);
    uint64_t Prefix = (const ot::Ip6::Prefix *)ot::NetworkData::OnMeshPrefixConfig::GetPrefix(this);
    return ot::Ip6::Address::MatchesPrefix(Address, Prefix);
  }
  return v6;
}

uint64_t ot::Utils::Slaac::GenerateIid(ot::Utils::Slaac *this, ot::Ip6::Netif::UnicastAddress *a2, unsigned __int8 *a3, unsigned __int8 a4, unsigned __int8 *a5)
{
  uint64_t v29 = this;
  char v28 = a2;
  char v27 = a3;
  unsigned __int8 v26 = a4;
  uint64_t v25 = a5;
  int v24 = 1;
  int v23 = 1851879543;
  unsigned __int8 v22 = 0;
  if (a5) {
    unsigned __int8 v18 = *v25;
  }
  else {
    unsigned __int8 v18 = 0;
  }
  unsigned __int8 v22 = v18;
  ot::Crypto::Sha256::Sha256((ot::Crypto::Sha256 *)v21);
  ot::Utils::Slaac::GetIidSecretKey(this, (ot::Random::Crypto *)v31);
  for (unsigned __int16 i = 0; ; ++i)
  {
    if (i >= 0x100u)
    {
      ot::Logger::LogAtLevel<(ot::LogLevel)2>((ot *)"Slaac", "Failed to generate a non-reserved IID after %d attempts", v5, v6, v7, v8, v9, v10, 0);
      goto LABEL_14;
    }
    ot::Crypto::Sha256::Start((ot::Crypto::Sha256 *)v21);
    ot::Crypto::Sha256::Update((ot::Crypto::Sha256 *)v21, (uint64_t)v28, ((*((unsigned __int8 *)v28 + 16) + 7) / 8));
    if (v27) {
      ot::Crypto::Sha256::Update((ot::Crypto::Sha256 *)v21, (uint64_t)v27, v26);
    }
    ot::Crypto::Sha256::Update<unsigned char [4]>((ot::Crypto::Sha256 *)v21, (uint64_t)&v23);
    ot::Crypto::Sha256::Update<unsigned char>((ot::Crypto::Sha256 *)v21, (uint64_t)&v22);
    ot::Crypto::Sha256::Update<ot::Utils::Slaac::IidSecretKey>((ot::Crypto::Sha256 *)v21, (uint64_t)v31);
    ot::Crypto::Sha256::Finish((ot::Crypto::Sha256 *)v21, (ot::Crypto::Sha256::Hash *)v30);
    Address  = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v28);
    Iid  = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(Address);
    ot::Crypto::Sha256::Hash::GetBytes((ot::Crypto::Sha256::Hash *)v30);
    ot::Ip6::InterfaceIdentifier::SetBytes(Iid, v12);
    unsigned __int16 v13 = (ot::Ip6::Address *)ot::Ip6::Netif::UnicastAddress::GetAddress(v28);
    __int16 v14 = (ot::Ip6::InterfaceIdentifier *)ot::Ip6::Address::GetIid(v13);
    if (!ot::Ip6::InterfaceIdentifier::IsReserved(v14)) {
      break;
    }
    ++v22;
  }
  if (v25) {
    *uint64_t v25 = v22;
  }
  int v24 = 0;
LABEL_14:
  unsigned int v16 = v24;
  ot::Crypto::Sha256::~Sha256((ot::Crypto::Sha256 *)v21);
  return v16;
}

uint64_t ot::GetArrayLength<ot::Ip6::Netif::UnicastAddress,(unsigned short)4>()
{
  return 4;
}

{
  return ot::GetArrayLength<ot::Ip6::Netif::UnicastAddress,(unsigned short)4>();
}

void ot::Utils::Slaac::GetIidSecretKey(ot::InstanceLocator *a1, ot::Random::Crypto *a2)
{
  BOOL v2 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(a1);
  if (ot::Settings::Read<ot::SettingsBase::SlaacIidSecretKey>(v2, a2))
  {
    if (ot::Random::Crypto::FillBuffer(a2, (unsigned __int8 *)0x20))
    {
      ot::Random::Crypto::FillBuffer(a2, (unsigned __int8 *)0x20);
      IgnoreError();
    }
    char v3 = (ot::InstanceLocator *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Settings>(a1);
    ot::Settings::Save<ot::SettingsBase::SlaacIidSecretKey>(v3, a2);
    IgnoreError();
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Slaac", "Generated and saved secret key", v4, v5, v6, v7, v8, v9, (char)a1);
  }
}

uint64_t ot::Crypto::Sha256::Update<unsigned char [4]>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 4u);
}

{
  return ot::Crypto::Sha256::Update<unsigned char [4]>(a1, a2);
}

uint64_t ot::Crypto::Sha256::Update<unsigned char>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 1u);
}

{
  return ot::Crypto::Sha256::Update<unsigned char>(a1, a2);
}

uint64_t ot::Crypto::Sha256::Update<ot::Utils::Slaac::IidSecretKey>(ot::Crypto::Sha256 *a1, uint64_t a2)
{
  return ot::Crypto::Sha256::Update(a1, a2, 0x20u);
}

{
  return ot::Crypto::Sha256::Update<ot::Utils::Slaac::IidSecretKey>(a1, a2);
}

uint64_t ot::Settings::Read<ot::SettingsBase::SlaacIidSecretKey>(ot::InstanceLocator *a1, void *a2)
{
  return ot::Settings::ReadEntry(a1, 7u, a2, 0x20u);
}

{
  return ot::Settings::Read<ot::SettingsBase::SlaacIidSecretKey>(a1, a2);
}

uint64_t ot::Settings::Save<ot::SettingsBase::SlaacIidSecretKey>(ot::InstanceLocator *a1, ot::SettingsBase::NetworkInfo *a2)
{
  return ot::Settings::SaveEntry(a1, 7, a2, (uint64_t)v3, 0x20u);
}

{
  return ot::Settings::Save<ot::SettingsBase::SlaacIidSecretKey>(a1, a2);
}

uint64_t ot::Hdlc::Encoder::Encoder(uint64_t this, ot::Hdlc::FrameWritePointer *a2)
{
  *(void *)this  = a2;
  *(_WORD *)(this + 8)  = 0;
  return this;
}

ot::Hdlc::Encoder *ot::Hdlc::Encoder::Encoder(ot::Hdlc::Encoder *this, ot::Hdlc::FrameWritePointer *a2)
{
  return this;
}

uint64_t ot::Hdlc::Encoder::BeginFrame(ot::Hdlc::Encoder *this)
{
  *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = -1;
  return ot::Hdlc::FrameWritePointer::WriteByte(*(ot::Hdlc::FrameWritePointer **)this, 126);
}

uint64_t ot::Hdlc::FrameWritePointer::WriteByte(ot::Hdlc::FrameWritePointer *this, char a2)
{
  if (ot::Hdlc::FrameWritePointer::CanWrite(this, 1u))
  {
    BOOL v2 = (unsigned char *)(*(void *)this)++;
    *BOOL v2 = a2;
    --*((_WORD *)this + 4);
    return 0;
  }
  else
  {
    return 3;
  }
}

{
  return ot::Hdlc::FrameWritePointer::WriteByte(this, a2);
}

uint64_t ot::Hdlc::Encoder::Encode(ot::Hdlc::FrameWritePointer **this, unsigned __int8 a2)
{
  unsigned int v4 = 0;
  if (!ot::Hdlc::HdlcByteNeedsEscape((ot::Hdlc *)a2))
  {
    unsigned int v4 = ot::Hdlc::FrameWritePointer::WriteByte(*this, a2);
    if (v4) {
      return v4;
    }
LABEL_6:
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = ot::Hdlc::UpdateFcs((ot::Hdlc *)*((unsigned __int16 *)this + 4), a2);
    return v4;
  }
  if (ot::Hdlc::FrameWritePointer::CanWrite(*this, 2u))
  {
    ot::Hdlc::FrameWritePointer::WriteByte(*this, 125);
    IgnoreError();
    ot::Hdlc::FrameWritePointer::WriteByte(*this, a2 ^ 0x20);
    IgnoreError();
    goto LABEL_6;
  }
  return 3;
}

BOOL ot::Hdlc::HdlcByteNeedsEscape(ot::Hdlc *this)
{
  BOOL v3 = 1;
  if (this != 17 && this != 19)
  {
    BOOL v1 = this == 126 || this == 125;
    if (!v1 && this != 248) {
      return 0;
    }
  }
  return v3;
}

uint64_t ot::Hdlc::UpdateFcs(ot::Hdlc *this, char a2)
{
  return (unsigned __int16)(ot::Hdlc::UpdateFcs(unsigned short,unsigned char)::sFcsTable[(this ^ a2)] ^ ((int)(unsigned __int16)this >> 8));
}

uint64_t ot::Hdlc::Encoder::Encode(ot::Hdlc::FrameWritePointer **this, unsigned __int8 *a2, __int16 a3)
{
  *(_WORD *)&void v9[4] = 0;
  *(_DWORD *)uint64_t v9 = *((unsigned __int16 *)this + 4);
  long long v8 = *(_OWORD *)*this;
  do
  {
    if (!a3--) {
      break;
    }
    unsigned int v4 = a2++;
    *(_DWORD *)&uint64_t v9[2] = ot::Hdlc::Encoder::Encode(this, *v4);
  }
  while (!*(_DWORD *)&v9[2]);
  if (*(_DWORD *)&v9[2])
  {
    uint64_t v5 = *this;
    *(void *)uint64_t v5 = v8;
    *((_WORD *)v5 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = WORD4(v8);
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *(_WORD *)v9;
  }
  return *(unsigned int *)&v9[2];
}

uint64_t ot::Hdlc::Encoder::EndFrame(long long **this)
{
  long long v5 = **this;
  __int16 v4 = *((_WORD *)this + 4);
  unsigned int v6 = ot::Hdlc::Encoder::Encode((ot::Hdlc::FrameWritePointer **)this, ~(_BYTE)v4);
  if (!v6)
  {
    unsigned int v6 = ot::Hdlc::Encoder::Encode((ot::Hdlc::FrameWritePointer **)this, ~HIBYTE(v4));
    if (!v6) {
      unsigned int v6 = ot::Hdlc::FrameWritePointer::WriteByte((ot::Hdlc::FrameWritePointer *)*this, 126);
    }
  }
  if (v6)
  {
    BOOL v1 = *this;
    *(void *)BOOL v1 = v5;
    *((_WORD *)v1 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = WORD4(v5);
    *((_WORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  return v6;
}

uint64_t ot::Hdlc::Decoder::Decoder(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 8)  = a2;
  *(void *)(result + 16)  = a3;
  *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a4;
  *(_WORD *)(result + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(_WORD *)(result + 3ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return result;
}

uint64_t ot::Hdlc::Decoder::Decoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

uint64_t ot::Hdlc::Decoder::Reset(uint64_t this)
{
  *(_DWORD *)this  = 0;
  *(_WORD *)(this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(_WORD *)(this + 3ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return this;
}

void ot::Hdlc::Decoder::Decode(ot::Hdlc::Decoder *this, char *a2, __int16 a3)
{
  while (a3--)
  {
    __int16 v4 = a2++;
    char v8 = *v4;
    int v5 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
      if (v5 == 1)
      {
        if (v8 == 125)
        {
          *(_DWORD *)this  = 2;
        }
        else if (v8 == 126)
        {
          if (*((_WORD *)this + 17))
          {
            unsigned int v7 = 6;
            if (*((unsigned __int16 *)this + 17) >= 2u && *((unsigned __int16 *)this + 16) == 61624)
            {
              ot::Hdlc::FrameWritePointer::UndoLastWrites(*((void *)this + 1), 2u);
              unsigned int v7 = 0;
            }
            (*((void (**)(void, void))this + 2))(*((void *)this + 3), v7);
          }
          *((_WORD *)this + 1ot::ThreadTlv::SetType(this, 7) = 0;
          *((_WORD *)this + 16)  = -1;
        }
        else if (ot::Hdlc::FrameWritePointer::CanWrite(*((ot::Hdlc::FrameWritePointer **)this + 1), 1u))
        {
          *((_WORD *)this + 16)  = ot::Hdlc::UpdateFcs((ot::Hdlc *)*((unsigned __int16 *)this + 16), v8);
          ot::Hdlc::FrameWritePointer::WriteByte(*((ot::Hdlc::FrameWritePointer **)this + 1), v8);
          IgnoreError();
          ++*((_WORD *)this + 17);
        }
        else
        {
LABEL_24:
          (*((void (**)(void, uint64_t))this + 2))(*((void *)this + 3), 3);
          *(_DWORD *)this  = 0;
        }
      }
      else if (v5 == 2)
      {
        if (!ot::Hdlc::FrameWritePointer::CanWrite(*((ot::Hdlc::FrameWritePointer **)this + 1), 1u)) {
          goto LABEL_24;
        }
        char v9 = v8 ^ 0x20;
        *((_WORD *)this + 16)  = ot::Hdlc::UpdateFcs((ot::Hdlc *)*((unsigned __int16 *)this + 16), v9);
        ot::Hdlc::FrameWritePointer::WriteByte(*((ot::Hdlc::FrameWritePointer **)this + 1), v9);
        IgnoreError();
        ++*((_WORD *)this + 17);
        *(_DWORD *)this  = 1;
      }
    }
    else if (v8 == 126)
    {
      *(_DWORD *)this  = 1;
      *((_WORD *)this + 1ot::ThreadTlv::SetType(this, 7) = 0;
      *((_WORD *)this + 16)  = -1;
    }
  }
}

uint64_t ot::Hdlc::FrameWritePointer::UndoLastWrites(uint64_t this, unsigned __int16 a2)
{
  *(void *)this -= a2;
  *(_WORD *)(this + 8) += a2;
  return this;
}

{
  return ot::Hdlc::FrameWritePointer::UndoLastWrites(this, a2);
}

char *otExitCodeToString(unsigned __int8 a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    char v1 = 0;
  }
  if (v1) {
    __assert_rtn("otExitCodeToString", "exit_code.c", 79, "false");
  }
  switch(v2)
  {
    case 0:
      int v5 = "Success";
      break;
    case 1:
      int v5 = "Failure";
      break;
    case 2:
      int v5 = "InvalidArgument";
      break;
    case 3:
      int v5 = "RadioSpinelIncompatible";
      break;
    case 4:
      int v5 = "RadioSpinelReset";
      break;
    case 5:
      BOOL v3 = __error();
      int v5 = strerror(*v3);
      break;
    case 6:
      int v5 = "RadioSpinelNoResponse";
      break;
    default:
      JUMPOUT(0);
  }
  return v5;
}

uint64_t ot::Url::Url::Init(ot::Url::Url *this, char *a2)
{
  unsigned int v8 = 0;
  *((void *)this + ot::Tlv::SetType(this, 3) = &a2[strlen(a2)];
  *(void *)this  = a2;
  __str  = strstr[abi:nn180100](a2, "://");
  if (__str)
  {
    char *__str = 0;
    *((void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = __str + 3;
    __stra  = strstr[abi:nn180100](__str + 3, "?");
    if (__stra)
    {
      __strb  = __stra + 1;
      *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = __strb;
      for (unsigned __int16 i = strtok(__strb, "&"); i; unsigned __int16 i = strtok(0, "&"))
        *(i - ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
    }
    else
    {
      *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((void *)this + 3);
    }
  }
  else
  {
    return 6;
  }
  return v8;
}

char *ot::Url::Url::GetValue(ot::Url::Url *this, const char *a2, const char *a3)
{
  uint64_t v7 = 0;
  size_t __n = strlen(a2);
  if (!a3)
  {
    __s2  = (char *)*((void *)this + 2);
    goto LABEL_7;
  }
  if ((unint64_t)a3 > *((void *)this + 2) && (unint64_t)a3 < *((void *)this + 3))
  {
    __s2  = (char *)&a3[strlen(a3) + 1];
LABEL_7:
    while ((unint64_t)__s2 < *((void *)this + 3))
    {
      if (!strncmp(a2, __s2, __n))
      {
        if (__s2[__n] == 61) {
          return &__s2[__n + 1];
        }
        if (!__s2[__n]) {
          return &__s2[__n];
        }
      }
      __s2 += strlen(__s2) + 1;
    }
  }
  return (char *)v7;
}

uint64_t otbr::Mdns::PublisherMDnsSd::PublisherMDnsSd(uint64_t a1, uint64_t a2)
{
  __int16 v4 = otbr::MainloopProcessor::MainloopProcessor((otbr::MainloopProcessor *)a1);
  otbr::Mdns::Publisher::Publisher((otbr::MainloopProcessor *)((char *)v4 + 8));
  *(void *)a1  = off_10049F740;
  *(void *)(a1 + 8)  = off_10049F7E0;
  *(void *)(a1 + 336)  = 0;
  *(_DWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100](a1 + 352, a2);
  *(void *)(a1 + 38ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 40ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 408)  = 0;
  *(void *)(a1 + 416)  = 0;
  *(void *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  otbrLog(6u, "MDNS", "PublisherMDnsSd::PublisherMDnsSd", v5, v6, v7, v8, v9, v11);
  return a1;
}

void sub_1003AEAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  __int16 v14 = v13;
  a10  = v10 + 51;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10  = v14;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::~__value_func[abi:ne180100](v12);
  otbr::Mdns::Publisher::~Publisher(v11);
  otbr::MainloopProcessor::~MainloopProcessor((otbr::MainloopProcessor *)v10);
  _Unwind_Resume(a1);
}

double otbr::Mdns::Publisher::Publisher(otbr::Mdns::Publisher *this)
{
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)this  = &off_10049F990;
  *((void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = (char *)this + 16;
  *((void *)this + 5)  = 0;
  *((void *)this + ot::Tlv::SetType(this, 3) = 0;
  *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (char *)this + 40;
  *((void *)this + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0;
  *((_OWORD *)this + ot::Tlv::SetType(this, 3) = xmmword_1003F9A10;
  *((void *)this + 8)  = (char *)this + 72;
  *((void *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *((void *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *((void *)this + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = (char *)this + 96;
  *((void *)this + ot::Mle::Tlv::SetType(this, 15) = 0;
  *((void *)this + 1ot::Tlv::SetType(this, 3) = 0;
  *((void *)this + 1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (char *)this + 120;
  *((void *)this + 18)  = 0;
  *((void *)this + 16)  = 0;
  *((void *)this + 1ot::ThreadTlv::SetType(this, 7) = (char *)this + 144;
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *((void *)this + 2ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)this + 1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0;
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = (char *)this + 168;
  double result = 0.0;
  *(_OWORD *)((char *)this + 248)  = 0u;
  *(_OWORD *)((char *)this + 23ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
  *(_OWORD *)((char *)this + 216)  = 0u;
  *(_OWORD *)((char *)this + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)((char *)this + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_OWORD *)((char *)this + 296)  = 0u;
  *(_OWORD *)((char *)this + 31ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
  *(_OWORD *)((char *)this + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)((char *)this + 28ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  return result;
}

void otbr::Mdns::Publisher::~Publisher(otbr::Mdns::Publisher *this)
{
  *(void *)this  = &off_10049F990;
  uint64_t v2 = (char *)this + 8;
  std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::~__tree((uint64_t)this + 160);
  std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree((uint64_t)this + 136);
  std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::~__tree((uint64_t)this + 112);
  std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree((uint64_t)this + 88);
  std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::~__tree((uint64_t)this + 64);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)this + 32);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)v2);
}

void otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd(otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)this  = off_10049F740;
  uint64_t v9 = (otbr::Mdns::PublisherMDnsSd *)((char *)this + 8);
  *((void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = off_10049F7E0;
  otbrLog(6u, "MDNS", "PublisherMDnsSd::~PublisherMDnsSd", a4, a5, a6, a7, a8, v10);
  (*(void (**)(otbr::Mdns::PublisherMDnsSd *))(*(void *)this + 96))(this);
  char v11 = (void **)((char *)this + 408);
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destroy_vector::operator()[abi:ne180100](&v11);
  char v11 = (void **)((char *)this + 384);
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::~__value_func[abi:ne180100]((void *)this + 44);
  otbr::Mdns::Publisher::~Publisher(v9);
  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  uint64_t vars8;

  otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd(this, a2, a3, a4, a5, a6, a7, a8);

  operator delete();
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd(otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  uint64_t vars8;

  otbr::Mdns::PublisherMDnsSd::~PublisherMDnsSd((otbr::Mdns::PublisherMDnsSd *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);

  operator delete();
}

uint64_t otbr::Mdns::PublisherMDnsSd::Start(otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 86) = 1;
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::operator()[abi:ne180100]((uint64_t)this + 352);
  return 0;
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Start(otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

BOOL otbr::Mdns::PublisherMDnsSd::IsStarted(otbr::Mdns::PublisherMDnsSd *this)
{
  return *((_DWORD *)this + 86) == 1;
}

BOOL non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::IsStarted(otbr::Mdns::PublisherMDnsSd *this)
{
  return *((_DWORD *)this + 84) == 1;
}

uint64_t otbr::Mdns::PublisherMDnsSd::Stop(otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v24[0]  = 0;
  v24[1]  = 0;
  v22[1]  = 0;
  int v23 = v24;
  uint64_t v21 = v22;
  v22[0]  = 0;
  otbrLog(6u, "MDNS", "PublisherMDnsSd::Stop mState:%d", a4, a5, a6, a7, a8, *((_DWORD *)this + 86));
  if (*((_DWORD *)this + 86) == 1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::swap((uint64_t *)this + 2, (uint64_t)&v23);
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::swap((uint64_t *)this + 5, (uint64_t)&v21);
    uint64_t v9 = (_DNSServiceRef_t *)*((void *)this + 42);
    if (v9)
    {
      DNSServiceRefDeallocate(v9);
      otbrLog(7u, "MDNS", "Deallocated DNSServiceRef for hosts: %p", v10, v11, v12, v13, v14, *((void *)this + 42));
      *((void *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
    }
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 384, *((uint64_t **)this + 48));
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 408, *((uint64_t **)this + 51));
    *((_DWORD *)this + ot::Mle::Tlv::SetType(this, 86) = 0;
    otbrLog(6u, "MDNS", "PublisherMDnsSd::Stop return mState:%d", v15, v16, v17, v18, v19, 0);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)&v21);
  return std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)&v23);
}

void sub_1003AEF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Stop(otbr::Mdns::PublisherMDnsSd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return otbr::Mdns::PublisherMDnsSd::Stop((otbr::Mdns::PublisherMDnsSd *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);
}

_DNSServiceRef_t *otbr::Mdns::PublisherMDnsSd::Update(void *a1, _DWORD *a2)
{
  uint64_t v4 = (void *)a1[2];
  char v20 = v4;
  for (unsigned __int16 i = a1 + 3; v20 != i; v4 = v20)
  {
    uint64_t v6 = *(_DNSServiceRef_t **)(v4[7] + 176);
    if (!v6) {
      otbr::Mdns::PublisherMDnsSd::Update();
    }
    dnssd_sock_t v7 = DNSServiceRefSockFD(v6);
    if (v7 != -1)
    {
      dnssd_sock_t v8 = v7;
      if (__darwin_check_fd_set_overflow(v7, a2, 0)) {
        *(_DWORD *)((char *)a2 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v8;
      }
      dnssd_sock_t v9 = a2[96];
      if (v9 <= v8) {
        dnssd_sock_t v9 = v8;
      }
      a2[96]  = v9;
    }
    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v20);
  }
  double result = (_DNSServiceRef_t *)a1[42];
  if (result)
  {
    dnssd_sock_t v11 = DNSServiceRefSockFD(result);
    if (v11 == -1) {
      otbr::Mdns::PublisherMDnsSd::Update();
    }
    dnssd_sock_t v12 = v11;
    double result = (_DNSServiceRef_t *)__darwin_check_fd_set_overflow(v11, a2, 0);
    if (result) {
      *(_DWORD *)((char *)a2 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v12;
    }
    dnssd_sock_t v13 = a2[96];
    if (v13 <= v12) {
      dnssd_sock_t v13 = v12;
    }
    a2[96]  = v13;
  }
  uint64_t v14 = (uint64_t *)a1[48];
  uint64_t v15 = (uint64_t *)a1[49];
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceSubscription::UpdateAll(v16, a2);
  }
  uint64_t v18 = (_DNSServiceRef_t ***)a1[51];
  uint64_t v17 = (_DNSServiceRef_t ***)a1[52];
  while (v18 != v17)
  {
    uint64_t v19 = *v18++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(v19, a2);
  }
  return result;
}

_DNSServiceRef_t *otbr::Mdns::PublisherMDnsSd::ServiceSubscription::UpdateAll(uint64_t a1, _DWORD *a2)
{
  double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update((_DNSServiceRef_t **)a1, a2);
  uint64_t v5 = *(_DNSServiceRef_t ****)(a1 + 64);
  uint64_t v6 = *(_DNSServiceRef_t ****)(a1 + 72);
  while (v5 != v6)
  {
    dnssd_sock_t v7 = *v5++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(v7, a2);
  }
  dnssd_sock_t v9 = *(_DNSServiceRef_t ****)(a1 + 88);
  dnssd_sock_t v8 = *(_DNSServiceRef_t ****)(a1 + 96);
  while (v9 != v8)
  {
    uint64_t v10 = *v9++;
    double result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(v10, a2);
  }
  return result;
}

_DNSServiceRef_t *otbr::Mdns::PublisherMDnsSd::ServiceRef::Update(_DNSServiceRef_t **a1, _DWORD *a2)
{
  double result = *a1;
  if (result)
  {
    dnssd_sock_t v4 = DNSServiceRefSockFD(result);
    if (v4 == -1) {
      otbr::Mdns::PublisherMDnsSd::ServiceRef::Update();
    }
    dnssd_sock_t v5 = v4;
    double result = (_DNSServiceRef_t *)__darwin_check_fd_set_overflow(v4, a2, 0);
    if (result) {
      *(_DWORD *)((char *)a2 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v5;
    }
    dnssd_sock_t v6 = a2[96];
    if (v6 <= v5) {
      dnssd_sock_t v6 = v5;
    }
    a2[96]  = v6;
  }
  return result;
}

_DNSServiceRef_t *non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Update(uint64_t a1, _DWORD *a2)
{
  return otbr::Mdns::PublisherMDnsSd::Update((void *)(a1 - 8), a2);
}

void otbr::Mdns::PublisherMDnsSd::Process(void *a1, char *a2)
{
  int v38 = 0;
  uint64_t v39 = 0;
  dnssd_sock_t v4 = (void **)a1[2];
  unint64_t v40 = 0;
  char v41 = v4;
  dnssd_sock_t v5 = (void **)(a1 + 3);
  while (v4 != v5)
  {
    dnssd_sock_t v6 = (char *)v4[7];
    dnssd_sock_t v8 = (_DNSServiceRef_t *)*((void *)v6 + 22);
    dnssd_sock_t v7 = (DNSServiceRef *)(v6 + 176);
    dnssd_sock_t v9 = DNSServiceRefSockFD(v8);
    if (__darwin_check_fd_set_overflow(v9, a2, 0)
      && ((*(_DWORD *)&a2[((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v9) & 1) != 0)
    {
      uint64_t v10 = v39;
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v11 = std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>((uint64_t *)&v38, v7);
      }
      else
      {
        *uint64_t v39 = *v7;
        uint64_t v11 = (uint64_t)(v10 + 1);
      }
      uint64_t v39 = (DNSServiceRef *)v11;
    }
    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v41);
    dnssd_sock_t v4 = v41;
  }
  dnssd_sock_t v12 = (_DNSServiceRef_t *)a1[42];
  if (v12)
  {
    dnssd_sock_t v13 = DNSServiceRefSockFD(v12);
    if (__darwin_check_fd_set_overflow(v13, a2, 0))
    {
      if ((*(_DWORD *)&a2[((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v13))
      {
        uint64_t v14 = (DNSServiceRef *)(a1 + 42);
        uint64_t v15 = v39;
        if ((unint64_t)v39 >= v40)
        {
          uint64_t v16 = std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>((uint64_t *)&v38, v14);
        }
        else
        {
          *uint64_t v39 = *v14;
          uint64_t v16 = (uint64_t)(v15 + 1);
        }
        uint64_t v39 = (DNSServiceRef *)v16;
      }
    }
  }
  uint64_t v17 = (uint64_t **)a1[48];
  uint64_t v18 = (uint64_t **)a1[49];
  while (v17 != v18)
    otbr::Mdns::PublisherMDnsSd::ServiceSubscription::ProcessAll(*v17++, a2, (uint64_t *)&v38);
  uint64_t v19 = (uint64_t **)a1[51];
  char v20 = (uint64_t **)a1[52];
  while (v19 != v20)
    otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(*v19++, a2, (uint64_t *)&v38);
  uint64_t v21 = v38;
  unsigned __int8 v22 = v39;
  if (v38 != v39)
  {
    while (1)
    {
      int v23 = (otbr::Mdns *)DNSServiceProcessResult(*v21);
      int v24 = (int)v23;
      if (v23)
      {
        char v25 = otbr::Mdns::DNSErrorToString(v23);
        unsigned int v31 = v24 == -65541 ? 6 : 4;
        otbrLog(v31, "MDNS", "DNSServiceProcessResult failed: %s (serviceRef  = %p)", v26, v27, v28, v29, v30, v25);
        if (v24 == -65541 || v24 == -65563) {
          break;
        }
      }
      if (++v21 == v22) {
        goto LABEL_32;
      }
    }
    otbrLog(4u, "MDNS", "Need to reconnect to mdnsd", v32, v33, v34, v35, v36, v37);
    (*(void (**)(void *))(*a1 + 96))(a1);
    (*(void (**)(void *))(*a1 + 80))(a1);
  }
LABEL_32:
  char v41 = (void **)&v38;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v41);
}

void sub_1003AF42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14  = (void **)&a11;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceSubscription::ProcessAll(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(a1, a2, a3);
  dnssd_sock_t v7 = (uint64_t **)a1[8];
  dnssd_sock_t v8 = (uint64_t **)a1[9];
  while (v7 != v8)
  {
    dnssd_sock_t v9 = *v7++;
    uint64_t result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(v9, a2, a3);
  }
  uint64_t v11 = (uint64_t **)a1[11];
  uint64_t v10 = (uint64_t **)a1[12];
  while (v11 != v10)
  {
    dnssd_sock_t v12 = *v11++;
    uint64_t result = otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(v12, a2, a3);
  }
  return result;
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceRef::Process(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t result = *a1;
  if (result)
  {
    dnssd_sock_t v7 = DNSServiceRefSockFD((DNSServiceRef)result);
    if (v7 == -1) {
      otbr::Mdns::PublisherMDnsSd::ServiceRef::Process();
    }
    dnssd_sock_t v8 = v7;
    uint64_t result = __darwin_check_fd_set_overflow(v7, a2, 0);
    if result && ((*(_DWORD *)&a2[((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v8))
    {
      unint64_t v9 = a3[1];
      if (v9 >= a3[2])
      {
        uint64_t result = std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>(a3, a1);
      }
      else
      {
        std::vector<_DNSServiceRef_t *>::__construct_one_at_end[abi:ne180100]<_DNSServiceRef_t * const&>((uint64_t)a3, a1);
        uint64_t result = v9 + 8;
      }
      a3[1]  = result;
    }
  }
  return result;
}

const char *otbr::Mdns::DNSErrorToString(otbr::Mdns *this)
{
  switch(this)
  {
    case 0xFFFEFFE0:
      return "Timeout";
    case 0xFFFEFFE1:
      return "Polling Mode";
    case 0xFFFEFFE2:
      return "No Router";
    case 0xFFFEFFE3:
      return "NAT Port Mapping Disabled";
    case 0xFFFEFFE4:
      return "NAT Port Mapping Unsupported";
    case 0xFFFEFFE5:
      return "Service Not Running";
    case 0xFFFEFFE6:
      return "Transient";
    case 0xFFFEFFE7:
      return "Bad Key";
    case 0xFFFEFFE8:
      return "Bad Sig";
    case 0xFFFEFFE9:
      return "Bad Time";
    case 0xFFFEFFEA:
      return "Double NAT";
    case 0xFFFEFFEB:
      return "NAT Traversal";
    case 0xFFFEFFEC:
      return "No Such Key";
    case 0xFFFEFFED:
      return "No Auth";
    case 0xFFFEFFEE:
      return "No Such Record";
    case 0xFFFEFFEF:
      return "Refused";
    case 0xFFFEFFF0:
      return "Bad Interface Index";
    case 0xFFFEFFF1:
      return "Incompatible";
    case 0xFFFEFFF2:
      return "Firewall";
    case 0xFFFEFFF3:
      return "Invalid";
    case 0xFFFEFFF4:
      return "Name Conflict";
    case 0xFFFEFFF5:
      return "Already Registered";
    case 0xFFFEFFF6:
      goto LABEL_35;
    case 0xFFFEFFF7:
      return "Not Initialized";
    case 0xFFFEFFF8:
      return "Unsupported";
    case 0xFFFEFFF9:
      return "Bad Flags";
    case 0xFFFEFFFA:
      return "Bad State";
    case 0xFFFEFFFB:
      return "Bad Reference";
    case 0xFFFEFFFC:
      return "Bad Param";
    case 0xFFFEFFFD:
      return "No Memory";
    case 0xFFFEFFFE:
      return "No Such Name";
    case 0xFFFEFFFF:
      return "Unknown";
    default:
      if (this) {
LABEL_35:
      }
        otbr::Mdns::DNSErrorToString();
      return "OK";
  }
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::Process(uint64_t a1, char *a2)
{
}

void otbr::Mdns::PublisherMDnsSd::DnssdServiceRegistration::~DnssdServiceRegistration(std::string *this)
{
  this->__r_.__value_.__r.__words[0]  = (std::string::size_type)off_10049F880;
  size  = (_DNSServiceRef_t *)this[7].__r_.__value_.__l.__size_;
  if (size)
  {
    DNSServiceRefDeallocate(size);
    this[7].__r_.__value_.__l.__size_  = 0;
  }

  otbr::Mdns::Publisher::ServiceRegistration::~ServiceRegistration(this);
}

{
  uint64_t vars8;

  otbr::Mdns::PublisherMDnsSd::DnssdServiceRegistration::~DnssdServiceRegistration(this);

  operator delete();
}

void otbr::Mdns::Publisher::ServiceRegistration::~ServiceRegistration(std::string *this)
{
  this->__r_.__value_.__r.__words[0]  = (std::string::size_type)off_10049FA30;
  otbr::Mdns::Publisher::ServiceRegistration::OnComplete(this, -12);
  p_size  = (void **)&this[6].__r_.__value_.__l.__size_;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100](&p_size);
  p_size  = (void **)&this[5].__r_.__value_.__l.__data_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_size);
  if (SHIBYTE(this[4].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this[4].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this[3].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this[2].__r_.__value_.__l.__data_);
  }
  otbr::Mdns::Publisher::Registration::~Registration((otbr::Mdns::Publisher::Registration *)this);
}

{
  uint64_t vars8;

  otbr::Mdns::Publisher::ServiceRegistration::~ServiceRegistration(this);

  operator delete();
}

void otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration::~DnssdHostRegistration(otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration *this)
{
  *(void *)this  = off_10049F8A0;
  if (*((void *)this + 12))
  {
    uint64_t v2 = (DNSRecordRef *)*((void *)this + 13);
    uint64_t v28 = (char *)v2;
    BOOL v3 = (char *)this + 112;
    if (v2 != (DNSRecordRef *)((char *)this + 112))
    {
      do
      {
        dnssd_sock_t v4 = (otbr::Ip6Address *)(v2 + 5);
        dnssd_sock_t v5 = (_DNSServiceRef_t *)*((void *)this + 12);
        if (!*((void *)this + 4))
        {
          uint64_t updated = DNSServiceUpdateRecord(v5, v2[4], 0x20u, 0x10u, v2 + 5, 1u);
          int v7 = otbr::Mdns::DNSErrorToOtbrError(updated);
          if (v7) {
            unsigned int v8 = 4;
          }
          else {
            unsigned int v8 = 6;
          }
          otbr::Mdns::Publisher::MakeFullHostName((const void **)this + 6, (uint64_t)v26);
          if (v27 >= 0) {
            unint64_t v9 = v26;
          }
          else {
            LOBYTE(vot::NetworkDiagnostic::Tlv::SetType(this, 9) = v26[0];
          }
          otbr::Ip6Address::ToString((otbr::Ip6Address *)(v2 + 5), __p);
          otbr::Mdns::DNSErrorToString((otbr::Mdns *)updated);
          otbrErrorString(v7);
          otbrLog(v8, "MDNS", "Send goodbye message for host %s address %s: %s: %s", v10, v11, v12, v13, v14, (char)v9);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          if (v27 < 0) {
            operator delete(v26[0]);
          }
          dnssd_sock_t v5 = (_DNSServiceRef_t *)*((void *)this + 12);
        }
        uint64_t v15 = DNSServiceRemoveRecord(v5, v2[4], 0);
        int v16 = otbr::Mdns::DNSErrorToOtbrError(v15);
        if (v16) {
          unsigned int v17 = 4;
        }
        else {
          unsigned int v17 = 6;
        }
        otbr::Mdns::Publisher::MakeFullHostName((const void **)this + 6, (uint64_t)v26);
        if (v27 >= 0) {
          uint64_t v18 = v26;
        }
        else {
          LOBYTE(v18)  = v26[0];
        }
        otbr::Ip6Address::ToString(v4, __p);
        otbr::Mdns::DNSErrorToString((otbr::Mdns *)v15);
        otbrErrorString(v16);
        otbrLog(v17, "MDNS", "Remove record for host %s address %s: %s: %s", v19, v20, v21, v22, v23, (char)v18);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v28);
        uint64_t v2 = (DNSRecordRef *)v28;
      }
      while (v28 != v3);
    }
  }
  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree((uint64_t)this + 104);
  otbr::Mdns::Publisher::HostRegistration::~HostRegistration((void **)this);
}

{
  uint64_t vars8;

  otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration::~DnssdHostRegistration(this);

  operator delete();
}

uint64_t otbr::Mdns::DNSErrorToOtbrError(uint64_t this)
{
  switch(this)
  {
    case 0xFFFEFFEC:
    case 0xFFFEFFEE:
    case 0xFFFEFFFE:
      this  = 4294967289;
      break;
    case 0xFFFEFFED:
    case 0xFFFEFFEF:
    case 0xFFFEFFF1:
    case 0xFFFEFFF2:
    case 0xFFFEFFF5:
    case 0xFFFEFFF6:
    case 0xFFFEFFF7:
    case 0xFFFEFFFA:
    case 0xFFFEFFFB:
    case 0xFFFEFFFD:
      goto LABEL_6;
    case 0xFFFEFFF0:
    case 0xFFFEFFF3:
    case 0xFFFEFFF9:
    case 0xFFFEFFFC:
      this  = 4294967286;
      break;
    case 0xFFFEFFF4:
      this  = 4294967285;
      break;
    case 0xFFFEFFF8:
      this  = 4294967287;
      break;
    default:
      if (this == -65563)
      {
        this  = 4294967283;
      }
      else if (this)
      {
LABEL_6:
        this  = 4294967293;
      }
      break;
  }
  return this;
}

void otbr::Mdns::Publisher::HostRegistration::~HostRegistration(void **this)
{
  *this  = off_10049FA50;
  otbr::Mdns::Publisher::HostRegistration::OnComplete((uint64_t)this, -12);
  uint64_t v2 = this + 9;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  otbr::Mdns::Publisher::Registration::~Registration((otbr::Mdns::Publisher::Registration *)this);
}

{
  uint64_t vars8;

  otbr::Mdns::Publisher::HostRegistration::~HostRegistration(this);

  operator delete();
}

uint64_t otbr::Mdns::PublisherMDnsSd::FindServiceRegistration(otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *const *a2)
{
  uint64_t v2 = (char *)*((void *)this + 2);
  dnssd_sock_t v6 = v2;
  BOOL v3 = (char *)this + 24;
  if (v2 == (char *)this + 24) {
    return 0;
  }
  while (1)
  {
    uint64_t result = *((void *)v2 + 7);
    if (*(_DNSServiceRef_t *const *)(result + 176) == *a2) {
      break;
    }
    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v6);
    uint64_t v2 = v6;
    if (v6 == v3) {
      return 0;
    }
  }
  return result;
}

uint64_t otbr::Mdns::PublisherMDnsSd::FindHostRegistration(otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *const *a2, _DNSRecordRef_t **a3)
{
  BOOL v3 = (char *)*((void *)this + 5);
  unint64_t v9 = v3;
  dnssd_sock_t v4 = (char *)this + 48;
  if (v3 == (char *)this + 48) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = *((void *)v3 + 7);
    if (*(_DNSServiceRef_t *const *)(v7 + 96) == *a2)
    {
      if (std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__count_unique<_DNSRecordRef_t *>(v7 + 104, (unint64_t *)a3))
      {
        break;
      }
    }
    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v9);
    BOOL v3 = v9;
    if (v9 == v4) {
      return 0;
    }
  }
  return *((void *)v3 + 7);
}

void otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult(otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, otbr::Mdns *a3, const char *a4, const char *a5, const char *a6, otbr::Mdns::PublisherMDnsSd *a7, uint64_t a8)
{
  char v12 = (char)a2;
  otbrLog(7u, "MDNS", "%s:%d: Received Callback", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, (char)"static void otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult(DNSServiceRef, const DNSServiceFlags, DNSServiceErrorType, const char *, const char *, const char *, void *)");

  otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult(a7, this, v12, a3, a4, a5, v14);
}

void otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult(otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, char a3, otbr::Mdns *a4, const char *a5, const char *a6, const char *a7)
{
  uint64_t v28 = a2;
  int v11 = otbr::Mdns::DNSErrorToOtbrError((uint64_t)a4);
  ServiceRegistration  = (std::string *)otbr::Mdns::PublisherMDnsSd::FindServiceRegistration(this, &v28);
  std::string::assign(ServiceRegistration + 3, a5);
  otbrLog(6u, "MDNS", "Received reply for service %s.%s, serviceRef  = %p", v13, v14, v15, v16, v17, (char)a5);
  if (ServiceRegistration)
  {
    if (a4 || (a3 & 2) == 0)
    {
      otbr::Mdns::DNSErrorToString(a4);
      otbrLog(3u, "MDNS", "Failed to register service %s.%s: %s", v23, v24, v25, v26, v27, (char)a5);
      otbr::Mdns::Publisher::RemoveServiceRegistration((uint64_t)this + 8, (uint64_t)&ServiceRegistration[3], (const std::string::value_type *)&ServiceRegistration[4], v11);
    }
    else
    {
      otbrLog(6u, "MDNS", "Successfully registered service %s.%s", v18, v19, v20, v21, v22, (char)a5);
      otbr::Mdns::Publisher::ServiceRegistration::Complete(ServiceRegistration, 0);
    }
  }
}

uint64_t otbr::Mdns::PublisherMDnsSd::PublishServiceImpl(_DWORD *a1, uint64_t a2, uint64_t a3, std::string *a4, std::vector<std::string> *__x, unsigned int a6, std::string **a7, void *a8)
{
  txtRecord  = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  std::vector<std::string>::vector(&v49, __x);
  otbr::Mdns::Publisher::SortSubTypeList((uint64_t)&v49, (uint64_t)&__xa);
  *(void *)&long long v54 = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::vector(&v47, a7);
  otbr::Mdns::Publisher::SortTxtList((uint64_t)&v47, (uint64_t)v48);
  *(void *)&long long v54 = &v47;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  std::vector<std::string>::vector(&v45, &__xa);
  otbr::Mdns::PublisherMDnsSd::MakeRegType(a4, (uint64_t)&v45, &v46);
  *(void *)&long long v54 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  uint64_t v43 = 0;
  sdRef  = 0;
  __p[0]  = 0;
  __p[1]  = 0;
  if (a1[86] == 1)
  {
    uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    if (v15)
    {
      otbr::Mdns::Publisher::MakeFullHostName((const void **)a2, (uint64_t)&v54);
      std::string::operator=[abi:ne180100]((uint64_t)__p, &v54);
      if (v55 < 0) {
        operator delete((void *)v54);
      }
      if (v43 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    otbr::Mdns::Publisher::HandleDuplicateServiceRegistration((uint64_t)(a1 + 2), (unsigned __int8 *)a2, a3, (std::string::value_type *)a4, (unsigned __int8 **)&__xa, a6, v48, a8, (uint64_t)&v54);
    otbr::OnceCallback<void ()(otbrError)>::operator=(a8, &v54);
    std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](&v54);
    if (!a8[3])
    {
      uint64_t v17 = 0;
      goto LABEL_33;
    }
    uint64_t v17 = (uint64_t)otbr::Mdns::Publisher::EncodeTxtData((char *)a7, (uint64_t *)&txtRecord);
    if (!v17)
    {
      if (*(char *)(a3 + 23) >= 0) {
        LOBYTE(v2ot::Tlv::SetType(this, 3) = a3;
      }
      else {
        uint64_t v23 = *(void *)a3;
      }
      otbrLog(6u, "MDNS", "PublisherMDnsSd::PublishService: MDNS register current service name:%s port:%d type:%s hostname:%s", v18, v19, v20, v21, v22, v23);
      if (*(char *)(a3 + 23) >= 0) {
        LOBYTE(v2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = a3;
      }
      else {
        uint64_t v29 = *(void *)a3;
      }
      otbrLog(6u, "MDNS", "Registering new service %s.%s.local, serviceRef  = %p", v24, v25, v26, v27, v28, v29);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v46;
      }
      else {
        uint64_t v30 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      uint64_t v31 = DNSServiceRegister(&sdRef, 8u, 0, 0, (const char *)v30, 0, (const char *)v16, __rev16(a6), v52 - (_WORD)txtRecord, txtRecord, (DNSServiceRegisterReply)otbr::Mdns::PublisherMDnsSd::HandleServiceRegisterResult, a1);
      uint64_t v32 = v31;
      if (!v31) {
        operator new();
      }
      int v33 = *(char *)(a3 + 23);
      uint64_t v34 = *(void *)a3;
      otbr::Mdns::DNSErrorToString((otbr::Mdns *)v31);
      uint64_t v17 = otbr::Mdns::DNSErrorToOtbrError(v32);
      if (v33 >= 0) {
        char v40 = a3;
      }
      else {
        char v40 = v34;
      }
      otbrLog(3u, "MDNS", "Failed to publish service %s.%s for mdnssd error: %s!", v35, v36, v37, v38, v39, v40);
    }
  }
  else
  {
    uint64_t v17 = 4294967283;
  }
  if (sdRef)
  {
    DNSServiceRefDeallocate(sdRef);
    sdRef  = 0;
  }
  otbr::OnceCallback<void ()(otbrError)>::operator()(a8);
LABEL_33:
  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v54 = v48;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &__xa;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &txtRecord;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  return v17;
}

void sub_1003B03FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v34 = *(void *)(v32 - 120);
  *(void *)(v32 - 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  if (v34) {
    otbr::Mdns::PublisherMDnsSd::PublishServiceImpl(v34);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  *(void *)(v32 - 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = &a32;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 120));
  *(void *)(v32 - 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v32 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 120));
  *(void *)(v32 - 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v32 - 144;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 120));
  _Unwind_Resume(a1);
}

void otbr::Mdns::PublisherMDnsSd::MakeRegType(std::string *__str@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::basic_string(a3, __str);
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void>>(*(void *)a2, *(const void ***)(a2 + 8), (uint64_t)__p);
  unint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)a2 != v6)
  {
    do
    {
      std::operator+<char>();
      std::string::append[abi:ne180100](a3, (const std::string::value_type *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
}

void sub_1003B0580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *otbr::OnceCallback<void ()(otbrError)>::operator=(void *a1, void *a2)
{
  std::function<void ()(otbrError)>::operator=(a1, (uint64_t)a2);
  std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](a2);
  return a1;
}

void *otbr::OnceCallback<void ()(otbrError)>::operator()(void *a1)
{
  otbr::OnceCallback<void ()(otbrError)>::OnceCallback((uint64_t)v2, a1);
  std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100]((uint64_t)v2);
  return std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](v2);
}

void sub_1003B0668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::PublishServiceImpl(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, std::vector<std::string> *a5, unsigned int a6, std::string **a7, void *a8)
{
  return otbr::Mdns::PublisherMDnsSd::PublishServiceImpl((_DWORD *)(a1 - 8), a2, a3, a4, a5, a6, a7, a8);
}

void *otbr::Mdns::PublisherMDnsSd::UnpublishService(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  if (v12)
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    if (v13) {
      otbrLog(6u, "MDNS", "PublisherMDnsSd::UnpublishService mState:%d aName:%s aType:%s", (uint64_t)a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 344));
    }
  }
  if (*(_DWORD *)(a1 + 344) == 1) {
    otbr::Mdns::Publisher::RemoveServiceRegistration(a1 + 8, a2, (const std::string::value_type *)a3, -12);
  }

  return otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
}

void *non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnpublishService(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return otbr::Mdns::PublisherMDnsSd::UnpublishService(a1 - 8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otbr::Mdns::PublisherMDnsSd::PublishHostImpl(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v24[0]  = 0;
  v24[1]  = 0;
  uint64_t v25 = 0;
  if (*(_DWORD *)(a1 + 344) != 1)
  {
    uint64_t v8 = 4294967283;
LABEL_10:
    otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
    goto LABEL_11;
  }
  otbr::Mdns::Publisher::MakeFullHostName((const void **)a2, (uint64_t)__p);
  std::string::operator=[abi:ne180100]((uint64_t)v24, (long long *)__p);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  otbr::Mdns::Publisher::HandleDuplicateHostRegistration(a1 + 8, a2, (uint64_t)a3, a4, (uint64_t)__p);
  otbr::OnceCallback<void ()(otbrError)>::operator=(a4, __p);
  std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](__p);
  if (!a4[3])
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  if (*a3 != a3[1])
  {
    if (*(void *)(a1 + 336)) {
      goto LABEL_7;
    }
    Connection  = DNSServiceCreateConnection((DNSServiceRef *)(a1 + 336));
    if (!Connection)
    {
      otbrLog(7u, "MDNS", "Created new DNSServiceRef for hosts: %p", v10, v11, v12, v13, v14, *(void *)(a1 + 336));
LABEL_7:
      operator new();
    }
    int v16 = *(char *)(a2 + 23);
    uint64_t v17 = *(const void **)a2;
    otbr::Mdns::DNSErrorToString((otbr::Mdns *)Connection);
    uint64_t v8 = otbr::Mdns::DNSErrorToOtbrError(Connection);
    if (v16 >= 0) {
      char v23 = a2;
    }
    else {
      char v23 = (char)v17;
    }
    otbrLog(3u, "MDNS", "Failed to publish/update host %s for mdnssd error: %s!", v18, v19, v20, v21, v22, v23);
    goto LABEL_10;
  }
  otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
  uint64_t v8 = 0;
LABEL_11:
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  return v8;
}

void sub_1003B0A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a19) {
    otbr::Mdns::PublisherMDnsSd::PublishServiceImpl(a19);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::Mdns::PublisherMDnsSd::HandleRegisterHostResult(otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, _DNSRecordRef_t *a3, otbr::Mdns *a4, otbr::Mdns::PublisherMDnsSd *a5, void *a6)
{
}

uint64_t *std::map<_DNSRecordRef_t *,otbr::Ip6Address>::operator[](uint64_t **a1, uint64_t *a2)
{
  BOOL v3 = a2;
  return std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__emplace_unique_key_args<_DNSRecordRef_t *,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>(a1, (unint64_t *)a2, (uint64_t)&std::piecewise_construct, &v3)+ 5;
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::PublishHostImpl(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return otbr::Mdns::PublisherMDnsSd::PublishHostImpl(a1 - 8, a2, a3, a4);
}

void *otbr::Mdns::PublisherMDnsSd::UnpublishHost(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a1 + 344) == 1) {
    otbr::Mdns::Publisher::RemoveHostRegistration(a1 + 8, a2, -12);
  }

  return otbr::OnceCallback<void ()(otbrError)>::operator()(a3);
}

void *non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnpublishHost(uint64_t a1, uint64_t a2, void *a3)
{
  return otbr::Mdns::PublisherMDnsSd::UnpublishHost(a1 - 8, a2, a3);
}

void otbr::Mdns::PublisherMDnsSd::HandleRegisterHostResult(otbr::Mdns::PublisherMDnsSd *this, _DNSServiceRef_t *a2, _DNSRecordRef_t *a3, unsigned int a4, otbr::Mdns *a5)
{
  char v40 = a3;
  char v41 = a2;
  int v7 = otbr::Mdns::DNSErrorToOtbrError((uint64_t)a5);
  HostRegistration  = otbr::Mdns::PublisherMDnsSd::FindHostRegistration(this, &v41, &v40);
  v38[0]  = 0;
  v38[1]  = 0;
  uint64_t v39 = 0;
  if (HostRegistration)
  {
    uint64_t v9 = HostRegistration;
    uint64_t v10 = HostRegistration + 48;
    otbr::Mdns::Publisher::MakeFullHostName((const void **)(HostRegistration + 48), (uint64_t)__p);
    std::string::operator=[abi:ne180100]((uint64_t)v38, (long long *)__p);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    int v11 = SHIBYTE(v39);
    char v12 = (char)v38[0];
    otbr::Mdns::DNSErrorToString(a5);
    uint64_t v18 = v38;
    if (v11 < 0) {
      LOBYTE(v18)  = v12;
    }
    otbrLog(6u, "MDNS", "Received reply for host %s: %s", v13, v14, v15, v16, v17, (char)v18);
    if (v7)
    {
      int v24 = SHIBYTE(v39);
      char v25 = (char)v38[0];
      otbr::Mdns::DNSErrorToString(a5);
      uint64_t v31 = v38;
      if (v24 < 0) {
        LOBYTE(v3ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v25;
      }
      otbrLog(4u, "MDNS", "Failed to register host %s for mdnssd error: %s", v26, v27, v28, v29, v30, (char)v31);
      otbr::Mdns::Publisher::RemoveHostRegistration((uint64_t)this + 8, v10, v7);
    }
    else
    {
      int v32 = *(_DWORD *)(v9 + 128);
      BOOL v33 = v32 != 0;
      int v34 = v32 - 1;
      if (!v33)
      {
        __break(0x5515u);
        return;
      }
      *(_DWORD *)(v9 + 128)  = v34;
      if (!v34)
      {
        uint64_t v35 = v38;
        if (v39 < 0) {
          LOBYTE(v++*(unsigned char *)(this + 35) = v38[0];
        }
        otbrLog(6u, "MDNS", "Successfully registered host %s", v19, v20, v21, v22, v23, (char)v35);
        otbr::Mdns::Publisher::HostRegistration::Complete((void *)v9, 0);
      }
    }
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(v38[0]);
  }
}

void sub_1003B0D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::PublisherMDnsSd::SubscribeService(uint64_t result)
{
  if (*(_DWORD *)(result + 344) == 1) {
    MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&,std::string const&>();
  }
  return result;
}

void sub_1003B0E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18 = (uint64_t)__p;
  __p  = 0;
  if (v18) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]((uint64_t)&__p, v18);
  }
  _Unwind_Resume(exception_object);
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&,std::string const&>()
{
}

void sub_1003B0F4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operator delete();
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Browse(DNSServiceRef *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*this) {
    otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Browse();
  }
  uint64_t v9 = (const char *)(this + 2);
  LOBYTE(v1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = (_BYTE)this + 16;
  if (*((char *)this + 39) < 0) {
    uint64_t v10 = *(const char **)v9;
  }
  otbrLog(6u, "MDNS", "DNSServiceBrowse %s", a4, a5, a6, a7, a8, (char)v10);
  if (*((char *)this + 39) < 0) {
    uint64_t v9 = *(const char **)v9;
  }

  return DNSServiceBrowse(this, 0, 0, v9, 0, (DNSServiceBrowseReply)otbr::Mdns::PublisherMDnsSd::ServiceSubscription::HandleBrowseResult, this);
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Resolve(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  dnssd_sock_t v4 = *(uint64_t **)(result + 88);
  unint64_t v5 = *(uint64_t **)(result + 96);
  if (v4 == v5) {
LABEL_37:
  }
    MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution,otbr::Mdns::PublisherMDnsSd::ServiceSubscription &,std::string const&,std::string const&,std::string const&,unsigned int &>();
  int v6 = (char)a3[23];
  BOOL v7 = v6 < 0;
  if (v6 < 0) {
    uint64_t v8 = *(unsigned __int8 **)a3;
  }
  else {
    uint64_t v8 = a3;
  }
  unsigned __int8 v9 = a4[23];
  if (v7) {
    uint64_t v10 = *((void *)a3 + 1);
  }
  else {
    uint64_t v10 = a3[23];
  }
  if ((v9 & 0x80u) != 0) {
    int v11 = *(unsigned __int8 **)a4;
  }
  else {
    int v11 = a4;
  }
  __s2  = v11;
  if ((v9 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a4 + 1);
  }
  else {
    uint64_t v12 = a4[23];
  }
  while (1)
  {
    uint64_t v13 = *v4;
    if (*(char *)(*v4 + 39) < 0) {
      size_t v14 = *(void *)(v13 + 24);
    }
    else {
      size_t v14 = *(unsigned __int8 *)(*v4 + 39);
    }
    if (v14 != v10) {
      goto LABEL_36;
    }
    uint64_t v15 = (const void **)(v13 + 16);
    if ((*(unsigned char *)(*v4 + 39) & 0x80) != 0)
    {
      uint64_t result = memcmp(*v15, v8, v14);
      if (result) {
        goto LABEL_36;
      }
    }
    else if (v14)
    {
      uint64_t v16 = v8;
      while (*(unsigned __int8 *)v15 == *v16)
      {
        uint64_t v15 = (const void **)((char *)v15 + 1);
        ++v16;
        if (!--v14) {
          goto LABEL_25;
        }
      }
      goto LABEL_36;
    }
LABEL_25:
    size_t v17 = *(char *)(v13 + 63) < 0 ? *(void *)(v13 + 48) : *(unsigned __int8 *)(v13 + 63);
    if (v17 == v12)
    {
      uint64_t v18 = (const void **)(v13 + 40);
      if ((*(unsigned char *)(v13 + 63) & 0x80) == 0)
      {
        if (!v17) {
          return result;
        }
        for (unsigned __int16 i = __s2; *(unsigned __int8 *)v18 == *i; ++i)
        {
          uint64_t v18 = (const void **)((char *)v18 + 1);
          if (!--v17) {
            return result;
          }
        }
        goto LABEL_36;
      }
      uint64_t result = memcmp(*v18, __s2, v17);
      if (!result) {
        return result;
      }
    }
LABEL_36:
    if (++v4 == v5) {
      goto LABEL_37;
    }
  }
}

void sub_1003B128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v12 = a11;
  a11  = 0;
  if (v12) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::operator()[abi:ne180100]((int)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::SubscribeService(uint64_t a1)
{
  return otbr::Mdns::PublisherMDnsSd::SubscribeService(a1 - 8);
}

void otbr::Mdns::PublisherMDnsSd::UnsubscribeService(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*(_DWORD *)(a1 + 344) == 1)
  {
    unint64_t v5 = *(uint64_t **)(a1 + 384);
    int v6 = *(uint64_t **)(a1 + 392);
    if (v5 != v6)
    {
      int v7 = (char)a2[23];
      if (v7 < 0) {
        uint64_t v8 = *(unsigned __int8 **)a2;
      }
      else {
        uint64_t v8 = a2;
      }
      int v9 = (char)a3[23];
      if (v7 < 0) {
        uint64_t v10 = *((void *)a2 + 1);
      }
      else {
        uint64_t v10 = a2[23];
      }
      if (v9 < 0) {
        int v11 = *(unsigned __int8 **)a3;
      }
      else {
        int v11 = a3;
      }
      if (v9 < 0) {
        uint64_t v12 = *((void *)a3 + 1);
      }
      else {
        uint64_t v12 = a3[23];
      }
      while (1)
      {
        uint64_t v13 = *v5;
        if (*(char *)(*v5 + 39) < 0) {
          size_t v14 = *(void *)(v13 + 24);
        }
        else {
          size_t v14 = *(unsigned __int8 *)(*v5 + 39);
        }
        if (v14 == v10)
        {
          uint64_t v15 = (const void **)(v13 + 16);
          if ((*(unsigned char *)(*v5 + 39) & 0x80) != 0)
          {
            if (!memcmp(*v15, v8, v14))
            {
LABEL_26:
              if (*(char *)(v13 + 63) < 0) {
                size_t v17 = *(void *)(v13 + 48);
              }
              else {
                size_t v17 = *(unsigned __int8 *)(v13 + 63);
              }
              if (v17 == v12)
              {
                uint64_t v18 = (const void **)(v13 + 40);
                if ((*(unsigned char *)(v13 + 63) & 0x80) != 0)
                {
                  if (!memcmp(*v18, v11, v17)) {
                    break;
                  }
                }
                else
                {
                  if (!v17) {
                    break;
                  }
                  uint64_t v19 = v11;
                  while (*(unsigned __int8 *)v18 == *v19)
                  {
                    uint64_t v18 = (const void **)((char *)v18 + 1);
                    ++v19;
                    if (!--v17) {
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (!v14) {
              goto LABEL_26;
            }
            uint64_t v16 = v8;
            while (*(unsigned __int8 *)v15 == *v16)
            {
              uint64_t v15 = (const void **)((char *)v15 + 1);
              ++v16;
              if (!--v14) {
                goto LABEL_26;
              }
            }
          }
        }
        if (++v5 == v6) {
          goto LABEL_38;
        }
      }
    }
LABEL_39:
    if (v5 == v6) {
LABEL_38:
    }
      otbr::Mdns::PublisherMDnsSd::UnsubscribeService();
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *>((uint64_t)&v27, v5 + 1, v6, v5);
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__base_destruct_at_end[abi:ne180100](a1 + 384, v20);
    if ((a3[23] & 0x80u) == 0) {
      LOBYTE(v26)  = (_BYTE)a3;
    }
    else {
      uint64_t v26 = *(unsigned __int8 **)a3;
    }
    otbrLog(6u, "MDNS", "Unsubscribe service %s.%s (left %zu)", v21, v22, v23, v24, v25, (char)v26);
  }
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnsubscribeService(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
}

void otbr::Mdns::PublisherMDnsSd::OnServiceResolveFailedImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((char *)a3 + 23) >= 0) {
    LOBYTE(v8)  = (_BYTE)a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  otbrLog(4u, "MDNS", "Resolve service %s.%s failed: code=%d", a4, a5, a6, a7, a8, v8);
}

void otbr::Mdns::PublisherMDnsSd::OnHostResolveFailedImpl(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((char *)a2 + 23) >= 0) {
    LOBYTE(v8)  = (_BYTE)a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  otbrLog(4u, "MDNS", "Resolve host %s failed: code=%d", a4, a5, a6, a7, a8, v8);
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::OnHostResolveFailedImpl(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((char *)a2 + 23) >= 0) {
    LOBYTE(v8)  = (_BYTE)a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  otbrLog(4u, "MDNS", "Resolve host %s failed: code=%d", a4, a5, a6, a7, a8, v8);
}

uint64_t otbr::Mdns::PublisherMDnsSd::DnsErrorToOtbrError(otbr::Mdns::PublisherMDnsSd *this, otbr::Mdns *a2)
{
  return otbr::Mdns::DNSErrorToOtbrError((uint64_t)a2);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::DnsErrorToOtbrError(otbr::Mdns::PublisherMDnsSd *this, otbr::Mdns *a2)
{
  return otbr::Mdns::DNSErrorToOtbrError((uint64_t)a2);
}

uint64_t otbr::Mdns::PublisherMDnsSd::SubscribeHost(uint64_t result)
{
  if (*(_DWORD *)(result + 344) == 1) {
    MakeUnique<otbr::Mdns::PublisherMDnsSd::HostSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&>();
  }
  return result;
}

void sub_1003B168C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12  = 0;
  if (v13) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::HostSubscription,otbr::Mdns::PublisherMDnsSd&,std::string const&>()
{
}

void sub_1003B1730()
{
}

void otbr::Mdns::PublisherMDnsSd::HostSubscription::Resolve(otbr::Mdns::PublisherMDnsSd::HostSubscription *this)
{
  uint64_t v2 = (std::string *)((char *)this + 16);
  std::string::basic_string(&v11, (const std::string *)((char *)this + 16));
  if (*(void *)this) {
    __assert_rtn("Resolve", "mdns_mdnssd.cpp", 1270, "mServiceRef == nullptr");
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *std::map<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]((uint64_t **)(*((void *)this + 1) + 168), vot::NetworkData::NetworkDataTlv::SetType(this, 2) = rep;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = &v11;
  }
  else {
    LOBYTE(vot::NetworkDiagnostic::Tlv::SetType(this, 9) = v11.__r_.__value_.__s.__data_[0];
  }
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo %s inf %d", v4, v5, v6, v7, v8, (char)v9);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v11;
  }
  else {
    uint64_t v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  DNSServiceGetAddrInfo((DNSServiceRef *)this, 0, 0, 3u, (const char *)v10, (DNSServiceGetAddrInfoReply)otbr::Mdns::PublisherMDnsSd::HostSubscription::HandleResolveResult, this);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1003B1854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::SubscribeHost(uint64_t a1)
{
  return otbr::Mdns::PublisherMDnsSd::SubscribeHost(a1 - 8);
}

void otbr::Mdns::PublisherMDnsSd::UnsubscribeHost(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 344) == 1)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 408);
    uint64_t v5 = *(uint64_t **)(a1 + 416);
    if (v4 != v5)
    {
      int v6 = (char)a2[23];
      if (v6 < 0) {
        uint64_t v7 = *(unsigned __int8 **)a2;
      }
      else {
        uint64_t v7 = a2;
      }
      if (v6 < 0) {
        uint64_t v8 = *((void *)a2 + 1);
      }
      else {
        uint64_t v8 = a2[23];
      }
      do
      {
        uint64_t v9 = *v4;
        if (*(char *)(*v4 + 39) < 0) {
          size_t v10 = *(void *)(v9 + 24);
        }
        else {
          size_t v10 = *(unsigned __int8 *)(*v4 + 39);
        }
        if (v10 == v8)
        {
          std::string v11 = (const void **)(v9 + 16);
          if ((*(unsigned char *)(*v4 + 39) & 0x80) != 0)
          {
            if (!memcmp(*v11, v7, v10)) {
              goto LABEL_22;
            }
          }
          else
          {
            if (!v10) {
              goto LABEL_22;
            }
            uint64_t v12 = v7;
            while (*(unsigned __int8 *)v11 == *v12)
            {
              std::string v11 = (const void **)((char *)v11 + 1);
              ++v12;
              if (!--v10) {
                goto LABEL_22;
              }
            }
          }
        }
        ++v4;
      }
      while (v4 != v5);
LABEL_21:
      otbr::Mdns::PublisherMDnsSd::UnsubscribeHost();
    }
LABEL_22:
    if (v4 == v5) {
      goto LABEL_21;
    }
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *>((uint64_t)&v20, v4 + 1, v5, v4);
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__base_destruct_at_end[abi:ne180100](a1 + 408, v13);
    if ((a2[23] & 0x80u) == 0) {
      LOBYTE(v1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = (_BYTE)a2;
    }
    else {
      uint64_t v19 = *(unsigned __int8 **)a2;
    }
    otbrLog(6u, "MDNS", "Unsubscribe host %s (remaining %d)", v14, v15, v16, v17, v18, (char)v19);
  }
}

void non-virtual thunk to'otbr::Mdns::PublisherMDnsSd::UnsubscribeHost(uint64_t a1, unsigned __int8 *a2)
{
}

void otbr::Mdns::Publisher::Create()
{
}

void sub_1003B1A5C(uint64_t a1, ...)
{
  va_start(va, a1);
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::~__value_func[abi:ne180100]((uint64_t *)va);
  operator delete();
}

uint64_t otbr::Mdns::Publisher::Destroy(uint64_t this, otbr::Mdns::Publisher *a2)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)(this - 8) + 8))();
  }
  return this;
}

void otbr::Mdns::PublisherMDnsSd::ServiceRef::Release(_DNSServiceRef_t **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *this  = 0;
  }
}

void otbr::Mdns::PublisherMDnsSd::ServiceRef::DeallocateServiceRef(_DNSServiceRef_t **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *this  = 0;
  }
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::HandleBrowseResult(otbr::Mdns::PublisherMDnsSd::ServiceSubscription *this, _DNSServiceRef_t *a2, uint64_t a3, uint64_t a4, char *a5, char *a6, char *a7, otbr::Mdns::PublisherMDnsSd::ServiceSubscription *a8, void *a9)
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::HandleBrowseResult(otbr::Mdns::PublisherMDnsSd::ServiceSubscription *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, char *a6, char *a7, char *a8, char a9)
{
  uint64_t v16 = "add";
  if ((a3 & 2) == 0) {
    uint64_t v16 = "remove";
  }
  otbrLog(6u, "MDNS", "DNSServiceBrowse reply: %s %s.%s inf %u, flags=%u, error=%d", a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, (char)v16);
  if (a5)
  {
    otbr::Mdns::Publisher::OnServiceResolveFailed(*((void *)this + 1) + 8, (const std::string *)((char *)this + 16), (const std::string *)((char *)this + 40), a5);
    if (*(void *)this)
    {
      DNSServiceRefDeallocate(*(DNSServiceRef *)this);
      *(void *)this  = 0;
    }
    return;
  }
  if ((a3 & 2) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, a6);
    std::string::basic_string[abi:ne180100]<0>(v29, a7);
    std::string::basic_string[abi:ne180100]<0>(&__p, a8);
    otbr::Mdns::PublisherMDnsSd::ServiceSubscription::Resolve((uint64_t)this, a4, (unsigned __int8 *)v31, (unsigned __int8 *)v29);
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    goto LABEL_13;
  }
  if ((a3 & 1) == 0)
  {
    uint64_t v22 = *((void *)this + 1) + 8;
    std::string::basic_string[abi:ne180100]<0>(v31, a6);
    otbr::Mdns::Publisher::OnServiceRemoved(v22, a4, (std::string *)((char *)this + 16), (uint64_t)v31, v23, v24, v25, v26);
LABEL_13:
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    return;
  }

  otbrLog(6u, "MDNS", "DNSServiceBrowse reply: with kDNSServiceFlagsMoreComing flag set", v17, v18, v19, v20, v21, a9);
}

void sub_1003B1CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 65) < 0) {
    operator delete(*(void **)(v27 - 88));
  }
  _Unwind_Resume(exception_object);
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution,otbr::Mdns::PublisherMDnsSd::ServiceSubscription &,std::string const&,std::string const&,std::string const&,unsigned int &>()
{
}

void sub_1003B1E18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  operator delete();
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::Resolve(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this)
{
  if (*(void *)this) {
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::Resolve();
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  BOOL v3 = (uint64_t **)(*(void *)(*((void *)this + 1) + 8) + 144);
  uint64_t v4 = (char *)this + 16;
  uint64_t v5 = (char *)this + 40;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v14, (const std::string *)((char *)this + 16), (const std::string *)((char *)this + 40));
  *std::map<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[](v3, (long long *)&v1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = rep;
  if (v16 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  LOBYTE(v1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = (_BYTE)this + 16;
  if (*((char *)this + 39) < 0) {
    std::string v11 = *(const char **)v4;
  }
  otbrLog(6u, "MDNS", "DNSServiceResolve %s %s inf %u", v6, v7, v8, v9, v10, (char)v11);
  if (*((char *)this + 39) < 0) {
    uint64_t v4 = *(const char **)v4;
  }
  if (*((char *)this + 63) < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  uint64_t v12 = (char *)this + 64;
  if (*((char *)this + 87) < 0) {
    uint64_t v12 = *(const char **)v12;
  }
  return DNSServiceResolve((DNSServiceRef *)this, 0x10000u, *((_DWORD *)this + 22), v4, v5, v12, (DNSServiceResolveReply)otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleResolveResult, this);
}

void sub_1003B1FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void MakeUnique<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery,otbr::Mdns::PublisherMDnsSd::ServiceSubscription &,std::string const&,std::string const&,std::string const&,unsigned int &>()
{
}

void sub_1003B209C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  operator delete();
}

void otbr::Mdns::PublisherMDnsSd::ServiceSubscription::RemoveInstanceResolution(otbr::Mdns::PublisherMDnsSd::ServiceSubscription *this, void **a2)
{
  BOOL v3 = (void ***)*((void *)this + 8);
  uint64_t v2 = (void ***)*((void *)this + 9);
  uint64_t v4 = (char *)this + 64;
  if (v3 != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2) {
        goto LABEL_4;
      }
    }
  }
  if (v3 == v2) {
LABEL_4:
  }
    otbr::Mdns::PublisherMDnsSd::ServiceSubscription::RemoveInstanceResolution();
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *>((int)&v6, v3 + 1, v2, v3);
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v4, v5);
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleQueryrecordResult(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, unsigned __int16 a7, size_t __n, size_t __na, void *__src, otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *a11, void *a12)
{
  __srca  = (void *)__na;
  LOWORD(__na)  = __n;
  otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleQueryrecordResult(a11, a2, (char)a2, a3, a4, a5, (uint64_t)a6, 0, __na, __srca, a11);
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleQueryrecordResult(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, size_t __n, void *__src, unsigned int a11)
{
  if (!a5)
  {
    if ((a3 & 2) != 0)
    {
      if (a7 == 33 && (unsigned __int16)__n - 1 <= 0xFD)
      {
        memcpy(__dst, __src, (unsigned __int16)__n);
        *((_WORD *)this + 88)  = __rev16(v28);
        otbrLog(6u, "MDNS", "%s: Got an ADD interface for %s at port=%u", v19, v20, v21, v22, v23, (char)"HandleQueryrecordResult");
      }
      uint64_t v24 = *((void *)this + 1);
      if (v24)
      {
        uint64_t v25 = *(void *)(v24 + 8) + 8;
        otbr::Mdns::Publisher::OnServiceResolved(v25, (std::string *)(v24 + 16), (unsigned char *)this + 96, a4, a5, (uint64_t)a6, a7, a8);
      }
    }
    else
    {
      int v12 = a4;
      otbrLog(6u, "MDNS", "%s: Got a RMV interface for %s", a4, a5, (uint64_t)a6, a7, a8, (char)"HandleQueryrecordResult");
      uint64_t v13 = *((void *)this + 1);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 8);
        std::string::basic_string[abi:ne180100]<0>(&__p, "_trel._udp");
        otbr::Mdns::Publisher::OnServiceRemoved(v14 + 8, v12, &__p, (uint64_t)this + 104, v15, v16, v17, v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_1003B230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[](uint64_t **a1, long long *a2)
{
  BOOL v3 = a2;
  return std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v3)+ 10;
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleResolveResult(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, unsigned __int16 a8, char *a9, unsigned __int8 *__src, void *a11)
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleResolveResult(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, char *a6, const char *a7, uint64_t a8, unsigned __int16 a9, char *__src)
{
  unsigned int v10 = a8;
  uint32_t v14 = a4;
  memset(&__str, 0, sizeof(__str));
  v32[0]  = 0;
  v32[1]  = 0;
  uint64_t v33 = 0;
  v30[0]  = 0;
  v30[1]  = 0;
  uint64_t v31 = 0;
  otbrLog(6u, "MDNS", "DNSServiceResolve reply: %s host %s:%d, TXT=%dB inf %u, flags=%u", a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (char)a6);
  if (a5)
  {
    AddrInfo  = 0;
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a6);
  int v17 = SplitFullServiceInstanceName(&__p, (uint64_t)&__str, (uint64_t)v32, (uint64_t)v30);
  AddrInfo  = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!AddrInfo) {
      goto LABEL_7;
    }
LABEL_10:
    otbrLog(4u, "MDNS", "Failed to resolve service instance %s", v18, v19, v20, v21, v22, (char)a6);
    goto LABEL_11;
  }
  if (v17) {
    goto LABEL_10;
  }
LABEL_7:
  *((_DWORD *)this + 25)  = v14;
  std::string::operator=((std::string *)((char *)this + 104), &__str);
  std::string::assign((std::string *)((char *)this + 128), a7);
  *((_WORD *)this + 88)  = __rev16(v10);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t *)this + 23, __src, (uint64_t)&__src[a9], a9);
  *(_DWORD *)((char *)this + 178)  = 0;
  if (*(void *)this)
  {
    DNSServiceRefDeallocate(*(DNSServiceRef *)this);
    *(void *)this  = 0;
  }
  AddrInfo  = otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::GetAddrInfo((DNSServiceRef *)this, v14, v23, v24, v25, v26, v27, v28);
  if (AddrInfo) {
    goto LABEL_10;
  }
LABEL_11:
  if (AddrInfo | a5)
  {
    otbr::Mdns::Publisher::OnServiceResolveFailed(*(void *)(*((void *)this + 1) + 8) + 8, (const std::string *)(*((void *)this + 1) + 16), (const std::string *)((char *)this + 16), a5);
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::FinishResolution(this);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1003B2550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::GetAddrInfo(DNSServiceRef *this, uint32_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*this) {
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::GetAddrInfo();
  }
  unsigned int v10 = (const char *)(this + 16);
  LOBYTE(v1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = (_BYTE)this + 0x80;
  if (*((char *)this + 151) < 0) {
    std::string v11 = *(const char **)v10;
  }
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo %s inf %d", a4, a5, a6, a7, a8, (char)v11);
  if (*((char *)this + 151) < 0) {
    unsigned int v10 = *(const char **)v10;
  }
  uint64_t result = DNSServiceGetAddrInfo(this, 0, a2, 3u, v10, (DNSServiceGetAddrInfoReply)otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleGetAddrInfoResult, this);
  if (result)
  {
    char v13 = otbr::Mdns::DNSErrorToString((otbr::Mdns *)result);
    otbrLog(4u, "MDNS", "DNSServiceGetAddrInfo failed: %s", v14, v15, v16, v17, v18, v13);
    return 4294967293;
  }
  return result;
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::FinishResolution(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this)
{
  uint64_t v2 = *((void *)this + 1);
  std::string::basic_string(&v21, (const std::string *)(v2 + 16));
  otbr::Mdns::Publisher::DiscoveredInstanceInfo::DiscoveredInstanceInfo((otbr::Mdns::Publisher::DiscoveredInstanceInfo *)v14, (otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *)((char *)this + 96));
  otbrLog(6u, "MDNS", "ServiceInstanceResolution orig inf %u and inf %d", v3, v4, v5, v6, v7, *((_DWORD *)this + 25));
  if (v2)
  {
    uint64_t v13 = *(void *)(v2 + 8);
    if (v13) {
      otbr::Mdns::Publisher::OnServiceResolved(v13 + 8, &v21, v14, v8, v9, v10, v11, v12);
    }
  }
  uint64_t v22 = (void **)&v20;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)&v19;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1003B2750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(char *)(v12 - 25) < 0) {
    operator delete(*(void **)(v12 - 48));
  }
  _Unwind_Resume(exception_object);
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleGetAddrInfoResult(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, unsigned int a3, uint64_t a4, char *a5, const sockaddr_in6 *a6, const sockaddr *a7, otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *a8, void *a9)
{
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleGetAddrInfoResult(otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, const char *a6, const sockaddr_in6 *a7, uint64_t a8)
{
  int v8 = a8;
  Record  = a5;
  v51[0]  = 0;
  v51[1]  = 0;
  uint64_t v52 = 0;
  if (a5) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = 6;
  }
  __n128 v50 = 0uLL;
  otbrLog(v13, "MDNS", "DNSServiceGetAddrInfo reply: flags=%u, host=%s, sa_family=%u, error=%d", a4, a5, (uint64_t)a6, (uint64_t)a7, a8, a3);
  if (Record) {
    goto LABEL_14;
  }
  if ((a3 & 2) == 0 || a7->sin6_family != 30)
  {
LABEL_13:
    Record  = 0;
    goto LABEL_14;
  }
  otbr::Ip6Address::CopyFrom(&v50, a7);
  if (*(_OWORD *)&v50 == 0
    || (v50.n128_u16[0] & 0xC0FF) == 0x80FELL
    || v50.n128_u8[0] == 255
    || otbr::Ip6Address::IsLoopback((otbr::Ip6Address *)&v50))
  {
    otbr::Ip6Address::ToString((otbr::Ip6Address *)&v50, __p);
    if (v49 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      LOBYTE(v1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = __p[0];
    }
    otbrLog(7u, "MDNS", "DNSServiceGetAddrInfo ignores address %s", v14, v15, v16, v17, v18, (char)v19);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_13;
  }
  *((void *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((void *)this + 19);
  std::vector<otbr::Ip6Address>::push_back[abi:ne180100]((uint64_t *)this + 19, &v50);
  *((_DWORD *)this + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v8;
  otbr::Ip6Address::ToString((otbr::Ip6Address *)&v50, __p);
  if (v49 >= 0) {
    uint64_t v25 = __p;
  }
  else {
    LOBYTE(v25)  = __p[0];
  }
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo reply: address=%s, ttl=%u", v20, v21, v22, v23, v24, (char)v25);
  if (SHIBYTE(v49) < 0) {
    operator delete(__p[0]);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("._trel._udp.", (const void **)this + 13, (void **)&v47.__r_.__value_.__l.__data_);
  uint64_t v26 = std::string::append(&v47, "local.");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v49 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p  = v27;
  v26->__r_.__value_.__l.__size_  = 0;
  v26->__r_.__value_.__r.__words[2]  = 0;
  v26->__r_.__value_.__r.__words[0]  = 0;
  std::string::operator=[abi:ne180100]((uint64_t)v51, (long long *)__p);
  if (SHIBYTE(v49) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  uint64_t v33 = *((void *)this + 1);
  int v34 = *(uint64_t **)(v33 + 88);
  uint64_t v35 = *(uint64_t **)(v33 + 96);
  if (v34 != v35)
  {
    Record  = 0;
    while (1)
    {
      uint64_t v36 = *v34;
      if (*(char *)(*v34 + 39) < 0) {
        size_t v37 = *(void *)(v36 + 24);
      }
      else {
        size_t v37 = *(unsigned __int8 *)(*v34 + 39);
      }
      if (*((char *)this + 127) < 0) {
        uint64_t v38 = *((void *)this + 14);
      }
      else {
        uint64_t v38 = *((unsigned __int8 *)this + 127);
      }
      if (v37 == v38)
      {
        uint64_t v39 = (const void **)(v36 + 16);
        if (*((char *)this + 127) >= 0) {
          char v40 = (unsigned __int8 *)this + 104;
        }
        else {
          char v40 = (unsigned __int8 *)*((void *)this + 13);
        }
        if ((*(unsigned char *)(*v34 + 39) & 0x80) == 0)
        {
          if (v37)
          {
            while (*(unsigned __int8 *)v39 == *v40)
            {
              uint64_t v39 = (const void **)((char *)v39 + 1);
              ++v40;
              if (!--v37) {
                goto LABEL_50;
              }
            }
            goto LABEL_55;
          }
LABEL_50:
          if (!*(void *)v36)
          {
            if (v52 >= 0) {
              char v41 = v51;
            }
            else {
              char v41 = (void **)v51[0];
            }
            Record  = DNSServiceQueryRecord((DNSServiceRef *)v36, 0x100u, *((_DWORD *)this + 22), (const char *)v41, 0x21u, 1u, (DNSServiceQueryRecordReply)otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::HandleQueryrecordResult, this);
            otbrLog(6u, "MDNS", "%s: DNSServiceQueryRecord mServiceInstanceQueries size=%zu error=%d", v42, v43, v44, v45, v46, (char)"HandleGetAddrInfoResult");
          }
          goto LABEL_55;
        }
        if (!memcmp(*v39, v40, v37)) {
          goto LABEL_50;
        }
      }
LABEL_55:
      if (++v34 == v35) {
        goto LABEL_58;
      }
    }
  }
  Record  = 0;
LABEL_58:
  otbrLog(6u, "MDNS", "%s: DNSServiceQueryRecord mServiceInstanceQueries size=%zu mResolvingInstances size=%zu", v28, v29, v30, v31, v32, (char)"HandleGetAddrInfoResult");
LABEL_14:
  if (*((void *)this + 19) != *((void *)this + 20) || Record) {
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::FinishResolution(this);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(v51[0]);
  }
}

void sub_1003B2B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

BOOL otbr::Ip6Address::IsLoopback(otbr::Ip6Address *this)
{
  return !*(_DWORD *)this && !*((_DWORD *)this + 1) && !*((_DWORD *)this + 2) && *((_DWORD *)this + 3) == 0x1000000;
}

uint64_t std::vector<otbr::Ip6Address>::push_back[abi:ne180100](uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = (_OWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = std::vector<otbr::Ip6Address>::__push_back_slow_path<otbr::Ip6Address const&>(a1, a2);
  }
  else
  {
    *uint64_t v3 = *a2;
    uint64_t result = (uint64_t)(v3 + 1);
  }
  a1[1]  = result;
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = strlen(__s);
  if (__CFADD__(v6, result))
  {
    __break(0x5500u);
  }
  else
  {
    size_t v8 = result;
    uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + result);
    if (*((char *)a3 + 23) < 0) {
      a3  = (void **)*a3;
    }
    if (v6)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *a2;
      }
      uint64_t result = (uint64_t)memmove(a3, v9, v6);
    }
    if (v8) {
      uint64_t result = (uint64_t)memmove((char *)a3 + v6, __s, v8);
    }
    *((unsigned char *)a3 + v6 + v8)  = 0;
  }
  return result;
}

void otbr::Mdns::Publisher::DiscoveredInstanceInfo::~DiscoveredInstanceInfo(void **this)
{
  uint64_t v2 = this + 11;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 7;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void **std::map<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[](uint64_t **a1, std::string *a2)
{
  uint64_t v3 = a2;
  return std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v3)+ 7;
}

void otbr::Mdns::PublisherMDnsSd::HostSubscription::HandleResolveResult(otbr::Mdns::PublisherMDnsSd::HostSubscription *this, _DNSServiceRef_t *a2, unsigned int a3, uint64_t a4, char *a5, const sockaddr_in6 *a6, const sockaddr *a7, otbr::Mdns::PublisherMDnsSd::HostSubscription *a8, void *a9)
{
}

void otbr::Mdns::PublisherMDnsSd::HostSubscription::HandleResolveResult(otbr::Mdns::PublisherMDnsSd::HostSubscription *this, _DNSServiceRef_t *a2, char a3, uint64_t a4, uint64_t a5, char *a6, const sockaddr_in6 *a7, uint64_t a8)
{
  int v8 = a8;
  if (a5) {
    unsigned int v14 = 4;
  }
  else {
    unsigned int v14 = 6;
  }
  __n128 v37 = 0uLL;
  otbrLog(v14, "MDNS", "DNSServiceGetAddrInfo reply: flags=%u, host=%s, sa_family=%u, error=%d", a4, a5, (uint64_t)a6, (uint64_t)a7, a8, a3);
  if ((a3 & 2) == 0 || a5)
  {
    if (!a5) {
      return;
    }
    uint64_t v21 = *((void *)this + 1) + 8;
    std::string::basic_string[abi:ne180100]<0>(__p, a6);
    otbr::Mdns::Publisher::OnHostResolveFailed(v21, (const void **)__p, a5);
    goto LABEL_14;
  }
  if (a7->sin6_family != 30) {
    return;
  }
  otbr::Ip6Address::CopyFrom(&v37, a7);
  if ((v37.n128_u16[0] & 0xC0FF) == 0x80FE)
  {
    otbr::Ip6Address::ToString((otbr::Ip6Address *)&v37, __p);
    if (v36 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      LOBYTE(v2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = __p[0];
    }
    otbrLog(7u, "MDNS", "DNSServiceGetAddrInfo ignore link-local address %s", v15, v16, v17, v18, v19, (char)v20);
LABEL_14:
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  std::string::assign((std::string *)((char *)this + 40), a6);
  uint64_t v22 = (__n128 *)*((void *)this + 9);
  if ((unint64_t)v22 >= *((void *)this + 10))
  {
    uint64_t v23 = std::vector<otbr::Ip6Address>::__push_back_slow_path<otbr::Ip6Address const&>((uint64_t *)this + 8, &v37);
  }
  else
  {
    *uint64_t v22 = v37;
    uint64_t v23 = (uint64_t)&v22[1];
  }
  *((void *)this + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = v23;
  *((_DWORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v8;
  otbr::Ip6Address::ToString((otbr::Ip6Address *)&v37, __p);
  if (v36 >= 0) {
    uint64_t v29 = __p;
  }
  else {
    LOBYTE(v2ot::NetworkDiagnostic::Tlv::SetType(this, 9) = __p[0];
  }
  otbrLog(6u, "MDNS", "DNSServiceGetAddrInfo reply: address=%s, ttl=%u", v24, v25, v26, v27, v28, (char)v29);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  otbr::Mdns::Publisher::OnHostResolved(*((void *)this + 1) + 8, (uint64_t)this + 16, (uint64_t)this + 40, v30, v31, v32, v33, v34);
}

void sub_1003B2F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::~__tree(uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::~__tree(uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>(uint64_t a1)
{
  char v1 = (void *)(a1 + 8);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));

  return std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::~__value_func[abi:ne180100](v1);
}

void *std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    v1[1]  = v2;
    if ((unsigned char *)v1[2] - (unsigned char *)v2 < 0) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }
}

void *std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *otbr::Mdns::PublisherMDnsSd::DnssdServiceRegistration::DnssdServiceRegistration(void *a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::vector<std::string> *a5, __int16 a6, std::string **a7, void *a8, uint64_t a9, uint64_t a10)
{
  std::string::basic_string(&v23, a2);
  std::string::basic_string(&v22, a3);
  std::string::basic_string(&v21, a4);
  std::vector<std::string>::vector(&v20, a5);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::vector(&v19, a7);
  if (a10) {
    uint64_t v17 = a10 + 8;
  }
  else {
    uint64_t v17 = 0;
  }
  otbr::Mdns::Publisher::ServiceRegistration::ServiceRegistration((uint64_t)a1, (long long *)&v23, (long long *)&v22, (long long *)&v21, (long long *)&v20, a6, (long long *)&v19, a8, v17);
  uint64_t v24 = (std::vector<std::string> *)&v19;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  *a1  = off_10049F880;
  a1[22]  = a9;
  return a1;
}

void sub_1003B34B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v29 - 7ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v28;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  *(void *)(v29 - 7ot::NetworkData::NetworkDataTlv::SetType(this, 2) = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::ServiceRegistration::ServiceRegistration(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, __int16 a6, long long *a7, void *a8, uint64_t a9)
{
  *(void *)a1  = off_10049FAB0;
  otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a1 + 8, a8);
  *(void *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = a9;
  *(void *)a1  = off_10049FA30;
  long long v16 = *a2;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 48)  = v16;
  *((void *)a2 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a2  = 0;
  long long v17 = *a3;
  *(void *)(a1 + 88)  = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 7ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v17;
  *((void *)a3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a3  = 0;
  long long v18 = *a4;
  *(void *)(a1 + 11ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 96)  = v18;
  *((void *)a4 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a4  = 0;
  long long v22 = *a5;
  uint64_t v23 = *((void *)a5 + 2);
  *((void *)a5 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a5 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a5  = 0;
  otbr::Mdns::Publisher::SortSubTypeList((uint64_t)&v22, a1 + 120);
  uint64_t v24 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  *(_WORD *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a6;
  long long v20 = *a7;
  uint64_t v21 = *((void *)a7 + 2);
  *((void *)a7 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a7 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a7  = 0;
  otbr::Mdns::Publisher::SortTxtList((uint64_t)&v20, a1 + 152);
  uint64_t v24 = (void **)&v20;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100](&v24);
  return a1;
}

void sub_1003B3684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v8 + 119) < 0) {
    operator delete(*(void **)(v8 + 96));
  }
  if (*(char *)(v8 + 95) < 0) {
    operator delete(*(void **)(v8 + 72));
  }
  if (*(char *)(v8 + 71) < 0) {
    operator delete(*(void **)(v8 + 48));
  }
  otbr::Mdns::Publisher::Registration::~Registration((otbr::Mdns::Publisher::Registration *)v8);
  _Unwind_Resume(a1);
}

uint64_t otbr::OnceCallback<void ()(otbrError)>::OnceCallback(uint64_t a1, void *a2)
{
  std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](a2);
  return a1;
}

uint64_t std::__function::__value_func<void ()(otbrError)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3]  = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t otbr::Mdns::PublisherMDnsSd::DnssdHostRegistration::DnssdHostRegistration(uint64_t a1, const std::string *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  std::string::basic_string(&v13, a2);
  std::vector<otbr::Ip6Address>::vector((uint64_t)&v12, (unsigned char **)a3);
  otbr::Mdns::Publisher::HostRegistration::HostRegistration(a1, (long long *)&v13, &v12, a4, a6);
  unsigned int v14 = (void **)&v12;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  *(void *)a1  = off_10049F8A0;
  *(void *)(a1 + 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 11ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 96)  = a5;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1 + 112;
  *(_DWORD *)(a1 + 128)  = (*(void *)(a3 + 8) - *(void *)a3) >> 4;
  return a1;
}

void sub_1003B390C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::HostRegistration::HostRegistration(uint64_t a1, long long *a2, long long *a3, void *a4, uint64_t a5)
{
  *(void *)a1  = off_10049FAB0;
  otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a1 + 8, a4);
  *(void *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = a5;
  *(void *)a1  = off_10049FA50;
  long long v9 = *a2;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 48)  = v9;
  *((void *)a2 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a2 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a2  = 0;
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  *((void *)a3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a3  = 0;
  otbr::Mdns::Publisher::SortAddressList((uint64_t)&v11, a1 + 72);
  std::string v13 = (void **)&v11;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_1003B3A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v4[71] < 0) {
    operator delete(*v5);
  }
  otbr::Mdns::Publisher::Registration::~Registration((otbr::Mdns::Publisher::Registration *)v4);
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Ip6Address>::vector(uint64_t a1, unsigned char **a2)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = 0;
  *(void *)(a1 + 16)  = 0;
  std::vector<otbr::Ip6Address>::__init_with_size[abi:ne180100]<otbr::Ip6Address*,otbr::Ip6Address*>((void **)a1, *a2, a2[1], (a2[1] - *a2) >> 4);
  return a1;
}

void **std::vector<otbr::Ip6Address>::__init_with_size[abi:ne180100]<otbr::Ip6Address*,otbr::Ip6Address*>(void **result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<otbr::Ip6Address>::__vallocate[abi:ne180100](result, a4);
    return std::vector<otbr::Ip6Address>::__construct_at_end<otbr::Ip6Address*,otbr::Ip6Address*>(v6, a2, a3);
  }
  return result;
}

void sub_1003B3AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<otbr::Ip6Address>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<otbr::Ip6Address>::allocate[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1  = result;
  a1[1]  = result;
  a1[2]  = &result[16 * a2];
  return result;
}

void **std::vector<otbr::Ip6Address>::__construct_at_end<otbr::Ip6Address*,otbr::Ip6Address*>(void **result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (char *)result[1];
  int64_t v5 = a3 - a2;
  if (a3 == a2) {
    goto LABEL_5;
  }
  if (v5 < 0)
  {
    __break(0x550Cu);
  }
  else
  {
    size_t v6 = a3 - a2;
    if ((unint64_t)(v5 - 16) < 0xFFFFFFFFFFFFFFF0)
    {
      uint64_t result = (void **)memmove(result[1], a2, v6);
LABEL_5:
      v3[1]  = &v4[v5];
      return result;
    }
  }
  __break(0x5500u);
  return result;
}

void *std::allocator<otbr::Ip6Address>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *a1, const std::string *a2, const std::string *a3)
{
  int64_t v5 = std::string::basic_string(a1, a2);
  std::string::basic_string(v5 + 1, a3);
  return a1;
}

void sub_1003B3C08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

otbr::Mdns::Publisher::DiscoveredInstanceInfo *otbr::Mdns::Publisher::DiscoveredInstanceInfo::DiscoveredInstanceInfo(otbr::Mdns::Publisher::DiscoveredInstanceInfo *this, const otbr::Mdns::Publisher::DiscoveredInstanceInfo *a2)
{
  uint64_t v4 = (const std::string *)((char *)a2 + 32);
  *(void *)this  = *(void *)a2;
  int64_t v5 = (std::string *)((char *)this + 32);
  std::string::basic_string((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::basic_string(v5, v4);
  std::vector<otbr::Ip6Address>::vector((uint64_t)this + 56, (unsigned char **)a2 + 7);
  int v6 = *((_DWORD *)a2 + 20);
  *((_WORD *)this + 4ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((_WORD *)a2 + 42);
  *((_DWORD *)this + 2ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v6;
  std::vector<unsigned char>::vector((void *)this + 11, (uint64_t)a2 + 88);
  *((_DWORD *)this + 28)  = *((_DWORD *)a2 + 28);
  return this;
}

void sub_1003B3CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(otbrError)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception  = __cxa_allocate_exception(8uLL);
  *exception  = off_10049FA88;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete();
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<std::string>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)(*a1)[2] - (unsigned char *)v3) >> 3) >= 0xAAAAAAAAAAAAAABLL)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void std::vector<std::string>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *(void *)(a1 + 8)  = a2;
}

void std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)(*a1)[2] - (unsigned char *)v3) >> 4) >= 0x555555555555556)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void std::vector<otbr::Mdns::Publisher::TxtEntry>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](a1 + 16, i))i -= 48;
  *(void *)(a1 + 8)  = a2;
}

void std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, const std::vector<std::string> *__x)
{
  this->__begin_  = 0;
  this->__end_  = 0;
  this->__end_cap_.__value_  = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, __x->__begin_, __x->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)__x->__end_ - (char *)__x->__begin_) >> 3));
  return this;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, std::string *a2, std::string *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    return std::vector<std::string>::__construct_at_end<std::string*,std::string*>(v6, a2, a3);
  }
  return result;
}

void sub_1003B4094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<std::string>::allocate[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1  = result;
  a1[1]  = result;
  a1[2]  = &result[24 * a2];
  return result;
}

std::string *std::vector<std::string>::__construct_at_end<std::string*,std::string*>(uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(a1 + 16, a2, a3, *(std::string **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_1003B4134(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

void *std::allocator<std::string>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  long long v11 = this;
  v8[0]  = a1;
  v8[1]  = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (__str != a3)
  {
    uint64_t v6 = __str;
    do
    {
      std::string::basic_string(v4, v6++);
      uint64_t v4 = ++v11;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1003B4208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      if (*(char *)(v6 - 1) < 0) {
        operator delete(*(void **)(v6 - 24));
      }
      v6 -= 24;
    }
    while (v6 != a5);
  }
}

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::vector(std::string *a1, std::string **a2)
{
  a1->__r_.__value_.__r.__words[0]  = 0;
  a1->__r_.__value_.__l.__size_  = 0;
  a1->__r_.__value_.__r.__words[2]  = 0;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__init_with_size[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
  return a1;
}

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::__init_with_size[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>(std::string *result, std::string *a2, std::string *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__vallocate[abi:ne180100](result, a4);
    return std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>(v6, a2, a3);
  }
  return result;
}

void sub_1003B4370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<otbr::Mdns::Publisher::TxtEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<otbr::Mdns::Publisher::TxtEntry>::allocate[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1  = result;
  a1[1]  = result;
  a1[2]  = &result[48 * a2];
  return result;
}

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>(uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>(a1 + 16, a2, a3, *(std::string **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_1003B4410(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

void *std::allocator<otbr::Mdns::Publisher::TxtEntry>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*,otbr::Mdns::Publisher::TxtEntry*>(uint64_t a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v11 = this;
  uint64_t v12 = this;
  v9[0]  = a1;
  v9[1]  = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (__str != a3)
  {
    uint64_t v6 = __str;
    int v7 = a1;
    do
    {
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry&>(v7, v4, v6);
      v6 += 2;
      uint64_t v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1003B44EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry&>(int a1, std::string *this, std::string *__str)
{
  return std::vector<unsigned char>::vector(this[1].__r_.__value_.__r.__words, (uint64_t)&__str[1]);
}

void sub_1003B453C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree(uint64_t a1)
{
  return a1;
}

uint64_t std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::~__tree(uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>(uint64_t a1)
{
  std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>::~unique_ptr[abi:ne180100]((uint64_t *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = a1 + 16;
  while (v4 != a2)
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>(v5, --v4);
  *(void *)(a1 + 8)  = a2;
}

void std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0;
  if (v3) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]((uint64_t)a2, v3);
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = a1 + 16;
  while (v4 != a2)
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>(v5, --v4);
  *(void *)(a1 + 8)  = a2;
}

void std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0;
  if (v3) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]((uint64_t)a2, v3);
  }
}

uint64_t std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *(void *)a2;
  *(void *)a2  = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  uint64_t v3 = result + 1;
  *(_OWORD *)(result + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8)  = v5;
  *(void *)(a2 + 16)  = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16);
  }
  *uint64_t result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  *uint64_t v6 = a2 + 8;
  return result;
}

uint64_t std::vector<_DNSServiceRef_t *>::__construct_one_at_end[abi:ne180100]<_DNSServiceRef_t * const&>(uint64_t result, void *a2)
{
  uint64_t v2 = *(void **)(result + 8);
  *uint64_t v2 = *a2;
  *(void *)(result + 8)  = v2 + 1;
  return result;
}

uint64_t std::vector<_DNSServiceRef_t *>::__push_back_slow_path<_DNSServiceRef_t * const&>(uint64_t *a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(v10);
  return v8;
}

void sub_1003B4B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8;
    *(void *)(v4 - 8)  = v5;
    v4 -= 8;
  }
  a2[1]  = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<_DNSServiceRef_t *>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[8 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[8 * a2];
  return a1;
}

void *std::allocator<_DNSServiceRef_t *>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(void *a1)
{
  std::__split_buffer<_DNSServiceRef_t *>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<_DNSServiceRef_t *>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = v2 + ((a2 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__count_unique<_DNSRecordRef_t *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = *a2;
    uint64_t result = 1;
    do
    {
      unint64_t v5 = v2[4];
      if (v3 >= v5)
      {
        if (v5 >= v3) {
          return result;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

void *std::function<void ()(otbrError)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](a1, a2);
  return a1;
}

void *std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(otbrError)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3]  = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3]  = v4;
      *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
    }
  }
  else
  {
    a1[3]  = 0;
  }
  return a1;
}

uint64_t *std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1  = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__emplace_unique_key_args<_DNSRecordRef_t *,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    char v9 = v7;
    std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v12, v9, (uint64_t *)v11[0]);
    uint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>(uint64_t a1, void *a2, unint64_t *a3)
{
  unint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4[4];
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t result = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_10:
  *a2  = v7;
  return result;
}

void std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(unsigned char *)(a4 + 16)  = 0;
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::construct[abi:ne180100]<std::pair<_DNSRecordRef_t * const,otbr::Ip6Address>,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>,void>(v7, v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16)  = 1;
}

void sub_1003B4F14(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::construct[abi:ne180100]<std::pair<_DNSRecordRef_t * const,otbr::Ip6Address>,std::piecewise_construct_t const&,std::tuple<_DNSRecordRef_t * const&>,std::tuple<>,void>(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4 = **a4;
  a2[1]  = 0;
  a2[2]  = 0;
  *a2  = v4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>>::reset[abi:ne180100](void **a1, void *a2)
{
  unint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::operator()[abi:ne180100](a1 + 8, v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>::operator()[abi:ne180100](int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void>>(unint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = (2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - a1) >> 3))) ^ 0x7E;
  if (a2 == (const void **)a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, a2, a3, v4, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v12 = a1;
  uint64_t v29 = (const void **)(a1 + 24);
  std::string v13 = (const void **)(a1 + 48);
  unsigned int v14 = (const void **)(a1 - 24);
  while (1)
  {
    uint64_t v15 = (uint64_t)a2 - v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v27 = a2 - 3;
          if (std::less<std::string>::operator()[abi:ne180100](a3, v27, (const void **)v12))
          {
            uint64_t v33 = *(const void **)(v12 + 16);
            long long v31 = *(_OWORD *)v12;
            long long v28 = *(_OWORD *)v27;
            *(void *)(v12 + 16)  = v27[2];
            *(_OWORD *)uint64_t v12 = v28;
            void v27[2] = v33;
            *(_OWORD *)uint64_t v27 = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)v12, (const void **)(v12 + 24), a2 - 3, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (const void **)(v12 + 24), (const void **)(v12 + 48), (long long *)(a2 - 3), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (const void **)(v12 + 24), (const void **)(v12 + 48), (long long *)(v12 + 72), (long long *)(a2 - 3), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (!a4)
    {
      if ((const void **)v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(v12, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    if (__OFSUB__(a4--, 1))
    {
      __break(0x5515u);
      JUMPOUT(0x1003B5394);
    }
    unint64_t v18 = v16 >> 1;
    std::string v19 = a2 - 3;
    unint64_t v20 = v12 + 24 * (v16 >> 1);
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)v12, (const void **)(v12 + 24 * (v16 >> 1)), v19, a3);
      uint64_t v21 = (const void **)(v12 + 24 * v18);
      long long v22 = v21 - 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v29, v21 - 3, a2 - 6, a3);
      v21 += 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v13, v21, a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v22, (const void **)v20, v21, a3);
      uint64_t v32 = *(void *)(v12 + 16);
      long long v30 = *(_OWORD *)v12;
      long long v23 = *(_OWORD *)v20;
      *(void *)(v12 + 16)  = *(void *)(v20 + 16);
      *(_OWORD *)uint64_t v12 = v23;
      *(void *)(v20 + 16)  = v32;
      *(_OWORD *)unint64_t v20 = v30;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(v12 + 24 * (v16 >> 1)), (const void **)v12, v19, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100](a3, v14, (const void **)v12))
    {
      a1  = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(v12, (unint64_t)a2, a3);
      a5  = 0;
      goto LABEL_1;
    }
LABEL_14:
    uint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(v12, a2, a3);
    if (!v25) {
      goto LABEL_19;
    }
    char v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (uint64_t)v24, a3);
    a1  = (unint64_t)v24 + 24;
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v24 + 24, (uint64_t)a2, a3))
    {
      if (v26) {
        goto LABEL_1;
      }
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v12, v24, a3, a4, a5 & 1);
      a5  = 0;
      a1  = (unint64_t)v24 + 24;
      goto LABEL_1;
    }
    a2  = (const void **)v24;
    if (v26) {
      return;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, a2, a3);
  }
}

  uint64_t v12 = a1;
  std::string v13 = a1 + 2;
  unsigned int v14 = a1 + 4;
  while (1)
  {
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = ((char *)a2 - (char *)v12) >> 4;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v27 = *(a2 - 2);
          char v26 = a2 - 2;
          long long v28 = bswap64(v27);
          uint64_t v29 = bswap64(*v12);
          if (v28 == v29 && (long long v28 = bswap64(v26[1]), v29 = bswap64(v12[1]), v28 == v29))
          {
            long long v30 = 0;
          }
          else if (v28 < v29)
          {
            long long v30 = -1;
          }
          else
          {
            long long v30 = 1;
          }
          if (v30 < 0)
          {
            uint64_t v32 = *(_OWORD *)v12;
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v26;
            *(_OWORD *)char v26 = v32;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v12, v12 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v12, v12 + 2, v12 + 4, a2 - 2);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v12, v12 + 2, v12 + 4, v12 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 383) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,otbr::Ip6Address *>(v12, a2, a2, a3);
      }
      return;
    }
    if (__OFSUB__(a4--, 1)) {
      __break(0x5515u);
    }
    unint64_t v18 = a2 - 2;
    std::string v19 = &v12[2 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v12, &v12[2 * (v16 >> 1)], v18);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v13, v19 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v14, v19 + 2, a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v19 - 2, v19, v19 + 2);
      long long v31 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v19;
      *(_OWORD *)std::string v19 = v31;
      if (a5) {
        goto LABEL_20;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(&v12[2 * (v16 >> 1)], v12, v18);
      if (a5) {
        goto LABEL_20;
      }
    }
    unint64_t v20 = bswap64(*(v12 - 2));
    uint64_t v21 = bswap64(*v12);
    if (v20 == v21 && (unint64_t v20 = bswap64(*(v12 - 1)), v21 = bswap64(v12[1]), v20 == v21))
    {
      long long v22 = 0;
    }
    else if (v20 < v21)
    {
      long long v22 = -1;
    }
    else
    {
      long long v22 = 1;
    }
    if ((v22 & 0x80000000) == 0)
    {
      a1  = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void> &>(v12, a2);
      a5  = 0;
      goto LABEL_1;
    }
LABEL_20:
    long long v23 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void> &>((long long *)v12, (long long *)a2);
    if (!v24) {
      goto LABEL_25;
    }
    char v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v12, v23);
    a1  = v23 + 2;
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v23 + 2, a2))
    {
      if (v25) {
        goto LABEL_1;
      }
LABEL_25:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,false>(v12, v23, a3, a4, a5 & 1);
      a5  = 0;
      a1  = v23 + 2;
      goto LABEL_1;
    }
    a2  = v23;
    if (v25) {
      return;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v12, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(v12, a2);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v16 = v3;
    uint64_t v17 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      char v10 = (const void **)a1;
      do
      {
        long long v11 = v10;
        char v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          *(_OWORD *)__p  = *(_OWORD *)v10;
          uint64_t v15 = v10[2];
          v10[1]  = 0;
          void v10[2] = 0;
          std::string *v10 = 0;
          uint64_t v12 = v9;
          while (1)
          {
            std::string::operator=[abi:ne180100](a1 + v12 + 24, (long long *)(a1 + v12));
            if (!v12) {
              break;
            }
            v12 -= 24;
            if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)(v12 + a1)))
            {
              uint64_t v13 = a1 + v12 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v13 = a1;
LABEL_10:
          std::string::operator=[abi:ne180100](v13, (long long *)__p);
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    char v6 = (long long *)a1;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      do
      {
        uint64_t v9 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, (const void **)v6))
        {
          *(_OWORD *)__p  = *(_OWORD *)v9;
          long long v11 = v9[2];
          v9[1]  = 0;
          uint64_t v9[2] = 0;
          const void *v9 = 0;
          do
          {
            std::string::operator=[abi:ne180100]((uint64_t)v6 + 24, v6);
            char v6 = (long long *)((char *)v6 - 24);
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)v6));
          std::string::operator=[abi:ne180100]((uint64_t)v6 + 24, (long long *)__p);
          if (SHIBYTE(v11) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v7 = v9 + 3;
        char v6 = (long long *)v9;
      }
      while (v9 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  uint64_t result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    uint64_t v15 = a3[2];
    *(_OWORD *)a2  = *(_OWORD *)a3;
    a2[2]  = v15;
    *(_OWORD *)a3  = v14;
    a3[2]  = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1)) {
      return 1;
    }
    uint64_t v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    unint64_t v18 = a2[2];
    *(_OWORD *)a1  = *(_OWORD *)a2;
    a1[2]  = v18;
    *(_OWORD *)a2  = v17;
    a2[2]  = v16;
    return 2;
  }
  if (!result)
  {
    std::string v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    uint64_t v21 = a2[2];
    *(_OWORD *)a1  = *(_OWORD *)a2;
    a1[2]  = v21;
    *(_OWORD *)a2  = v20;
    a2[2]  = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2)) {
      return 1;
    }
    long long v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    uint64_t v24 = a3[2];
    *(_OWORD *)a2  = *(_OWORD *)a3;
    a2[2]  = v24;
    *(_OWORD *)a3  = v23;
    a3[2]  = v22;
    return 2;
  }
  char v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1  = *(_OWORD *)a3;
  a1[2]  = v12;
  *(_OWORD *)a3  = v11;
  a3[2]  = v10;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  *(_OWORD *)__p  = *(_OWORD *)a1;
  uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0;
  *(void *)(a1 + 16)  = 0;
  *(void *)a1  = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)(a2 - 24)))
  {
    unint64_t v6 = a1;
    do
      v6 += 24;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)v6));
  }
  else
  {
    uint64_t v7 = (const void **)(a1 + 24);
    do
    {
      unint64_t v6 = (unint64_t)v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, v7);
      uint64_t v7 = (const void **)(v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)v4));
  }
  while (v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v16 = *(void *)(v6 + 16);
    long long v15 = v9;
    long long v10 = *(_OWORD *)v4;
    *(void *)(v6 + 16)  = *(void *)(v4 + 16);
    *(_OWORD *)unint64_t v6 = v10;
    long long v11 = v15;
    *(void *)(v4 + 16)  = v16;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 24;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)v4));
  }
  if (v6 - 24 != a1) {
    std::string::operator=[abi:ne180100](a1, (long long *)(v6 - 24));
  }
  std::string::operator=[abi:ne180100](v6 - 24, (long long *)__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  *(_OWORD *)__p  = *(_OWORD *)a1;
  uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0;
  *(void *)(a1 + 16)  = 0;
  *(void *)a1  = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v6 + a1), (const void **)__p));
  unint64_t v7 = a1 + v6;
  BOOL v8 = (long long *)(a1 + v6 - 24);
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)__p));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)__p));
  }
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    unint64_t v10 = v7;
    do
    {
      long long v17 = *(_OWORD *)v10;
      long long v11 = v17;
      unint64_t v18 = *(const void **)(v10 + 16);
      uint64_t v12 = v18;
      uint64_t v13 = v9[2];
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v9;
      *(void *)(v10 + 16)  = v13;
      uint64_t v9[2] = v12;
      *(_OWORD *)long long v9 = v11;
      do
        v10 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v10, (const void **)__p));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)__p));
    }
    while (v10 < (unint64_t)v9);
    BOOL v8 = (long long *)(v10 - 24);
  }
  if (v8 != (long long *)a1) {
    std::string::operator=[abi:ne180100](a1, v8);
  }
  std::string::operator=[abi:ne180100]((uint64_t)v8, (long long *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6 & 1;
    case 2uLL:
      uint64_t v7 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v8 = *(void *)(a1 + 16);
        long long v9 = *(_OWORD *)a1;
        uint64_t v10 = *(void *)(v7 + 16);
        *(_OWORD *)a1  = *(_OWORD *)v7;
        *(void *)(a1 + 16)  = v10;
        *(_OWORD *)uint64_t v7 = v9;
        *(void *)(v7 + 16)  = v8;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      break;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      break;
    default:
      long long v11 = (long long *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == a2)
      {
LABEL_19:
        char v6 = 1;
      }
      else
      {
        int v13 = 0;
        while (1)
        {
          if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v12, (const void **)v11))
          {
            *(_OWORD *)__p  = *(_OWORD *)v12;
            uint64_t v21 = *(void *)(v12 + 16);
            *(void *)(v12 + 8)  = 0;
            *(void *)(v12 + 16)  = 0;
            *(void *)uint64_t v12 = 0;
            uint64_t v14 = (long long *)v12;
            while (1)
            {
              uint64_t v15 = (uint64_t)v14;
              uint64_t v14 = v11;
              std::string::operator=[abi:ne180100](v15, v11);
              if (v11 == (long long *)a1) {
                break;
              }
              long long v11 = (long long *)((char *)v11 - 24);
              if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)__p, (const void **)v14 - 3))
              {
                uint64_t v16 = (uint64_t)v14;
                goto LABEL_12;
              }
            }
            uint64_t v16 = a1;
LABEL_12:
            std::string::operator=[abi:ne180100](v16, (long long *)__p);
            if (__CFADD__(v13++, 1))
            {
              __break(0x5500u);
              JUMPOUT(0x1003B5BA4);
            }
            BOOL v18 = v12 + 24 == a2;
            if (v13 == 8)
            {
              v12 += 24;
              char v6 = v18;
            }
            if (SHIBYTE(v21) < 0) {
              operator delete(__p[0]);
            }
            if (v13 == 8) {
              break;
            }
          }
          long long v11 = (long long *)v12;
          v12 += 24;
          if (v12 == a2) {
            goto LABEL_19;
          }
        }
      }
      break;
  }
  return v6 & 1;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    long long v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    int v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3  = *a4;
    a3[2]  = v13;
    *a4  = v12;
    *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2  = *(_OWORD *)a3;
      a2[2]  = v16;
      *(_OWORD *)a3  = v15;
      a3[2]  = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        long long v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        BOOL v18 = a2[2];
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *(void *)(a1 + 16)  = v18;
        *(__n128 *)a2  = result;
        a2[2]  = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4  = *a5;
    *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v15;
    *a5  = v14;
    *((void *)a5 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      BOOL v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3  = *a4;
      a3[2]  = v18;
      *a4  = v17;
      *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        std::string v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2  = *(_OWORD *)a3;
        a2[2]  = v21;
        *(_OWORD *)a3  = v20;
        a3[2]  = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          long long v23 = a2[2];
          *(_OWORD *)a1  = *(_OWORD *)a2;
          *(void *)(a1 + 16)  = v23;
          *(__n128 *)a2  = result;
          a2[2]  = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *(void *)(v14 + 16);
          long long v16 = *(_OWORD *)v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(void *)(v14 + 16)  = v17;
          *(_OWORD *)a1  = v16;
          *(void *)(a1 + 16)  = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, a1);
        }
        v14 += 24;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      unint64_t v18 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(a1, v6, a4, v18);
        v6 -= 24;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      uint64_t v10 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
      uint64_t v11 = a1 + 24 * v10;
      uint64_t v12 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
      if (v12 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v10), (const void **)(v11 + 24)))
      {
        uint64_t v10 = v12;
        v11 += 24;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v11, (const void **)v5))
      {
        *(_OWORD *)__p  = *(_OWORD *)v5;
        uint64_t v16 = *(void *)(v5 + 16);
        *(void *)(v5 + 8)  = 0;
        *(void *)(v5 + 16)  = 0;
        *(void *)uint64_t v5 = 0;
        do
        {
          uint64_t v13 = v11;
          std::string::operator=[abi:ne180100](v5, (long long *)v11);
          if (v7 < v10) {
            break;
          }
          if (v10 + 0x4000000000000000 < 0)
          {
            __break(0x550Cu);
LABEL_19:
            __break(0x5500u);
            return;
          }
          uint64_t v10 = (2 * v10) | 1;
          if (__OFADD__(v10, 1)) {
            goto LABEL_19;
          }
          uint64_t v11 = a1 + 24 * v10;
          if (v10 + 1 < a3)
          {
            BOOL v14 = std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v10), (const void **)(v11 + 24));
            v11 += 24 * v14;
            if (v14) {
              ++v10;
            }
          }
          uint64_t v5 = v13;
        }
        while (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v11, (const void **)__p));
        std::string::operator=[abi:ne180100](v13, (long long *)__p);
        if (SHIBYTE(v16) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    *(_OWORD *)__p  = *(_OWORD *)a1;
    uint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 8)  = 0;
    *(void *)(a1 + 16)  = 0;
    *(void *)a1  = 0;
    uint64_t v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a3, a4);
    uint64_t v8 = v7;
    uint64_t v9 = (long long *)(a2 - 24);
    if ((long long *)v7 == v9)
    {
      std::string::operator=[abi:ne180100](v7, (long long *)__p);
    }
    else
    {
      std::string::operator=[abi:ne180100](v7, v9);
      std::string::operator=[abi:ne180100]((uint64_t)v9, (long long *)__p);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v8 + 24, a3, 0xAAAAAAAAAAAAAAABLL * ((v8 + 24 - a1) >> 3));
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003B6180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  BOOL v7 = __OFSUB__(a3, 2);
  if (v6 < 0) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v8 = v6 >> 1;
  while (v5 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = (2 * v5) | 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_18;
    }
    uint64_t v10 = v4 + 24 * v5;
    uint64_t v11 = (long long *)(v10 + 24);
    if (v9 + 1 >= a3)
    {
      uint64_t v5 = (2 * v5) | 1;
    }
    else
    {
      BOOL v12 = std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(v10 + 24), (const void **)(v10 + 48));
      uint64_t v11 = (long long *)((char *)v11 + 24 * v12);
      if (v12) {
        uint64_t v5 = v9 + 1;
      }
      else {
        uint64_t v5 = (2 * v5) | 1;
      }
    }
    __n128 result = std::string::operator=[abi:ne180100](v4, v11);
    if (v7) {
      goto LABEL_19;
    }
    uint64_t v4 = (uint64_t)v11;
    if (v5 > v8) {
      return (uint64_t)v11;
    }
  }
  __break(0x550Cu);
LABEL_18:
  __break(0x5500u);
LABEL_19:
  __break(0x5515u);
  return result;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = a2 - 24;
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      *(_OWORD *)__p  = *(_OWORD *)v10;
      uint64_t v13 = *(void *)(v10 + 16);
      *(void *)(v10 + 8)  = 0;
      *(void *)(v10 + 16)  = 0;
      *(void *)uint64_t v10 = 0;
      do
      {
        uint64_t v11 = (uint64_t)v9;
        std::string::operator=[abi:ne180100](v10, v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v11;
      }
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)__p));
      std::string::operator=[abi:ne180100](v11, (long long *)__p);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

__n128 otbr::Mdns::PublisherMDnsSd::ServiceSubscription::ServiceSubscription(uint64_t a1, uint64_t a2, long long *a3, __n128 *a4)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = a2;
  long long v4 = *a3;
  *(void *)(a1 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v4;
  *((void *)a3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a3  = 0;
  __n128 result = *a4;
  *(void *)(a1 + 56)  = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = result;
  a4->n128_u64[1]  = 0;
  a4[1].n128_u64[0]  = 0;
  a4->n128_u64[0]  = 0;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 7ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 8ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 88)  = 0;
  *(void *)(a1 + 96)  = 0;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return result;
}

void std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void **)(a2 + 88);
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)(a2 + 64);
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a2 + 63) < 0) {
      operator delete(*(void **)(a2 + 40));
    }
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef((_DNSServiceRef_t **)a2);
    operator delete();
  }
}

void otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef(_DNSServiceRef_t **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *this  = 0;
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (void ****)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void ***a2)
{
  long long v4 = *(void ****)(a1 + 8);
  int v5 = a1 + 16;
  while (v4 != a2)
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>,void>(v5, --v4);
  *(void *)(a1 + 8)  = a2;
}

void std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>,void>(int a1, void ***a2)
{
  uint64_t v3 = *a2;
  *a2  = 0;
  if (v3) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::operator()[abi:ne180100]((int)a2, v3);
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (void ****)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void ***a2)
{
  long long v4 = *(void ****)(a1 + 8);
  int v5 = a1 + 16;
  while (v4 != a2)
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>,void>(v5, --v4);
  *(void *)(a1 + 8)  = a2;
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  unint64_t v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0;
  *unint64_t v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::~__split_buffer(v12);
  return v10;
}

void sub_1003B66B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  unsigned char v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0;
      *v10--  = v11;
      *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v9;
      v7 -= 8;
      uint64_t v9 = v10;
    }
    while (a3 != a5);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>(v2, (uint64_t)v9, (uint64_t)v4);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(uint64_t **)(a2 + 32); i != *(uint64_t **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>(a1, i);
    uint64_t i = (uint64_t *)(*(void *)(a2 + 32) + 8);
  }
}

void *std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = v4 - 8;
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>,void>(v5, (uint64_t *)(v4 - 8));
  }
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
      std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator=[abi:ne180100](a4++, v5++);
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0;
  uint64_t v4 = *a1;
  *a1  = v3;
  if (v4) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceSubscription>::operator()[abi:ne180100]((uint64_t)a1, v4);
  }
  return a1;
}

double otbr::Mdns::PublisherMDnsSd::HostSubscription::HostSubscription(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = a2;
  long long v3 = *a3;
  *(void *)(a1 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v3;
  *((void *)a3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a3  = 0;
  *(void *)(a1 + 7ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 8ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56)  = 0u;
  *(_OWORD *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_DWORD *)(a1 + 88)  = 0;
  return result;
}

void std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v3 = (void **)(a2 + 64);
    std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a2 + 63) < 0) {
      operator delete(*(void **)(a2 + 40));
    }
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef((_DNSServiceRef_t **)a2);
    operator delete();
  }
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  uint64_t v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0;
  *uint64_t v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::~__split_buffer(v12);
  return v10;
}

void sub_1003B6B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  unsigned char v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0;
      *v10--  = v11;
      *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v9;
      v7 -= 8;
      uint64_t v9 = v10;
    }
    while (a3 != a5);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>(v2, (uint64_t)v9, (uint64_t)v4);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(uint64_t **)(a2 + 32); i != *(uint64_t **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>(a1, i);
    uint64_t i = (uint64_t *)(*(void *)(a2 + 32) + 8);
  }
}

void *std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = v4 - 8;
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>,void>(v5, (uint64_t *)(v4 - 8));
  }
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
      std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator=[abi:ne180100](a4++, v5++);
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::unique_ptr<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0;
  uint64_t v4 = *a1;
  *a1  = v3;
  if (v4) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::HostSubscription>::operator()[abi:ne180100]((uint64_t)a1, v4);
  }
  return a1;
}

double otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::ServiceInstanceResolution(uint64_t a1, uint64_t a2, long long *a3, long long *a4, long long *a5, int a6)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = a2;
  long long v6 = *a3;
  *(void *)(a1 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v6;
  *((void *)a3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a3  = 0;
  long long v7 = *a4;
  *(void *)(a1 + 56)  = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v7;
  *((void *)a4 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a4  = 0;
  long long v8 = *a5;
  *(void *)(a1 + 8ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v8;
  *((void *)a5 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a5 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a5  = 0;
  *(_DWORD *)(a1 + 88)  = a6;
  *(unsigned char *)(a1 + 96)  = 0;
  *(_DWORD *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 11ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(void *)(a1 + 16ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 168)  = 0;
  *(void *)(a1 + 19ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 17ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(_DWORD *)(a1 + 208)  = 0;
  return result;
}

void std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::operator()[abi:ne180100](int a1, void **this)
{
  if (this)
  {
    otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::~ServiceInstanceResolution(this);
    operator delete();
  }
}

void otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution::~ServiceInstanceResolution(void **this)
{
  uint64_t v2 = this + 23;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 19;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  otbr::Mdns::PublisherMDnsSd::ServiceRef::~ServiceRef((_DNSServiceRef_t **)this);
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  long long v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0;
  *long long v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::~__split_buffer(v12);
  return v10;
}

void sub_1003B7180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  unsigned char v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0;
      *v10--  = v11;
      *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v9;
      v7 -= 8;
      uint64_t v9 = v10;
    }
    while (a3 != a5);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>(v2, (uint64_t)v9, (uint64_t)v4);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>,std::reverse_iterator<std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>>(int a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void ****)(a2 + 32); i != *(void ****)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>,void>(a1, i);
    uint64_t i = (void ***)(*(void *)(a2 + 32) + 8);
  }
}

void *std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = v4 - 8;
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>,void>(v5, (void ***)(v4 - 8));
  }
}

double otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery::ServiceInstanceQuery(uint64_t a1, uint64_t a2, long long *a3, long long *a4, long long *a5, int a6)
{
  *(void *)a1  = 0;
  long long v6 = *a3;
  *(void *)(a1 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16)  = v6;
  *((void *)a3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a3  = 0;
  long long v7 = *a4;
  *(void *)(a1 + 56)  = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v7;
  *((void *)a4 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a4 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a4  = 0;
  long long v8 = *a5;
  *(void *)(a1 + 8ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v8;
  *((void *)a5 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a5 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a5  = 0;
  *(_DWORD *)(a1 + 88)  = a6;
  *(unsigned char *)(a1 + 96)  = 0;
  *(_DWORD *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 11ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128)  = 0u;
  *(_OWORD *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(void *)(a1 + 16ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 168)  = 0;
  *(void *)(a1 + 19ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 17ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(_DWORD *)(a1 + 208)  = 0;
  return result;
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__push_back_slow_path<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v12, v7, v2, (uint64_t)(a1 + 2));
  long long v8 = v13;
  uint64_t v9 = *a2;
  *a2  = 0;
  *long long v8 = v9;
  uint64_t v13 = v8 + 1;
  std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::~__split_buffer(v12);
  return v10;
}

void sub_1003B7570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  unsigned char v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = (void *)(a7 - 8);
    uint64_t v10 = (void *)(a7 - 8);
    do
    {
      uint64_t v11 = *--a3;
      *a3  = 0;
      *v10--  = v11;
      *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v9;
      v7 -= 8;
      uint64_t v9 = v10;
    }
    while (a3 != a5);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>>,std::reverse_iterator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void std::__split_buffer<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = v4 - 8;
    std::allocator_traits<std::allocator<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>>>::destroy[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceQuery>,void>(v5, (void ***)(v4 - 8));
  }
}

void ***std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *,std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution> *>(int a1, void ***a2, void ***a3, void ***a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
      std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::operator=[abi:ne180100](a4++, v5++);
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void ***std::unique_ptr<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::operator=[abi:ne180100](void ***a1, void ***a2)
{
  unint64_t v3 = *a2;
  *a2  = 0;
  uint64_t v4 = *a1;
  *a1  = v3;
  if (v4) {
    std::default_delete<otbr::Mdns::PublisherMDnsSd::ServiceInstanceResolution>::operator()[abi:ne180100]((int)a1, v4);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__find_equal<std::pair<std::string,std::string>>((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v12, v9, (uint64_t *)v11[0]);
    uint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__find_equal<std::pair<std::string,std::string>>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (const void **)(v4 + 32);
        if (!std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>(a3, (const void **)(v4 + 32)))break; {
        uint64_t v4 = *v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2  = v7;
  return v5;
}

void std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x58uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(unsigned char *)(a4 + 16)  = 0;
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>,void>(v7, (uint64_t)v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16)  = 1;
}

void sub_1003B79A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>(const void **a1, const void **a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a1;
  size_t v4 = *((unsigned __int8 *)a2 + 23);
  size_t v5 = (size_t)a2[1];
  if ((v4 & 0x80u) == 0)
  {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2  = (const void **)*a2;
    size_t v6 = v5;
  }
  size_t v7 = *((unsigned __int8 *)a1 + 23);
  if ((v7 & 0x80u) == 0) {
    size_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v8 = (size_t)a1[1];
  }
  if ((v7 & 0x80u) != 0) {
    a1  = (const void **)*a1;
  }
  if (v6 >= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = v6;
  }
  int v10 = memcmp(a1, a2, v9);
  BOOL v11 = v8 < v6;
  if (v10) {
    BOOL v11 = v10 < 0;
  }
  if (v11) {
    return 1;
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v13 = v3;
  }
  else {
    uint64_t v13 = *v3;
  }
  if ((v7 & 0x80u) != 0) {
    size_t v7 = (size_t)v3[1];
  }
  if ((v4 & 0x80u) == 0)
  {
    char v14 = v2;
  }
  else
  {
    size_t v4 = (size_t)v2[1];
    char v14 = *v2;
  }
  if (v7 >= v4) {
    size_t v15 = v4;
  }
  else {
    size_t v15 = v7;
  }
  int v16 = memcmp(v14, v13, v15);
  BOOL v17 = v4 < v7;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (v17) {
    return 0;
  }
  long long v20 = (const void **)v2[3];
  std::string v19 = v2 + 3;
  unint64_t v18 = v20;
  int v21 = *((char *)v19 + 23);
  if (v21 >= 0) {
    long long v22 = v19;
  }
  else {
    long long v22 = v18;
  }
  if (v21 >= 0) {
    size_t v23 = *((unsigned __int8 *)v19 + 23);
  }
  else {
    size_t v23 = (size_t)v19[1];
  }
  char v26 = (const void **)v3[3];
  char v25 = v3 + 3;
  uint64_t v24 = v26;
  int v27 = *((char *)v25 + 23);
  if (v27 >= 0) {
    size_t v28 = *((unsigned __int8 *)v25 + 23);
  }
  else {
    size_t v28 = (size_t)v25[1];
  }
  if (v27 >= 0) {
    uint64_t v29 = v25;
  }
  else {
    uint64_t v29 = v24;
  }
  if (v23 >= v28) {
    size_t v30 = v28;
  }
  else {
    size_t v30 = v23;
  }
  int v31 = memcmp(v29, v22, v30);
  if (v31) {
    return v31 < 0;
  }
  else {
    return v28 < v23;
  }
}

__n128 std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string>&&>,std::tuple<>,void>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  size_t v4 = *a4;
  long long v5 = **a4;
  *(void *)(a2 + 16)  = *((void *)*a4 + 2);
  *(_OWORD *)a2  = v5;
  *((void *)v4 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)v4 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)size_t v4 = 0;
  __n128 result = *(__n128 *)((char *)v4 + 24);
  *(void *)(a2 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((void *)v4 + 5);
  *(__n128 *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  *((void *)v4 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((void *)v4 + 5)  = 0;
  *((void *)v4 + ot::Tlv::SetType(this, 3) = 0;
  *(void *)(a2 + 48)  = 0;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>>::reset[abi:ne180100](void **a1, void *a2)
{
  unint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::operator()[abi:ne180100]((uint64_t)(a1 + 1), v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,0>((uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(uint64_t *result, char *__src, uint64_t a3, unint64_t a4)
{
  size_t v7 = result;
  size_t v8 = (char *)*result;
  if (result[2] - *result < a4)
  {
    std::vector<unsigned char>::__vdeallocate((uint64_t)result);
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v7[2] - *v7;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a4) {
      uint64_t v10 = a4;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    __n128 result = (uint64_t *)std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    size_t v8 = (char *)v7[1];
    goto LABEL_12;
  }
  uint64_t v12 = (unsigned char *)result[1];
  uint64_t v13 = v12 - v8;
  if (v12 - v8 >= a4)
  {
LABEL_12:
    size_t v15 = a3 - (void)__src;
    if (v15) {
      __n128 result = (uint64_t *)memmove(v8, __src, v15);
    }
    int v16 = &v8[v15];
LABEL_20:
    v7[1]  = (uint64_t)v16;
    return result;
  }
  if (v12 == v8)
  {
    uint64_t v14 = *result;
  }
  else
  {
    __n128 result = (uint64_t *)memmove((void *)*result, __src, v12 - v8);
    uint64_t v14 = *v7;
    size_t v8 = (char *)v7[1];
  }
  if ((unint64_t)&v8[-v14] <= a4)
  {
    BOOL v17 = &__src[v13];
    size_t v18 = a3 - (void)&__src[v13];
    if (v18) {
      __n128 result = (uint64_t *)memmove(v8, v17, v18);
    }
    int v16 = &v8[v18];
    goto LABEL_20;
  }
  __break(0x5515u);
  return result;
}

uint64_t std::vector<otbr::Ip6Address>::__push_back_slow_path<otbr::Ip6Address const&>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 60) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<otbr::Ip6Address>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<otbr::Ip6Address>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<otbr::Ip6Address>::~__split_buffer(v10);
  return v8;
}

void sub_1003B7D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otbr::Ip6Address>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<otbr::Ip6Address>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 16;
      *(_OWORD *)(v4 - 16)  = *(_OWORD *)(v3 - 16);
      v4 -= 16;
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1]  = v5;
  uint64_t v6 = *result;
  *__n128 result = v5;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otbr::Ip6Address>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<otbr::Ip6Address>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[16 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[16 * a2];
  return a1;
}

void *std::__split_buffer<otbr::Ip6Address>::~__split_buffer(void *a1)
{
  std::__split_buffer<otbr::Ip6Address>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  __n128 result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<otbr::Ip6Address>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = v2 + ((a2 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  uint64_t v7 = (void ***)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    unint64_t v9 = (uint64_t **)v7;
    std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v12, v9, (uint64_t *)v11[0]);
    uint64_t v8 = v11[0];
    v11[0]  = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v8;
}

std::string *std::__tree<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(unsigned char *)(a4 + 16)  = 0;
  __n128 result = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>(v7, (std::string *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16)  = 1;
  return result;
}

void sub_1003B7FEC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>(int a1, std::string *this, uint64_t a3, const std::string **a4)
{
  __n128 result = std::string::basic_string(this, *a4);
  result[1].__r_.__value_.__r.__words[0]  = 0;
  return result;
}

int *otbr::Mdns::Publisher::PublishService(uint64_t a1, uint64_t a2, const std::string *a3, const std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v18, a3, a4);
  *std::map<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]((uint64_t **)(a1 + 88), (long long *)&v18)  = rep;
  if (v20 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  __n128 result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, const std::string *, const std::string *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result) {
    return otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(a1 + 216), (int)result);
  }
  return result;
}

void sub_1003B812C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *otbr::Mdns::Publisher::UpdateMdnsResponseCounters(int *result, int a2)
{
  switch(a2)
  {
    case -13:
      int v3 = result[7];
      result += 7;
      int v2 = v3;
      break;
    case -12:
      int v4 = result[6];
      result += 6;
      int v2 = v4;
      break;
    case -11:
      int v5 = result[3];
      result += 3;
      int v2 = v5;
      break;
    case -10:
      int v6 = result[2];
      result += 2;
      int v2 = v6;
      break;
    case -9:
      int v7 = result[4];
      result += 4;
      int v2 = v7;
      break;
    case -7:
      int v9 = result[1];
      ++result;
      int v2 = v9;
      break;
    case 0:
      int v2 = *result;
      break;
    default:
      int v8 = result[5];
      result += 5;
      int v2 = v8;
      break;
  }
  BOOL v10 = __CFADD__(v2, 1);
  int v11 = v2 + 1;
  if (v10)
  {
    __break(0x5500u);
    JUMPOUT(0x1003B81BCLL);
  }
  *__n128 result = v11;
  return result;
}

int *otbr::Mdns::Publisher::PublishHost(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *std::map<std::string,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>::operator[]((uint64_t **)(a1 + 112), aot::NetworkData::NetworkDataTlv::SetType(this, 2) = rep;
  __n128 result = (int *)(*(uint64_t (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a2, a3, a4);
  if (result)
  {
    return otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(a1 + 184), (int)result);
  }
  return result;
}

uint64_t otbr::Mdns::Publisher::OnServiceResolveFailed(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t a4)
{
  int v8 = (int *)(a1 + 280);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a4);
  otbr::Mdns::Publisher::UpdateMdnsResponseCounters(v8, v9);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a4);
  otbr::Mdns::Publisher::UpdateServiceInstanceResolutionEmaLatency(a1, a3, a2, v10);
  int v11 = *(uint64_t (**)(uint64_t, const std::string *, const std::string *, uint64_t))(*(void *)a1 + 120);

  return v11(a1, a2, a3, a4);
}

void otbr::Mdns::Publisher::UpdateServiceInstanceResolutionEmaLatency(uint64_t a1, const std::string *a2, const std::string *a3, int a4)
{
  uint64_t v6 = a1 + 136;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v16, a2, a3);
  int v7 = (uint64_t *)std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::find<std::pair<std::string,std::string>>(v6, (const void **)&v16.__r_.__value_.__l.__data_);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if ((uint64_t *)(a1 + 144) != v7)
  {
    v8.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v9 = v7[10];
    BOOL v10 = __OFSUB__(v8.__d_.__rep_, v9);
    int v11 = LODWORD(v8.__d_.__rep_) - v9;
    if (v10)
    {
      __break(0x5515u);
    }
    else
    {
      if (a4 == -12)
      {
LABEL_12:
        std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase(v6, v7);
        return;
      }
      int v12 = v11 / 1000000;
      int v13 = *(_DWORD *)(a1 + 324);
      if (!v13)
      {
LABEL_11:
        *(_DWORD *)(a1 + 32ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v12;
        goto LABEL_12;
      }
      BOOL v14 = __CFADD__(v12, v13);
      unsigned int v15 = v12 + v13;
      if (!v14)
      {
        int v12 = v15 >> 1;
        goto LABEL_11;
      }
    }
    __break(0x5500u);
  }
}

void sub_1003B8480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t otbr::Mdns::Publisher::OnHostResolveFailed(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = (int *)(a1 + 248);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a3);
  otbr::Mdns::Publisher::UpdateMdnsResponseCounters(v6, v7);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a3);
  otbr::Mdns::Publisher::UpdateHostResolutionEmaLatency(a1, a2, v8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, const void **, uint64_t))(*(void *)a1 + 128);

  return v9(a1, a2, a3);
}

uint64_t otbr::Mdns::Publisher::UpdateHostResolutionEmaLatency(uint64_t a1, const void **a2, int a3)
{
  uint64_t v5 = a1 + 160;
  uint64_t result = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(a1 + 160, a2);
  if (a1 + 168 == result) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t result = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v8 = *(void *)(v7 + 56);
  BOOL v9 = __OFSUB__(result, v8);
  int v10 = result - v8;
  if (v9)
  {
    __break(0x5515u);
    goto LABEL_13;
  }
  if (a3 != -12)
  {
    int v11 = v10 / 1000000;
    int v12 = *(_DWORD *)(a1 + 320);
    if (!v12)
    {
LABEL_7:
      *(_DWORD *)(a1 + 32ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v11;
      goto LABEL_8;
    }
    BOOL v13 = __CFADD__(v11, v12);
    unsigned int v14 = v11 + v12;
    if (!v13)
    {
      int v11 = v14 >> 1;
      goto LABEL_7;
    }
LABEL_13:
    __break(0x5500u);
    return result;
  }
LABEL_8:

  return std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::erase(v5, v7);
}

char *otbr::Mdns::Publisher::EncodeTxtData(char *result, uint64_t *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (*(void *)result == v3) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = *(char *)(v2 + 23) < 0 ? *(void *)(v2 + 8) : *(unsigned __int8 *)(v2 + 23);
    BOOL v6 = __CFADD__(v5, 1);
    uint64_t v7 = v5 + 1;
    if (v6) {
      break;
    }
    uint64_t v8 = *(void *)(v2 + 32) - *(void *)(v2 + 24);
    BOOL v6 = __CFADD__(v7, v8);
    unint64_t v9 = v7 + v8;
    if (v6) {
      break;
    }
    if (v9 > 0xFF) {
      return (char *)4294967286;
    }
    char v17 = v9;
    int v10 = (unsigned char *)a2[1];
    if ((unint64_t)v10 >= a2[2])
    {
      int v11 = (char *)std::vector<unsigned char>::__push_back_slow_path<unsigned char>(a2, &v17);
    }
    else
    {
      unsigned char *v10 = v9;
      int v11 = v10 + 1;
    }
    a2[1]  = (uint64_t)v11;
    if (*(char *)(v2 + 23) < 0)
    {
      BOOL v13 = *(char **)v2;
      uint64_t v12 = *(void *)(v2 + 8);
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v2 + 23);
      BOOL v13 = (char *)v2;
    }
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char *)a2, v11, v13, &v13[v12], v12);
    char v16 = 61;
    unsigned int v14 = (unsigned char *)a2[1];
    if ((unint64_t)v14 >= a2[2])
    {
      unsigned int v15 = (char *)std::vector<unsigned char>::__push_back_slow_path<unsigned char>(a2, &v16);
    }
    else
    {
      unsigned char *v14 = 61;
      unsigned int v15 = v14 + 1;
    }
    a2[1]  = (uint64_t)v15;
    uint64_t result = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)a2, v15, *(char **)(v2 + 24), *(char **)(v2 + 32), *(void *)(v2 + 32) - *(void *)(v2 + 24));
    v2 += 48;
    if (v2 == v3) {
      return 0;
    }
  }
  __break(0x5500u);
  return result;
}

uint64_t otbr::Mdns::Publisher::DecodeTxtData(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  int v6 = 0;
  while (a3 > (unsigned __int16)v6)
  {
    int v7 = *(unsigned __int8 *)(a2 + (unsigned __int16)v6);
    unsigned int v8 = (unsigned __int16)(v6 + 1);
    int v9 = v6 + 1 + v7;
    unsigned __int16 v10 = v6 + 1;
    unsigned __int16 v11 = v6 + 1;
    if (v8 < (unsigned __int16)(v6 + 1 + v7))
    {
      uint64_t v12 = (unsigned __int16)v6 + 1;
      unsigned __int16 v10 = v6 + v7 + 1;
      while (*(unsigned char *)(a2 + v12) != 61)
      {
        if ((unsigned __int16)(v6 + 1 + v7) == (unsigned __int16)++v12)
        {
          unsigned __int16 v11 = v6 + v7 + 1;
          goto LABEL_9;
        }
      }
      unsigned __int16 v11 = v12 + 1;
      unsigned __int16 v10 = v12;
    }
LABEL_9:
    uint64_t v19 = a2 + (unsigned __int16)(v6 + 1);
    unsigned int v18 = v10 - v8;
    uint64_t v17 = a2 + v11;
    int v16 = (unsigned __int16)(v6 + 1 + v7) - v11;
    unint64_t v13 = a1[1];
    if (v13 >= a1[2])
    {
      uint64_t v14 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const*,int,unsigned char const*,int>(a1, (uint64_t)&v19, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16);
    }
    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const*,int,unsigned char const*,int>((uint64_t)a1, (uint64_t)&v19, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16);
      uint64_t v14 = v13 + 48;
    }
    a1[1]  = v14;
    int v6 = v9;
    if (a3 < (unsigned __int16)v9) {
      return 4294967288;
    }
  }
  return 0;
}

uint64_t otbr::Mdns::Publisher::RemoveSubscriptionCallbacks(otbr::Mdns::Publisher *this, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!a2) {
    otbr::Mdns::Publisher::RemoveSubscriptionCallbacks();
  }
  uint64_t result = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__erase_unique<unsigned long long>((uint64_t)this + 64, &v3);
  if (result != 1) {
    otbr::Mdns::Publisher::RemoveSubscriptionCallbacks();
  }
  return result;
}

unint64_t otbr::Mdns::Publisher::AddSubscriptionCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 == -1) {
    __break(0x5500u);
  }
  *(void *)(a1 + 56)  = v3 + 1;
  unint64_t v6 = v3;
  if (!v3) {
    otbr::Mdns::Publisher::AddSubscriptionCallbacks();
  }
  int v4 = (uint64_t **)(a1 + 64);
  std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100]<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>,0>((uint64_t)v7, a2, a3);
  std::map<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>::emplace[abi:ne180100]<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>(v4, &v6, (uint64_t)v7);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::~__value_func[abi:ne180100](v7);
  return v6;
}

void sub_1003B895C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::~__value_func[abi:ne180100]((void *)(v2 + 32));
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>::emplace[abi:ne180100]<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  return std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>(a1, a2, a2, a3);
}

void otbr::Mdns::Publisher::OnServiceResolved(uint64_t a1, std::string *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v26 = 0;
  int v27 = 0;
  unint64_t v28 = 0;
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    LOBYTE(v1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = (_BYTE)a2;
  }
  else {
    std::string::size_type v11 = a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v12 = (const std::string *)(a3 + 8);
  unint64_t v13 = (uint64_t *)(a3 + 32);
  otbrLog(6u, "MDNS", "Service %s is resolved successfully: %s %s host %s addresses %zu", a4, a5, a6, a7, a8, v11);
  otbr::DnsUtils::CheckServiceNameSanity(a2);
  if (!*a3) {
    otbr::DnsUtils::CheckHostnameSanity(v13);
  }
  int v14 = *(_DWORD *)(a1 + 280);
  BOOL v15 = __CFADD__(v14, 1);
  int v16 = v14 + 1;
  if (v15)
  {
    __break(0x5500u);
  }
  else
  {
    *(_DWORD *)(a1 + 28ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v16;
    otbr::Mdns::Publisher::UpdateServiceInstanceResolutionEmaLatency(a1, v12, a2, 0);
    std::vector<unsigned long long>::reserve((uint64_t *)&v26, *(void *)(a1 + 80));
    uint64_t v17 = *(void ***)(a1 + 64);
    uint64_t v29 = v17;
    unsigned int v18 = (void **)(a1 + 72);
    while (v17 != v18)
    {
      uint64_t v19 = (unint64_t *)(v17 + 4);
      char v20 = v27;
      if ((unint64_t)v27 >= v28)
      {
        uint64_t v21 = std::vector<unsigned long long>::__push_back_slow_path<unsigned long long const&>((uint64_t *)&v26, v19);
      }
      else
      {
        unint64_t *v27 = *v19;
        uint64_t v21 = (uint64_t)(v20 + 1);
      }
      int v27 = (unint64_t *)v21;
      std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v29);
      uint64_t v17 = v29;
    }
    long long v22 = v26;
    size_t v23 = v27;
    if (v26 != v27)
    {
      uint64_t v24 = a1 + 64;
      do
      {
        char v25 = (void **)std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>(v24, v22);
        if (v18 != v25 && v25[8]) {
          std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100]((uint64_t)(v25 + 5));
        }
        ++v22;
      }
      while (v22 != v23);
    }
    uint64_t v29 = (void **)&v26;
    std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

void sub_1003B8B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 56)  = &a15;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned long long>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 3)
  {
    uint64_t v2 = result;
    if (a2 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v3, a2, (result[1] - *result) >> 3, (uint64_t)(result + 2));
    std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(v2, v3);
    return std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(v3);
  }
  return result;
}

void sub_1003B8C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

void otbr::Mdns::Publisher::OnServiceRemoved(uint64_t a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v18[0]  = 0;
  *(_OWORD *)uint64_t v19 = 0u;
  memset(__p, 0, sizeof(__p));
  __int16 v21 = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  if (*(char *)(a4 + 23) >= 0) {
    LOBYTE(v1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = a4;
  }
  else {
    uint64_t v12 = *(void *)a4;
  }
  otbrLog(6u, "MDNS", "Service %s.%s is removed from netif %u.", a4, a5, a6, a7, a8, v12);
  v18[0]  = 1;
  LODWORD(v19[0])  = a2;
  std::string::operator=((std::string *)((char *)v19 + 4), (const std::string *)a4);
  otbr::Mdns::Publisher::OnServiceResolved(a1, a3, v18, v13, v14, v15, v16, v17);
  uint64_t v24 = (void **)v22;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v24);
  uint64_t v24 = (void **)((char *)&__p[4] + 4);
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v24);
  if (SBYTE3(__p[4]) < 0) {
    operator delete(*(void **)((char *)&__p[1] + 4));
  }
  if (SBYTE3(__p[1]) < 0) {
    operator delete(*(void **)((char *)v19 + 4));
  }
}

void sub_1003B8D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  otbr::Mdns::Publisher::DiscoveredInstanceInfo::~DiscoveredInstanceInfo((void **)va);
  _Unwind_Resume(a1);
}

void otbr::Mdns::Publisher::OnHostResolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(char *)(a2 + 23) >= 0) {
    LOBYTE(v1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  }
  else {
    std::string::size_type v11 = *(const void **)a2;
  }
  otbrLog(6u, "MDNS", "Host %s is resolved successfully: host %s addresses %zu ttl %u", a4, a5, a6, a7, a8, (char)v11);
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  if (v12) {
    otbr::DnsUtils::CheckHostnameSanity((uint64_t *)a3);
  }
  int v13 = *(_DWORD *)(a1 + 248);
  BOOL v14 = __CFADD__(v13, 1);
  int v15 = v13 + 1;
  if (v14)
  {
    __break(0x5500u);
  }
  else
  {
    *(_DWORD *)(a1 + 248)  = v15;
    otbr::Mdns::Publisher::UpdateHostResolutionEmaLatency(a1, (const void **)a2, 0);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v18 = v16;
    uint64_t v17 = a1 + 72;
    while (v16 != v17)
    {
      if (*(void *)(v16 + 96)) {
        std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::operator()[abi:ne180100](v16 + 72);
      }
      std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v18);
      uint64_t v16 = v18;
    }
  }
}

__n128 otbr::Mdns::Publisher::SortSubTypeList@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void>>(*(void *)a1, *(const void ***)(a1 + 8), (uint64_t)&v5);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2  = *(_OWORD *)a1;
  *(void *)(a2 + 16)  = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0;
  *(void *)(a1 + 16)  = 0;
  *(void *)a1  = 0;
  return result;
}

__n128 otbr::Mdns::Publisher::SortTxtList@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(void ***)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v4) >> 4))) ^ 0x7E;
  if ((void **)v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,false>(v4, v5, (uint64_t)&v9, v7, 1);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2  = *(_OWORD *)a1;
  *(void *)(a2 + 16)  = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0;
  *(void *)(a1 + 16)  = 0;
  *(void *)a1  = 0;
  return result;
}

__n128 otbr::Mdns::Publisher::SortAddressList@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void>>(*(unint64_t **)a1, *(unint64_t **)(a1 + 8), (uint64_t)&v5);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2  = *(_OWORD *)a1;
  *(void *)(a2 + 16)  = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0;
  *(void *)(a1 + 16)  = 0;
  *(void *)a1  = 0;
  return result;
}

void otbr::Mdns::Publisher::MakeFullServiceName(const void **a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 == -1)
  {
    __break(0x5500u);
  }
  else
  {
    p_p  = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p  = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*((char *)a1 + 23) >= 0) {
        unsigned int v8 = a1;
      }
      else {
        unsigned int v8 = *a1;
      }
      memmove(p_p, v8, v5);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v5)  = 46;
    char v9 = std::string::append[abi:ne180100](&__p, a2);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2]  = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_  = v10;
    v9->__r_.__value_.__l.__size_  = 0;
    v9->__r_.__value_.__r.__words[2]  = 0;
    v9->__r_.__value_.__r.__words[0]  = 0;
    std::string::size_type v11 = std::string::append(&v13, ".local");
    *a3  = *v11;
    v11->__r_.__value_.__l.__size_  = 0;
    v11->__r_.__value_.__r.__words[2]  = 0;
    v11->__r_.__value_.__r.__words[0]  = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1003B9088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::Publisher::MakeFullHostName@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a2;
  if (*((char *)a1 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  if (v4 >= 0xFFFFFFFFFFFFFFFALL)
  {
    __break(0x5500u);
  }
  else
  {
    uint64_t result = std::string::basic_string[abi:ne180100](a2, v4 + 6);
    if (*(char *)(result + 23) >= 0) {
      size_t v5 = (void *)result;
    }
    else {
      size_t v5 = *(void **)result;
    }
    if (v4)
    {
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v6 = a1;
      }
      else {
        unint64_t v6 = *a1;
      }
      uint64_t result = (uint64_t)memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, ".local");
  }
  return result;
}

void otbr::Mdns::Publisher::AddServiceRegistration(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = (uint64_t **)(a1 + 8);
  otbr::Mdns::Publisher::MakeFullServiceName((const void **)(*a2 + 72), (const std::string::value_type *)(*a2 + 96), &__p);
  std::map<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>::emplace[abi:ne180100]<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>(v3, (const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1003B91C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>::emplace[abi:ne180100]<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>(uint64_t **a1, const void **a2, unint64_t *a3)
{
  return std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__emplace_unique_key_args<std::string,std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>(a1, a2, (__n128 *)a2, a3);
}

void otbr::Mdns::Publisher::RemoveServiceRegistration(uint64_t a1, uint64_t a2, const std::string::value_type *a3, int a4)
{
  uint64_t v7 = a1 + 8;
  otbr::Mdns::Publisher::MakeFullServiceName((const void **)a2, a3, &__p);
  std::string v13 = (uint64_t *)std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(v7, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0]  = 0;
  if (*(char *)(a2 + 23) >= 0) {
    LOBYTE(v1ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  }
  else {
    BOOL v14 = *(const void **)a2;
  }
  otbrLog(6u, "MDNS", "Removing service %s.%s", v8, v9, v10, v11, v12, (char)v14);
  if ((uint64_t *)(a1 + 16) != v13)
  {
    std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>::operator=[abi:ne180100]((uint64_t *)&__p, v13 + 7);
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::erase(v7, v13);
    otbr::Mdns::Publisher::ServiceRegistration::Complete((std::string *)__p.__r_.__value_.__l.__data_, a4);
    std::string::size_type v15 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0]  = 0;
    if (v15) {
      (*(void (**)(std::string::size_type))(*(void *)v15 + 8))(v15);
    }
  }
}

void sub_1003B931C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2  = 0;
  uint64_t v4 = *a1;
  *a1  = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void *otbr::Mdns::Publisher::ServiceRegistration::Complete(std::string *a1, int a2)
{
  otbr::Mdns::Publisher::ServiceRegistration::OnComplete(a1, a2);

  return otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(a1);
}

uint64_t otbr::Mdns::Publisher::FindServiceRegistration(uint64_t a1, const void **a2, const std::string::value_type *a3)
{
  uint64_t v4 = a1 + 8;
  otbr::Mdns::Publisher::MakeFullServiceName(a2, a3, &__p);
  uint64_t v5 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(v4, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a1 + 16 == v5) {
    return 0;
  }
  else {
    return *(void *)(v5 + 56);
  }
}

void sub_1003B9460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::Publisher::HandleDuplicateServiceRegistration@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, std::string::value_type *a4@<X3>, unsigned __int8 **a5@<X4>, int a6@<W5>, unsigned __int8 **a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  ServiceRegistration  = otbr::Mdns::Publisher::FindServiceRegistration(a1, (const void **)a3, a4);
  if (ServiceRegistration)
  {
    uint64_t v19 = ServiceRegistration;
    if (otbr::Mdns::Publisher::ServiceRegistration::IsOutdated(ServiceRegistration, a2, (unsigned __int8 *)a3, (unsigned __int8 *)a4, a5, a6, a7))
    {
      if (*(char *)(a3 + 23) >= 0) {
        LOBYTE(v25)  = a3;
      }
      else {
        char v25 = *(const void **)a3;
      }
      otbrLog(6u, "MDNS", "Removing existing service %s.%s: outdated", v20, v21, v22, v23, v24, (char)v25);
      otbr::Mdns::Publisher::RemoveServiceRegistration(a1, a3, a4, -12);
    }
    else if (*(void *)(v19 + 32))
    {
      std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>((void *)(v19 + 8), &v34);
      std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>(a8, &v32);
      uint64_t v26 = v34;
      int v27 = v35;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v28 = v32;
      uint64_t v29 = v33;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v40 = v26;
      char v41 = v27;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v42 = v28;
      uint64_t v43 = v29;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      size_t v30 = operator new(0x30uLL);
      void *v30 = off_10049FB30;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl((uint64_t)(v30 + 2), (uint64_t)&v40);
      v44[3]  = v30;
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      otbr::OnceCallback<void ()(otbrError)>::operator=((void *)(v19 + 8), v44);
      std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](v44);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
    }
    else
    {
      otbr::OnceCallback<void ()(otbrError)>::operator()(a8);
    }
  }
  return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a9, a8);
}

void sub_1003B9688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::ServiceRegistration::IsOutdated(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 **a5, int a6, unsigned __int8 **a7)
{
  if (*(char *)(a1 + 71) < 0) {
    size_t v13 = *(void *)(a1 + 56);
  }
  else {
    size_t v13 = *(unsigned __int8 *)(a1 + 71);
  }
  uint64_t v14 = a2[23];
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)a2 + 1);
  }
  if (v13 != v14) {
    return 1;
  }
  uint64_t v16 = (const void **)(a1 + 48);
  if (v15 < 0) {
    a2  = *(unsigned __int8 **)a2;
  }
  if ((*(unsigned char *)(a1 + 71) & 0x80) != 0)
  {
    if (memcmp(*v16, a2, v13)) {
      return 1;
    }
  }
  else if (v13)
  {
    while (*(unsigned __int8 *)v16 == *a2)
    {
      uint64_t v16 = (const void **)((char *)v16 + 1);
      ++a2;
      if (!--v13) {
        goto LABEL_15;
      }
    }
    return 1;
  }
LABEL_15:
  if (*(char *)(a1 + 95) < 0) {
    size_t v17 = *(void *)(a1 + 80);
  }
  else {
    size_t v17 = *(unsigned __int8 *)(a1 + 95);
  }
  uint64_t v18 = a3[23];
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *((void *)a3 + 1);
  }
  if (v17 != v18) {
    return 1;
  }
  uint64_t v20 = (const void **)(a1 + 72);
  if (v19 >= 0) {
    uint64_t v21 = a3;
  }
  else {
    uint64_t v21 = *(unsigned __int8 **)a3;
  }
  if ((*(unsigned char *)(a1 + 95) & 0x80) != 0)
  {
    if (memcmp(*v20, v21, v17)) {
      return 1;
    }
  }
  else if (v17)
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      uint64_t v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v17) {
        goto LABEL_30;
      }
    }
    return 1;
  }
LABEL_30:
  if (*(char *)(a1 + 119) < 0) {
    size_t v22 = *(void *)(a1 + 104);
  }
  else {
    size_t v22 = *(unsigned __int8 *)(a1 + 119);
  }
  uint64_t v23 = a4[23];
  int v24 = (char)v23;
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = *((void *)a4 + 1);
  }
  if (v22 != v23) {
    return 1;
  }
  char v25 = (const void **)(a1 + 96);
  if (v24 >= 0) {
    uint64_t v26 = a4;
  }
  else {
    uint64_t v26 = *(unsigned __int8 **)a4;
  }
  if ((*(unsigned char *)(a1 + 119) & 0x80) != 0)
  {
    if (!memcmp(*v25, v26, v22)) {
      goto LABEL_45;
    }
    return 1;
  }
  if (v22)
  {
    while (*(unsigned __int8 *)v25 == *v26)
    {
      char v25 = (const void **)((char *)v25 + 1);
      ++v26;
      if (!--v22) {
        goto LABEL_45;
      }
    }
    return 1;
  }
LABEL_45:
  int v27 = *(unsigned __int8 **)(a1 + 120);
  uint64_t v28 = *(unsigned __int8 **)(a1 + 128);
  size_t v30 = a5;
  uint64_t v29 = *a5;
  if (v28 - v27 != v30[1] - v29) {
    return 1;
  }
  while (v27 != v28)
  {
    if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((uint64_t)&v37, v27, v29)) {
      return 1;
    }
    v27 += 24;
    v29 += 24;
  }
  if (*(unsigned __int16 *)(a1 + 144) != a6) {
    return 1;
  }
  int v31 = *(unsigned __int8 **)(a1 + 152);
  uint64_t v32 = *(unsigned __int8 **)(a1 + 160);
  uint64_t v34 = a7;
  uint64_t v33 = *a7;
  if (v32 - v31 != v34[1] - v33) {
    return 1;
  }
  if (v31 == v32) {
    return 0;
  }
  do
  {
    BOOL v35 = otbr::Mdns::Publisher::TxtEntry::operator==(v31, v33);
    if (!v35) {
      break;
    }
    v31 += 48;
    v33 += 48;
  }
  while (v31 != v32);
  return !v35;
}

uint64_t otbr::Mdns::Publisher::HandleDuplicateHostRegistration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  HostRegistration  = otbr::Mdns::Publisher::FindHostRegistration(a1, (const void **)a2);
  if (HostRegistration)
  {
    uint64_t v11 = HostRegistration;
    if (otbr::Mdns::Publisher::HostRegistration::IsOutdated(HostRegistration, (unsigned __int8 *)a2, a3))
    {
      if (*(char *)(a2 + 23) >= 0) {
        LOBYTE(v1ot::ThreadTlv::SetType(this, 7) = a2;
      }
      else {
        size_t v17 = *(const void **)a2;
      }
      otbrLog(6u, "MDNS", "Removing existing host %s: outdated", v12, v13, v14, v15, v16, (char)v17);
      otbr::Mdns::Publisher::RemoveHostRegistration(a1, v11 + 48, -12);
    }
    else if (*(void *)(v11 + 32))
    {
      std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>((void *)(v11 + 8), &v26);
      std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>(a4, &v24);
      uint64_t v18 = v26;
      int v19 = v27;
      uint64_t v26 = 0;
      int v27 = 0;
      uint64_t v20 = v24;
      uint64_t v21 = v25;
      uint64_t v24 = 0;
      char v25 = 0;
      uint64_t v32 = v18;
      uint64_t v33 = v19;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v34 = v20;
      BOOL v35 = v21;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      size_t v22 = operator new(0x30uLL);
      *size_t v22 = off_10049FC38;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl((uint64_t)(v22 + 2), (uint64_t)&v32);
      v36[3]  = v22;
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      otbr::OnceCallback<void ()(otbrError)>::operator=((void *)(v11 + 8), v36);
      std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](v36);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
    else
    {
      otbr::OnceCallback<void ()(otbrError)>::operator()(a4);
    }
  }
  return otbr::OnceCallback<void ()(otbrError)>::OnceCallback(a5, a4);
}

void sub_1003B9B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t otbr::Mdns::Publisher::FindHostRegistration(uint64_t a1, const void **a2)
{
  uint64_t v3 = a1 + 32;
  otbr::Mdns::Publisher::MakeFullHostName(a2, (uint64_t)__p);
  uint64_t v4 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(v3, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 40 == v4) {
    return 0;
  }
  else {
    return *(void *)(v4 + 56);
  }
}

void sub_1003B9BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otbr::Mdns::Publisher::HostRegistration::IsOutdated(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(char *)(a1 + 71) < 0) {
    size_t v5 = *(void *)(a1 + 56);
  }
  else {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 1;
  }
  uint64_t v8 = (const void **)(a1 + 48);
  if (v7 < 0) {
    a2  = *(unsigned __int8 **)a2;
  }
  if ((*(unsigned char *)(a1 + 71) & 0x80) != 0)
  {
    if (memcmp(*v8, a2, v5)) {
      return 1;
    }
  }
  else if (v5)
  {
    while (*(unsigned __int8 *)v8 == *a2)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++a2;
      if (!--v5) {
        goto LABEL_15;
      }
    }
    return 1;
  }
LABEL_15:
  uint64_t v10 = *(char **)(a1 + 72);
  uint64_t v9 = *(char **)(a1 + 80);
  uint64_t v11 = *(void **)a3;
  if (v9 - v10 != *(void *)(a3 + 8) - *(void *)a3) {
    return 1;
  }
  if (v10 != v9)
  {
    while (*(void *)v10 == *v11 && *((void *)v10 + 1) == v11[1])
    {
      uint64_t result = 0;
      v10 += 16;
      v11 += 2;
      if (v10 == v9) {
        return result;
      }
    }
    return 1;
  }
  return 0;
}

void otbr::Mdns::Publisher::RemoveHostRegistration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1 + 32;
  otbr::Mdns::Publisher::MakeFullHostName((const void **)a2, (uint64_t)__p);
  uint64_t v12 = (uint64_t *)std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(v6, (const void **)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a2 + 23) >= 0) {
    LOBYTE(v1ot::Tlv::SetType(this, 3) = a2;
  }
  else {
    uint64_t v13 = *(const void **)a2;
  }
  __p[0]  = 0;
  otbrLog(6u, "MDNS", "Removing host %s", v7, v8, v9, v10, v11, (char)v13);
  if ((uint64_t *)(a1 + 40) != v12)
  {
    std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>::operator=[abi:ne180100]((uint64_t *)__p, v12 + 7);
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::erase(v6, v12);
    otbr::Mdns::Publisher::HostRegistration::Complete((void *)__p[0], a3);
    if (*(char *)(a2 + 23) >= 0) {
      LOBYTE(v1ot::NetworkDiagnostic::Tlv::SetType(this, 9) = a2;
    }
    else {
      int v19 = *(const void **)a2;
    }
    otbrLog(6u, "MDNS", "Removed host %s", v14, v15, v16, v17, v18, (char)v19);
    uint64_t v20 = __p[0];
    __p[0]  = 0;
    if (v20) {
      (*(void (**)(void *))(*(void *)v20 + 8))(v20);
    }
  }
}

void sub_1003B9E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::Mdns::Publisher::AddHostRegistration(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 32);
  otbr::Mdns::Publisher::MakeFullHostName((const void **)(*a2 + 48), (uint64_t)__p);
  std::map<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>::emplace[abi:ne180100]<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>(v3, (const void **)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003B9EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *otbr::Mdns::Publisher::HostRegistration::Complete(void *a1, int a2)
{
  otbr::Mdns::Publisher::HostRegistration::OnComplete((uint64_t)a1, a2);

  return otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(a1);
}

void otbr::Mdns::Publisher::Registration::~Registration(otbr::Mdns::Publisher::Registration *this)
{
  *(void *)this  = off_10049FAB0;
  otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(this);
  std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100]((void *)this + 1);
}

{
  uint64_t vars8;

  otbr::Mdns::Publisher::Registration::~Registration(this);

  operator delete();
}

void *otbr::Mdns::Publisher::Registration::TriggerCompleteCallback(void *result)
{
  if (result[4]) {
    return otbr::OnceCallback<void ()(otbrError)>::operator()(result + 1);
  }
  return result;
}

void otbr::Mdns::Publisher::ServiceRegistration::OnComplete(const std::string *a1, int a2)
{
  if (a1[1].__r_.__value_.__l.__size_)
  {
    otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(a1[1].__r_.__value_.__r.__words[2] + 216), a2);
    uint64_t v4 = a1[1].__r_.__value_.__r.__words[2];
    otbr::Mdns::Publisher::UpdateServiceRegistrationEmaLatency(v4, a1 + 3, a1 + 4, a2);
  }
}

void otbr::Mdns::Publisher::UpdateServiceRegistrationEmaLatency(uint64_t a1, const std::string *a2, const std::string *a3, int a4)
{
  uint64_t v6 = a1 + 88;
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v16, a2, a3);
  uint64_t v7 = (uint64_t *)std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::find<std::pair<std::string,std::string>>(v6, (const void **)&v16.__r_.__value_.__l.__data_);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if ((uint64_t *)(a1 + 96) != v7)
  {
    v8.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v9 = v7[10];
    BOOL v10 = __OFSUB__(v8.__d_.__rep_, v9);
    int v11 = LODWORD(v8.__d_.__rep_) - v9;
    if (v10)
    {
      __break(0x5515u);
    }
    else
    {
      if (a4 == -12)
      {
LABEL_12:
        std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase(v6, v7);
        return;
      }
      int v12 = v11 / 1000000;
      int v13 = *(_DWORD *)(a1 + 316);
      if (!v13)
      {
LABEL_11:
        *(_DWORD *)(a1 + 316)  = v12;
        goto LABEL_12;
      }
      BOOL v14 = __CFADD__(v12, v13);
      unsigned int v15 = v12 + v13;
      if (!v14)
      {
        int v12 = v15 >> 1;
        goto LABEL_11;
      }
    }
    __break(0x5500u);
  }
}

void sub_1003BA0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t otbr::Mdns::Publisher::HostRegistration::OnComplete(uint64_t result, int a2)
{
  if (*(void *)(result + 32))
  {
    uint64_t v3 = result;
    otbr::Mdns::Publisher::UpdateMdnsResponseCounters((int *)(*(void *)(result + 40) + 184), a2);
    uint64_t v4 = *(void *)(v3 + 40);
    return otbr::Mdns::Publisher::UpdateHostRegistrationEmaLatency(v4, (const void **)(v3 + 48), a2);
  }
  return result;
}

uint64_t otbr::Mdns::Publisher::UpdateHostRegistrationEmaLatency(uint64_t a1, const void **a2, int a3)
{
  uint64_t v5 = a1 + 112;
  uint64_t result = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(a1 + 112, a2);
  if (a1 + 120 == result) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t result = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v8 = *(void *)(v7 + 56);
  BOOL v9 = __OFSUB__(result, v8);
  int v10 = result - v8;
  if (v9)
  {
    __break(0x5515u);
    goto LABEL_13;
  }
  if (a3 != -12)
  {
    int v11 = v10 / 1000000;
    int v12 = *(_DWORD *)(a1 + 312);
    if (!v12)
    {
LABEL_7:
      *(_DWORD *)(a1 + 31ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v11;
      goto LABEL_8;
    }
    BOOL v13 = __CFADD__(v11, v12);
    unsigned int v14 = v11 + v12;
    if (!v13)
    {
      int v11 = v14 >> 1;
      goto LABEL_7;
    }
LABEL_13:
    __break(0x5500u);
    return result;
  }
LABEL_8:

  return std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::erase(v5, v7);
}

unsigned int *otbr::Mdns::Publisher::UpdateEmaLatency(unsigned int *result, unsigned int a2, int a3)
{
  if (a3 != -12)
  {
    unsigned int v3 = *result;
    if (*result)
    {
      BOOL v4 = __CFADD__(a2, v3);
      unsigned int v5 = a2 + v3;
      if (v4)
      {
        __break(0x5500u);
        return result;
      }
      a2  = v5 >> 1;
    }
    *uint64_t result = a2;
  }
  return result;
}

uint64_t std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100]<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::__value_func[abi:ne180100](v5 + 32, a3);
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  *unsigned int v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  *unsigned int v3 = 0;
  return a1;
}

uint64_t std::vector<unsigned char>::__push_back_slow_path<unsigned char>(uint64_t *a1, unsigned char *a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (2 * v6 > v3) {
    unint64_t v3 = 2 * v6;
  }
  if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v7 = v3;
  }
  std::__split_buffer<unsigned char>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<unsigned char>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)v10);
  return v8;
}

void sub_1003BA438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned char>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  while (v3 != v2)
  {
    char v5 = *(unsigned char *)--v3;
    *(unsigned char *)--uint64_t v4 = v5;
  }
  a2[1]  = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<unsigned char>::__split_buffer(void *a1, size_t __sz, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0;
  a1[4]  = a4;
  if (__sz) {
    uint64_t v7 = (char *)operator new(__sz);
  }
  else {
    uint64_t v7 = 0;
  }
  *a1  = v7;
  a1[1]  = &v7[a3];
  a1[2]  = &v7[a3];
  a1[3]  = &v7[__sz];
  return a1;
}

uint64_t std::__split_buffer<unsigned char>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<unsigned char>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16) != a2) {
    *(void *)(result + 16)  = a2;
  }
  return result;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(char *result, char *a2, char *a3, char *a4, uint64_t a5)
{
  char v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v8 = (void **)result;
  uint64_t v9 = *((void *)result + 2);
  unint64_t v10 = *((void *)result + 1);
  if ((uint64_t)(v9 - v10) < a5)
  {
    int v11 = *(unsigned char **)result;
    unint64_t v12 = v10 - *(void *)result;
    BOOL v13 = __CFADD__(v12, a5);
    unint64_t v14 = v12 + a5;
    if (v13)
    {
      __break(0x5500u);
    }
    else if ((v14 & 0x8000000000000000) == 0)
    {
      uint64_t v15 = a2 - v11;
      unint64_t v16 = v9 - (void)v11;
      if (2 * v16 > v14) {
        unint64_t v14 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v14;
      }
      std::__split_buffer<unsigned char>::__split_buffer(v20, v17, v15, (uint64_t)(result + 16));
      std::__split_buffer<unsigned char>::__construct_at_end_with_size<std::__wrap_iter<char const*>>((uint64_t)v20, a3, a5);
      char v5 = (char *)std::vector<unsigned char>::__swap_out_circular_buffer(v8, (uint64_t)v20, v5);
      std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)v20);
      return v5;
    }
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = v10 - (void)a2;
  if ((uint64_t)(v10 - (void)a2) >= a5)
  {
    int v19 = &a3[a5];
    goto LABEL_16;
  }
  if (!__OFSUB__(a5, v18))
  {
    int v19 = &a3[v18];
    std::vector<unsigned char>::__construct_at_end<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((uint64_t)result, &a3[v18], a4);
    if (v18 < 1) {
      return v5;
    }
LABEL_16:
    std::vector<unsigned char>::__move_range(v8, v5, v10, &v5[a5]);
    if (v19 != a3) {
      memmove(v5, a3, v19 - a3);
    }
    return v5;
  }
  __break(0x5515u);
  return result;
}

void sub_1003BA6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *std::vector<unsigned char>::__construct_at_end<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<unsigned char>,char const*,char const*,unsigned char *>(a1 + 16, a2, a3, *(unsigned char **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_1003BA6E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__move_range(void *result, char *a2, unint64_t a3, unsigned char *a4)
{
  uint64_t v4 = (unsigned char *)result[1];
  char v5 = &a2[v4 - a4];
  uint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    char v7 = *v5++;
    *v6++  = v7;
  }
  result[1]  = v6;
  if (v4 != a4) {
    return memmove(a4, a2, v4 - a4);
  }
  return result;
}

uint64_t std::__split_buffer<unsigned char>::__construct_at_end_with_size<std::__wrap_iter<char const*>>(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned char **)(result + 16);
  if (a3)
  {
    uint64_t v4 = &v3[a3];
    do
    {
      char v5 = *a2++;
      *v3++  = v5;
      --a3;
    }
    while (a3);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16)  = v3;
  return result;
}

uint64_t std::vector<unsigned char>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = __src;
    do
    {
      char v9 = *--v8;
      *(unsigned char *)--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8)  = v7;
  unint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src) {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
  }
  *(void *)(a2 + 16)  = v11 + v12;
  BOOL v13 = (char *)*a1;
  *a1  = *(void **)(a2 + 8);
  *(void *)(a2 + 8)  = v13;
  unint64_t v14 = a1[1];
  a1[1]  = *(void **)(a2 + 16);
  *(void *)(a2 + 16)  = v14;
  uint64_t v15 = a1[2];
  a1[2]  = *(void **)(a2 + 24);
  *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v15;
  *(void *)a2  = *(void *)(a2 + 8);
  return v5;
}

unsigned char *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<unsigned char>,char const*,char const*,unsigned char *>(uint64_t a1, char *a2, char *a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  char v9 = a4;
  v7[0]  = a1;
  v7[1]  = &v9;
  void v7[2] = &v10;
  while (a2 != a3)
  {
    char v5 = *a2++;
    *uint64_t v4 = v5;
    uint64_t v4 = ++v10;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<unsigned char>,unsigned char *>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<unsigned char>,unsigned char *>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    boost::any::holder<BOOL>::~holder(a1);
  }
  return a1;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, char *a2, char *a3, char *a4, uint64_t a5)
{
  char v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  char v8 = result;
  uint64_t v9 = *((void *)result + 2);
  unint64_t v10 = *((void *)result + 1);
  if ((uint64_t)(v9 - v10) < a5)
  {
    uint64_t v11 = *(void *)result;
    unint64_t v12 = v10 - *(void *)result;
    BOOL v13 = __CFADD__(v12, a5);
    unint64_t v14 = v12 + a5;
    if (v13)
    {
      __break(0x5500u);
    }
    else if ((v14 & 0x8000000000000000) == 0)
    {
      uint64_t v15 = (uint64_t)&a2[-v11];
      unint64_t v16 = v9 - v11;
      if (2 * v16 > v14) {
        unint64_t v14 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v14;
      }
      std::__split_buffer<unsigned char>::__split_buffer(v21, v17, v15, (uint64_t)(result + 16));
      std::__split_buffer<unsigned char>::__construct_at_end_with_size<std::__wrap_iter<char const*>>((uint64_t)v21, a3, a5);
      char v5 = (char *)std::vector<unsigned char>::__swap_out_circular_buffer((void **)v8, (uint64_t)v21, v5);
      std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)v21);
      return v5;
    }
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = v10 - (void)a2;
  if ((uint64_t)(v10 - (void)a2) >= a5)
  {
    int v19 = &a3[a5];
LABEL_18:
    std::vector<unsigned char>::__move_range(v8, v5, v10, &v5[a5]);
    if (v19 != a3) {
      memmove(v5, a3, v19 - a3);
    }
    return v5;
  }
  if (!__OFSUB__(a5, v18))
  {
    int v19 = &a3[v18];
    int64_t v20 = a4 - &a3[v18];
    if (a4 != &a3[v18]) {
      memmove(*((void **)result + 1), &a3[v18], a4 - &a3[v18]);
    }
    *((void *)v8 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v10 + v20;
    if (v18 < 1) {
      return v5;
    }
    goto LABEL_18;
  }
  __break(0x5515u);
  return result;
}

void sub_1003BAA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<unsigned char>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const*,int,unsigned char const*,int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t result = std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const*,int,unsigned char const*,int,void>(a1 + 16, v6, a2, a3, a4, a5);
  *(void *)(a1 + 8)  = v6 + 48;
  return result;
}

void sub_1003BAA8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const*,int,unsigned char const*,int>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v7 > 0x555555555555555) {
    goto LABEL_10;
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v15, v12, v6, (uint64_t)(a1 + 2));
  std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const*,int,unsigned char const*,int,void>(a1 + 2, v16, a2, a3, a4, a5);
  v16 += 48;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v15);
  return v13;
}

void sub_1003BABA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

otbr::Mdns::Publisher::TxtEntry *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const*,int,unsigned char const*,int>(int a1, otbr::Mdns::Publisher::TxtEntry *this, char **a3, int *a4, const unsigned __int8 **a5, int *a6)
{
  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(this, *a3, *a4, *a5, *a6);
}

otbr::Mdns::Publisher::TxtEntry *otbr::Mdns::Publisher::TxtEntry::TxtEntry(otbr::Mdns::Publisher::TxtEntry *this, char *a2, size_t a3, const unsigned __int8 *a4, uint64_t a5)
{
  char v8 = std::string::basic_string[abi:ne180100](this, a2, a3);
  std::vector<unsigned char>::vector<unsigned char const*,0>(v8 + 3, a4, (uint64_t)&a4[a5]);
  return this;
}

void sub_1003BAC18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17) {
      size_t v7 = 25;
    }
    else {
      size_t v7 = (__len | 7) + 1;
    }
    uint64_t v6 = operator new(v7);
    __dst[1]  = __len;
    __dst[2]  = v7 | 0x8000000000000000;
    void *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 2ot::Tlv::SetType(this, 3) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_10;
    }
  }
  memmove(v6, __src, __len);
LABEL_10:
  *((unsigned char *)v6 + __len)  = 0;
  return __dst;
}

void *std::vector<unsigned char>::vector<unsigned char const*,0>(void *a1, const void *a2, uint64_t a3)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a1, a2, a3, a3 - (void)a2);
  return a1;
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<otbr::Mdns::Publisher::TxtEntry>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[48 * a2];
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  unsigned char v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 3;
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry>(a1, v7 - 48, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 48;
      *((void *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16)  = *((void *)a3 + 2);
  *(_OWORD *)a2  = v3;
  *((void *)a3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)a3  = 0;
  *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a2 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a2 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 24);
  *(__n128 *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = result;
  *(void *)(a2 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = *((void *)a3 + 5);
  *((void *)a3 + ot::Tlv::SetType(this, 3) = 0;
  *((void *)a3 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((void *)a3 + 5)  = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v10 = *(void *)a1[2];
  uint64_t v11 = v1;
  uint64_t v12 = v10;
  uint64_t v13 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v5 = *(void *)a1[1];
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>(v2, (uint64_t)v9, (uint64_t)v4);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>,std::reverse_iterator<std::reverse_iterator<otbr::Mdns::Publisher::TxtEntry*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](a1, i);
    uint64_t i = *(void *)(a2 + 32) + 48;
  }
}

void *std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(void *a1)
{
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  __n128 result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - (void)result) >> 4) < 0x555555555555556)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16)  = i - 48;
    std::allocator<otbr::Mdns::Publisher::TxtEntry>::destroy[abi:ne180100](v5, i - 48);
  }
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>(a1, a2);
  if ((uint64_t *)(a1 + 8) == v3) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::erase(a1, v3);
  return 1;
}

void *std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  __n128 result = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__lower_bound<unsigned long long>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == result || *a2 < result[4]) {
    return v3;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__remove_node_pointer(a1, a2);
  std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void *std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__lower_bound<unsigned long long>(uint64_t a1, unint64_t *a2, void *a3, void *a4)
{
  __n128 result = a4;
  if (a3)
  {
    unint64_t v5 = *a2;
    do
    {
      unint64_t v6 = a3[4];
      BOOL v7 = v6 >= v5;
      if (v6 >= v5) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 + 1;
      }
      if (v7) {
        __n128 result = a3;
      }
      a3  = (void *)*v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>(uint64_t **a1, unint64_t *a2, void *a3, uint64_t a4)
{
  BOOL v7 = (uint64_t **)std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__construct_node<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v12, v9, (uint64_t *)v11[0]);
    uint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v8;
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::__construct_node<unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x68uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  *(unsigned char *)(a4 + 16)  = 0;
  uint64_t result = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>,void>(v7, v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16)  = 1;
  return result;
}

void sub_1003BB2A0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::construct[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,unsigned long long &,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>,void>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *a2  = *a3;
  return std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100]((uint64_t)(a2 + 1), a4);
}

uint64_t std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::__value_func[abi:ne180100](v4 + 32, a2 + 32);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::operator()[abi:ne180100]((uint64_t)(a1 + 1), v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,0>((uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::vector<unsigned long long>::__push_back_slow_path<unsigned long long const&>(uint64_t *a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 61) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<_DNSServiceRef_t *>::__split_buffer(v11, v7, v2, (uint64_t)(a1 + 2));
  uint64_t v8 = v12;
  void *v12 = *a2;
  uint64_t v12 = v8 + 1;
  std::vector<_DNSServiceRef_t *>::__swap_out_circular_buffer(a1, v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer(v11);
  return v9;
}

void sub_1003BB424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_DNSServiceRef_t *>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__value_func<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void std::__introsort<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,false>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  v238  = (void **)a2;
  v239  = a1;
  while (1)
  {
    uint64_t v11 = v9 - (void)v10;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v10) >> 4);
    if (!(!v6 & v5))
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v102 = (const void *)(v9 - 48);
          v238  = (void **)(v9 - 48);
          if (*((char *)v10 + 23) < 0)
          {
            v224  = v10;
            uint64_t v10 = (void **)*v10;
            size_t v103 = (size_t)v224[1];
          }
          else
          {
            size_t v103 = *((unsigned __int8 *)v10 + 23);
          }
          if (*(char *)(v9 - 25) < 0)
          {
            char v102 = *(const void **)(v9 - 48);
            v225  = *(void *)(v9 - 40);
          }
          else
          {
            v225  = *(unsigned __int8 *)(v9 - 25);
          }
          if (v103 >= v225) {
            v226  = v225;
          }
          else {
            v226  = v103;
          }
          v227  = memcmp(v102, v10, v226);
          v228  = v225 < v103;
          if (v227) {
            v228  = v227 < 0;
          }
          if (v228) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v239, (uint64_t *)&v238);
          }
          break;
        case 3uLL:
          v238  = (void **)(v9 - 48);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)v10, (const void **)v10 + 6, v9 - 48);
          break;
        case 4uLL:
          v238  = (void **)(v9 - 48);
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)v10, (const void **)v10 + 6, (uint64_t)(v10 + 12), v9 - 48);
          break;
        case 5uLL:
          v238  = (void **)(v9 - 48);
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,0>((uint64_t)v10, (const void **)v10 + 6, (uint64_t)(v10 + 12), (uint64_t)(v10 + 18), v9 - 48);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 1151) {
      break;
    }
    if (!a4)
    {
      if (v10 != (void **)v9)
      {
        v229  = v9 - (void)v10;
        v230  = v9;
        int64_t v126 = (v12 - 2) >> 1;
        int64_t v127 = v126;
        v233  = v10;
        v234  = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v10) >> 4);
        do
        {
          int64_t v128 = v127;
          if (v126 >= v127)
          {
            uint64_t v129 = (2 * v127) | 1;
            BOOL v130 = &v10[6 * v129];
            uint64_t v131 = 2 * v127 + 2;
            if (v131 < (uint64_t)v12)
            {
              int64_t v132 = v127;
              if (*((char *)v130 + 71) < 0)
              {
                uint64_t v134 = v130[6];
                size_t v133 = (size_t)v130[7];
              }
              else
              {
                size_t v133 = *((unsigned __int8 *)v130 + 71);
                uint64_t v134 = v130 + 6;
              }
              if (*((char *)v130 + 23) < 0)
              {
                uint64_t v136 = (void **)*v130;
                size_t v135 = (size_t)v130[1];
              }
              else
              {
                size_t v135 = *((unsigned __int8 *)v130 + 23);
                uint64_t v136 = &v10[6 * v129];
              }
              if (v133 >= v135) {
                size_t v137 = v135;
              }
              else {
                size_t v137 = v133;
              }
              int v138 = memcmp(v136, v134, v137);
              BOOL v139 = v135 < v133;
              if (v138) {
                BOOL v139 = v138 < 0;
              }
              if (v139)
              {
                uint64_t v129 = v131;
                v130 += 6;
              }
              int64_t v128 = v132;
            }
            uint64_t v140 = (uint64_t)&v10[6 * v128];
            if (*(char *)(v140 + 23) < 0)
            {
              BOOL v142 = *(void ***)v140;
              size_t v141 = *(void *)(v140 + 8);
            }
            else
            {
              size_t v141 = *(unsigned __int8 *)(v140 + 23);
              BOOL v142 = &v10[6 * v128];
            }
            if (*((char *)v130 + 23) < 0)
            {
              uint64_t v144 = *v130;
              size_t v143 = (size_t)v130[1];
            }
            else
            {
              size_t v143 = *((unsigned __int8 *)v130 + 23);
              uint64_t v144 = v130;
            }
            if (v141 >= v143) {
              size_t v145 = v143;
            }
            else {
              size_t v145 = v141;
            }
            int v146 = memcmp(v144, v142, v145);
            BOOL v147 = v143 < v141;
            if (v146) {
              BOOL v147 = v146 < 0;
            }
            if (!v147)
            {
              long long v148 = *(_OWORD *)v140;
              v247  = *(const void **)(v140 + 16);
              *(_OWORD *)__p  = v148;
              *(void *)(v140 + 8)  = 0;
              *(void *)(v140 + 16)  = 0;
              *(void *)uint64_t v140 = 0;
              v231  = v128;
              v149  = &v10[6 * v128];
              v248  = *(__n128 *)(v149 + 3);
              v249  = v149[5];
              v149[3]  = 0;
              v149[4]  = 0;
              v149[5]  = 0;
              v150  = __p;
              if (SHIBYTE(v247) < 0) {
                v150  = (void **)__p[0];
              }
              __s2  = v150;
              if (SHIBYTE(v247) >= 0) {
                v151  = (void *)HIBYTE(v247);
              }
              else {
                v151  = __p[1];
              }
              do
              {
                v152  = (uint64_t)v130;
                std::string::operator=[abi:ne180100](v140, (long long *)v130);
                uint64_t v153 = (uint64_t)(v130 + 3);
                std::vector<unsigned char>::__move_assign(v140 + 24, (__n128 *)(v130 + 3));
                if (v126 < v129) {
                  break;
                }
                if (v129 + 0x4000000000000000 < 0)
                {
LABEL_384:
                  __break(0x550Cu);
LABEL_385:
                  __break(0x5500u);
LABEL_386:
                  __break(0x5515u);
                  JUMPOUT(0x1003BC6A4);
                }
                uint64_t v129 = (2 * v129) | 1;
                if (__OFADD__(v129, 1)) {
                  goto LABEL_385;
                }
                BOOL v130 = &v10[6 * v129];
                if (v129 + 1 < (uint64_t)v12)
                {
                  if (*((char *)v130 + 71) < 0)
                  {
                    uint64_t v155 = v130[6];
                    size_t v154 = (size_t)v130[7];
                  }
                  else
                  {
                    size_t v154 = *((unsigned __int8 *)v130 + 71);
                    uint64_t v155 = v130 + 6;
                  }
                  int64_t v156 = v126;
                  if (*((char *)v130 + 23) < 0)
                  {
                    v158  = *v130;
                    v157  = (size_t)v130[1];
                  }
                  else
                  {
                    v157  = *((unsigned __int8 *)v130 + 23);
                    v158  = v130;
                  }
                  if (v154 >= v157) {
                    size_t v159 = v157;
                  }
                  else {
                    size_t v159 = v154;
                  }
                  int v160 = memcmp(v158, v155, v159);
                  v161  = v157 < v154;
                  if (v160) {
                    v161  = v160 < 0;
                  }
                  if (v161)
                  {
                    v130 += 6;
                    ++v129;
                  }
                  int64_t v126 = v156;
                  uint64_t v10 = v233;
                  unint64_t v12 = v234;
                }
                if (*((char *)v130 + 23) < 0)
                {
                  int v163 = *v130;
                  size_t v162 = (size_t)v130[1];
                }
                else
                {
                  size_t v162 = *((unsigned __int8 *)v130 + 23);
                  int v163 = v130;
                }
                if ((unint64_t)v151 >= v162) {
                  v164  = v162;
                }
                else {
                  v164  = (size_t)v151;
                }
                v165  = memcmp(v163, __s2, v164);
                BOOL v166 = v162 < (unint64_t)v151;
                if (v165) {
                  BOOL v166 = v165 < 0;
                }
                uint64_t v140 = v152;
              }
              while (!v166);
              std::string::operator=[abi:ne180100](v152, (long long *)__p);
              std::vector<unsigned char>::__move_assign(v153, &v248);
              v240[0]  = &v248;
              std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
              if (SHIBYTE(v247) < 0) {
                operator delete(__p[0]);
              }
              int64_t v128 = v231;
            }
          }
          int64_t v127 = v128 - 1;
        }
        while (v128);
        uint64_t v167 = v230;
        int64_t v168 = v229 / 0x30;
        do
        {
          uint64_t v169 = 0;
          long long v170 = *(_OWORD *)v10;
          __s2a  = (long long *)v167;
          v241  = v10[2];
          *(_OWORD *)v240  = v170;
          v10[1]  = 0;
          void v10[2] = 0;
          unsigned char *v10 = 0;
          v242  = *(__n128 *)(v10 + 3);
          v243  = v10[5];
          v10[3]  = 0;
          unsigned char v10[4] = 0;
          uint64_t v171 = (uint64_t)v10;
          v10[5]  = 0;
          do
          {
            if (v169 + 0x4000000000000000 < 0) {
              goto LABEL_384;
            }
            uint64_t v172 = (2 * v169) | 1;
            if (__OFADD__(v172, 1)) {
              goto LABEL_385;
            }
            uint64_t v173 = v171 + 48 * v169;
            uint64_t v174 = v173 + 48;
            if (v172 + 1 < v168)
            {
              int v175 = *(char *)(v173 + 119);
              if (v175 < 0)
              {
                v177  = *(const void **)(v174 + 48);
                v176  = *(void *)(v174 + 56);
              }
              else
              {
                v176  = v175;
                v177  = (const void *)(v174 + 48);
              }
              if (*(char *)(v174 + 23) < 0)
              {
                int v179 = *(const void **)v174;
                size_t v178 = *(void *)(v174 + 8);
              }
              else
              {
                size_t v178 = *(unsigned __int8 *)(v174 + 23);
                int v179 = (const void *)v174;
              }
              if (v176 >= v178) {
                size_t v180 = v178;
              }
              else {
                size_t v180 = v176;
              }
              v181  = memcmp(v179, v177, v180);
              BOOL v182 = v178 < v176;
              if (v181) {
                BOOL v182 = v181 < 0;
              }
              if (v182)
              {
                v174 += 48;
                ++v172;
              }
            }
            std::string::operator=[abi:ne180100](v171, (long long *)v174);
            std::vector<unsigned char>::__move_assign(v171 + 24, (__n128 *)(v174 + 24));
            uint64_t v171 = v174;
            uint64_t v169 = v172;
          }
          while (v172 <= (uint64_t)((unint64_t)(v168 - 2) >> 1));
          uint64_t v167 = (uint64_t)(__s2a - 3);
          if ((long long *)v174 == __s2a - 3)
          {
            std::string::operator=[abi:ne180100](v174, (long long *)v240);
            std::vector<unsigned char>::__move_assign(v174 + 24, &v242);
          }
          else
          {
            std::string::operator=[abi:ne180100](v174, __s2a - 3);
            std::vector<unsigned char>::__move_assign(v174 + 24, (__n128 *)((char *)__s2a - 24));
            std::string::operator=[abi:ne180100](v167, (long long *)v240);
            std::vector<unsigned char>::__move_assign((uint64_t)__s2a - 24, &v242);
            v183  = v174 - (void)v10 + 48;
            if (v183 >= 49)
            {
              if (*(char *)(v174 + 23) < 0)
              {
                v185  = *(const void **)v174;
                v184  = *(void *)(v174 + 8);
              }
              else
              {
                v184  = *(unsigned __int8 *)(v174 + 23);
                v185  = (const void *)v174;
              }
              unint64_t v186 = (v183 / 0x30uLL - 2) >> 1;
              unsigned int v187 = &v10[6 * v186];
              if (*((char *)v187 + 23) < 0)
              {
                v189  = (void **)*v187;
                v188  = (size_t)v187[1];
              }
              else
              {
                v188  = *((unsigned __int8 *)v187 + 23);
                v189  = &v10[6 * v186];
              }
              if (v184 >= v188) {
                v190  = v188;
              }
              else {
                v190  = v184;
              }
              v191  = memcmp(v189, v185, v190);
              v192  = v188 < v184;
              if (v191) {
                v192  = v191 < 0;
              }
              if (v192)
              {
                v193  = *(_OWORD *)v174;
                v247  = *(const void **)(v174 + 16);
                *(_OWORD *)__p  = v193;
                *(void *)(v174 + 8)  = 0;
                *(void *)(v174 + 16)  = 0;
                *(void *)uint64_t v174 = 0;
                v248  = *(__n128 *)(v174 + 24);
                v249  = *(void **)(v174 + 40);
                *(void *)(v174 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
                *(void *)(v174 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
                *(void *)(v174 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
                v194  = __p;
                if (SHIBYTE(v247) < 0) {
                  v194  = (void **)__p[0];
                }
                __s2b  = v194;
                if (SHIBYTE(v247) >= 0) {
                  char v195 = (void *)HIBYTE(v247);
                }
                else {
                  char v195 = __p[1];
                }
                do
                {
                  uint64_t v196 = (uint64_t)v187;
                  std::string::operator=[abi:ne180100](v174, (long long *)v187);
                  uint64_t v197 = (uint64_t)(v187 + 3);
                  std::vector<unsigned char>::__move_assign(v174 + 24, (__n128 *)(v187 + 3));
                  if (!v186) {
                    break;
                  }
                  unint64_t v186 = (v186 - 1) >> 1;
                  unsigned int v187 = &v10[6 * v186];
                  if (*((char *)v187 + 23) < 0)
                  {
                    BOOL v199 = (void **)*v187;
                    size_t v198 = (size_t)v187[1];
                  }
                  else
                  {
                    size_t v198 = *((unsigned __int8 *)v187 + 23);
                    BOOL v199 = &v10[6 * v186];
                  }
                  if ((unint64_t)v195 >= v198) {
                    v200  = v198;
                  }
                  else {
                    v200  = (size_t)v195;
                  }
                  int v201 = memcmp(v199, __s2b, v200);
                  BOOL v202 = v198 < (unint64_t)v195;
                  if (v201) {
                    BOOL v202 = v201 < 0;
                  }
                  uint64_t v174 = v196;
                }
                while (v202);
                std::string::operator=[abi:ne180100](v196, (long long *)__p);
                std::vector<unsigned char>::__move_assign(v197, &v248);
                v245  = &v248;
                std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                if (SHIBYTE(v247) < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          __p[0]  = &v242;
          std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v241) < 0) {
            operator delete(v240[0]);
          }
        }
        while (v168-- > 2);
      }
      return;
    }
    if (__OFSUB__(a4--, 1)) {
      goto LABEL_386;
    }
    uint64_t v14 = v9 - 48;
    if ((unint64_t)v11 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)v10, (const void **)&v10[6 * (v12 >> 1)], v14);
      uint64_t v15 = 48 * (v12 >> 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)v239 + 48, (const void **)((char *)v239 + v15 - 48), (uint64_t)(v238 - 12));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)v239 + 96, (const void **)((char *)v239 + v15 + 48), (uint64_t)(v238 - 18));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)v239 + v15 - 48, (const void **)((char *)v239 + v15), (uint64_t)v239 + v15 + 48);
      __p[0]  = (char *)v239 + v15;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v239, (uint64_t *)__p);
      if (a5) {
        goto LABEL_24;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)&v10[6 * (v12 >> 1)], (const void **)v10, v14);
      if (a5) {
        goto LABEL_24;
      }
    }
    long long v16 = (char *)v239;
    if (*((char *)v239 + 23) < 0)
    {
      uint64_t v18 = *(void **)v239;
      size_t v17 = *((void *)v239 + 1);
    }
    else
    {
      size_t v17 = *((unsigned __int8 *)v239 + 23);
      uint64_t v18 = v239;
    }
    if (*((char *)v239 - 25) < 0)
    {
      int v19 = (char *)*((void *)v239 - 6);
      size_t v20 = *((void *)v239 - 5);
    }
    else
    {
      int v19 = (char *)v239 - 48;
      size_t v20 = *((char *)v239 - 25);
    }
    if (v17 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v17;
    }
    int v22 = memcmp(v19, v18, v21);
    BOOL v23 = v20 < v17;
    if (v22) {
      BOOL v23 = v22 < 0;
    }
    if (!v23)
    {
      unint64_t v61 = (unint64_t)v238;
      v244  = v238;
      v245  = (__n128 *)v16;
      __n128 v62 = *(__n128 *)v16;
      v247  = (const void *)*((void *)v16 + 2);
      *(__n128 *)__p  = v62;
      *((void *)v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
      *((void *)v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
      *(void *)long long v16 = 0;
      v248  = *(__n128 *)(v16 + 24);
      v249  = (void *)*((void *)v16 + 5);
      *((void *)v16 + ot::Tlv::SetType(this, 3) = 0;
      *((void *)v16 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
      *((void *)v16 + 5)  = 0;
      uint64_t v63 = v61 - 48;
      if (*(char *)(v61 - 25) < 0)
      {
        unsigned __int16 v65 = *(const void **)(v61 - 48);
        size_t v64 = *(void *)(v61 - 40);
      }
      else
      {
        size_t v64 = *(unsigned __int8 *)(v61 - 25);
        unsigned __int16 v65 = (const void *)(v61 - 48);
      }
      if (SHIBYTE(v247) >= 0) {
        int v66 = (void *)HIBYTE(v247);
      }
      else {
        int v66 = __p[1];
      }
      if (SHIBYTE(v247) >= 0) {
        int v67 = __p;
      }
      else {
        int v67 = (void **)__p[0];
      }
      if (v64 >= (unint64_t)v66) {
        size_t v68 = (size_t)v66;
      }
      else {
        size_t v68 = v64;
      }
      int v69 = memcmp(v67, v65, v68);
      BOOL v70 = (unint64_t)v66 < v64;
      if (v69) {
        BOOL v70 = v69 < 0;
      }
      if (v70)
      {
        char v71 = (__n128 *)(v16 + 48);
        do
        {
          v245  = v71;
          if (v71[1].n128_i8[7] < 0)
          {
            unsigned __int16 v73 = (__n128 *)v71->n128_u64[0];
            size_t v72 = v71->n128_u64[1];
          }
          else
          {
            size_t v72 = v71[1].n128_u8[7];
            unsigned __int16 v73 = v71;
          }
          if (v72 >= (unint64_t)v66) {
            size_t v74 = (size_t)v66;
          }
          else {
            size_t v74 = v72;
          }
          int v75 = memcmp(v67, v73, v74);
          BOOL v76 = (unint64_t)v66 < v72;
          if (v75) {
            BOOL v76 = v75 < 0;
          }
          v71 += 3;
        }
        while (!v76);
        n128_u64  = (unint64_t)v71[-3].n128_u64;
      }
      else
      {
        char v78 = (__n128 *)(v16 + 48);
        do
        {
          n128_u64  = (unint64_t)v78;
          v245  = v78;
          if ((unint64_t)v78 >= v61) {
            break;
          }
          int v79 = v78[1].n128_i8[7];
          if (v79 < 0)
          {
            uint64_t v81 = *(const void **)n128_u64;
            size_t v80 = *(void *)(n128_u64 + 8);
          }
          else
          {
            size_t v80 = v79;
            uint64_t v81 = (const void *)n128_u64;
          }
          if (v80 >= (unint64_t)v66) {
            size_t v82 = (size_t)v66;
          }
          else {
            size_t v82 = v80;
          }
          int v83 = memcmp(v67, v81, v82);
          BOOL v84 = v83 < 0;
          if (!v83) {
            BOOL v84 = (unint64_t)v66 < v80;
          }
          char v78 = (__n128 *)(n128_u64 + 48);
        }
        while (!v84);
      }
      if (n128_u64 < v61)
      {
        do
        {
          v244  = (void **)v63;
          if (*(char *)(v63 + 23) < 0)
          {
            BOOL v86 = *(const void **)v63;
            size_t v85 = *(void *)(v63 + 8);
          }
          else
          {
            size_t v85 = *(unsigned __int8 *)(v63 + 23);
            BOOL v86 = (const void *)v63;
          }
          if (v85 >= (unint64_t)v66) {
            size_t v87 = (size_t)v66;
          }
          else {
            size_t v87 = v85;
          }
          int v88 = memcmp(v67, v86, v87);
          BOOL v89 = (unint64_t)v66 < v85;
          if (v88) {
            BOOL v89 = v88 < 0;
          }
          v63 -= 48;
        }
        while (v89);
        unint64_t v61 = v63 + 48;
      }
      if (n128_u64 < v61)
      {
        do
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v245, (uint64_t *)&v244);
          char v90 = (void **)&v245[3];
          do
          {
            v245  = (__n128 *)v90;
            if (*((char *)v90 + 23) < 0)
            {
              unsigned int v92 = *v90;
              size_t v91 = (size_t)v90[1];
            }
            else
            {
              size_t v91 = *((unsigned __int8 *)v90 + 23);
              unsigned int v92 = v90;
            }
            if (v91 >= (unint64_t)v66) {
              size_t v93 = (size_t)v66;
            }
            else {
              size_t v93 = v91;
            }
            int v94 = memcmp(v67, v92, v93);
            BOOL v95 = (unint64_t)v66 < v91;
            if (v94) {
              BOOL v95 = v94 < 0;
            }
            v90 += 6;
          }
          while (!v95);
          n128_u64  = (unint64_t)(v90 - 6);
          uint64_t v96 = (uint64_t)(v244 - 6);
          do
          {
            v244  = (void **)v96;
            if (*(char *)(v96 + 23) < 0)
            {
              char v98 = *(const void **)v96;
              size_t v97 = *(void *)(v96 + 8);
            }
            else
            {
              size_t v97 = *(unsigned __int8 *)(v96 + 23);
              char v98 = (const void *)v96;
            }
            if (v97 >= (unint64_t)v66) {
              size_t v99 = (size_t)v66;
            }
            else {
              size_t v99 = v97;
            }
            int v100 = memcmp(v67, v98, v99);
            BOOL v101 = (unint64_t)v66 < v97;
            if (v100) {
              BOOL v101 = v100 < 0;
            }
            v96 -= 48;
          }
          while (v101);
        }
        while (n128_u64 < v96 + 48);
      }
      if ((char *)(n128_u64 - 48) != v16)
      {
        std::string::operator=[abi:ne180100]((uint64_t)v16, (long long *)(n128_u64 - 48));
        std::vector<unsigned char>::__move_assign((uint64_t)(v16 + 24), (__n128 *)(n128_u64 - 24));
      }
      std::string::operator=[abi:ne180100](n128_u64 - 48, (long long *)__p);
      std::vector<unsigned char>::__move_assign(n128_u64 - 24, &v248);
      uint64_t v10 = (void **)v245;
      v240[0]  = &v248;
      std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
      if (SHIBYTE(v247) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_168;
    }
LABEL_24:
    uint64_t v24 = 0;
    uint64_t v25 = (uint64_t)v238;
    uint64_t v26 = (void **)v239;
    v244  = v238;
    long long v27 = *(_OWORD *)v239;
    v247  = (const void *)*((void *)v239 + 2);
    *(_OWORD *)__p  = v27;
    *((void *)v239 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
    void v26[2] = 0;
    *uint64_t v26 = 0;
    v248  = *(__n128 *)(v26 + 3);
    v249  = v26[5];
    v26[3]  = 0;
    v26[4]  = 0;
    v26[5]  = 0;
    if (SHIBYTE(v247) >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if (SHIBYTE(v247) >= 0) {
      uint64_t v29 = (void *)HIBYTE(v247);
    }
    else {
      uint64_t v29 = __p[1];
    }
    do
    {
      uint64_t v30 = &v26[v24 + 6];
      v245  = (__n128 *)v30;
      if (SHIBYTE(v26[v24 + 8]) < 0)
      {
        size_t v31 = (size_t)v26[v24 + 7];
        uint64_t v30 = (void **)*v30;
      }
      else
      {
        size_t v31 = HIBYTE(v26[v24 + 8]);
      }
      if ((unint64_t)v29 >= v31) {
        size_t v32 = v31;
      }
      else {
        size_t v32 = (size_t)v29;
      }
      int v33 = memcmp(v30, v28, v32);
      BOOL v34 = v31 < (unint64_t)v29;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
      v24 += 6;
    }
    while (v34);
    unint64_t v35 = (unint64_t)&v26[v24];
    uint64_t v36 = v25 - 48;
    if (v24 == 6)
    {
      while (1)
      {
        unint64_t v42 = v36 + 48;
        if (v35 >= v36 + 48) {
          break;
        }
        v244  = (void **)v36;
        if (*(char *)(v36 + 23) < 0)
        {
          uint64_t v44 = *(const void **)v36;
          size_t v43 = *(void *)(v36 + 8);
        }
        else
        {
          size_t v43 = *(unsigned __int8 *)(v36 + 23);
          uint64_t v44 = (const void *)v36;
        }
        if ((unint64_t)v29 >= v43) {
          size_t v45 = v43;
        }
        else {
          size_t v45 = (size_t)v29;
        }
        int v46 = memcmp(v44, v28, v45);
        BOOL v47 = v43 < (unint64_t)v29;
        if (v46) {
          BOOL v47 = v46 < 0;
        }
        v36 -= 48;
        if (v47) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      do
      {
        v244  = (void **)v36;
        if (*(char *)(v36 + 23) < 0)
        {
          uint64_t v38 = *(const void **)v36;
          size_t v37 = *(void *)(v36 + 8);
        }
        else
        {
          size_t v37 = *(unsigned __int8 *)(v36 + 23);
          uint64_t v38 = (const void *)v36;
        }
        if ((unint64_t)v29 >= v37) {
          size_t v39 = v37;
        }
        else {
          size_t v39 = (size_t)v29;
        }
        int v40 = memcmp(v38, v28, v39);
        BOOL v41 = v37 < (unint64_t)v29;
        if (v40) {
          BOOL v41 = v40 < 0;
        }
        v36 -= 48;
      }
      while (!v41);
LABEL_60:
      unint64_t v42 = v36 + 48;
    }
    uint64_t v10 = (void **)v35;
    if (v35 < v42)
    {
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v245, (uint64_t *)&v244);
        __int16 v48 = (void **)&v245[3];
        do
        {
          v245  = (__n128 *)v48;
          if (*((char *)v48 + 23) < 0)
          {
            __n128 v50 = *v48;
            size_t v49 = (size_t)v48[1];
          }
          else
          {
            size_t v49 = *((unsigned __int8 *)v48 + 23);
            __n128 v50 = v48;
          }
          if ((unint64_t)v29 >= v49) {
            size_t v51 = v49;
          }
          else {
            size_t v51 = (size_t)v29;
          }
          int v52 = memcmp(v50, v28, v51);
          BOOL v53 = v49 < (unint64_t)v29;
          if (v52) {
            BOOL v53 = v52 < 0;
          }
          v48 += 6;
        }
        while (v53);
        uint64_t v10 = v48 - 6;
        uint64_t v54 = (uint64_t)(v244 - 6);
        do
        {
          v244  = (void **)v54;
          if (*(char *)(v54 + 23) < 0)
          {
            unsigned int v56 = *(const void **)v54;
            size_t v55 = *(void *)(v54 + 8);
          }
          else
          {
            size_t v55 = *(unsigned __int8 *)(v54 + 23);
            unsigned int v56 = (const void *)v54;
          }
          if ((unint64_t)v29 >= v55) {
            size_t v57 = v55;
          }
          else {
            size_t v57 = (size_t)v29;
          }
          int v58 = memcmp(v56, v28, v57);
          BOOL v59 = v55 < (unint64_t)v29;
          if (v58) {
            BOOL v59 = v58 < 0;
          }
          v54 -= 48;
        }
        while (!v59);
      }
      while ((unint64_t)v10 < v54 + 48);
    }
    if (v10 - 6 != v26)
    {
      std::string::operator=[abi:ne180100]((uint64_t)v26, (long long *)v10 - 3);
      std::vector<unsigned char>::__move_assign((uint64_t)(v26 + 3), (__n128 *)(v10 - 3));
    }
    std::string::operator=[abi:ne180100]((uint64_t)(v10 - 6), (long long *)__p);
    std::vector<unsigned char>::__move_assign((uint64_t)(v10 - 3), &v248);
    v240[0]  = &v248;
    std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
    if (SHIBYTE(v247) < 0) {
      operator delete(__p[0]);
    }
    if (v35 < v42) {
      goto LABEL_88;
    }
    int v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((const void **)v239, (uint64_t)(v10 - 6));
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((const void **)v10, (uint64_t)v238))
    {
      if (v60)
      {
        v239  = v10;
        goto LABEL_169;
      }
LABEL_88:
      std::__introsort<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,false>(v239, v10 - 6, a3, a4, a5 & 1);
LABEL_168:
      a5  = 0;
      v239  = v10;
      goto LABEL_169;
    }
    if (v60) {
      return;
    }
    v238  = v10 - 6;
    uint64_t v10 = (void **)v239;
LABEL_169:
    uint64_t v9 = (uint64_t)v238;
  }
  if (a5)
  {
    if (v10 != (void **)v9)
    {
      unsigned int v104 = (const void **)(v10 + 6);
      if (v10 + 6 != (void **)v9)
      {
        uint64_t v105 = 0;
        int v106 = v10;
        do
        {
          char v107 = v104;
          if (*((char *)v106 + 23) < 0)
          {
            char v109 = *v106;
            size_t v108 = (size_t)v106[1];
          }
          else
          {
            size_t v108 = *((unsigned __int8 *)v106 + 23);
            char v109 = v106;
          }
          if (*((char *)v106 + 71) < 0)
          {
            size_t v110 = (size_t)v106[7];
            char v111 = *v104;
          }
          else
          {
            size_t v110 = *((unsigned __int8 *)v106 + 71);
            char v111 = v104;
          }
          if (v108 >= v110) {
            size_t v112 = v110;
          }
          else {
            size_t v112 = v108;
          }
          int v113 = memcmp(v111, v109, v112);
          BOOL v114 = v110 < v108;
          if (v113) {
            BOOL v114 = v113 < 0;
          }
          if (v114)
          {
            long long v115 = *(_OWORD *)v107;
            v247  = v107[2];
            *(_OWORD *)__p  = v115;
            v107[1]  = 0;
            v107[2]  = 0;
            *char v107 = 0;
            v248  = 0uLL;
            v248  = *(__n128 *)(v106 + 9);
            v249  = v106[11];
            v106[9]  = 0;
            v106[10]  = 0;
            v106[11]  = 0;
            uint64_t v116 = v105;
            while (1)
            {
              unsigned int v117 = (char *)v10 + v116;
              std::string::operator=[abi:ne180100]((uint64_t)v10 + v116 + 48, (long long *)((char *)v10 + v116));
              std::vector<unsigned char>::__move_assign((uint64_t)(v117 + 72), (__n128 *)(v117 + 24));
              if (!v116) {
                break;
              }
              int v118 = v117 - 48;
              if (*(v117 - 25) < 0)
              {
                int v118 = *(char **)v118;
                size_t v119 = *(size_t *)((char *)v10 + v116 - 40);
              }
              else
              {
                size_t v119 = *(v117 - 25);
              }
              if (SHIBYTE(v247) >= 0) {
                int v120 = (void *)HIBYTE(v247);
              }
              else {
                int v120 = __p[1];
              }
              if (SHIBYTE(v247) >= 0) {
                uint64_t v121 = __p;
              }
              else {
                uint64_t v121 = (void **)__p[0];
              }
              if (v119 >= (unint64_t)v120) {
                size_t v122 = (size_t)v120;
              }
              else {
                size_t v122 = v119;
              }
              int v123 = memcmp(v121, v118, v122);
              BOOL v124 = (unint64_t)v120 < v119;
              if (v123) {
                BOOL v124 = v123 < 0;
              }
              v116 -= 48;
              if (!v124)
              {
                uint64_t v125 = (uint64_t)v10 + v116 + 48;
                goto LABEL_211;
              }
            }
            uint64_t v125 = (uint64_t)v10;
LABEL_211:
            std::string::operator=[abi:ne180100](v125, (long long *)__p);
            std::vector<unsigned char>::__move_assign(v125 + 24, &v248);
            v240[0]  = &v248;
            std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
            if (SHIBYTE(v247) < 0) {
              operator delete(__p[0]);
            }
          }
          unsigned int v104 = v107 + 6;
          v105 += 48;
          int v106 = (void **)v107;
        }
        while (v107 + 6 != (const void **)v9);
      }
    }
  }
  else if (v10 != (void **)v9)
  {
    unsigned __int8 v204 = (const void **)(v10 + 6);
    if (v10 + 6 != (void **)v9)
    {
      unsigned __int8 v205 = v10 + 9;
      do
      {
        unsigned __int8 v206 = v204;
        if (*((char *)v10 + 23) < 0)
        {
          unsigned __int16 v208 = *v10;
          size_t v207 = (size_t)v10[1];
        }
        else
        {
          size_t v207 = *((unsigned __int8 *)v10 + 23);
          unsigned __int16 v208 = v10;
        }
        if (*((char *)v10 + 71) < 0)
        {
          size_t v209 = (size_t)v10[7];
          v210  = *v204;
        }
        else
        {
          size_t v209 = *((unsigned __int8 *)v10 + 71);
          v210  = v204;
        }
        if (v207 >= v209) {
          v211  = v209;
        }
        else {
          v211  = v207;
        }
        v212  = memcmp(v210, v208, v211);
        v213  = v209 < v207;
        if (v212) {
          v213  = v212 < 0;
        }
        if (v213)
        {
          v214  = *(_OWORD *)v206;
          v247  = v206[2];
          *(_OWORD *)__p  = v214;
          v206[1]  = 0;
          v206[2]  = 0;
          *unsigned __int8 v206 = 0;
          v248  = 0uLL;
          v248  = *(__n128 *)(v10 + 9);
          v249  = v10[11];
          v10[9]  = 0;
          unsigned char v10[10] = 0;
          unsigned char v10[11] = 0;
          v215  = (uint64_t)v205;
          do
          {
            std::string::operator=[abi:ne180100](v215 - 24, (long long *)(v215 - 72));
            v216  = v215 - 48;
            std::vector<unsigned char>::__move_assign(v215, (__n128 *)(v215 - 48));
            if (*(char *)(v215 - 97) < 0)
            {
              v217  = *(const void **)(v215 - 120);
              v218  = *(void *)(v215 - 112);
            }
            else
            {
              v217  = (const void *)(v215 - 120);
              v218  = *(unsigned __int8 *)(v215 - 97);
            }
            if (SHIBYTE(v247) >= 0) {
              v219  = (void *)HIBYTE(v247);
            }
            else {
              v219  = __p[1];
            }
            if (SHIBYTE(v247) >= 0) {
              v220  = __p;
            }
            else {
              v220  = (void **)__p[0];
            }
            if (v218 >= (unint64_t)v219) {
              v221  = (size_t)v219;
            }
            else {
              v221  = v218;
            }
            v222  = memcmp(v220, v217, v221);
            v223  = (unint64_t)v219 < v218;
            if (v222) {
              v223  = v222 < 0;
            }
            v215  = v216;
          }
          while (v223);
          std::string::operator=[abi:ne180100](v216 - 24, (long long *)__p);
          std::vector<unsigned char>::__move_assign(v216, &v248);
          v240[0]  = &v248;
          std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)v240);
          if (SHIBYTE(v247) < 0) {
            operator delete(__p[0]);
          }
        }
        unsigned __int8 v204 = v206 + 6;
        v205 += 6;
        uint64_t v10 = (void **)v206;
      }
      while (v206 + 6 != (const void **)v9);
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>(uint64_t *a1, uint64_t *a2)
{
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,0>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = (const void **)a5;
  char v6 = (const void **)a4;
  unint64_t v7 = (const void **)a3;
  uint64_t v8 = a2;
  uint64_t v9 = (const void **)a1;
  BOOL v41 = a2;
  uint64_t v42 = a1;
  size_t v39 = (const void **)a4;
  int v40 = (const void **)a3;
  uint64_t v38 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>(a1, a2, a3, a4);
  if (*((char *)v6 + 23) < 0)
  {
    uint64_t v11 = v6;
    char v6 = (const void **)*v6;
    size_t v10 = (size_t)v11[1];
  }
  else
  {
    size_t v10 = *((unsigned __int8 *)v6 + 23);
  }
  if (*((char *)v5 + 23) < 0)
  {
    uint64_t v13 = v5;
    char v5 = (const void **)*v5;
    size_t v12 = (size_t)v13[1];
  }
  else
  {
    size_t v12 = *((unsigned __int8 *)v5 + 23);
  }
  if (v10 >= v12) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v10;
  }
  int v15 = memcmp(v5, v6, v14);
  BOOL v16 = v12 < v10;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v39, &v38);
    size_t v17 = v39;
    if (*((char *)v7 + 23) < 0)
    {
      int v19 = v7;
      unint64_t v7 = (const void **)*v7;
      size_t v18 = (size_t)v19[1];
    }
    else
    {
      size_t v18 = *((unsigned __int8 *)v7 + 23);
    }
    if (*((char *)v39 + 23) < 0)
    {
      size_t v17 = *v39;
      size_t v20 = (size_t)v39[1];
    }
    else
    {
      size_t v20 = *((unsigned __int8 *)v39 + 23);
    }
    if (v18 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v18;
    }
    int v22 = memcmp(v17, v7, v21);
    BOOL v23 = v20 < v18;
    if (v22) {
      BOOL v23 = v22 < 0;
    }
    if (v23)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v40, (uint64_t *)&v39);
      uint64_t v24 = v40;
      if (*((char *)v8 + 23) < 0)
      {
        uint64_t v26 = v8;
        uint64_t v8 = (const void **)*v8;
        size_t v25 = (size_t)v26[1];
      }
      else
      {
        size_t v25 = *((unsigned __int8 *)v8 + 23);
      }
      if (*((char *)v40 + 23) < 0)
      {
        uint64_t v24 = *v40;
        size_t v27 = (size_t)v40[1];
      }
      else
      {
        size_t v27 = *((unsigned __int8 *)v40 + 23);
      }
      if (v25 >= v27) {
        size_t v28 = v27;
      }
      else {
        size_t v28 = v25;
      }
      int v29 = memcmp(v24, v8, v28);
      BOOL v30 = v27 < v25;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v41, (uint64_t *)&v40);
        size_t v31 = v41;
        if (*((char *)v9 + 23) < 0)
        {
          int v33 = v9;
          uint64_t v9 = (const void **)*v9;
          size_t v32 = (size_t)v33[1];
        }
        else
        {
          size_t v32 = *((unsigned __int8 *)v9 + 23);
        }
        if (*((char *)v41 + 23) < 0)
        {
          size_t v31 = *v41;
          size_t v34 = (size_t)v41[1];
        }
        else
        {
          size_t v34 = *((unsigned __int8 *)v41 + 23);
        }
        if (v32 >= v34) {
          size_t v35 = v34;
        }
        else {
          size_t v35 = v32;
        }
        int v36 = memcmp(v31, v9, v35);
        BOOL v37 = v34 < v32;
        if (v36) {
          BOOL v37 = v36 < 0;
        }
        if (v37) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>(&v42, (uint64_t *)&v41);
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = (unsigned __int8 *)a3;
  char v5 = (const void *)a1;
  uint64_t v42 = a2;
  size_t v43 = (const void **)a1;
  BOOL v41 = (const void **)a3;
  if (*(char *)(a1 + 23) < 0)
  {
    char v5 = *(const void **)a1;
    size_t v6 = *(void *)(a1 + 8);
  }
  else
  {
    size_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  size_t v7 = *((unsigned __int8 *)a2 + 23);
  size_t v8 = v7;
  uint64_t v9 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v9 = (const void **)*a2;
    size_t v8 = (size_t)a2[1];
  }
  if (v6 >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v6;
  }
  int v11 = memcmp(v9, v5, v10);
  BOOL v12 = v8 < v6;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v12)
  {
    if ((v7 & 0x80) != 0)
    {
      uint64_t v13 = a2;
      a2  = (const void **)*a2;
      size_t v7 = (size_t)v13[1];
    }
    if ((char)v3[23] < 0)
    {
      size_t v17 = v3;
      unint64_t v3 = *(unsigned __int8 **)v3;
      size_t v14 = *((void *)v17 + 1);
    }
    else
    {
      size_t v14 = v3[23];
    }
    if (v7 >= v14) {
      size_t v18 = v14;
    }
    else {
      size_t v18 = v7;
    }
    int v19 = memcmp(v3, a2, v18);
    BOOL v20 = v14 < v7;
    if (v19) {
      BOOL v20 = v19 < 0;
    }
    size_t v21 = (uint64_t *)&v43;
    if (v20) {
      goto LABEL_52;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v43, (uint64_t *)&v42);
    int v22 = v41;
    BOOL v23 = v42;
    if (*((char *)v42 + 23) < 0)
    {
      BOOL v23 = *v42;
      size_t v24 = (size_t)v42[1];
    }
    else
    {
      size_t v24 = *((unsigned __int8 *)v42 + 23);
    }
    if (*((char *)v41 + 23) < 0)
    {
      int v22 = *v41;
      size_t v32 = (size_t)v41[1];
    }
    else
    {
      size_t v32 = *((unsigned __int8 *)v41 + 23);
    }
    if (v24 >= v32) {
      size_t v34 = v32;
    }
    else {
      size_t v34 = v24;
    }
    int v35 = memcmp(v22, v23, v34);
    BOOL v36 = v32 < v24;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (v36)
    {
      size_t v21 = (uint64_t *)&v42;
LABEL_52:
      BOOL v37 = (uint64_t *)&v41;
LABEL_61:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>(v21, v37);
    }
  }
  else
  {
    if ((v7 & 0x80) != 0)
    {
      int v15 = a2;
      a2  = (const void **)*a2;
      size_t v7 = (size_t)v15[1];
    }
    if ((char)v3[23] < 0)
    {
      size_t v25 = v3;
      unint64_t v3 = *(unsigned __int8 **)v3;
      size_t v16 = *((void *)v25 + 1);
    }
    else
    {
      size_t v16 = v3[23];
    }
    if (v7 >= v16) {
      size_t v26 = v16;
    }
    else {
      size_t v26 = v7;
    }
    int v27 = memcmp(v3, a2, v26);
    BOOL v28 = v16 < v7;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v42, (uint64_t *)&v41);
      int v29 = v42;
      BOOL v30 = v43;
      if (*((char *)v43 + 23) < 0)
      {
        BOOL v30 = *v43;
        size_t v31 = (size_t)v43[1];
      }
      else
      {
        size_t v31 = *((unsigned __int8 *)v43 + 23);
      }
      if (*((char *)v42 + 23) < 0)
      {
        int v29 = *v42;
        size_t v33 = (size_t)v42[1];
      }
      else
      {
        size_t v33 = *((unsigned __int8 *)v42 + 23);
      }
      if (v31 >= v33) {
        size_t v38 = v33;
      }
      else {
        size_t v38 = v31;
      }
      int v39 = memcmp(v29, v30, v38);
      BOOL v40 = v33 < v31;
      if (v39) {
        BOOL v40 = v39 < 0;
      }
      if (v40)
      {
        size_t v21 = (uint64_t *)&v43;
        BOOL v37 = (uint64_t *)&v42;
        goto LABEL_61;
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>(const void **__s2, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = __s2;
  BOOL v40 = (const void **)a2;
  BOOL v41 = __s2;
  char v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)__s2) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4 & 1;
    case 2uLL:
      char v5 = (const void *)(a2 - 48);
      BOOL v40 = (const void **)(a2 - 48);
      if (*((char *)v3 + 23) < 0)
      {
        BOOL v30 = v3;
        unint64_t v3 = (const void **)*v3;
        size_t v6 = (size_t)v30[1];
      }
      else
      {
        size_t v6 = *((unsigned __int8 *)v3 + 23);
      }
      if (*(char *)(a2 - 25) < 0)
      {
        char v5 = *(const void **)(a2 - 48);
        size_t v31 = *(void *)(a2 - 40);
      }
      else
      {
        size_t v31 = *(unsigned __int8 *)(a2 - 25);
      }
      if (v6 >= v31) {
        size_t v32 = v31;
      }
      else {
        size_t v32 = v6;
      }
      int v33 = memcmp(v5, v3, v32);
      BOOL v34 = v31 < v6;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
      if (v34) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v41, (uint64_t *)&v40);
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)__s2, __s2 + 6, a2 - 48);
      break;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)__s2, __s2 + 6, (uint64_t)(__s2 + 12), a2 - 48);
      break;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*,0>((uint64_t)__s2, __s2 + 6, (uint64_t)(__s2 + 12), (uint64_t)(__s2 + 18), a2 - 48);
      break;
    default:
      size_t v7 = __s2 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>((uint64_t)__s2, __s2 + 6, (uint64_t)(__s2 + 12));
      size_t v8 = v3 + 18;
      if (v3 + 18 != (const void **)v2)
      {
        int v9 = 0;
        do
        {
          if (*((char *)v7 + 23) < 0)
          {
            int v11 = *v7;
            size_t v10 = (size_t)v7[1];
          }
          else
          {
            size_t v10 = *((unsigned __int8 *)v7 + 23);
            int v11 = v7;
          }
          if (*((char *)v8 + 23) < 0)
          {
            uint64_t v13 = *v8;
            size_t v12 = (size_t)v8[1];
          }
          else
          {
            size_t v12 = *((unsigned __int8 *)v8 + 23);
            uint64_t v13 = v8;
          }
          if (v10 >= v12) {
            size_t v14 = v12;
          }
          else {
            size_t v14 = v10;
          }
          int v15 = memcmp(v13, v11, v14);
          BOOL v16 = v12 < v10;
          if (v15) {
            BOOL v16 = v15 < 0;
          }
          if (v16)
          {
            *(_OWORD *)__p  = *(_OWORD *)v8;
            BOOL v37 = v8[2];
            *size_t v8 = 0;
            v8[1]  = 0;
            __n128 v38 = 0uLL;
            int v39 = 0;
            __n128 v38 = *(__n128 *)(v8 + 3);
            int v39 = v8[5];
            void v8[4] = 0;
            v8[5]  = 0;
            size_t v17 = (char *)(v7 - 6);
            uint64_t v18 = (uint64_t)v8;
            void v8[2] = 0;
            void v8[3] = 0;
            do
            {
              uint64_t v19 = (uint64_t)(v17 + 48);
              std::string::operator=[abi:ne180100](v18, (long long *)v17 + 3);
              uint64_t v20 = (uint64_t)(v17 + 72);
              std::vector<unsigned char>::__move_assign(v18 + 24, (__n128 *)(v17 + 72));
              if (v17 + 48 == (char *)v41) {
                break;
              }
              if (v17[23] < 0)
              {
                int v22 = *(char **)v17;
                size_t v21 = *((void *)v17 + 1);
              }
              else
              {
                size_t v21 = v17[23];
                int v22 = v17;
              }
              if (SHIBYTE(v37) >= 0) {
                BOOL v23 = (void *)HIBYTE(v37);
              }
              else {
                BOOL v23 = __p[1];
              }
              if (SHIBYTE(v37) >= 0) {
                size_t v24 = __p;
              }
              else {
                size_t v24 = (void **)__p[0];
              }
              if (v21 >= (unint64_t)v23) {
                size_t v25 = (size_t)v23;
              }
              else {
                size_t v25 = v21;
              }
              int v26 = memcmp(v24, v22, v25);
              BOOL v27 = (unint64_t)v23 < v21;
              if (v26) {
                BOOL v27 = v26 < 0;
              }
              v17 -= 48;
              uint64_t v18 = v19;
            }
            while (v27);
            std::string::operator=[abi:ne180100](v19, (long long *)__p);
            std::vector<unsigned char>::__move_assign(v20, &v38);
            if (__CFADD__(v9++, 1))
            {
              __break(0x5500u);
              JUMPOUT(0x1003BCDE0);
            }
            BOOL v29 = v8 + 6 == v40;
            if (v9 == 8)
            {
              v8 += 6;
              char v4 = v29;
            }
            uint64_t v42 = &v38;
            std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
            if (SHIBYTE(v37) < 0) {
              operator delete(__p[0]);
            }
            if (v9 == 8) {
              return v4 & 1;
            }
            uint64_t v2 = (uint64_t)v40;
          }
          size_t v7 = v8;
          v8 += 6;
        }
        while (v8 != (const void **)v2);
      }
      char v4 = 1;
      break;
  }
  return v4 & 1;
}

void std::swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)__p  = *(_OWORD *)a1;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = 0;
  *(void *)(a1 + 16)  = 0;
  *(void *)a1  = 0;
  uint64_t v3 = a1 + 24;
  __n128 v6 = *(__n128 *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  std::string::operator=[abi:ne180100](a1, (long long *)a2);
  std::vector<unsigned char>::__move_assign(v3, (__n128 *)(a2 + 24));
  std::string::operator=[abi:ne180100](a2, (long long *)__p);
  std::vector<unsigned char>::__move_assign(a2 + 24, &v6);
  size_t v8 = &v6;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  char v4 = (const void **)a4;
  uint64_t v5 = (const void **)a3;
  __n128 v6 = a2;
  uint64_t v7 = (const void **)a1;
  size_t v31 = a2;
  uint64_t v32 = a1;
  uint64_t v29 = a4;
  BOOL v30 = (const void **)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Mdns::Publisher::SortTxtList(std::vector<otbr::Mdns::Publisher::TxtEntry>)::$_0 &,otbr::Mdns::Publisher::TxtEntry*>(a1, a2, a3);
  if (*((char *)v5 + 23) < 0)
  {
    int v9 = v5;
    uint64_t v5 = (const void **)*v5;
    size_t v8 = (size_t)v9[1];
  }
  else
  {
    size_t v8 = *((unsigned __int8 *)v5 + 23);
  }
  if (*((char *)v4 + 23) < 0)
  {
    int v11 = v4;
    char v4 = (const void **)*v4;
    size_t v10 = (size_t)v11[1];
  }
  else
  {
    size_t v10 = *((unsigned __int8 *)v4 + 23);
  }
  if (v8 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v8;
  }
  int v13 = memcmp(v4, v5, v12);
  BOOL v14 = v10 < v8;
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  if (v14)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v30, &v29);
    int v15 = v30;
    if (*((char *)v6 + 23) < 0)
    {
      size_t v17 = v6;
      __n128 v6 = (const void **)*v6;
      size_t v16 = (size_t)v17[1];
    }
    else
    {
      size_t v16 = *((unsigned __int8 *)v6 + 23);
    }
    if (*((char *)v30 + 23) < 0)
    {
      int v15 = *v30;
      size_t v18 = (size_t)v30[1];
    }
    else
    {
      size_t v18 = *((unsigned __int8 *)v30 + 23);
    }
    if (v16 >= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v16;
    }
    int v20 = memcmp(v15, v6, v19);
    BOOL v21 = v18 < v16;
    if (v20) {
      BOOL v21 = v20 < 0;
    }
    if (v21)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>((uint64_t *)&v31, (uint64_t *)&v30);
      int v22 = v31;
      if (*((char *)v7 + 23) < 0)
      {
        size_t v24 = v7;
        uint64_t v7 = (const void **)*v7;
        size_t v23 = (size_t)v24[1];
      }
      else
      {
        size_t v23 = *((unsigned __int8 *)v7 + 23);
      }
      if (*((char *)v31 + 23) < 0)
      {
        int v22 = *v31;
        size_t v25 = (size_t)v31[1];
      }
      else
      {
        size_t v25 = *((unsigned __int8 *)v31 + 23);
      }
      if (v23 >= v25) {
        size_t v26 = v25;
      }
      else {
        size_t v26 = v23;
      }
      int v27 = memcmp(v22, v7, v26);
      BOOL v28 = v25 < v23;
      if (v27) {
        BOOL v28 = v27 < 0;
      }
      if (v28) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry *&,otbr::Mdns::Publisher::TxtEntry *&>(&v32, (uint64_t *)&v31);
      }
    }
  }
}

void std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void>>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (2 * __clz(((char *)a2 - (char *)a1) >> 4)) ^ 0x7E;
  if (a2 == a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,false>(a1, a2, a3, v4, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v2;
        unint64_t v6 = bswap64(v4[2]);
        unint64_t v7 = bswap64(*v4);
        if (v6 != v7 || (unint64_t v6 = bswap64(v5[1]), v7 = bswap64(v4[1]), v6 != v7))
        {
          int v8 = v6 < v7 ? -1 : 1;
          if (v8 < 0)
          {
            long long v15 = *(_OWORD *)v5;
            uint64_t v9 = v3;
            while (1)
            {
              size_t v10 = (char *)result + v9;
              *(_OWORD *)((char *)result + v9 + 16)  = *(_OWORD *)((char *)result + v9);
              if (!v9) {
                break;
              }
              unint64_t v11 = bswap64(v15);
              unint64_t v12 = bswap64(*((void *)v10 - 2));
              if (v11 == v12
                && (v11 = bswap64(*((unint64_t *)&v15 + 1)), unint64_t v12 = bswap64(*((void *)v10 - 1)), v11 == v12))
              {
                int v13 = 0;
              }
              else if (v11 < v12)
              {
                int v13 = -1;
              }
              else
              {
                int v13 = 1;
              }
              v9 -= 16;
              if ((v13 & 0x80000000) == 0)
              {
                BOOL v14 = (unint64_t *)((char *)result + v9 + 16);
                goto LABEL_21;
              }
            }
            BOOL v14 = result;
LABEL_21:
            *(_OWORD *)BOOL v14 = v15;
          }
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result - 2;
      do
      {
        uint64_t v4 = v2;
        unint64_t v5 = bswap64(*v2);
        unint64_t v6 = bswap64(*result);
        if (v5 != v6 || (v5 = bswap64(v4[1]), unint64_t v6 = bswap64(result[1]), v5 != v6))
        {
          int v7 = v5 < v6 ? -1 : 1;
          if (v7 < 0)
          {
            long long v12 = *(_OWORD *)v4;
            int v8 = v3;
            do
            {
              *((_OWORD *)v8 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = *((_OWORD *)v8 + 1);
              unint64_t v9 = bswap64(v12);
              unint64_t v10 = bswap64(*v8);
              if (v9 == v10 && (unint64_t v9 = bswap64(*((unint64_t *)&v12 + 1)), v10 = bswap64(v8[1]), v9 == v10))
              {
                int v11 = 0;
              }
              else if (v9 < v10)
              {
                int v11 = -1;
              }
              else
              {
                int v11 = 1;
              }
              v8 -= 2;
            }
            while (v11 < 0);
            *((_OWORD *)v8 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v12;
          }
        }
        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*a1);
  if (v3 == v4 && (unint64_t v3 = bswap64(a2[1]), v4 = bswap64(a1[1]), v3 == v4))
  {
    int v5 = 0;
  }
  else if (v3 < v4)
  {
    int v5 = -1;
  }
  else
  {
    int v5 = 1;
  }
  unint64_t v6 = bswap64(*a3);
  unint64_t v7 = bswap64(*a2);
  if (v6 == v7 && (unint64_t v6 = bswap64(a3[1]), v7 = bswap64(a2[1]), v6 == v7))
  {
    int v8 = 0;
    if (v5 < 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v6 < v7) {
      int v8 = -1;
    }
    else {
      int v8 = 1;
    }
    if (v5 < 0)
    {
LABEL_10:
      if (v8 < 0)
      {
        long long v20 = *(_OWORD *)a1;
        *(_OWORD *)a1  = *(_OWORD *)a3;
        *(_OWORD *)a3  = v20;
      }
      else
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *(_OWORD *)a2  = v9;
        unint64_t v10 = bswap64(*a3);
        unint64_t v11 = bswap64(*a2);
        if (v10 != v11 || (unint64_t v10 = bswap64(a3[1]), v11 = bswap64(a2[1]), v10 != v11))
        {
          int v16 = v10 < v11 ? -1 : 1;
          if (v16 < 0)
          {
            long long v17 = *(_OWORD *)a2;
            *(_OWORD *)a2  = *(_OWORD *)a3;
            *(_OWORD *)a3  = v17;
            return 2;
          }
        }
      }
      return 1;
    }
  }
  if ((v8 & 0x80000000) == 0) {
    return 0;
  }
  long long v13 = *(_OWORD *)a2;
  *(_OWORD *)a2  = *(_OWORD *)a3;
  *(_OWORD *)a3  = v13;
  unint64_t v14 = bswap64(*a2);
  unint64_t v15 = bswap64(*a1);
  if (v14 != v15 || (unint64_t v14 = bswap64(a2[1]), v15 = bswap64(a1[1]), v14 != v15))
  {
    int v18 = v14 < v15 ? -1 : 1;
    if (v18 < 0)
    {
      long long v19 = *(_OWORD *)a1;
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(_OWORD *)a2  = v19;
      return 2;
    }
  }
  return 1;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  long long v32 = *(_OWORD *)a1;
  unint64_t v2 = bswap64(*a1);
  unint64_t v3 = bswap64(*(a2 - 2));
  if (v2 == v3 && (unint64_t v2 = bswap64(*((unint64_t *)&v32 + 1)), v3 = bswap64(*(a2 - 1)), v2 == v3)
    || (v2 < v3 ? (int v10 = -1) : (int v10 = 1), (v10 & 0x80000000) == 0))
  {
    unint64_t v11 = a1 + 2;
    do
    {
      int v5 = v11;
      if (v11 >= a2) {
        break;
      }
      unint64_t v12 = bswap64(v32);
      unint64_t v13 = bswap64(*v5);
      if (v12 == v13 && (unint64_t v12 = bswap64(*((unint64_t *)&v32 + 1)), v13 = bswap64(v5[1]), v12 == v13)) {
        int v14 = 0;
      }
      else {
        int v14 = v12 < v13 ? -1 : 1;
      }
      unint64_t v11 = v5 + 2;
    }
    while ((v14 & 0x80000000) == 0);
  }
  else
  {
    unint64_t v4 = a1;
    int v5 = a1;
    do
    {
      unint64_t v6 = v5[2];
      v5 += 2;
      unint64_t v7 = bswap64(v32);
      unint64_t v8 = bswap64(v6);
      if (v7 == v8 && (v7 = bswap64(*((unint64_t *)&v32 + 1)), unint64_t v8 = bswap64(v4[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      unint64_t v4 = v5;
    }
    while ((v9 & 0x80000000) == 0);
  }
  if (v5 >= a2)
  {
    unint64_t v15 = a2;
  }
  else
  {
    unint64_t v15 = a2;
    do
    {
      unint64_t v16 = *(v15 - 2);
      v15 -= 2;
      unint64_t v17 = bswap64(v32);
      unint64_t v18 = bswap64(v16);
      if (v17 == v18 && (v17 = bswap64(*((unint64_t *)&v32 + 1)), unint64_t v18 = bswap64(*(a2 - 1)), v17 == v18))
      {
        int v19 = 0;
      }
      else if (v17 < v18)
      {
        int v19 = -1;
      }
      else
      {
        int v19 = 1;
      }
      a2  = v15;
    }
    while (v19 < 0);
  }
  while (v5 < v15)
  {
    long long v33 = *(_OWORD *)v5;
    *(_OWORD *)int v5 = *(_OWORD *)v15;
    *(_OWORD *)unint64_t v15 = v33;
    long long v20 = v5;
    do
    {
      unint64_t v21 = v5[2];
      v5 += 2;
      unint64_t v22 = bswap64(v32);
      unint64_t v23 = bswap64(v21);
      if (v22 == v23 && (unint64_t v22 = bswap64(*((unint64_t *)&v32 + 1)), v23 = bswap64(v20[3]), v22 == v23))
      {
        int v24 = 0;
      }
      else if (v22 < v23)
      {
        int v24 = -1;
      }
      else
      {
        int v24 = 1;
      }
      long long v20 = v5;
    }
    while ((v24 & 0x80000000) == 0);
    BOOL v25 = v15;
    do
    {
      unint64_t v26 = *(v15 - 2);
      v15 -= 2;
      unint64_t v27 = bswap64(v32);
      unint64_t v28 = bswap64(v26);
      if (v27 == v28 && (v27 = bswap64(*((unint64_t *)&v32 + 1)), unint64_t v28 = bswap64(*(v25 - 1)), v27 == v28))
      {
        int v29 = 0;
      }
      else if (v27 < v28)
      {
        int v29 = -1;
      }
      else
      {
        int v29 = 1;
      }
      BOOL v25 = v15;
    }
    while (v29 < 0);
  }
  int v30 = v5 - 2;
  if (v5 - 2 != a1) {
    *(_OWORD *)a1  = *(_OWORD *)v30;
  }
  *(_OWORD *)int v30 = v32;
  return v5;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,otbr::Ip6Address *,std::__less<void,void> &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v30 = *a1;
  do
  {
    unint64_t v3 = bswap64(*(void *)&a1[v2 + 1]);
    unint64_t v4 = bswap64(v30);
    if (v3 == v4
      && (unint64_t v3 = bswap64(*((void *)&a1[v2 + 1] + 1)), v4 = bswap64(*((unint64_t *)&v30 + 1)), v3 == v4))
    {
      int v5 = 0;
    }
    else if (v3 < v4)
    {
      int v5 = -1;
    }
    else
    {
      int v5 = 1;
    }
    ++v2;
  }
  while (v5 < 0);
  unint64_t v6 = &a1[v2];
  unint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    while (v6 < a2)
    {
      unint64_t v8 = a2 - 1;
      unint64_t v13 = bswap64(*((void *)a2 - 2));
      unint64_t v14 = bswap64(v30);
      if (v13 == v14
        && (v13 = bswap64(*((void *)a2 - 1)), unint64_t v14 = bswap64(*((unint64_t *)&v30 + 1)), v13 == v14))
      {
        int v15 = 0;
      }
      else if (v13 < v14)
      {
        int v15 = -1;
      }
      else
      {
        int v15 = 1;
      }
      --a2;
      if (v15 < 0) {
        goto LABEL_28;
      }
    }
    unint64_t v8 = a2;
  }
  else
  {
    unint64_t v8 = a2;
    do
    {
      unint64_t v9 = *((void *)v8-- - 2);
      unint64_t v10 = bswap64(v9);
      unint64_t v11 = bswap64(v30);
      if (v10 == v11
        && (unint64_t v10 = bswap64(*((void *)a2 - 1)), v11 = bswap64(*((unint64_t *)&v30 + 1)), v10 == v11))
      {
        int v12 = 0;
      }
      else if (v10 < v11)
      {
        int v12 = -1;
      }
      else
      {
        int v12 = 1;
      }
      a2  = v8;
    }
    while ((v12 & 0x80000000) == 0);
  }
LABEL_28:
  if (v6 < v8)
  {
    unint64_t v16 = (unint64_t)v6;
    unint64_t v17 = v8;
    do
    {
      long long v18 = *(_OWORD *)v16;
      *(_OWORD *)unint64_t v16 = *v17;
      long long *v17 = v18;
      unint64_t v19 = v16;
      do
      {
        unint64_t v20 = *(void *)(v16 + 16);
        v16 += 16;
        unint64_t v21 = bswap64(v20);
        unint64_t v22 = bswap64(v30);
        if (v21 == v22
          && (unint64_t v21 = bswap64(*(void *)(v19 + 24)), v22 = bswap64(*((unint64_t *)&v30 + 1)), v21 == v22))
        {
          int v23 = 0;
        }
        else if (v21 < v22)
        {
          int v23 = -1;
        }
        else
        {
          int v23 = 1;
        }
        unint64_t v19 = v16;
      }
      while (v23 < 0);
      int v24 = v17;
      do
      {
        unint64_t v25 = *((void *)v17-- - 2);
        unint64_t v26 = bswap64(v25);
        unint64_t v27 = bswap64(v30);
        if (v26 == v27
          && (unint64_t v26 = bswap64(*((void *)v24 - 1)), v27 = bswap64(*((unint64_t *)&v30 + 1)), v26 == v27))
        {
          int v28 = 0;
        }
        else if (v26 < v27)
        {
          int v28 = -1;
        }
        else
        {
          int v28 = 1;
        }
        int v24 = v17;
      }
      while ((v28 & 0x80000000) == 0);
    }
    while (v16 < (unint64_t)v17);
    unint64_t v7 = (long long *)(v16 - 16);
  }
  if (v7 != a1) {
    *a1  = *v7;
  }
  long long *v7 = v30;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 2;
      unint64_t v7 = bswap64(*(a2 - 2));
      unint64_t v8 = bswap64(*a1);
      if (v7 != v8 || (v7 = bswap64(*(a2 - 1)), unint64_t v8 = bswap64(a1[1]), v7 != v8))
      {
        if (v7 < v8) {
          int v23 = -1;
        }
        else {
          int v23 = 1;
        }
        if (v23 < 0)
        {
          long long v24 = *(_OWORD *)a1;
          *(_OWORD *)a1  = *(_OWORD *)v6;
          *(_OWORD *)unint64_t v6 = v24;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = bswap64(*v10);
    unint64_t v14 = bswap64(*v9);
    if (v13 != v14 || (v13 = bswap64(v10[1]), unint64_t v14 = bswap64(v9[1]), v13 != v14))
    {
      int v15 = v13 < v14 ? -1 : 1;
      if (v15 < 0)
      {
        long long v25 = *(_OWORD *)v10;
        uint64_t v16 = v11;
        while (1)
        {
          unint64_t v17 = (char *)a1 + v16;
          *(_OWORD *)((char *)a1 + v16 + 48)  = *(_OWORD *)((char *)a1 + v16 + 32);
          if (v16 == -32) {
            break;
          }
          unint64_t v18 = bswap64(v25);
          unint64_t v19 = bswap64(*((void *)v17 + 2));
          if (v18 == v19
            && (unint64_t v18 = bswap64(*((unint64_t *)&v25 + 1)), v19 = bswap64(*((void *)v17 + 3)), v18 == v19))
          {
            int v20 = 0;
          }
          else if (v18 < v19)
          {
            int v20 = -1;
          }
          else
          {
            int v20 = 1;
          }
          v16 -= 16;
          if ((v20 & 0x80000000) == 0)
          {
            unint64_t v21 = (unint64_t *)((char *)a1 + v16 + 48);
            goto LABEL_24;
          }
        }
        unint64_t v21 = a1;
LABEL_24:
        *(_OWORD *)unint64_t v21 = v25;
        if (__CFADD__(v12++, 1))
        {
          __break(0x5500u);
          JUMPOUT(0x1003BE068);
        }
        if (v12 == 8) {
          return v10 + 2 == a2;
        }
      }
    }
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a2, a3);
  unint64_t v9 = bswap64(*a4);
  unint64_t v10 = bswap64(*a3);
  if (v9 != v10 || (unint64_t v9 = bswap64(a4[1]), v10 = bswap64(a3[1]), v9 != v10))
  {
    int v11 = v9 < v10 ? -1 : 1;
    if (v11 < 0)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3  = *(_OWORD *)a4;
      *(__n128 *)a4  = result;
      unint64_t v12 = bswap64(*a3);
      unint64_t v13 = bswap64(*a2);
      if (v12 != v13 || (unint64_t v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 != v13))
      {
        int v14 = v12 < v13 ? -1 : 1;
        if (v14 < 0)
        {
          __n128 result = *(__n128 *)a2;
          *(_OWORD *)a2  = *(_OWORD *)a3;
          *(__n128 *)a3  = result;
          unint64_t v15 = bswap64(*a2);
          unint64_t v16 = bswap64(*a1);
          if (v15 != v16 || (v15 = bswap64(a2[1]), unint64_t v16 = bswap64(a1[1]), v15 != v16))
          {
            if (v15 < v16) {
              int v17 = -1;
            }
            else {
              int v17 = 1;
            }
            if (v17 < 0)
            {
              __n128 result = *(__n128 *)a1;
              *(_OWORD *)a1  = *(_OWORD *)a2;
              *(__n128 *)a2  = result;
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  result.n128_u64[0]  = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a2, a3, a4).n128_u64[0];
  unint64_t v11 = bswap64(*a5);
  unint64_t v12 = bswap64(*a4);
  if (v11 != v12 || (v11 = bswap64(a5[1]), unint64_t v12 = bswap64(a4[1]), v11 != v12))
  {
    int v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      __n128 result = *(__n128 *)a4;
      *(_OWORD *)a4  = *(_OWORD *)a5;
      *(__n128 *)a5  = result;
      unint64_t v14 = bswap64(*a4);
      unint64_t v15 = bswap64(*a3);
      if (v14 != v15 || (unint64_t v14 = bswap64(a4[1]), v15 = bswap64(a3[1]), v14 != v15))
      {
        int v16 = v14 < v15 ? -1 : 1;
        if (v16 < 0)
        {
          __n128 result = *(__n128 *)a3;
          *(_OWORD *)a3  = *(_OWORD *)a4;
          *(__n128 *)a4  = result;
          unint64_t v17 = bswap64(*a3);
          unint64_t v18 = bswap64(*a2);
          if (v17 != v18 || (v17 = bswap64(a3[1]), unint64_t v18 = bswap64(a2[1]), v17 != v18))
          {
            int v19 = v17 < v18 ? -1 : 1;
            if (v19 < 0)
            {
              __n128 result = *(__n128 *)a2;
              *(_OWORD *)a2  = *(_OWORD *)a3;
              *(__n128 *)a3  = result;
              unint64_t v20 = bswap64(*a2);
              unint64_t v21 = bswap64(*a1);
              if (v20 == v21 && (unint64_t v20 = bswap64(a2[1]), v21 = bswap64(a1[1]), v20 == v21))
              {
                int v22 = 0;
              }
              else if (v20 < v21)
              {
                int v22 = -1;
              }
              else
              {
                int v22 = 1;
              }
              if (v22 < 0)
              {
                __n128 result = *(__n128 *)a1;
                *(_OWORD *)a1  = *(_OWORD *)a2;
                *(__n128 *)a2  = result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *,otbr::Ip6Address *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v15 = bswap64(*v14);
        unint64_t v16 = bswap64(*a1);
        if (v15 != v16 || (v15 = bswap64(v14[1]), unint64_t v16 = bswap64(a1[1]), v15 != v16))
        {
          int v17 = v15 < v16 ? -1 : 1;
          if (v17 < 0)
          {
            long long v18 = *(_OWORD *)v14;
            *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
            *(_OWORD *)a1  = v18;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>((uint64_t)a1, a4, v9, a1);
          }
        }
        v14 += 2;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      unint64_t v20 = a2 - 2;
      do
      {
        long long v24 = *(_OWORD *)a1;
        unint64_t v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(a1, a4, v19);
        if (v20 == v21)
        {
          *(_OWORD *)unint64_t v21 = v24;
        }
        else
        {
          *(_OWORD *)unint64_t v21 = *(_OWORD *)v20;
          *(_OWORD *)unint64_t v20 = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>((uint64_t)a1, (uint64_t)(v21 + 2), a4, ((char *)(v21 + 2) - (char *)a1) >> 4);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = bswap64(*v8);
        unint64_t v11 = bswap64(v8[2]);
        if (v10 == v11 && (unint64_t v10 = bswap64(v8[1]), v11 = bswap64(v8[3]), v10 == v11)) {
          int v12 = 0;
        }
        else {
          int v12 = v10 < v11 ? -1 : 1;
        }
        if (v12 < 0)
        {
          uint64_t v7 = v9;
          v8 += 2;
        }
      }
      if ((v13 = bswap64(*v8), unint64_t v14 = bswap64(*a4), v13 == v14)
        && (v13 = bswap64(v8[1]), unint64_t v14 = bswap64(a4[1]), v13 == v14)
        || (v13 < v14 ? (int v15 = -1) : (int v15 = 1), (v15 & 0x80000000) == 0))
      {
        long long v23 = *(_OWORD *)a4;
        while (1)
        {
          unint64_t v16 = v8;
          *(_OWORD *)a4  = *(_OWORD *)v8;
          if (v5 < v7)
          {
LABEL_38:
            *(_OWORD *)unint64_t v16 = v23;
            return result;
          }
          if (v7 + 0x4000000000000000 < 0) {
            break;
          }
          uint64_t v7 = (2 * v7) | 1;
          if (__OFADD__(v7, 1)) {
            goto LABEL_41;
          }
          uint64_t v8 = (unint64_t *)(result + 16 * v7);
          if (v7 + 1 < a3)
          {
            unint64_t v17 = bswap64(*v8);
            unint64_t v18 = bswap64(v8[2]);
            if (v17 == v18 && (v17 = bswap64(v8[1]), unint64_t v18 = bswap64(v8[3]), v17 == v18)) {
              int v19 = 0;
            }
            else {
              int v19 = v17 < v18 ? -1 : 1;
            }
            if (v19 < 0)
            {
              v8 += 2;
              ++v7;
            }
          }
          unint64_t v20 = bswap64(*v8);
          unint64_t v21 = bswap64(v23);
          if (v20 == v21 && (unint64_t v20 = bswap64(v8[1]), v21 = bswap64(*((unint64_t *)&v23 + 1)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          a4  = v16;
          if (v22 < 0) {
            goto LABEL_38;
          }
        }
        __break(0x550Cu);
LABEL_41:
        __break(0x5500u);
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  BOOL v5 = __OFSUB__(a3, 2);
  if (v4 < 0) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v6 = v4 >> 1;
  while (v3 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = (2 * v3) | 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_24;
    }
    uint64_t v8 = &result[2 * v3 + 2];
    if (v7 + 1 >= a3)
    {
      uint64_t v3 = (2 * v3) | 1;
    }
    else
    {
      unint64_t v9 = bswap64(*v8);
      unint64_t v10 = bswap64(result[2 * v3 + 4]);
      if (v9 == v10 && (unint64_t v9 = bswap64(result[2 * v3 + 3]), v10 = bswap64(result[2 * v3 + 5]), v9 == v10))
      {
        int v11 = 0;
      }
      else if (v9 < v10)
      {
        int v11 = -1;
      }
      else
      {
        int v11 = 1;
      }
      if (v11 >= 0)
      {
        uint64_t v3 = (2 * v3) | 1;
      }
      else
      {
        uint64_t v8 = &result[2 * v3 + 4];
        uint64_t v3 = v7 + 1;
      }
    }
    *(_OWORD *)__n128 result = *(_OWORD *)v8;
    if (v5) {
      goto LABEL_25;
    }
    __n128 result = v8;
    if (v3 > v6) {
      return v8;
    }
  }
  __break(0x550Cu);
LABEL_24:
  __break(0x5500u);
LABEL_25:
  __break(0x5515u);
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,otbr::Ip6Address *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    BOOL v5 = (unint64_t *)(a1 + 16 * v4);
    uint64_t v6 = (__n128 *)(a2 - 16);
    unint64_t v7 = bswap64(*v5);
    unint64_t v8 = bswap64(*(void *)(a2 - 16));
    if (v7 != v8 || (v7 = bswap64(v5[1]), unint64_t v8 = bswap64(*(void *)(a2 - 8)), v7 != v8))
    {
      int v9 = v7 < v8 ? -1 : 1;
      if (v9 < 0)
      {
        __n128 v15 = *v6;
        do
        {
          unint64_t v10 = (__n128 *)v5;
          *uint64_t v6 = *(__n128 *)v5;
          if (!v4) {
            break;
          }
          unint64_t v4 = (v4 - 1) >> 1;
          BOOL v5 = (unint64_t *)(a1 + 16 * v4);
          unint64_t v11 = bswap64(*v5);
          unint64_t v12 = bswap64(v15.n128_u64[0]);
          if (v11 == v12 && (v11 = bswap64(v5[1]), unint64_t v12 = bswap64(v15.n128_u64[1]), v11 == v12)) {
            int v13 = 0;
          }
          else {
            int v13 = v11 < v12 ? -1 : 1;
          }
          uint64_t v6 = v10;
        }
        while (v13 < 0);
        __n128 result = v15;
        __n128 *v10 = v15;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__emplace_unique_key_args<std::string,std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>(uint64_t **a1, const void **a2, __n128 *a3, unint64_t *a4)
{
  unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  unint64_t v8 = *v7;
  if (!*v7)
  {
    int v9 = v7;
    std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__construct_node<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v12, v9, (uint64_t *)v11[0]);
    unint64_t v8 = (uint64_t *)v11[0];
    v11[0]  = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v8;
}

__n128 std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::__construct_node<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = (__n128 *)operator new(0x40uLL);
  *(void *)a4  = v8;
  *(void *)(a4 + 8)  = v7;
  __n128 result = *a2;
  void v8[2] = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  a2->n128_u64[1]  = 0;
  a2[1].n128_u64[0]  = 0;
  a2->n128_u64[0]  = 0;
  unint64_t v11 = *a3;
  *a3  = 0;
  v8[3].n128_u64[0]  = v10;
  v8[3].n128_u64[1]  = v11;
  *(unsigned char *)(a4 + 16)  = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1  = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>::operator()[abi:ne180100]((uint64_t)(a1 + 1), v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>((uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__remove_node_pointer(a1, a2);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<otbr::Mdns::Publisher::ServiceRegistration>>,0>((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void std::allocate_shared[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,otbr::OnceCallback<void ()(otbrError)>,void>(void *a1@<X1>, void *a2@<X8>)
{
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__allocation_guard[abi:ne180100]<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>((uint64_t)v5, 1uLL);
  std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::__shared_ptr_emplace[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,0>(v6, a1);
  unint64_t v4 = v6;
  uint64_t v6 = 0;
  *a2  = v4 + 3;
  a2[1]  = v4;
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__destroy[abi:ne180100]((uint64_t)v5);
}

void sub_1003BEB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__destroy[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__allocation_guard[abi:ne180100]<std::allocator<otbr::OnceCallback<void ()(otbrError)>>>(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 8)  = a2;
  *(void *)(a1 + 16)  = std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>::allocate[abi:ne180100](a1, a2);
  return a1;
}

void *std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

void *std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::__shared_ptr_emplace[abi:ne180100]<otbr::OnceCallback<void ()(otbrError)>,std::allocator<otbr::OnceCallback<void ()(otbrError)>>,0>(void *a1, void *a2)
{
  a1[1]  = 0;
  a1[2]  = 0;
  *a1  = off_10049FAE0;
  otbr::OnceCallback<void ()(otbrError)>::OnceCallback((uint64_t)(a1 + 3), a2);
  return a1;
}

void std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable  = (std::__shared_weak_count_vtbl *)off_10049FAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable  = (std::__shared_weak_count_vtbl *)off_10049FAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>::__on_zero_shared(uint64_t a1)
{
  return std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
}

void std::__allocation_guard<std::allocator<std::__shared_ptr_emplace<otbr::OnceCallback<void ()(otbrError)>>>>::__destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(void *)(a1 + 8) >= 0x492492492492493uLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }
}

uint64_t std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

__n128 std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)a2  = 0;
  *(void *)(a2 + 8)  = 0;
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16)  = result;
  *(void *)(a2 + 16)  = 0;
  *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return result;
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func(void *a1)
{
  *a1  = off_10049FB30;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func(void *a1)
{
  *a1  = off_10049FB30;
  uint64_t v1 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v1);

  operator delete();
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  v4[1]  = &v5;
  unsigned __int16 v4[2] = (void *)1;
  *uint64_t v2 = off_10049FB30;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl(v2 + 2, (void *)(a1 + 16));
  v4[0]  = 0;
  std::unique_ptr<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>,std::__allocator_destructor<std::allocator<std::allocator<std::placeholders::__ph<1> const&>>>>::~unique_ptr[abi:ne180100](v4);
  return v2;
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone(uint64_t a1, void *a2)
{
  *a2  = off_10049FB30;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl(a2 + 2, (void *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::operator()(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v4, (void *)(a1 + 16));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v2, v1);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v4);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1003BEFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target_type()
{
}

void **std::unique_ptr<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>,std::__allocator_destructor<std::allocator<std::allocator<std::placeholders::__ph<1> const&>>>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1  = 0;
  if (v2) {
    std::__allocator_destructor<std::allocator<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>>>::operator()[abi:ne180100]((uint64_t)(a1 + 1), v2);
  }
  return a1;
}

void *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl(void *a1, void *a2)
{
  unint64_t v4 = std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](a1, a2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](v4 + 2, a2 + 2);
  return a1;
}

void *std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *__n128 result = *a2;
  result[1]  = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__allocator_destructor<std::allocator<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(void *)(a1 + 8) >= 0x555555555555556uLL) {
    __break(0x550Cu);
  }
  else {
    operator delete(__p);
  }
}

uint64_t std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](a1 + 24);

  return std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v1);
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func(void *a1)
{
  *a1  = off_10049FC38;
  uint64_t v2 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::~__func(void *a1)
{
  *a1  = off_10049FC38;
  uint64_t v1 = (uint64_t)(a1 + 2);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::~shared_ptr[abi:ne180100](v1);

  operator delete();
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  v4[1]  = &v5;
  unsigned __int16 v4[2] = (void *)1;
  *uint64_t v2 = off_10049FC38;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl(v2 + 2, (void *)(a1 + 16));
  v4[0]  = 0;
  std::unique_ptr<std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>,std::__allocator_destructor<std::allocator<std::allocator<std::placeholders::__ph<1> const&>>>>::~unique_ptr[abi:ne180100](v4);
  return v2;
}

void *std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::__clone(uint64_t a1, void *a2)
{
  *a2  = off_10049FC38;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::placeholders::__ph<1>>::__tuple_impl(a2 + 2, (void *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateServiceRegistration(std::string const&,std::string const&,std::string const&,std::vector<std::string> const&,unsigned short,std::vector<otbr::Mdns::Publisher::TxtEntry> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::operator()(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v4, (void *)(a1 + 16));
  std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>::shared_ptr[abi:ne180100](&v2, v1);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v4);
  otbr::OnceCallback<void ()(otbrError)>::operator()(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1003BF328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<std::__bind<otbr::Mdns::Publisher::HandleDuplicateHostRegistration(std::string const&,std::vector<otbr::Ip6Address> const&,otbr::OnceCallback<void ()(otbrError)> &&)::$_0,std::shared_ptr<otbr::OnceCallback<void ()(otbrError)>>,std::shared_ptr,std::placeholders::__ph<1> const&>,std::allocator<std::placeholders::__ph<1> const&>,void ()(otbrError)>::target_type()
{
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4 = (char)a2[23];
  if (v4 >= 0) {
    size_t v5 = a2[23];
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    a3  = *(unsigned __int8 **)a3;
  }
  if (v4 < 0) {
    return memcmp(*(const void **)a2, a3, v5) == 0;
  }
  if (!v5) {
    return 1;
  }
  size_t v8 = v5 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *a3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

BOOL otbr::Mdns::Publisher::TxtEntry::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  if ((char)a1[23] < 0) {
    size_t v4 = *((void *)a1 + 1);
  }
  else {
    size_t v4 = a1[23];
  }
  uint64_t v5 = a2[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v4 != v5) {
    return 0;
  }
  if (v6 < 0) {
    a2  = *(unsigned __int8 **)a2;
  }
  if ((a1[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, v4)) {
      return 0;
    }
  }
  else if (v4)
  {
    int v7 = a1;
    while (*v7 == *a2)
    {
      ++v7;
      ++a2;
      if (!--v4) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  size_t v8 = (const void *)*((void *)a1 + 3);
  size_t v9 = *((void *)a1 + 4) - (void)v8;
  int v10 = (const void *)*((void *)v2 + 3);
  if (v9 == *((void *)v2 + 4) - (void)v10) {
    return memcmp(v8, v10, v9) == 0;
  }
  return 0;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::find<std::pair<std::string,std::string>>(uint64_t a1, const void **a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__lower_bound<std::pair<std::string,std::string>>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 != v4)
  {
    uint64_t v5 = v4;
    if (!std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>(a2, (const void **)(v4 + 32)))return v5; {
  }
    }
  return v3;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__lower_bound<std::pair<std::string,std::string>>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      int v7 = std::operator<[abi:ne180100]<std::string,std::string,std::string,std::string>((const void **)(v5 + 32), a2);
      size_t v8 = (uint64_t *)(v5 + 8);
      if (!v7)
      {
        size_t v8 = (uint64_t *)v5;
        a4  = v5;
      }
      uint64_t v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__remove_node_pointer(a1, a2);
  std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>,0>((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

uint64_t otbr::Ncp::ControllerOpenThread::ControllerOpenThread(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  BOOL v14 = otbr::MainloopProcessor::MainloopProcessor((otbr::MainloopProcessor *)a1);
  *(void *)BOOL v14 = off_10049FD30;
  *((void *)v14 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  *((void *)v14 + 8)  = 0;
  *((void *)v14 + ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0;
  *((void *)v14 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *((void *)v14 + 1ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  otbr::TaskRunner::TaskRunner((otbr::MainloopProcessor *)((char *)v14 + 96));
  *(void *)(a1 + 24ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 248)  = 0;
  *(void *)(a1 + 256)  = 0;
  *(unsigned char *)(a1 + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a6;
  if ((unint64_t)((char *)a3[1] - (char *)*a3) >= 0x18) {
    goto LABEL_9;
  }
  *(_OWORD *)(a1 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
  *(_OWORD *)(a1 + 48)  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  *(void *)(a1 + 16)  = a4;
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a2;
  *(unsigned char *)(a1 + 6ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a5;
  unint64_t v20 = *a3;
  unint64_t v21 = a3[1];
  if (*a3 != v21)
  {
    unsigned __int8 v22 = 0;
    while (1)
    {
      char v23 = v22 + 1;
      if (v22 >= 2u) {
        break;
      }
      uint64_t v24 = *v20++;
      *(void *)(a1 + 8 * v22++ + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v24;
      if (v20 == v21)
      {
        *(unsigned char *)(a1 + 48)  = v23;
        goto LABEL_7;
      }
    }
    *(unsigned char *)(a1 + 48)  = v23;
    __break(0x5512u);
LABEL_9:
    otbrLog(0, "NCP", "FAILED %s:%d - %s", v15, v16, v17, v18, v19, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/ncp/ncp_openthread.cpp");
    exit(-1);
  }
LABEL_7:
  *(_DWORD *)(a1 + 56)  = 1;
  return a1;
}

void sub_1003BF75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::function<void ()(unsigned long long)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  otbr::TaskRunner::~TaskRunner(v6);
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  size_t v8 = *v5;
  *uint64_t v5 = 0;
  if (v8) {
    std::default_delete<otbr::agent::ThreadHelper>::operator()[abi:ne180100]((int)v5, v8);
  }
  otbr::MainloopProcessor::~MainloopProcessor(v4);
  _Unwind_Resume(a1);
}

void otbr::Ncp::ControllerOpenThread::~ControllerOpenThread(otbr::Ncp::ControllerOpenThread *this)
{
  *(void *)this  = off_10049FD30;
  uint64_t v2 = (void **)((char *)this + 72);
  uint64_t v4 = (void **)((char *)this + 240);
  std::vector<std::function<void ()(unsigned long long)>>::__destroy_vector::operator()[abi:ne180100](&v4);
  otbr::TaskRunner::~TaskRunner((otbr::Ncp::ControllerOpenThread *)((char *)this + 96));
  uint64_t v4 = v2;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (std::random_device *)*((void *)this + 8);
  *((void *)this + 8)  = 0;
  if (v3) {
    std::default_delete<otbr::agent::ThreadHelper>::operator()[abi:ne180100](this + 64, v3);
  }
  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  uint64_t vars8;

  otbr::Ncp::ControllerOpenThread::~ControllerOpenThread(this);

  operator delete();
}

uint64_t otbr::Ncp::ControllerOpenThread::ConvertToOtbrLogLevel(otbr::Ncp::ControllerOpenThread *this)
{
  if (this > 4) {
    return 7;
  }
  else {
    return dword_1003FA8FC[(int)this];
  }
}

uint64_t otbr::Ncp::ControllerOpenThread::ConvertToOtLogLevel(unsigned int a1)
{
  if (a1 > 6) {
    return 5;
  }
  else {
    return dword_1003FA8E0[a1];
  }
}

uint64_t otbr::Ncp::ControllerOpenThread::SetOtbrAndOtLogLevel(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  otbrLogSetLevel(a2);
  if (v2 > 6) {
    unsigned int v3 = 5;
  }
  else {
    unsigned int v3 = dword_1003FA8E0[v2];
  }

  return otLoggingSetLevel(v3);
}

void otbr::Ncp::ControllerOpenThread::Init(otbr::Ncp::ControllerOpenThread *this)
{
  Level  = otbrLogGetLevel();
  if (Level > 6) {
    unsigned int v3 = 5;
  }
  else {
    unsigned int v3 = dword_1003FA8E0[Level];
  }
  if (!otLoggingSetLevel(v3))
  {
    uint64_t v9 = *((void *)this + 1);
    if (!v9)
    {
      uint64_t v9 = otSysInit((uint64_t)this + 16);
      *((void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = v9;
      if (!v9) {
        otbr::Ncp::ControllerOpenThread::Init();
      }
    }
    int v10 = otSetStateChangedCallback(v9, (void (*)(unint64_t, void *))otbr::Ncp::ControllerOpenThread::HandleStateChanged, (uint64_t)this);
    otbr::agent::ThreadHelper::LogOpenThreadResult((char)"Set state callback", v10);
    if (!v10) {
      operator new();
    }
  }
  otbrLog(0, "NCP", "FAILED %s:%d - %s", v4, v5, v6, v7, v8, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/ncp/ncp_openthread.cpp");
  exit(-1);
}

void sub_1003BFA38()
{
}

void otbr::Ncp::ControllerOpenThread::HandleStateChanged(otbr::Ncp::ControllerOpenThread *this, otbr::Ncp::ControllerOpenThread *a2, void *a3)
{
}

void otbr::Ncp::ControllerOpenThread::Deinit(otbr::Ncp::ControllerOpenThread *this)
{
  if (!*((void *)this + 1)) {
    otbr::Ncp::ControllerOpenThread::Deinit();
  }
  otSysDeinit(this);
  *((void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
}

void otbr::Ncp::ControllerOpenThread::HandleStateChanged(otbr::Ncp::ControllerOpenThread *this, int a2)
{
  uint64_t v4 = *((void *)this + 30);
  for (uint64_t i = *((void *)this + 31); v4 != i; v4 += 32)
    std::__function::__value_func<void ()(unsigned long long)>::operator()[abi:ne180100](v4);
  otbr::agent::ThreadHelper::StateChangedCallback(*((otbr::agent::ThreadHelper **)this + 8), a2);
}

BOOL otbr::Ncp::ControllerOpenThread::Update(uint64_t a1, uint64_t a2)
{
  if (otTaskletsArePending(*(void *)(a1 + 8)))
  {
    *(void *)(a2 + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
    *(void *)(a2 + 40ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  }
  uint64_t v4 = *(ot::Posix::Mainloop::Manager **)(a1 + 8);

  return otSysMainloopUpdate(v4, a2);
}

void otbr::Ncp::ControllerOpenThread::Process(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 264))
  {
    if (!otbr::agent::ThreadHelper::TryResumeNetwork(*(otbr::agent::ThreadHelper **)(a1 + 64))) {
      *(unsigned char *)(a1 + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
    }
  }
}

uint64_t otbr::Ncp::ControllerOpenThread::IsAutoAttachEnabled(otbr::Ncp::ControllerOpenThread *this)
{
  return *((unsigned __int8 *)this + 264);
}

uint64_t otbr::Ncp::ControllerOpenThread::DisableAutoAttach(uint64_t this)
{
  *(unsigned char *)(this + 26ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  return this;
}

void *otbr::Ncp::ControllerOpenThread::PostTimerTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 96;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  otbr::TaskRunner::Post(v4, a2, (uint64_t)v6);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
}

void sub_1003BFC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t otbr::Ncp::ControllerOpenThread::RegisterResetHandler(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 9;
  unint64_t v4 = a1[10];
  if (v4 >= a1[11])
  {
    uint64_t result = std::vector<std::function<void ()(void)>>::__emplace_back_slow_path<std::function<void ()(void)>>(v3, a2);
  }
  else
  {
    std::vector<std::function<void ()(void)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(void)>>((uint64_t)v3, a2);
    uint64_t result = v4 + 32;
  }
  a1[10]  = result;
  return result;
}

uint64_t otbr::Ncp::ControllerOpenThread::AddThreadStateChangedCallback(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 30;
  unint64_t v4 = a1[31];
  if (v4 >= a1[32])
  {
    uint64_t result = std::vector<std::function<void ()(unsigned long long)>>::__emplace_back_slow_path<std::function<void ()(unsigned long long)>>(v3, a2);
  }
  else
  {
    std::vector<std::function<void ()(unsigned long long)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(unsigned long long)>>((uint64_t)v3, a2);
    uint64_t result = v4 + 32;
  }
  a1[31]  = result;
  return result;
}

void otbr::Ncp::ControllerOpenThread::Reset(otbr::Ncp::ControllerOpenThread *this)
{
  gPlatResetReason  = 2;
  otSysDeinit(this);
  *((void *)this + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0;
  otbr::Ncp::ControllerOpenThread::Init(this);
}

char *otbr::Ncp::ControllerOpenThread::GetThreadVersion(otbr::Ncp::ControllerOpenThread *this)
{
  unsigned int v1 = otThreadGetVersion() - 2;
  if (v1 >= 3)
  {
    char Version = otThreadGetVersion();
    otbrLog(0, "NCP", "Unexpected thread version %hu", v4, v5, v6, v7, v8, Version);
    exit(-1);
  }
  return off_10049FD68[(__int16)v1];
}

void otPlatLog(unsigned int a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1 > 4) {
    int v9 = 7;
  }
  else {
    int v9 = dword_1003FA8FC[a1];
  }
  otbrLogvNoFilter(v9, a3, &a9);
}

void otPlatLogHandleLevelChanged(unsigned int a1)
{
  char v1 = a1;
  if (a1 > 4) {
    uint64_t v2 = 7;
  }
  else {
    uint64_t v2 = dword_1003FA8FC[a1];
  }
  otbrLogSetLevel(v2);
  otbrLog(6u, "NCP", "OpenThread log level changed to %d", v3, v4, v5, v6, v7, v1);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::default_delete<otbr::agent::ThreadHelper>::operator()[abi:ne180100](int a1, std::random_device *this)
{
  if (this)
  {
    otbr::agent::ThreadHelper::~ThreadHelper(this);
    operator delete();
  }
}

void otbr::agent::ThreadHelper::~ThreadHelper(std::random_device *this)
{
  std::random_device::~random_device(this + 142);
  std::__function::__value_func<void ()(otError)>::~__value_func[abi:ne180100](&this[70].__padding_);
  std::__function::__value_func<void ()(otError)>::~__value_func[abi:ne180100](&this[62].__padding_);
  std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100](&this[54].__padding_);
  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree((uint64_t)&this[44]);
  uint64_t v2 = this + 38;
  std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  uint64_t v2 = this + 32;
  std::vector<std::function<void ()(otDeviceRole)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  uint64_t v2 = this + 26;
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::~__value_func[abi:ne180100](&this[18].__padding_);
  uint64_t v2 = this + 12;
  std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::~__value_func[abi:ne180100](&this[4].__padding_);
}

void *std::__function::__value_func<void ()(otError)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void *std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void *a2)
{
  for (uint64_t result = *(void **)(a1 + 8);
        result != a2;
  *(void *)(a1 + 8)  = a2;
  return result;
}

void *std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::function<void ()(otDeviceRole)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(otDeviceRole)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void *std::vector<std::function<void ()(otDeviceRole)>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void *a2)
{
  for (uint64_t result = *(void **)(a1 + 8);
        result != a2;
  *(void *)(a1 + 8)  = a2;
  return result;
}

void *std::__function::__value_func<void ()(otDeviceRole)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    v1[1]  = v2;
    if (0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)v1[2] - (unsigned char *)v2) >> 2) >= 0x444444444444445) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }
}

void *std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(void)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void *std::vector<std::function<void ()(void)>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void *a2)
{
  for (uint64_t result = *(void **)(a1 + 8);
        result != a2;
  *(void *)(a1 + 8)  = a2;
  return result;
}

void std::vector<std::function<void ()(unsigned long long)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::function<void ()(unsigned long long)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    if ((unsigned char *)(*a1)[2] - (unsigned char *)v3 < 0)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void *std::vector<std::function<void ()(unsigned long long)>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void *a2)
{
  for (uint64_t result = *(void **)(a1 + 8);
        result != a2;
  *(void *)(a1 + 8)  = a2;
  return result;
}

void *std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(unsigned long long)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::vector<std::function<void ()(void)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(void)>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](*(void *)(a1 + 8), a2);
  *(void *)(a1 + 8)  = result + 32;
  return result;
}

uint64_t std::vector<std::function<void ()(void)>>::__emplace_back_slow_path<std::function<void ()(void)>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32;
  std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(v10);
  return v8;
}

void sub_1003C0804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(void)>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<std::function<void ()(void)>>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<std::function<void ()(void)>>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[32 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[32 * a2];
  return a1;
}

void *std::allocator<std::function<void ()(void)>>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v11 = *(void *)a1[2];
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v6 = *(void *)a1[1];
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>>(v2, (uint64_t)v10, (uint64_t)v5);
}

void *std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(void)>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void **)(a2 + 32); result != *(void **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](result);
    uint64_t result = (void *)(*(void *)(a2 + 32) + 32);
  }
  return result;
}

void *std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::function<void ()(void)>>::__destruct_at_end[abi:ne180100](a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void *std::__split_buffer<std::function<void ()(void)>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      unsigned __int16 v4[2] = v2 - 32;
      uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v2 - 32));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::vector<std::function<void ()(unsigned long long)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(unsigned long long)>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](*(void *)(a1 + 8), a2);
  *(void *)(a1 + 8)  = result + 32;
  return result;
}

uint64_t std::vector<std::function<void ()(unsigned long long)>>::__emplace_back_slow_path<std::function<void ()(unsigned long long)>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32;
  std::vector<std::function<void ()(unsigned long long)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(unsigned long long)>>::~__split_buffer(v10);
  return v8;
}

void sub_1003C0C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(unsigned long long)>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }
  *unint64_t v3 = 0;
  return a1;
}

uint64_t std::vector<std::function<void ()(unsigned long long)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::function<void ()(unsigned long long)>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v11 = *(void *)a1[2];
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v6 = *(void *)a1[1];
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(unsigned long long)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(unsigned long long)>*>>>(v2, (uint64_t)v10, (uint64_t)v5);
}

void *std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(unsigned long long)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(unsigned long long)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(unsigned long long)>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void **)(a2 + 32); result != *(void **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100](result);
    uint64_t result = (void *)(*(void *)(a2 + 32) + 32);
  }
  return result;
}

void *std::__split_buffer<std::function<void ()(unsigned long long)>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::function<void ()(unsigned long long)>>::__destruct_at_end[abi:ne180100](a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void *std::__split_buffer<std::function<void ()(unsigned long long)>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      unsigned __int16 v4[2] = v2 - 32;
      uint64_t result = std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100]((void *)(v2 - 32));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(void)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

otbr::TaskRunner *otbr::TaskRunner::TaskRunner(otbr::TaskRunner *this)
{
  uint64_t v2 = otbr::MainloopProcessor::MainloopProcessor(this);
  *(void *)uint64_t v2 = off_10049FD90;
  *((void *)v2 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *((void *)v2 + ot::Tlv::SetType(this, 3) = 0;
  *((void *)v2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *((void *)v2 + ot::ThreadTlv::SetType(this, 7) = 0;
  *((void *)v2 + 6)  = (char *)v2 + 56;
  *((_OWORD *)v2 + ot::NetworkData::NetworkDataTlv::SetType(this, 4) = xmmword_1003F9A10;
  *((void *)v2 + 1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 850045863;
  *(_OWORD *)((char *)v2 + 88)  = 0u;
  *(_OWORD *)((char *)v2 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)((char *)v2 + 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  uint64_t v3 = (int *)((char *)v2 + 8);
  *((void *)v2 + 1ot::ThreadTlv::SetType(this, 7) = 0;
  if (pipe((int *)v2 + 2) == -1
    || (int v4 = fcntl(*v3, 3, 0), fcntl(*v3, 4, v4 | 4u) == -1)
    || (int v5 = fcntl(*((_DWORD *)this + 3), 3, 0), fcntl(*((_DWORD *)this + 3), 4, v5 | 4u) == -1))
  {
    uint64_t v7 = __error();
    strerror(*v7);
    otbrLog(0, "UTILS", "FAILED %s:%d - %s", v8, v9, v10, v11, v12, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/task_runner.cpp");
    exit(-1);
  }
  return this;
}

void sub_1003C1158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex::~mutex(v14);
  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree(v13);
  std::vector<otbr::TaskRunner::DelayedTask>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  otbr::MainloopProcessor::~MainloopProcessor(v12);
  _Unwind_Resume(a1);
}

void otbr::TaskRunner::~TaskRunner(otbr::TaskRunner *this)
{
  *(void *)this  = off_10049FD90;
  int v2 = *((_DWORD *)this + 2);
  if (v2 != -1)
  {
    close(v2);
    *((_DWORD *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = -1;
  }
  int v3 = *((_DWORD *)this + 3);
  if (v3 != -1)
  {
    close(v3);
    *((_DWORD *)this + ot::Tlv::SetType(this, 3) = -1;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 80));
  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree((uint64_t)this + 48);
  int v4 = (void **)((char *)this + 16);
  std::vector<otbr::TaskRunner::DelayedTask>::__destroy_vector::operator()[abi:ne180100](&v4);
  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  uint64_t vars8;

  otbr::TaskRunner::~TaskRunner(this);

  operator delete();
}

void *otbr::TaskRunner::Post(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  otbr::TaskRunner::Post(a1, 0, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_1003C12DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t otbr::TaskRunner::Post(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  uint64_t v5 = otbr::TaskRunner::PushTask(a1, a2, (uint64_t)v7);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
  return v5;
}

void sub_1003C1374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t otbr::TaskRunner::PushTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  __buf  = 1;
  unint64_t v24 = 0;
  uint64_t v5 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == -1)
  {
    __break(0x5500u);
    goto LABEL_13;
  }
  *(void *)(a1 + 7ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v6 + 1;
  unint64_t v24 = v6;
  std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t **)(a1 + 48), &v24, (uint64_t *)&v24);
  uint64_t v7 = (uint64_t *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >= *(void *)(a1 + 32))
  {
    uint64_t v9 = std::vector<otbr::TaskRunner::DelayedTask>::__emplace_back_slow_path<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>(v7, (uint64_t *)&v24, &v26, a3);
  }
  else
  {
    std::vector<otbr::TaskRunner::DelayedTask>::__construct_one_at_end[abi:ne180100]<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>((uint64_t)v7, (uint64_t *)&v24, &v26, a3);
    uint64_t v9 = v8 + 48;
  }
  *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v9;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>(*(void **)(a1 + 16), v9, (uint64_t)&v27, 0xAAAAAAAAAAAAAAABLL * ((v9 - *(void *)(a1 + 16)) >> 4));
  std::mutex::unlock(v5);
  do
  {
    if (write(*(_DWORD *)(a1 + 12), &__buf, 1uLL) != -1) {
      return v24;
    }
  }
  while (*__error() == 4);
  if (*__error() != 35 && *__error() != 35)
  {
LABEL_13:
    uint64_t v18 = __error();
    strerror(*v18);
    otbrLog(0, "UTILS", "FAILED %s:%d - %s", v19, v20, v21, v22, v23, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/task_runner.cpp");
    exit(-1);
  }
  int v10 = *(_DWORD *)(a1 + 12);
  uint64_t v11 = __error();
  strerror(*v11);
  otbrLog(4u, "UTILS", "Failed to write fd %d: %s", v12, v13, v14, v15, v16, v10);
  return v24;
}

void sub_1003C1520(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void otbr::TaskRunner::Update(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (__darwin_check_fd_set_overflow(v4, (const void *)a2, 0)) {
    *(_DWORD *)(a2 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v4;
  }
  int v5 = *(_DWORD *)(a2 + 384);
  if (*(_DWORD *)(a1 + 8) > v5) {
    int v5 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a2 + 38ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v5;
  std::mutex::lock((std::mutex *)(a1 + 80));
  if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
    goto LABEL_14;
  }
  v6.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (__OFSUB__(v7, v6.__d_.__rep_))
  {
    __break(0x5515u);
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)(a2 + 392);
  uint64_t v9 = 1000000 * v8;
  if ((unsigned __int128)(v8 * (__int128)1000000) >> 64 != (1000000 * v8) >> 63)
  {
LABEL_18:
    __break(0x550Cu);
    goto LABEL_19;
  }
  uint64_t v10 = *(int *)(a2 + 400);
  BOOL v11 = __OFADD__(v10, v9);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = v10 + v9;
  if (v11)
  {
LABEL_19:
    __break(0x5500u);
    return;
  }
  if (v7 >= v6.__d_.__rep_) {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v13 = (v7 - v6.__d_.__rep_) / 1000;
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v13 = 0;
  }
  if (v12 >= v13)
  {
    *(void *)(a2 + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v13 / 1000000;
    *(_DWORD *)(a2 + 40ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v13 % 1000000;
  }
LABEL_14:

  std::mutex::unlock((std::mutex *)(a1 + 80));
}

void *otbr::TaskRunner::Process(int *a1)
{
  do
  {
    do
    {
      char v10 = 0;
      ssize_t v2 = read(a1[2], &v10, 1uLL);
    }
    while (v2 > 0);
  }
  while (v2 == -1 && *__error() == 4);
  if (*__error() != 35 && *__error() != 35)
  {
    int v4 = __error();
    strerror(*v4);
    otbrLog(0, "UTILS", "FAILED %s:%d - %s", v5, v6, v7, v8, v9, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/task_runner.cpp");
    exit(-1);
  }
  return otbr::TaskRunner::PopTasks((otbr::TaskRunner *)a1);
}

void *otbr::TaskRunner::PopTasks(otbr::TaskRunner *this)
{
  ssize_t v2 = (std::mutex *)((char *)this + 80);
  int v3 = (unint64_t **)((char *)this + 16);
  int v4 = (char *)this + 48;
  while (1)
  {
    void v12[3] = 0;
    std::mutex::lock(v2);
    uint64_t v5 = *((void *)this + 2);
    if (v5 == *((void *)this + 3)) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = *(void *)(v5 + 8);
    if (std::chrono::steady_clock::now().__d_.__rep_ < v6) {
      break;
    }
    uint64_t v7 = *v3;
    unint64_t v10 = 0;
    unint64_t v10 = *v7;
    std::function<void ()(void)>::operator=(v12, (uint64_t)(v7 + 2));
    std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>(*((char **)this + 2), *((void *)this + 3), (uint64_t)&v11, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 4));
    std::vector<otbr::TaskRunner::DelayedTask>::__base_destruct_at_end[abi:ne180100](v3, *((void *)this + 3) - 48);
    uint64_t v8 = std::__tree<unsigned long long>::__erase_unique<unsigned long long>((uint64_t)v4, &v10);
    std::mutex::unlock(v2);
    if (v8) {
      std::__function::__value_func<void ()(void)>::operator()[abi:ne180100]((uint64_t)v12);
    }
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v12);
  }
  std::mutex::unlock(v2);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v12);
}

void sub_1003C183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void otbr::TaskRunner::Cancel(otbr::TaskRunner *this, unint64_t a2)
{
  unint64_t v4 = a2;
  int v3 = (std::mutex *)((char *)this + 80);
  std::mutex::lock((std::mutex *)((char *)this + 80));
  std::__tree<unsigned long long>::__erase_unique<unsigned long long>((uint64_t)this + 48, &v4);
  std::mutex::unlock(v3);
}

void sub_1003C18B0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

{
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](a1, a2);
  return a1;
}

void std::vector<otbr::TaskRunner::DelayedTask>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  ssize_t v2 = *a1;
  if (*v2)
  {
    std::vector<otbr::TaskRunner::DelayedTask>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    int v3 = **a1;
    if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)(*a1)[2] - (unsigned char *)v3) >> 4) >= 0x555555555555556)
    {
      __break(0x550Cu);
    }
    else
    {
      operator delete(v3);
    }
  }
}

void *std::vector<otbr::TaskRunner::DelayedTask>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  int v3 = result;
  uint64_t v4 = result[1];
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 48;
      uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v4 - 32));
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1]  = a2;
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::__find_equal<_DNSRecordRef_t *>((uint64_t)a1, &v11, a2);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = (uint64_t *)operator new(0x28uLL);
    v9[1]  = a1 + 1;
    void v6[4] = *a3;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0]  = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,void *>>>>::reset[abi:ne180100](v9, 0);
  }
  return v6;
}

void *std::vector<otbr::TaskRunner::DelayedTask>::__construct_one_at_end[abi:ne180100]<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = std::allocator<otbr::TaskRunner::DelayedTask>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>(a1 + 16, v5, a2, a3, a4);
  *(void *)(a1 + 8)  = v5 + 6;
  return result;
}

void sub_1003C1B00(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::TaskRunner::DelayedTask>::__emplace_back_slow_path<unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v6 > 0x555555555555555) {
    goto LABEL_10;
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v13, v10, v5, (uint64_t)(a1 + 2));
  std::allocator<otbr::TaskRunner::DelayedTask>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>((uint64_t)(a1 + 2), v14, a2, a3, a4);
  v14 += 6;
  std::vector<otbr::TaskRunner::DelayedTask>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otbr::TaskRunner::DelayedTask>::~__split_buffer(v13);
  return v11;
}

void sub_1003C1C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otbr::TaskRunner::DelayedTask>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::allocator<otbr::TaskRunner::DelayedTask>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,unsigned long long &,std::chrono::duration<long long,std::ratio<1l,1000l>> &,std::function<void ()(void)>>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a5);
  otbr::TaskRunner::DelayedTask::DelayedTask(a2, v6, v7, (uint64_t)v9);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v9);
}

void sub_1003C1CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point otbr::TaskRunner::DelayedTask::DelayedTask(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1  = a2;
  result.__d_.__rep_  = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v8 = 1000000 * a3;
  if ((unsigned __int128)(a3 * (__int128)1000000) >> 64 == (1000000 * a3) >> 63)
  {
    BOOL v9 = __OFADD__(result.__d_.__rep_, v8);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = result.__d_.__rep_ + v8;
    if (!v9)
    {
      a1[1]  = v10;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a4);
      return (std::chrono::steady_clock::time_point)a1;
    }
  }
  else
  {
    __break(0x550Cu);
  }
  __break(0x5500u);
  return result;
}

uint64_t std::vector<otbr::TaskRunner::DelayedTask>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>((uint64_t)(a1 + 2), a1[1], (_OWORD *)a1[1], *a1, (_OWORD *)*a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v15 = v16;
  v13[0]  = a1;
  v13[1]  = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    BOOL v9 = a3;
    do
    {
      v9 -= 3;
      std::allocator_traits<std::allocator<otbr::TaskRunner::DelayedTask>>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,otbr::TaskRunner::DelayedTask,void>(a1, (_OWORD *)(v7 - 48), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 48;
      *((void *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1003C1E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::allocator_traits<std::allocator<otbr::TaskRunner::DelayedTask>>::construct[abi:ne180100]<otbr::TaskRunner::DelayedTask,otbr::TaskRunner::DelayedTask,void>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *a2  = *a3;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v11 = *(void *)a1[2];
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v6 = *(void *)a1[1];
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>(v2, (uint64_t)v10, (uint64_t)v5);
}

void *std::__allocator_destroy[abi:ne180100]<std::allocator<otbr::TaskRunner::DelayedTask>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>,std::reverse_iterator<std::reverse_iterator<otbr::TaskRunner::DelayedTask*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(i + 16));
    uint64_t i = *(void *)(a2 + 32) + 48;
  }
  return result;
}

void *std::__split_buffer<otbr::TaskRunner::DelayedTask>::~__split_buffer(void *a1)
{
  std::__split_buffer<otbr::TaskRunner::DelayedTask>::__destruct_at_end[abi:ne180100](a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - (void)result) >> 4) < 0x555555555555556)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void *std::__split_buffer<otbr::TaskRunner::DelayedTask>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      unsigned __int16 v4[2] = v2 - 48;
      uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v2 - 32));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    if (result[6 * (v4 >> 1) + 1] >= *(void *)(a2 - 40))
    {
      uint64_t v7 = (void *)(a2 - 48);
      long long v9 = *(_OWORD *)(a2 - 48);
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, a2 - 32);
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = &v5[6 * v6];
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
        std::function<void ()(void)>::operator=(v8 + 2, (uint64_t)(v7 + 2));
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
      }
      while (v5[6 * v6 + 1] >= *((uint64_t *)&v9 + 1));
      *(_OWORD *)uint64_t v7 = v9;
      std::function<void ()(void)>::operator=(v7 + 2, (uint64_t)v10);
      return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v10);
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3]  = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3]  = v4;
      *(void *)(a2 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
    }
  }
  else
  {
    a1[3]  = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3]  = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__tree<unsigned long long>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredInstanceInfo const&)>,std::function<void ()(std::string const&,otbr::Mdns::Publisher::DiscoveredHostInfo const&)>>>>>::find<unsigned long long>(a1, a2);
  if ((uint64_t *)(a1 + 8) == v3) {
    return 0;
  }
  std::__tree<unsigned long long>::erase(a1, v3);
  return 1;
}

uint64_t std::__tree<unsigned long long>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__remove_node_pointer(a1, a2);
  operator delete(a2);
  return v3;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3]  = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3]  = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3]  = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }
  return result;
}

void sub_1003C25FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    long long v12 = *(_OWORD *)result;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(result + 16));
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>(v7, a3, a4);
    long long v9 = (_OWORD *)(a2 - 48);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = v8 + 2;
    if ((void *)(a2 - 48) == v8)
    {
      *(_OWORD *)uint64_t v8 = v12;
      std::function<void ()(void)>::operator=(v10, (uint64_t)v13);
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *v9;
      uint64_t v11 = (void *)(a2 - 32);
      std::function<void ()(void)>::operator=(v10, (uint64_t)v11);
      _OWORD *v9 = v12;
      std::function<void ()(void)>::operator=(v11, (uint64_t)v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>(v7, (uint64_t)(v8 + 6), a3, 0xAAAAAAAAAAAAAAABLL * (((char *)(v8 + 6) - v7) >> 4));
    }
    return (char *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v13);
  }
  return result;
}

void sub_1003C2728(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,otbr::TaskRunner::DelayedTask::Comparator &,std::__wrap_iter<otbr::TaskRunner::DelayedTask*>>(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  BOOL v6 = __OFSUB__(a3, 2);
  if (v5 < 0) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v7 = v5 >> 1;
  while (v4 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = (2 * v4) | 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_19;
    }
    long long v9 = &result[6 * v4 + 6];
    if (v8 + 1 >= a3)
    {
      uint64_t v4 = (2 * v4) | 1;
    }
    else
    {
      uint64_t v10 = result[6 * v4 + 7];
      uint64_t v11 = v9[7];
      BOOL v12 = v10 < v11;
      BOOL v13 = v10 >= v11;
      if (v12) {
        uint64_t v4 = (2 * v4) | 1;
      }
      else {
        uint64_t v4 = v8 + 1;
      }
      v9 += 6 * v13;
    }
    *(_OWORD *)uint64_t result = *(_OWORD *)v9;
    uint64_t result = std::function<void ()(void)>::operator=(result + 2, (uint64_t)(v9 + 2));
    if (v6) {
      goto LABEL_20;
    }
    uint64_t result = v9;
    if (v4 > v7) {
      return v9;
    }
  }
  __break(0x550Cu);
LABEL_19:
  __break(0x5500u);
LABEL_20:
  __break(0x5515u);
  return result;
}

uint64_t otbr::agent::ThreadHelper::ThreadHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = a2;
  *(void *)(a1 + 8)  = a3;
  *(void *)(a1 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 48)  = 0;
  *(void *)(a1 + 56)  = 0;
  *(void *)(a1 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 96)  = 0;
  *(void *)(a1 + 10ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 11ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 128)  = 0;
  *(void *)(a1 + 136)  = 0;
  *(void *)(a1 + 14ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 15ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 16ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 168)  = 0;
  *(void *)(a1 + 19ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(void *)(a1 + 18ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  *(void *)(a1 + 176)  = a1 + 184;
  *(unsigned char *)(a1 + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 208)  = 0;
  *(void *)(a1 + 24ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  *(void *)(a1 + 27ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  *(_OWORD *)(a1 + 32ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_OWORD *)(a1 + 336)  = 0u;
  *(_OWORD *)(a1 + 35ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
  *(_OWORD *)(a1 + 368)  = 0u;
  *(_OWORD *)(a1 + 38ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a1 + 40ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_OWORD *)(a1 + 416)  = 0u;
  *(_OWORD *)(a1 + 43ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
  *(_OWORD *)(a1 + 448)  = 0u;
  *(_OWORD *)(a1 + 46ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a1 + 48ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_OWORD *)(a1 + 496)  = 0u;
  *(_OWORD *)(a1 + 51ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
  *(_OWORD *)(a1 + 528)  = 0u;
  *(_OWORD *)(a1 + 54ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a1 + 30ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(void *)(a1 + 55ot::NetworkDiagnostic::Tlv::SetType(this, 9) = 0;
  std::random_device::random_device[abi:ne180100]((std::random_device *)(a1 + 568));
  return a1;
}

void sub_1003C28D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__function::__value_func<void ()(otError)>::~__value_func[abi:ne180100]((void *)(v10 + 280));
  std::__function::__value_func<void ()(otError)>::~__value_func[abi:ne180100]((void *)(v10 + 248));
  std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100]((void *)(v10 + 216));
  std::__tree<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::__map_value_compare<_DNSRecordRef_t *,std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>,std::less<_DNSRecordRef_t *>,true>,std::allocator<std::__value_type<_DNSRecordRef_t *,otbr::Ip6Address>>>::~__tree(v11);
  a10  = (void **)(v10 + 152);
  std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10  = (void **)(v10 + 128);
  std::vector<std::function<void ()(otDeviceRole)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10  = (void **)(v10 + 104);
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::~__value_func[abi:ne180100]((void *)(v10 + 72));
  a10  = (void **)(v10 + 48);
  std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::~__value_func[abi:ne180100]((void *)(v10 + 16));
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1003C29BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void otbr::agent::ThreadHelper::StateChangedCallback(otbr::agent::ThreadHelper *this, int a2)
{
  if ((a2 & 4) == 0) {
    goto LABEL_17;
  }
  Deviceunsigned int Role = otThreadGetDeviceRole(*(void *)this);
  uint64_t v10 = *((void *)this + 16);
  uint64_t v11 = *((void *)this + 17);
  while (v10 != v11)
  {
    LODWORD(v15[0])  = DeviceRole;
    std::__function::__value_func<void ()(otDeviceRole)>::operator()[abi:ne180100](v10);
    v10 += 32;
  }
  if (DeviceRole <= 1) {
    goto LABEL_17;
  }
  if (*((void *)this + 30))
  {
    if (*((unsigned char *)this + 200))
    {
      otbrLog(6u, "UTILS", "StateChangedCallback is called during waiting for Mgmt Set Response", v4, v5, v6, v7, v8, v13);
      return;
    }
    unsigned __int8 v12 = *((unsigned char *)this + 566);
    if (v12)
    {
      memset(v15, 0, sizeof(v15));
      if (otDatasetSendMgmtPendingSet(*(void *)this, (uint64_t)v15, (char *)this + 312, v12, (uint64_t)otbr::agent::ThreadHelper::MgmtSetResponseHandler, (uint64_t)this))
      {
        std::__function::__value_func<void ()(otError,long long)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)this + 216);
        std::__function::__value_func<void ()(otError,long long)>::operator=[abi:ne180100]((void *)this + 27);
        *(_OWORD *)((char *)this + 31ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
        *(_OWORD *)((char *)this + 328)  = 0u;
        *(_OWORD *)((char *)this + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
        *(_OWORD *)((char *)this + 36ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
        *(_OWORD *)((char *)this + 376)  = 0u;
        *(_OWORD *)((char *)this + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
        *(_OWORD *)((char *)this + 408)  = 0u;
        *(_OWORD *)((char *)this + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
        *(_OWORD *)((char *)this + 44ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
        *(_OWORD *)((char *)this + 456)  = 0u;
        *(_OWORD *)((char *)this + 47ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
        *(_OWORD *)((char *)this + 488)  = 0u;
        *(_OWORD *)((char *)this + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
        *(_OWORD *)((char *)this + 52ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
        *(_OWORD *)((char *)this + 536)  = 0u;
        *(_OWORD *)((char *)this + 55ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0u;
        *((unsigned char *)this + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
        std::__function::__value_func<void ()(otError,long long)>::operator()[abi:ne180100]((uint64_t)v14);
        std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100](v14);
        if ((a2 & 0x10000000) == 0) {
          return;
        }
      }
      else
      {
        *((unsigned char *)this + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 1;
        if ((a2 & 0x10000000) == 0) {
          return;
        }
      }
      goto LABEL_18;
    }
    std::__function::__value_func<void ()(otError,long long)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)this + 216);
    std::__function::__value_func<void ()(otError,long long)>::operator=[abi:ne180100]((void *)this + 27);
    v14[0]  = *((void *)this + 26);
    std::__function::__value_func<void ()(otError,long long)>::operator()[abi:ne180100]((uint64_t)v15);
    std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100](v15);
LABEL_17:
    if ((a2 & 0x10000000) == 0) {
      return;
    }
    goto LABEL_18;
  }
  if (!*((void *)this + 34)) {
    goto LABEL_17;
  }
  LODWORD(v15[0])  = 0;
  std::__function::__value_func<void ()(otError)>::operator()[abi:ne180100]((uint64_t)this + 248);
  std::__function::__value_func<void ()(otError)>::operator=[abi:ne180100]((void *)this + 31);
  if ((a2 & 0x10000000) == 0) {
    return;
  }
LABEL_18:
  otbr::agent::ThreadHelper::ActiveDatasetChangedCallback(this);
}

void sub_1003C2BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *otbr::agent::ThreadHelper::MgmtSetResponseHandler(int a1, uint64_t a2)
{
  return otbr::agent::ThreadHelper::MgmtSetResponseHandler(a2, a1);
}

void otbr::agent::ThreadHelper::ActiveDatasetChangedCallback(otbr::agent::ThreadHelper *this)
{
  ActiveTlvs  = otDatasetGetActiveTlvs(*(void *)this, v11);
  if (ActiveTlvs)
  {
    char v3 = otThreadErrorToString(ActiveTlvs);
    otbrLog(4u, "UTILS", "Error handling active dataset change: %s", v4, v5, v6, v7, v8, v3);
  }
  else
  {
    uint64_t v9 = *((void *)this + 19);
    uint64_t v10 = *((void *)this + 20);
    while (v9 != v10)
    {
      std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::operator()[abi:ne180100](v9);
      v9 += 32;
    }
  }
}

uint64_t otbr::agent::ThreadHelper::AddDeviceRoleHandler(uint64_t *a1, uint64_t a2)
{
  char v3 = a1 + 16;
  unint64_t v4 = a1[17];
  if (v4 >= a1[18])
  {
    uint64_t result = std::vector<std::function<void ()(otDeviceRole)>>::__emplace_back_slow_path<std::function<void ()(otDeviceRole)>&>(v3, a2);
  }
  else
  {
    std::vector<std::function<void ()(otDeviceRole)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otDeviceRole)>&>((uint64_t)v3, a2);
    uint64_t result = v4 + 32;
  }
  a1[17]  = result;
  return result;
}

uint64_t *otbr::agent::ThreadHelper::Scan(uint64_t *result, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    char v3 = result;
    unint64_t v4 = result + 2;
    std::function<void ()(otError,std::vector<otActiveScanResult> const&)>::operator=(result + 2, a2);
    v3[7]  = v3[6];
    uint64_t result = (uint64_t *)otLinkActiveScan(*v3, 0, 0, (uint64_t)otbr::agent::ThreadHelper::ActiveScanHandler, (uint64_t)v3);
    if (result)
    {
      if (*(void *)(a2 + 24))
      {
        memset(v5, 0, sizeof(v5));
        int v6 = (int)result;
        std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::operator()[abi:ne180100]((uint64_t)v4);
        uint64_t v7 = (void **)v5;
        std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100](&v7);
      }
      return std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::operator=[abi:ne180100](v4);
    }
  }
  return result;
}

void sub_1003C2DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<otActiveScanResult>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::function<void ()(otError,std::vector<otActiveScanResult> const&)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *otbr::agent::ThreadHelper::ActiveScanHandler(long long *a1, void *a2)
{
  return otbr::agent::ThreadHelper::ActiveScanHandler(a2, a1);
}

void *otbr::agent::ThreadHelper::EnergyScan(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  Preferredint ChannelMask = otPlatRadioGetPreferredChannelMask(*a1, a2, a3, a4, a5, a6, a7, a8);
  if (!*(void *)(a3 + 24)) {
    return std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=[abi:ne180100](a1 + 9);
  }
  if (v9 > 0xFFFE)
  {
    LODWORD(result)  = 7;
LABEL_7:
    memset(v14, 0, sizeof(v14));
    int v15 = (int)result;
    std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator()[abi:ne180100]((uint64_t)(a1 + 9));
    long long v16 = (void **)v14;
    std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100](&v16);
    return std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=[abi:ne180100](a1 + 9);
  }
  unsigned int v12 = PreferredChannelMask;
  std::function<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=(a1 + 9, a3);
  a1[14]  = a1[13];
  uint64_t result = (void *)otLinkEnergyScan(*a1, v12, v9, (uint64_t)otbr::agent::ThreadHelper::EnergyScanCallback, (uint64_t)a1);
  if (!result) {
    return result;
  }
  if (*(void *)(a3 + 24)) {
    goto LABEL_7;
  }
  return std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=[abi:ne180100](a1 + 9);
}

void sub_1003C2F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<otbr::Ip6Address>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::function<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t otbr::agent::ThreadHelper::EnergyScanCallback(_WORD *a1, uint64_t a2)
{
  return otbr::agent::ThreadHelper::EnergyScanCallback(a2, a1);
}

uint64_t otbr::agent::ThreadHelper::RandomFill(uint64_t this, char *a2, uint64_t a3)
{
  uint64_t v6 = 0xFF00000000;
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = this + 568;
    do
    {
      this  = std::uniform_int_distribution<int>::operator()<std::random_device>((uint64_t)&v6, v5, &v6);
      *a2++  = this;
      --v3;
    }
    while (v3);
  }
  return this;
}

void *otbr::agent::ThreadHelper::ActiveScanHandler(void *result, long long *a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t v3 = (_OWORD *)result[7];
    if ((unint64_t)v3 >= result[8])
    {
      uint64_t result = (void *)std::vector<otActiveScanResult>::__push_back_slow_path<otActiveScanResult const&>(result + 6, a2);
    }
    else
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      long long v6 = a2[2];
      *(_OWORD *)((char *)v3 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = *(long long *)((char *)a2 + 44);
      v3[1]  = v5;
      char v3[2] = v6;
      *uint64_t v3 = v4;
      uint64_t result = (void *)((char *)v3 + 60);
    }
    v2[7]  = result;
  }
  else if (result[5])
  {
    return (void *)std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::operator()[abi:ne180100]((uint64_t)(result + 2));
  }
  return result;
}

uint64_t otbr::agent::ThreadHelper::EnergyScanCallback(uint64_t result, _WORD *a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t v3 = (uint64_t *)(result + 104);
    unint64_t v4 = *(void *)(v2 + 112);
    if (v4 >= *(void *)(v2 + 120))
    {
      uint64_t result = std::vector<otEnergyScanResult>::__push_back_slow_path<otEnergyScanResult const&>(v3, a2);
    }
    else
    {
      std::vector<otEnergyScanResult>::__construct_one_at_end[abi:ne180100]<otEnergyScanResult const&>((uint64_t)v3, a2);
      uint64_t result = v4 + 2;
    }
    *(void *)(v2 + 11ot::NetworkData::NetworkDataTlv::SetType(this, 2) = result;
  }
  else if (*(void *)(result + 96))
  {
    return std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator()[abi:ne180100](result + 72);
  }
  return result;
}

uint64_t otbr::agent::ThreadHelper::RandomChannelFromChannelMask(otbr::agent::ThreadHelper *this, unsigned int a2)
{
  int v2 = 0;
  unsigned __int8 v3 = 0;
  do
  {
    if ((a2 >> v2))
    {
      if (v3 >= 0x20u) {
        goto LABEL_8;
      }
      uint64_t v4 = v3++;
      *((unsigned char *)&v7[2] + vot::NetworkData::NetworkDataTlv::SetType(this, 4) = v2;
    }
    ++v2;
  }
  while (v2 != 32);
  v7[0]  = 0;
  v7[1]  = v3 - 1;
  unsigned int v5 = std::uniform_int_distribution<int>::operator()<std::random_device>((uint64_t)v7, (uint64_t)this + 568, v7);
  if (v5 >= 0x20) {
LABEL_8:
  }
    __break(0x5512u);
  return *((unsigned __int8 *)&v7[2] + v5);
}

uint64_t otbr::agent::ThreadHelper::Attach(uint64_t this, uint64_t a2, int a3, unint64_t a4, long long **a5, long long **a6, int a7, uint64_t a8)
{
  __int16 v35 = a3;
  if (*(void *)(a8 + 24))
  {
    unsigned int v9 = (uint64_t *)this;
    if (*(void *)(this + 240) || *(void *)(this + 272))
    {
      this  = 13;
      goto LABEL_5;
    }
    uint64_t v11 = a5[1];
    if (v11 != *a5 && (char *)v11 - (char *)*a5 != 16)
    {
LABEL_46:
      this  = 7;
LABEL_5:
      if (*(void *)(a8 + 24))
      {
        int v37 = this;
        uint64_t v36 = 0;
        return std::__function::__value_func<void ()(otError,long long)>::operator()[abi:ne180100](a8);
      }
      return this;
    }
    uint64_t v17 = a6[1];
    if (*a6 == v17)
    {
      if (!a7) {
        goto LABEL_46;
      }
    }
    else
    {
      this  = 7;
      if (!a7 || (char *)v17 - (char *)*a6 != 16) {
        goto LABEL_5;
      }
    }
    if (a3 == 0xFFFF)
    {
      do
        otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v35, 2);
      while (v35 == -1);
    }
    if (a4 == -1)
    {
      int8x8_t v40 = (int8x8_t)-1;
      do
        otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v40, 8);
      while (*(void *)&v40 == -1);
    }
    else
    {
      uint64x2_t v18 = (uint64x2_t)vdupq_n_s64(a4);
      int8x8_t v40 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003FA940), (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003FA930)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003FA960), (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1003FA950))));
    }
    if (*a5 == a5[1]) {
      otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v39, 16);
    }
    else {
      long long v39 = **a5;
    }
    if (*a6 == a6[1]) {
      otbr::agent::ThreadHelper::RandomFill((uint64_t)v9, (char *)&v38, 16);
    }
    else {
      long long v38 = **a6;
    }
    if ((otIp6IsEnabled(*v9) & 1) == 0)
    {
      this  = otIp6SetEnabled(*v9, 1);
      if (this) {
        goto LABEL_5;
      }
    }
    uint64_t v19 = *(char *)(a2 + 23) >= 0 ? (ot *)a2 : *(ot **)a2;
    this  = otThreadSetNetworkName(*v9, v19);
    if (this) {
      goto LABEL_5;
    }
    this  = otLinkSetPanId(*v9, v35);
    if (this) {
      goto LABEL_5;
    }
    this  = otThreadSetExtendedPanId(*v9, (uint64_t)&v40);
    if (this) {
      goto LABEL_5;
    }
    this  = otThreadSetNetworkKey(*v9, (uint64_t)&v39);
    if (this) {
      goto LABEL_5;
    }
    unsigned int v27 = otPlatRadioGetPreferredChannelMask(*v9, v20, v21, v22, v23, v24, v25, v26) & a7;
    if (v27 || (unsigned int v27 = otLinkGetSupportedChannelMask(*v9) & a7) != 0)
    {
      char v33 = otbr::agent::ThreadHelper::RandomChannelFromChannelMask((otbr::agent::ThreadHelper *)v9, v27);
      this  = otLinkSetChannel(*v9, v33);
      if (this) {
        return this;
      }
      this  = otThreadSetPskc(*v9, (uint64_t)&v38);
      if (!this)
      {
        this  = otThreadSetEnabled(*v9, 1);
        if (!this)
        {
          v9[26]  = 0;
          return (uint64_t)std::function<void ()(otError,long long)>::operator=(v9 + 27, a8);
        }
      }
      goto LABEL_5;
    }
    otbrLog(4u, "UTILS", "Invalid channel mask", v28, v29, v30, v31, v32, v34);
    goto LABEL_46;
  }
  return this;
}

void *std::function<void ()(otError,long long)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(otError,long long)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(otError,long long)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t otbr::agent::ThreadHelper::Attach(uint64_t *a1, uint64_t a2)
{
  if (a1[30] || a1[34])
  {
    uint64_t result = 13;
LABEL_4:
    if (*(void *)(a2 + 24)) {
      return std::__function::__value_func<void ()(otError,long long)>::operator()[abi:ne180100](a2);
    }
    return result;
  }
  if ((otIp6IsEnabled(*a1) & 1) == 0)
  {
    uint64_t result = otIp6SetEnabled(*a1, 1);
    if (result) {
      goto LABEL_4;
    }
  }
  uint64_t result = otThreadSetEnabled(*a1, 1);
  if (result) {
    goto LABEL_4;
  }

  return (uint64_t)std::function<void ()(otError,long long)>::operator=(a1 + 27, a2);
}

uint64_t otbr::agent::ThreadHelper::Detach(otbr::agent::ThreadHelper *this)
{
  uint64_t result = otThreadSetEnabled(*(void *)this, 0);
  if (!result)
  {
    uint64_t v3 = *(void *)this;
    return otIp6SetEnabled(v3, 0);
  }
  return result;
}

void otbr::agent::ThreadHelper::Reset(otbr::agent::ThreadHelper *this)
{
}

uint64_t sub_1003C366C()
{
  return 0;
}

uint64_t otbr::agent::ThreadHelper::JoinerStart(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a8 + 24))
  {
    unsigned int v9 = (uint64_t *)result;
    if (*(void *)(result + 240) || *(void *)(result + 272))
    {
      uint64_t result = 13;
LABEL_5:
      if (*(void *)(a8 + 24)) {
        return std::__function::__value_func<void ()(otError)>::operator()[abi:ne180100](a8);
      }
      return result;
    }
    if ((otIp6IsEnabled(*(void *)result) & 1) == 0)
    {
      uint64_t result = otIp6SetEnabled(*v9, 1);
      if (result) {
        goto LABEL_5;
      }
    }
    long long v16 = *(char *)(a2 + 23) >= 0 ? (ot *)a2 : *(ot **)a2;
    uint64_t v17 = *(char *)(a3 + 23) >= 0 ? (ot *)a3 : *(ot **)a3;
    uint64x2_t v18 = *(char *)(a4 + 23) >= 0 ? (ot *)a4 : *(ot **)a4;
    uint64_t v19 = *(char *)(a5 + 23) >= 0 ? (ot *)a5 : *(ot **)a5;
    uint64_t v20 = *(char *)(a6 + 23) >= 0 ? (ot *)a6 : *(ot **)a6;
    uint64_t v21 = *(char *)(a7 + 23) >= 0 ? (char *)a7 : *(char **)a7;
    uint64_t result = otJoinerStart(*v9, v16, v17, v18, v19, v20, v21, (uint64_t)otbr::agent::ThreadHelper::JoinerCallback, (uint64_t)v9);
    if (result) {
      goto LABEL_5;
    }
    return (uint64_t)std::function<void ()(otError)>::operator=(v9 + 31, a8);
  }
  return result;
}

void otbr::agent::ThreadHelper::JoinerCallback(int a1, uint64_t *a2)
{
}

void *std::function<void ()(otError)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(otError)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(otError)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(otError)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void otbr::agent::ThreadHelper::JoinerCallback(uint64_t *a1, int a2)
{
  if (a2)
  {
    char v3 = otThreadErrorToString(a2);
    otbrLog(4u, "UTILS", "Failed to join Thread network: %s", v4, v5, v6, v7, v8, v3);
    unsigned int v9 = a1 + 31;
    std::__function::__value_func<void ()(otError)>::operator()[abi:ne180100]((uint64_t)v9);
    std::__function::__value_func<void ()(otError)>::operator=[abi:ne180100](v9);
  }
  else
  {
    int v10 = otThreadSetEnabled(*a1, 1);
    if (v10) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 6;
    }
    otThreadErrorToString(v10);
    otbrLog(v11, "UTILS", "%s: %s", v12, v13, v14, v15, v16, (char)"Start Thread network");
  }
}

void otbr::agent::ThreadHelper::LogOpenThreadResult(char a1, int a2)
{
  if (a2) {
    unsigned int v3 = 4;
  }
  else {
    unsigned int v3 = 6;
  }
  otThreadErrorToString(a2);
  otbrLog(v3, "UTILS", "%s: %s", v4, v5, v6, v7, v8, a1);
}

uint64_t otbr::agent::ThreadHelper::TryResumeNetwork(otbr::agent::ThreadHelper *this)
{
  if (otLinkGetPanId(*(void *)this) == 0xFFFF
    || otThreadGetDeviceRole(*(void *)this)
    || (otIp6IsEnabled(*(void *)this) & 1) != 0)
  {
    return 0;
  }
  uint64_t v2 = otIp6SetEnabled(*(void *)this, 1);
  if (v2 || (uint64_t v2 = otThreadSetEnabled(*(void *)this, 1), v2)) {
    otIp6SetEnabled(*(void *)this, 0);
  }
  return v2;
}

uint64_t otbr::agent::ThreadHelper::AttachAllNodesTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v42, 0, 128);
  Deviceunsigned int Role = otThreadGetDeviceRole(*(void *)a1);
  if (!*(void *)(a3 + 24))
  {
    otbrLog(4u, "UTILS", "Attach Handler is nullptr", v7, v8, v9, v10, v11, v38);
    goto LABEL_6;
  }
  if (*(void *)(a1 + 240) || *(void *)(a1 + 272))
  {
    Active  = 5;
    goto LABEL_7;
  }
  uint64_t v14 = *(const void **)a2;
  uint64_t v15 = *(const void **)(a2 + 8);
  size_t v16 = (size_t)v15 - *(void *)a2;
  if (v16 > 0xFE) {
    goto LABEL_6;
  }
  unsigned int v17 = DeviceRole;
  if (v15 != v14) {
    memmove(__dst, v14, v16);
  }
  v46[30]  = v16;
  Active  = otDatasetParseTlvs((unsigned __int8 *)__dst, (uint64_t)v43);
  if (Active) {
    goto LABEL_7;
  }
  if ((~v44 & 0xFBD) != 0) {
    goto LABEL_6;
  }
  unsigned int v18 = v46[30];
  if (v46[30] >= 3u)
  {
    uint64_t v19 = (char *)__dst + v46[30];
    unsigned __int16 Next = (otbr::Tlv *)__dst;
    do
    {
      if (*(unsigned char *)Next == 51) {
        goto LABEL_6;
      }
      unsigned __int16 Next = (otbr::Tlv *)otbr::Tlv::GetNext(Next);
    }
    while ((char *)Next + 2 < v19);
    unsigned int v18 = v46[30];
    if (v46[30] >= 3u)
    {
      uint64_t v21 = (char *)__dst + v46[30];
      uint64_t v22 = (otbr::Tlv *)__dst;
      do
      {
        if (*(unsigned char *)v22 == 52) {
          goto LABEL_6;
        }
        uint64_t v22 = (otbr::Tlv *)otbr::Tlv::GetNext(v22);
      }
      while ((char *)v22 + 2 < v21);
      unsigned int v18 = v46[30];
      if (v46[30] > 0xEEu)
      {
LABEL_6:
        Active  = 7;
        goto LABEL_7;
      }
    }
  }
  if (v18 == 255) {
    goto LABEL_46;
  }
  uint64_t v23 = (otbr::Tlv *)((char *)__dst + v18);
  *(unsigned char *)uint64_t v23 = 51;
  uint64_t result = clock_gettime(_CLOCK_REALTIME, &__tp);
  if ((unint64_t)__tp.tv_nsec >> 49)
  {
    __break(0x550Cu);
    return result;
  }
  if (v18 > 0xFD) {
LABEL_46:
  }
    __break(1u);
  unint64_t v24 = (((((__tp.tv_nsec & 0x1FFFFFFFFFFFFuLL) << 6) * (unsigned __int128)0x44B82FA09B5A53uLL) >> 64) >> 10) & 0xFFFELL | (__tp.tv_sec << 16);
  *((unsigned char *)v23 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 8;
  unint64_t v25 = v18 + 2;
  for (uint64_t i = 56; i != -8; i -= 8)
  {
    if (v25 > 0xFE) {
      goto LABEL_46;
    }
    *((unsigned char *)__dst + v25++)  = v24 >> i;
  }
  uint64_t v27 = otbr::Tlv::GetNext(v23);
  *(_WORD *)uint64_t v27 = 1076;
  *(_DWORD *)(v27 + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = -527236096;
  uint64_t v28 = otbr::Tlv::GetNext((otbr::Tlv *)v27) - (void)__dst;
  v46[30]  = v28;
  if (!(_BYTE)v28) {
    otbr::agent::ThreadHelper::AttachAllNodesTo();
  }
  if (v17 > 1)
  {
    Active  = otDatasetSendMgmtPendingSet(*(void *)a1, (uint64_t)v42, (char *)__dst, v28, (uint64_t)otbr::agent::ThreadHelper::MgmtSetResponseHandler, a1);
    if (!Active)
    {
      *(void *)(a1 + 208)  = 300000;
      uint64_t result = (uint64_t)std::function<void ()(otError,long long)>::operator=((void *)(a1 + 216), a3);
      *(unsigned char *)(a1 + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 1;
      return result;
    }
    goto LABEL_7;
  }
  Active  = otDatasetGetActive(*(void *)a1, (uint64_t)v41);
  int v29 = Active;
  if (Active != 23 && Active
    || Active && (Active  = otDatasetSetActiveTlvs(*(void *)a1, (unsigned __int8 *)__dst)) != 0
    || (otIp6IsEnabled(*(void *)a1) & 1) == 0 && (Active  = otIp6SetEnabled(*(void *)a1, 1)) != 0
    || (Active  = otThreadSetEnabled(*(void *)a1, 1)) != 0)
  {
LABEL_7:
    int v40 = Active;
    v41[0]  = 0;
    return std::__function::__value_func<void ()(otError,long long)>::operator()[abi:ne180100](a3);
  }
  uint64_t v30 = (_OWORD *)(a1 + 312);
  if (v29)
  {
    *(void *)(a1 + 208)  = 0;
    _OWORD *v30 = 0u;
    *(_OWORD *)(a1 + 328)  = 0u;
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 36ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 376)  = 0u;
    *(_OWORD *)(a1 + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 408)  = 0u;
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 44ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 456)  = 0u;
    *(_OWORD *)(a1 + 47ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 488)  = 0u;
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 52ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 536)  = 0u;
    *(_OWORD *)(a1 + 55ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0u;
  }
  else
  {
    *(void *)(a1 + 208)  = 300000;
    long long v31 = __dst[13];
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = __dst[12];
    *(_OWORD *)(a1 + 52ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v31;
    *(_OWORD *)(a1 + 536)  = *(_OWORD *)v46;
    *(_OWORD *)(a1 + 55ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = *(_OWORD *)&v46[15];
    long long v32 = __dst[9];
    *(_OWORD *)(a1 + 44ot::NetworkData::NetworkDataTlv::SetType(this, 0) = __dst[8];
    *(_OWORD *)(a1 + 456)  = v32;
    long long v33 = __dst[11];
    *(_OWORD *)(a1 + 47ot::NetworkData::NetworkDataTlv::SetType(this, 2) = __dst[10];
    *(_OWORD *)(a1 + 488)  = v33;
    long long v34 = __dst[5];
    *(_OWORD *)(a1 + 376)  = __dst[4];
    *(_OWORD *)(a1 + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v34;
    long long v35 = __dst[7];
    *(_OWORD *)(a1 + 408)  = __dst[6];
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v35;
    long long v36 = __dst[1];
    _OWORD *v30 = __dst[0];
    *(_OWORD *)(a1 + 328)  = v36;
    long long v37 = __dst[3];
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = __dst[2];
    *(_OWORD *)(a1 + 36ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v37;
  }
  *(unsigned char *)(a1 + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  return (uint64_t)std::function<void ()(otError,long long)>::operator=((void *)(a1 + 216), a3);
}

uint64_t otbr::Tlv::GetNext(otbr::Tlv *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 1);
  if (v1 == 255)
  {
    uint64_t v1 = __rev16(*((unsigned __int16 *)this + 1));
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 1;
  }
  return (uint64_t)this + v2 + v1 + 1;
}

void *otbr::agent::ThreadHelper::MgmtSetResponseHandler(uint64_t a1, int a2)
{
  v17[3]  = 0;
  otThreadErrorToString(a2);
  if (a2) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = 6;
  }
  otbrLog(v9, "UTILS", "%s: %s", v4, v5, v6, v7, v8, (char)"MgmtSetResponseHandler()");
  *(unsigned char *)(a1 + 20ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  if (*(void *)(a1 + 240))
  {
    std::function<void ()(otError,long long)>::operator=(v17, a1 + 216);
    *(void *)(a1 + 208)  = 0;
    std::__function::__value_func<void ()(otError,long long)>::operator=[abi:ne180100]((void *)(a1 + 216));
    *(_OWORD *)(a1 + 31ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 328)  = 0u;
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 36ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 376)  = 0u;
    *(_OWORD *)(a1 + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 408)  = 0u;
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 44ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 456)  = 0u;
    *(_OWORD *)(a1 + 47ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 488)  = 0u;
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 52ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 536)  = 0u;
    *(_OWORD *)(a1 + 55ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0u;
    std::__function::__value_func<void ()(otError,long long)>::operator()[abi:ne180100]((uint64_t)v17);
  }
  else
  {
    otbrLog(4u, "UTILS", "mAttachHandler is nullptr", v10, v11, v12, v13, v14, v16);
    *(void *)(a1 + 208)  = 0;
    *(_OWORD *)(a1 + 31ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 328)  = 0u;
    *(_OWORD *)(a1 + 34ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 36ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 376)  = 0u;
    *(_OWORD *)(a1 + 39ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 408)  = 0u;
    *(_OWORD *)(a1 + 42ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 44ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 456)  = 0u;
    *(_OWORD *)(a1 + 47ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
    *(_OWORD *)(a1 + 488)  = 0u;
    *(_OWORD *)(a1 + 50ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
    *(_OWORD *)(a1 + 52ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
    *(_OWORD *)(a1 + 536)  = 0u;
    *(_OWORD *)(a1 + 55ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = 0u;
  }
  return std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100](v17);
}

void sub_1003C3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(otError,long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t otbr::agent::ThreadHelper::AddActiveDatasetChangeHandler(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = a1 + 19;
  unint64_t v4 = a1[20];
  if (v4 >= a1[21])
  {
    uint64_t result = std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__push_back_slow_path<std::function<void ()(otOperationalDatasetTlvs const&)>>(v3, a2);
  }
  else
  {
    std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otOperationalDatasetTlvs const&)>>((uint64_t)v3, a2);
    uint64_t result = v4 + 32;
  }
  a1[20]  = result;
  return result;
}

void *otbr::agent::ThreadHelper::DetachGracefully(uint64_t *a1, uint64_t a2)
{
  if (a1[38]
    || otThreadDetachGracefully(*a1, (void (*)(void *))otbr::agent::ThreadHelper::DetachGracefullyCallback, (uint64_t)a1))
  {
    return (void *)std::__function::__value_func<void ()(otError)>::operator()[abi:ne180100](a2);
  }

  return std::function<void ()(otError)>::operator=(a1 + 35, a2);
}

uint64_t otbr::agent::ThreadHelper::DetachGracefullyCallback(uint64_t this)
{
  if (*(void *)(this + 304)) {
    return std::__function::__value_func<void ()(otError)>::operator()[abi:ne180100](this + 280);
  }
  return this;
}

uint64_t std::__function::__value_func<void ()(otDeviceRole)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__value_func<void ()(otError,long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(otError,long long)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3]  = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(otError,long long)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__value_func<void ()(otError)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *std::__function::__value_func<void ()(otError)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3]  = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::vector<std::function<void ()(otDeviceRole)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otDeviceRole)>&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = std::__function::__value_func<void ()(otDeviceRole)>::__value_func[abi:ne180100](v3, a2);
  *(void *)(a1 + 8)  = v3 + 32;
  return result;
}

void sub_1003C43F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(otDeviceRole)>>::__emplace_back_slow_path<std::function<void ()(otDeviceRole)>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(otDeviceRole)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32;
  std::vector<std::function<void ()(otDeviceRole)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(otDeviceRole)>>::~__split_buffer(v10);
  return v8;
}

void sub_1003C44B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(otDeviceRole)>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(otDeviceRole)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::vector<std::function<void ()(otDeviceRole)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<void ()(otDeviceRole)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v11 = *(void *)a1[2];
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v6 = *(void *)a1[1];
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>>(v2, (uint64_t)v10, (uint64_t)v5);
}

void *std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(otDeviceRole)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otDeviceRole)>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void **)(a2 + 32); result != *(void **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    std::__function::__value_func<void ()(otDeviceRole)>::~__value_func[abi:ne180100](result);
    uint64_t result = (void *)(*(void *)(a2 + 32) + 32);
  }
  return result;
}

void *std::__split_buffer<std::function<void ()(otDeviceRole)>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::function<void ()(otDeviceRole)>>::__destruct_at_end[abi:ne180100](a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void *std::__split_buffer<std::function<void ()(otDeviceRole)>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      unsigned __int16 v4[2] = v2 - 32;
      uint64_t result = std::__function::__value_func<void ()(otDeviceRole)>::~__value_func[abi:ne180100]((void *)(v2 - 32));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3]  = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3]  = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3]  = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }
  return result;
}

void sub_1003C4B88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *std::__function::__value_func<void ()(otError,std::vector<otActiveScanResult> const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3]  = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3]  = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3]  = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3]  = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }
  return result;
}

void sub_1003C4F64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *std::__function::__value_func<void ()(otError,std::vector<otEnergyScanResult> const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3]  = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::uniform_int_distribution<int>::operator()<std::random_device>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if (result != *a3)
  {
    unsigned int v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::random_device,unsigned int>::__independent_bits_engine((uint64_t)v11, a2, 0x20uLL);
      std::random_device::result_type v10 = std::random_device::operator()(v11[0]);
      return v12 & v10;
    }
    else
    {
      uint64_t v7 = __clz(v5);
      uint64_t v8 = 31;
      if (((v5 << v7) & 0x7FFFFFFF) != 0) {
        uint64_t v8 = 32;
      }
      std::__independent_bits_engine<std::random_device,unsigned int>::__independent_bits_engine((uint64_t)v11, a2, v8 - v7);
      do
        std::random_device::result_type v9 = std::random_device::operator()(v11[0]);
      while ((v12 & v9) >= v5);
      return *a3 + (v12 & v9);
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::random_device,unsigned int>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8)  = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16)  = a3 / v3;
  *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v3;
  *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0;
  if (v3 < a3 % v3) {
    goto LABEL_15;
  }
  unsigned int v5 = 0;
  *(void *)(result + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v3 - a3 % v3;
  *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  if (v4 <= 0x1E && v3 > a3) {
    goto LABEL_11;
  }
  if (v4 > 0x20)
  {
LABEL_15:
    __break(0x5515u);
    return result;
  }
  unsigned int v5 = 0xFFFFFFFF >> (32 - v4);
LABEL_11:
  if (v4 >= 0x1F) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 48)  = v5;
  *(_DWORD *)(result + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v7;
  return result;
}

uint64_t std::vector<otActiveScanResult>::__push_back_slow_path<otActiveScanResult const&>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 2);
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x444444444444444) {
    goto LABEL_10;
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 2) > v3) {
    unint64_t v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 2);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 2) >= 0x222222222222222) {
    unint64_t v6 = 0x444444444444444;
  }
  else {
    unint64_t v6 = v3;
  }
  std::__split_buffer<otActiveScanResult>::__split_buffer(v13, v6, v2, (uint64_t)(a1 + 2));
  unsigned int v7 = v14;
  long long v9 = a2[1];
  long long v8 = a2[2];
  long long v10 = *(_OWORD *)((char *)a2 + 44);
  _OWORD *v14 = *a2;
  v7[1]  = v9;
  *(_OWORD *)((char *)v7 + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v10;
  void v7[2] = v8;
  uint64_t v14 = (_OWORD *)((char *)v7 + 60);
  std::vector<otActiveScanResult>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otActiveScanResult>::~__split_buffer(v13);
  return v11;
}

void sub_1003C5240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otActiveScanResult>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<otActiveScanResult>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v8 = a2[1];
  }
  else
  {
    do
    {
      long long v5 = *(_OWORD *)(v3 - 60);
      long long v6 = *(_OWORD *)(v3 - 44);
      long long v7 = *(_OWORD *)(v3 - 28);
      uint64_t v8 = v4 - 60;
      *(_OWORD *)(v4 - 16)  = *(_OWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 28)  = v7;
      *(_OWORD *)(v4 - 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v6;
      *(_OWORD *)(v4 - 6ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v5;
      v4 -= 60;
      v3 -= 60;
    }
    while (v3 != v2);
  }
  a2[1]  = v8;
  uint64_t v9 = *result;
  *uint64_t result = v8;
  a2[1]  = v9;
  uint64_t v10 = result[1];
  result[1]  = a2[2];
  a2[2]  = v10;
  uint64_t v11 = result[2];
  result[2]  = a2[3];
  a2[3]  = v11;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otActiveScanResult>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0;
  a1[4]  = a4;
  if (a2) {
    long long v7 = (char *)std::allocator<otActiveScanResult>::allocate[abi:ne180100](a4, a2);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[60 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[60 * a2];
  return a1;
}

void *std::allocator<otActiveScanResult>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x444444444444445) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(60 * a2);
}

void *std::__split_buffer<otActiveScanResult>::~__split_buffer(void *a1)
{
  std::__split_buffer<otActiveScanResult>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[3] - (void)result) >> 2) < 0x444444444444445)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<otActiveScanResult>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = (v2 - a2 - 60) % 0x3CuLL + a2;
  }
  return result;
}

uint64_t std::vector<otEnergyScanResult>::__construct_one_at_end[abi:ne180100]<otEnergyScanResult const&>(uint64_t result, _WORD *a2)
{
  uint64_t v2 = *(_WORD **)(result + 8);
  *uint64_t v2 = *a2;
  *(void *)(result + 8)  = v2 + 1;
  return result;
}

uint64_t std::vector<otEnergyScanResult>::__push_back_slow_path<otEnergyScanResult const&>(uint64_t *a1, _WORD *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 1;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 > v3) {
    unint64_t v3 = a1[2] - *a1;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v7 = v3;
  }
  std::__split_buffer<otEnergyScanResult>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  *v11++  = *a2;
  std::vector<otEnergyScanResult>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<otEnergyScanResult>::~__split_buffer(v10);
  return v8;
}

void sub_1003C54E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otEnergyScanResult>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<otEnergyScanResult>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  while (v3 != v2)
  {
    __int16 v5 = *(_WORD *)(v3 - 2);
    v3 -= 2;
    *(_WORD *)(v4 - ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v5;
    v4 -= 2;
  }
  a2[1]  = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1]  = v6;
  uint64_t v7 = result[1];
  result[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = result[2];
  result[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

void *std::__split_buffer<otEnergyScanResult>::__split_buffer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3]  = 0;
  a1[4]  = a4;
  if (a2) {
    uint64_t v7 = (char *)std::allocator<otEnergyScanResult>::allocate[abi:ne180100](a4, a2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[2 * a3];
  *a1  = v7;
  a1[1]  = v8;
  a1[2]  = v8;
  a1[3]  = &v7[2 * a2];
  return a1;
}

void *std::allocator<otEnergyScanResult>::allocate[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void *std::__split_buffer<otEnergyScanResult>::~__split_buffer(void *a1)
{
  std::__split_buffer<otEnergyScanResult>::__destruct_at_end[abi:ne180100]((uint64_t)a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

uint64_t std::__split_buffer<otEnergyScanResult>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2) {
    *(void *)(result + 16)  = v2 + ((a2 - v2 + 1) & 0xFFFFFFFFFFFFFFFELL);
  }
  return result;
}

void *std::__function::__value_func<void ()(otError,long long)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3]  = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3]  = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3]  = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }
  return result;
}

void sub_1003C58A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(otError)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(otError)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3]  = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3]  = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3]  = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3]  = v5;
      a2[3]  = v4;
    }
  }
  return result;
}

void sub_1003C5BAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__construct_one_at_end[abi:ne180100]<std::function<void ()(otOperationalDatasetTlvs const&)>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100](*(void *)(a1 + 8), a2);
  *(void *)(a1 + 8)  = result + 32;
  return result;
}

uint64_t std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__push_back_slow_path<std::function<void ()(otOperationalDatasetTlvs const&)>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if (v2 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v3 >> 59) {
    goto LABEL_10;
  }
  unint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if (v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  std::__split_buffer<std::function<void ()(void)>>::__split_buffer(v10, v7, v2, (uint64_t)(a1 + 2));
  std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100](v11, a2);
  v11 += 32;
  std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__swap_out_circular_buffer(a1, v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::~__split_buffer(v10);
  return v8;
}

void sub_1003C5CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v4;
  }
  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }
  *unint64_t v3 = 0;
  return a1;
}

uint64_t std::vector<std::function<void ()(otOperationalDatasetTlvs const&)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1]  = v5;
  uint64_t v6 = *a1;
  *a1  = v5;
  a2[1]  = v6;
  uint64_t v7 = a1[1];
  a1[1]  = a2[2];
  a2[2]  = v7;
  uint64_t v8 = a1[2];
  a1[2]  = a2[3];
  a2[3]  = v8;
  *a2  = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a7;
  long long v14 = v15;
  v12[0]  = a1;
  v12[1]  = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::__value_func[abi:ne180100](v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v11 = *(void *)a1[2];
  uint64_t v12 = v1;
  uint64_t v13 = v11;
  uint64_t v14 = v1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[1] + 8);
  uint64_t v6 = *(void *)a1[1];
  uint64_t v7 = v3;
  uint64_t v8 = v6;
  uint64_t v9 = v3;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>>(v2, (uint64_t)v10, (uint64_t)v5);
}

void *std::__allocator_destroy[abi:ne180100]<std::allocator<std::function<void ()(otOperationalDatasetTlvs const&)>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>,std::reverse_iterator<std::reverse_iterator<std::function<void ()(otOperationalDatasetTlvs const&)>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void **)(a2 + 32); result != *(void **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::~__value_func[abi:ne180100](result);
    uint64_t result = (void *)(*(void *)(a2 + 32) + 32);
  }
  return result;
}

void *std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::~__split_buffer(void *a1)
{
  std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destruct_at_end[abi:ne180100](a1, a1[1]);
  uint64_t result = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  if ((uint64_t)(a1[3] - (void)result) >= 0)
  {
    operator delete(result);
    return a1;
  }
  __break(0x550Cu);
  return result;
}

void *std::__split_buffer<std::function<void ()(otOperationalDatasetTlvs const&)>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      unsigned __int16 v4[2] = v2 - 32;
      uint64_t result = std::__function::__value_func<void ()(otOperationalDatasetTlvs const&)>::~__value_func[abi:ne180100]((void *)(v2 - 32));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *otbr::MainloopManager::AddMainloopProcessor(otbr::MainloopManager *this, otbr::MainloopProcessor *a2)
{
  uint64_t v3 = a2;
  if (!a2) {
    otbr::MainloopManager::AddMainloopProcessor();
  }
  return std::list<otbr::MainloopProcessor *>::emplace_back<otbr::MainloopProcessor *&>((uint64_t *)this, &v3);
}

void *std::list<otbr::MainloopProcessor *>::emplace_back<otbr::MainloopProcessor *&>(uint64_t *a1, void *a2)
{
  uint64_t result = std::__list_imp<otbr::MainloopProcessor *>::__create_node[abi:ne180100]<otbr::MainloopProcessor *&>((uint64_t)a1, 0, 0, a2);
  uint64_t v4 = *a1;
  *uint64_t result = *a1;
  result[1]  = a1;
  *(void *)(v4 + 8)  = result;
  *a1  = (uint64_t)result;
  uint64_t v5 = a1[2];
  BOOL v6 = __CFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(0x5500u);
  }
  else
  {
    a1[2]  = v7;
    result += 2;
  }
  return result;
}

void otbr::MainloopManager::RemoveMainloopProcessor(otbr::MainloopManager *this, otbr::MainloopProcessor *a2)
{
  uint64_t v2 = a2;
  std::list<otbr::MainloopProcessor *>::remove((uint64_t)this, &v2);
}

void std::list<otbr::MainloopProcessor *>::remove(uint64_t a1, void *a2)
{
  v9[0]  = (uint64_t)v9;
  v9[1]  = (uint64_t)v9;
  uint64_t v9[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v5 = v2[2];
      BOOL v6 = v2 + 1;
      if (v5 == *a2)
      {
        uint64_t v7 = (void *)*v6;
        uint64_t v8 = (void *)a1;
        if (v7 != (void *)a1)
        {
          uint64_t v8 = v7;
          while (v8[2] == v5)
          {
            uint64_t v8 = (void *)v8[1];
            if (v8 == (void *)a1)
            {
              uint64_t v8 = (void *)a1;
              break;
            }
          }
        }
        std::list<otbr::MainloopProcessor *>::splice((uint64_t)v9, v9, a1, v2, v8);
        if (v8 == (void *)a1) {
          break;
        }
        BOOL v6 = v8 + 1;
      }
      uint64_t v2 = (void *)*v6;
    }
    while (*v6 != a1);
  }
  std::__list_imp<otbr::MainloopProcessor *>::clear(v9);
}

void sub_1003C6158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<otbr::MainloopProcessor *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t otbr::MainloopManager::Update(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != result)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 16) + 16))(*(void *)(v2 + 16), a2);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != v4);
  }
  return result;
}

uint64_t otbr::MainloopManager::Process(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != result)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 16) + 24))(*(void *)(v2 + 16), a2);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != v4);
  }
  return result;
}

void *std::__list_imp<otbr::MainloopProcessor *>::__create_node[abi:ne180100]<otbr::MainloopProcessor *&>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v10 = 1;
  uint64_t v7 = operator new(0x18uLL);
  void *v7 = a2;
  v7[1]  = a3;
  void v7[2] = *a4;
  uint64_t v11 = 0;
  std::__allocation_guard<std::allocator<std::__list_node<otbr::MainloopProcessor *,void *>>>::__destroy[abi:ne180100]((uint64_t)v9);
  return v7;
}

void std::__allocation_guard<std::allocator<std::__list_node<otbr::MainloopProcessor *,void *>>>::__destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(void *)(a1 + 8) >= 0xAAAAAAAAAAAAAABuLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }
}

uint64_t std::list<otbr::MainloopProcessor *>::splice(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    uint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      if (v5 != a4)
      {
        uint64_t v6 = 0;
        uint64_t v7 = a4;
        while (1)
        {
          uint64_t v8 = v6 + 1;
          if (__OFADD__(v6, 1)) {
            goto LABEL_16;
          }
          uint64_t v7 = (void *)v7[1];
          ++v6;
          if (v7 == v5) {
            goto LABEL_9;
          }
        }
      }
      uint64_t v8 = 0;
LABEL_9:
      BOOL v9 = __OFADD__(v8, 1);
      unint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_16;
      }
      unint64_t v11 = *(void *)(a3 + 16);
      BOOL v12 = v11 >= v10;
      unint64_t v13 = v11 - v10;
      if (!v12) {
        goto LABEL_17;
      }
      *(void *)(a3 + 16)  = v13;
      uint64_t v14 = *(void *)(result + 16);
      BOOL v12 = __CFADD__(v14, v10);
      uint64_t v15 = v14 + v10;
      if (v12)
      {
LABEL_16:
        __break(0x5500u);
LABEL_17:
        __break(0x5515u);
        return result;
      }
      *(void *)(result + 16)  = v15;
    }
    uint64_t v16 = *a4;
    *(void *)(v16 + 8)  = v5[1];
    *(void *)v5[1]  = v16;
    uint64_t v17 = *a2;
    *(void *)(v17 + 8)  = a4;
    *a4  = v17;
    *a2  = (uint64_t)v5;
    v5[1]  = a2;
  }
  return result;
}

void std::__list_imp<otbr::MainloopProcessor *>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8)  = *(void *)(*a1 + 8);
    **(void **)(v3 + 8)  = v4;
    a1[2]  = 0;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      std::__list_imp<otbr::MainloopProcessor *>::__delete_node[abi:ne180100]<>((int)a1, v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<otbr::MainloopProcessor *>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
}

otbr::MainloopProcessor *otbr::MainloopProcessor::MainloopProcessor(otbr::MainloopProcessor *this)
{
  *(void *)this  = off_10049FDF8;
  Instance  = otbr::MainloopManager::GetInstance(this);
  otbr::MainloopManager::AddMainloopProcessor((otbr::MainloopManager *)Instance, this);
  return this;
}

uint64_t *otbr::MainloopManager::GetInstance(otbr::MainloopManager *this)
{
  {
    otbr::MainloopManager::GetInstance(void)::sMainloopManager  = (uint64_t)&otbr::MainloopManager::GetInstance(void)::sMainloopManager;
    *(void *)algn_1004B5EA8  = &otbr::MainloopManager::GetInstance(void)::sMainloopManager;
    qword_1004B5EB0  = 0;
    __cxa_atexit((void (*)(void *))otbr::MainloopManager::~MainloopManager, &otbr::MainloopManager::GetInstance(void)::sMainloopManager, (void *)&_mh_execute_header);
  }
  return &otbr::MainloopManager::GetInstance(void)::sMainloopManager;
}

void otbr::MainloopProcessor::~MainloopProcessor(otbr::MainloopProcessor *this)
{
  *(void *)this  = off_10049FDF8;
  Instance  = otbr::MainloopManager::GetInstance(this);
  otbr::MainloopManager::RemoveMainloopProcessor((otbr::MainloopManager *)Instance, this);
}

void otbr::MainloopManager::~MainloopManager(otbr::MainloopManager *this)
{
}

void otbr::BorderAgent::BorderAgent(otbr::BorderAgent *this, otbr::Ncp::ControllerOpenThread *a2)
{
  uint64_t v3 = otbr::MainloopProcessor::MainloopProcessor(this);
  *(void *)uint64_t v3 = off_10049FE38;
  *((void *)v3 + ot::Pool<ot::LinkMetrics::SeriesInfo,(unsigned short)64>::Pool((uint64_t *)this + 1) = a2;
  v4[0]  = off_10049FE80;
  v4[1]  = v3;
  v4[3]  = v4;
  otbr::Mdns::Publisher::Create();
}

void sub_1003C65F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(otbr::Mdns::Publisher::State)>::~__value_func[abi:ne180100]((uint64_t *)va);
  otbr::MainloopProcessor::~MainloopProcessor(v2);
  _Unwind_Resume(a1);
}

void otbr::BorderAgent::Init(otbr::BorderAgent *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  v5[0]  = off_10049FF10;
  v5[1]  = this;
  void v5[3] = v5;
  otbr::Ncp::ControllerOpenThread::AddThreadStateChangedCallback(v2, (uint64_t)v5);
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100](v5);
  otbr::BorderAgent::BaseServiceInstanceName((otbr::Ncp::ControllerOpenThread **)this);
  std::string::operator=[abi:ne180100]((uint64_t)this + 24, &__p);
  if (v4 < 0) {
    operator delete((void *)__p);
  }
  otbr::BorderAgent::Start(this);
}

void sub_1003C66CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t otbr::BorderAgent::BaseServiceInstanceName(otbr::Ncp::ControllerOpenThread **this)
{
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(this[1]);
  otLinkGetExtendedAddress(Instance);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  uint64_t v2 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Apple BorderRouter");
  uint64_t result = (uint64_t)std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, " #");
  uint64_t v4 = v12[0];
  uint64_t v5 = *(void *)(v12[0] - 24);
  if ((unint64_t)(v5 - 253) < 0xFFFFFFFFFFFFFEEBLL) {
    goto LABEL_10;
  }
  *(_DWORD *)((char *)&v12[1] + v5) |= 0x4000u;
  uint64_t v6 = *(void *)(v4 - 24);
  if ((unint64_t)(v6 - 253) < 0xFFFFFFFFFFFFFEEBLL) {
    goto LABEL_10;
  }
  *(_DWORD *)((char *)&v12[1] + v6)  = *(_DWORD *)((unsigned char *)&v12[1] + v6) & 0xFFFFFFB5 | 8;
  char v10 = 48;
  uint64_t result = (uint64_t)std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, &v10);
  uint64_t v7 = *(void *)(v12[0] - 24);
  if ((unint64_t)(v7 - 233) < 0xFFFFFFFFFFFFFEEFLL) {
    goto LABEL_10;
  }
  *(void *)((char *)&v12[3] + vot::ThreadTlv::SetType(this, 7) = 2;
  uint64_t result = std::ostream::operator<<();
  uint64_t v8 = *(void *)(v12[0] - 24);
  if ((unint64_t)(v8 - 233) < 0xFFFFFFFFFFFFFEEFLL
    || (*(void *)((char *)&v12[3] + v8)  = 2,
        std::ostream::operator<<(),
        std::stringbuf::str(),
        v9 > 0x110)
    || v9 - 273 < 8)
  {
LABEL_10:
    __break(1u);
  }
  else
  {
    *(void *)((char *)v11 + vot::NetworkDiagnostic::Tlv::SetType(this, 9) = result;
    if (v13 < 0) {
      operator delete((void *)v12[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_1003C6998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void otbr::BorderAgent::Start(otbr::BorderAgent *this)
{
  int v1 = (***((uint64_t (****)(void))this + 2))(*((void *)this + 2));
  if (v1) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = 6;
  }
  char v3 = otbrErrorString(v1);
  otbrLog(v2, "BA", "Start Thread Border Agent: %s", v4, v5, v6, v7, v8, v3);
}

uint64_t otbr::BorderAgent::Stop(otbr::BorderAgent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  otbrLog(6u, "BA", "Stop Thread Border Agent", a4, a5, a6, a7, a8, v18);
  otbr::BorderAgent::UnpublishMeshCopService(this, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v16 = *(uint64_t (**)(void))(**((void **)this + 2) + 8);

  return v16();
}

void otbr::BorderAgent::UnpublishMeshCopService(otbr::BorderAgent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (uint64_t *)((char *)this + 24);
  LOBYTE(v1ot::NetworkData::NetworkDataTlv::SetType(this, 0) = (_BYTE)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v10 = *v9;
  }
  otbrLog(6u, "BA", "Unpublish meshcop service %s.%s.local", a4, a5, a6, a7, a8, v10);
  uint64_t v11 = *((void *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "_meshcop._udp");
  v14[0]  = off_1004A0020;
  v14[1]  = this;
  void v14[3] = v14;
  (*(void (**)(uint64_t, uint64_t *, void **, void *))(*(void *)v11 + 40))(v11, v9, __p, v14);
  std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003C6BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void otbr::BorderAgent::~BorderAgent(otbr::BorderAgent *this)
{
  *(void *)this  = off_10049FE38;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
    *((void *)this + ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0;
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  otbr::MainloopProcessor::~MainloopProcessor(this);
}

{
  uint64_t vars8;

  otbr::BorderAgent::~BorderAgent(this);

  operator delete();
}

void otbr::BorderAgent::HandleMdnsState(otbr::Ncp::ControllerOpenThread **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2 == 1) {
    otbr::BorderAgent::UpdateMeshCopService(a1);
  }
  else {
    otbrLog(4u, "BA", "mDNS publisher not available!", a4, a5, a6, a7, a8, a9);
  }
}

void otbr::BorderAgent::UpdateMeshCopService(otbr::Ncp::ControllerOpenThread **this)
{
  if (otbr::BorderAgent::IsThreadStarted(this))
  {
    otbr::BorderAgent::BaseServiceInstanceName(this);
    std::string::operator=[abi:ne180100]((uint64_t)(this + 3), &__p);
    if (v3 < 0) {
      operator delete((void *)__p);
    }
    if ((*(uint64_t (**)(otbr::Ncp::ControllerOpenThread *))(*(void *)this[2] + 16))(this[2])) {
      otbr::BorderAgent::PublishMeshCopService((otbr::BorderAgent *)this);
    }
    else {
      (**(void (***)(otbr::Ncp::ControllerOpenThread *))this[2])(this[2]);
    }
  }
}

uint64_t otbr::BorderAgent::Update(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t otbr::BorderAgent::Process(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t otbr::GetStateBitmap(uint64_t a1)
{
  Deviceunsigned int Role = otThreadGetDeviceRole(a1);
  if (DeviceRole)
  {
    if (DeviceRole == 1)
    {
      Deviceunsigned int Role = 0;
      int v3 = 41;
    }
    else
    {
      if (otBackboneRouterGetState(a1)) {
        int v3 = 177;
      }
      else {
        int v3 = 49;
      }
      Deviceunsigned int Role = (otBackboneRouterGetState(a1) == 2) << 8;
    }
  }
  else
  {
    int v3 = 33;
  }
  return v3 | DeviceRole;
}

uint64_t otbr::AppendBbrTxtEntries(uint64_t a1, char a2, uint64_t *a3)
{
  if (a2 < 0)
  {
    __int16 v13 = -16400;
    otBackboneRouterGetConfig(a1, (uint64_t)&v14);
    uint64_t v11 = 1;
    uint64_t v12 = (const unsigned __int8 *)&v15;
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      unint64_t v6 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>(a3, "sq", &v12, &v11);
    }
    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>((uint64_t)a3, "sq", &v12, &v11);
      unint64_t v6 = v5 + 48;
    }
    a3[1]  = v6;
    uint64_t v12 = (const unsigned __int8 *)&v13;
    uint64_t v11 = 2;
    if (v6 >= a3[2])
    {
      uint64_t v7 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>(a3, "bb", &v12, &v11);
    }
    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>((uint64_t)a3, "bb", &v12, &v11);
      uint64_t v7 = v6 + 48;
    }
    a3[1]  = v7;
  }
  otThreadGetDomainName(a1);
  uint64_t v14 = v8;
  unint64_t v9 = a3[1];
  if (v9 >= a3[2])
  {
    uint64_t result = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>(a3, "dn", &v14);
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>((uint64_t)a3, "dn", &v14);
    uint64_t result = v9 + 48;
  }
  a3[1]  = result;
  return result;
}

void otbr::AppendActiveTimestampTxtEntry(uint64_t a1, uint64_t *a2)
{
  Active  = otDatasetGetActive(a1, (uint64_t)&v15);
  if (Active)
  {
    char v4 = otThreadErrorToString(Active);
    otbrLog(4u, "BA", "Failed to get active dataset: %s", v5, v6, v7, v8, v9, v4);
  }
  else
  {
    __int16 v13 = (const unsigned __int8 *)&v14;
    unint64_t v14 = bswap64((2 * v16) | (v15 << 16) | v17);
    uint64_t v12 = 8;
    unint64_t v10 = a2[1];
    if (v10 >= a2[2])
    {
      uint64_t v11 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>(a2, "at", &v13, &v12);
    }
    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>((uint64_t)a2, "at", &v13, &v12);
      uint64_t v11 = v10 + 48;
    }
    a2[1]  = v11;
  }
}

void otbr::BorderAgent::PublishMeshCopService(otbr::BorderAgent *this)
{
  unsigned int v46 = 0;
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(*((otbr::Ncp::ControllerOpenThread **)this + 1));
  otThreadGetExtendedPanId(Instance);
  char v4 = v3;
  ExtendedAddress  = (const unsigned __int8 *)otLinkGetExtendedAddress(Instance);
  otThreadGetNetworkName(Instance);
  size_t v45 = v6;
  otbr::Mdns::Publisher::TxtEntry::TxtEntry((otbr::Mdns::Publisher::TxtEntry *)&v47, "rv", "1");
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  unint64_t v44 = 0;
  char v40 = 0;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__vallocate[abi:ne180100](&v42, 1uLL);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*>((uint64_t)&v42, &v47, &v49);
  long long v39 = &v48;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  LOBYTE(vot::ThreadTlv::SetType(this, 7) = (_BYTE)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v7 = *((void *)this + 3);
  }
  otBorderAgentGetUdpPort(Instance);
  otbrLog(6u, "BA", "Publish meshcop service %s.%s.local. xa:0x%llx xp:%llx port:%d", v8, v9, v10, v11, v12, v7);
  unint64_t v13 = v43;
  if (v43 >= v44)
  {
    unint64_t v14 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const(&)[11]>(&v42, "vn", "Apple Inc.");
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const(&)[11]>((uint64_t)&v42, "vn", "Apple Inc.");
    unint64_t v14 = v13 + 48;
  }
  unint64_t v43 = v14;
  if (v14 >= v44)
  {
    unint64_t v15 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const(&)[11]>(&v42, "mn", "BorderRouter");
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const(&)[11]>((uint64_t)&v42, "mn", "BorderRouter");
    unint64_t v15 = v14 + 48;
  }
  unint64_t v43 = v15;
  if (v15 >= v44)
  {
    unint64_t v16 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>(&v42, "nn", &v45);
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>((uint64_t)&v42, "nn", &v45);
    unint64_t v16 = v15 + 48;
  }
  unint64_t v43 = v16;
  v47.__r_.__value_.__r.__words[0]  = 8;
  if (v16 >= v44)
  {
    unsigned __int8 v17 = (otbr::Ncp::ControllerOpenThread *)std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>(&v42, "xp", v4, (uint64_t *)&v47);
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>((uint64_t)&v42, "xp", v4, (uint64_t *)&v47);
    unsigned __int8 v17 = (otbr::Ncp::ControllerOpenThread *)(v16 + 48);
  }
  unint64_t v43 = (unint64_t)v17;
  v47.__r_.__value_.__r.__words[0]  = (std::string::size_type)otbr::Ncp::ControllerOpenThread::GetThreadVersion(v17);
  unint64_t v18 = v43;
  if (v43 >= v44)
  {
    unint64_t v19 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>(&v42, "tv", (const char **)&v47.__r_.__value_.__l.__data_);
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>((uint64_t)&v42, "tv", (const char **)&v47.__r_.__value_.__l.__data_);
    unint64_t v19 = v18 + 48;
  }
  unint64_t v43 = v19;
  v47.__r_.__value_.__r.__words[0]  = 8;
  if (v19 >= v44)
  {
    unint64_t v20 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>(&v42, "xa", ExtendedAddress, (uint64_t *)&v47);
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>((uint64_t)&v42, "xa", ExtendedAddress, (uint64_t *)&v47);
    unint64_t v20 = v19 + 48;
  }
  unint64_t v43 = v20;
  v47.__r_.__value_.__r.__words[0]  = 8;
  if (v20 >= v44)
  {
    uint64_t v21 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>(&v42, "dd", ExtendedAddress, (uint64_t *)&v47);
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>((uint64_t)&v42, "dd", ExtendedAddress, (uint64_t *)&v47);
    uint64_t v21 = v20 + 48;
  }
  unint64_t v43 = v21;
  StateBitmap  = otbr::GetStateBitmap(Instance);
  char v23 = StateBitmap;
  char v24 = StateBitmap;
  unsigned int v46 = bswap32(StateBitmap & 0x1FF);
  v47.__r_.__value_.__r.__words[0]  = (std::string::size_type)&v46;
  long long v39 = (void *)4;
  unint64_t v25 = v43;
  if (v43 >= v44)
  {
    uint64_t v31 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>(&v42, "sb", (const unsigned __int8 **)&v47, (uint64_t *)&v39);
  }
  else
  {
    std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>((uint64_t)&v42, "sb", (const unsigned __int8 **)&v47, (uint64_t *)&v39);
    uint64_t v31 = v25 + 48;
  }
  unint64_t v43 = v31;
  otbrLog(6u, "BA", "Meshcop entry state bitmap sb entry:0x%x stateUint32:%llu", v26, v27, v28, v29, v30, v24);
  if ((v23 & 0x18) == 0x10)
  {
    otbr::AppendActiveTimestampTxtEntry(Instance, &v42);
    LODWORD(__p.__r_.__value_.__l.__data_)  = otThreadGetPartitionId(Instance);
    v47.__r_.__value_.__r.__words[0]  = (std::string::size_type)&__p;
    long long v39 = (void *)4;
    unint64_t v32 = v43;
    if (v43 >= v44)
    {
      uint64_t v33 = std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>(&v42, "pt", (const unsigned __int8 **)&v47, (uint64_t *)&v39);
    }
    else
    {
      std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>((uint64_t)&v42, "pt", (const unsigned __int8 **)&v47, (uint64_t *)&v39);
      uint64_t v33 = v32 + 48;
    }
    unint64_t v43 = v33;
  }
  otbr::AppendBbrTxtEntries(Instance, v23, &v42);
  if (otBorderAgentGetState(Instance)) {
    Udp__int16 Port = otBorderAgentGetUdpPort(Instance);
  }
  else {
    Udp__int16 Port = 49152;
  }
  uint64_t v35 = *((void *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "_meshcop._udp");
  memset(v37, 0, sizeof(v37));
  v47.__r_.__value_.__r.__words[0]  = (std::string::size_type)off_10049FFA0;
  v47.__r_.__value_.__l.__size_  = (std::string::size_type)this;
  __int16 v48 = &v47;
  otbr::Mdns::Publisher::PublishService(v35, (uint64_t)&v39, (const std::string *)this + 1, &__p, (uint64_t)v37, UdpPort, (uint64_t)&v42, (uint64_t)&v47);
  long long v36 = (void ***)std::__function::__value_func<void ()(otbrError)>::~__value_func[abi:ne180100](&v47);
  v47.__r_.__value_.__r.__words[0]  = (std::string::size_type)v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v39);
  }
  v47.__r_.__value_.__r.__words[0]  = (std::string::size_type)&v42;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_1003C75CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  *(void *)(v29 - 12ot::NetworkData::NetworkDataTlv::SetType(this, 0) = &a29;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 120));
  _Unwind_Resume(a1);
}

uint64_t otbr::Ncp::ControllerOpenThread::GetInstance(otbr::Ncp::ControllerOpenThread *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result) {
    otbr::Ncp::ControllerOpenThread::GetInstance();
  }
  return result;
}

otbr::Mdns::Publisher::TxtEntry *otbr::Mdns::Publisher::TxtEntry::TxtEntry(otbr::Mdns::Publisher::TxtEntry *this, char *a2, const char *__s)
{
  size_t v6 = strlen(__s);
  size_t v7 = strlen(a2);

  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(this, a2, v7, (const unsigned __int8 *)__s, v6);
}

void otbr::Mdns::Publisher::TxtEntry::~TxtEntry(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

BOOL otbr::BorderAgent::IsThreadStarted(otbr::Ncp::ControllerOpenThread **this)
{
  Instance  = otbr::Ncp::ControllerOpenThread::GetInstance(this[1]);
  Deviceunsigned int Role = otThreadGetDeviceRole(Instance);
  return DeviceRole == 4 || (DeviceRole & 0xFFFFFFFE) == 2;
}

void otbr::BorderAgent::HandleThreadStateChanged(otbr::Ncp::ControllerOpenThread **this, int a2)
{
  if (this[2])
  {
    if ((a2 & 4) == 0) {
      goto LABEL_6;
    }
    IsThreadStarted  = otbr::BorderAgent::IsThreadStarted(this);
    uint64_t v10 = "down";
    if (IsThreadStarted) {
      uint64_t v10 = "up";
    }
    otbrLog(6u, "BA", "Thread is %s", v5, v6, v7, v8, v9, (char)v10);
    if (!otbr::BorderAgent::IsThreadStarted(this))
    {
      otbr::BorderAgent::Stop((otbr::BorderAgent *)this, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
LABEL_6:
      if ((a2 & 0x2030204) != 0)
      {
        otbr::BorderAgent::UpdateMeshCopService(this);
      }
    }
  }
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void otbr::BorderAgent::GetAlternativeServiceInstanceName(otbr::Ncp::ControllerOpenThread **this)
{
  uint64_t v2 = std::random_device::random_device[abi:ne180100](&v15);
  std::random_device::result_type v3 = std::random_device::operator()(v2);
  if (v3 + ((v3 / 0x7FFFFFFF) | ((v3 / 0x7FFFFFFF) << 31)) <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = v3 + ((v3 / 0x7FFFFFFF) | ((v3 / 0x7FFFFFFF) << 31));
  }
  int v13 = -65535;
  int v14 = v4;
  std::uniform_int_distribution<unsigned short>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v13, (uint64_t)&v14, (unsigned __int16 *)&v13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  otbr::BorderAgent::BaseServiceInstanceName(this);
  uint64_t v5 = std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)&__p);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " (");
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, ")");
  if (v9 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  if (v7 > 0x110)
  {
    __break(1u);
  }
  else
  {
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    std::random_device::~random_device(&v15);
  }
}

void sub_1003C7AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  std::random_device::~random_device((std::random_device *)(v15 - 52));
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2  = *(void *)a2;
    uint64_t v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

void std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::~__func()
{
}

void *std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  unsigned char v5[2] = 1;
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_10049FE80;
  v2[1]  = v3;
  v5[0]  = 0;
  std::unique_ptr<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_10049FE80;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>::target_type()
{
}

void *std::unique_ptr<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t result = *(void **)a1;
  *(void *)a1  = 0;
  if (!result) {
    return (void *)a1;
  }
  if (!(*(void *)(a1 + 16) >> 60))
  {
    operator delete(result);
    return (void *)a1;
  }
  __break(0x550Cu);
  return result;
}

void std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::~__func()
{
}

void *std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  unsigned char v5[2] = 1;
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_10049FF10;
  v2[1]  = v3;
  v5[0]  = 0;
  std::unique_ptr<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_10049FF10;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::operator()(uint64_t a1, void *a2)
{
}

uint64_t std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<otbr::BorderAgent::Init(void)::$_0,std::allocator<otbr::BorderAgent::Init(void)::$_0>,void ()(unsigned long long)>::target_type()
{
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char *,unsigned long>(uint64_t a1, char *__s, const unsigned __int8 **a3, uint64_t *a4)
{
  uint64_t v5 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char *,unsigned long>((int)a1 + 16, v5, __s, a3, a4);
  *(void *)(a1 + 8)  = (char *)v5 + 48;
  return result;
}

void sub_1003C7DA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char *,unsigned long>(uint64_t *a1, char *a2, const unsigned __int8 **a3, uint64_t *a4)
{
  uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v6 > 0x555555555555555) {
    goto LABEL_10;
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v13, v10, v5, (uint64_t)(a1 + 2));
  std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char *,unsigned long>(a1 + 16, *(otbr::Mdns::Publisher::TxtEntry **)v14, a2, a3, a4);
  *(void *)v14 += 48;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v13);
  return v11;
}

void sub_1003C7EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

otbr::Mdns::Publisher::TxtEntry *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char *,unsigned long>(int a1, otbr::Mdns::Publisher::TxtEntry *a2, char *__s, const unsigned __int8 **a4, uint64_t *a5)
{
  unint64_t v7 = *a4;
  uint64_t v8 = *a5;
  size_t v9 = strlen(__s);

  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(a2, __s, v9, v7, v8);
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const*>(uint64_t a1, char *a2, const char **a3)
{
  int v4 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],char const*,void>((int)a1 + 16, v4, a2, a3);
  *(void *)(a1 + 8)  = (char *)v4 + 48;
  return result;
}

void sub_1003C7F68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const*>(uint64_t *a1, char *a2, const char **a3)
{
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x555555555555555) {
    goto LABEL_10;
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v11, v8, v4, (uint64_t)(a1 + 2));
  std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],char const*,void>(a1 + 16, v12, a2, a3);
  char v12 = (otbr::Mdns::Publisher::TxtEntry *)((char *)v12 + 48);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v11);
  return v9;
}

void sub_1003C8064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

otbr::Mdns::Publisher::TxtEntry *std::allocator_traits<std::allocator<otbr::Mdns::Publisher::TxtEntry>>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],char const*,void>(int a1, otbr::Mdns::Publisher::TxtEntry *this, char *a3, const char **a4)
{
  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(this, a3, *a4);
}

std::string *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_at_end<otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*>(uint64_t a1, std::string *a2, std::string *a3)
{
  uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry*>(a1 + 16, a2, a3, *(std::string **)(a1 + 8));
  *(void *)(a1 + 8)  = result;
  return result;
}

void sub_1003C80C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry const*,otbr::Mdns::Publisher::TxtEntry*>(uint64_t a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  char v12 = this;
  v9[0]  = a1;
  v9[1]  = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (__str != a3)
  {
    unint64_t v6 = __str;
    int v7 = a1;
    do
    {
      std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,otbr::Mdns::Publisher::TxtEntry&>(v7, v4, v6);
      v6 += 2;
      uint64_t v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<otbr::Mdns::Publisher::TxtEntry>,otbr::Mdns::Publisher::TxtEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1003C8160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],char const(&)[11]>(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v4 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = otbr::Mdns::Publisher::TxtEntry::TxtEntry(v4, a2, a3);
  *(void *)(a1 + 8)  = (char *)v4 + 48;
  return result;
}

void sub_1003C81A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],char const(&)[11]>(uint64_t *a1, char *a2, const char *a3)
{
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x555555555555555) {
    goto LABEL_10;
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v11, v8, v4, (uint64_t)(a1 + 2));
  otbr::Mdns::Publisher::TxtEntry::TxtEntry(v12, a2, a3);
  char v12 = (otbr::Mdns::Publisher::TxtEntry *)((char *)v12 + 48);
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v11);
  return v9;
}

void sub_1003C829C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

otbr::Mdns::Publisher::TxtEntry *std::vector<otbr::Mdns::Publisher::TxtEntry>::__construct_one_at_end[abi:ne180100]<char const(&)[3],unsigned char const(&)[8],unsigned long>(uint64_t a1, char *__s, const unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v5 = *(otbr::Mdns::Publisher::TxtEntry **)(a1 + 8);
  uint64_t result = std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char const(&)[8],unsigned long>((int)a1 + 16, v5, __s, a3, a4);
  *(void *)(a1 + 8)  = (char *)v5 + 48;
  return result;
}

void sub_1003C82F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8)  = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<otbr::Mdns::Publisher::TxtEntry>::__emplace_back_slow_path<char const(&)[3],unsigned char const(&)[8],unsigned long>(uint64_t *a1, char *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
    __break(0x5500u);
LABEL_10:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (v6 > 0x555555555555555) {
    goto LABEL_10;
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::__split_buffer(v13, v10, v5, (uint64_t)(a1 + 2));
  std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char const(&)[8],unsigned long>(a1 + 16, *(otbr::Mdns::Publisher::TxtEntry **)v14, a2, a3, a4);
  *(void *)v14 += 48;
  std::vector<otbr::Mdns::Publisher::TxtEntry>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer(v13);
  return v11;
}

void sub_1003C8400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<otbr::Mdns::Publisher::TxtEntry>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

otbr::Mdns::Publisher::TxtEntry *std::allocator<otbr::Mdns::Publisher::TxtEntry>::construct[abi:ne180100]<otbr::Mdns::Publisher::TxtEntry,char const(&)[3],unsigned char const(&)[8],unsigned long>(int a1, otbr::Mdns::Publisher::TxtEntry *a2, char *__s, const unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t v8 = *a5;
  size_t v9 = strlen(__s);

  return otbr::Mdns::Publisher::TxtEntry::TxtEntry(a2, __s, v9, a4, v8);
}

void std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::~__func()
{
}

void *std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  unsigned char v5[2] = 1;
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_10049FFA0;
  v2[1]  = v3;
  v5[0]  = 0;
  std::unique_ptr<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_10049FFA0;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 8);
  if (*a2 == -12)
  {
    unint64_t v10 = (void *)(v9 + 24);
    if (*(char *)(v9 + 47) < 0) {
      unint64_t v10 = (void *)*v10;
    }
    otbrLog(6u, "BA", "Cancelled previous publishing meshcop service %s.%s.local", a4, a5, a6, a7, a8, (char)v10);
  }
  else
  {
    if (v8) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 6;
    }
    LOBYTE(v1ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v9 + 24;
    if (*(char *)(v9 + 47) < 0) {
      uint64_t v12 = *(void *)(v9 + 24);
    }
    otbrErrorString(*a2);
    otbrLog(v11, "BA", "Result of publish meshcop service %s.%s.local: %s", v13, v14, v15, v16, v17, v12);
    if (v8 == -11)
    {
      otbr::BorderAgent::UnpublishMeshCopService((otbr::BorderAgent *)v9, v18, v19, v20, v21, v22, v23, v24);
      otbr::BorderAgent::GetAlternativeServiceInstanceName((otbr::Ncp::ControllerOpenThread **)v9);
      std::string::operator=[abi:ne180100](v9 + 24, &__p);
      if (v26 < 0) {
        operator delete((void *)__p);
      }
      otbr::BorderAgent::PublishMeshCopService((otbr::BorderAgent *)v9);
    }
  }
}

uint64_t std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<otbr::BorderAgent::PublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::PublishMeshCopService(void)::$_0>,void ()(otbrError)>::target_type()
{
}

void std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::~__func()
{
}

void *std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  v5[1]  = &v6;
  unsigned char v5[2] = 1;
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_1004A0020;
  v2[1]  = v3;
  v5[0]  = 0;
  std::unique_ptr<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>,std::__allocator_destructor<std::allocator<std::__function::__func<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0,std::allocator<otbr::BorderAgent::BorderAgent(otbr::Ncp::ControllerOpenThread &)::$_0>,void ()(otbr::Mdns::Publisher::State)>>>>::~unique_ptr[abi:ne180100]((uint64_t)v5);
  return v2;
}

uint64_t std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2  = off_1004A0020;
  a2[1]  = v2;
  return result;
}

void std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::operator()(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v4 + 24);
  if (*(char *)(v4 + 47) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  if (v3) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = 6;
  }
  otbrErrorString(v3);
  otbrLog(v6, "BA", "Result of unpublish meshcop service %s.%s.local: %s", v7, v8, v9, v10, v11, (char)v5);
}

uint64_t std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0,std::allocator<otbr::BorderAgent::UnpublishMeshCopService(void)::$_0>,void ()(otbrError)>::target_type()
{
}

double std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, int a2)
{
  uint64_t v3 = std::streambuf::basic_streambuf();
  double result = 0.0;
  *(_OWORD *)(v3 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(v3 + 8ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_DWORD *)(v3 + 96)  = a2;
  return result;
}

uint64_t std::uniform_int_distribution<unsigned short>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  LODWORD(result)  = a3[1];
  int v4 = result - *a3;
  if (v4)
  {
    unsigned int v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine((uint64_t)v9, a2, 0x20uLL);
      LOWORD(result)  = (unsigned __int16)std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(v9);
    }
    else
    {
      uint64_t v7 = __clz(v5);
      uint64_t v8 = 31;
      if (((v5 << v7) & 0x7FFFFFFF) != 0) {
        uint64_t v8 = 32;
      }
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine((uint64_t)v9, a2, v8 - v7);
      do
        LODWORD(result)  = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(v9);
      while (result >= v5);
      LOWORD(result)  = *a3 + result;
    }
  }
  return (unsigned __int16)result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8)  = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16)  = a3 / v3;
  *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v3;
  LODWORD(v5)  = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x20) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = v5;
  }
  *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v5;
  if (v5 / v3 < (v5 ^ 0x7FFFFFFE))
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16)  = a3 / v3;
    *(void *)(result + 2ot::NetworkData::NetworkDataTlv::SetType(this, 4) = v3;
    int v6 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
    if (a3 / v3 >= 0x20) {
      int v6 = 0;
    }
    *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 0) = v6;
  }
  BOOL v7 = v3 >= a3 % v3;
  unint64_t v8 = v3 - a3 % v3;
  if (!v7) {
    goto LABEL_23;
  }
  *(void *)(result + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v8;
  if (v4 >= 0x1F)
  {
    *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0;
  }
  else
  {
    *(_DWORD *)(result + 4ot::NetworkData::NetworkDataTlv::SetType(this, 4) = (-2 << v4) & 0x7FFFFFFE;
    if (!v4)
    {
      unsigned int v9 = 0;
      goto LABEL_19;
    }
  }
  if (v4 > 0x20)
  {
LABEL_23:
    __break(0x5515u);
    return result;
  }
  unsigned int v9 = 0xFFFFFFFF >> (32 - v4);
LABEL_19:
  if (v4 >= 0x1F) {
    unsigned int v10 = -1;
  }
  else {
    unsigned int v10 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 48)  = v9;
  *(_DWORD *)(result + 5ot::NetworkData::NetworkDataTlv::SetType(this, 2) = v10;
  return result;
}

unsigned int **std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(unsigned int **result)
{
  unint64_t v1 = 0;
  uint64_t v2 = 0;
  unint64_t v3 = result[4];
LABEL_2:
  if (v1 >= (unint64_t)v3)
  {
    uint64_t v16 = result[3];
LABEL_18:
    if (v3 >= v16) {
      return (unsigned int **)v2;
    }
    uint64_t v17 = *result;
    unsigned int v18 = **result;
    while (1)
    {
      unsigned int v19 = v18 / 0xADC8;
      unsigned int v20 = 48271 * (v18 % 0xADC8);
      unsigned int v21 = 3399 * v19;
      int v22 = v20 >= v21 ? 0 : 0x7FFFFFFF;
      unsigned int v23 = v22 + v20;
      BOOL v11 = v23 >= v21;
      unsigned int v18 = v23 - v21;
      if (!v11) {
        break;
      }
      unsigned int *v17 = v18;
      unsigned int v24 = v18 - 1;
      if (!v18) {
        break;
      }
      if (v24 < *((_DWORD *)result + 11))
      {
        unint64_t v25 = (unint64_t)result[2];
        int v26 = v2 << (v25 + 1);
        if (v25 >= 0x1F) {
          int v26 = 0;
        }
        int v27 = *((_DWORD *)result + 13) & v24;
        BOOL v11 = __CFADD__(v26, v27);
        uint64_t v2 = (v26 + v27);
        if (v11 || (v11 = __CFADD__(v3, 1), unint64_t v3 = (unsigned int *)((char *)v3 + 1), v11))
        {
LABEL_32:
          __break(0x5500u);
          return (unsigned int **)v2;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    unint64_t v4 = *result;
    unsigned int v5 = **result;
    while (1)
    {
      unsigned int v6 = v5 / 0xADC8;
      unsigned int v7 = 48271 * (v5 % 0xADC8);
      unsigned int v8 = 3399 * v6;
      int v9 = v7 >= v8 ? 0 : 0x7FFFFFFF;
      unsigned int v10 = v9 + v7;
      BOOL v11 = v10 >= v8;
      unsigned int v5 = v10 - v8;
      if (!v11) {
        break;
      }
      *unint64_t v4 = v5;
      unsigned int v12 = v5 - 1;
      if (!v5) {
        break;
      }
      if (v12 < *((_DWORD *)result + 10))
      {
        unint64_t v13 = (unint64_t)result[2];
        int v14 = v2 << v13;
        if (v13 >= 0x20) {
          int v14 = 0;
        }
        int v15 = result[6] & v12;
        BOOL v11 = __CFADD__(v14, v15);
        uint64_t v2 = (v14 + v15);
        if (v11) {
          goto LABEL_32;
        }
        BOOL v11 = __CFADD__(v1++, 1);
        if (v11) {
          goto LABEL_32;
        }
        goto LABEL_2;
      }
    }
  }
  __break(0x5515u);
  return result;
}

uint64_t otbrLogGetLevel(void)
{
  return sLevel;
}

uint64_t otbrLogGetDefaultLevel(void)
{
  return sDefaultLevel;
}

uint64_t otbrLogSetLevel(uint64_t result)
{
  if (result >= 8) {
    otbrLogSetLevel();
  }
  sLevel  = result;
  return result;
}

void otbrLogInit(const char *a1, unsigned int a2, int a3)
{
  if (!a1) {
    otbrLogInit();
  }
  if (a2 >= 8) {
    otbrLogInit();
  }
  if (a3) {
    int v4 = 35;
  }
  else {
    int v4 = 3;
  }
  openlog(a1, v4, 8);
  sLevel  = a2;
  sDefaultLevel  = a2;
}

void otbrLog(unsigned int a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  logging_obg  = log_get_logging_obg("com.apple.wpantund.commissioning", "commissioning");
  if (sLevel >= (int)a1)
  {
    unint64_t v13 = logging_obg;
    if (vsnprintf(__str, 0x400uLL, a3, &a9) >= 1)
    {
      if (a1 >= 5)
      {
        if (a1 - 5 >= 2)
        {
          if (a1 != 7) {
            otbrLog();
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            otbrLog(a2, (uint64_t)__str, v13);
          }
        }
        else if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          GetPrefix(a2);
          *(_DWORD *)buf  = 136315394;
          int v15 = GetPrefix(char const*)::prefix;
          __int16 v16 = 2080;
          uint64_t v17 = __str;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s: %s", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        otbrLog(a2, (uint64_t)__str, v13);
      }
    }
  }
}

const char *GetPrefix(const char *result)
{
  if (*result)
  {
    unint64_t v1 = result;
    size_t v2 = strlen(result);
    if (v2 >= 7) {
      size_t v3 = 7;
    }
    else {
      size_t v3 = v2;
    }
    GetPrefix(char const*)::prefix[0]  = 45;
    memcpy(&unk_1005099B1, v1, v3);
    uint64_t result = (const char *)memset((char *)&unk_1005099B1 + v3, 45, 8 - v3);
    uint64_t v4 = &dword_100000008 + 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  GetPrefix(char const*)::prefix[v4]  = 0;
  return result;
}

void otbrLogv(int a1, const char *a2, char *a3)
{
  if (!a2) {
    otbrLogv();
  }
  if (sLevel >= a1) {
    vsyslog(a1, a2, a3);
  }
}

void otbrLogvNoFilter(int a1, const char *a2, char *a3)
{
}

uint64_t otbrDump(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3 || !a4 && a5) {
    otbrDump();
  }
  if (a5)
  {
    if (sLevel > (int)result) {
      __break(0x5512u);
    }
  }
  return result;
}

char *otbrErrorString(int a1)
{
  int v2 = a1 + 13;
  uint64_t result = "OK";
  switch(v2)
  {
    case 0:
      uint64_t result = "Invalid state";
      break;
    case 1:
      uint64_t result = "Aborted";
      break;
    case 2:
      uint64_t result = "Duplicated";
      break;
    case 3:
      uint64_t result = "Invalid arguments";
      break;
    case 4:
      uint64_t result = "Not implemented";
      break;
    case 5:
      uint64_t result = "Parse error";
      break;
    case 6:
      uint64_t result = "Not found";
      break;
    case 9:
      uint64_t result = "OpenThread error";
      break;
    case 10:
      uint64_t result = "MDNS error";
      break;
    case 11:
      uint64_t result = "DBUS error";
      break;
    case 12:
      int v4 = *__error();
      uint64_t result = strerror(v4);
      break;
    case 13:
      return result;
    default:
      uint64_t result = "Unknown";
      break;
  }
  return result;
}

void SplitFullDnsName(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 48)  = 0u;
  uint64_t v3 = a2 + 48;
  *(_OWORD *)(a2 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(a2 + 8ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_OWORD *)(a2 + 16)  = 0u;
  *(_OWORD *)(a2 + 3ot::NetworkData::NetworkDataTlv::SetType(this, 2) = 0u;
  *(_OWORD *)a2  = 0u;
  std::string::basic_string(&__stra, __str);
  if (!NameEndsWithDot((uint64_t *)&__stra)) {
    std::string::push_back(&__stra, 46);
  }
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_stra  = &__stra;
  }
  else {
    p_stra  = (std::string *)__stra.__r_.__value_.__r.__words[0];
  }
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size  = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
  }
  else {
    size  = __stra.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_46;
  }
  unsigned int v6 = (std::string *)((char *)p_stra + size);
  unsigned int v7 = p_stra;
  unsigned int v8 = (std::string *)((char *)p_stra + size);
  do
  {
    if (v7->__r_.__value_.__s.__data_[0] == 46)
    {
      uint64_t v9 = &_mh_execute_header.magic + 1;
      while (v9 != 6)
      {
        if ((std::string *)((char *)v7 + v9) == v6) {
          goto LABEL_20;
        }
        int v10 = v7->__r_.__value_.__s.__data_[v9];
        int v11 = aUdp_1[v9++];
        if (v10 != v11) {
          goto LABEL_12;
        }
      }
      unsigned int v8 = v7;
    }
LABEL_12:
    unsigned int v7 = (std::string *)((char *)v7 + 1);
  }
  while (v7 != v6);
LABEL_20:
  if (v8 != v6)
  {
    unint64_t v12 = (char *)v8 - (char *)p_stra;
    if ((char *)v8 - (char *)p_stra != -1)
    {
      if (v12) {
        goto LABEL_23;
      }
LABEL_37:
      unint64_t v13 = -1;
      goto LABEL_38;
    }
  }
  int v14 = p_stra;
  int v15 = (std::string *)((char *)p_stra + size);
  do
  {
    if (v14->__r_.__value_.__s.__data_[0] == 46)
    {
      uint64_t v16 = &_mh_execute_header.magic + 1;
      while (v16 != 6)
      {
        if ((std::string *)((char *)v14 + v16) == v6) {
          goto LABEL_35;
        }
        int v17 = v14->__r_.__value_.__s.__data_[v16];
        int v18 = aTcp_0[v16++];
        if (v17 != v18) {
          goto LABEL_27;
        }
      }
      int v15 = v14;
    }
LABEL_27:
    int v14 = (std::string *)((char *)v14 + 1);
  }
  while (v14 != v6);
LABEL_35:
  if (v15 == v6) {
    goto LABEL_46;
  }
  unint64_t v12 = (char *)v15 - (char *)p_stra;
  if (v15 == p_stra) {
    goto LABEL_37;
  }
LABEL_23:
  if (v12 != -1)
  {
    unint64_t v13 = std::string::rfind(&__stra, 46, v12 - 1);
LABEL_38:
    if (v12 >= 0xFFFFFFFFFFFFFFFALL)
    {
LABEL_66:
      __break(0x5500u);
      return;
    }
    std::string::basic_string(&v25, &__stra, v12 + 6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
    std::string::operator=[abi:ne180100](a2 + 72, (long long *)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v13 == -1)
    {
      std::string::basic_string(&v25, &__stra, 0, v12 + 5, (std::allocator<char> *)&v27);
      goto LABEL_56;
    }
    std::string::basic_string(&v25, &__stra, 0, v13, (std::allocator<char> *)&v27);
    std::string::operator=[abi:ne180100](a2, (long long *)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v12 + 4 >= v13)
    {
      std::string::basic_string(&v25, &__stra, v13 + 1, v12 + 4 - v13, (std::allocator<char> *)&v27);
LABEL_56:
      uint64_t v24 = a2 + 24;
      goto LABEL_57;
    }
LABEL_65:
    __break(0x5515u);
    goto LABEL_66;
  }
LABEL_46:
  std::string::size_type v19 = std::string::find(&__stra, 46, 0);
  if (v19 == -1) {
    __assert_rtn("SplitFullDnsName", "dns_utils.cpp", 63, "dotPos != std::string::npos");
  }
  std::string::size_type v20 = v19;
  std::string::basic_string(&v25, &__stra, 0, v19, (std::allocator<char> *)&v27);
  std::string::operator=[abi:ne180100](v3, (long long *)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::size_type v21 = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v21 = __stra.__r_.__value_.__l.__size_;
  }
  BOOL v22 = v21 >= v20;
  std::string::size_type v23 = v21 - v20;
  if (!v22 || !v23) {
    goto LABEL_65;
  }
  std::string::basic_string(&v25, &__stra, v20 + 1, v23 - 1, (std::allocator<char> *)&v27);
  uint64_t v24 = a2 + 72;
LABEL_57:
  std::string::operator=[abi:ne180100](v24, (long long *)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (!NameEndsWithDot((uint64_t *)(a2 + 72))) {
    std::string::push_back((std::string *)(a2 + 72), 46);
  }
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__stra.__r_.__value_.__l.__data_);
  }
}

void sub_1003C92DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  DnsNameInfo::~DnsNameInfo(v18);
  _Unwind_Resume(a1);
}

BOOL NameEndsWithDot(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = *((unsigned __int8 *)a1 + 23);
    if (!*((unsigned char *)a1 + 23)) {
      return 0;
    }
    return *((unsigned char *)a1 + v1 - 1) == 46;
  }
  uint64_t v1 = a1[1];
  if (v1)
  {
    a1  = (uint64_t *)*a1;
    return *((unsigned char *)a1 + v1 - 1) == 46;
  }
  return 0;
}

void DnsNameInfo::~DnsNameInfo(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t SplitFullServiceInstanceName(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  SplitFullDnsName(a1, (uint64_t)v10);
  unint64_t v7 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v10[1];
  }
  if (v7)
  {
    std::string::operator=[abi:ne180100](a2, (long long *)v10);
    std::string::operator=[abi:ne180100](a3, &v12);
    std::string::operator=[abi:ne180100](a4, &__p);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 4294967286;
  }
  if (v17 < 0) {
    operator delete((void *)__p);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete((void *)v12);
  }
  if ((char)v11 < 0) {
    operator delete(v10[0]);
  }
  return v8;
}

uint64_t SplitFullServiceName(std::string *a1, uint64_t a2, uint64_t a3)
{
  SplitFullDnsName(a1, (uint64_t)v7);
  if (DnsNameInfo::IsService((DnsNameInfo *)v7))
  {
    std::string::operator=[abi:ne180100](a2, &v9);
    std::string::operator=[abi:ne180100](a3, &__p);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 4294967286;
  }
  if (v14 < 0) {
    operator delete((void *)__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete((void *)v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return v5;
}

BOOL DnsNameInfo::IsService(DnsNameInfo *this)
{
  if (*((char *)this + 47) < 0)
  {
    if (*((void *)this + 4)) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*((unsigned char *)this + 47)) {
    return 0;
  }
LABEL_3:
  if (*((char *)this + 23) < 0) {
    uint64_t v1 = *((void *)this + 1);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 23);
  }
  return v1 == 0;
}

uint64_t SplitFullHostName(std::string *a1, uint64_t a2, uint64_t a3)
{
  SplitFullDnsName(a1, (uint64_t)&v8);
  uint64_t v5 = v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v5 = v11;
  }
  if (v5)
  {
    uint64_t v6 = 4294967286;
  }
  else
  {
    std::string::operator=[abi:ne180100](a2, &v13);
    std::string::operator=[abi:ne180100](a3, &__p);
    uint64_t v6 = 0;
  }
  if (v16 < 0) {
    operator delete((void *)__p);
  }
  if (v14 < 0) {
    operator delete((void *)v13);
  }
  if ((char)v12 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  return v6;
}

uint64_t updateBorderAgent(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 16))();
  }
  return result;
}

uint64_t processBorderAgent(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 24))();
  }
  return result;
}

void *destroyBorderAgent(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    v1[1]  = 0;
    if (*v1) {
      (*(void (**)(void))(*(void *)*v1 + 8))(*v1);
    }
    *uint64_t v1 = 0;
    operator delete();
  }
  return result;
}

void setupBorderAgent()
{
}

void sub_1003C98A4()
{
}

__n128 otbr::Ip6Address::Ip6Address(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *this  = *a2;
  return result;
}

void *otbr::Ip6Address::ToString@<X0>(otbr::Ip6Address *this@<X0>, void *a2@<X8>)
{
  if (!inet_ntop(30, this, __s, 0x2Eu))
  {
    otbrLog(0, "UTILS", "FAILED %s:%d - %s", v3, v4, v5, v6, v7, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/types.cpp");
    exit(-1);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, __s);
}

uint64_t otbr::Ip6Address::ToSolicitedNodeMulticastAddress(otbr::Ip6Address *this)
{
  return *otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(this);
}

uint64_t *otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(otbr::Ip6Address *this)
{
  {
    otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(void)::sSolicitedMulticastAddressuint64_t Prefix = otbr::Ip6Address::FromString((otbr::Ip6Address *)"ff02::01:ff00:0", v2);
    unk_1004B5ED0  = v3;
  }
  return &otbr::Ip6Address::GetSolicitedMulticastAddressPrefix(void)::sSolicitedMulticastAddressPrefix;
}

void sub_1003C9A7C(_Unwind_Exception *a1)
{
}

__n128 otbr::Ip6Address::CopyTo(in6_addr *this, sockaddr_in6 *a2)
{
  *(void *)&a2->sin6_len  = 0;
  *(void *)a2->sin6_addr.__u6_addr8  = 0;
  a2->sin6_scope_id  = 0;
  *(void *)&a2->sin6_addr.__u6_addr32[2]  = 0;
  __n128 result = *(__n128 *)this;
  a2->sin6_addr  = *this;
  a2->sin6_family  = 30;
  return result;
}

__n128 otbr::Ip6Address::CopyTo(__n128 *this, in6_addr *a2)
{
  __n128 result = *this;
  *a2  = *(in6_addr *)this;
  return result;
}

__n128 otbr::Ip6Address::CopyFrom(__n128 *this, const sockaddr_in6 *a2)
{
  __n128 result = (__n128)a2->sin6_addr;
  *this  = result;
  return result;
}

__n128 otbr::Ip6Address::CopyFrom(in6_addr *this, __n128 *a2)
{
  __n128 result = *a2;
  *this  = *(in6_addr *)a2;
  return result;
}

uint64_t otbr::Ip6Address::FromString(otbr::Ip6Address *this, char *a2, otbr::Ip6Address *a3)
{
  if (inet_pton(30, (const char *)this, a2) == 1) {
    return 0;
  }
  else {
    return 4294967286;
  }
}

uint64_t otbr::Ip6Address::FromString(otbr::Ip6Address *this, const char *a2)
{
  v8[0]  = 0;
  v8[1]  = 0;
  if (inet_pton(30, (const char *)this, v8) != 1)
  {
    otbrLog(0, "UTILS", "FAILED %s:%d - %s", v2, v3, v4, v5, v6, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/types.cpp");
    exit(-1);
  }
  return v8[0];
}

__n128 otbr::Ip6Prefix::Set(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0]  = a2[1].n128_u64[0];
  *a1  = result;
  return result;
}

uint64_t otbr::Ip6Prefix::ToString(otbr::Ip6Prefix *this)
{
  std::stringbuf::basic_stringbuf[abi:ne180100]();
  if (!inet_ntop(30, this, __s, 0x2Eu))
  {
    otbrLog(0, "UTILS", "FAILED %s:%d - %s", v2, v3, v4, v5, v6, (char)"/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread_border_router/src/common/types.cpp");
    exit(-1);
  }
  size_t v7 = strlen(__s);
  (*(void (**)(void *, char *, size_t))(v11[0] + 96))(v11, __s, v7);
  char v8 = v12;
  if (v12 == v13)
  {
    (*(void (**)(void *, uint64_t))(v11[0] + 104))(v11, 47);
  }
  else
  {
    ++v12;
    *char v8 = 47;
  }
  snprintf(__s, 0x2EuLL, "%d", *((unsigned __int8 *)this + 16));
  size_t v9 = strlen(__s);
  (*(void (**)(void *, char *, size_t))(v11[0] + 96))(v11, __s, v9);
  std::stringbuf::str();
  if (v15 < 0) {
    operator delete(__p);
  }
  return std::streambuf::~streambuf();
}

void sub_1003C9D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void *otbr::MacAddress::ToString@<X0>(otbr::MacAddress *this@<X0>, void *a2@<X8>)
{
  snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", *(unsigned __int8 *)this, *((unsigned __int8 *)this + 1), *((unsigned __int8 *)this + 2), *((unsigned __int8 *)this + 3), *((unsigned __int8 *)this + 4), *((unsigned __int8 *)this + 5));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

double std::stringbuf::basic_stringbuf[abi:ne180100]()
{
  uint64_t v0 = std::streambuf::basic_streambuf();
  double result = 0.0;
  *(_OWORD *)(v0 + 6ot::NetworkData::NetworkDataTlv::SetType(this, 4) = 0u;
  *(_OWORD *)(v0 + 8ot::NetworkData::NetworkDataTlv::SetType(this, 0) = 0u;
  *(_DWORD *)(v0 + 96)  = 24;
  return result;
}

void otbr::DnsUtils::UnescapeInstanceName(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0]  = 0;
  a2->__r_.__value_.__l.__size_  = 0;
  a2->__r_.__value_.__r.__words[2]  = 0;
  if (*((char *)a1 + 23) >= 0) {
    std::string::size_type v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    std::string::size_type v4 = a1[1];
  }
  std::string::reserve(a2, v4);
  if (v4)
  {
    uint64_t v5 = 0;
    for (unsigned int i = 0; ; ++i)
    {
      size_t v7 = (uint64_t *)*a1;
      uint64_t v8 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
      int v9 = *(unsigned __int8 *)(v8 + v5);
      if (v9 != 92) {
        break;
      }
      uint64_t v10 = i + 3;
      if (i >= 0xFFFFFFFD) {
        goto LABEL_28;
      }
      unint64_t v11 = i + 1;
      if (v4 > v10
        && (*(char *)(v8 + v11) & 0x80000000) == 0
        && (uint64_t v12 = *(unsigned __int8 *)(v8 + v11), (_DefaultRuneLocale.__runetype[v12] & 0x400) != 0)
        && (*(char *)(v8 + i + 2) & 0x80000000) == 0
        && (uint64_t v13 = *(unsigned __int8 *)(v8 + i + 2), (_DefaultRuneLocale.__runetype[v13] & 0x400) != 0)
        && (int v14 = *(char *)(v8 + v10), (v14 & 0x80000000) == 0)
        && (_DefaultRuneLocale.__runetype[v14] & 0x400) != 0)
      {
        std::string::push_back(a2, 10 * v13 + 100 * v12 + v14 + 48);
        i += 3;
      }
      else
      {
        if (v4 <= v11) {
          break;
        }
        if (*((char *)a1 + 23) >= 0) {
          size_t v7 = a1;
        }
        std::string::push_back(a2, *((unsigned char *)v7 + v11));
        ++i;
      }
LABEL_23:
      uint64_t v5 = i + 1;
      if (i == -1)
      {
LABEL_28:
        __break(0x5500u);
        return;
      }
      if (v4 <= v5) {
        return;
      }
    }
    std::string::push_back(a2, v9);
    goto LABEL_23;
  }
}