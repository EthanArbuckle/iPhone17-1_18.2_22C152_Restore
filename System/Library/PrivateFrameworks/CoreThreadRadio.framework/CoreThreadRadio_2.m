BOOL HostInterpreter::isFullRouterDevice(HostInterpreter *this)
{
  return (~otThreadGetLinkMode(*((void *)this + 28)) & 3) == 0;
}

uint64_t HostInterpreter::isFullThreadDevice(HostInterpreter *this)
{
  return (otThreadGetLinkMode(*((void *)this + 28)) >> 1) & 1;
}

uint64_t HostInterpreter::fwUpdateInProgress(HostInterpreter *this)
{
  return *((unsigned __int8 *)this + 171);
}

BOOL HostInterpreter::pairingOrFWUpdateInProgress(HostInterpreter *this)
{
  return *((unsigned char *)this + 170) || *((unsigned char *)this + 171) != 0;
}

void hostInterpreterInit()
{
}

void sub_10015A320()
{
}

BOOL validHostCommand(void)
{
  if (TaskQueueWrapper::empty((TaskQueueWrapper *)RcpHostContext::sRcpHostContext)) {
    return 0;
  }
  TaskQueueWrapper::front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext, &v3);
  v1 = v4;
  BOOL v2 = *(_DWORD *)(v3 + 8) == 1;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
  return v2;
}

BOOL validNotifCommand(void)
{
  if (TaskQueueWrapper::empty((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88))) {
    return 0;
  }
  TaskQueueWrapper::front((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88), &v3);
  v1 = v4;
  BOOL v2 = *(_DWORD *)(v3 + 8) == 1;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
  return v2;
}

void processXpcOtctl(const unsigned __int8 *a1, int a2)
{
  uint64_t v3 = a1;
  if (!a1)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      v14 = logging_obg;
      if (syslog_is_the_mask_enabled(2) && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        processXpcOtctl();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  if (a2)
  {
    unsigned int v4 = 0;
    v5 = &v3[a2];
    do
    {
      while (1)
      {
        int v9 = *v3;
        if (v9 == 13 || v9 == 10) {
          break;
        }
LABEL_15:
        if (v4 <= 0x3FE)
        {
          LOBYTE(v9) = *v3;
          goto LABEL_17;
        }
        v11 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v11)
        {
          v12 = v11;
          if (!syslog_is_the_mask_enabled(2) || !os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_5;
          }
          *(_DWORD *)buf = 67109120;
          LODWORD(v16) = v4;
          v6 = v12;
          v7 = "processXpcOtctl, Large rxLength[%d]";
          uint32_t v8 = 8;
          goto LABEL_23;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v16 = "com.apple.wpantund.ncp";
          __int16 v17 = 2080;
          v18 = "default";
          v6 = &_os_log_default;
          v7 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
          uint32_t v8 = 22;
LABEL_23:
          _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v7, buf, v8);
        }
LABEL_5:
        v19[v4] = 0;
        otCliInputLine((ot::Cli::Interpreter *)v19);
        if (++v3 >= v5) {
          return;
        }
      }
      if (v4)
      {
        v19[v4] = 0;
        otCliInputLine((ot::Cli::Interpreter *)v19);
        goto LABEL_15;
      }
LABEL_17:
      v19[v4++] = v9;
      ++v3;
    }
    while (v3 < v5);
  }
}

BOOL hostCmdPending(void)
{
  if (!TaskQueueWrapper::empty((TaskQueueWrapper *)RcpHostContext::sRcpHostContext))
  {
    TaskQueueWrapper::front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext, &v5);
    v0 = v6;
    int v1 = *(_DWORD *)(v5 + 8);
    if (v6)
    {
      if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v0 + 16))(v0);
        if (atomic_fetch_add(v0 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v0 + 24))(v0);
        }
      }
    }
    if (v1 == 1) {
      return 1;
    }
  }
  if (TaskQueueWrapper::empty((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88))) {
    return 0;
  }
  TaskQueueWrapper::front((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88), &v5);
  BOOL v2 = v6;
  int v3 = *(_DWORD *)(v5 + 8);
  if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
    }
  }
  return v3 == 1;
}

uint64_t processHostCmd(void)
{
  uint64_t result = hostCmdPending();
  if (result)
  {
    char v19 = 0;
    if (TaskQueueWrapper::empty((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88))) {
      goto LABEL_18;
    }
    TaskQueueWrapper::front((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88), &v20);
    int v1 = v21;
    int v2 = *(_DWORD *)(v20 + 8);
    if (v21)
    {
      if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
        if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
        }
      }
    }
    if (v2 != 1)
    {
LABEL_18:
      TaskQueueWrapper::front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext, &v20);
      uint64_t v7 = v20;
      *(_DWORD *)(v20 + 8) = 2;
      if (*(_DWORD *)(v7 + 12) == 1)
      {
        logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
        if (logging_obg)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "=====> processHostCmd[HOST_CMD_DEFAULT_OTCTL]", buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
        TaskQueueWrapper::front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext, buf);
        v11 = v17;
        uint64_t v12 = **(void **)buf;
        if (v17)
        {
          if (atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
            if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
            }
          }
        }
        processXpcOtctl((const unsigned __int8 *)v12, (unsigned __int16)(*(_WORD *)(v12 + 1600) - 1));
        v13 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v13)
        {
          if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "++++++++++++++++++++++++++++++++++++", buf, 2u);
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          -[PowerEventHandler_Rcp init:]();
        }
      }
      else
      {
        uint64_t v9 = HostInterpreter::sHostInterpreter;
        v10 = v21;
        v15[0] = (void *)v7;
        v15[1] = v21;
        if (v21) {
          atomic_fetch_add_explicit(v21 + 2, 1u, memory_order_relaxed);
        }
        HostInterpreter::processCommand(v9, v15);
        if (v10)
        {
          if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
            if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
            }
          }
        }
        if ((*(_DWORD *)(v20 + 12) - 21) >= 3) {
          TaskQueueWrapper::pop_front((TaskQueueWrapper *)RcpHostContext::sRcpHostContext);
        }
      }
      uint64_t result = read(gPfdX, &v19, 1uLL);
      v14 = v21;
      if (v21)
      {
        if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
        {
          uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
          if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
            return (*(uint64_t (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
          }
        }
      }
    }
    else
    {
      TaskQueueWrapper::front((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88), &v20);
      int v3 = (void *)v20;
      *(_DWORD *)(v20 + 8) = 2;
      uint64_t v4 = HostInterpreter::sHostInterpreter;
      uint64_t v5 = v21;
      v18[0] = v3;
      v18[1] = v21;
      if (v21) {
        atomic_fetch_add_explicit(v21 + 2, 1u, memory_order_relaxed);
      }
      HostInterpreter::processCommand(v4, v18);
      if (v5)
      {
        if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
          if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
          }
        }
      }
      TaskQueueWrapper::pop_front((TaskQueueWrapper *)(RcpHostContext::sRcpHostContext + 88));
      uint64_t result = read(gPfdX, &v19, 1uLL);
      v6 = v21;
      if (v21 && atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
      {
        uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
        if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
          return (*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
        }
      }
    }
  }
  return result;
}

void sub_10015AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)va);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v6 - 48);
  _Unwind_Resume(a1);
}

void sub_10015AEF4(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10015AF08(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10015AF1C(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10015AF30(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::string const&,boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::string const&,boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,std::string const&,boost::any const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1 - 48);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    uint64_t result = operator new(v11);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    uint64_t result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

uint64_t ServiceEntry::ServiceEntry(uint64_t a1, int a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)a1 = off_100498ED8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v10 = *(const void **)a4;
  uint64_t v9 = *(void *)(a4 + 8);
  size_t v11 = v9 - *(void *)a4;
  if (v9 != *(void *)a4)
  {
    if ((v11 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = (char *)operator new(v9 - *(void *)a4);
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v12;
    v13 = &v12[v11];
    *(void *)(a1 + 32) = &v12[v11];
    memcpy(v12, v10, v11);
    *(void *)(a1 + 24) = v13;
  }
  *(void *)a1 = off_100498F38;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 40) = a5;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  size_t v14 = *(const void **)a6;
  size_t v15 = *(void *)(a6 + 8) - *(void *)a6;
  if (v15)
  {
    if ((v15 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    v16 = (char *)operator new(v15);
    *(void *)(a1 + 48) = v16;
    *(void *)(a1 + 56) = v16;
    __int16 v17 = &v16[v15];
    *(void *)(a1 + 64) = &v16[v15];
    memcpy(v16, v14, v15);
    *(void *)(a1 + 56) = v17;
  }
  return a1;
}

void sub_10015B1B0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  void *v1 = v2;
  uint64_t v6 = (void *)v1[2];
  if (v6)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_10015B32C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x10015B30CLL);
}

void sub_10015B380(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        char v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        char v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        v16 = __b;
      }
      else {
        v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_10015B568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::any::holder<std::list<std::string>>::~holder(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (char *)(a1 + 1);
    uint64_t v3 = a1[1];
    uint64_t v4 = (char *)a1[2];
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    a1[3] = 0;
    if (v4 != (char *)(a1 + 1))
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        if (v4[39] < 0) {
          operator delete(*((void **)v4 + 2));
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  return a1;
}

void boost::any::holder<std::list<std::string>>::~holder(void *a1)
{
  if (a1[3])
  {
    uint64_t v1 = (char *)(a1 + 1);
    uint64_t v2 = a1[1];
    uint64_t v3 = (char *)a1[2];
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    **(void **)(v2 + 8) = v4;
    a1[3] = 0;
    if (v3 != (char *)(a1 + 1))
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
    }
  }

  operator delete();
}

_UNKNOWN **boost::any::holder<std::list<std::string>>::type()
{
}

void boost::any::holder<std::list<std::string>>::clone()
{
}

void sub_10015B724()
{
}

void boost::any::holder<NmDeviceData>::~holder()
{
}

_UNKNOWN **boost::any::holder<NmDeviceData>::type()
{
}

void boost::any::holder<NmDeviceData>::clone()
{
}

uint64_t boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::operator()(uint64_t ***a1, uint64_t a2)
{
  v26 = 0;
  v27 = 0;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  unint64_t v32 = 10;
  __p = v30;
  uint64_t v34 = 0;
  v35 = v4;
  pthread_mutex_lock(v4);
  uint64_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    uint64_t v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  uint64_t v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v28 = v8;
      int v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v28 = a1[2];
      int v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v28);
      uint64_t v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v11 = v27;
  v26 = v7;
  v27 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v35);
  size_t v12 = (char *)__p;
  if (__p)
  {
    if (v34 - 1 >= 0)
    {
      char v13 = (char *)__p + 16 * v34;
      do
      {
        uint64_t v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (v32 >= 0xB) {
      operator delete(__p);
    }
  }
  v30[0] = 0;
  uint64_t v36 = 10;
  v37 = &v31;
  uint64_t v38 = 0;
  uint64_t v39 = a2;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v15 = v26;
  uint64_t v16 = (uint64_t)*v26;
  v23 = v30;
  v24 = a1;
  uint64_t v25 = v16;
  *(void *)&long long v21 = *(void *)(v16 + 8);
  *((void *)&v21 + 1) = v16;
  *(void *)&long long v22 = v30;
  *((void *)&v22 + 1) = v16;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(&v21);
  v20[0] = *v15;
  v20[1] = v20[0];
  v20[2] = v30;
  v20[3] = v20[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(v20);
  long long v28 = v21;
  long long v29 = v22;
  uint64_t v17 = v20[0];
  if ((void)v21 == v20[0])
  {
    if (HIDWORD(v40) <= v40) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::dereference(&v28);
    *(void *)&long long v28 = *(void *)(v28 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(&v28);
    if (*(unsigned char *)v29) {
      *(unsigned char *)long long v29 = 0;
    }
  }
  while ((void)v28 != v17);
  if (*((_DWORD *)v23 + 71) > *((_DWORD *)v23 + 70)) {
LABEL_35:
  }
    boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v24, v25);
LABEL_36:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>>::~slot_call_iterator_cache((uint64_t)v30);
  uint64_t v19 = v27;
  if (v27 && atomic_fetch_add(v27 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
    if (atomic_fetch_add(v19 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v19 + 24))(v19);
    }
  }
  return result;
}

void sub_10015BBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10015BBCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x10015BCD4);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::dereference(void *a1)
{
  uint64_t v2 = a1[2];
  if (!*(unsigned char *)v2)
  {
    uint64_t v3 = *(void *)(*(void *)(*a1 + 16) + 32);
    uint64_t v4 = *(void *)(v3 + 24);
    if (!v4)
    {
      std::runtime_error::runtime_error(&v6, "call to empty boost::function");
      v6.__vftable = (std::runtime_error_vtbl *)off_100495450;
      boost::throw_exception<boost::bad_function_call>(&v6);
    }
    (*(void (**)(uint64_t, void))((v4 & 0xFFFFFFFFFFFFFFFELL) + 8))(v3 + 32, *(void *)(v2 + 272));
    if (!*(unsigned char *)v2) {
      *(unsigned char *)uint64_t v2 = 1;
    }
  }
  return a1[2] + 1;
}

void sub_10015BDD4()
{
}

void sub_10015BE18()
{
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1])
  {
LABEL_31:
    uint64_t v18 = a1[3];
    if (v18 != v1)
    {
      uint64_t v19 = *(void *)(v18 + 16);
      unint64_t v26 = 10;
      __p = v25;
      uint64_t v28 = 0;
      uint64_t v29 = v19;
      (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
      uint64_t v20 = a1[2];
      a1[3] = a1[1];
      long long v21 = *(_DWORD **)(v20 + 288);
      if (v21) {
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v21, v25);
      }
      *(void *)(v20 + 288) = 0;
      (*(void (**)(uint64_t))(*(void *)v29 + 32))(v29);
      long long v22 = (char *)__p;
      if (__p)
      {
        if (v28 - 1 >= 0)
        {
          v23 = (char *)__p + 16 * v28;
          do
          {
            v24 = (atomic_uint *)*((void *)v23 - 1);
            if (v24)
            {
              if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
                if (atomic_fetch_add(v24 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v24 + 24))(v24);
                }
              }
            }
            v23 -= 16;
          }
          while (v23 > v22);
        }
        if (v26 >= 0xB) {
          operator delete(__p);
        }
      }
    }
    return;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    uint64_t v3 = *(void *)(*a1 + 16);
    unint64_t v26 = 10;
    __p = v25;
    uint64_t v28 = 0;
    uint64_t v29 = v3;
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(*(void *)(*a1 + 16), v25, (void *)(a1[2] + 8));
    uint64_t v4 = *(void *)(*a1 + 16);
    uint64_t v5 = a1[2];
    if (*(unsigned char *)(v4 + 24))
    {
      ++*(_DWORD *)(v5 + 280);
      uint64_t v6 = *(void *)(v4 + 16);
      if (v6)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
        {
          int v7 = 1;
          goto LABEL_17;
        }
        uint64_t v5 = a1[2];
      }
      uint64_t v8 = *a1;
      uint64_t v9 = a1[1];
      a1[3] = *a1;
      if (v9 == v8)
      {
        size_t v12 = *(_DWORD **)(v5 + 288);
        if (v12) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v12, v25);
        }
        int v7 = 0;
        *(void *)(v5 + 288) = 0;
      }
      else
      {
        uint64_t v10 = *(void *)(v8 + 16);
        uint64_t v11 = *(_DWORD **)(v5 + 288);
        if (v11) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v11, v25);
        }
        *(void *)(v5 + 288) = v10;
        int v7 = 0;
        if (v10) {
          ++*(_DWORD *)(v10 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v5 + 284);
      int v7 = 1;
    }
LABEL_17:
    (*(void (**)(uint64_t))(*(void *)v29 + 32))(v29);
    char v13 = (char *)__p;
    if (__p)
    {
      if (v28 - 1 >= 0)
      {
        uint64_t v14 = (char *)__p + 16 * v28;
        do
        {
          uint64_t v15 = (atomic_uint *)*((void *)v14 - 1);
          if (v15)
          {
            if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
              if (atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
              }
            }
          }
          v14 -= 16;
        }
        while (v14 > v13);
      }
      if (v26 >= 0xB) {
        operator delete(__p);
      }
    }
    uint64_t v16 = *a1;
    uint64_t v1 = a1[1];
    if (!v7) {
      break;
    }
    uint64_t v17 = *(void *)(v16 + 8);
    *a1 = v17;
    if (v17 == v1) {
      goto LABEL_31;
    }
  }
  if (v16 == v1) {
    goto LABEL_31;
  }
}

void sub_10015C218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10015C22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(boost::any const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(boost::any const&)>,boost::function<void ()(boost::signals2::connection const&,boost::any const&)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v15 = 10;
  __p = &v14;
  uint64_t v17 = 0;
  uint64_t v18 = v4;
  pthread_mutex_lock(v4);
  if (**(void **)a1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5 || atomic_load_explicit((atomic_uint *volatile)(v5 + 8), memory_order_acquire) != 1) {
      operator new();
    }
    uint64_t v6 = *(uint64_t ***)a1;
    int v7 = **(uint64_t ***)a1;
    uint64_t v8 = v7[1];
    *(void *)&long long v13 = v8;
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        while (1)
        {
          uint64_t v9 = *(void *)(v8 + 16);
          if (!*(unsigned char *)(v9 + 24)) {
            break;
          }
          uint64_t v8 = *(void *)(v8 + 8);
          *(void *)&long long v13 = v8;
          int v7 = *v6;
          if ((uint64_t *)v8 == *v6) {
            goto LABEL_10;
          }
        }
        uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>>::erase(v7, (int *)(v9 + 64), (uint64_t **)&v13);
        uint64_t v6 = *(uint64_t ***)a1;
        *(void *)&long long v13 = v8;
        int v7 = *v6;
      }
      while ((uint64_t *)v8 != *v6);
    }
LABEL_10:
    *(void *)(a1 + 16) = v8;
  }
  pthread_mutex_unlock(v18);
  uint64_t v10 = (char *)__p;
  if (__p)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = (char *)__p + 16 * v17;
      do
      {
        size_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_10015C674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    unint64_t v8 = 10;
    __p = v7;
    uint64_t v10 = 0;
    uint64_t v11 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v7);
    (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    uint64_t v3 = (char *)__p;
    if (__p)
    {
      if (v10 - 1 >= 0)
      {
        uint64_t v4 = (char *)__p + 16 * v10;
        do
        {
          uint64_t v5 = (atomic_uint *)*((void *)v4 - 1);
          if (v5)
          {
            if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
              if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
              }
            }
          }
          v4 -= 16;
        }
        while (v4 > v3);
      }
      if (v8 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_10015C94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::any::any<nl::Data &>()
{
}

void sub_10015CAFC()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 16) = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::operator()(uint64_t ***a1, uint64_t a2)
{
  unint64_t v26 = 0;
  v27 = 0;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  unint64_t v32 = 10;
  __p = v30;
  uint64_t v34 = 0;
  v35 = v4;
  pthread_mutex_lock(v4);
  uint64_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    int v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  int v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v28 = v8;
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v28 = a1[2];
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v28);
      int v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v11 = v27;
  unint64_t v26 = v7;
  v27 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v35);
  size_t v12 = (char *)__p;
  if (__p)
  {
    if (v34 - 1 >= 0)
    {
      long long v13 = (char *)__p + 16 * v34;
      do
      {
        char v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (v32 >= 0xB) {
      operator delete(__p);
    }
  }
  v30[0] = 0;
  uint64_t v36 = 10;
  v37 = &v31;
  uint64_t v38 = 0;
  uint64_t v39 = a2;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v15 = v26;
  uint64_t v16 = (uint64_t)*v26;
  v23 = v30;
  v24 = a1;
  uint64_t v25 = v16;
  *(void *)&long long v21 = *(void *)(v16 + 8);
  *((void *)&v21 + 1) = v16;
  *(void *)&long long v22 = v30;
  *((void *)&v22 + 1) = v16;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(&v21);
  v20[0] = *v15;
  v20[1] = v20[0];
  v20[2] = v30;
  v20[3] = v20[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(v20);
  long long v28 = v21;
  long long v29 = v22;
  uint64_t v17 = v20[0];
  if ((void)v21 == v20[0])
  {
    if (HIDWORD(v40) <= v40) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::dereference(&v28);
    *(void *)&long long v28 = *(void *)(v28 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(&v28);
    if (*(unsigned char *)v29) {
      *(unsigned char *)long long v29 = 0;
    }
  }
  while ((void)v28 != v17);
  if (*((_DWORD *)v23 + 71) > *((_DWORD *)v23 + 70)) {
LABEL_35:
  }
    boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v24, v25);
LABEL_36:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>>::~slot_call_iterator_cache((uint64_t)v30);
  uint64_t v19 = v27;
  if (v27 && atomic_fetch_add(v27 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
    if (atomic_fetch_add(v19 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v19 + 24))(v19);
    }
  }
  return result;
}

void sub_10015CF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10015CF34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x10015D03CLL);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::EnergyScanResultEntry const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::EnergyScanResultEntry const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::EnergyScanResultEntry const&)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v15 = 10;
  __p = &v14;
  uint64_t v17 = 0;
  uint64_t v18 = v4;
  pthread_mutex_lock(v4);
  if (**(void **)a1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5 || atomic_load_explicit((atomic_uint *volatile)(v5 + 8), memory_order_acquire) != 1) {
      operator new();
    }
    uint64_t v6 = *(uint64_t ***)a1;
    int v7 = **(uint64_t ***)a1;
    uint64_t v8 = v7[1];
    *(void *)&long long v13 = v8;
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        while (1)
        {
          uint64_t v9 = *(void *)(v8 + 16);
          if (!*(unsigned char *)(v9 + 24)) {
            break;
          }
          uint64_t v8 = *(void *)(v8 + 8);
          *(void *)&long long v13 = v8;
          int v7 = *v6;
          if ((uint64_t *)v8 == *v6) {
            goto LABEL_10;
          }
        }
        uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::erase(v7, (int *)(v9 + 64), (uint64_t **)&v13);
        uint64_t v6 = *(uint64_t ***)a1;
        *(void *)&long long v13 = v8;
        int v7 = *v6;
      }
      while ((uint64_t *)v8 != *v6);
    }
LABEL_10:
    *(void *)(a1 + 16) = v8;
  }
  pthread_mutex_unlock(v18);
  uint64_t v10 = (char *)__p;
  if (__p)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = (char *)__p + 16 * v17;
      do
      {
        size_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_10015D318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::operator()(uint64_t ***a1, uint64_t a2)
{
  unint64_t v26 = 0;
  v27 = 0;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  unint64_t v32 = 10;
  __p = v30;
  uint64_t v34 = 0;
  v35 = v4;
  pthread_mutex_lock(v4);
  uint64_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    int v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  int v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v28 = v8;
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v28 = a1[2];
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v28);
      int v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v11 = v27;
  unint64_t v26 = v7;
  v27 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v35);
  size_t v12 = (char *)__p;
  if (__p)
  {
    if (v34 - 1 >= 0)
    {
      long long v13 = (char *)__p + 16 * v34;
      do
      {
        char v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (v32 >= 0xB) {
      operator delete(__p);
    }
  }
  v30[0] = 0;
  uint64_t v36 = 10;
  v37 = &v31;
  uint64_t v38 = 0;
  uint64_t v39 = a2;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v15 = v26;
  uint64_t v16 = (uint64_t)*v26;
  v23 = v30;
  v24 = a1;
  uint64_t v25 = v16;
  *(void *)&long long v21 = *(void *)(v16 + 8);
  *((void *)&v21 + 1) = v16;
  *(void *)&long long v22 = v30;
  *((void *)&v22 + 1) = v16;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(&v21);
  v20[0] = *v15;
  v20[1] = v20[0];
  v20[2] = v30;
  v20[3] = v20[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(v20);
  long long v28 = v21;
  long long v29 = v22;
  uint64_t v17 = v20[0];
  if ((void)v21 == v20[0])
  {
    if (HIDWORD(v40) <= v40) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::dereference(&v28);
    *(void *)&long long v28 = *(void *)(v28 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(boost::any const&),boost::function<void ()(boost::any const&)>>,boost::signals2::mutex>>::lock_next_callable(&v28);
    if (*(unsigned char *)v29) {
      *(unsigned char *)long long v29 = 0;
    }
  }
  while ((void)v28 != v17);
  if (*((_DWORD *)v23 + 71) > *((_DWORD *)v23 + 70)) {
LABEL_35:
  }
    boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v24, v25);
LABEL_36:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,boost::any const&>>::~slot_call_iterator_cache((uint64_t)v30);
  uint64_t v19 = v27;
  if (v27 && atomic_fetch_add(v27 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
    if (atomic_fetch_add(v19 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v19 + 24))(v19);
    }
  }
  return result;
}

void sub_10015D830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10015D840(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x10015D948);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

void boost::signals2::detail::signal_impl<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>,boost::function<void ()(boost::signals2::connection const&,nl::wpantund::WPAN::NetworkInstance const&)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v15 = 10;
  __p = &v14;
  uint64_t v17 = 0;
  uint64_t v18 = v4;
  pthread_mutex_lock(v4);
  if (**(void **)a1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5 || atomic_load_explicit((atomic_uint *volatile)(v5 + 8), memory_order_acquire) != 1) {
      operator new();
    }
    uint64_t v6 = *(uint64_t ***)a1;
    int v7 = **(uint64_t ***)a1;
    uint64_t v8 = v7[1];
    *(void *)&long long v13 = v8;
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        while (1)
        {
          uint64_t v9 = *(void *)(v8 + 16);
          if (!*(unsigned char *)(v9 + 24)) {
            break;
          }
          uint64_t v8 = *(void *)(v8 + 8);
          *(void *)&long long v13 = v8;
          int v7 = *v6;
          if ((uint64_t *)v8 == *v6) {
            goto LABEL_10;
          }
        }
        uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(nl::wpantund::WPAN::NetworkInstance const&),boost::function<void ()(nl::wpantund::WPAN::NetworkInstance const&)>>,boost::signals2::mutex>>>::erase(v7, (int *)(v9 + 64), (uint64_t **)&v13);
        uint64_t v6 = *(uint64_t ***)a1;
        *(void *)&long long v13 = v8;
        int v7 = *v6;
      }
      while ((uint64_t *)v8 != *v6);
    }
LABEL_10:
    *(void *)(a1 + 16) = v8;
  }
  pthread_mutex_unlock(v18);
  uint64_t v10 = (char *)__p;
  if (__p)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = (char *)__p + 16 * v17;
      do
      {
        size_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_10015DC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

_UNKNOWN **boost::any::holder<otError>::type()
{
}

void boost::any::holder<otError>::clone()
{
}

void boost::any::any<std::list<std::map<std::string,boost::any>> &>()
{
}

void sub_10015DE4C()
{
  if (*(void *)(v0 + 24)) {
    boost::any::any<std::list<std::map<std::string,boost::any>> &>((uint64_t **)(v0 + 16), (uint64_t *)(v0 + 8), (void *)(v0 + 24));
  }
  operator delete();
}

void *boost::any::holder<std::list<std::map<std::string,boost::any>>>::~holder(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = a1 + 1;
    uint64_t v3 = a1[1];
    uint64_t v4 = (uint64_t *)a1[2];
    uint64_t v5 = *v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    a1[3] = 0;
    if (v4 != a1 + 1)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v4[1];
        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)(v4 + 2), (char *)v4[3]);
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
    }
  }
  return a1;
}

void boost::any::holder<std::list<std::map<std::string,boost::any>>>::~holder(void *a1)
{
  if (a1[3])
  {
    uint64_t v1 = a1 + 1;
    uint64_t v2 = a1[1];
    uint64_t v3 = (uint64_t *)a1[2];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    **(void **)(v2 + 8) = v4;
    a1[3] = 0;
    if (v3 != a1 + 1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy((uint64_t)(v3 + 2), (char *)v3[3]);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
    }
  }

  operator delete();
}

_UNKNOWN **boost::any::holder<std::list<std::map<std::string,boost::any>>>::type()
{
}

void boost::any::holder<std::list<std::map<std::string,boost::any>>>::clone()
{
}

void sub_10015E044()
{
  if (*(void *)(v0 + 24)) {
    boost::any::any<std::list<std::map<std::string,boost::any>> &>((uint64_t **)(v0 + 16), (uint64_t *)(v0 + 8), (void *)(v0 + 24));
  }
  operator delete();
}

void boost::any::holder<nmNetData>::~holder()
{
}

_UNKNOWN **boost::any::holder<nmNetData>::type()
{
}

void boost::any::holder<nmNetData>::clone()
{
}

void std::vector<ServiceEntry>::__init_with_size[abi:ne180100]<ServiceEntry*,ServiceEntry*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x333333333333334) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(80 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[80 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        ServiceEntry::ServiceEntry((ServiceEntry *)&v8[v9], (const ServiceEntry *)(a2 + v9));
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_10015E1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_10015E1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    std::vector<ServiceEntry>::__init_with_size[abi:ne180100]<ServiceEntry*,ServiceEntry*>();
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<ServiceEntry>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<ServiceEntry>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 80;
        int v7 = v4 - 80;
        uint64_t v8 = v4 - 80;
        do
        {
          uint64_t v9 = *(void (***)(char *))v8;
          v8 -= 80;
          (*v9)(v7);
          v6 -= 80;
          BOOL v10 = v7 == v3;
          int v7 = v8;
        }
        while (!v10);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void ServiceEntry::ServiceEntry(ServiceEntry *this, const ServiceEntry *a2)
{
  *(void *)this = off_100498ED8;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 1) = v4;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v8;
    uint64_t v9 = &v8[v7];
    *((void *)this + 4) = &v8[v7];
    memcpy(v8, v6, v7);
    *((void *)this + 3) = v9;
  }
  *(void *)this = off_100498F38;
  char v10 = *((unsigned char *)a2 + 40);
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 40) = v10;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  size_t v12 = (unsigned char *)*((void *)a2 + 6);
  uint64_t v11 = (unsigned char *)*((void *)a2 + 7);
  size_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if ((v13 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    char v14 = (char *)operator new(v11 - v12);
    *((void *)this + 6) = v14;
    *((void *)this + 7) = v14;
    unint64_t v15 = &v14[v13];
    *((void *)this + 8) = &v14[v13];
    memcpy(v14, v12, v13);
    *((void *)this + 7) = v15;
  }
  __int16 v16 = *((_WORD *)a2 + 36);
  *((unsigned char *)this + 74) = *((unsigned char *)a2 + 74);
  *((_WORD *)this + 36) = v16;
}

void sub_10015E3E8(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  void *v1 = v2;
  uint64_t v6 = (void *)v1[2];
  if (v6)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<ServiceEntry>::__push_back_slow_path<ServiceEntry const&>(void *a1, const ServiceEntry *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v19 = (ServiceEntry *)&v7[80 * v3];
  *((void *)&v20 + 1) = &v7[80 * v6];
  ServiceEntry::ServiceEntry(v19, a2);
  uint64_t v8 = 0;
  char v10 = (char *)*a1;
  for (uint64_t i = a1[1];
        (char *)(i + v8) != v10;
        ServiceEntry::ServiceEntry((ServiceEntry *)((char *)v19 + v8), (const ServiceEntry *)(v8 + i)))
  {
    v8 -= 80;
  }
  size_t v12 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  *a1 = (char *)v19 + v8;
  *(void *)&long long v20 = (char *)v19 + 80;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    size_t v13 = v11 - 80;
    char v14 = v11 - 80;
    unint64_t v15 = v11 - 80;
    do
    {
      __int16 v16 = *(void (***)(char *))v15;
      v15 -= 80;
      (*v16)(v14);
      v13 -= 80;
      BOOL v17 = v14 == v12;
      char v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return (char *)v19 + 80;
}

void sub_10015E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<ServiceEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ServiceEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 80);
    *(void *)(a1 + 16) = i - 80;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_UNKNOWN **boost::any::holder<otExtAddress>::type()
{
}

void boost::any::holder<otExtAddress>::clone()
{
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        char v10 = (uint64_t **)v5;
        size_t v13 = (const void *)v5[4];
        uint64_t v11 = v5 + 4;
        size_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          __int16 v16 = v11;
        }
        else {
          __int16 v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        unint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        break;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        unint64_t v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    char v10 = a1 + 1;
LABEL_27:
    long long v22 = (uint64_t *)v10;
    char v10 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v10[6] = *(uint64_t **)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    char *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    void *v6 = (uint64_t *)v10;
    v23 = (uint64_t *)**a1;
    v24 = (uint64_t *)v10;
    if (v23)
    {
      *a1 = v23;
      v24 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

uint64_t *std::multimap<IPv6Prefix,OnMeshPrefixEntry>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::__tree_node<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = result;
    unint64_t v6 = result + 1;
    do
    {
      int v7 = (char *)operator new(0x40uLL);
      long long v8 = *(_OWORD *)((char *)v4 + 44);
      *(_OWORD *)(v7 + 28) = *(_OWORD *)((char *)v4 + 28);
      *(_OWORD *)(v7 + 44) = v8;
      leaf = (char **)std::__tree<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>>>::__find_leaf(v5, v6, &v15, (uint64_t)(v7 + 28));
      uint64_t v10 = v15;
      *(void *)int v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = v10;
      *leaf = v7;
      uint64_t v11 = *(void **)*v5;
      if (v11)
      {
        uint64_t *v5 = (uint64_t)v11;
        int v7 = *leaf;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], (uint64_t *)v7);
      ++v5[2];
      size_t v12 = (void *)v4[1];
      if (v12)
      {
        do
        {
          size_t v13 = v12;
          size_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          size_t v13 = (void *)v4[2];
          BOOL v14 = *v13 == (void)v4;
          unint64_t v4 = v13;
        }
        while (!v14);
      }
      unint64_t v4 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10015E93C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>>>::__find_leaf(void *a1, void *a2, void *a3, uint64_t a4)
{
  long long v8 = a1 + 1;
  if (a1 + 1 != a2 && (IPv6Prefix::operator<((uint64_t)a2 + 28, a4) & 1) != 0)
  {
    while (1)
    {
      uint64_t v9 = (void *)*v8;
      uint64_t v10 = v8;
      if (!*v8) {
        break;
      }
      while (1)
      {
        long long v8 = v9;
        if (!IPv6Prefix::operator<((uint64_t)v9 + 28, a4)) {
          break;
        }
        uint64_t v9 = (void *)v8[1];
        if (!v9) {
          goto LABEL_18;
        }
      }
    }
LABEL_19:
    *a3 = v8;
    return v10;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
  }
  else
  {
    uint64_t v11 = (void *)*a2;
    if (*a2)
    {
      do
      {
        size_t v12 = v11;
        uint64_t v11 = (void *)v11[1];
      }
      while (v11);
    }
    else
    {
      size_t v13 = a2;
      do
      {
        size_t v12 = (void *)v13[2];
        BOOL v14 = *v12 == (void)v13;
        size_t v13 = v12;
      }
      while (v14);
    }
    if (IPv6Prefix::operator<(a4, (uint64_t)v12 + 28))
    {
      while (1)
      {
        uint64_t v15 = (void *)*v8;
        uint64_t v10 = v8;
        if (!*v8) {
          goto LABEL_19;
        }
        while (1)
        {
          long long v8 = v15;
          if (IPv6Prefix::operator<(a4, (uint64_t)v15 + 28)) {
            break;
          }
          uint64_t v15 = (void *)v8[1];
          if (!v15)
          {
LABEL_18:
            uint64_t v10 = v8 + 1;
            goto LABEL_19;
          }
        }
      }
    }
  }
  if (*a2)
  {
    *a3 = v12;
    return v12 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *std::multimap<IPv6Prefix,OffMeshRouteEntry>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<IPv6Prefix,OffMeshRouteEntry>,std::__tree_node<std::__value_type<IPv6Prefix,OffMeshRouteEntry>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = result;
    unint64_t v6 = result + 1;
    do
    {
      int v7 = (char *)operator new(0x40uLL);
      int v8 = *((_DWORD *)v4 + 15);
      long long v9 = *(_OWORD *)((char *)v4 + 44);
      *(_OWORD *)(v7 + 28) = *(_OWORD *)((char *)v4 + 28);
      *(_OWORD *)(v7 + 44) = v9;
      *((_DWORD *)v7 + 15) = v8;
      leaf = (char **)std::__tree<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,OnMeshPrefixEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,OnMeshPrefixEntry>>>::__find_leaf(v5, v6, &v16, (uint64_t)(v7 + 28));
      uint64_t v11 = v16;
      *(void *)int v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = v11;
      *leaf = v7;
      size_t v12 = *(void **)*v5;
      if (v12)
      {
        uint64_t *v5 = (uint64_t)v12;
        int v7 = *leaf;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], (uint64_t *)v7);
      ++v5[2];
      size_t v13 = (void *)v4[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          size_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (void *)v4[2];
          BOOL v15 = *v14 == (void)v4;
          unint64_t v4 = v14;
        }
        while (!v15);
      }
      unint64_t v4 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_10015EBA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>>>::__emplace_unique_key_args<IPv6Prefix,std::piecewise_construct_t const&,std::tuple<IPv6Prefix const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  int v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        uint64_t v10 = (uint64_t)v6 + 28;
        if (!IPv6Prefix::operator<(a2, (uint64_t)v6 + 28)) {
          break;
        }
        unint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (!IPv6Prefix::operator<(v10, a2)) {
        break;
      }
      int v7 = v9 + 1;
      unint64_t v6 = v9[1];
      if (!v6) {
        goto LABEL_9;
      }
    }
    if (*v7) {
      return *v7;
    }
  }
  else
  {
    long long v9 = a1 + 1;
  }
LABEL_9:
  uint64_t v11 = (char *)operator new(0x38uLL);
  int v12 = *((_DWORD *)*a4 + 4);
  *(_OWORD *)(v11 + 28) = **a4;
  *((_DWORD *)v11 + 11) = v12;
  *((_DWORD *)v11 + 12) = 512;
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = v9;
  char *v7 = (uint64_t *)v11;
  size_t v13 = (uint64_t *)**a1;
  BOOL v14 = (uint64_t *)v11;
  if (v13)
  {
    *a1 = v13;
    BOOL v14 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v11;
}

void std::vector<ServiceEntry>::__assign_with_size[abi:ne180100]<ServiceEntry*,ServiceEntry*>(void **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = (uint64_t)a1[2];
  long long v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 4) < __sz)
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        int v12 = v10 - 80;
        size_t v13 = v10 - 80;
        BOOL v14 = (void (***)(char *))(v10 - 80);
        do
        {
          BOOL v15 = *v14;
          v14 -= 10;
          (*v15)(v13);
          v12 -= 80;
          BOOL v16 = v13 == v9;
          size_t v13 = (char *)v14;
        }
        while (!v16);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x333333333333333) {
      goto LABEL_43;
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= __sz) {
      uint64_t v18 = __sz;
    }
    unint64_t v19 = v17 >= 0x199999999999999 ? 0x333333333333333 : v18;
    if (v19 > 0x333333333333333) {
LABEL_43:
    }
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    uint64_t v20 = 80 * v19;
    long long v9 = (char *)operator new(80 * v19);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v20];
    if (a2 != a3)
    {
      uint64_t v21 = 0;
      do
      {
        ServiceEntry::ServiceEntry((ServiceEntry *)&v9[v21], (const ServiceEntry *)&a2[v21]);
        v21 += 80;
      }
      while (&a2[v21] != a3);
      v9 += v21;
    }
LABEL_42:
    a1[1] = v9;
    return;
  }
  long long v22 = (char *)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v22 - v9) >> 4) >= __sz)
  {
    if (a2 != a3)
    {
      uint64_t v29 = 0;
      do
      {
        uint64_t v31 = &v9[v29];
        unint64_t v32 = (char **)&a2[v29];
        *(void *)&v9[v29 + 8] = *(void *)&a2[v29 + 8];
        if (a2 != v9)
        {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v31 + 2, v32[2], v32[3], v32[3] - v32[2]);
          v31[40] = *((unsigned char *)v32 + 40);
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v31 + 6, v32[6], v32[7], v32[7] - v32[6]);
        }
        __int16 v30 = *((_WORD *)v32 + 36);
        v31[74] = *((unsigned char *)v32 + 74);
        *((_WORD *)v31 + 36) = v30;
        v29 += 80;
      }
      while (&a2[v29] != a3);
      long long v22 = (char *)a1[1];
      v9 += v29;
    }
    if (v22 != v9)
    {
      v35 = v22 - 80;
      uint64_t v36 = v22 - 80;
      v37 = (void (***)(char *))(v22 - 80);
      do
      {
        uint64_t v38 = *v37;
        v37 -= 10;
        (*v38)(v36);
        v35 -= 80;
        BOOL v16 = v36 == v9;
        uint64_t v36 = (char *)v37;
      }
      while (!v16);
    }
    goto LABEL_42;
  }
  v23 = &a2[16 * ((v22 - v9) >> 4)];
  if (v22 != v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 16 * ((v22 - v9) >> 4);
    do
    {
      v27 = &v9[v24];
      long long v28 = (char **)&a2[v24];
      *(void *)&v9[v24 + 8] = *(void *)&a2[v24 + 8];
      if (a2 != v9)
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v27 + 2, v28[2], v28[3], v28[3] - v28[2]);
        v27[40] = *((unsigned char *)v28 + 40);
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v27 + 6, v28[6], v28[7], v28[7] - v28[6]);
      }
      __int16 v26 = *((_WORD *)v28 + 36);
      v27[74] = *((unsigned char *)v28 + 74);
      *((_WORD *)v27 + 36) = v26;
      v24 += 80;
    }
    while (v25 != v24);
    long long v9 = (char *)a1[1];
  }
  v33 = v9;
  if (v23 != a3)
  {
    uint64_t v34 = 0;
    do
    {
      ServiceEntry::ServiceEntry((ServiceEntry *)&v9[v34], (const ServiceEntry *)&v23[v34]);
      v34 += 80;
    }
    while (&v23[v34] != a3);
    v33 = &v9[v34];
  }
  a1[1] = v33;
}

void sub_10015EFF0(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    std::vector<ServiceEntry>::__init_with_size[abi:ne180100]<ServiceEntry*,ServiceEntry*>();
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__tree_node<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  if (a1[2])
  {
    unint64_t v6 = *a1;
    uint64_t v8 = a1 + 1;
    int v7 = (uint64_t)a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    *(void *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1]) {
      long long v9 = (uint64_t *)v6[1];
    }
    else {
      long long v9 = v6;
    }
    uint64_t v35 = (uint64_t)a1;
    if (!v9)
    {
      v23 = 0;
      goto LABEL_49;
    }
    uint64_t v10 = (uint64_t *)v9[2];
    if (v10)
    {
      uint64_t v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        uint64_t *v10 = 0;
        while (1)
        {
          uint64_t v34 = (void *)v10[1];
          if (!v34) {
            break;
          }
          do
          {
            uint64_t v10 = v34;
            uint64_t v34 = (void *)*v34;
          }
          while (v34);
        }
      }
      else
      {
        for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
        {
          do
          {
            uint64_t v10 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    uint64_t v36 = v10;
    if (a2 == a3)
    {
      long long v22 = a1;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)a1, v9);
      if (!v10) {
        goto LABEL_50;
      }
      goto LABEL_46;
    }
    int v12 = a2;
    while (1)
    {
      long long v13 = *(_OWORD *)((char *)v12 + 28);
      *((unsigned char *)v9 + 44) = *((unsigned char *)v12 + 44);
      *(_OWORD *)((char *)v9 + 28) = v13;
      *((_DWORD *)v9 + 12) = *((_DWORD *)v12 + 12);
      BOOL v14 = *v8;
      BOOL v15 = v5 + 1;
      BOOL v16 = v5 + 1;
      if (!*v8) {
        break;
      }
      do
      {
        while (1)
        {
          BOOL v15 = (uint64_t **)v14;
          if (!IPv6Prefix::operator<((uint64_t)v9 + 28, (uint64_t)v14 + 28)) {
            break;
          }
          BOOL v14 = *v15;
          BOOL v16 = v15;
          if (!*v15) {
            goto LABEL_18;
          }
        }
        BOOL v14 = v15[1];
      }
      while (v14);
      BOOL v16 = v15 + 1;
      *long long v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t)v15;
      v15[1] = v9;
      unint64_t v17 = (uint64_t *)**v5;
      if (v17) {
        goto LABEL_19;
      }
LABEL_20:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5[1], v9);
      v5[2] = (uint64_t *)((char *)v5[2] + 1);
      long long v9 = v36;
      if (v36)
      {
        uint64_t v10 = (uint64_t *)v36[2];
        if (v10)
        {
          uint64_t v18 = (uint64_t *)*v10;
          if ((uint64_t *)*v10 == v36)
          {
            uint64_t *v10 = 0;
            while (1)
            {
              uint64_t v21 = (void *)v10[1];
              if (!v21) {
                break;
              }
              do
              {
                uint64_t v10 = v21;
                uint64_t v21 = (void *)*v21;
              }
              while (v21);
            }
          }
          else
          {
            for (v10[1] = 0; v18; uint64_t v18 = (uint64_t *)v10[1])
            {
              do
              {
                uint64_t v10 = v18;
                uint64_t v18 = (uint64_t *)*v18;
              }
              while (v18);
            }
          }
        }
        uint64_t v36 = v10;
        unint64_t v19 = (void *)v12[1];
        if (v19)
        {
          do
          {
LABEL_29:
            unint64_t v4 = v19;
            unint64_t v19 = (void *)*v19;
          }
          while (v19);
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v19 = (void *)v12[1];
        if (v19) {
          goto LABEL_29;
        }
      }
      do
      {
        unint64_t v4 = (void *)v12[2];
        BOOL v20 = *v4 == (void)v12;
        int v12 = v4;
      }
      while (!v20);
LABEL_33:
      if (v9)
      {
        int v12 = v4;
        if (v4 != a3) {
          continue;
        }
      }
      long long v22 = (void *)v35;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(v35, v9);
      if (!v10) {
        goto LABEL_50;
      }
LABEL_46:
      for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
        uint64_t v10 = i;
      a1 = (uint64_t **)v22;
      v23 = v10;
LABEL_49:
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy((uint64_t)a1, v23);
      goto LABEL_50;
    }
LABEL_18:
    *long long v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v15;
    const void *v16 = v9;
    unint64_t v17 = (uint64_t *)**v5;
    if (!v17) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t *v5 = v17;
    long long v9 = *v16;
    goto LABEL_20;
  }
LABEL_50:
  if (v4 != a3)
  {
    uint64_t v25 = (char **)(v5 + 1);
    while (1)
    {
      __int16 v26 = (char *)operator new(0x38uLL);
      uint64_t v27 = *(void *)((char *)v4 + 44);
      *(_OWORD *)(v26 + 28) = *(_OWORD *)((char *)v4 + 28);
      *(void *)(v26 + 44) = v27;
      long long v28 = *v25;
      uint64_t v29 = (char **)(v5 + 1);
      __int16 v30 = (char **)(v5 + 1);
      if (*v25) {
        break;
      }
LABEL_58:
      *(void *)__int16 v26 = 0;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = v29;
      *__int16 v30 = v26;
      uint64_t v31 = (uint64_t *)**v5;
      if (v31) {
        goto LABEL_59;
      }
LABEL_60:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5[1], (uint64_t *)v26);
      v5[2] = (uint64_t *)((char *)v5[2] + 1);
      unint64_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          unint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          unint64_t v4 = v33;
        }
        while (!v20);
      }
      unint64_t v4 = v33;
      if (v33 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v29 = (char **)v28;
        if (!IPv6Prefix::operator<((uint64_t)(v26 + 28), (uint64_t)(v28 + 28))) {
          break;
        }
        long long v28 = *v29;
        __int16 v30 = v29;
        if (!*v29) {
          goto LABEL_58;
        }
      }
      long long v28 = v29[1];
    }
    while (v28);
    __int16 v30 = v29 + 1;
    *(void *)__int16 v26 = 0;
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 2) = v29;
    v29[1] = v26;
    uint64_t v31 = (uint64_t *)**v5;
    if (!v31) {
      goto LABEL_60;
    }
LABEL_59:
    uint64_t *v5 = v31;
    __int16 v26 = *v30;
    goto LABEL_60;
  }
}

void sub_10015F3C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10015F3D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::__map_value_compare<IPv6Prefix,std::__value_type<IPv6Prefix,InterfaceRouteEntry>,std::less<IPv6Prefix>,true>,std::allocator<std::__value_type<IPv6Prefix,InterfaceRouteEntry>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::string const&,boost::any const&),boost::function<void ()(std::string const&,boost::any const&)>>,boost::signals2::mutex>>,void *>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t ot::Utils::LookupTable::GetName<HostInterpreter::Command>(uint64_t a1)
{
  return *(void *)a1;
}

void OUTLINED_FUNCTION_4_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_11(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t **OUTLINED_FUNCTION_13(uint64_t **result, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = **result;
  *(void *)(v4 + 8) = *(void *)(*a2 + 8);
  **(void **)(v3 + 8) = v4;
  *a3 = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_15()
{
  return v0;
}

unint64_t EntryBase::get_origin_as_string@<X0>(EntryBase *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(int *)this;
  if (v3 > 2) {
    uint64_t v4 = "unknown";
  }
  else {
    uint64_t v4 = off_100498F68[v3];
  }
  unint64_t result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  unint64_t result = (unint64_t)memcpy(a2, v4, v6);
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

BOOL ServiceEntryBase::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && (uint64_t v3 = a1 + 16,
        uint64_t v2 = *(const void **)(a1 + 16),
        size_t v4 = *(void *)(v3 + 8) - (void)v2,
        uint64_t v6 = a2 + 16,
        uint64_t v5 = *(const void **)(a2 + 16),
        v4 == *(void *)(v6 + 8) - (void)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void ServiceEntryBase::get_description(ServiceEntryBase *this)
{
}

void sub_10015F810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    __ThreadPowerAssertDispatchTask_block_invoke_cold_3(a11);
  }
  _Unwind_Resume(exception_object);
}

void ServiceEntry::get_description(ServiceEntry *this)
{
}

void sub_10015FA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16) {
    __ThreadPowerAssertDispatchTask_block_invoke_cold_3(a16);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IPv6Prefix::IPv6Prefix(IPv6Prefix *this, const in6_addr *a2, unsigned int a3)
{
  *(in6_addr *)this = *a2;
  *((unsigned char *)this + 16) = a3;
  in6_addr_apply_mask((in6_addr *)this, a3);
}

{
  *(in6_addr *)this = *a2;
  *((unsigned char *)this + 16) = a3;
  in6_addr_apply_mask((in6_addr *)this, a3);
}

BOOL IPv6Prefix::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t IPv6Prefix::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < v3) {
    return 1;
  }
  if (v2 != v3) {
    return 0;
  }
  unint64_t v5 = bswap64(*(void *)a1);
  unint64_t v6 = bswap64(*(void *)a2);
  if (v5 == v6)
  {
    unint64_t v5 = bswap64(*(void *)(a1 + 8));
    unint64_t v6 = bswap64(*(void *)(a2 + 8));
    if (v5 == v6) {
      return 0;
    }
  }
  if (v5 < v6) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  return v7 >> 31;
}

unint64_t IPv6Prefix::to_string@<X0>(const in6_addr *this@<X0>, void *a2@<X8>)
{
  in6_addr_to_string(this, __p);
  if (v11 >= 0) {
    size_t v4 = __p;
  }
  else {
    size_t v4 = (void **)__p[0];
  }
  snprintf(__str, 0x64uLL, "%s/%d", (const char *)v4, this[1].__u6_addr8[0]);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  unint64_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  unint64_t result = (unint64_t)memcpy(a2, __str, v6);
LABEL_14:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t OnMeshPrefixEntry::encode_flag_set(uint64_t a1, int a2)
{
  if (a2 == -1) {
    unsigned __int16 v2 = 192;
  }
  else {
    unsigned __int16 v2 = 0;
  }
  if (a2 == 1) {
    unsigned __int16 v2 = 64;
  }
  unsigned int v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    size_t v4 = *(uint64_t **)(a1 + 8);
    while (1)
    {
      int v5 = *((_DWORD *)v4 + 7);
      if (v5 <= 5)
      {
        if (v5 == 5)
        {
          v2 |= 1u;
LABEL_13:
          size_t v6 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            int v7 = *((_DWORD *)v6 + 7);
            if (v7 <= 4)
            {
              if (v7 == 4)
              {
                v2 |= 2u;
LABEL_19:
                uint64_t v8 = *(uint64_t **)(a1 + 8);
                while (1)
                {
                  int v9 = *((_DWORD *)v8 + 7);
                  if (v9 <= 3)
                  {
                    if (v9 == 3)
                    {
                      v2 |= 4u;
LABEL_25:
                      uint64_t v10 = *(uint64_t **)(a1 + 8);
                      while (1)
                      {
                        int v11 = *((_DWORD *)v10 + 7);
                        if (v11 <= 2)
                        {
                          if (v11 == 2)
                          {
                            v2 |= 8u;
LABEL_31:
                            int v12 = *(uint64_t **)(a1 + 8);
                            while (1)
                            {
                              int v13 = *((_DWORD *)v12 + 7);
                              if (v13 <= 1)
                              {
                                if (v13 == 1)
                                {
                                  v2 |= 0x10u;
LABEL_37:
                                  BOOL v14 = *(uint64_t **)(a1 + 8);
                                  while (1)
                                  {
                                    int v15 = *((_DWORD *)v14 + 7);
                                    if (v15 <= 0)
                                    {
                                      if ((v15 & 0x80000000) == 0)
                                      {
                                        v2 |= 0x20u;
LABEL_43:
                                        BOOL v16 = *(uint64_t **)(a1 + 8);
                                        while (1)
                                        {
                                          int v17 = *((_DWORD *)v16 + 7);
                                          if (v17 <= 6)
                                          {
                                            if (v17 == 6)
                                            {
                                              v2 |= 0x4000u;
                                              while (1)
                                              {
LABEL_50:
                                                int v18 = *((_DWORD *)v3 + 7);
                                                if (v18 <= 7)
                                                {
                                                  if (v18 == 7)
                                                  {
                                                    v2 |= 0x8000u;
                                                    return v2;
                                                  }
                                                  ++v3;
                                                }
                                                unsigned int v3 = (uint64_t *)*v3;
                                                if (!v3) {
                                                  return v2;
                                                }
                                              }
                                            }
                                            ++v16;
                                          }
                                          BOOL v16 = (uint64_t *)*v16;
                                          if (!v16) {
                                            goto LABEL_50;
                                          }
                                        }
                                      }
                                      ++v14;
                                    }
                                    BOOL v14 = (uint64_t *)*v14;
                                    if (!v14) {
                                      goto LABEL_43;
                                    }
                                  }
                                }
                                ++v12;
                              }
                              int v12 = (uint64_t *)*v12;
                              if (!v12) {
                                goto LABEL_37;
                              }
                            }
                          }
                          ++v10;
                        }
                        uint64_t v10 = (uint64_t *)*v10;
                        if (!v10) {
                          goto LABEL_31;
                        }
                      }
                    }
                    ++v8;
                  }
                  uint64_t v8 = (uint64_t *)*v8;
                  if (!v8) {
                    goto LABEL_25;
                  }
                }
              }
              ++v6;
            }
            size_t v6 = (uint64_t *)*v6;
            if (!v6) {
              goto LABEL_19;
            }
          }
        }
        ++v4;
      }
      size_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_13;
      }
    }
  }
  return v2;
}

BOOL OnMeshPrefixEntry::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (*(_DWORD *)a1) {
    return 1;
  }
  return *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
      && *(unsigned __int8 *)(a1 + 6) == *(unsigned __int8 *)(a2 + 6)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8);
}

unint64_t on_mesh_prefix_flags_to_string@<X0>(int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    int v5 = a1 & 0xC0;
    if ((a1 & 0xC0) != 0)
    {
      if (v5 == 192)
      {
        size_t v6 = "low";
      }
      else if (v5 == 64)
      {
        size_t v6 = "high";
      }
      else
      {
        size_t v6 = "none";
      }
    }
    else
    {
      size_t v6 = "med";
    }
    uint64_t v8 = "1";
    if (a1) {
      int v9 = "1";
    }
    else {
      int v9 = "0";
    }
    if ((a1 & 2) != 0) {
      uint64_t v10 = "1";
    }
    else {
      uint64_t v10 = "0";
    }
    if ((a1 & 4) != 0) {
      int v11 = "1";
    }
    else {
      int v11 = "0";
    }
    if ((a1 & 8) != 0) {
      int v12 = "1";
    }
    else {
      int v12 = "0";
    }
    if ((a1 & 0x10) != 0) {
      int v13 = "1";
    }
    else {
      int v13 = "0";
    }
    if ((a1 & 0x20) != 0) {
      BOOL v14 = "1";
    }
    else {
      BOOL v14 = "0";
    }
    if ((a1 & 0x8000u) != 0) {
      int v15 = "1";
    }
    else {
      int v15 = "0";
    }
    if ((a1 & 0x4000) == 0) {
      uint64_t v8 = "0";
    }
    snprintf(__str, 0x12CuLL, "flags:0x%02x [on-mesh:%s def-route:%s config:%s dhcp:%s slaac:%s pref:%s nd-dns:%s dp:%s prio:%s]", a1, v9, v10, v11, v12, v13, v14, v15, v8, v6);
  }
  else
  {
    nl::wpantund::flags_to_string((nl::wpantund *)a1, "ppPSDCRM", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    snprintf(__str, 0x12CuLL, "%s(0x%02x)", (const char *)p_p, a1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unint64_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = result;
  if (result >= 0x17)
  {
    uint64_t v18 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v18 = result | 7;
    }
    uint64_t v19 = v18 + 1;
    BOOL v20 = operator new(v18 + 1);
    a3[1] = v17;
    a3[2] = v19 | 0x8000000000000000;
    *a3 = v20;
    a3 = v20;
  }
  else
  {
    *((unsigned char *)a3 + 23) = result;
    if (!result) {
      goto LABEL_46;
    }
  }
  unint64_t result = (unint64_t)memcpy(a3, __str, v17);
LABEL_46:
  *((unsigned char *)a3 + v17) = 0;
  return result;
}

unint64_t OnMeshPrefixEntry::get_description@<X0>(OnMeshPrefixEntry *this@<X0>, const in6_addr *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (a3)
  {
    in6_addr_to_string(a2, v46);
    if (v47 >= 0) {
      int v7 = v46;
    }
    else {
      int v7 = (void **)v46[0];
    }
    uint64_t v8 = *(int *)this;
    if (v8 > 2) {
      int v9 = "unknown";
    }
    else {
      int v9 = off_100498F68[v8];
    }
    int v13 = a2[1].__u6_addr8[0];
    size_t v14 = strlen(v9);
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v20 = v14 | 7;
      }
      uint64_t v21 = v20 + 1;
      p_dst = (void **)operator new(v20 + 1);
      size_t v44 = v15;
      unint64_t v45 = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v45) = v14;
      p_dst = (void **)&__dst;
      if (!v14)
      {
LABEL_26:
        *((unsigned char *)p_dst + v15) = 0;
        int v22 = SHIBYTE(v45);
        v23 = (const char *)__dst;
        int v24 = *((unsigned __int8 *)this + 6);
        on_mesh_prefix_flags_to_string(*((unsigned __int16 *)this + 2), 1, __p);
        uint64_t v25 = (const char *)&__dst;
        if (v22 < 0) {
          uint64_t v25 = v23;
        }
        __int16 v26 = "yes";
        if (!v24) {
          __int16 v26 = "no ";
        }
        if (v42 >= 0) {
          uint64_t v27 = __p;
        }
        else {
          uint64_t v27 = (void **)__p[0];
        }
        snprintf(__str, 0x12CuLL, "%-22s prefix_len:%-4d origin:%-8s stable:%s %s rloc:0x%04x", (const char *)v7, v13, v25, v26, (const char *)v27, *((unsigned __int16 *)this + 4));
        if (v42 < 0) {
          goto LABEL_58;
        }
LABEL_47:
        if (SHIBYTE(v45) < 0) {
          goto LABEL_59;
        }
LABEL_48:
        if (v47 < 0) {
          goto LABEL_60;
        }
LABEL_49:
        unint64_t result = strlen(__str);
        if (result > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_61;
        }
        goto LABEL_50;
      }
    }
    memcpy(p_dst, v9, v15);
    goto LABEL_26;
  }
  IPv6Prefix::to_string(a2, v46);
  if (v47 >= 0) {
    uint64_t v10 = v46;
  }
  else {
    uint64_t v10 = (void **)v46[0];
  }
  uint64_t v11 = *(int *)this;
  if (v11 > 2) {
    int v12 = "unknown";
  }
  else {
    int v12 = off_100498F68[v11];
  }
  size_t v17 = strlen(v12);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v28 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v28 = v17 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v19 = (void **)operator new(v28 + 1);
    size_t v44 = v18;
    unint64_t v45 = v29 | 0x8000000000000000;
    __dst = v19;
    goto LABEL_38;
  }
  HIBYTE(v45) = v17;
  uint64_t v19 = (void **)&__dst;
  if (v17) {
LABEL_38:
  }
    memcpy(v19, v12, v18);
  *((unsigned char *)v19 + v18) = 0;
  int v30 = SHIBYTE(v45);
  uint64_t v31 = (const char *)__dst;
  int v32 = *((unsigned __int8 *)this + 6);
  on_mesh_prefix_flags_to_string(*((unsigned __int16 *)this + 2), 0, __p);
  v33 = (const char *)&__dst;
  if (v30 < 0) {
    v33 = v31;
  }
  uint64_t v34 = "yes";
  if (!v32) {
    uint64_t v34 = "no";
  }
  if (v42 >= 0) {
    uint64_t v35 = __p;
  }
  else {
    uint64_t v35 = (void **)__p[0];
  }
  snprintf(__str, 0x12CuLL, "\"%s\", origin:%s, stable:%s, flags:%s, rloc:0x%04x", (const char *)v10, v33, v34, (const char *)v35, *((unsigned __int16 *)this + 4));
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_47;
  }
LABEL_58:
  operator delete(__p[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0) {
    goto LABEL_48;
  }
LABEL_59:
  operator delete(__dst);
  if ((v47 & 0x80000000) == 0) {
    goto LABEL_49;
  }
LABEL_60:
  operator delete(v46[0]);
  unint64_t result = strlen(__str);
  if (result > 0x7FFFFFFFFFFFFFF7) {
LABEL_61:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_50:
  size_t v37 = result;
  if (result >= 0x17)
  {
    uint64_t v38 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v38 = result | 7;
    }
    uint64_t v39 = v38 + 1;
    uint64_t v40 = operator new(v38 + 1);
    a4[1] = v37;
    a4[2] = v39 | 0x8000000000000000;
    *a4 = v40;
    a4 = v40;
  }
  else
  {
    *((unsigned char *)a4 + 23) = result;
    if (!result) {
      goto LABEL_57;
    }
  }
  unint64_t result = (unint64_t)memcpy(a4, __str, v37);
LABEL_57:
  *((unsigned char *)a4 + v37) = 0;
  return result;
}

void sub_10016043C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

size_t external_route_priority_to_string@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 + 1) > 2) {
    unsigned int v3 = "unknown";
  }
  else {
    unsigned int v3 = off_100498F80[a1 + 1];
  }
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memcpy(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

BOOL OffMeshRouteEntry::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (*(_DWORD *)a1) {
    return 1;
  }
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
}

unint64_t OffMeshRouteEntry::get_description@<X0>(OffMeshRouteEntry *this@<X0>, const in6_addr *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (a3)
  {
    IPv6Prefix::to_string(a2, v49);
    if (v50 >= 0) {
      uint64_t v6 = v49;
    }
    else {
      uint64_t v6 = (void **)v49[0];
    }
    uint64_t v7 = *(int *)this;
    if (v7 > 2) {
      uint64_t v8 = "unknown";
    }
    else {
      uint64_t v8 = off_100498F68[v7];
    }
    size_t v12 = strlen(v8);
    if (v12 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = v12;
    if (v12 >= 0x17)
    {
      uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v18 = v12 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (void **)operator new(v18 + 1);
      size_t v47 = v13;
      int64_t v48 = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v48) = v12;
      p_dst = (void **)&__dst;
      if (!v12)
      {
LABEL_26:
        *((unsigned char *)p_dst + v13) = 0;
        if (v48 >= 0) {
          uint64_t v20 = (void **)&__dst;
        }
        else {
          uint64_t v20 = __dst;
        }
        unsigned int v21 = *((_DWORD *)this + 1) + 1;
        if (v21 > 2) {
          int v22 = "unknown";
        }
        else {
          int v22 = off_100498F80[v21];
        }
        size_t v28 = strlen(v22);
        if (v28 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v29 = v28;
        if (v28 >= 0x17)
        {
          uint64_t v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17) {
            uint64_t v34 = v28 | 7;
          }
          uint64_t v35 = v34 + 1;
          p_p = operator new(v34 + 1);
          size_t v44 = v29;
          unint64_t v45 = v35 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v45) = v28;
          p_p = &__p;
          if (!v28) {
            goto LABEL_54;
          }
        }
        memcpy(p_p, v22, v29);
LABEL_54:
        *((unsigned char *)p_p + v29) = 0;
        snprintf(__str, 0x12CuLL, "%-26s origin:%-8s stable:%s preference:%-7s rloc:0x%04x next_hop_is_host:%s nat64:%s", v6, v20);
        goto LABEL_60;
      }
    }
    memcpy(p_dst, v8, v13);
    goto LABEL_26;
  }
  IPv6Prefix::to_string(a2, v49);
  if (v50 >= 0) {
    int v9 = v49;
  }
  else {
    int v9 = (void **)v49[0];
  }
  uint64_t v10 = *(int *)this;
  if (v10 > 2) {
    uint64_t v11 = "unknown";
  }
  else {
    uint64_t v11 = off_100498F68[v10];
  }
  size_t v15 = strlen(v11);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v23 = v15 | 7;
    }
    uint64_t v24 = v23 + 1;
    size_t v17 = (void **)operator new(v23 + 1);
    size_t v47 = v16;
    int64_t v48 = v24 | 0x8000000000000000;
    __dst = v17;
    goto LABEL_34;
  }
  HIBYTE(v48) = v15;
  size_t v17 = (void **)&__dst;
  if (v15) {
LABEL_34:
  }
    memcpy(v17, v11, v16);
  *((unsigned char *)v17 + v16) = 0;
  if (v48 >= 0) {
    uint64_t v25 = (void **)&__dst;
  }
  else {
    uint64_t v25 = __dst;
  }
  unsigned int v26 = *((_DWORD *)this + 1) + 1;
  if (v26 > 2) {
    uint64_t v27 = "unknown";
  }
  else {
    uint64_t v27 = off_100498F80[v26];
  }
  size_t v31 = strlen(v27);
  if (v31 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v32 = v31;
  if (v31 >= 0x17)
  {
    uint64_t v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v36 = v31 | 7;
    }
    uint64_t v37 = v36 + 1;
    v33 = operator new(v36 + 1);
    size_t v44 = v32;
    unint64_t v45 = v37 | 0x8000000000000000;
    std::string __p = v33;
  }
  else
  {
    HIBYTE(v45) = v31;
    v33 = &__p;
    if (!v31) {
      goto LABEL_59;
    }
  }
  memcpy(v33, v27, v32);
LABEL_59:
  *((unsigned char *)v33 + v32) = 0;
  snprintf(__str, 0x12CuLL, "\"%s\", origin:%s, stable:%s, preference:%s, rloc:0x%04x, next_hop_is_host:%s, nat64:%s", v9, v25);
LABEL_60:
  if (SHIBYTE(v45) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
LABEL_62:
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_74;
    }
  }
  else if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(__dst);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_63:
    unint64_t result = strlen(__str);
    if (result <= 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_64;
    }
LABEL_75:
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_74:
  operator delete(v49[0]);
  unint64_t result = strlen(__str);
  if (result > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_75;
  }
LABEL_64:
  size_t v39 = result;
  if (result >= 0x17)
  {
    uint64_t v40 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v40 = result | 7;
    }
    uint64_t v41 = v40 + 1;
    char v42 = operator new(v40 + 1);
    a4[1] = v39;
    a4[2] = v41 | 0x8000000000000000;
    *a4 = v42;
    a4 = v42;
  }
  else
  {
    *((unsigned char *)a4 + 23) = result;
    if (!result) {
      goto LABEL_71;
    }
  }
  unint64_t result = (unint64_t)memcpy(a4, __str, v39);
LABEL_71:
  *((unsigned char *)a4 + v39) = 0;
  return result;
}

void sub_100160AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t InterfaceRouteEntry::get_description@<X0>(InterfaceRouteEntry *this@<X0>, const in6_addr *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (a3)
  {
    IPv6Prefix::to_string(a2, __p);
    if (v14 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    snprintf(__str, 0x12CuLL, "%-26s metric:%-6d", (const char *)v6, *(_DWORD *)this);
    if (v14 < 0) {
LABEL_11:
    }
      operator delete(__p[0]);
  }
  else
  {
    IPv6Prefix::to_string(a2, __p);
    if (v14 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    snprintf(__str, 0x12CuLL, "\"%s\", metric:%d", (const char *)v7, *(_DWORD *)this);
    if (v14 < 0) {
      goto LABEL_11;
    }
  }
  unint64_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v9 = result;
  if (result >= 0x17)
  {
    uint64_t v10 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v10 = result | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((unsigned char *)a4 + 23) = result;
    if (!result) {
      goto LABEL_20;
    }
  }
  unint64_t result = (unint64_t)memcpy(a4, __str, v9);
LABEL_20:
  *((unsigned char *)a4 + v9) = 0;
  return result;
}

void ServiceEntryBase::~ServiceEntryBase(ServiceEntryBase *this)
{
  *(void *)this = off_100498ED8;
  unsigned __int16 v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_100498ED8;
  unsigned __int16 v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  operator delete();
}

void otPlatReset(ot::Posix::Daemon *a1)
{
  gPlatResetReason = 2;
  otSysDeinit(a1);
  longjmp(gResetJump, 1);
}

void update_address_notification_timeout(void)
{
  *(unsigned char *)(RcpHostContext::sRcpHostContext
           + 960
           + 200 * (*(_DWORD *)(RcpHostContext::sRcpHostContext + 960) & 3)
           + 80) = 1;
}

uint64_t **update_sed_device_big_queue(unsigned __int16 a1)
{
  unsigned __int16 v2 = a1;
  return std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(RcpHostContext::sRcpHostContext + 960 + 200 * (*(_DWORD *)(RcpHostContext::sRcpHostContext + 960) & 3) + 88, &v2, &v2);
}

uint64_t **update_sed_device_last_heard(unsigned __int16 a1)
{
  unsigned __int16 v2 = a1;
  return std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(RcpHostContext::sRcpHostContext+ 960+ 200 * (*(_DWORD *)(RcpHostContext::sRcpHostContext + 960) & 3)+ 128, &v2, &v2);
}

uint64_t update_nm_security_info(uint64_t result, int a2)
{
  unsigned __int16 v2 = (unsigned char *)(RcpHostContext::sRcpHostContext + 200 * (*(_DWORD *)(RcpHostContext::sRcpHostContext + 960) & 3));
  if (result)
  {
    if (a2) {
      v2[1025] = 1;
    }
    else {
      v2[1024] = 1;
    }
  }
  else
  {
    v2[1026] = 1;
  }
  return result;
}

void ot_get_device_data(uint64_t a1)
{
  gettimeofday(&v7, &v6);
  __darwin_time_t tv_sec = v7.tv_sec;
  unint64_t v3 = gSoftwareUpdateTimeStampSec;
  if ((unint64_t)(v7.tv_sec - gSoftwareUpdateTimeStampSec) <= 0xE0F) {
    *(unsigned char *)(a1 + 1) |= 8u;
  }
  if (gDaemonStartTimeStampSec > v3 && (unint64_t)(tv_sec - gDaemonStartTimeStampSec) <= 0xE0F)
  {
    if (gDaemonStartByDeviceReboot) {
      char v4 = 2;
    }
    else {
      char v4 = 1;
    }
    *(unsigned char *)(a1 + 1) |= v4;
  }
  uint64_t v5 = RcpHostContext::sRcpHostContext;

  RcpHostContext::get_device_data(v5, a1);
}

void handle_rcp_reset(int a1)
{
}

void rcp_hard_reset(void)
{
}

void handle_captureABC(int a1)
{
  if (a1 > 111)
  {
    if (a1 != 112)
    {
      if (a1 != 15488)
      {
        if (a1 != 2000000) {
          return;
        }
        logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
        if (logging_obg)
        {
          char v4 = logging_obg;
          if (syslog_is_the_mask_enabled(2) && os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
            handle_captureABC();
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        uint64_t v13 = RcpHostContext::sRcpHostContext;
        char v51 = 11;
        strcpy(v50, "\nPerformance");
        strcpy((char *)v49, "Data Stall");
        size_t v47 = (char *)operator new(0x38uLL);
        long long v48 = xmmword_1003F6A80;
        strcpy(v47, "Continual denial from Wifi. Transmit not granted in RCP");
        RcpHostContext::captureABC(v13, (uint64_t)&v50[1], (uint64_t)v49, (uint64_t)&v47, 0, 0);
        if (SHIBYTE(v48) < 0)
        {
          operator delete(v47);
          if ((v50[0] & 0x80000000) == 0)
          {
LABEL_42:
            if ((v51 & 0x80000000) == 0) {
              return;
            }
            goto LABEL_73;
          }
        }
        else if ((v50[0] & 0x80000000) == 0)
        {
          goto LABEL_42;
        }
        operator delete(v49[0]);
        if ((v51 & 0x80000000) == 0) {
          return;
        }
LABEL_73:
        uint64_t v18 = &v50[1];
        goto LABEL_86;
      }
      uint64_t v11 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v11)
      {
        size_t v12 = v11;
        if (syslog_is_the_mask_enabled(2) && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          handle_captureABC();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        PcapManager::start_pcap_capture();
      }
      uint64_t v17 = RcpHostContext::sRcpHostContext;
      char v40 = 9;
      strcpy(v39, "Stability");
      char v38 = 13;
      strcpy((char *)v37, "Invalid State");
      uint64_t v35 = operator new(0x20uLL);
      long long v36 = xmmword_1003F2EA0;
      strcpy((char *)v35, "Corrupted RCP Vendor version");
      RcpHostContext::captureABC(v17, (uint64_t)v39, (uint64_t)v37, (uint64_t)&v35, 0, 0);
      if (SHIBYTE(v36) < 0)
      {
        operator delete(v35);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_66:
          if ((v40 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_85;
        }
      }
      else if ((v38 & 0x80000000) == 0)
      {
        goto LABEL_66;
      }
      operator delete(v37[0]);
      if ((v40 & 0x80000000) == 0) {
        return;
      }
LABEL_85:
      uint64_t v18 = v39;
      goto LABEL_86;
    }
    size_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9)
    {
      uint64_t v10 = v9;
      if (syslog_is_the_mask_enabled(2) && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        handle_captureABC();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    char v28 = 9;
    uint64_t v16 = RcpHostContext::sRcpHostContext;
    strcpy(v27, "Stability");
    HIBYTE(v26[2]) = 20;
    strcpy((char *)v26, "Stream Debug message");
    uint64_t v24 = operator new(0x20uLL);
    long long v25 = xmmword_1003F2EA0;
    strcpy((char *)v24, "STREAM_DEBUG during Radio Tx");
    RcpHostContext::captureABC(v16, (uint64_t)v27, (uint64_t)v26, (uint64_t)&v24, 0, 1);
    if (SHIBYTE(v25) < 0)
    {
      operator delete(v24);
      if ((SHIBYTE(v26[2]) & 0x80000000) == 0)
      {
LABEL_60:
        if ((v28 & 0x80000000) == 0) {
          return;
        }
        goto LABEL_79;
      }
    }
    else if ((SHIBYTE(v26[2]) & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(v26[0]);
    if ((v28 & 0x80000000) == 0) {
      return;
    }
LABEL_79:
    uint64_t v18 = v27;
    goto LABEL_86;
  }
  if (a1 == 2)
  {
    uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v5)
    {
      char v6 = v5;
      if (syslog_is_the_mask_enabled(2) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        handle_captureABC();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    uint64_t v14 = RcpHostContext::sRcpHostContext;
    char v34 = 9;
    strcpy(v33, "Stability");
    char v32 = 13;
    strcpy((char *)v31, "Invalid State");
    size_t v29 = operator new(0x20uLL);
    long long v30 = xmmword_1003F2BE0;
    strcpy((char *)v29, "EMERG/ALERT/CRIT RCP log");
    RcpHostContext::captureABC(v14, (uint64_t)v33, (uint64_t)v31, (uint64_t)&v29, 0, 1);
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v29);
      if ((v32 & 0x80000000) == 0)
      {
LABEL_48:
        if ((v34 & 0x80000000) == 0) {
          return;
        }
        goto LABEL_76;
      }
    }
    else if ((v32 & 0x80000000) == 0)
    {
      goto LABEL_48;
    }
    operator delete(v31[0]);
    if ((v34 & 0x80000000) == 0) {
      return;
    }
LABEL_76:
    uint64_t v18 = v33;
    goto LABEL_86;
  }
  if (a1 == 3)
  {
    timeval v7 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v7)
    {
      uint64_t v8 = v7;
      if (syslog_is_the_mask_enabled(2) && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        handle_captureABC();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    uint64_t v15 = RcpHostContext::sRcpHostContext;
    char v46 = 9;
    strcpy(v45, "Stability");
    char v44 = 13;
    strcpy((char *)v43, "Invalid State");
    uint64_t v41 = (char *)operator new(0x20uLL);
    long long v42 = xmmword_1003F3010;
    strcpy(v41, "RCP Status Invalid Argument");
    RcpHostContext::captureABC(v15, (uint64_t)v45, (uint64_t)v43, (uint64_t)&v41, 0, 1);
    if (SHIBYTE(v42) < 0)
    {
      operator delete(v41);
      if ((v44 & 0x80000000) == 0)
      {
LABEL_54:
        if ((v46 & 0x80000000) == 0) {
          return;
        }
        goto LABEL_82;
      }
    }
    else if ((v44 & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(v43[0]);
    if ((v46 & 0x80000000) == 0) {
      return;
    }
LABEL_82:
    uint64_t v18 = v45;
    goto LABEL_86;
  }
  if (a1 != 4) {
    return;
  }
  uint64_t v1 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v1)
  {
    unsigned __int16 v2 = v1;
    if (syslog_is_the_mask_enabled(2))
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        handle_captureABC();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  char v23 = 9;
  strcpy(v22, "Stability");
  HIBYTE(v21[2]) = 17;
  strcpy((char *)v21, "RCP Invalid State");
  char v20 = 17;
  strcpy(__p, "RCP Invalid State");
  RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)v22, (uint64_t)v21, (uint64_t)__p, 0, 0);
  if (v20 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
    {
LABEL_36:
      if ((v23 & 0x80000000) == 0) {
        return;
      }
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v21[0]);
  if (v23 < 0)
  {
LABEL_70:
    uint64_t v18 = v22;
LABEL_86:
    operator delete(*(void **)v18);
  }
}

void sub_100161800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v43 - 201) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v43 - 177) & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(*(void **)(v43 - 200));
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v43 - 201) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 224));
  if ((*(char *)(v43 - 177) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void handle_settings_captureABC(char a1, int a2)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v5 = logging_obg;
    if (syslog_is_the_mask_enabled(2))
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        handle_settings_captureABC(a1, a2, v5);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  char v11 = 9;
  strcpy((char *)v10, "Stability");
  char v9 = 13;
  strcpy((char *)v8, "Invalid State");
  char v7 = 21;
  strcpy(__p, "write syscall failure");
  RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)v10, (uint64_t)v8, (uint64_t)__p, 0, 0);
  if (v7 < 0)
  {
    operator delete(*(void **)__p);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v11 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10[0]);
      return;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v8[0]);
  if (v11 < 0) {
    goto LABEL_13;
  }
}

void sub_100161B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

void ptb_bandedge_captureABC_Failure(int a1)
{
  switch(a1)
  {
    case 0:
      char v20 = 11;
      strcpy(v19, "\tPerformance");
      strcpy((char *)v18, "PTB Error");
      char v17 = 13;
      strcpy((char *)v16, "PTB Not Found");
      RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)&v19[1], (uint64_t)v18, (uint64_t)v16, 0, 0);
      if (v17 < 0)
      {
        operator delete(v16[0]);
        if ((v19[0] & 0x80000000) == 0)
        {
LABEL_4:
          if ((v20 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_26;
        }
      }
      else if ((v19[0] & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(v18[0]);
      if ((v20 & 0x80000000) == 0) {
        return;
      }
LABEL_26:
      operator delete(*(void **)&v19[1]);
      return;
    case 1:
      char v15 = 11;
      strcpy(v14, "\tPerformance");
      strcpy((char *)v13, "PTB Error");
      char v12 = 14;
      strcpy((char *)v11, "PTB Read Empty");
      RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)&v14[1], (uint64_t)v13, (uint64_t)v11, 0, 0);
      if (v12 < 0)
      {
        operator delete(v11[0]);
        if ((v14[0] & 0x80000000) == 0)
        {
LABEL_16:
          if ((v15 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_29;
        }
      }
      else if ((v14[0] & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(v13[0]);
      if ((v15 & 0x80000000) == 0) {
        return;
      }
LABEL_29:
      operator delete(*(void **)&v14[1]);
      return;
    case 2:
      char v10 = 11;
      strcpy(v9, "\tPerformance");
      strcpy((char *)v8, "PTB Error");
      char v7 = 17;
      strcpy(__p, "PTB Load  Failure");
      RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)&v9[1], (uint64_t)v8, (uint64_t)__p, 0, 0);
      if (v7 < 0)
      {
        operator delete(*(void **)__p);
        if ((v9[0] & 0x80000000) == 0)
        {
LABEL_8:
          if (v10 < 0) {
            goto LABEL_20;
          }
          return;
        }
      }
      else if ((v9[0] & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(v8[0]);
      if (v10 < 0)
      {
LABEL_20:
        operator delete(*(void **)&v9[1]);
        return;
      }
      return;
    case 3:
      char v5 = 11;
      strcpy((char *)v4, "Performance");
      char v3 = 14;
      strcpy((char *)v2, "BANDEDGE Error");
      strcpy((char *)v1, "BANDEDGE Load  Failure");
      HIBYTE(v1[2]) = 22;
      RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)v4, (uint64_t)v2, (uint64_t)v1, 0, 0);
      if (SHIBYTE(v1[2]) < 0)
      {
        operator delete(v1[0]);
        if ((v3 & 0x80000000) == 0)
        {
LABEL_12:
          if ((v5 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_23;
        }
      }
      else if ((v3 & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v2[0]);
      if ((v5 & 0x80000000) == 0) {
        return;
      }
LABEL_23:
      operator delete(v4[0]);
      return;
    default:
      return;
  }
}

void sub_100161FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v52 - 113) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 89) & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)(v52 - 112));
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v52 - 113) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v52 - 136));
  if ((*(char *)(v52 - 89) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void handle_host_reset_dueto_rcp_captureABC(void)
{
  size_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  getBTFWCrashDumpPath((uint64_t)&v31);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if (HIBYTE(v33)) {
      goto LABEL_3;
    }
LABEL_10:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
        handle_host_reset_dueto_rcp_captureABC(logging_obg, v7, v8, v9, v10, v11, v12, v13);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    uint64_t v17 = RcpHostContext::sRcpHostContext;
    char v24 = 9;
    strcpy((char *)v23, "Stability");
    unsigned int v21 = (char *)operator new(0x20uLL);
    long long v22 = xmmword_1003F3010;
    strcpy(v21, "RCP with shared Thread & BT");
    uint64_t v19 = (char *)operator new(0x28uLL);
    long long v20 = xmmword_1003F2E20;
    strcpy(v19, "RCP Firmware Reset triggers host reset");
    RcpHostContext::captureABC(v17, (uint64_t)v23, (uint64_t)&v21, (uint64_t)&v19, 0, 0);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(v19);
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
LABEL_34:
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_39;
      }
    }
    else if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v21);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_35:
      if (SHIBYTE(v33) < 0) {
        goto LABEL_25;
      }
      return;
    }
LABEL_39:
    operator delete(v23[0]);
    if (SHIBYTE(v33) < 0) {
      goto LABEL_25;
    }
    return;
  }
  if (!v32) {
    goto LABEL_10;
  }
LABEL_3:
  __chkstk_darwin(v0, v1);
  char v3 = (char *)&v18 - ((v2 + 16) & 0xFFFFFFFFFFFFFFF0);
  char v4 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v4)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      char v5 = (void **)&v31;
      if (v33 < 0) {
        char v5 = v31;
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v35 = "handle_host_reset_dueto_rcp_captureABC";
      __int16 v36 = 2080;
      uint64_t v37 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s: Raise ABC with latest FW crash dump filePath: %s", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  uint64_t v14 = HIBYTE(v33);
  if (v33 >= 0) {
    char v15 = (const char *)&v31;
  }
  else {
    char v15 = (const char *)v31;
  }
  if (v33 < 0) {
    uint64_t v14 = v32;
  }
  strncpy(v3, v15, v14 + 1);
  uint64_t v16 = RcpHostContext::sRcpHostContext;
  char v30 = 9;
  strcpy((char *)v29, "Stability");
  uint64_t v27 = (char *)operator new(0x20uLL);
  long long v28 = xmmword_1003F3010;
  strcpy(v27, "RCP with shared Thread & BT");
  long long v25 = (char *)operator new(0x28uLL);
  long long v26 = xmmword_1003F2E20;
  strcpy(v25, "RCP Firmware Reset triggers host reset");
  RcpHostContext::captureABC(v16, (uint64_t)v29, (uint64_t)&v27, (uint64_t)&v25, (uint64_t)v3, 0);
  if (SHIBYTE(v26) < 0)
  {
    operator delete(v25);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_23:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_24;
      }
LABEL_28:
      operator delete(v29[0]);
      if (SHIBYTE(v33) < 0) {
        goto LABEL_25;
      }
      return;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v27);
  if (v30 < 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (SHIBYTE(v33) < 0) {
LABEL_25:
  }
    operator delete(v31);
}

void sub_100162508(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 209) < 0)
  {
    operator delete(*(void **)(v1 - 232));
    if (*(char *)(v1 - 185) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v1 - 208));
      if ((*(char *)(v1 - 161) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(v1 - 65) < 0) {
          operator delete(*(void **)(v1 - 88));
        }
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(*(void **)(v1 - 184));
      goto LABEL_9;
    }
  }
  else if (*(char *)(v1 - 185) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v1 - 161) & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

uint64_t buffer_threshold_captureABC_timeout(void)
{
  gettimeofday(&v2, &v1);
  if (byte_1004FC30A == 1 && v2.tv_sec < qword_1004FC310 + 3600) {
    return 0;
  }
  qword_1004FC310 = v2.tv_sec;
  uint64_t result = 1;
  byte_1004FC30A = 1;
  return result;
}

void handle_ot_buffer_threshold_captureABC(void)
{
  gettimeofday(&v8, &v7);
  if (byte_1004FC30A != 1 || v8.tv_sec >= qword_1004FC310 + 3600)
  {
    qword_1004FC310 = v8.tv_sec;
    byte_1004FC30A = 1;
    uint64_t v0 = RcpHostContext::sRcpHostContext;
    char v6 = 11;
    strcpy((char *)v5, "Performance");
    char v4 = 12;
    strcpy((char *)v3, "Buffer Error");
    std::string __p = operator new(0x20uLL);
    long long v2 = xmmword_1003F2F00;
    strcpy((char *)__p, "Buffer threshold limit reached");
    RcpHostContext::captureABC(v0, (uint64_t)v5, (uint64_t)v3, (uint64_t)&__p, 0, 1);
    if (SHIBYTE(v2) < 0)
    {
      operator delete(__p);
      if ((v4 & 0x80000000) == 0)
      {
LABEL_5:
        if ((v6 & 0x80000000) == 0) {
          return;
        }
LABEL_9:
        operator delete(v5[0]);
        return;
      }
    }
    else if ((v4 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v3[0]);
    if (v6 < 0) {
      goto LABEL_9;
    }
  }
}

void sub_1001627E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a21);
  _Unwind_Resume(exception_object);
}

void handle_getnextframe_captureABC(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v1 = logging_obg;
    if (syslog_is_the_mask_enabled(3))
    {
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        handle_getnextframe_captureABC();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  uint64_t v2 = RcpHostContext::sRcpHostContext;
  char v8 = 9;
  strcpy((char *)v7, "Stability");
  char v6 = 13;
  strcpy((char *)v5, "Invalid State");
  std::string __p = operator new(0x20uLL);
  long long v4 = xmmword_1003F2EE0;
  strcpy((char *)__p, "Get Next Saved Frame Error");
  RcpHostContext::captureABC(v2, (uint64_t)v7, (uint64_t)v5, (uint64_t)&__p, 0, 0);
  if (SHIBYTE(v4) < 0)
  {
    operator delete(__p);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v8 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v7[0]);
      return;
    }
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v5[0]);
  if (v8 < 0) {
    goto LABEL_13;
  }
}

void sub_1001629B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void handle_hdlc_waitforframe_captureABC(uint64_t a1)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v3 = logging_obg;
    if (syslog_is_the_mask_enabled(3))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        handle_hdlc_waitforframe_captureABC(a1, v3, v4, v5, v6, v7, v8, v9);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  uint64_t v10 = RcpHostContext::sRcpHostContext;
  char v16 = 9;
  strcpy((char *)v15, "Stability");
  char v14 = 13;
  strcpy((char *)v13, "Invalid State");
  std::string __p = operator new(0x28uLL);
  long long v12 = xmmword_1003F3090;
  strcpy((char *)__p, "HDLC select fail on waitforframe");
  RcpHostContext::captureABC(v10, (uint64_t)v15, (uint64_t)v13, (uint64_t)&__p, 0, 0);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__p);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v16 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v13[0]);
  if (v16 < 0) {
    goto LABEL_13;
  }
}

void sub_100162B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void handle_hdlc_write_captureABC(uint64_t a1)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v3 = logging_obg;
    if (syslog_is_the_mask_enabled(3))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        handle_hdlc_write_captureABC(a1, v3, v4, v5, v6, v7, v8, v9);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  char v15 = 9;
  strcpy((char *)v14, "Stability");
  char v13 = 13;
  strcpy((char *)v12, "Invalid State");
  char v11 = 18;
  strcpy(__p, "HDLC fail on write");
  RcpHostContext::captureABC(RcpHostContext::sRcpHostContext, (uint64_t)v14, (uint64_t)v12, (uint64_t)__p, 0, 0);
  if (v11 < 0)
  {
    operator delete(*(void **)__p);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v15 & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v14[0]);
      return;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v12[0]);
  if (v15 < 0) {
    goto LABEL_13;
  }
}

void sub_100162D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

BOOL pcap_enabled(void)
{
  char v6 = 15;
  strcpy((char *)__p, "NCP:PcapEnabled");
  uint64_t v7 = __p;
  uint64_t v0 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7);
  char v1 = v0 + 7;
  int v2 = *((char *)v0 + 79);
  if (v2 < 0)
  {
    if (v0[8] != (uint64_t *)4) {
      goto LABEL_8;
    }
    char v1 = (void *)*v1;
  }
  else if (v2 != 4)
  {
LABEL_8:
    BOOL v3 = 0;
    if ((v6 & 0x80000000) == 0) {
      return v3;
    }
LABEL_7:
    operator delete(__p[0]);
    return v3;
  }
  BOOL v3 = *(_DWORD *)v1 == 1702195828;
  if (v6 < 0) {
    goto LABEL_7;
  }
  return v3;
}

void sub_100162E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL promiscuous_enabled(void)
{
  strcpy(__p, "Daemon:PromiscuousPcap");
  char v6 = 22;
  uint64_t v7 = __p;
  uint64_t v0 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7);
  char v1 = v0 + 7;
  int v2 = *((char *)v0 + 79);
  if (v2 < 0)
  {
    if (v0[8] != (uint64_t *)4) {
      goto LABEL_8;
    }
    char v1 = (void *)*v1;
  }
  else if (v2 != 4)
  {
LABEL_8:
    BOOL v3 = 0;
    if ((v6 & 0x80000000) == 0) {
      return v3;
    }
LABEL_7:
    operator delete(*(void **)__p);
    return v3;
  }
  BOOL v3 = *(_DWORD *)v1 == 1702195828;
  if (v6 < 0) {
    goto LABEL_7;
  }
  return v3;
}

void sub_100162F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t handle_daemon_exit(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v1 = logging_obg;
    if (!syslog_is_the_mask_enabled(3) || !os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      goto LABEL_4;
    }
    handle_daemon_exit();
    setDaemonExit();
    return delete_xpc_server();
  }
  else
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      setDaemonExit();
      return delete_xpc_server();
    }
    PcapManager::start_pcap_capture();
    setDaemonExit();
    return delete_xpc_server();
  }
}

unint64_t init_spinel_read_time(void)
{
  unint64_t result = otPlatTimeGet();
  time_last_read = result;
  time_last_diff = 0;
  time_count = 0;
  return result;
}

unint64_t calc_spinel_read_time(void)
{
  if (time_count == -2)
  {
    time_last_read = otPlatTimeGet();
    time_last_diff = 0;
    time_count = 0;
  }
  unint64_t result = otPlatTimeGet();
  time_last_diff = result - time_last_read;
  time_last_read = result;
  ++time_count;
  return result;
}

unint64_t init_handleframe_read_time(void)
{
  unint64_t result = otPlatTimeGet();
  handleframe_time_last_read = result;
  handleframe_time_last_diff = 0;
  handleframe_time_count = 0;
  return result;
}

unint64_t calc_handleframe_read_time(void)
{
  if (handleframe_time_count == -2)
  {
    handleframe_time_last_read = otPlatTimeGet();
    handleframe_time_last_diff = 0;
    handleframe_time_count = 0;
  }
  unint64_t result = otPlatTimeGet();
  handleframe_time_last_diff = result - handleframe_time_last_read;
  handleframe_time_last_read = result;
  ++handleframe_time_count;
  return result;
}

unint64_t init_handlenote_read_time(void)
{
  unint64_t result = otPlatTimeGet();
  handlenote_time_last_read = result;
  handlenote_time_last_diff = 0;
  handlenote_time_count = 0;
  return result;
}

unint64_t calc_handlenote_read_time(void)
{
  if (handlenote_time_count == -2)
  {
    handlenote_time_last_read = otPlatTimeGet();
    handlenote_time_last_diff = 0;
    handlenote_time_count = 0;
  }
  unint64_t result = otPlatTimeGet();
  handlenote_time_last_diff = result - handlenote_time_last_read;
  handlenote_time_last_read = result;
  ++handlenote_time_count;
  return result;
}

void get_host_rcp_setting_params(signed __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, BOOL *a4, unsigned int *a5, unsigned int *a6, BOOL *a7, BOOL *a8, signed __int8 *a9, unsigned __int8 *a10, unsigned __int8 *a11, unsigned __int8 *a12, unsigned __int8 *a13, unsigned __int8 *a14)
{
}

long long *check_host_reset_dueto_rcp(void)
{
  unint64_t result = getStringValue("vendor:trigger:abc");
  if (result) {
    return (long long *)(atoi((const char *)result) != 0);
  }
  return result;
}

void host_clear_health_metrics(void)
{
}

void host_crash_dump_collection(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v1 = logging_obg;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      host_crash_dump_collection();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  StringValue = getStringValue("vendor:trigger:abc");
  if (StringValue && atoi((const char *)StringValue))
  {
    BOOL v3 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v3)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          int v5 = 136315138;
          char v6 = "host_crash_dump_collection";
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s FW crash occured earlier, Update Health Info Stability Counters", (uint8_t *)&v5, 0xCu);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    persist_host_reset_dueto_rcp();
  }
  uint64_t v4 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v4)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      char v6 = "host_crash_dump_collection";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s No FW crash occured earlier, Health Info is already updated", (uint8_t *)&v5, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void persist_host_reset_dueto_rcp()
{
}

void sub_1001639EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void resetThreadWedSession(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v1 = logging_obg;
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      resetThreadWedSession();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  saveStringValue("threadSession", "OFF");
  saveStringValue("threadSessionJoin", "OFF");
  saveStringValue("wedSession", "");
  saveStringValue("wedSession_mleid", "");
}

BOOL processHostSystemStartActionsBasedOnTime(unint64_t a1)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  BOOL v3 = logging_obg;
  if (a1 >= 0x2E)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        processHostSystemStartActionsBasedOnTime();
        return a1 < 0x2E;
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
      return a1 < 0x2E;
    }
    return a1 < 0x2E;
  }
  if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      processHostSystemStartActionsBasedOnTime();
      resetThreadWedSession();
      return a1 < 0x2E;
    }
    goto LABEL_11;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
LABEL_11:
    resetThreadWedSession();
    return a1 < 0x2E;
  }
  PcapManager::start_pcap_capture();
  resetThreadWedSession();
  return a1 < 0x2E;
}

uint64_t processHostSystemStartActions(unint64_t a1)
{
  memset(uu, 0, sizeof(uu));
  *(_OWORD *)in = 0u;
  memset(v17, 0, sizeof(v17));
  size_t v15 = 37;
  if (sysctlbyname("kern.bootsessionuuid", in, &v15, 0, 0))
  {
LABEL_2:
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      BOOL v3 = logging_obg;
      if (syslog_is_the_mask_enabled(3))
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          processHostSystemStartActions();
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    return processHostSystemStartActionsBasedOnTime(a1);
  }
  int v4 = uuid_parse(in, uu);
  int v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  char v6 = v5;
  if (v4)
  {
    if (v5)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        processHostSystemStartActions();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    goto LABEL_2;
  }
  if (v5)
  {
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      processHostSystemStartActions();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  StringValue = getStringValue("boot_uuid");
  uint64_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v10 = v9;
  if (!StringValue)
  {
    if (v9)
    {
      if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        processHostSystemStartActions();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
    }
    saveStringValue("boot_uuid", in);
    goto LABEL_2;
  }
  if (!v9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      PcapManager::start_pcap_capture();
      if (!strcmp((const char *)StringValue, in)) {
        goto LABEL_46;
      }
      goto LABEL_35;
    }
LABEL_34:
    if (!strcmp((const char *)StringValue, in)) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  if (!syslog_is_the_mask_enabled(4) || !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    goto LABEL_34;
  }
  processHostSystemStartActions();
  if (!strcmp((const char *)StringValue, in))
  {
LABEL_46:
    char v13 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v13)
    {
      char v14 = v13;
      uint64_t result = syslog_is_the_mask_enabled(4);
      if (result)
      {
        uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
        if (result)
        {
          processHostSystemStartActions();
          return 0;
        }
      }
    }
    else
    {
      uint64_t result = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (result)
      {
        PcapManager::start_pcap_capture();
        return 0;
      }
    }
    return result;
  }
LABEL_35:
  saveStringValue("boot_uuid", in);
  char v11 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v11)
  {
    long long v12 = v11;
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      processHostSystemStartActions();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  resetThreadWedSession();
  return 1;
}

void get_time_string(unint64_t a1, char *__str, size_t __size)
{
  unsigned int v3 = __size;
  int v5 = a1 % 0x3E8;
  if (a1 <= 0xE3C7A73400)
  {
    snprintf(__str, __size, "[%s.%03d]", " ", a1 % 0x3E8);
    return;
  }
  CFDateRef v6 = CFDateCreate(kCFAllocatorDefault, (double)((a1 - 978307200000) / 0x3E8));
  CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(kCFAllocatorDefault, (CFDateFormatterRef)gDateFormatter, v6);
  if (StringWithDate)
  {
    CFStringRef v8 = StringWithDate;
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    CStringPtr = CFStringGetCStringPtr(v8, SystemEncoding);
    snprintf(__str, v3, "[%s.%03d]", CStringPtr, v5);
    if (v6) {
      CFRelease(v6);
    }
    char v11 = v8;
  }
  else
  {
    snprintf(__str, v3, "[%s.%03d]", " ", v5);
    if (!v6) {
      return;
    }
    char v11 = v6;
  }

  CFRelease(v11);
}

void persist_num_mle_adv()
{
}

void sub_100164378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_csl_request_ahead()
{
}

void sub_1001645EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v25 = *(void *)(v23 - 64);
      if (!v25) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v23 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v23 - 56));
  uint64_t v25 = *(void *)(v23 - 64);
  if (!v25) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_virtual_interface_readbuffersize()
{
}

void sub_100164868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_tx_power()
{
}

void sub_100164AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = a16;
      if (!a16) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  uint64_t v23 = a16;
  if (!a16) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_thread_device_mode(const std::string *a1)
{
  BYTE7(v5[2]) = 17;
  strcpy((char *)v5, "Thread:DeviceModThread:DeviceMode");
  CFDateRef v6 = &v5[1];
  int v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v5[1], (uint64_t)&std::piecewise_construct, &v6);
  std::string::operator=((std::string *)(v2 + 7), a1);
  if (SBYTE7(v5[2]) < 0) {
    operator delete(*(void **)&v5[1]);
  }
  BYTE7(v5[2]) = 17;
  v5[1] = v5[0];
  strcpy((char *)&v5[2], "e");
  CFDateRef v6 = &v5[1];
  unsigned int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v5[1], (uint64_t)&std::piecewise_construct, &v6);
  int v4 = (const char *)(v3 + 7);
  if (*((char *)v3 + 79) < 0) {
    int v4 = *(const char **)v4;
  }
  saveStringValue("Thread:DeviceMode", v4);
  if (SBYTE7(v5[2]) < 0) {
    operator delete(*(void **)&v5[1]);
  }
}

void sub_100164C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void persist_timelinelog_level()
{
}

void sub_100164E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v20 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v22 = a20;
      if (!a20) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v20 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v20 - 56));
  uint64_t v22 = a20;
  if (!a20) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_rssi_offset()
{
}

void sub_1001650AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_tpc_mode()
{
}

void sub_1001652E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = a16;
      if (!a16) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  uint64_t v23 = a16;
  if (!a16) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_coex_rxmode()
{
}

void sub_10016553C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_coex_rxthresholdLowerBound()
{
}

void sub_1001657B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_coex_rxthresholdUpperBound()
{
}

void sub_100165A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_radio_path_mode()
{
}

void sub_100165C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_coex_txmode()
{
}

void sub_100165EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_coex_enabled()
{
}

void sub_100166134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_csma_cca_idle_attempts()
{
}

void sub_1001663A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_ifs_ackturnaround_time()
{
}

void sub_10016662C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_ifs_ackturnaround_mode()
{
}

void sub_1001668B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_ifs_ackturnaround_enable()
{
}

void sub_100166B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_interframe_delay()
{
}

void sub_100166DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_pcap_enabled()
{
}

void sub_100167018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = a16;
      if (!a16) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  uint64_t v23 = a16;
  if (!a16) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void persist_promiscuous_pcap_enabled()
{
}

void sub_100167258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void reset_awd_stability_counters(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v1 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      LOWORD(v38[1]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "reset_awd_stability_counters: reset stability counters\n", (uint8_t *)&v38[1], 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  xmmword_1004B6018 = 0u;
  xmmword_1004B6028 = 0u;
  xmmword_1004B5FF8 = 0u;
  xmmword_1004B6008 = 0u;
  xmmword_1004B5FD8 = 0u;
  xmmword_1004B5FE8 = 0u;
  stability_settings = 0u;
  BYTE7(v38[2]) = 13;
  strcpy((char *)&v38[1], "fault_address");
  size_t v39 = &v38[1];
  int v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v2 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 13;
  strcpy((char *)&v38[1], "fault_address");
  size_t v39 = &v38[1];
  unsigned int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  int v4 = (const char *)(v3 + 7);
  if (*((char *)v3 + 79) < 0) {
    int v4 = *(const char **)v4;
  }
  saveStringValue("fault_address", v4);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 10;
  strcpy((char *)&v38[1], "fault_line");
  size_t v39 = &v38[1];
  int v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v5 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 10;
  strcpy((char *)&v38[1], "fault_line");
  size_t v39 = &v38[1];
  CFDateRef v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  uint64_t v7 = (const char *)(v6 + 7);
  if (*((char *)v6 + 79) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  saveStringValue("fault_line", v7);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 15;
  strcpy((char *)&v38[1], "fault_random_id");
  size_t v39 = &v38[1];
  CFStringRef v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v8 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 15;
  strcpy((char *)&v38[1], "fault_random_id");
  size_t v39 = &v38[1];
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  uint64_t v10 = (const char *)(v9 + 7);
  if (*((char *)v9 + 79) < 0) {
    uint64_t v10 = *(const char **)v10;
  }
  saveStringValue("fault_random_id", v10);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 16;
  strcpy((char *)v38, "fault_crash_typefault_crash_type");
  size_t v39 = &v38[1];
  char v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v11 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 16;
  v38[1] = v38[0];
  LOBYTE(v38[2]) = 0;
  size_t v39 = &v38[1];
  long long v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  char v13 = (const char *)(v12 + 7);
  if (*((char *)v12 + 79) < 0) {
    char v13 = *(const char **)v13;
  }
  saveStringValue("fault_crash_type", v13);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 17;
  strcpy((char *)v38, "fault_crash_counfault_crash_count");
  size_t v39 = &v38[1];
  char v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v14 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 17;
  v38[1] = v38[0];
  strcpy((char *)&v38[2], "t");
  size_t v39 = &v38[1];
  size_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  char v16 = (const char *)(v15 + 7);
  if (*((char *)v15 + 79) < 0) {
    char v16 = *(const char **)v16;
  }
  saveStringValue("fault_crash_count", v16);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 16;
  strcpy((char *)v38, "fault_num_resetsfault_num_resets");
  size_t v39 = &v38[1];
  uint64_t v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v17 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 16;
  v38[1] = v38[0];
  LOBYTE(v38[2]) = 0;
  size_t v39 = &v38[1];
  uint64_t v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  uint64_t v19 = (const char *)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    uint64_t v19 = *(const char **)v19;
  }
  saveStringValue("fault_num_resets", v19);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 17;
  strcpy((char *)v38, "fault_num_assertfault_num_asserts");
  size_t v39 = &v38[1];
  uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v20 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 17;
  v38[1] = v38[0];
  strcpy((char *)&v38[2], "s");
  size_t v39 = &v38[1];
  uint64_t v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  uint64_t v22 = (const char *)(v21 + 7);
  if (*((char *)v21 + 79) < 0) {
    uint64_t v22 = *(const char **)v22;
  }
  saveStringValue("fault_num_asserts", v22);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 21;
  strcpy((char *)v38, "fault_num_hard_ffault_num_hard_faults");
  size_t v39 = &v38[1];
  uint64_t v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v23 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 21;
  v38[1] = v38[0];
  strcpy((char *)&v38[1] + 13, "d_faults");
  size_t v39 = &v38[1];
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  uint64_t v25 = (const char *)(v24 + 7);
  if (*((char *)v24 + 79) < 0) {
    uint64_t v25 = *(const char **)v25;
  }
  saveStringValue("fault_num_hard_faults", v25);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  *(void *)&v38[1] = operator new(0x20uLL);
  v38[0] = xmmword_1003F3000;
  *(_OWORD *)((char *)&v38[1] + 8) = xmmword_1003F3000;
  strcpy(*(char **)&v38[1], "fault_num_stack_overflows");
  qmemcpy(v37, "_stack_overflowsfault_num_stack_", sizeof(v37));
  size_t v39 = &v38[1];
  long long v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v26 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  uint64_t v27 = (char *)operator new(0x20uLL);
  *(void *)&v38[1] = v27;
  *(_OWORD *)((char *)&v38[1] + 8) = v38[0];
  *(_OWORD *)uint64_t v27 = v37[1];
  *(_OWORD *)(v27 + 9) = v37[0];
  v27[25] = 0;
  size_t v39 = &v38[1];
  long long v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  size_t v29 = (const char *)(v28 + 7);
  if (*((char *)v28 + 79) < 0) {
    size_t v29 = *(const char **)v29;
  }
  saveStringValue("fault_num_stack_overflows", v29);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  *(void *)&v38[1] = operator new(0x19uLL);
  v38[0] = xmmword_1003F2EB0;
  *(_OWORD *)((char *)&v38[1] + 8) = xmmword_1003F2EB0;
  v37[1] = *(_OWORD *)"fault_num_crash_unknown";
  strcpy(*(char **)&v38[1], "fault_num_crash_unknown");
  size_t v39 = &v38[1];
  char v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v30 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  size_t v31 = (char *)operator new(0x19uLL);
  *(void *)&v38[1] = v31;
  *(_OWORD *)((char *)&v38[1] + 8) = v38[0];
  *(_OWORD *)size_t v31 = v37[1];
  strcpy(v31 + 15, "_unknown");
  size_t v39 = &v38[1];
  uint64_t v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  uint64_t v33 = (const char *)(v32 + 7);
  if (*((char *)v32 + 79) < 0) {
    uint64_t v33 = *(const char **)v33;
  }
  saveStringValue("fault_num_crash_unknown", v33);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 16;
  strcpy((char *)v38, "fault_time_stampfault_time_stamp");
  size_t v39 = &v38[1];
  char v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  std::string::assign((std::string *)(v34 + 7), "0");
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
  BYTE7(v38[2]) = 16;
  v38[1] = v38[0];
  LOBYTE(v38[2]) = 0;
  size_t v39 = &v38[1];
  uint64_t v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v38[1], (uint64_t)&std::piecewise_construct, &v39);
  __int16 v36 = (const char *)(v35 + 7);
  if (*((char *)v35 + 79) < 0) {
    __int16 v36 = *(const char **)v36;
  }
  saveStringValue("fault_time_stamp", v36);
  if (SBYTE7(v38[2]) < 0) {
    operator delete(*(void **)&v38[1]);
  }
}

void sub_100167D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void restore_awd_stablity_counters(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v1 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "restore_awd_stablity_counters called\n", (uint8_t *)__p, 2u);
      StringValue = getStringValue("fault_num_resets");
      if (!StringValue) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
LABEL_7:
    StringValue = getStringValue("fault_num_resets");
    if (!StringValue) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    goto LABEL_7;
  }
  PcapManager::start_pcap_capture();
  StringValue = getStringValue("fault_num_resets");
  if (!StringValue) {
    goto LABEL_10;
  }
LABEL_8:
  unsigned int v3 = (const std::string::value_type *)StringValue;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "fault_num_resets");
  uint64_t v21 = __p;
  int v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
  std::string::assign((std::string *)(v4 + 7), v3);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_10:
  int v5 = getStringValue("fault_num_asserts");
  if (v5
    && (CFDateRef v6 = (const std::string::value_type *)v5,
        HIBYTE(__p[2]) = 17,
        strcpy((char *)__p, "fault_num_asserts"),
        uint64_t v21 = __p,
        uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21), std::string::assign((std::string *)(v7 + 7), v6), SHIBYTE(__p[2]) < 0))
  {
    operator delete(__p[0]);
    CFStringRef v8 = getStringValue("fault_num_hard_faults");
    if (!v8) {
      goto LABEL_16;
    }
  }
  else
  {
    CFStringRef v8 = getStringValue("fault_num_hard_faults");
    if (!v8) {
      goto LABEL_16;
    }
  }
  uint64_t v9 = (const std::string::value_type *)v8;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "fault_num_hard_faults");
  uint64_t v21 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
  std::string::assign((std::string *)(v10 + 7), v9);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_16:
  char v11 = getStringValue("fault_num_stack_overflows");
  if (v11
    && (long long v12 = (const std::string::value_type *)v11,
        __p[0] = operator new(0x20uLL),
        *(_OWORD *)&__p[1] = xmmword_1003F3000,
        strcpy((char *)__p[0], "fault_num_stack_overflows"),
        uint64_t v21 = __p,
        char v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21), std::string::assign((std::string *)(v13 + 7), v12), SHIBYTE(__p[2]) < 0))
  {
    operator delete(__p[0]);
    char v14 = getStringValue("fault_num_crash_unknown");
    if (!v14) {
      goto LABEL_22;
    }
  }
  else
  {
    char v14 = getStringValue("fault_num_crash_unknown");
    if (!v14) {
      goto LABEL_22;
    }
  }
  size_t v15 = (const std::string::value_type *)v14;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1003F2EB0;
  strcpy((char *)__p[0], "fault_num_crash_unknown");
  uint64_t v21 = __p;
  char v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
  std::string::assign((std::string *)(v16 + 7), v15);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_22:
  uint64_t v17 = getStringValue("fault_time_stamp");
  if (v17)
  {
    uint64_t v18 = (const std::string::value_type *)v17;
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "fault_time_stamp");
    uint64_t v21 = __p;
    uint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
    std::string::assign((std::string *)(v19 + 7), v18);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10016817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void restore_health_metrics(void)
{
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    char v1 = logging_obg;
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "restore_health_metrics called\n", (uint8_t *)__p, 2u);
      StringValue = getStringValue("is_radio_tx_timeout");
      if (!StringValue) {
        goto LABEL_10;
      }
LABEL_8:
      unsigned int v3 = (const std::string::value_type *)StringValue;
      HIBYTE(__p[2]) = 19;
      strcpy((char *)__p, "is_radio_tx_timeout");
      uint64_t v27 = __p;
      int v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
      std::string::assign((std::string *)(v4 + 7), v3);
      goto LABEL_11;
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
    StringValue = getStringValue("is_radio_tx_timeout");
    if (StringValue) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  StringValue = getStringValue("is_radio_tx_timeout");
  if (StringValue) {
    goto LABEL_8;
  }
LABEL_10:
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "is_radio_tx_timeout");
  uint64_t v27 = __p;
  int v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  std::string::assign((std::string *)(v5 + 7), "0");
LABEL_11:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    CFDateRef v6 = getStringValue("is_buffer_limit_exceeded");
    if (v6) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDateRef v6 = getStringValue("is_buffer_limit_exceeded");
    if (v6)
    {
LABEL_13:
      uint64_t v7 = (const std::string::value_type *)v6;
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_1003F2BE0;
      strcpy((char *)__p[0], "is_buffer_limit_exceeded");
      uint64_t v27 = __p;
      CFStringRef v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
      std::string::assign((std::string *)(v8 + 7), v7);
      goto LABEL_16;
    }
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1003F2BE0;
  strcpy((char *)__p[0], "is_buffer_limit_exceeded");
  uint64_t v27 = __p;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  std::string::assign((std::string *)(v9 + 7), "0");
LABEL_16:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v10 = getStringValue("is_non_converging_prefix");
    if (v10) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v10 = getStringValue("is_non_converging_prefix");
    if (v10)
    {
LABEL_18:
      char v11 = (const std::string::value_type *)v10;
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_1003F2BE0;
      strcpy((char *)__p[0], "is_non_converging_prefix");
      uint64_t v27 = __p;
      long long v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
      std::string::assign((std::string *)(v12 + 7), v11);
      goto LABEL_21;
    }
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1003F2BE0;
  strcpy((char *)__p[0], "is_non_converging_prefix");
  uint64_t v27 = __p;
  char v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  std::string::assign((std::string *)(v13 + 7), "0");
LABEL_21:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    char v14 = getStringValue("is_non_converging_unicast_srp_service");
    if (v14) {
      goto LABEL_23;
    }
  }
  else
  {
    char v14 = getStringValue("is_non_converging_unicast_srp_service");
    if (v14)
    {
LABEL_23:
      size_t v15 = (const std::string::value_type *)v14;
      __p[0] = operator new(0x28uLL);
      *(_OWORD *)&__p[1] = xmmword_1003F6190;
      strcpy((char *)__p[0], "is_non_converging_unicast_srp_service");
      uint64_t v27 = __p;
      char v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
      std::string::assign((std::string *)(v16 + 7), v15);
      goto LABEL_26;
    }
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1003F6190;
  strcpy((char *)__p[0], "is_non_converging_unicast_srp_service");
  uint64_t v27 = __p;
  uint64_t v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  std::string::assign((std::string *)(v17 + 7), "0");
LABEL_26:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v18 = getStringValue("is_network_data_full");
    if (v18) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v18 = getStringValue("is_network_data_full");
    if (v18)
    {
LABEL_28:
      uint64_t v19 = (const std::string::value_type *)v18;
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "is_network_data_full");
      uint64_t v27 = __p;
      uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
      std::string::assign((std::string *)(v20 + 7), v19);
      goto LABEL_31;
    }
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "is_network_data_full");
  uint64_t v27 = __p;
  uint64_t v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  std::string::assign((std::string *)(v21 + 7), "0");
LABEL_31:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v22 = getStringValue("network_data_max_len");
    if (v22) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v22 = getStringValue("network_data_max_len");
    if (v22)
    {
LABEL_33:
      uint64_t v23 = (const std::string::value_type *)v22;
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "network_data_max_len");
      uint64_t v27 = __p;
      uint64_t v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
      std::string::assign((std::string *)(v24 + 7), v23);
      goto LABEL_36;
    }
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "network_data_max_len");
  uint64_t v27 = __p;
  uint64_t v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  std::string::assign((std::string *)(v25 + 7), "0");
LABEL_36:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100168844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void update_radio_tx_timeout_metric(void)
{
}

void sub_100168A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t update_buff_limit_exceedeed_metric(uint64_t result)
{
  if (*(unsigned __int8 *)(RcpHostContext::sRcpHostContext + 788) != result)
  {
    *(unsigned char *)(RcpHostContext::sRcpHostContext + 788) = result;
    operator new();
  }
  *(unsigned char *)(RcpHostContext::sRcpHostContext
           + 960
           + 200 * (*(_DWORD *)(RcpHostContext::sRcpHostContext + 960) & 3)
           + 16) = 1;
  return result;
}

void sub_100168D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v27 = a20;
      if (!a20) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  uint64_t v27 = a20;
  if (!a20) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t update_netdata_full_metric(uint64_t result)
{
  if (*(unsigned __int8 *)(RcpHostContext::sRcpHostContext + 791) != result)
  {
    *(unsigned char *)(RcpHostContext::sRcpHostContext + 791) = result;
    operator new();
  }
  return result;
}

void sub_100168F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t update_netdata_maxlength_metric(uint64_t result)
{
  if (*(unsigned __int8 *)(RcpHostContext::sRcpHostContext + 792) < result)
  {
    *(unsigned char *)(RcpHostContext::sRcpHostContext + 792) = result;
    operator new();
  }
  return result;
}

void sub_100169204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  uint64_t v24 = a17;
  if (!a17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t update_nonConvergingPrefixes_metric(uint64_t result)
{
  if (*(unsigned __int8 *)(RcpHostContext::sRcpHostContext + 789) != result)
  {
    *(unsigned char *)(RcpHostContext::sRcpHostContext + 789) = result;
    operator new();
  }
  return result;
}

void sub_10016948C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v20 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v22 = a20;
      if (!a20) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v20 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v20 - 56));
  uint64_t v22 = a20;
  if (!a20) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t update_nonConvergingUnicastSrpServices_metric(uint64_t result)
{
  if (*(unsigned __int8 *)(RcpHostContext::sRcpHostContext + 790) != result)
  {
    *(unsigned char *)(RcpHostContext::sRcpHostContext + 790) = result;
    operator new();
  }
  return result;
}

void sub_100169724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 - 33) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = *(void *)(v21 - 64);
      if (!v23) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((*(char *)(v21 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v21 - 56));
  uint64_t v23 = *(void *)(v21 - 64);
  if (!v23) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void update_stabilitymetrics_host_for_periodic_ca_metrics(int a1)
{
  if (!a1)
  {
    StringValue = getStringValue("num_daemon_restart_due_to_crashes_or_jetsams");
    if (!StringValue)
    {
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F3020;
      strcpy(v54.__r_.__value_.__l.__data_, "num_daemon_restart_due_to_crashes_or_jetsams");
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
      long long v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
      std::string::assign((std::string *)(v12 + 7), "1");
      goto LABEL_78;
    }
    uint64_t v7 = (const char *)StringValue;
    memset(&v54, 0, sizeof(v54));
    std::string::assign(&v54, (const std::string::value_type *)StringValue);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v8 = &v54;
    }
    else {
      CFStringRef v8 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if (strlen((const char *)v8) - 1 > 9)
    {
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_72;
        }
LABEL_25:
        update_stabilitymetrics_host_for_periodic_ca_metrics();
LABEL_72:
        int v10 = 1;
        goto LABEL_73;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_72;
      }
    }
    else
    {
      int v9 = atoi(v7);
      if (v9 >= 1)
      {
        int v10 = v9 + 1;
LABEL_73:
        std::to_string(&v56, v10);
        std::string __p = operator new(0x30uLL);
        long long v53 = xmmword_1003F3020;
        strcpy((char *)__p, "num_daemon_restart_due_to_crashes_or_jetsams");
        p_p = &__p;
        char v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        uint64_t v35 = (void **)(v34 + 7);
        if (*((char *)v34 + 79) < 0) {
          operator delete(*v35);
        }
        *(std::string *)uint64_t v35 = v56;
        *((unsigned char *)&v56.__r_.__value_.__s + 23) = 0;
        v56.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v53) < 0)
        {
          operator delete(__p);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v56.__r_.__value_.__l.__data_);
          }
        }
LABEL_78:
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_WORD *)&v51[50] = 0;
        *(_DWORD *)&v51[52] = 0;
        *(void *)&v51[56] = 0x8000000000000030;
        *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F3020;
        strcpy(v54.__r_.__value_.__l.__data_, "num_daemon_restart_due_to_crashes_or_jetsams");
        strcpy(v51, "ashes_or_jetsamsrt_due_to_crashenum_daemon_resta,");
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        __int16 v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
        uint64_t v37 = (const char **)(v36 + 7);
        if (*((char *)v36 + 79) < 0)
        {
          int v38 = strlen(*v37);
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_82:
            if ((v38 - 1) <= 9)
            {
LABEL_83:
              size_t v39 = operator new(0x30uLL);
              v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[48];
              *size_t v39 = *(_OWORD *)&v51[32];
              v39[1] = *(_OWORD *)&v51[16];
              *(_OWORD *)((char *)v39 + 28) = *(_OWORD *)v51;
              *((unsigned char *)v39 + 44) = 0;
              v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
              char v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
              uint64_t v41 = (const char *)(v40 + 7);
              if (*((char *)v40 + 79) < 0) {
                uint64_t v41 = *(const char **)v41;
              }
              saveStringValue("num_daemon_restart_due_to_crashes_or_jetsams", v41);
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v54.__r_.__value_.__l.__data_);
              }
              uint64_t v25 = log_get_logging_obg("com.apple.threadradiod", "default");
              if (v25)
              {
                if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_103;
                }
                std::string::basic_string[abi:ne180100]<0>(&v54, "num_daemon_restart_due_to_crashes_or_jetsams");
                std::string __p = &v54;
                long long v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
                uint64_t v43 = v42 + 7;
                if (*((char *)v42 + 79) < 0) {
                  uint64_t v43 = (void *)*v43;
                }
                LODWORD(v56.__r_.__value_.__l.__data_) = 67109378;
                HIDWORD(v56.__r_.__value_.__r.__words[0]) = v38;
                LOWORD(v56.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v43;
                long long v28 = "Size of kCAPeriodicCounters_Num_Daemon_Restart_Crashes : %d, String is : %s";
                goto LABEL_93;
              }
              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_103;
              }
LABEL_69:
              PcapManager::start_pcap_capture();
              goto LABEL_103;
            }
LABEL_96:
            char v44 = operator new(0x30uLL);
            v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[48];
            *char v44 = *(_OWORD *)&v51[32];
            v44[1] = *(_OWORD *)&v51[16];
            *(_OWORD *)((char *)v44 + 28) = *(_OWORD *)v51;
            *((unsigned char *)v44 + 44) = 0;
            v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
            unint64_t v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
            std::string::assign((std::string *)(v45 + 7), "1");
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v54.__r_.__value_.__l.__data_);
            }
            char v46 = operator new(0x30uLL);
            v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
            *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[48];
            *char v46 = *(_OWORD *)&v51[32];
            v46[1] = *(_OWORD *)&v51[16];
            *(_OWORD *)((char *)v46 + 28) = *(_OWORD *)v51;
            *((unsigned char *)v46 + 44) = 0;
            v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
            size_t v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
            long long v48 = (const char *)(v47 + 7);
            if (*((char *)v47 + 79) < 0) {
              long long v48 = *(const char **)v48;
            }
            saveStringValue("num_daemon_restart_due_to_crashes_or_jetsams", v48);
            goto LABEL_101;
          }
        }
        else
        {
          int v38 = strlen((const char *)v37);
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_82;
          }
        }
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((v38 - 1) <= 9) {
          goto LABEL_83;
        }
        goto LABEL_96;
      }
      char v16 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v16)
      {
        if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_72;
        }
        goto LABEL_25;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_72;
      }
    }
    PcapManager::start_pcap_capture();
    goto LABEL_72;
  }
  char v1 = getStringValue("num_daemon_restart_due_to_reboots");
  if (!v1)
  {
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F3060;
    strcpy(v54.__r_.__value_.__l.__data_, "num_daemon_restart_due_to_reboots");
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    char v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
    std::string::assign((std::string *)(v11 + 7), "1");
    goto LABEL_46;
  }
  int v2 = (const char *)v1;
  memset(&v54, 0, sizeof(v54));
  std::string::assign(&v54, (const std::string::value_type *)v1);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v3 = &v54;
  }
  else {
    unsigned int v3 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (strlen((const char *)v3) - 1 > 9)
  {
    char v13 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v13)
    {
      if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_40;
      }
LABEL_21:
      update_stabilitymetrics_host_for_periodic_ca_metrics();
LABEL_40:
      int v5 = 1;
      goto LABEL_41;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
LABEL_39:
    PcapManager::start_pcap_capture();
    goto LABEL_40;
  }
  int v4 = atoi(v2);
  if (v4 < 1)
  {
    size_t v15 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v15)
    {
      if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_40;
      }
      goto LABEL_21;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  int v5 = v4 + 1;
LABEL_41:
  std::to_string(&v56, v5);
  std::string __p = operator new(0x28uLL);
  long long v53 = xmmword_1003F3060;
  strcpy((char *)__p, "num_daemon_restart_due_to_reboots");
  p_p = &__p;
  uint64_t v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  uint64_t v18 = (void **)(v17 + 7);
  if (*((char *)v17 + 79) < 0) {
    operator delete(*v18);
  }
  *(std::string *)uint64_t v18 = v56;
  *((unsigned char *)&v56.__r_.__value_.__s + 23) = 0;
  v56.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
LABEL_46:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v51[16] = xmmword_1003F3060;
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F3060;
  qmemcpy(&v51[32], "rt_due_to_rebootnum_daemon_resta", 32);
  strcpy(v54.__r_.__value_.__l.__data_, "num_daemon_restart_due_to_reboots");
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  uint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
  uint64_t v20 = (const char **)(v19 + 7);
  if (*((char *)v19 + 79) < 0)
  {
    int v21 = strlen(*v20);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_50:
      if ((v21 - 1) <= 9) {
        goto LABEL_51;
      }
LABEL_63:
      size_t v29 = operator new(0x28uLL);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[16];
      v29[16] = 115;
      *(_OWORD *)size_t v29 = *(_OWORD *)&v51[48];
      *((_OWORD *)v29 + 1) = *(_OWORD *)&v51[32];
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
      char v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
      std::string::assign((std::string *)(v30 + 7), "1");
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      size_t v31 = operator new(0x28uLL);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[16];
      v31[16] = 115;
      *(_OWORD *)size_t v31 = *(_OWORD *)&v51[48];
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v51[32];
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
      uint64_t v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
      uint64_t v33 = (const char *)(v32 + 7);
      if (*((char *)v32 + 79) < 0) {
        uint64_t v33 = *(const char **)v33;
      }
      saveStringValue("num_daemon_restart_due_to_reboots", v33);
      goto LABEL_101;
    }
  }
  else
  {
    int v21 = strlen((const char *)v20);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  if ((v21 - 1) > 9) {
    goto LABEL_63;
  }
LABEL_51:
  uint64_t v22 = operator new(0x28uLL);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[16];
  v22[16] = 115;
  *(_OWORD *)uint64_t v22 = *(_OWORD *)&v51[48];
  *((_OWORD *)v22 + 1) = *(_OWORD *)&v51[32];
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  uint64_t v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
  uint64_t v24 = (const char *)(v23 + 7);
  if (*((char *)v23 + 79) < 0) {
    uint64_t v24 = *(const char **)v24;
  }
  saveStringValue("num_daemon_restart_due_to_reboots", v24);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v25)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_103;
    }
    goto LABEL_69;
  }
  if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_103;
  }
  std::string::basic_string[abi:ne180100]<0>(&v54, "num_daemon_restart_due_to_reboots");
  std::string __p = &v54;
  long long v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  uint64_t v27 = v26 + 7;
  if (*((char *)v26 + 79) < 0) {
    uint64_t v27 = (void *)*v27;
  }
  LODWORD(v56.__r_.__value_.__l.__data_) = 67109378;
  HIDWORD(v56.__r_.__value_.__r.__words[0]) = v21;
  LOWORD(v56.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v27;
  long long v28 = "Size of kCAPeriodicCounters_Num_Daemon_Restart_Reboots : %d, String is : %s";
LABEL_93:
  _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, v28, (uint8_t *)&v56, 0x12u);
LABEL_101:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_103:
  getStringValue("num_daemon_restart_due_to_reboots");
  v49 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v49)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
      update_stabilitymetrics_host_for_periodic_ca_metrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  getStringValue("num_daemon_restart_due_to_crashes_or_jetsams");
  char v50 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v50)
  {
    if (syslog_is_the_mask_enabled(7))
    {
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        update_stabilitymetrics_host_for_periodic_ca_metrics();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void sub_10016A374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void update_stabilitymetrics_host_for_triggerbased_ca_metrics(int a1)
{
  if (a1)
  {
    StringValue = getStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
    if (!StringValue)
    {
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F61A0;
      strcpy(v54.__r_.__value_.__l.__data_, "ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
      char v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
      std::string::assign((std::string *)(v11 + 7), "1");
      goto LABEL_46;
    }
    int v2 = (const char *)StringValue;
    memset(&v54, 0, sizeof(v54));
    std::string::assign(&v54, (const std::string::value_type *)StringValue);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v3 = &v54;
    }
    else {
      unsigned int v3 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if (strlen((const char *)v3) - 1 > 9)
    {
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg)
      {
        if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_40;
        }
LABEL_21:
        update_stabilitymetrics_host_for_triggerbased_ca_metrics();
LABEL_40:
        int v5 = 1;
        goto LABEL_41;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
    }
    else
    {
      int v4 = atoi(v2);
      if (v4 >= 1)
      {
        int v5 = v4 + 1;
LABEL_41:
        std::to_string(&v56, v5);
        std::string __p = operator new(0x40uLL);
        long long v53 = xmmword_1003F61A0;
        strcpy((char *)__p, "ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
        p_p = &__p;
        uint64_t v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        uint64_t v18 = (void **)(v17 + 7);
        if (*((char *)v17 + 79) < 0) {
          operator delete(*v18);
        }
        *(std::string *)uint64_t v18 = v56;
        *((unsigned char *)&v56.__r_.__value_.__s + 23) = 0;
        v56.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v53) < 0)
        {
          operator delete(__p);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v56.__r_.__value_.__l.__data_);
          }
        }
LABEL_46:
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        *(_WORD *)&v51[66] = 0;
        *(_DWORD *)&v51[68] = 0;
        *(void *)&v51[72] = 0x8000000000000040;
        *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F61A0;
        strcpy(v54.__r_.__value_.__l.__data_, "ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
        strcpy(v51, "t_due_to_rebootsemon_restart_due_counters_num_daca_trigger_based;");
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        uint64_t v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
        uint64_t v20 = (const char **)(v19 + 7);
        if (*((char *)v19 + 79) < 0)
        {
          int v21 = strlen(*v20);
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_50:
            if ((v21 - 1) <= 9)
            {
LABEL_51:
              uint64_t v22 = operator new(0x40uLL);
              v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[64];
              *uint64_t v22 = *(_OWORD *)&v51[48];
              v22[1] = *(_OWORD *)&v51[32];
              v22[2] = *(_OWORD *)&v51[16];
              *(_OWORD *)((char *)v22 + 43) = *(_OWORD *)v51;
              *((unsigned char *)v22 + 59) = 0;
              v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
              uint64_t v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
              uint64_t v24 = (const char *)(v23 + 7);
              if (*((char *)v23 + 79) < 0) {
                uint64_t v24 = *(const char **)v24;
              }
              saveStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_reboots", v24);
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v54.__r_.__value_.__l.__data_);
              }
              uint64_t v25 = log_get_logging_obg("com.apple.threadradiod", "default");
              if (v25)
              {
                if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_102;
                }
                std::string::basic_string[abi:ne180100]<0>(&v54, "ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
                std::string __p = &v54;
                long long v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
                uint64_t v27 = v26 + 7;
                if (*((char *)v26 + 79) < 0) {
                  uint64_t v27 = (void *)*v27;
                }
                LODWORD(v56.__r_.__value_.__l.__data_) = 67109378;
                HIDWORD(v56.__r_.__value_.__r.__words[0]) = v21;
                LOWORD(v56.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v27;
                _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Size of kCATriggerBasedCounters_Num_Daemon_Restart_Reboots : %d, String is : %s", (uint8_t *)&v56, 0x12u);
                goto LABEL_100;
              }
              if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                goto LABEL_102;
              }
LABEL_69:
              PcapManager::start_pcap_capture();
              goto LABEL_102;
            }
            goto LABEL_63;
          }
        }
        else
        {
          int v21 = strlen((const char *)v20);
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_50;
          }
        }
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((v21 - 1) <= 9) {
          goto LABEL_51;
        }
LABEL_63:
        long long v28 = operator new(0x40uLL);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[64];
        *long long v28 = *(_OWORD *)&v51[48];
        v28[1] = *(_OWORD *)&v51[32];
        v28[2] = *(_OWORD *)&v51[16];
        *(_OWORD *)((char *)v28 + 43) = *(_OWORD *)v51;
        *((unsigned char *)v28 + 59) = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        size_t v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
        std::string::assign((std::string *)(v29 + 7), "1");
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        char v30 = operator new(0x40uLL);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
        *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[64];
        *char v30 = *(_OWORD *)&v51[48];
        v30[1] = *(_OWORD *)&v51[32];
        v30[2] = *(_OWORD *)&v51[16];
        *(_OWORD *)((char *)v30 + 43) = *(_OWORD *)v51;
        *((unsigned char *)v30 + 59) = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        size_t v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
        uint64_t v32 = (const char *)(v31 + 7);
        if (*((char *)v31 + 79) < 0) {
          uint64_t v32 = *(const char **)v32;
        }
        saveStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_reboots", v32);
        goto LABEL_100;
      }
      size_t v15 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v15)
      {
        if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_40;
        }
        goto LABEL_21;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
    }
    PcapManager::start_pcap_capture();
    goto LABEL_40;
  }
  CFDateRef v6 = getStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
  if (!v6)
  {
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F61B0;
    strcpy(v54.__r_.__value_.__l.__data_, "ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    long long v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
    std::string::assign((std::string *)(v12 + 7), "1");
    goto LABEL_78;
  }
  uint64_t v7 = (const char *)v6;
  memset(&v54, 0, sizeof(v54));
  std::string::assign(&v54, (const std::string::value_type *)v6);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v8 = &v54;
  }
  else {
    CFStringRef v8 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (strlen((const char *)v8) - 1 > 9)
  {
    char v14 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v14)
    {
      if (!syslog_is_the_mask_enabled(3) || !os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_72;
      }
LABEL_25:
      update_stabilitymetrics_host_for_triggerbased_ca_metrics();
LABEL_72:
      int v10 = 1;
      goto LABEL_73;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_72;
    }
LABEL_71:
    PcapManager::start_pcap_capture();
    goto LABEL_72;
  }
  int v9 = atoi(v7);
  if (v9 < 1)
  {
    char v16 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v16)
    {
      if (!syslog_is_the_mask_enabled(3) || !os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_72;
      }
      goto LABEL_25;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  int v10 = v9 + 1;
LABEL_73:
  std::to_string(&v56, v10);
  std::string __p = operator new(0x48uLL);
  long long v53 = xmmword_1003F61B0;
  strcpy((char *)__p, "ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
  p_p = &__p;
  uint64_t v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  char v34 = (void **)(v33 + 7);
  if (*((char *)v33 + 79) < 0) {
    operator delete(*v34);
  }
  *(std::string *)char v34 = v56;
  *((unsigned char *)&v56.__r_.__value_.__s + 23) = 0;
  v56.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
LABEL_78:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_WORD *)&v51[66] = 0;
  *(_DWORD *)&v51[68] = 0;
  *(void *)&v51[72] = 0x8000000000000048;
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1003F61B0;
  strcpy(v51, "_counters_num_daca_trigger_based_to_crashes_or_jemon_restart_dueF");
  strcpy(v54.__r_.__value_.__l.__data_, "ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  uint64_t v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
  __int16 v36 = (const char *)(v35 + 7);
  if ((*((char *)v35 + 79) & 0x80000000) == 0)
  {
    int v37 = strlen(v36);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
LABEL_94:
    operator delete(v54.__r_.__value_.__l.__data_);
    if ((v37 - 1) <= 9) {
      goto LABEL_83;
    }
LABEL_95:
    char v44 = operator new(0x48uLL);
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
    *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[64];
    *((_OWORD *)v44 + 2) = *(_OWORD *)&v51[48];
    *((_OWORD *)v44 + 3) = *(_OWORD *)&v51[32];
    strcpy((char *)v44 + 62, "_jetsams");
    *(_OWORD *)char v44 = *(_OWORD *)&v51[16];
    *((_OWORD *)v44 + 1) = *(_OWORD *)v51;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    unint64_t v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
    std::string::assign((std::string *)(v45 + 7), "1");
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    char v46 = operator new(0x48uLL);
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
    *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[64];
    *((_OWORD *)v46 + 2) = *(_OWORD *)&v51[48];
    *((_OWORD *)v46 + 3) = *(_OWORD *)&v51[32];
    strcpy((char *)v46 + 62, "_jetsams");
    *(_OWORD *)char v46 = *(_OWORD *)&v51[16];
    *((_OWORD *)v46 + 1) = *(_OWORD *)v51;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    size_t v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
    long long v48 = (const char *)(v47 + 7);
    if (*((char *)v47 + 79) < 0) {
      long long v48 = *(const char **)v48;
    }
    saveStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams", v48);
    goto LABEL_100;
  }
  int v37 = strlen(*(const char **)v36);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_94;
  }
LABEL_82:
  if ((v37 - 1) > 9) {
    goto LABEL_95;
  }
LABEL_83:
  int v38 = operator new(0x48uLL);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v51[64];
  *((_OWORD *)v38 + 2) = *(_OWORD *)&v51[48];
  *((_OWORD *)v38 + 3) = *(_OWORD *)&v51[32];
  strcpy((char *)v38 + 62, "_jetsams");
  *(_OWORD *)int v38 = *(_OWORD *)&v51[16];
  *((_OWORD *)v38 + 1) = *(_OWORD *)v51;
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  size_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v56);
  char v40 = (const char *)(v39 + 7);
  if (*((char *)v39 + 79) < 0) {
    char v40 = *(const char **)v40;
  }
  saveStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams", v40);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  uint64_t v41 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (!v41)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_102;
    }
    goto LABEL_69;
  }
  if (!syslog_is_the_mask_enabled(3) || !os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
    goto LABEL_102;
  }
  std::string::basic_string[abi:ne180100]<0>(&v54, "ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
  std::string __p = &v54;
  long long v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  uint64_t v43 = v42 + 7;
  if (*((char *)v42 + 79) < 0) {
    uint64_t v43 = (void *)*v43;
  }
  LODWORD(v56.__r_.__value_.__l.__data_) = 67109378;
  HIDWORD(v56.__r_.__value_.__r.__words[0]) = v37;
  LOWORD(v56.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v43;
  _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Size of kCATriggerBasedCounters_Num_Daemon_Restart_Crashes : %d, String is : %s", (uint8_t *)&v56, 0x12u);
LABEL_100:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_102:
  getStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_reboots");
  v49 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v49)
  {
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
      update_stabilitymetrics_host_for_triggerbased_ca_metrics();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  getStringValue("ca_trigger_based_counters_num_daemon_restart_due_to_crashes_or_jetsams");
  char v50 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v50)
  {
    if (syslog_is_the_mask_enabled(7))
    {
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        update_stabilitymetrics_host_for_triggerbased_ca_metrics();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

void sub_10016B164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void handle_xpc_output_nobuff(char *a1, uint64_t a2)
{
  unsigned __int16 v4 = 0;
  __b[0] = 0;
  unsigned __int16 v5 = 1024;
  do
  {
    if (v5 >= a2) {
      int v7 = a2;
    }
    else {
      int v7 = v5;
    }
    encode_data_into_string((unsigned __int8 *)&a1[v4], (unsigned __int16)(v7 - v4), __b, 0x401uLL, 0);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!logging_obg)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_3;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v22 = "com.apple.wpantund.ncp";
      *(_WORD *)&v22[8] = 2080;
      uint64_t v23 = "default";
      int v10 = &_os_log_default;
      char v11 = "Logging1 Module is not defined for SubSystem: %s, Category: %s";
      uint32_t v12 = 22;
      goto LABEL_13;
    }
    int v9 = logging_obg;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)uint64_t v22 = v4;
      *(_WORD *)&v22[4] = 1024;
      *(_DWORD *)&v22[6] = v7;
      LOWORD(v23) = 1024;
      *(_DWORD *)((char *)&v23 + 2) = (unsigned __int16)(v7 - v4);
      HIWORD(v23) = 2080;
      uint64_t v24 = __b;
      int v10 = v9;
      char v11 = "Left[%d] Right[%d] parselen[%d] [%s]";
      uint32_t v12 = 30;
LABEL_13:
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v11, buf, v12);
    }
LABEL_3:
    __b[0] = 0;
    BOOL v6 = a2 >= v5;
    unsigned __int16 v5 = v7 + 1024;
    unsigned __int16 v4 = v7;
  }
  while (v6);
  char v13 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v13)
  {
    char v14 = v13;
    if (syslog_is_the_mask_enabled(3))
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        handle_xpc_output_nobuff(a2, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
}

BOOL isiPad(void)
{
  CFStringRef v0 = (const __CFString *)MGGetStringAnswer();
  CFComparisonResult v1 = CFStringCompare(@"iPad", v0, 0);
  if (v1) {
    return v1 == kCFCompareEqualTo;
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    unsigned __int16 v4 = logging_obg;
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      isiPad(v4, v5, v6, v7, v8, v9, v10, v11);
      return 1;
    }
    return v1 == kCFCompareEqualTo;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    return v1 == kCFCompareEqualTo;
  }
  PcapManager::start_pcap_capture();
  return 1;
}

BOOL isMac(void)
{
  CFStringRef v0 = (const __CFString *)MGGetStringAnswer();
  CFComparisonResult v1 = CFStringCompare(@"Mac", v0, 0);
  if (v1) {
    return v1 == kCFCompareEqualTo;
  }
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    unsigned __int16 v4 = logging_obg;
    if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      isMac(v4, v5, v6, v7, v8, v9, v10, v11);
      return 1;
    }
    return v1 == kCFCompareEqualTo;
  }
  if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    return v1 == kCFCompareEqualTo;
  }
  PcapManager::start_pcap_capture();
  return 1;
}

int main(int argc, const char **argv, const char **envp)
{
  v209[0] = 0;
  v209[1] = 0;
  uint64_t v210 = 0;
  gettimeofday(&v208, &v207);
  gDaemonStartTimeStampSec = v208.tv_sec;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg)
  {
    uint64_t v6 = logging_obg;
    if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      main_cold_46(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    PcapManager::start_pcap_capture();
  }
  if (!isMac()
    || (_os_feature_enabled_impl() & 1) != 0
    || CFPreferencesGetAppBooleanValue(@"MatteriPhoneOnlyPairingForMacEnabled", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
  {
    if (!isiPad()
      || CFPreferencesGetAppBooleanValue(@"MatteriPhoneOnlyPairingForIPadEnabled", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
    {
      if ((_os_feature_enabled_impl() & 1) != 0
        || CFPreferencesGetAppBooleanValue(@"ThreadServiceEnabled", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0))
      {
        if (!removekeyEntryFromPlist())
        {
          char v14 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v14)
          {
            uint64_t v15 = v14;
            if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
              main_cold_40();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            PcapManager::start_pcap_capture();
          }
        }
        recordDaemonStartTime();
        unint64_t SystemUptimeInSec = getSystemUptimeInSec();
        size_t v29 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v29)
        {
          char v30 = v29;
          if (syslog_is_the_mask_enabled(4) && os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            main_cold_38();
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        gDaemonStartByDeviceReboot = processHostSystemStartActions(SystemUptimeInSec);
        create_new_settings_folder((uint64_t)v209);
        gDateFormatter = (uint64_t)CFDateFormatterCreate(kCFAllocatorDefault, 0, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
        CFDateFormatterSetFormat((CFDateFormatterRef)gDateFormatter, @"yyyy-MM-dd HH:mm:ss");
        log_create_log_modules();
        if (pipe(&gPfdX) == -1)
        {
          uint64_t v35 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v35)
          {
            __int16 v36 = v35;
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
              main_cold_36();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            PcapManager::start_pcap_capture();
          }
        }
        int v31 = fcntl(gPfdX, 3);
        if (v31 == -1)
        {
          int v37 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v37)
          {
            int v38 = v37;
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              main_cold_34();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            PcapManager::start_pcap_capture();
          }
        }
        if (fcntl(gPfdX, 4, v31 | 4u) == -1)
        {
          size_t v39 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v39)
          {
            char v40 = v39;
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
              main_cold_32();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            PcapManager::start_pcap_capture();
          }
        }
        int v32 = fcntl(dword_1004B620C, 3);
        if (v32 == -1)
        {
          uint64_t v41 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v41)
          {
            long long v42 = v41;
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
              main_cold_30();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            PcapManager::start_pcap_capture();
          }
        }
        if (fcntl(dword_1004B620C, 4, v32 | 4u) == -1)
        {
          uint64_t v43 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v43)
          {
            char v44 = v43;
            if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
              main_cold_28();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            PcapManager::start_pcap_capture();
          }
        }
        uint64_t v33 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v33)
        {
          char v34 = v33;
          if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
            main_cold_26();
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          PcapManager::start_pcap_capture();
        }
        if (gDaemonStartByDeviceReboot)
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
          strcpy((char *)&__dst, "num_daemon_restart");
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
          unint64_t v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
          std::string::assign((std::string *)(v45 + 7), "0");
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          char v46 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v46)
          {
            size_t v47 = v46;
            if (syslog_is_the_mask_enabled(7) && os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
              main_cold_24();
            }
          }
          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            PcapManager::start_pcap_capture();
          }
          goto LABEL_126;
        }
        StringValue = getStringValue("num_daemon_restart");
        if (!StringValue)
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
          strcpy((char *)&__dst, "num_daemon_restart");
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
          v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
          std::string::assign((std::string *)(v62 + 7), "1");
LABEL_124:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
LABEL_126:
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
          strcpy((char *)&__dst, "num_daemon_restart");
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
          v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
          if (*((char *)v69 + 79) < 0)
          {
            int v70 = strlen((const char *)v69[7]);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_128:
              if ((v70 - 1) <= 9)
              {
LABEL_129:
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
                strcpy((char *)&__dst, "num_daemon_restart");
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                if (*((char *)v71 + 79) < 0) {
                  v72 = (const char *)v71[7];
                }
                else {
                  v72 = (const char *)(v71 + 7);
                }
                saveStringValue("num_daemon_restart", v72);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                v76 = log_get_logging_obg("com.apple.threadradiod", "default");
                if (!v76)
                {
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    PcapManager::start_pcap_capture();
                  }
LABEL_152:
                  update_stabilitymetrics_host_for_periodic_ca_metrics(gDaemonStartByDeviceReboot);
                  update_stabilitymetrics_host_for_triggerbased_ca_metrics(gDaemonStartByDeviceReboot);
                  v80 = getStringValue("is_primary_resident");
                  if (v80)
                  {
                    v81 = (const std::string::value_type *)v80;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "is_primary_resident");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v82 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v82 + 7), v81);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "is_primary_resident");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v83 + 7), "0");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                  strcpy((char *)&__dst, "is_primary_resident");
                  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                  v84 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                  *((unsigned char *)&__src.__r_.__value_.__s + 23) = 18;
                  strcpy((char *)&__src, "wasPrimaryResident");
                  *(void *)std::string __p = &__src;
                  v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__src.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
                  std::string::operator=((std::string *)(v85 + 7), (const std::string *)(v84 + 7));
                  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__src.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_159;
                    }
                  }
                  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_159;
                  }
                  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_159:
                  v86 = getStringValue("Network:LastRole");
                  if (v86)
                  {
                    v87 = (const std::string::value_type *)v86;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
                    strcpy((char *)&__dst, "Network:LastRole");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v88 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v88 + 7), v87);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
                    strcpy((char *)&__dst, "Network:LastRole");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v89 + 7), "unknown");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v90 = getStringValue("is_primary_resident_thread_capable");
                  if (v90)
                  {
                    v91 = (const std::string::value_type *)v90;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2EF0;
                    strcpy(__dst.__r_.__value_.__l.__data_, "is_primary_resident_thread_capable");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v92 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v92 + 7), v91);
                  }
                  else
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2EF0;
                    strcpy(__dst.__r_.__value_.__l.__data_, "is_primary_resident_thread_capable");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v93 + 7), "0");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v94 = getStringValue("primary_resident_info");
                  if (v94)
                  {
                    v95 = (const std::string::value_type *)v94;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
                    strcpy((char *)&__dst, "primary_resident_info");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v96 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v96 + 7), v95);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
                    strcpy((char *)&__dst, "primary_resident_info");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v97 + 7), "");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v98 = getStringValue("vendor:coex:rx_mode");
                  if (v98)
                  {
                    v99 = (const std::string::value_type *)v98;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "vendor:coex:rx_mode");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v100 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v100 + 7), v99);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "vendor:coex:rx_mode");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v101 + 7), "2");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v102 = getStringValue("vendor:coex:rx_threshold:lowerbound");
                  if (v102)
                  {
                    v103 = (const std::string::value_type *)v102;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E00;
                    strcpy(__dst.__r_.__value_.__l.__data_, "vendor:coex:rx_threshold:lowerbound");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v104 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v104 + 7), v103);
                  }
                  else
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E00;
                    strcpy(__dst.__r_.__value_.__l.__data_, "vendor:coex:rx_threshold:lowerbound");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v105 + 7), "5");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v106 = getStringValue("vendor:coex:rx_threshold:upperbound");
                  if (v106)
                  {
                    v107 = (const std::string::value_type *)v106;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E00;
                    strcpy(__dst.__r_.__value_.__l.__data_, "vendor:coex:rx_threshold:upperbound");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v108 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v108 + 7), v107);
                  }
                  else
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E00;
                    strcpy(__dst.__r_.__value_.__l.__data_, "vendor:coex:rx_threshold:upperbound");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v109 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v109 + 7), "30");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v110 = getStringValue("vendor:coex:tx_mode");
                  if (v110)
                  {
                    v111 = (const std::string::value_type *)v110;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "vendor:coex:tx_mode");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v112 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v112 + 7), v111);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "vendor:coex:tx_mode");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v113 + 7), "4");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v114 = getStringValue("vendor:coex:enabled");
                  if (v114)
                  {
                    v115 = (const std::string::value_type *)v114;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "vendor:coex:enabled");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v116 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v116 + 7), v115);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&__dst, "vendor:coex:enabled");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v117 + 7), "1");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v118 = getStringValue("ca:reporting:enabled");
                  if (v118)
                  {
                    v119 = (const std::string::value_type *)v118;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
                    strcpy((char *)&__dst, "ca:reporting:enabled");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v120 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v120 + 7), v119);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
                    strcpy((char *)&__dst, "ca:reporting:enabled");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v121 + 7), "1");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  v122 = getStringValue("EnableNetworkMonitor");
                  if (v122)
                  {
                    v123 = (const std::string::value_type *)v122;
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
                    strcpy((char *)&__dst, "EnableNetworkMonitor");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v124 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v124 + 7), v123);
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
                    strcpy((char *)&__dst, "EnableNetworkMonitor");
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v125 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                    std::string::assign((std::string *)(v125 + 7), "1");
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 20;
                  strcpy((char *)&__dst, "EnableNetworkMonitor");
                  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                  v126 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                  if (*((char *)v126 + 79) < 0)
                  {
                    int v127 = strcmp((const char *)v126[7], "1");
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_214:
                      if (!v127) {
                        gEnableNetworkMonitor = 1;
                      }
                      v128 = getStringValue("NCP:TXPower");
                      if (v128)
                      {
                        v129 = (const std::string::value_type *)v128;
                        if (strcmp((const char *)v128, "127"))
                        {
                          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 11;
                          strcpy((char *)&__dst, "NCP:TXPower");
                          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                          v130 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                          std::string::assign((std::string *)(v130 + 7), v129);
LABEL_229:
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v134 = getStringValue("vendor:mle:adv:tx:num");
                          if (v134)
                          {
                            v135 = (const std::string::value_type *)v134;
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
                            strcpy((char *)&__dst, "vendor:mle:adv:tx:num");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v136 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v136 + 7), v135);
                          }
                          else
                          {
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
                            strcpy((char *)&__dst, "vendor:mle:adv:tx:num");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v137 + 7), "1");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v138 = getStringValue("vendor:csl:tx:schedframe:reqahead:timeinus");
                          if (v138)
                          {
                            v139 = (const std::string::value_type *)v138;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E60;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:csl:tx:schedframe:reqahead:timeinus");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v140 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v140 + 7), v139);
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E60;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:csl:tx:schedframe:reqahead:timeinus");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v141 + 7), "6000");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v142 = getStringValue("vendor:csma:cca:idleattempts");
                          if (v142)
                          {
                            v143 = (const std::string::value_type *)v142;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2EA0;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:csma:cca:idleattempts");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v144 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v144 + 7), v143);
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2EA0;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:csma:cca:idleattempts");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v145 + 7), "1");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v146 = getStringValue("vendor:ifs:ackturnaround:time");
                          if (v146)
                          {
                            v147 = (const std::string::value_type *)v146;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F3030;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:ifs:ackturnaround:time");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v148 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v148 + 7), v147);
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F3030;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:ifs:ackturnaround:time");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v149 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v149 + 7), "192");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v150 = getStringValue("vendor:ifs:ackturnaround:mode");
                          if (v150)
                          {
                            v151 = (const std::string::value_type *)v150;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F3030;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:ifs:ackturnaround:mode");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v152 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v152 + 7), v151);
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F3030;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:ifs:ackturnaround:mode");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v153 + 7), "1");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v154 = getStringValue("vendor:ifs:ackturnaround:enable");
                          if (v154)
                          {
                            v155 = (const std::string::value_type *)v154;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F3040;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:ifs:ackturnaround:enable");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v156 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v156 + 7), v155);
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F3040;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:ifs:ackturnaround:enable");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v157 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v157 + 7), "1");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v158 = getStringValue("Daemon:VirtualInterface:ReadBufferSize");
                          if (!v158 || (v159 = (const std::string::value_type *)v158, !strcmp((const char *)v158, "0")))
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E20;
                            strcpy(__dst.__r_.__value_.__l.__data_, "Daemon:VirtualInterface:ReadBufferSize");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v161 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v161 + 7), "8192");
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2E20;
                            strcpy(__dst.__r_.__value_.__l.__data_, "Daemon:VirtualInterface:ReadBufferSize");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v160 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v160 + 7), v159);
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v162 = getStringValue("vendor:min:mac:interframedelay");
                          if (v162)
                          {
                            v163 = (const std::string::value_type *)v162;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2F00;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:min:mac:interframedelay");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v164 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v164 + 7), v163);
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2F00;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:min:mac:interframedelay");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v165 + 7), "0");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v166 = getStringValue("NCP:PcapEnabled");
                          if (v166)
                          {
                            v167 = (const std::string::value_type *)v166;
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 15;
                            strcpy((char *)&__dst, "NCP:PcapEnabled");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v168 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v168 + 7), v167);
                          }
                          else
                          {
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 15;
                            strcpy((char *)&__dst, "NCP:PcapEnabled");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v169 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v169 + 7), "0");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v170 = getStringValue("Daemon:PromiscuousPcap");
                          if (v170)
                          {
                            v171 = (const std::string::value_type *)v170;
                            strcpy((char *)&__dst, "Daemon:PromiscuousPcap");
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 22;
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v172 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v172 + 7), v171);
                          }
                          else
                          {
                            strcpy((char *)&__dst, "Daemon:PromiscuousPcap");
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 22;
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v173 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v173 + 7), "0");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v174 = getStringValue("TPC:Mode");
                          if (v174)
                          {
                            v175 = (const std::string::value_type *)v174;
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
                            strcpy((char *)&__dst, "TPC:Mode");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v176 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v176 + 7), v175);
                          }
                          else
                          {
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
                            strcpy((char *)&__dst, "TPC:Mode");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v177 + 7), "0");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v178 = getStringValue("Thread:DeviceMode");
                          if (v178)
                          {
                            v179 = (const std::string::value_type *)v178;
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
                            strcpy((char *)&__dst, "Thread:DeviceMode");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v180 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v180 + 7), v179);
                          }
                          else
                          {
                            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
                            strcpy((char *)&__dst, "Thread:DeviceMode");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v181 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v181 + 7), "sleepy-end-device");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          v182 = getStringValue("vendor:timeline:loglevel");
                          if (v182)
                          {
                            v183 = (const std::string::value_type *)v182;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2BE0;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:timeline:loglevel");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v184 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v184 + 7), v183);
                          }
                          else
                          {
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1003F2BE0;
                            strcpy(__dst.__r_.__value_.__l.__data_, "vendor:timeline:loglevel");
                            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                            v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                            std::string::assign((std::string *)(v185 + 7), "3");
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                            if (gDaemonStartByDeviceReboot) {
LABEL_297:
                            }
                              persist_pcap_enabled();
                          }
                          else if (gDaemonStartByDeviceReboot)
                          {
                            goto LABEL_297;
                          }
                          restore_awd_stablity_counters();
                          restore_health_metrics();
                          if (setjmp(gResetJump))
                          {
                            alarm(0);
                            execvp(*argv, (char *const *)argv);
                          }
                          long long v212 = 0u;
                          memset(v211, 0, sizeof(v211));
                          DWORD2(v212) = 1;
                          uint64_t v213 = 5;
                          optind = 1;
                          while (2)
                          {
                            LODWORD(__src.__r_.__value_.__l.__data_) = 0;
                            int v186 = getopt_long(argc, (char *const *)argv, "B:d:hI:nps:v", (const option *)&kOptions, (int *)&__src);
                            switch(v186)
                            {
                              case 63:
                                v202 = *argv;
                                v203 = __stderrp;
                                fprintf(__stderrp, "Syntax:\n    %s [Options] RadioURL [RadioURL]\nOptions:\n    -B  --backbone-interface-name Backbone network interface name.\n    -d  --debug-level             Debug level of logging.\n    -h  --help                    Display this usage information.\n    -I  --interface-name name     Thread network interface name.\n    -n  --dry-run                 Just verify if arguments is valid and radio spinel is compatible.\n        --radio-version           Print radio firmware version.\n    -p  --persistent-interface    Persistent the created thread network interface\n    -s  --time-speed factor       Time speed up factor.\n    -v  --verbose                 Also log to stderr.\n", v202);
                                RadioUrlHelpString = otSysGetRadioUrlHelpString();
                                fputs(RadioUrlHelpString, v203);
                                goto LABEL_335;
                              case 64:
                              case 65:
                              case 67:
                              case 68:
                              case 69:
                              case 70:
                              case 71:
                              case 72:
                              case 74:
                              case 75:
                              case 76:
                              case 77:
                              case 78:
                              case 79:
                              case 80:
                              case 81:
                              case 82:
                              case 83:
                              case 84:
                              case 85:
                              case 86:
                              case 87:
                              case 88:
                              case 89:
                              case 90:
                              case 91:
                              case 92:
                              case 93:
                              case 94:
                              case 95:
                              case 96:
                              case 97:
                              case 98:
                              case 99:
                              case 101:
                              case 102:
                              case 103:
                              case 105:
                              case 106:
                              case 107:
                              case 108:
                              case 109:
                              case 111:
                              case 113:
                              case 114:
                              case 116:
                              case 117:
                              case 119:
                              case 120:
                              case 121:
                              case 122:
                              case 123:
                              case 124:
                              case 125:
                              case 126:
                              case 127:
                              case 128:
                                continue;
                              case 66:
                                v211[0] = optarg;
                                continue;
                              case 73:
                                v211[1] = optarg;
                                continue;
                              case 100:
                                LODWORD(v213) = atoi(optarg);
                                continue;
                              case 104:
                                v198 = *argv;
                                v199 = __stdoutp;
                                fprintf(__stdoutp, "Syntax:\n    %s [Options] RadioURL [RadioURL]\nOptions:\n    -B  --backbone-interface-name Backbone network interface name.\n    -d  --debug-level             Debug level of logging.\n    -h  --help                    Display this usage information.\n    -I  --interface-name name     Thread network interface name.\n    -n  --dry-run                 Just verify if arguments is valid and radio spinel is compatible.\n        --radio-version           Print radio firmware version.\n    -p  --persistent-interface    Persistent the created thread network interface\n    -s  --time-speed factor       Time speed up factor.\n    -v  --verbose                 Also log to stderr.\n", v198);
                                v200 = otSysGetRadioUrlHelpString();
                                fputs(v200, v199);
                                int v201 = 0;
                                goto LABEL_336;
                              case 110:
                                BYTE13(v212) = 1;
                                continue;
                              case 112:
                                BYTE12(v212) = 1;
                                continue;
                              case 115:
                                __dst.__r_.__value_.__r.__words[0] = 0;
                                int v187 = strtol(optarg, &__dst.__r_.__value_.__l.__data_, 0);
                                DWORD2(v212) = v187;
                                if (*__dst.__r_.__value_.__l.__data_) {
                                  BOOL v188 = 1;
                                }
                                else {
                                  BOOL v188 = v187 == 0;
                                }
                                if (!v188) {
                                  continue;
                                }
                                fprintf(__stderrp, "Invalid value for TimerSpeedUpFactor: %s\n", optarg);
LABEL_335:
                                int v201 = 2;
LABEL_336:
                                exit(v201);
                              case 118:
                                BYTE5(v213) = 1;
                                continue;
                              case 129:
                                BYTE4(v213) = 1;
                                continue;
                              default:
                                if (v186 != -1) {
                                  continue;
                                }
                                LOWORD(__src.__r_.__value_.__r.__words[1]) = 0;
                                __src.__r_.__value_.__r.__words[0] = 0;
                                getNetworkInterfaceNameOnBackbone((uint64_t)&__src);
                                v189 = (char *)&v211[v212];
                                LOBYTE(v212) = v212 + 1;
                                *((void *)v189 + 2) = apple_fillmore_url;
                                size_t v190 = strlen((const char *)&__src);
                                if (v190 >= 0x7FFFFFFFFFFFFFF8) {
                                  std::string::__throw_length_error[abi:ne180100]();
                                }
                                size_t v191 = v190;
                                if (v190 >= 0x17)
                                {
                                  uint64_t v194 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v190 | 7) != 0x17) {
                                    uint64_t v194 = v190 | 7;
                                  }
                                  uint64_t v195 = v194 + 1;
                                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v194 + 1);
                                  __dst.__r_.__value_.__r.__words[2] = v195 | 0x8000000000000000;
                                  p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
                                }
                                else
                                {
                                  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v190;
                                  p_dst = &__dst;
                                  if (!v190)
                                  {
                                    __dst.__r_.__value_.__s.__data_[0] = 0;
                                    BYTE5(v213) = 1;
                                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                                      goto LABEL_321;
                                    }
                                    goto LABEL_328;
                                  }
                                }
                                memcpy(p_dst, &__src, v191);
                                p_dst->__r_.__value_.__s.__data_[v191] = 0;
                                BYTE5(v213) = 1;
                                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                {
LABEL_321:
                                  operator delete(__dst.__r_.__value_.__l.__data_);
                                  if (BYTE5(v213)) {
                                    int v193 = 33;
                                  }
                                  else {
                                    int v193 = 1;
                                  }
LABEL_329:
                                  openlog(*argv, v193, 24);
                                  unsigned __int8 v196 = setlogmask(0);
                                  setlogmask(v196);
                                  rcpHostContextInit();
                                }
LABEL_328:
                                int v193 = 33;
                                goto LABEL_329;
                            }
                          }
                        }
                        v131 = log_get_logging_obg("com.apple.threadradiod", "default");
                        if (v131)
                        {
                          v132 = v131;
                          if (syslog_is_the_mask_enabled(4)
                            && os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
                          {
                            main_cold_17();
                          }
                        }
                        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          PcapManager::start_pcap_capture();
                        }
                      }
                      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 11;
                      strcpy((char *)&__dst, "NCP:TXPower");
                      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                      v133 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
                      std::string::assign((std::string *)(v133 + 7), "20");
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    int v127 = strcmp((const char *)v126 + 56, "1");
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_214;
                    }
                  }
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  goto LABEL_214;
                }
                v77 = v76;
                if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_152;
                }
                std::string::basic_string[abi:ne180100]<0>(&__dst, "num_daemon_restart");
                *(void *)std::string __p = &__dst;
                v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
                v79 = v78 + 7;
                if (*((char *)v78 + 79) < 0) {
                  v79 = (void *)*v79;
                }
                LODWORD(__src.__r_.__value_.__l.__data_) = 67109378;
                HIDWORD(__src.__r_.__value_.__r.__words[0]) = v70;
                LOWORD(__src.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__src.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v79;
                _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Size of kAWDStabilityCounters_Num_Daemon_Restart : %d, String is : %s", (uint8_t *)&__src, 0x12u);
LABEL_148:
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                goto LABEL_152;
              }
LABEL_133:
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
              strcpy((char *)&__dst, "num_daemon_restart");
              __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
              std::string::assign((std::string *)(v73 + 7), "1");
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
              strcpy((char *)&__dst, "num_daemon_restart");
              __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__src);
              if (*((char *)v74 + 79) < 0) {
                v75 = (const char *)v74[7];
              }
              else {
                v75 = (const char *)(v74 + 7);
              }
              saveStringValue("num_daemon_restart", v75);
              goto LABEL_148;
            }
          }
          else
          {
            int v70 = strlen((const char *)v69 + 56);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_128;
            }
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((v70 - 1) <= 9) {
            goto LABEL_129;
          }
          goto LABEL_133;
        }
        v49 = (const char *)StringValue;
        memset(&__dst, 0, sizeof(__dst));
        std::string::assign(&__dst, (const std::string::value_type *)StringValue);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v50 = &__dst;
        }
        else {
          char v50 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if (strlen((const char *)v50) - 1 > 9)
        {
          v63 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v63)
          {
            v64 = v63;
            if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_118;
            }
LABEL_101:
            main_cold_20();
LABEL_118:
            int v52 = 1;
            goto LABEL_119;
          }
          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_118;
          }
        }
        else
        {
          int v51 = atoi(v49);
          if (v51 >= 1)
          {
            int v52 = v51 + 1;
LABEL_119:
            std::to_string(&__src, v52);
            char v206 = 18;
            strcpy(__p, "num_daemon_restart");
            v214 = __p;
            v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&rcp_settings, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v214);
            v68 = (void **)(v67 + 7);
            if (*((char *)v67 + 79) < 0) {
              operator delete(*v68);
            }
            *(std::string *)v68 = __src;
            *((unsigned char *)&__src.__r_.__value_.__s + 23) = 0;
            __src.__r_.__value_.__s.__data_[0] = 0;
            if (v206 < 0)
            {
              operator delete(*(void **)__p);
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__src.__r_.__value_.__l.__data_);
              }
            }
            goto LABEL_124;
          }
          v65 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v65)
          {
            v66 = v65;
            if (!syslog_is_the_mask_enabled(7) || !os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_118;
            }
            goto LABEL_101;
          }
          if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_118;
          }
        }
        PcapManager::start_pcap_capture();
        goto LABEL_118;
      }
      uint64_t v25 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v25)
      {
        long long v26 = v25;
        if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          int v27 = (_os_feature_enabled_impl() & 1) != 0
             || CFPreferencesGetAppBooleanValue(@"ThreadServiceEnabled", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0) != 0;
          main_cold_42((uint8_t *)&__dst, v27, v26);
        }
        goto LABEL_330;
      }
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_330;
      }
LABEL_107:
      PcapManager::start_pcap_capture();
      goto LABEL_330;
    }
    uint64_t v16 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v16)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_330;
      }
      goto LABEL_107;
    }
    uint64_t v17 = v16;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      main_cold_2(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  else
  {
    long long v53 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (!v53)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_330;
      }
      goto LABEL_107;
    }
    std::string v54 = v53;
    if (syslog_is_the_mask_enabled(3) && os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      main_cold_44(v54, v55, v56, v57, v58, v59, v60, v61);
    }
  }
LABEL_330:
  if (SHIBYTE(v210) < 0) {
    operator delete(v209[0]);
  }
  return 0;
}

void sub_10016E448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProcessNetif (void *a1, unsigned __int8 a2, char **a3)
{
  char ThreadNetifName = otSysGetThreadNetifName();
  otSysGetThreadNetifIndex();
  otCliOutputFormat((ot::Cli::Interpreter *)"%s:%u\r\n", v4, v5, v6, v7, v8, v9, v10, ThreadNetifName);
  return 0;
}

void OUTLINED_FUNCTION_5_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_11_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

uint64_t _GLOBAL__sub_I_main_cpp()
{
  qword_1004B6200 = 0;
  qword_1004B61F8 = 0;
  network_monitor_settings = (uint64_t)&qword_1004B61F8;
  return __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &network_monitor_settings, (void *)&_mh_execute_header);
}

unint64_t in6_addr_to_string@<X0>(const in6_addr *a1@<X0>, void *a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  long long v9 = 0u;
  *(_WORD *)__s = 14906;
  inet_ntop(30, a1, __s, 0x2Eu);
  unint64_t result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = result;
  if (result >= 0x17)
  {
    uint64_t v5 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v5 = result | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v7 = operator new(v5 + 1);
    a2[1] = v4;
    a2[2] = v6 | 0x8000000000000000;
    *a2 = v7;
    a2 = v7;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  unint64_t result = (unint64_t)memcpy(a2, __s, v4);
LABEL_9:
  *((unsigned char *)a2 + v4) = 0;
  return result;
}

BOOL str_to_in6_addr(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    unsigned int v3 = (const char *)a1;
  }
  else {
    unsigned int v3 = *(const char **)a1;
  }
  return inet_pton(30, v3, a2) == 1;
}

uint64_t make_slaac_addr_from_eui64(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  return *(void *)a1;
}

void in6_addr_apply_mask(in6_addr *a1, unsigned int a2)
{
  if (a2 >= 0x80) {
    unint64_t v3 = 128;
  }
  else {
    unint64_t v3 = a2;
  }
  bzero(&a1->__u6_addr8[(v3 + 7) >> 3], 16 - ((v3 + 7) >> 3));
  if ((v3 & 7) != 0) {
    a1->__u6_addr8[v3 >> 3] &= -256 >> (v3 & 7);
  }
}

void sub_10016EEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016EFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016EFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10016F0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016F158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016F210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016F484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016F560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016F600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10016F6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_CtrInternalClient_mm()
{
}

void wcm_create_xpc_connection()
{
  xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.WirelessCoexManager", 0, 0);
  WCMClient_Rcp::wrm_xpc_connection = (uint64_t)mach_service;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  int v2 = logging_obg;
  if (mach_service)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          int v3 = 136315138;
          size_t v4 = "wcm_create_xpc_connection";
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WCM: Create XPC connection %s, Notify WRM", (uint8_t *)&v3, 0xCu);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    xpc_connection_set_event_handler((xpc_connection_t)WCMClient_Rcp::wrm_xpc_connection, &__block_literal_global_7);
    xpc_connection_activate((xpc_connection_t)WCMClient_Rcp::wrm_xpc_connection);
  }
  else if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      size_t v4 = "wcm_create_xpc_connection";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WCM: Create XPC connection Obj Failure %s", (uint8_t *)&v3, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

void __wcm_create_xpc_connection_block_invoke(id a1, void *a2)
{
}

void wcm_handle_event(void *a1)
{
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_error)
  {
    int v2 = xpc_copy_description(a1);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      size_t v4 = logging_obg;
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          int v7 = 136315394;
          uint64_t v8 = "wcm_handle_event";
          __int16 v9 = 2082;
          string = v2;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "WCM: %s Unexpected XPC connection event: %{public}s", (uint8_t *)&v7, 0x16u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    free(v2);
    return;
  }
  uint64_t v5 = log_get_logging_obg("com.apple.threadradiod", "default");
  uint64_t v6 = v5;
  if (a1 != &_xpc_error_connection_interrupted)
  {
    if (v5)
    {
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315394;
        uint64_t v8 = "wcm_handle_event";
        __int16 v9 = 2082;
        string = xpc_dictionary_get_string(a1, _xpc_error_key_description);
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "WCM: %s XPC connection error: %{public}s", (uint8_t *)&v7, 0x16u);
      }
      return;
    }
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_20:
    -[PowerEventHandler_Rcp init:]();
    return;
  }
  if (!v5)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_20;
  }
  if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    uint64_t v8 = "wcm_handle_event";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "WCM: %s XPC connection interrupted ", (uint8_t *)&v7, 0xCu);
  }
}

void wcm_close_xpc_connection()
{
  uint64_t v0 = WCMClient_Rcp::wrm_xpc_connection;
  logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  int v2 = logging_obg;
  if (v0)
  {
    if (logging_obg)
    {
      if (syslog_is_the_mask_enabled(6))
      {
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          int v3 = 136315138;
          size_t v4 = "wcm_close_xpc_connection";
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WCM: Closing XPC connection %s", (uint8_t *)&v3, 0xCu);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    xpc_release((xpc_object_t)WCMClient_Rcp::wrm_xpc_connection);
    WCMClient_Rcp::wrm_xpc_connection = 0;
  }
  else if (logging_obg)
  {
    if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      size_t v4 = "wcm_close_xpc_connection";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WCM: XPC connection already closed %s", (uint8_t *)&v3, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    -[PowerEventHandler_Rcp init:]();
  }
}

uint64_t wcm_get_xpc_connection_object()
{
  uint64_t v0 = WCMClient_Rcp::wrm_xpc_connection;
  if (!WCMClient_Rcp::wrm_xpc_connection)
  {
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      int v3 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v4 = 136315138;
        uint64_t v5 = "wcm_get_xpc_connection_object";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "WCM: XPC connection Object NULL %s", (uint8_t *)&v4, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
  return v0;
}

void wcm_notify(char a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __wcm_notify_block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  char v2 = a1;
  dispatch_async((dispatch_queue_t)WCMClient_Rcp::wcmXPCQueue, block);
}

void __wcm_notify_block_invoke(uint64_t a1)
{
  wcm_create_xpc_connection();
  if (WCMClient_Rcp::wrm_xpc_connection)
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg)
    {
      int v4 = logging_obg;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(unsigned __int8 *)(a1 + 32);
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "wcm_notify_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "WCM: %s ThreadSession = %d, Notify WRM", buf, 0x12u);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
    int v8 = *(unsigned __int8 *)(a1 + 32);
    if (v8) {
      uint64_t v9 = 1401;
    }
    else {
      uint64_t v9 = 1402;
    }
    xpc_object_t v10 = xpc_uint64_create(v9);
    xpc_dictionary_set_BOOL(v2, "kWCMThreadState", v8);
    *(_OWORD *)buf = *(_OWORD *)off_100499168;
    v12[0] = v10;
    v12[1] = v2;
    xpc_object_t v11 = xpc_dictionary_create((const char *const *)buf, v12, 2uLL);
    xpc_connection_send_message((xpc_connection_t)WCMClient_Rcp::wrm_xpc_connection, v11);
    xpc_release(v10);
    xpc_release(v2);
    xpc_release(v11);
    wcm_close_xpc_connection();
  }
  else
  {
    uint64_t v6 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v6)
    {
      int v7 = v6;
      if (syslog_is_the_mask_enabled(6) && os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "wcm_notify_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WCM: XPC connection Object NULL %s", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      -[PowerEventHandler_Rcp init:]();
    }
  }
}

dispatch_queue_t _GLOBAL__sub_I_WCMClient_rcp_cpp()
{
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  dispatch_queue_t result = dispatch_queue_create("wcm-notify-xpc-queue", v0);
  WCMClient_Rcp::wcmXPCQueue = (uint64_t)result;
  return result;
}

BOOL nl::wpantund::ncp_state_is_sleeping(int a1)
{
  return ((a1 - 3) & 0xFFFFFFF7) == 0;
}

BOOL nl::wpantund::ncp_state_has_joined(int a1)
{
  return (a1 & 0xFFFFFFFC) == 8;
}

BOOL nl::wpantund::ncp_state_is_joining(int a1)
{
  return (a1 & 0xFFFFFFFE) == 6;
}

uint64_t nl::wpantund::ncp_state_is_interface_up(unsigned int a1)
{
  return (a1 < 0xC) & (0x980u >> a1);
}

uint64_t nl::wpantund::ncp_state_is_commissioned(unsigned int a1)
{
  return (a1 < 0xC) & (0xF20u >> a1);
}

BOOL nl::wpantund::ncp_state_is_initializing(int a1)
{
  return (a1 & 0xFFFFFFFD) == 0;
}

BOOL nl::wpantund::ncp_state_is_joining_or_joined(int a1)
{
  return (a1 - 6) < 6;
}

BOOL nl::wpantund::ncp_state_is_associated(int a1)
{
  return (a1 & 0xFFFFFFFC) == 8;
}

BOOL nl::wpantund::ncp_state_is_detached_from_ncp(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t nl::wpantund::ncp_state_is_busy(unsigned int a1)
{
  return (a1 > 0xB) | (0x4E5u >> a1) & 1;
}

char *nl::wpantund::ncp_state_to_string@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      int v3 = "uninitialized";
      goto LABEL_16;
    case 1:
      *(unsigned char *)(a2 + 23) = 19;
      strcpy((char *)a2, "uninitialized:fault");
      return result;
    case 2:
      dispatch_queue_t result = (char *)operator new(0x19uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_1003F2EB0;
      strcpy(result, "uninitialized:upgrading");
      return result;
    case 3:
      *(unsigned char *)(a2 + 23) = 18;
      strcpy((char *)a2, "offline:deep-sleep");
      return result;
    case 4:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "offline");
      return result;
    case 5:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "offline:commissioned");
      return result;
    case 6:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "associating");
      return result;
    case 7:
      dispatch_queue_t result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_1003F2F00;
      strcpy(result, "associating:credentials-needed");
      return result;
    case 8:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "associated");
      return result;
    case 9:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "associated:no-parent");
      return result;
    case 10:
      dispatch_queue_t result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      long long v4 = xmmword_1003F3000;
      int v5 = "associated:netwake-waking";
      goto LABEL_14;
    case 11:
      dispatch_queue_t result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      long long v4 = xmmword_1003F3000;
      int v5 = "associated:netwake-asleep";
LABEL_14:
      *(_OWORD *)(a2 + 8) = v4;
      *(_OWORD *)dispatch_queue_t result = *(_OWORD *)v5;
      *(_OWORD *)(result + 9) = *(_OWORD *)(v5 + 9);
      result[25] = 0;
      break;
    default:
      int v3 = "unknown-state";
LABEL_16:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v3;
      *(void *)(a2 + 5) = *(void *)(v3 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      break;
  }
  return result;
}

uint64_t nl::wpantund::ncp_wed_status_to_string@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 2)
  {
    a2[23] = 16;
    strcpy(a2, "wed_conn_failure");
  }
  else if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "wed_added");
  }
  else if (result)
  {
    a2[23] = 14;
    strcpy(a2, "unknown-status");
  }
  else
  {
    a2[23] = 11;
    strcpy(a2, "wed_removed");
  }
  return result;
}

char *nl::wpantund::ncp_wed_disconnect_reason_to_string@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result == 2)
  {
    dispatch_queue_t result = (char *)operator new(0x20uLL);
    *(void *)a2 = result;
    *(_OWORD *)(a2 + 8) = xmmword_1003F3000;
    strcpy(result, "threadradiod-daemon-crash");
  }
  else if (result == 1)
  {
    *(unsigned char *)(a2 + 23) = 8;
    strcpy((char *)a2, "linkloss");
  }
  else if (result)
  {
    *(unsigned char *)(a2 + 23) = 14;
    strcpy((char *)a2, "unknown-reason");
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 4;
    strcpy((char *)a2, "none");
  }
  return result;
}

std::string *nl::wpantund::node_type_to_string@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (a1 < 0xA) {
    return std::string::assign(a2, off_100499198[a1]);
  }
  snprintf(__str, 0x10uLL, "(node-type-%u)", a1);
  return std::string::assign(a2, __str);
}

void sub_1001706B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nl::wpantund::string_to_node_type(char *a1)
{
  int v2 = a1[23];
  if (v2 < 0)
  {
    int v5 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, "end-device")
      && strcasecmp(v5, "end")
      && strcasecmp(v5, "e")
      && (*((void *)a1 + 1) != 1 || *v5 != 50))
    {
      if (strcasecmp(v5, "sleepy-end-device"))
      {
        if (strcasecmp(v5, "sed"))
        {
          uint64_t v9 = *(const char **)a1;
          if (*((void *)a1 + 1) != 1 || *v9 != 51)
          {
            if (!strcasecmp(*(const char **)a1, "synchronized-sleepy-end-device")) {
              return 4;
            }
LABEL_32:
            if (!strcasecmp(v9, "ssed")
              || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "4"))
            {
              return 4;
            }
            if (a1[23] < 0)
            {
              xpc_object_t v10 = *(const char **)a1;
              if (!strcasecmp(*(const char **)a1, "router")) {
                return 1;
              }
            }
            else
            {
              xpc_object_t v10 = a1;
              if (!strcasecmp(a1, "router")) {
                return 1;
              }
            }
            if (!strcasecmp(v10, "r")
              || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "1"))
            {
              return 1;
            }
            if (a1[23] < 0)
            {
              xpc_object_t v11 = *(const char **)a1;
              if (strcasecmp(*(const char **)a1, "leader"))
              {
                if (!strcasecmp(v11, "nl-lurker")) {
                  return 6;
                }
LABEL_48:
                if (!strcasecmp(v11, "lurker")
                  || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "6"))
                {
                  return 6;
                }
                if (a1[23] < 0)
                {
                  uint64_t v12 = *(const char **)a1;
                  if (!strcasecmp(*(const char **)a1, "sleepy-router")) {
                    return 8;
                  }
                }
                else
                {
                  uint64_t v12 = a1;
                  if (!strcasecmp(a1, "sleepy-router")) {
                    return 8;
                  }
                }
                if (strcasecmp(v12, "sr"))
                {
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "8")) {
                    return 8;
                  }
                  else {
                    return 0;
                  }
                }
                return 8;
              }
            }
            else if (strcasecmp(a1, "leader"))
            {
              xpc_object_t v11 = a1;
              if (!strcasecmp(a1, "nl-lurker")) {
                return 6;
              }
              goto LABEL_48;
            }
            return 7;
          }
        }
      }
      return 3;
    }
    return 2;
  }
  if (!strcasecmp(a1, "end-device") || !strcasecmp(a1, "end") || !strcasecmp(a1, "e")) {
    return 2;
  }
  int v3 = *a1;
  if (v2 == 1 && v3 == 50) {
    return 2;
  }
  if (!strcasecmp(a1, "sleepy-end-device")) {
    return 3;
  }
  int v6 = strcasecmp(a1, "sed");
  BOOL v8 = v2 == 1 && v3 == 51;
  uint64_t result = 3;
  if (v6 && !v8)
  {
    uint64_t v9 = a1;
    if (!strcasecmp(a1, "synchronized-sleepy-end-device")) {
      return 4;
    }
    goto LABEL_32;
  }
  return result;
}

void nl::wpantund::address_flags_to_string(nl::wpantund *this@<X0>, std::string *a2@<X8>)
{
  char v2 = (char)this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((char)this < 0) {
    std::string::value_type v4 = 70;
  }
  else {
    std::string::value_type v4 = 45;
  }
  std::string::push_back(a2, v4);
  if ((v2 & 0x40) != 0) {
    std::string::value_type v5 = 82;
  }
  else {
    std::string::value_type v5 = 45;
  }
  std::string::push_back(a2, v5);
  if ((v2 & 0x20) != 0) {
    std::string::value_type v6 = 67;
  }
  else {
    std::string::value_type v6 = 45;
  }
  std::string::push_back(a2, v6);
  if ((v2 & 0x10) != 0) {
    std::string::value_type v7 = 115;
  }
  else {
    std::string::value_type v7 = 45;
  }
  std::string::push_back(a2, v7);
  std::string::push_back(a2, 32);
  if ((v2 & 8) != 0) {
    std::string::value_type v8 = 100;
  }
  else {
    std::string::value_type v8 = 45;
  }
  std::string::push_back(a2, v8);
  if ((v2 & 4) != 0) {
    std::string::value_type v9 = 83;
  }
  else {
    std::string::value_type v9 = 45;
  }
  std::string::push_back(a2, v9);
  if ((v2 & 2) != 0) {
    std::string::value_type v10 = 68;
  }
  else {
    std::string::value_type v10 = 45;
  }
  std::string::push_back(a2, v10);
  if (v2) {
    std::string::value_type v11 = 71;
  }
  else {
    std::string::value_type v11 = 45;
  }
  std::string::push_back(a2, v11);
}

void sub_100170B6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nl::wpantund::flags_to_string(nl::wpantund *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  char v4 = (char)this;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2) {
    std::string::value_type v6 = a2;
  }
  else {
    std::string::value_type v6 = "76543210";
  }
  if ((this & 0x80) != 0) {
    std::string::value_type v7 = *v6;
  }
  else {
    std::string::value_type v7 = 45;
  }
  std::string::push_back(a3, v7);
  if ((v4 & 0x40) != 0) {
    std::string::value_type v8 = v6[1];
  }
  else {
    std::string::value_type v8 = 45;
  }
  std::string::push_back(a3, v8);
  if ((v4 & 0x20) != 0) {
    std::string::value_type v9 = v6[2];
  }
  else {
    std::string::value_type v9 = 45;
  }
  std::string::push_back(a3, v9);
  if ((v4 & 0x10) != 0) {
    std::string::value_type v10 = v6[3];
  }
  else {
    std::string::value_type v10 = 45;
  }
  std::string::push_back(a3, v10);
  std::string::push_back(a3, 32);
  if ((v4 & 8) != 0) {
    std::string::value_type v11 = v6[4];
  }
  else {
    std::string::value_type v11 = 45;
  }
  std::string::push_back(a3, v11);
  if ((v4 & 4) != 0) {
    std::string::value_type v12 = v6[5];
  }
  else {
    std::string::value_type v12 = 45;
  }
  std::string::push_back(a3, v12);
  if ((v4 & 2) != 0) {
    std::string::value_type v13 = v6[6];
  }
  else {
    std::string::value_type v13 = 45;
  }
  std::string::push_back(a3, v13);
  if (v4) {
    std::string::value_type v14 = v6[7];
  }
  else {
    std::string::value_type v14 = 45;
  }
  std::string::push_back(a3, v14);
}

void sub_100170CB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nl::wpantund::string_to_ncp_state(void *a1)
{
  uint64_t v1 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a1 + 23);
    switch(*((unsigned char *)a1 + 23))
    {
      case 0x12:
        goto LABEL_3;
      case 0x13:
        if (*a1 != 0x616974696E696E75
          || a1[1] != 0x61663A64657A696CLL
          || *(void *)((char *)a1 + 11) != 0x746C7561663A6465)
        {
          goto LABEL_107;
        }
        return 1;
      case 0x14:
        goto LABEL_80;
      case 0x17:
        if (*a1 == 0x616974696E696E75
          && a1[1] == 0x70753A64657A696CLL
          && *(void *)((char *)a1 + 15) == 0x676E696461726770)
        {
          return 2;
        }
        if (v2 != 20)
        {
          if (v2 == 18)
          {
LABEL_3:
            if (*a1 == 0x3A656E696C66666FLL && a1[1] == 0x656C732D70656564 && *((_WORD *)a1 + 8) == 28773) {
              return 3;
            }
          }
          goto LABEL_107;
        }
LABEL_80:
        if (*a1 == 0x3A656E696C66666FLL && a1[1] == 0x697373696D6D6F63 && *((_DWORD *)a1 + 4) == 1684369007) {
          return 5;
        }
LABEL_99:
        uint64_t v18 = a1;
        if (v2 != 20) {
          goto LABEL_107;
        }
        break;
      case 0x1E:
        if (*a1 == 0x746169636F737361
          && a1[1] == 0x646572633A676E69
          && a1[2] == 0x2D736C6169746E65
          && *(void *)((char *)a1 + 22) == 0x64656465656E2D73)
        {
          return 7;
        }
        goto LABEL_99;
      default:
        goto LABEL_107;
    }
LABEL_100:
    uint64_t v28 = *v18;
    uint64_t v29 = v18[1];
    int v30 = *((_DWORD *)v18 + 4);
    if (v28 == 0x746169636F737361 && v29 == 0x61702D6F6E3A6465 && v30 == 1953391986) {
      return 9;
    }
    goto LABEL_107;
  }
  uint64_t v6 = a1[1];
  if (v6 == 19)
  {
    BOOL v7 = *(void *)*a1 == 0x616974696E696E75 && *(void *)(*a1 + 8) == 0x61663A64657A696CLL;
    if (v7 && *(void *)(*a1 + 11) == 0x746C7561663A6465) {
      return 1;
    }
  }
  if (v6 == 23)
  {
    if (*(void *)*a1 == 0x616974696E696E75
      && *(void *)(*a1 + 8) == 0x70753A64657A696CLL
      && *(void *)(*a1 + 15) == 0x676E696461726770)
    {
      return 2;
    }
    uint64_t v6 = a1[1];
  }
  if (v6 == 18)
  {
    if (*(void *)*a1 == 0x3A656E696C66666FLL
      && *(void *)(*a1 + 8) == 0x656C732D70656564
      && *(_WORD *)(*a1 + 16) == 28773)
    {
      return 3;
    }
    uint64_t v6 = a1[1];
  }
  if (v6 == 20)
  {
    if (*(void *)*a1 == 0x3A656E696C66666FLL
      && *(void *)(*a1 + 8) == 0x697373696D6D6F63
      && *(_DWORD *)(*a1 + 16) == 1684369007)
    {
      return 5;
    }
    uint64_t v6 = a1[1];
  }
  if (v6 == 30)
  {
    if (*(void *)*a1 == 0x746169636F737361
      && *(void *)(*a1 + 8) == 0x646572633A676E69
      && *(void *)(*a1 + 16) == 0x2D736C6169746E65
      && *(void *)(*a1 + 22) == 0x64656465656E2D73)
    {
      return 7;
    }
    uint64_t v6 = a1[1];
  }
  if (v6 == 20)
  {
    uint64_t v18 = (void *)*a1;
    goto LABEL_100;
  }
LABEL_107:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "associated:netwake-asleep")) {
    return 11;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "associated:netwake-waking")) {
    return 10;
  }
  if ((*((char *)v1 + 23) & 0x80000000) == 0)
  {
    if (*v1 == 0x616974696E696E75 && *(void *)((char *)v1 + 5) == 0x64657A696C616974) {
      return 0;
    }
    if (*(_DWORD *)v1 != 1818650223 || *(_DWORD *)((char *)v1 + 3) != 1701734764)
    {
      if (*v1 != 0x746169636F737361 || *(void *)((char *)v1 + 3) != 0x676E69746169636FLL) {
        return 8 * (strncmp((const char *)v1, "associated", 0xAuLL) == 0);
      }
      return 6;
    }
    return 4;
  }
  uint64_t v1 = (void *)*v1;
  uint64_t result = strncmp((const char *)v1, "uninitialized", 0xDuLL);
  if (result)
  {
    if (strncmp((const char *)v1, "offline", 7uLL))
    {
      if (strncmp((const char *)v1, "associating", 0xBuLL)) {
        return 8 * (strncmp((const char *)v1, "associated", 0xAuLL) == 0);
      }
      return 6;
    }
    return 4;
  }
  return result;
}

id base64StringFromData(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 base64EncodedStringWithOptions:0];
  }
  else
  {
    int v2 = THCredentialsServerLogHandleForCategory(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      base64StringFromData_cold_1();
    }

    uint64_t v1 = 0;
  }

  return v1;
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void base64StringFromData_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1_1((void *)&_mh_execute_header, v0, v1, "%s:%d: Failed to decode data field!", v2, v3, v4, v5, v6);
}

id dataFromBase64String(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v1 options:0];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id base64StringFromData_0(void *a1)
{
  if (a1)
  {
    a1 = [a1 base64EncodedStringWithOptions:0];
    uint64_t v1 = vars8;
  }
  return a1;
}

void OUTLINED_FUNCTION_2_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

id THCredentialsServerLogHandleForCategory(int a1)
{
  if (THCredentialsServerLogHandleForCategory_onceToken != -1) {
    dispatch_once(&THCredentialsServerLogHandleForCategory_onceToken, &__block_literal_global_8);
  }
  id v2 = (void *)THCredentialsServerLogHandleForCategory_logHandles[a1];

  return v2;
}

void sub_1001772EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001779EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10017929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_10017C26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017C998(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10017FC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100180074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100181264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

id generatreRandomSSID()
{
  uint64_t v0 = +[NSMutableString stringWithCapacity:0];
  uint32_t v1 = arc4random();
  id v2 = +[NSString stringWithFormat:@"%s%d", "ThSSID", v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1];
  [v0 appendString:v2];

  uint64_t v3 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    generatreRandomSSID_cold_1();
  }

  return v0;
}

id generatreRandomPWD()
{
  uint64_t v0 = +[NSMutableString stringWithCapacity:0];
  uint32_t v1 = arc4random();
  id v2 = +[NSString stringWithFormat:@"%s%d", "ThPWD", v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1];
  [v0 appendString:v2];

  uint64_t v3 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    generatreRandomPWD_cold_1();
  }

  return v0;
}

void sub_100189694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018A760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id generateNewBorderAgentIDAsString()
{
  uint64_t v0 = getUUIDAsStr();
  uint32_t v1 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    id v2 = [v0 substringToIndex:16];
    int v5 = 138412546;
    uint8_t v6 = v2;
    __int16 v7 = 2112;
    std::string::value_type v8 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Generated new BAID: %@, full string: %@", (uint8_t *)&v5, 0x16u);
  }
  uint64_t v3 = [v0 substringToIndex:16];

  return v3;
}

uint64_t getRandomNumberBetween(int a1, int a2)
{
  return arc4random() % (a2 - a1 + 1) + a1;
}

{
  uint64_t result;
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;

  uint64_t result = arc4random();
  int v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_6;
  }
  uint8_t v6 = __OFADD__(v5, 1);
  __int16 v7 = v5 + 1;
  if (v6 || (std::string::value_type v8 = result % v7, result = a1 + v8, __CFADD__(a1, v8)))
  {
    __break(0x5500u);
LABEL_6:
    __break(0x5515u);
  }
  return result;
}

id generateNewXPANIDAsString()
{
  uint64_t v0 = getUUIDAsStr();
  uint32_t v1 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    id v2 = [v0 substringToIndex:16];
    int v5 = 138412546;
    uint8_t v6 = v2;
    __int16 v7 = 2112;
    std::string::value_type v8 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Generated new XPANID: %@, full string: %@", (uint8_t *)&v5, 0x16u);
  }
  uint64_t v3 = [v0 substringToIndex:16];

  return v3;
}

id generateNewNetworkKeyAsByteArray()
{
  uint64_t v0 = +[NSMutableData dataWithLength:16];
  id v1 = [v0 length];
  id v2 = v0;
  if (SecRandomCopyBytes(kSecRandomDefault, (size_t)v1, [v2 mutableBytes]))
  {
    std::string::value_type v8 = THCredentialsServerLogHandleForCategory(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      generateNewNetworkKeyAsByteArray_cold_1();
    }

    __assert_rtn("generateNewNetworkKeyAsByteArray", "THThreadNetworkCredentialsKeychainBackingStore.m", 5723, "false");
  }
  id v3 = objc_alloc((Class)NSData);
  id v4 = v2;
  id v5 = objc_msgSend(v3, "initWithBytes:length:", objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));
  uint8_t v6 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Generated the new Network Key :: \"%@\" ", (uint8_t *)&v9, 0xCu);
  }

  return v5;
}

id generatreNewNetworkName()
{
  uint64_t v0 = +[NSMutableString stringWithCapacity:0];
  uint32_t v1 = arc4random();
  id v2 = +[NSString stringWithFormat:@"%s%d", "MyHome", v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1];
  [v0 appendString:v2];

  id v3 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint8_t v6 = v0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Generated new Network Name: %@", buf, 0xCu);
  }

  return v0;
}

uint64_t srp_randombytes(void *a1, size_t a2)
{
  return 1;
}

id getUUIDAsStr()
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v0 = +[NSUUID UUID];
  [v0 getUUIDBytes:v6];

  uint32_t v1 = +[NSData dataWithBytes:v6 length:16];
  encode_data_into_string((unsigned __int8 *)v6, 16, __b, 0x24uLL, 0);
  id v2 = +[NSString stringWithUTF8String:__b];
  id v3 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    getUUIDAsStr_cold_1();
  }

  return v2;
}

id getUUIDAsByteArray()
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v0 = +[NSUUID UUID];
  [v0 getUUIDBytes:v6];

  uint32_t v1 = +[NSData dataWithBytes:v6 length:16];
  id v2 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Generated new uuid_temp: %@", (uint8_t *)&v4, 0xCu);
  }

  return v1;
}

unint64_t generateNewXPANIDAsInt()
{
  uint64_t v0 = getUUIDAsByteArray();
  unint64_t v3 = 0;
  [v0 getBytes:&v3 length:8];
  unint64_t v3 = bswap64(v3);
  NSLog(@"Generated new XPANID Temp: %@, XPANID: 0x%016llx", v0, v3);
  unint64_t v1 = v3;

  return v1;
}

id generateCommisonerCredentialAsString()
{
  uint64_t v0 = getUUIDAsStr();
  unint64_t v1 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    int v4 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Generated new CC \"%@\" ", (uint8_t *)&v3, 0xCu);
  }

  return v0;
}

id generateNewNetworkKeyAsString()
{
  uint64_t v0 = getUUIDAsStr();
  unint64_t v1 = THCredentialsServerLogHandleForCategory(1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    int v4 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Generated new Master Key \"%@\" ", (uint8_t *)&v3, 0xCu);
  }

  return v0;
}

id generateOTBridgeNSStringfromCArray(unsigned __int8 *a1, unsigned int a2)
{
  if (a1)
  {
    int v3 = a1;
    int v4 = +[NSMutableString stringWithCapacity:2 * a2];
    if (a2)
    {
      uint64_t v5 = a2;
      do
      {
        unsigned int v6 = *v3++;
        __int16 v7 = +[NSString stringWithFormat:@"%02lx", v6];
        [v4 appendString:v7];

        --v5;
      }
      while (v5);
    }
    std::string::value_type v8 = +[NSString stringWithString:v4];
  }
  else
  {
    std::string::value_type v8 = +[NSString string];
  }

  return v8;
}

id getOTBridgeRandomAlphanumericPSKdWithLength(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = +[NSMutableString stringWithCapacity:a1];
  if (v1 >= 1)
  {
    do
    {
      [v2 appendFormat:@"%C", objc_msgSend(@"ABCDEFGHJKLMNPRSTUVWXY0123456789", "characterAtIndex:", arc4random()% (unint64_t)objc_msgSend(@"ABCDEFGHJKLMNPRSTUVWXY0123456789", "length"))];
      --v1;
    }
    while (v1);
  }

  return v2;
}

void OUTLINED_FUNCTION_3_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_9_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x1Cu);
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_16(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_19_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

uint64_t OUTLINED_FUNCTION_25()
{
  return v0;
}

void OUTLINED_FUNCTION_26(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void generatreRandomSSID_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0((void *)&_mh_execute_header, v0, v1, "Generated new SSID: %@", v2, v3, v4, v5, v6);
}

void generatreRandomPWD_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_0((void *)&_mh_execute_header, v0, v1, "Generated new pwd: %@", v2, v3, v4, v5, v6);
}

void generateNewNetworkKeyAsByteArray_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "Failed to generated new Network Key, unexpected error.. asserting.. ", v2, v3, v4, v5, v6);
}

void getUUIDAsStr_cold_1()
{
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_17();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x16u);
}

void OUTLINED_FUNCTION_3_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_4_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x26u);
}

void OUTLINED_FUNCTION_6_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_8_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

id scrubRecords(void *a1)
{
  id v1 = a1;
  os_log_type_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v1 count]);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          objc_msgSend(v3, "addObject:", *(void *)(*((void *)&v11 + 1) + 8 * i), (void)v11);
        }
        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }

    id v9 = [v3 copy];
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void OUTLINED_FUNCTION_6_3(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

uint64_t spinel_packed_uint_decode(unsigned char *a1, int a2, _DWORD *a3)
{
  int v6 = 0;
  int v5 = 0;
  unsigned int v4 = 0;
  while (a2 && v4 < 0x20uLL)
  {
    v5 |= (*a1 & 0x7F) << v4;
    v4 += 7;
    ++v6;
    ++a1;
    --a2;
    if ((*(a1 - 1) & 0x80) != 0x80) {
      goto LABEL_6;
    }
  }
  int v6 = -1;
LABEL_6:
  if (v6 > 0 && a3) {
    *a3 = v5;
  }
  return v6;
}

uint64_t spinel_packed_uint_size(unsigned int a1)
{
  if (a1 >= 0x80)
  {
    if (a1 >= 0x4000)
    {
      if (a1 >= 0x200000)
      {
        if (a1 >= 0x10000000) {
          return 5;
        }
        else {
          return 4;
        }
      }
      else
      {
        return 3;
      }
    }
    else
    {
      return 2;
    }
  }
  else
  {
    return 1;
  }
}

uint64_t spinel_packed_uint_encode(unsigned char *a1, int a2, unsigned int a3)
{
  unsigned int v7 = a3;
  unsigned int v6 = spinel_packed_uint_size(a3);
  if (a2 >= (int)v6)
  {
    for (int i = 0; i != v6 - 1; ++i)
    {
      uint64_t v3 = a1++;
      *uint64_t v3 = v7 & 0x7F | 0x80;
      v7 >>= 7;
    }
    *a1 = v7 & 0x7F;
  }
  return v6;
}

unsigned char *spinel_next_packed_datatype(unsigned char *a1)
{
  int v4 = 0;
  do
  {
    int v3 = (char)*++a1;
    if (v3 == 40)
    {
      ++v4;
    }
    else if (v3 == 41 && !--v4)
    {
      ++a1;
    }
    BOOL v2 = 0;
    if (v4 > 0) {
      BOOL v2 = *a1 != 0;
    }
  }
  while (v2);
  return a1;
}

uint64_t spinel_datatype_unpack_in_place(unsigned __int8 *a1, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v14 = a1;
  unsigned int v13 = a2;
  long long v12 = a3;
  int v11 = 0;
  uint64_t v10 = &a9;
  return spinel_datatype_vunpack_(1, a1, a2, a3, &v10);
}

uint64_t spinel_datatype_vunpack_(char a1, unsigned __int8 *a2, unsigned int a3, char *packed_datatype, void **a5)
{
  char v50 = a1 & 1;
  unsigned int v48 = a3;
  unsigned int v45 = 0;
  if (a3 >= 0x8000)
  {
LABEL_2:
    unsigned int v45 = -1;
    *__error() = 22;
    return v45;
  }
  while (2)
  {
    if (!*packed_datatype || *packed_datatype == 41) {
      return v45;
    }
    unsigned int v5 = *packed_datatype;
    BOOL v6 = v5 > 0x2E;
    uint64_t v7 = v5 - 46;
    if (v6)
    {
      uint64_t v9 = v7;
      char v8 = 1;
    }
    else
    {
      uint64_t v9 = v7;
      char v8 = 0;
    }
    if (v8) {
      goto LABEL_2;
    }
    switch(v9)
    {
      case 0:
        goto LABEL_111;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 40:
      case 41:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 56:
      case 57:
      case 58:
      case 60:
      case 61:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 71:
      case 72:
      case 73:
        goto LABEL_2;
      case 8:
        if (v48 < 0x10uLL) {
          goto LABEL_105;
        }
        if (v50)
        {
          if (*(*a5)++) {
            __memcpy_chk();
          }
        }
        else
        {
          uint64_t v16 = (unsigned __int8 **)*(*a5)++;
          if (v16) {
            void *v16 = a2;
          }
        }
        v45 += 16;
        a2 += 16;
        v48 -= 16;
        goto LABEL_111;
      case 21:
      case 53:
        int v11 = (unsigned __int8 *)*(*a5)++;
        if (!v48) {
          goto LABEL_105;
        }
        if (v11) {
          unsigned __int8 *v11 = *a2;
        }
        ++v45;
        ++a2;
        --v48;
        goto LABEL_111;
      case 22:
      case 54:
        unsigned __int16 v38 = 0;
        int v37 = a2;
        uint64_t v25 = (unsigned __int8 **)*(*a5)++;
        __int16 v36 = v25;
        long long v26 = (_DWORD *)*(*a5)++;
        uint64_t v35 = v26;
        char v34 = *spinel_next_packed_datatype(packed_datatype);
        if (*packed_datatype == 100 || v34 && v34 != 41)
        {
          int v40 = spinel_datatype_unpack(a2, v48, "S");
          int v37 = &a2[v40];
          if (v40 <= 0) {
            return v45;
          }
        }
        else
        {
          unsigned __int16 v38 = v48;
          int v40 = 0;
        }
        if ((int)v48 < v38 + v40) {
          goto LABEL_105;
        }
        if (v50)
        {
          if (!v35 || *v35 < v38) {
            goto LABEL_2;
          }
          __memcpy_chk();
        }
        else if (v36)
        {
          *__int16 v36 = v37;
        }
        if (v35) {
          _DWORD *v35 = v38;
        }
        unsigned __int16 v39 = v38 + v40;
        v45 += v39;
        a2 += v39;
        v48 -= v39;
        goto LABEL_111;
      case 23:
        if (v48 < 8uLL) {
          goto LABEL_105;
        }
        if (v50)
        {
          if (*(*a5)++) {
            __memcpy_chk();
          }
        }
        else
        {
          uint64_t v18 = (unsigned __int8 **)*(*a5)++;
          if (v18) {
            void *v18 = a2;
          }
        }
        v45 += 8;
        a2 += 8;
        v48 -= 8;
        goto LABEL_111;
      case 30:
      case 62:
        unsigned int v13 = (int *)*(*a5)++;
        if (v48 < 4uLL) {
          goto LABEL_105;
        }
        if (v13) {
          int *v13 = (a2[2] << 16) | (a2[3] << 24) | (a2[1] << 8) | *a2;
        }
        v45 += 4;
        a2 += 4;
        v48 -= 4;
        goto LABEL_111;
      case 37:
      case 69:
        long long v12 = (_WORD *)*(*a5)++;
        if (v48 < 2uLL) {
          goto LABEL_105;
        }
        if (v12) {
          _WORD *v12 = *a2 | (a2[1] << 8);
        }
        v45 += 2;
        a2 += 2;
        v48 -= 2;
        goto LABEL_111;
      case 38:
      case 70:
        unsigned __int16 v31 = 0;
        uint64_t v29 = a2;
        char v28 = *spinel_next_packed_datatype(packed_datatype);
        if (*packed_datatype == 116 || v28 && v28 != 41)
        {
          int v33 = spinel_datatype_unpack(a2, v48, "S");
          uint64_t v29 = &a2[v33];
          if (v33 <= 0) {
            return v45;
          }
        }
        else
        {
          unsigned __int16 v31 = v48;
          int v33 = 0;
        }
        if ((int)v48 >= v31 + v33)
        {
          int v30 = spinel_datatype_vunpack_(0, v29, v31, packed_datatype + 2, a5);
          if (v30 >= 0)
          {
            if (v33) {
              unsigned __int16 v32 = v31 + v33;
            }
            else {
              unsigned __int16 v32 = v30;
            }
            v45 += v32;
            a2 += v32;
            v48 -= v32;
LABEL_111:
            packed_datatype = spinel_next_packed_datatype(packed_datatype);
            continue;
          }
        }
LABEL_105:
        unsigned int v45 = -1;
        *__error() = 84;
        return v45;
      case 39:
        if (!v48)
        {
          unsigned int v45 = -2;
          *__error() = 84;
          return v45;
        }
        unint64_t v42 = spinel_strnlen((uint64_t)a2, v48) + 1;
        if (v42 > v48)
        {
          unsigned int v45 = -3;
          *__error() = 84;
          return v45;
        }
        if ((spinel_validate_utf8(a2) & 1) == 0)
        {
          unsigned int v45 = -4;
          *__error() = 22;
          return v45;
        }
        if (v50)
        {
          uint64_t v22 = *(*a5)++;
          uint64_t v41 = v22;
          unint64_t v23 = *(*a5)++;
          if (v41)
          {
            if (v23 < v42)
            {
              unsigned int v45 = -5;
              *__error() = 12;
              return v45;
            }
            __memcpy_chk();
          }
        }
        else
        {
          uint64_t v24 = (unsigned __int8 **)*(*a5)++;
          if (v24) {
            char *v24 = a2;
          }
        }
        v45 += v42;
        a2 += v42;
        v48 -= v42;
        goto LABEL_111;
      case 42:
      case 74:
        long long v14 = (unint64_t *)*(*a5)++;
        if (v48 < 8uLL) {
          goto LABEL_105;
        }
        if (v14) {
          unint64_t *v14 = (a2[2] << 16) | (a2[3] << 24) | (a2[1] << 8) | *a2 | ((unint64_t)((a2[6] << 16) | (a2[7] << 24) | (a2[5] << 8) | a2[4]) << 32);
        }
        v45 += 8;
        a2 += 8;
        v48 -= 8;
        goto LABEL_111;
      case 52:
        uint64_t v10 = (BOOL *)*(*a5)++;
        if (!v48) {
          goto LABEL_105;
        }
        if (v10) {
          BOOL *v10 = *a2 != 0;
        }
        ++v45;
        ++a2;
        --v48;
        goto LABEL_111;
      case 55:
        if (v48 < 6uLL) {
          goto LABEL_105;
        }
        if (v50)
        {
          if (*(*a5)++) {
            __memcpy_chk();
          }
        }
        else
        {
          uint64_t v20 = (unsigned __int8 **)*(*a5)++;
          if (v20) {
            *uint64_t v20 = a2;
          }
        }
        v45 += 6;
        a2 += 6;
        v48 -= 6;
        goto LABEL_111;
      case 59:
        uint64_t v21 = (_DWORD *)*(*a5)++;
        char v44 = v21;
        int v43 = spinel_packed_uint_decode(a2, v48, v21);
        if (v44 && *v44 >= 0x1FFFFFu)
        {
          unsigned int v45 = -1;
          *__error() = 34;
          return v45;
        }
        if (v43 <= 0 || v43 > (int)v48) {
          return v45;
        }
        v45 += v43;
        a2 += v43;
        v48 -= v43;
        goto LABEL_111;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t spinel_datatype_unpack(unsigned __int8 *a1, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v14 = a1;
  unsigned int v13 = a2;
  long long v12 = a3;
  int v11 = 0;
  uint64_t v10 = &a9;
  return spinel_datatype_vunpack_(0, a1, a2, a3, &v10);
}

uint64_t spinel_datatype_vunpack_in_place(unsigned __int8 *a1, unsigned int a2, char *a3, void *a4)
{
  uint64_t v10 = a1;
  unsigned int v9 = a2;
  char v8 = a3;
  uint64_t v7 = a4;
  int v6 = 0;
  unsigned int v5 = a4;
  return spinel_datatype_vunpack_(1, a1, a2, a3, &v5);
}

uint64_t spinel_datatype_vunpack(unsigned __int8 *a1, unsigned int a2, char *a3, void *a4)
{
  uint64_t v10 = a1;
  unsigned int v9 = a2;
  char v8 = a3;
  uint64_t v7 = a4;
  int v6 = 0;
  unsigned int v5 = a4;
  return spinel_datatype_vunpack_(0, a1, a2, a3, &v5);
}

uint64_t spinel_datatype_pack(BOOL *a1, unsigned int a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v14 = a1;
  unsigned int v13 = a2;
  long long v12 = a3;
  int v11 = 0;
  uint64_t v10 = (char **)&a9;
  return spinel_datatype_vpack_(a1, a2, a3, &v10);
}

uint64_t spinel_datatype_vpack_(BOOL *a1, unsigned int a2, unsigned char *a3, char ***a4)
{
  uint64_t v59 = a1;
  unsigned int v58 = a2;
  packed_datatype = a3;
  uint64_t v56 = a4;
  unsigned int v55 = 0;
  if (a2 < 0x8000)
  {
    if (!v59) {
      unsigned int v58 = 0;
    }
    while (*packed_datatype && *packed_datatype != 41)
    {
      unsigned int v4 = (char)*packed_datatype;
      BOOL v5 = v4 > 0x2E;
      uint64_t v6 = v4 - 46;
      if (v5)
      {
        uint64_t v8 = v6;
        char v7 = 1;
      }
      else
      {
        uint64_t v8 = v6;
        char v7 = 0;
      }
      if (v7)
      {
LABEL_62:
        unsigned int v55 = -1;
        *__error() = 22;
        return v55;
      }
      switch(v8)
      {
        case 0:
          break;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 40:
        case 41:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 56:
        case 57:
        case 58:
        case 60:
        case 61:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 71:
        case 72:
        case 73:
          goto LABEL_62;
        case 8:
          char v44 = 0;
          long long v14 = *(*v56)++;
          int v43 = v14;
          char v44 = v14;
          v55 += 16;
          if (v58 < 0x10uLL)
          {
            unsigned int v58 = 0;
          }
          else
          {
            *(_OWORD *)uint64_t v59 = *v44;
            v59 += 16;
            v58 -= 16;
          }
          break;
        case 21:
        case 53:
          BOOL v52 = 0;
          int v10 = *(_DWORD *)(*v56)++;
          int v51 = v10;
          BOOL v52 = v10;
          ++v55;
          if (v58)
          {
            *v59++ = v52;
            --v58;
          }
          else
          {
            unsigned int v58 = 0;
          }
          break;
        case 22:
        case 54:
          uint64_t v32 = 0;
          uint64_t v21 = (uint64_t)*(*v56)++;
          uint64_t v31 = v21;
          uint64_t v32 = v21;
          unsigned int v30 = 0;
          LODWORD(v21) = *(_DWORD *)(*v56)++;
          int v29 = v21;
          unsigned int v30 = v21;
          int v28 = 0;
          char v27 = 0;
          char v27 = *spinel_next_packed_datatype(packed_datatype);
          if (*packed_datatype == 100 || v27 && v27 != 41)
          {
            int v28 = spinel_datatype_pack(v59, v58, "S");
            if (v28 <= 0) {
              goto LABEL_62;
            }
          }
          v55 += v28 + v30;
          if (v58 < v28 + v30)
          {
            unsigned int v58 = 0;
          }
          else
          {
            v59 += v28;
            v58 -= v28;
            if (v59 && v32) {
              __memcpy_chk();
            }
            v59 += v30;
            v58 -= v30;
          }
          break;
        case 23:
          int v40 = 0;
          uint64_t v18 = *(*v56)++;
          unsigned __int16 v39 = v18;
          int v40 = v18;
          v55 += 8;
          if (v58 < 8uLL)
          {
            unsigned int v58 = 0;
          }
          else
          {
            *(void *)uint64_t v59 = *v40;
            v59 += 8;
            v58 -= 8;
          }
          break;
        case 30:
        case 62:
          int v48 = 0;
          int v12 = *(_DWORD *)(*v56)++;
          int v47 = v12;
          int v48 = v12;
          v55 += 4;
          if (v58 < 4uLL)
          {
            unsigned int v58 = 0;
          }
          else
          {
            *(_DWORD *)uint64_t v59 = v48;
            v59 += 4;
            v58 -= 4;
          }
          break;
        case 37:
        case 69:
          __int16 v50 = 0;
          int v11 = *(_DWORD *)(*v56)++;
          int v49 = v11;
          __int16 v50 = v11;
          v55 += 2;
          if (v58 < 2uLL)
          {
            unsigned int v58 = 0;
          }
          else
          {
            *(_WORD *)uint64_t v59 = v50;
            v59 += 2;
            v58 -= 2;
          }
          break;
        case 38:
        case 70:
          int v26 = 0;
          int v25 = 0;
          char v24 = 0;
          char v24 = *spinel_next_packed_datatype(packed_datatype);
          if (packed_datatype[1] != 40) {
            goto LABEL_62;
          }
          unint64_t v23 = 0;
          unint64_t v23 = *v56;
          int v26 = spinel_datatype_vpack_(0, 0, packed_datatype + 2, &v23);
          if (*packed_datatype == 116 || v24 && v24 != 41)
          {
            int v25 = spinel_datatype_pack(v59, v58, "S");
            if (v25 <= 0) {
              goto LABEL_62;
            }
          }
          v55 += v25 + v26;
          if (v26 + v25 > (int)v58)
          {
            unsigned int v58 = 0;
          }
          else
          {
            v59 += v25;
            v58 -= v25;
            int v26 = spinel_datatype_vpack_(v59, v58, packed_datatype + 2, v56);
            v59 += v26;
            v58 -= v26;
          }
          break;
        case 39:
          __s = 0;
          uint64_t v20 = *(*v56)++;
          char v34 = v20;
          __s = v20;
          size_t v33 = 0;
          if (v20)
          {
            size_t v33 = strlen(__s) + 1;
          }
          else
          {
            __s = "";
            size_t v33 = 1;
          }
          v55 += v33;
          if (v58 < v33)
          {
            unsigned int v58 = 0;
          }
          else
          {
            __memcpy_chk();
            v59 += v33;
            v58 -= v33;
          }
          break;
        case 42:
        case 74:
          uint64_t v46 = 0;
          uint64_t v13 = (uint64_t)*(*v56)++;
          uint64_t v45 = v13;
          uint64_t v46 = v13;
          v55 += 8;
          if (v58 < 8uLL)
          {
            unsigned int v58 = 0;
          }
          else
          {
            *(void *)uint64_t v59 = v46;
            v59 += 8;
            v58 -= 8;
          }
          break;
        case 52:
          BOOL v54 = 0;
          int v9 = *(_DWORD *)(*v56)++;
          int v53 = v9;
          BOOL v54 = v9 != 0;
          ++v55;
          if (v58)
          {
            *v59++ = v54;
            --v58;
          }
          else
          {
            unsigned int v58 = 0;
          }
          break;
        case 55:
          unint64_t v42 = 0;
          uint64_t v15 = *(*v56)++;
          uint64_t v41 = v15;
          unint64_t v42 = v15;
          v55 += 6;
          if (v58 < 6uLL)
          {
            unsigned int v58 = 0;
          }
          else
          {
            uint64_t v16 = v59;
            uint64_t v17 = v42;
            *(_DWORD *)uint64_t v59 = *v42;
            *((_WORD *)v16 + 2) = *((_WORD *)v17 + 2);
            v59 += 6;
            v58 -= 6;
          }
          break;
        case 59:
          unsigned int v38 = 0;
          unsigned int v19 = *(_DWORD *)(*v56)++;
          unsigned int v37 = v19;
          unsigned int v38 = v19;
          signed int v36 = 0;
          if (v19 >= 0x1FFFFF) {
            goto LABEL_62;
          }
          signed int v36 = spinel_packed_uint_encode(v59, v58, v38);
          v55 += v36;
          if ((int)v58 < v36)
          {
            unsigned int v58 = 0;
          }
          else
          {
            v59 += v36;
            v58 -= v36;
          }
          break;
        default:
          JUMPOUT(0);
      }
      packed_datatype = spinel_next_packed_datatype(packed_datatype);
    }
  }
  else
  {
    unsigned int v55 = -1;
    *__error() = 22;
  }
  return v55;
}

uint64_t spinel_datatype_vpack(BOOL *a1, unsigned int a2, unsigned char *a3, char **a4)
{
  int v10 = a1;
  unsigned int v9 = a2;
  uint64_t v8 = a3;
  char v7 = a4;
  int v6 = 0;
  BOOL v5 = a4;
  return spinel_datatype_vpack_(a1, a2, a3, &v5);
}

const char *spinel_command_to_cstr(int a1)
{
  return spinel_to_cstr((uint64_t)&spinel_command_to_cstr_spinel_commands_cstr, a1);
}

const char *spinel_to_cstr(uint64_t a1, int a2)
{
  for (int i = 0; *(void *)(a1 + 16 * i + 8); ++i)
  {
    if (a2 == *(_DWORD *)(a1 + 16 * i)) {
      return *(const char **)(a1 + 16 * i + 8);
    }
  }
  return "UNKNOWN";
}

const char *spinel_prop_key_to_cstr(int a1)
{
  return spinel_to_cstr((uint64_t)&spinel_prop_key_to_cstr_spinel_prop_cstr, a1);
}

const char *spinel_net_role_to_cstr(unsigned __int8 a1)
{
  return spinel_to_cstr((uint64_t)&spinel_net_role_to_cstr_spinel_net_cstr, a1);
}

const char *spinel_mcu_power_state_to_cstr(unsigned __int8 a1)
{
  return spinel_to_cstr((uint64_t)&spinel_mcu_power_state_to_cstr_spinel_mcu_power_state_cstr, a1);
}

const char *spinel_status_to_cstr(int a1)
{
  return spinel_to_cstr((uint64_t)&spinel_status_to_cstr_spinel_status_cstr, a1);
}

const char *spinel_capability_to_cstr(int a1)
{
  return spinel_to_cstr((uint64_t)&spinel_capability_to_cstr_spinel_cap_cstr, a1);
}

unint64_t spinel_strnlen(uint64_t a1, unint64_t a2)
{
  for (unint64_t i = 0; ; ++i)
  {
    BOOL v3 = 0;
    if (i < a2) {
      BOOL v3 = *(unsigned char *)(a1 + i) != 0;
    }
    if (!v3) {
      break;
    }
  }
  return i;
}

uint64_t spinel_validate_utf8(unsigned __int8 *a1)
{
  char v7 = 1;
  while (1)
  {
    id v1 = a1++;
    int v2 = *v1;
    if (!v2) {
      return v7 & 1;
    }
    if ((v2 & 0x80u) != 0)
    {
      if ((v2 & 0x40) == 0)
      {
        char v7 = 0;
        return v7 & 1;
      }
      if ((v2 & 0x20) == 0)
      {
        char v6 = 1;
        goto LABEL_13;
      }
      if ((v2 & 0x10) == 0)
      {
        char v6 = 2;
        goto LABEL_13;
      }
      if ((v2 & 8) != 0)
      {
        char v7 = 0;
        return v7 & 1;
      }
      char v6 = 3;
LABEL_13:
      while (v6--)
      {
        unsigned int v4 = a1++;
        if ((*v4 & 0xC0) != 0x80)
        {
          char v7 = 0;
          return v7 & 1;
        }
      }
    }
  }
}

uint64_t ot::Spinel::Decoder::Decoder(uint64_t this)
{
  *(void *)this = 0;
  *(_WORD *)(this + 8) = 0;
  *(_WORD *)(this + 10) = 0;
  *(_WORD *)(this + 12) = 0;
  *(unsigned char *)(this + 14) = 0;
  *(unsigned char *)(this + 15) = 0;
  *(_WORD *)(this + 16) = 0;
  *(_WORD *)(this + 18) = 0;
  return this;
}

ot::Spinel::Decoder *ot::Spinel::Decoder::Decoder(ot::Spinel::Decoder *this)
{
  return this;
}

uint64_t ot::Spinel::Decoder::Init(ot::Spinel::Decoder *this, const unsigned __int8 *a2, __int16 a3)
{
  *(void *)this = a2;
  if (!*(void *)this) {
    a3 = 0;
  }
  *((_WORD *)this + 4) = a3;
  ot::Spinel::Decoder::Reset(this);
  return ot::Spinel::Decoder::ClearSavedPosition((uint64_t)this);
}

uint64_t ot::Spinel::Decoder::Reset(ot::Spinel::Decoder *this)
{
  *((_WORD *)this + 5) = 0;
  *((_WORD *)this + 6) = *((_WORD *)this + 4);
  *((unsigned char *)this + 14) = 0;
  return ot::Spinel::Decoder::ClearSavedPosition((uint64_t)this);
}

uint64_t ot::Spinel::Decoder::ClearSavedPosition(uint64_t this)
{
  *(_WORD *)(this + 16) = *(_WORD *)(this + 8);
  return this;
}

{
  return ot::Spinel::Decoder::ClearSavedPosition(this);
}

uint64_t ot::Spinel::Decoder::ReadBool(ot::Spinel::Decoder *this, BOOL *a2)
{
  char v6 = this;
  BOOL v5 = a2;
  unsigned int v4 = 0;
  unsigned __int8 v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadUint8(this, &v3);
  if (!v4)
  {
    if (v3)
    {
      if (v3 == 1) {
        BOOL *v5 = 1;
      }
      else {
        return 6;
      }
    }
    else
    {
      BOOL *v5 = 0;
    }
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadUint8(ot::Spinel::Decoder *this, unsigned __int8 *a2)
{
  unsigned int v3 = 0;
  if ((unint64_t)*((unsigned __int16 *)this + 5) + 1 <= *((unsigned __int16 *)this + 6)) {
    *a2 = *(unsigned char *)(*(void *)this + (unsigned __int16)(*((_WORD *)this + 5))++);
  }
  else {
    return 6;
  }
  return v3;
}

uint64_t ot::Spinel::Decoder::ReadInt8(ot::Spinel::Decoder *this, signed __int8 *a2)
{
  char v6 = this;
  BOOL v5 = a2;
  unsigned int v4 = 0;
  unsigned __int8 v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadUint8(this, &v3);
  if (!v4) {
    signed __int8 *v5 = v3;
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadUint16(ot::Spinel::Decoder *this, unsigned __int16 *a2)
{
  unsigned int v3 = 0;
  if ((unint64_t)*((unsigned __int16 *)this + 5) + 2 <= *((unsigned __int16 *)this + 6))
  {
    *a2 = *(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5)) | (*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 1) << 8);
    *((_WORD *)this + 5) += 2;
  }
  else
  {
    return 6;
  }
  return v3;
}

uint64_t ot::Spinel::Decoder::ReadInt16(ot::Spinel::Decoder *this, __int16 *a2)
{
  char v6 = this;
  BOOL v5 = a2;
  unsigned int v4 = 0;
  unsigned __int16 v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadUint16(this, &v3);
  if (!v4) {
    __int16 *v5 = v3;
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadUint32(ot::Spinel::Decoder *this, unsigned int *a2)
{
  unsigned int v3 = 0;
  if ((unint64_t)*((unsigned __int16 *)this + 5) + 4 <= *((unsigned __int16 *)this + 6))
  {
    *a2 = (*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 1) << 8) | *(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5)) | (*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 2) << 16) | (*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 3) << 24);
    *((_WORD *)this + 5) += 4;
  }
  else
  {
    return 6;
  }
  return v3;
}

uint64_t ot::Spinel::Decoder::ReadInt32(ot::Spinel::Decoder *this, int *a2)
{
  char v6 = this;
  BOOL v5 = a2;
  unsigned int v4 = 0;
  unsigned int v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadUint32(this, &v3);
  if (!v4) {
    int *v5 = v3;
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadUint64(ot::Spinel::Decoder *this, unint64_t *a2)
{
  unsigned int v3 = 0;
  if ((unint64_t)*((unsigned __int16 *)this + 5) + 8 <= *((unsigned __int16 *)this + 6))
  {
    *a2 = ((unint64_t)*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 1) << 8) | *(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5)) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 6) << 48) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5) + 7) << 56);
    *((_WORD *)this + 5) += 8;
  }
  else
  {
    return 6;
  }
  return v3;
}

uint64_t ot::Spinel::Decoder::ReadInt64(ot::Spinel::Decoder *this, uint64_t *a2)
{
  char v6 = this;
  BOOL v5 = a2;
  unsigned int v4 = 0;
  unint64_t v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadUint64(this, &v3);
  if (!v4) {
    uint64_t *v5 = v3;
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadUintPacked(ot::Spinel::Decoder *this, unsigned int *a2)
{
  uint64_t v8 = this;
  char v7 = a2;
  unsigned int v6 = 0;
  int v5 = 0;
  unsigned int v4 = 0;
  int v5 = spinel_packed_uint_decode((unsigned char *)(*(void *)this + *((unsigned __int16 *)this + 5)), *((unsigned __int16 *)this + 6) - *((unsigned __int16 *)this + 5), &v4);
  if (v5 > 0)
  {
    *((_WORD *)this + 5) += v5;
    unsigned int *v7 = v4;
  }
  else
  {
    return 6;
  }
  return v6;
}

uint64_t ot::Spinel::Decoder::ReadItem(ot::Spinel::Decoder *this, const unsigned __int8 **a2, unsigned __int16 a3)
{
  unsigned int v4 = 0;
  if (*((unsigned __int16 *)this + 5) + a3 <= *((unsigned __int16 *)this + 6))
  {
    *a2 = (const unsigned __int8 *)(*(void *)this + *((unsigned __int16 *)this + 5));
    *((_WORD *)this + 5) += a3;
  }
  else
  {
    return 6;
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadIp6Address(ot::Spinel::Decoder *a1, _OWORD *a2)
{
  unsigned int v6 = a1;
  int v5 = a2;
  unsigned int v4 = 0;
  unint64_t v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadIp6Address(a1, &v3);
  if (!v4)
  {
    if (v3) {
      _OWORD *v5 = *(_OWORD *)v3;
    }
    else {
      return 6;
    }
  }
  return v4;
}

{
  const unsigned __int8 *v3;
  unsigned int v4;
  _OWORD *v5;
  ot::Spinel::Decoder *v6;

  unsigned int v6 = a1;
  int v5 = a2;
  unsigned int v4 = 0;
  unint64_t v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadIp6Address(a1, &v3);
  if (!v4)
  {
    if (v3) {
      _OWORD *v5 = *(_OWORD *)v3;
    }
    else {
      return 6;
    }
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadIp6Address(ot::Spinel::Decoder *a1, const unsigned __int8 **a2)
{
  return ot::Spinel::Decoder::ReadItem(a1, a2, 0x10u);
}

{
  return ot::Spinel::Decoder::ReadItem(a1, a2, 0x10u);
}

{
  return ot::Spinel::Decoder::ReadIp6Address(a1, a2);
}

{
  return ot::Spinel::Decoder::ReadIp6Address(a1, a2);
}

uint64_t ot::Spinel::Decoder::ReadEui64(ot::Spinel::Decoder *a1, void *a2)
{
  unsigned int v6 = a1;
  int v5 = a2;
  unsigned int v4 = 0;
  unint64_t v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadEui64(a1, &v3);
  if (!v4)
  {
    if (v3) {
      void *v5 = *(void *)v3;
    }
    else {
      return 6;
    }
  }
  return v4;
}

{
  const unsigned __int8 *v3;
  unsigned int v4;
  void *v5;
  ot::Spinel::Decoder *v6;

  unsigned int v6 = a1;
  int v5 = a2;
  unsigned int v4 = 0;
  unint64_t v3 = 0;
  unsigned int v4 = ot::Spinel::Decoder::ReadEui64(a1, &v3);
  if (!v4)
  {
    if (v3) {
      void *v5 = *(void *)v3;
    }
    else {
      return 6;
    }
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::ReadEui64(ot::Spinel::Decoder *a1, const unsigned __int8 **a2)
{
  return ot::Spinel::Decoder::ReadItem(a1, a2, 8u);
}

{
  return ot::Spinel::Decoder::ReadItem(a1, a2, 8u);
}

{
  return ot::Spinel::Decoder::ReadEui64(a1, a2);
}

{
  return ot::Spinel::Decoder::ReadEui64(a1, a2);
}

uint64_t ot::Spinel::Decoder::ReadEui48(ot::Spinel::Decoder *a1, _DWORD *a2)
{
  uint64_t v8 = a1;
  char v7 = a2;
  unsigned int v6 = 0;
  int v5 = 0;
  unsigned int v6 = ot::Spinel::Decoder::ReadEui48(a1, &v5);
  if (!v6)
  {
    if (v5)
    {
      int v2 = v5;
      unint64_t v3 = v7;
      _DWORD *v7 = *(_DWORD *)v5;
      *((_WORD *)v3 + 2) = *((_WORD *)v2 + 2);
    }
    else
    {
      return 6;
    }
  }
  return v6;
}

uint64_t ot::Spinel::Decoder::ReadEui48(ot::Spinel::Decoder *a1, const unsigned __int8 **a2)
{
  return ot::Spinel::Decoder::ReadItem(a1, a2, 6u);
}

{
  return ot::Spinel::Decoder::ReadEui48(a1, a2);
}

uint64_t ot::Spinel::Decoder::ReadUtf8(ot::Spinel::Decoder *this, const char **a2)
{
  unsigned int v5 = 0;
  if ((unint64_t)*((unsigned __int16 *)this + 5) + 1 <= *((unsigned __int16 *)this + 6))
  {
    unint64_t v4 = (unsigned __int16)ot::StringLength((ot *)(*(void *)this + *((unsigned __int16 *)this + 5)), (const char *)(unsigned __int16)(*((_WORD *)this + 6) - *((_WORD *)this + 5)));
    if (v4 < (unsigned __int16)(*((_WORD *)this + 6) - *((_WORD *)this + 5)))
    {
      *a2 = (const char *)(*(void *)this + *((unsigned __int16 *)this + 5));
      *((_WORD *)this + 5) += v4 + 1;
    }
    else
    {
      return 6;
    }
  }
  else
  {
    return 6;
  }
  return v5;
}

uint64_t ot::Spinel::Decoder::ReadData(ot::Spinel::Decoder *this, const unsigned __int8 **a2, unsigned __int16 *a3)
{
  *a3 = *((_WORD *)this + 6) - *((_WORD *)this + 5);
  return ot::Spinel::Decoder::ReadItem(this, a2, *a3);
}

uint64_t ot::Spinel::Decoder::ReadDataWithLen(ot::Spinel::Decoder *this, const unsigned __int8 **a2, unsigned __int16 *a3)
{
  unsigned int v9 = this;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned int Item = 0;
  unsigned __int16 v5 = 0;
  unsigned int Item = ot::Spinel::Decoder::ReadUint16(this, &v5);
  if (!Item)
  {
    unsigned int Item = ot::Spinel::Decoder::ReadItem(this, v8, v5);
    if (!Item) {
      unsigned __int16 *v7 = v5;
    }
  }
  return Item;
}

uint64_t ot::Spinel::Decoder::OpenStruct(ot::Spinel::Decoder *this)
{
  unsigned __int16 v5 = this;
  unsigned int v4 = 0;
  unsigned __int16 v3 = 0;
  if (*((unsigned __int8 *)this + 14) < 4u)
  {
    unsigned int v4 = ot::Spinel::Decoder::ReadUint16(this, &v3);
    if (!v4)
    {
      if (v3 <= *((unsigned __int16 *)this + 6) - *((unsigned __int16 *)this + 5))
      {
        *((_WORD *)this + *((unsigned __int8 *)this + 14) + 10) = *((_WORD *)this + 6);
        *((_WORD *)this + 6) = *((_WORD *)this + 5) + v3;
        ++*((unsigned char *)this + 14);
      }
      else
      {
        return 6;
      }
    }
  }
  else
  {
    return 13;
  }
  return v4;
}

uint64_t ot::Spinel::Decoder::CloseStruct(ot::Spinel::Decoder *this)
{
  unsigned int v3 = 0;
  if (*((unsigned char *)this + 14))
  {
    if (ot::Spinel::Decoder::IsSavedPositionValid(this)
      && *((unsigned __int8 *)this + 14) == *((unsigned __int8 *)this + 15))
    {
      ot::Spinel::Decoder::ClearSavedPosition((uint64_t)this);
    }
    --*((unsigned char *)this + 14);
    *((_WORD *)this + 5) = *((_WORD *)this + 6);
    *((_WORD *)this + 6) = *((_WORD *)this + *((unsigned __int8 *)this + 14) + 10);
  }
  else
  {
    return 13;
  }
  return v3;
}

BOOL ot::Spinel::Decoder::IsSavedPositionValid(ot::Spinel::Decoder *this)
{
  return *((unsigned __int16 *)this + 8) < (int)*((unsigned __int16 *)this + 4);
}

{
  return ot::Spinel::Decoder::IsSavedPositionValid(this);
}

uint64_t ot::Spinel::Decoder::SavePosition(uint64_t this)
{
  *(_WORD *)(this + 16) = *(_WORD *)(this + 10);
  *(_WORD *)(this + 18) = *(_WORD *)(this + 12);
  *(unsigned char *)(this + 15) = *(unsigned char *)(this + 14);
  return this;
}

uint64_t ot::Spinel::Decoder::ResetToSaved(ot::Spinel::Decoder *this)
{
  unsigned int v3 = 0;
  if (ot::Spinel::Decoder::IsSavedPositionValid(this))
  {
    *((_WORD *)this + 5) = *((_WORD *)this + 8);
    *((_WORD *)this + 6) = *((_WORD *)this + 9);
    *((unsigned char *)this + 14) = *((unsigned char *)this + 15);
  }
  else
  {
    return 13;
  }
  return v3;
}

std::runtime_error *boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, boost::system::system_error *a2, std::runtime_error_vtbl **a3)
{
  unsigned int v4 = boost::system::system_error::system_error(a1, a3, a2);
  v4->__vftable = (std::runtime_error_vtbl *)off_10049BB18;
  v4[2].__imp_.__imp_ = 0;
  p_imp = (uint64_t *)&v4[2].__imp_;
  unsigned int v6 = operator new(0x50uLL);
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  void v6[2] = 0u;
  _OWORD *v6 = 0u;
  uint64_t v8 = v6;
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  uint64_t v8 = (_OWORD *)*p_imp;
  uint64_t *p_imp = (uint64_t)v6;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)&v8);
  return a1;
}

void sub_1001B1628(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  a10 = *v10;
  uint64_t *v10 = 0;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1001B1610);
}

void sub_1001B1648(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::system::system_error::system_error(std::runtime_error *this, std::runtime_error_vtbl **a2, boost::system::system_error *a3)
{
  boost::system::system_error::build_message(a3, (boost::system::error_code *)a2, &v7);
  std::runtime_error::runtime_error(this, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::runtime_error_vtbl *)off_10049BB70;
  std::runtime_error v5 = *(std::runtime_error *)a2;
  this[2].__vftable = a2[2];
  this[1] = v5;
  return this;
}

void sub_1001B16E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, char *a2, boost::system::error_code *a3)
{
  unsigned int v4 = (void *)boost::system::system_error::system_error(a1, a3, a2);
  void *v4 = off_10049BB18;
  v4[5] = 0;
  std::runtime_error v5 = v4 + 5;
  unsigned int v6 = operator new(0x50uLL);
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  void v6[2] = 0u;
  _OWORD *v6 = 0u;
  uint64_t v8 = v6;
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  uint64_t v8 = (_OWORD *)*v5;
  uint64_t *v5 = (uint64_t)v6;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)&v8);
  return a1;
}

void sub_1001B17AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  a10 = *v10;
  uint64_t *v10 = 0;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1001B1794);
}

void sub_1001B17CC(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::system::system_error::system_error(uint64_t a1, boost::system::error_code *a2, char *a3)
{
  if (a3[23] >= 0) {
    std::runtime_error v5 = (boost::system::system_error *)a3;
  }
  else {
    std::runtime_error v5 = *(boost::system::system_error **)a3;
  }
  boost::system::system_error::build_message(v5, a2, &v8);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = off_10049BB70;
  long long v6 = *(_OWORD *)a2;
  *(void *)(a1 + 32) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 16) = v6;
  return a1;
}

void sub_1001B1878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, boost::system::system_error *a2, uint64_t a3, std::runtime_error_vtbl **a4)
{
  long long v6 = boost::system::system_error::system_error(a1, a4, a2);
  v6->__vftable = (std::runtime_error_vtbl *)off_10049BB18;
  v6[2].__imp_.__imp_ = 0;
  p_imp = (uint64_t *)&v6[2].__imp_;
  std::string v8 = (char *)operator new(0x50uLL);
  *(_DWORD *)std::string v8 = 0;
  unsigned int v9 = (std::string *)(v8 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 3) = *(void *)(a3 + 16);
  }
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  int v11 = v8;
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  int v11 = (char *)*p_imp;
  uint64_t *p_imp = (uint64_t)v8;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)&v11);
  return a1;
}

void sub_1001B1964(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  uint64_t *v10 = 0;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1001B194CLL);
}

void sub_1001B199C(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, char *a2, uint64_t a3, boost::system::error_code *a4)
{
  long long v6 = (void *)boost::system::system_error::system_error(a1, a4, a2);
  void *v6 = off_10049BB18;
  v6[5] = 0;
  std::string v7 = v6 + 5;
  std::string v8 = (char *)operator new(0x50uLL);
  *(_DWORD *)std::string v8 = 0;
  unsigned int v9 = (std::string *)(v8 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 3) = *(void *)(a3 + 16);
  }
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  int v11 = v8;
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  int v11 = (char *)*v7;
  uint64_t *v7 = (uint64_t)v8;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)&v11);
  return a1;
}

void sub_1001B1A88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  uint64_t *v10 = 0;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1001B1A70);
}

void sub_1001B1AC0(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, boost::system::system_error *a2, const boost::filesystem::path *a3, const boost::filesystem::path *a4, std::runtime_error_vtbl **a5)
{
  std::string v8 = boost::system::system_error::system_error(a1, a5, a2);
  v8->__vftable = (std::runtime_error_vtbl *)off_10049BB18;
  v8[2].__imp_.__imp_ = 0;
  p_imp = (uint64_t *)&v8[2].__imp_;
  int v10 = (boost::filesystem::filesystem_error::impl *)operator new(0x50uLL);
  boost::filesystem::filesystem_error::impl::impl(v10, a3, a4);
  uint64_t v12 = (uint64_t)v10;
  atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  uint64_t v12 = *p_imp;
  uint64_t *p_imp = (uint64_t)v10;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&v12);
  return a1;
}

void sub_1001B1B90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  uint64_t *v10 = 0;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1001B1B74);
}

void sub_1001B1BC8(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, char *a2, const boost::filesystem::path *a3, const boost::filesystem::path *a4, boost::system::error_code *a5)
{
  std::string v8 = (void *)boost::system::system_error::system_error(a1, a5, a2);
  *std::string v8 = off_10049BB18;
  v8[5] = 0;
  unsigned int v9 = v8 + 5;
  int v10 = (boost::filesystem::filesystem_error::impl *)operator new(0x50uLL);
  boost::filesystem::filesystem_error::impl::impl(v10, a3, a4);
  uint64_t v12 = (uint64_t)v10;
  atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  uint64_t v12 = *v9;
  *unsigned int v9 = (uint64_t)v10;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&v12);
  return a1;
}

void sub_1001B1C98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  uint64_t *v10 = 0;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1001B1C7CLL);
}

void sub_1001B1CD0(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, uint64_t a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result->__vftable = (std::runtime_error_vtbl *)off_10049BB70;
  std::runtime_error v4 = *(std::runtime_error *)(a2 + 16);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[1] = v4;
  result->__vftable = (std::runtime_error_vtbl *)off_10049BB18;
  std::runtime_error v5 = *(atomic_uint **)(a2 + 40);
  result[2].__imp_.__imp_ = (const char *)v5;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  return result;
}

uint64_t boost::filesystem::filesystem_error::operator=(uint64_t a1, uint64_t a2)
{
  std::runtime_error::operator=((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  std::runtime_error v5 = *(atomic_uint **)(a2 + 40);
  std::string v7 = v5;
  if (v5)
  {
    atomic_fetch_add(v5, 1u);
    std::runtime_error v5 = v7;
  }
  std::string v7 = *(atomic_uint **)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)&v7);
  return a1;
}

void boost::filesystem::filesystem_error::~filesystem_error(boost::filesystem::filesystem_error *this)
{
  *(void *)this = off_10049BB18;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)this + 5);

  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  uint64_t vars8;

  *(void *)this = off_10049BB18;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)this + 5);

  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_10049BB18;
  boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);

  operator delete(v2);
}

const char *boost::filesystem::filesystem_error::what(std::runtime_error *this)
{
  imp = this[2].__imp_.__imp_;
  if (imp)
  {
    if (imp[79] < 0)
    {
      if (*((void *)imp + 8)) {
        goto LABEL_28;
      }
    }
    else if (imp[79])
    {
      goto LABEL_28;
    }
    unsigned int v3 = std::runtime_error::what(this);
    std::string::__assign_external((std::string *)(this[2].__imp_.__imp_ + 56), v3);
    imp = this[2].__imp_.__imp_;
    if (imp[31] < 0)
    {
      if (!*((void *)imp + 2)) {
        goto LABEL_17;
      }
    }
    else if (!imp[31])
    {
      goto LABEL_17;
    }
    std::string::append((std::string *)(imp + 56), ": \"", 3uLL);
    uint64_t v4 = this[2].__imp_.__imp_;
    std::string v7 = (const std::string::value_type *)*((void *)v4 + 1);
    std::runtime_error v5 = v4 + 8;
    long long v6 = v7;
    int v8 = v5[23];
    if (v8 >= 0) {
      unsigned int v9 = v5;
    }
    else {
      unsigned int v9 = v6;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      std::string::size_type v10 = *((void *)v5 + 1);
    }
    std::string::append((std::string *)v5 + 2, v9, v10);
    std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "\"", 1uLL);
    imp = this[2].__imp_.__imp_;
LABEL_17:
    if (imp[55] < 0)
    {
      if (!*((void *)imp + 5)) {
        goto LABEL_28;
      }
    }
    else if (!imp[55])
    {
LABEL_28:
      uint64_t result = imp + 56;
      if (imp[79] < 0) {
        return *(const char **)result;
      }
      return result;
    }
    std::string::append((std::string *)(imp + 56), ", \"", 3uLL);
    int v11 = this[2].__imp_.__imp_;
    long long v14 = (const std::string::value_type *)*((void *)v11 + 4);
    uint64_t v12 = v11 + 32;
    uint64_t v13 = v14;
    int v15 = v12[23];
    if (v15 >= 0) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = v13;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *((unsigned __int8 *)v12 + 23);
    }
    else {
      std::string::size_type v17 = *((void *)v12 + 1);
    }
    std::string::append((std::string *)v12 + 1, v16, v17);
    std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "\"", 1uLL);
    imp = this[2].__imp_.__imp_;
    goto LABEL_28;
  }

  return std::runtime_error::what(this);
}

uint64_t *boost::filesystem::filesystem_error::get_empty_path(boost::filesystem::filesystem_error *this)
{
  {
    boost::filesystem::filesystem_error::get_empty_path(void)::empty_path = 0;
    unk_1004FC350 = 0;
    qword_1004FC358 = 0;
    __cxa_atexit((void (*)(void *))boost::filesystem::path::~path, &boost::filesystem::filesystem_error::get_empty_path(void)::empty_path, (void *)&_mh_execute_header);
  }
  return &boost::filesystem::filesystem_error::get_empty_path(void)::empty_path;
}

void boost::filesystem::path::~path(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t boost::filesystem::emit_error(boost::filesystem *this, uint64_t a2, boost::system::error_code *a3, const char *a4)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    v12[0] = 0;
    if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
      int v9 = this != 0;
    }
    else {
      int v9 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), boost::filesystem *))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, this);
    }
    uint64_t v10 = 2;
    LODWORD(v12[0]) = this;
    if (v9) {
      uint64_t v10 = 3;
    }
    v12[1] = &boost::system::detail::system_cat_holder<void>::instance;
    xpc_object_t v12[2] = v10;
    boost::filesystem::filesystem_error::filesystem_error(exception, a3, v12);
  }
  if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
    uint64_t result = this != 0;
  }
  else {
    uint64_t result = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), boost::filesystem *, boost::system::error_code *, const char *))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, this, a3, a4);
  }
  uint64_t v7 = 2;
  if (result) {
    uint64_t v7 = 3;
  }
  *(_DWORD *)a2 = this;
  *(_DWORD *)(a2 + 4) = 0;
  *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a2 + 16) = v7;
  return result;
}

void sub_1001B2294(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::emit_error(boost::filesystem *this, uint64_t a2, const boost::filesystem::path *a3, boost::system::error_code *a4, const char *a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    v14[0] = 0;
    if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
      int v10 = this != 0;
    }
    else {
      int v10 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), boost::filesystem *))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, this);
    }
    uint64_t v11 = 2;
    LODWORD(v14[0]) = this;
    if (v10) {
      uint64_t v11 = 3;
    }
    v14[1] = &boost::system::detail::system_cat_holder<void>::instance;
    v14[2] = v11;
    boost::filesystem::filesystem_error::filesystem_error(exception, a4, a2, v14);
  }
  if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
    uint64_t result = this != 0;
  }
  else {
    uint64_t result = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), boost::filesystem *))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, this);
  }
  uint64_t v8 = 2;
  if (result) {
    uint64_t v8 = 3;
  }
  *(_DWORD *)a3 = this;
  *((_DWORD *)a3 + 1) = 0;
  *((void *)a3 + 1) = &boost::system::detail::system_cat_holder<void>::instance;
  *((void *)a3 + 2) = v8;
  return result;
}

void sub_1001B2404(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::emit_error(boost::filesystem *this, uint64_t a2, const boost::filesystem::path *a3, const boost::filesystem::path *a4, boost::system::error_code *a5, const char *a6)
{
  if (!a4)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    v16[0] = 0;
    if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
      int v11 = this != 0;
    }
    else {
      int v11 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), boost::filesystem *))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, this);
    }
    uint64_t v12 = 2;
    LODWORD(v16[0]) = this;
    if (v11) {
      uint64_t v12 = 3;
    }
    v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
    v16[2] = v12;
    boost::filesystem::filesystem_error::filesystem_error(exception, a5, a2, a3, v16);
  }
  if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
    uint64_t result = this != 0;
  }
  else {
    uint64_t result = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), boost::filesystem *, const boost::filesystem::path *))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, this, a3);
  }
  uint64_t v9 = 2;
  if (result) {
    uint64_t v9 = 3;
  }
  *(_DWORD *)a4 = this;
  *((_DWORD *)a4 + 1) = 0;
  *((void *)a4 + 1) = &boost::system::detail::system_cat_holder<void>::instance;
  *((void *)a4 + 2) = v9;
  return result;
}

void sub_1001B257C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::system::system_error::build_message(boost::system::system_error *this@<X0>, boost::system::error_code *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (this)
  {
    std::string::size_type v7 = strlen((const char *)this);
    std::string::append(a3, (const std::string::value_type *)this, v7);
    std::string::append(a3, ": ", 2uLL);
  }
  boost::system::error_code::what(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a3, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001B263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void boost::system::system_error::~system_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

std::string *boost::system::error_code::what@<X0>(boost::system::error_code *this@<X0>, std::string *a2@<X8>)
{
  boost::system::error_code::message(this, a2);
  std::string::append(a2, " [", 2uLL);
  boost::system::error_code::to_string(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)this + 2) >= 4uLL)
  {
    std::string::append(a2, " at ", 4uLL);
    unint64_t v6 = *((void *)this + 2);
    if (v6 <= 3) {
      std::string::size_type v7 = boost::system::error_code::location(void)const::loc;
    }
    else {
      std::string::size_type v7 = (char **)(v6 & 0xFFFFFFFFFFFFFFFELL);
    }
    boost::source_location::to_string(v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &__p;
    }
    else {
      uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a2, "]", 1uLL);
}

void sub_1001B27B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::system::error_code::message@<X0>(boost::system::error_code *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    if (v2 == 1) {
      return std::error_code::message(a2, (const std::error_code *)this);
    }
    uint64_t v4 = (uint64_t (***)(boost::system::detail::system_error_category *__hidden))*((void *)this + 1);
  }
  else
  {
    uint64_t v4 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  return (std::string *)((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), void))(*v4)[4])(v4, *(unsigned int *)this);
}

std::string *boost::system::error_code::to_string@<X0>(boost::system::error_code *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    if (v4 == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "std:");
      std::runtime_error v5 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
      std::string::size_type v6 = strlen(v5);
      std::string::append(a2, v5, v6);
      boost::system::detail::snprintf((boost::system::detail *)__s, (char *)0x20, ":%d", v7, *(unsigned int *)this);
      std::string::size_type v8 = strlen(__s);
      return std::string::append(a2, __s, v8);
    }
    int v10 = (uint64_t (***)(boost::system::detail::system_error_category *__hidden))*((void *)this + 1);
  }
  else
  {
    int v10 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  int v11 = (char *)(**v10)((boost::system::detail::system_error_category *)v10);
  std::string::basic_string[abi:ne180100]<0>(a2, v11);
  unint64_t v13 = *(unsigned int *)this;
  if (*((void *)this + 2) == 1) {
    unint64_t v13 = v13 + 1000 * (*((void *)this + 1) % 0x1FFFF7uLL);
  }
  boost::system::detail::snprintf((boost::system::detail *)__s, (char *)0x20, ":%d", v12, v13);
  std::string::size_type v14 = strlen(__s);
  return std::string::append(a2, __s, v14);
}

void sub_1001B29F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::source_location::to_string(char **this@<X0>, std::string *a2@<X8>)
{
  if (*((_DWORD *)this + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, *this);
    sprintf(__s, ":%ld", *((unsigned int *)this + 4));
    std::string::size_type v4 = strlen(__s);
    std::string::append(a2, __s, v4);
    if (*((_DWORD *)this + 5))
    {
      sprintf(__s, ":%ld", *((unsigned int *)this + 5));
      std::string::size_type v5 = strlen(__s);
      std::string::append(a2, __s, v5);
    }
    std::string::append(a2, " in function '", 0xEuLL);
    std::string::size_type v6 = this[1];
    std::string::size_type v7 = strlen(v6);
    std::string::append(a2, v6, v7);
    std::string::push_back(a2, 39);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "(unknown source location)");
  }
}

void sub_1001B2B60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::system::error_category::equivalent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a3 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 8))(a1)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a3 + 8);
  if (!v4)
  {
    if (!v5) {
      return 1;
    }
    uint64_t v9 = *(void *)(v5 + 8);
    return v9 == 0xB2AB117A257EDFD0;
  }
  if (!v5)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    return v9 == 0xB2AB117A257EDFD0;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  BOOL v7 = v5 == v4;
  if (v6) {
    return *(void *)(v4 + 8) == v6;
  }
  else {
    return v7;
  }
}

BOOL boost::system::error_category::equivalent(boost::system::error_category *this, const boost::system::error_code *a2, int a3)
{
  return boost::system::error_code::equals(a2, a3, this);
}

BOOL boost::system::error_category::failed(boost::system::error_category *this, int a2)
{
  return a2 != 0;
}

BOOL boost::system::error_code::equals(boost::system::error_code *this, int a2, const boost::system::error_category *a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3 == 1)
  {
    if (*((void *)a3 + 1) == 0xB2AB117A257EDFD2) {
      return *(_DWORD *)this + 1000 * (*((void *)this + 1) % 0x1FFFF7uLL) == a2;
    }
    return 0;
  }
  if (!v3) {
    return !a2 && *((void *)a3 + 1) == 0xB2AB117A257EDFD1;
  }
  if (*(_DWORD *)this != a2) {
    return 0;
  }
  uint64_t v6 = (const boost::system::error_category *)*((void *)this + 1);
  uint64_t v7 = *((void *)v6 + 1);
  BOOL v8 = v6 == a3;
  if (v7) {
    return *((void *)a3 + 1) == v7;
  }
  else {
    return v8;
  }
}

uint64_t boost::system::detail::snprintf(boost::system::detail *this, char *a2, const char *a3, const char *a4, ...)
{
  va_start(va, a4);
  return vsnprintf((char *)this, (size_t)a2, a3, va);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    BOOL v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

boost::filesystem::filesystem_error::impl *boost::filesystem::filesystem_error::impl::impl(boost::filesystem::filesystem_error::impl *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3)
{
  *(_DWORD *)this = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *((void *)this + 3) = *((void *)a2 + 2);
    *(_OWORD *)((char *)this + 8) = v5;
  }
  std::string::size_type v6 = (std::string *)((char *)this + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *(_OWORD *)a3;
    *((void *)this + 6) = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  return this;
}

void sub_1001B2E84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    long long v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    long long v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

const char *boost::system::detail::system_error_category::name(boost::system::detail::system_error_category *this)
{
  return "system";
}

uint64_t boost::system::detail::system_error_category::default_error_condition(boost::system::detail::system_error_category *this, unsigned int a2)
{
  return a2;
}

void *boost::system::detail::system_error_category::message@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  std::string::size_type v4 = strerror(__errnum);
  if (v4) {
    long long v5 = v4;
  }
  else {
    long long v5 = "Unknown error";
  }

  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

const char *boost::system::detail::system_error_category::message(boost::system::detail::system_error_category *this, int __errnum, char *a3, uint64_t a4)
{
  std::string::size_type v4 = a3;
  if (a4)
  {
    long long v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      long long v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      long long v5 = &v4[v6];
    }
    char *v5 = 0;
  }
  return v4;
}

uint64_t *boost::intrusive_ptr<boost::filesystem::filesystem_error::impl>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    if (*(char *)(v2 + 79) < 0) {
      operator delete(*(void **)(v2 + 56));
    }
    if (*(char *)(v2 + 55) < 0) {
      operator delete(*(void **)(v2 + 32));
    }
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

double boost::filesystem::directory_entry::get_status@<D0>(boost::filesystem::directory_entry *this@<X0>, boost::system::error_code *a2@<X1>, double *a3@<X8>)
{
  if (*((_DWORD *)this + 6)) {
    BOOL v5 = *((_DWORD *)this + 7) == 0xFFFF;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    int v6 = *((_DWORD *)this + 8);
    int v7 = *((_DWORD *)this + 9);
    if ((v6 & 0xFFFFFFFB) == 0 || v7 == 0xFFFF)
    {
      boost::filesystem::detail::status(this, a2, (int *)&v10);
      *((void *)this + 3) = v10;
      goto LABEL_14;
    }
    *((_DWORD *)this + 6) = v6;
    *((_DWORD *)this + 7) = v7;
  }
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
LABEL_14:
  double result = *((double *)this + 3);
  *a3 = result;
  return result;
}

int *boost::filesystem::directory_entry::get_symlink_status@<X0>(int *this@<X0>, boost::system::error_code *a2@<X1>, int *a3@<X8>)
{
  uint64_t v3 = this;
  int v5 = this[8];
  int v6 = this[9];
  if (v5) {
    BOOL v7 = v6 == 0xFFFF;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    this = boost::filesystem::detail::symlink_status((boost::filesystem::detail *)this, a2, v8);
    int v5 = v8[0];
    int v6 = v8[1];
    v3[8] = v8[0];
    v3[9] = v6;
  }
  else if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    int v5 = this[8];
    int v6 = this[9];
  }
  *a3 = v5;
  a3[1] = v6;
  return this;
}

std::string *boost::filesystem::path_traits::dispatch(std::string *__str, std::string *this)
{
  return std::string::operator=(this, __str);
}

DIR *boost::filesystem::detail::dir_itr_close@<X0>(DIR **this@<X0>, void **a2@<X1>, boost::system::error_code *a3@<X8>)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  double result = *this;
  if (*this && (*this = 0, double result = (DIR *)closedir(result), result))
  {
    uint64_t v8 = *__error();
    return (DIR *)boost::system::error_code::error_code(a3, v8, (const boost::system::error_category *)&boost::system::detail::system_cat_holder<void>::instance);
  }
  else
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  return result;
}

boost::system::error_code *boost::system::error_code::error_code(boost::system::error_code *this, uint64_t a2, const boost::system::error_category *a3)
{
  int v4 = a2;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (*((void *)a3 + 1) >> 1 == 0x595588BD12BF6FE8) {
    int v6 = a2 != 0;
  }
  else {
    int v6 = (*(uint64_t (**)(const boost::system::error_category *, uint64_t))(*(void *)a3 + 48))(a3, a2);
  }
  uint64_t v7 = 2;
  *(_DWORD *)this = v4;
  if (v6) {
    uint64_t v7 = 3;
  }
  *((void *)this + 1) = a3;
  *((void *)this + 2) = v7;
  return this;
}

boost::filesystem::detail::dir_itr_imp **boost::filesystem::detail::directory_iterator_construct(dirent **this, std::string *a2, const boost::filesystem::path *a3, boost::filesystem::path *a4, boost::system::error_code *a5)
{
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    char v8 = (char)a3;
    if (a4)
    {
      *(void *)a4 = 0;
      *((void *)a4 + 1) = 0;
      *((void *)a4 + 2) = 0;
      unsigned int v38 = 0;
      uint64_t v10 = operator new(0x40uLL, &std::nothrow);
      if (v10)
      {
        *(_DWORD *)uint64_t v10 = 0;
        v10[2] = 0;
        v10[3] = 0;
        v10[1] = 0;
        *((_DWORD *)v10 + 8) = 0;
        *(void *)((char *)v10 + 36) = 0xFFFFLL;
        *((_DWORD *)v10 + 11) = 0xFFFF;
        v10[6] = 0;
        _DWORD v10[7] = 0;
        uint64_t v35 = (boost::filesystem::detail::dir_itr_imp *)v10;
        atomic_fetch_add((atomic_uint *volatile)v10, 1u);
        int v11 = (boost::filesystem::detail::dir_itr_imp *)v10;
        uint64_t v12 = v38;
      }
      else
      {
        uint64_t v12 = 0;
        int v11 = 0;
      }
      uint64_t v35 = v12;
      unsigned int v38 = v11;
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v35);
      std::string::size_type v14 = v38;
      if (!v38)
      {
        if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8
          || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 12))
        {
          uint64_t v32 = 3;
        }
        else
        {
          uint64_t v32 = 2;
        }
        *(void *)a4 = 12;
        *((void *)a4 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
        *((void *)a4 + 2) = v32;
        return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v38);
      }
    }
    else
    {
      unsigned int v38 = 0;
      unint64_t v13 = operator new(0x40uLL);
      *(_DWORD *)unint64_t v13 = 0;
      v13[2] = 0;
      v13[3] = 0;
      v13[1] = 0;
      *((_DWORD *)v13 + 8) = 0;
      *(void *)((char *)v13 + 36) = 0xFFFFLL;
      *((_DWORD *)v13 + 11) = 0xFFFF;
      v13[6] = 0;
      v13[7] = 0;
      uint64_t v35 = (boost::filesystem::detail::dir_itr_imp *)v13;
      atomic_fetch_add((atomic_uint *volatile)v13, 1u);
      uint64_t v35 = v38;
      unsigned int v38 = (boost::filesystem::detail::dir_itr_imp *)v13;
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v35);
      std::string::size_type v14 = v38;
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = (const char *)a2;
    }
    else {
      uint64_t v15 = (const char *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v18 = opendir(v15);
    *((void *)v14 + 6) = v18;
    if (v18)
    {
      char v19 = 1;
      uint64_t v20 = 46;
    }
    else
    {
      uint64_t v21 = *__error();
      uint64_t v35 = 0;
      if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
        int v22 = v21 != 0;
      }
      else {
        int v22 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v21);
      }
      uint64_t v23 = 2;
      LODWORD(v35) = v21;
      if (v22) {
        uint64_t v23 = 3;
      }
      unint64_t v36 = (unint64_t)&boost::system::detail::system_cat_holder<void>::instance;
      uint64_t v37 = v23;
      if (v23)
      {
        __str.__r_.__value_.__r.__words[0] = 13;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
        char v28 = boost::system::operator==((uint64_t *)&v35, (uint64_t)&__str);
        if ((v8 & 1) == 0 || (v28 & 1) == 0)
        {
          unint64_t v30 = v35;
          if (v37 == 1) {
            unint64_t v30 = v35 + 1000 * (v36 % 0x1FFFF7);
          }
          if (v30)
          {
            boost::filesystem::emit_error((boost::filesystem *)v30, (uint64_t)a2, a4, (boost::system::error_code *)"boost::filesystem::directory_iterator::construct", v29);
          }
          else if (a4)
          {
            *(void *)a4 = 0;
            *((void *)a4 + 1) = 0;
            *((void *)a4 + 2) = 0;
          }
        }
        return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v38);
      }
      uint64_t v20 = 0;
      char v19 = 0;
    }
    char v24 = v38;
    if (*((void *)v38 + 6))
    {
      int v25 = *this;
      *this = (dirent *)v38;
      unsigned int v38 = (boost::filesystem::detail::dir_itr_imp *)v25;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v20;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v19;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = *a2;
      }
      boost::filesystem::path::append_v4(&__str, &__p, v16, v17);
      std::string::operator=((std::string *)((char *)v24 + 8), &__str);
      *(void *)&long long v27 = 0xFFFF00000000;
      *((void *)&v27 + 1) = 0xFFFF00000000;
      *((_OWORD *)v24 + 2) = v27;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v18) {
          return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v38);
        }
        goto LABEL_32;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v18) {
LABEL_32:
      }
        boost::filesystem::detail::directory_iterator_increment(this, a4, v26);
    }
    return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v38);
  }

  return (boost::filesystem::detail::dir_itr_imp **)boost::filesystem::emit_error((boost::filesystem *)2, (uint64_t)a2, a4, (boost::system::error_code *)"boost::filesystem::directory_iterator::construct", (const char *)a5);
}

void sub_1001B3700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (v23)
    {
      if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8
        || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 12))
      {
        uint64_t v28 = 3;
      }
      else
      {
        uint64_t v28 = 2;
      }
      void *v23 = 12;
      v23[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v23[2] = v28;
      a23 = *v24;
      uint64_t *v24 = 0;
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&a23);
      __cxa_end_catch();
      JUMPOUT(0x1001B3614);
    }
    __cxa_rethrow();
  }
  boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_1001B3804()
{
}

void boost::filesystem::detail::directory_iterator_increment(dirent **this, boost::filesystem::directory_iterator *a2, boost::system::error_code *a3)
{
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  memset(&v34, 0, sizeof(v34));
  int v37 = 0;
  uint64_t v36 = 0;
  int v5 = *this;
  int v6 = *(DIR **)&(*this)->d_name[27];
  while (1)
  {
    uint64_t v35 = 0;
    *__error() = 0;
    uint64_t v7 = sysconf(91);
    char v8 = (dirent **)&v5->d_name[35];
    if (v7 < 0)
    {
      *__error() = 0;
      std::string::size_type v14 = readdir(v6);
      uint64_t v35 = v14;
      if (v14)
      {
LABEL_14:
        std::string::__assign_external(&v34, v14->d_name);
        memset(&v33, 0, sizeof(v33));
        uint64_t v36 = 0;
        int v37 = (unsigned __int128)0 >> 96;
        goto LABEL_15;
      }
      uint64_t v13 = *__error();
      if (v13) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v9 = *v8;
      if (!*v8)
      {
            + 25;
        uint64_t v21 = (dirent *)malloc(v28);
        *char v8 = v21;
        if (!v21)
        {
          uint64_t v13 = 12;
LABEL_31:
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
          if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8
            || ((unsigned int (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v13))
          {
            std::string::size_type v15 = 3;
          }
          else
          {
            std::string::size_type v15 = 2;
          }
          LODWORD(v33.__r_.__value_.__l.__data_) = v13;
          v33.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::system_cat_holder<void>::instance;
          v33.__r_.__value_.__r.__words[2] = v15;
          goto LABEL_9;
        }
        unint64_t v9 = v21;
        bzero(v21, v28);
      }
      uint64_t v13 = readdir_r(v6, v9, &v35);
      if (v13) {
        goto LABEL_31;
      }
    }
    std::string::size_type v14 = v35;
    if (v35) {
      goto LABEL_14;
    }
    boost::filesystem::detail::dir_itr_close((DIR **)&v5->d_name[27], (void **)&v5->d_name[35], (boost::system::error_code *)&v33);
    LODWORD(v13) = v33.__r_.__value_.__l.__data_;
    std::string::size_type v15 = v33.__r_.__value_.__r.__words[2];
LABEL_9:
    uint64_t v36 = *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4);
    int v37 = HIDWORD(v33.__r_.__value_.__r.__words[1]);
    if ((v15 & 1) != 0 && (v15 != 1 || v13))
    {
      uint64_t v35 = *this;
      int v26 = v35;
      *this = 0;
      boost::filesystem::path::parent_path((boost::filesystem::path *)&v26->d_seekoff, v10, v11, v12, &v33);
      if (!a2)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        int v29 = v13;
        uint64_t v30 = v36;
        int v31 = v37;
        std::string::size_type v32 = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::directory_iterator::operator++", &v33, &v29);
      }
      *(_DWORD *)a2 = v13;
      *(void *)((char *)a2 + 4) = v36;
      *((_DWORD *)a2 + 3) = v37;
      *((void *)a2 + 2) = v15;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      int v22 = (boost::filesystem::detail::dir_itr_imp **)&v35;
      goto LABEL_42;
    }
LABEL_15:
    int v5 = *this;
    int v6 = *(DIR **)&(*this)->d_name[27];
    if (!v6)
    {
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)*this;
      *this = 0;
      int v22 = (boost::filesystem::detail::dir_itr_imp **)&v33;
LABEL_42:
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(v22);
      goto LABEL_46;
    }
    uint64_t v16 = v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = &v34;
    }
    else {
      std::string::size_type v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if (v17->__r_.__value_.__s.__data_[0] != 46) {
      break;
    }
    uint64_t v18 = (v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v34
        : (std::string *)v34.__r_.__value_.__r.__words[0];
    int v19 = v18->__r_.__value_.__s.__data_[1];
    if (v19)
    {
      if (v19 != 46) {
        break;
      }
      uint64_t v20 = (v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v34
          : (std::string *)v34.__r_.__value_.__r.__words[0];
      if (v20->__r_.__value_.__s.__data_[2]) {
        break;
      }
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v34;
  }
  boost::filesystem::path::remove_filename((boost::filesystem::path *)&v5->d_seekoff, v16, v11, v12);
  boost::filesystem::path::append_v4((std::string *)&v5->d_seekoff, &v33, v23, v24);
  *(void *)&long long v25 = 0xFFFF00000000;
  *((void *)&v25 + 1) = 0xFFFF00000000;
  *(_OWORD *)&v5->d_name[11] = v25;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
LABEL_46:
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_1001B3B94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
}

void sub_1001B3CB8(_Unwind_Exception *a1)
{
}

void sub_1001B3CC0(_Unwind_Exception *a1)
{
}

void sub_1001B3CCC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1001B3CD4);
  }
  __clang_call_terminate(a1);
}

void *boost::filesystem::path::parent_path@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  int v6 = (char *)this;
  if (*((char *)this + 23) < 0) {
    int v6 = *(char **)this;
  }
  parent_path_std::string::size_type size = boost::filesystem::path::find_parent_path_size(this, a2, a3, a4);

  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, v6, (char *)&parent_path_size[(void)v6], (unint64_t)parent_path_size);
}

boost::filesystem::detail::dir_itr_imp **boost::filesystem::detail::recursive_directory_iterator_construct(void ***a1, std::string *a2, boost::filesystem::path *a3, boost::filesystem::path *a4, boost::system::error_code *a5)
{
  int v6 = (int)a3;
  if (a4)
  {
    *(void *)a4 = 0;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
  }
  std::string v33 = 0;
  boost::filesystem::detail::directory_iterator_construct((dirent **)&v33, a2, a3, a4, a5);
  if (!a4 || (uint64_t v8 = *((void *)a4 + 2), (v8 & 1) == 0) || v8 == 1 && !*(_DWORD *)a4)
  {
    std::string v34 = 0;
    if (v33 && *((void *)v33 + 6))
    {
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v34);
      std::string::size_type v32 = 0;
      if (a4)
      {
        unint64_t v9 = operator new(0x28uLL, &std::nothrow);
        if (v9)
        {
          *(_DWORD *)unint64_t v9 = 0;
          v9[2] = 0;
          v9[3] = 0;
          v9[1] = 0;
          *((_DWORD *)v9 + 8) = v6;
          std::string v34 = (void **)v9;
          atomic_fetch_add((atomic_uint *volatile)v9, 1u);
          uint64_t v10 = (void **)v9;
          uint64_t v11 = v32;
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v10 = 0;
        }
        std::string v34 = v11;
        std::string::size_type v32 = v10;
        boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr(&v34);
        uint64_t v13 = v32;
        if (!v32)
        {
          if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8
            || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 12))
          {
            uint64_t v31 = 3;
          }
          else
          {
            uint64_t v31 = 2;
          }
          *(void *)a4 = 12;
          *((void *)a4 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
          *((void *)a4 + 2) = v31;
LABEL_34:
          boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr(&v32);
          return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v33);
        }
      }
      else
      {
        uint64_t v12 = operator new(0x28uLL);
        *(_DWORD *)uint64_t v12 = 0;
        xpc_object_t v12[2] = 0;
        void v12[3] = 0;
        v12[1] = 0;
        *((_DWORD *)v12 + 8) = v6;
        std::string v34 = (void **)v12;
        atomic_fetch_add((atomic_uint *volatile)v12, 1u);
        std::string v34 = v32;
        std::string::size_type v32 = (void **)v12;
        boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr(&v34);
        uint64_t v13 = v32;
      }
      std::string::size_type v14 = v13[3];
      std::string::size_type v15 = v13[2];
      if (v15 >= (void *)v14)
      {
        uint64_t v18 = v13[1];
        uint64_t v19 = v15 - v18;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = v14 - (unsigned char *)v18;
        unint64_t v21 = (v14 - (unsigned char *)v18) >> 2;
        if (v21 <= v19 + 1) {
          unint64_t v21 = v19 + 1;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v37 = v13 + 3;
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::filesystem::directory_iterator>>((uint64_t)(v13 + 3), v22);
          uint64_t v18 = v13[1];
          std::string::size_type v15 = v13[2];
        }
        else
        {
          uint64_t v23 = 0;
        }
        char v24 = &v23[8 * v19];
        long long v25 = &v23[8 * v22];
        uint64_t v36 = v25;
        *(void *)char v24 = v33;
        std::string v33 = 0;
        *((void *)&v35 + 1) = v24 + 8;
        if (v15 == v18)
        {
          uint64_t v16 = v24 + 8;
        }
        else
        {
          do
          {
            uint64_t v26 = *--v15;
            *((void *)v24 - 1) = v26;
            v24 -= 8;
            void *v15 = 0;
          }
          while (v15 != v18);
          uint64_t v16 = (void *)*((void *)&v35 + 1);
          long long v25 = v36;
        }
        long long v27 = *(_OWORD *)(v13 + 1);
        v13[1] = v24;
        v13[2] = v16;
        long long v35 = v27;
        uint64_t v28 = (char *)v13[3];
        v13[3] = v25;
        uint64_t v36 = v28;
        std::string v34 = (void **)v27;
        std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer((uint64_t)&v34);
        std::string::size_type v17 = v32;
      }
      else
      {
        void *v15 = v33;
        uint64_t v16 = v15 + 1;
        std::string v33 = 0;
        std::string::size_type v17 = v13;
      }
      v13[2] = v16;
      int v29 = *a1;
      *a1 = v17;
      std::string::size_type v32 = v29;
      goto LABEL_34;
    }
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v34);
  }
  return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v33);
}

void sub_1001B400C()
{
}

void sub_1001B406C()
{
}

double boost::filesystem::detail::recursive_directory_iterator_pop(void ***a1, void *a2)
{
  int v4 = *a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  while (1)
  {
    uint64_t v7 = (boost::filesystem::detail::dir_itr_imp **)v4[2];
    uint64_t v8 = boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(v7 - 1);
    v4[2] = v8;
    if (v4[1] == v8)
    {
      *(void *)&long long v14 = *a1;
      *a1 = 0;
      boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr((void ***)&v14);
      return result;
    }
    int v5 = (dirent **)(v7 - 2);
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    boost::filesystem::detail::directory_iterator_increment(v5, (boost::filesystem::directory_iterator *)&v14, v9);
    if ((v15 & 1) != 0 && (v15 != 1 || v14 != 0)) {
      break;
    }
    uint64_t v16 = 0;
    if (*v5 && *(void *)&(*v5)->d_name[27])
    {
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v16);
      return result;
    }
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v16);
  }
  if (((_BYTE)v4[4] & 8) == 0
        v4[1] == v4[2]))
  {
    uint64_t v16 = *a1;
    *a1 = 0;
    boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr(&v16);
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    long long v12 = v14;
    uint64_t v13 = v15;
    boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::recursive_directory_iterator::pop", &v12);
  }
  double result = *(double *)&v14;
  *(_OWORD *)a2 = v14;
  a2[2] = v15;
  return result;
}

void sub_1001B41F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

boost::filesystem::detail::dir_itr_imp **boost::filesystem::detail::anonymous namespace'::recursive_directory_iterator_pop_on_error(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    double result = boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)(i - 8));
    *(void *)(a1 + 16) = result;
    if (*(boost::filesystem::detail::dir_itr_imp ***)(a1 + 8) == result) {
      break;
    }
    int v5 = (dirent **)(i - 16);
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v9 = 0;
    boost::filesystem::detail::directory_iterator_increment(v5, (boost::filesystem::directory_iterator *)v8, v4);
    if ((v9 & 1) != 0 && (v9 != 1 || LODWORD(v8[0]) != 0)) {
      continue;
    }
    uint64_t v7 = 0;
    if (*v5 && *(void *)&(*v5)->d_name[27]) {
      return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v7);
    }
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v7);
  }
  return result;
}

double boost::filesystem::detail::recursive_directory_iterator_increment(void ***a1, void *a2, boost::system::error_code *a3)
{
  int v5 = *a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  long long v41 = 0uLL;
  uint64_t v42 = 0;
  int v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x10) != 0)
  {
    char v16 = 0;
    *((_DWORD *)v5 + 8) = v6 & 0xFFFFFFEF;
    goto LABEL_28;
  }
  if ((v5[4] & 6) == 2)
  {
    int v7 = 0;
  }
  else
  {
    boost::filesystem::directory_entry::get_symlink_status((int *)(*((void *)v5[2] - 1) + 8), (boost::system::error_code *)&v41, (int *)&v44);
    int v7 = v44;
    if (v42)
    {
      char v16 = 0;
      if (v42 != 1 || v41) {
        goto LABEL_28;
      }
    }
    if (((_BYTE)v5[4] & 2) == 0 && v44 == 4)
    {
LABEL_27:
      char v16 = 0;
      goto LABEL_28;
    }
  }
  v9.n128_f64[0] = boost::filesystem::directory_entry::get_status((boost::filesystem::directory_entry *)(*((void *)v5[2] - 1) + 8), (boost::system::error_code *)&v41, (double *)v39);
  if ((v42 & 1) != 0 && (v42 != 1 || v41))
  {
    uint64_t v44 = 2;
    *(void *)&long long v45 = &boost::system::detail::generic_cat_holder<void>::instance;
    if (boost::system::operator==((uint64_t *)&v41, (uint64_t)&v44)
      && v7 == 4
      && (~*((_DWORD *)v5 + 8) & 6) == 0)
    {
      char v16 = 0;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (LODWORD(v39[0]) != 3) {
    goto LABEL_27;
  }
  uint64_t v10 = (char *)v5[2];
  if ((unint64_t)(((v10 - (unsigned char *)v5[1]) >> 3) - 1) < 0x7FFFFFFF)
  {
    uint64_t v11 = (std::string *)(*((void *)v10 - 1) + 8);
    long long v12 = (const boost::filesystem::path *)*((unsigned int *)v5 + 8);
    int v43 = 0;
    boost::filesystem::detail::directory_iterator_construct((dirent **)&v43, v11, v12, (boost::filesystem::path *)&v41, v8);
    if ((v42 & 1) == 0 || v42 == 1 && !v41)
    {
      uint64_t v44 = 0;
      if (v43 && *((void *)v43 + 6))
      {
        boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v44);
        uint64_t v13 = v5[3];
        long long v14 = v5[2];
        if (v14 >= (void *)v13)
        {
          uint64_t v23 = v5[1];
          uint64_t v24 = v14 - v23;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v25 = v13 - (unsigned char *)v23;
          unint64_t v26 = (v13 - (unsigned char *)v23) >> 2;
          if (v26 <= v24 + 1) {
            unint64_t v26 = v24 + 1;
          }
          if (v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          int v47 = v5 + 3;
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::filesystem::directory_iterator>>((uint64_t)(v5 + 3), v27);
            uint64_t v23 = v5[1];
            long long v14 = v5[2];
          }
          else
          {
            uint64_t v28 = 0;
          }
          int v29 = &v28[8 * v24];
          uint64_t v30 = &v28[8 * v27];
          uint64_t v46 = v30;
          *(void *)int v29 = v43;
          int v43 = 0;
          *((void *)&v45 + 1) = v29 + 8;
          if (v14 == v23)
          {
            uint64_t v15 = v29 + 8;
          }
          else
          {
            do
            {
              uint64_t v31 = *--v14;
              *((void *)v29 - 1) = v31;
              v29 -= 8;
              void *v14 = 0;
            }
            while (v14 != v23);
            uint64_t v15 = (void *)*((void *)&v45 + 1);
            uint64_t v30 = v46;
          }
          long long v32 = *(_OWORD *)(v5 + 1);
          v5[1] = v29;
          v5[2] = v15;
          long long v45 = v32;
          std::string v33 = (char *)v5[3];
          _OWORD v5[3] = v30;
          uint64_t v46 = v33;
          uint64_t v44 = v32;
          std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer((uint64_t)&v44);
        }
        else
        {
          void *v14 = v43;
          uint64_t v15 = v14 + 1;
          int v43 = 0;
        }
        v5[2] = v15;
        unint64_t v22 = &v43;
LABEL_44:
        boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(v22);
        return result;
      }
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v44);
    }
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v43);
    goto LABEL_27;
  }
  if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8
    || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t, __n128))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 84, v9))
  {
    uint64_t v35 = 3;
  }
  else
  {
    uint64_t v35 = 2;
  }
  *(void *)&long long v41 = 84;
  *((void *)&v41 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
  uint64_t v42 = v35;
  char v16 = 2;
LABEL_28:
  if ((v42 & 1) == 0 || v42 == 1 && !v41)
  {
    uint64_t v18 = (boost::filesystem::detail::dir_itr_imp **)v5[1];
    std::string::size_type v17 = (boost::filesystem::detail::dir_itr_imp **)v5[2];
    while (1)
    {
      if (v18 == v17)
      {
        v39[0] = *a1;
        *a1 = 0;
        boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr(v39);
        return result;
      }
      uint64_t v19 = v17 - 1;
      boost::filesystem::detail::directory_iterator_increment((dirent **)v17 - 1, (boost::filesystem::directory_iterator *)&v41, a3);
      if ((v42 & 1) != 0 && (v42 != 1 || v41 != 0)) {
        goto LABEL_61;
      }
      v39[0] = 0;
      if (*v19)
      {
        if (*((void *)*v19 + 6)) {
          break;
        }
      }
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)v39);
      std::string::size_type v17 = boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)v5[2] - 1);
      v5[2] = v17;
      uint64_t v18 = (boost::filesystem::detail::dir_itr_imp **)v5[1];
    }
    unint64_t v22 = (boost::filesystem::detail::dir_itr_imp **)v39;
    goto LABEL_44;
  }
LABEL_61:
  if (((_BYTE)v5[4] & 8) == 0) {
    goto LABEL_71;
  }
  if ((v16 & 2) == 0
    || (v39[1] = 0,
        uint64_t v40 = 0,
        v39[0] = 0,
        std::string v34 = (dirent **)((char *)v5[2] - 8),
        boost::filesystem::detail::directory_iterator_increment(v34, (boost::filesystem::directory_iterator *)v39, a3),
        (v40 & 1) != 0)
    && (v40 != 1 || LODWORD(v39[0])))
  {
LABEL_70:
    if (v5[1] != v5[2]) {
      goto LABEL_72;
    }
LABEL_71:
    v39[0] = *a1;
    *a1 = 0;
    boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr(v39);
    goto LABEL_72;
  }
  int v43 = 0;
  if (!*v34 || !*(void *)&(*v34)->d_name[27])
  {
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v43);
    goto LABEL_70;
  }
  boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v43);
LABEL_72:
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    long long v37 = v41;
    uint64_t v38 = v42;
    boost::filesystem::filesystem_error::filesystem_error(exception, "filesystem::recursive_directory_iterator increment error", &v37);
  }
  double result = *(double *)&v41;
  *(_OWORD *)a2 = v41;
  a2[2] = v42;
  return result;
}

void sub_1001B477C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001B4790(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, uint64_t (***)(boost::system::detail::generic_error_category *__hidden this));
  uint64_t v14 = va_arg(va1, void);
  boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)va1);
  if (a2 == 2)
  {
    boost::filesystem::detail::recursive_directory_iterator_increment(a1, (uint64_t *)va);
    uint64_t v12 = 12;
    uint64_t v13 = &boost::system::detail::generic_cat_holder<void>::instance;
    uint64_t v14 = v8;
    __cxa_end_catch();
    JUMPOUT(0x1001B4438);
  }
  __clang_call_terminate(a1);
}

const char *boost::system::detail::generic_error_category::name(boost::system::detail::generic_error_category *this)
{
  return "generic";
}

uint64_t boost::system::error_category::default_error_condition(boost::system::error_category *this, unsigned int a2)
{
  return a2;
}

void *boost::system::detail::generic_error_category::message@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  int v4 = strerror(__errnum);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = "Unknown error";
  }

  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

const char *boost::system::detail::generic_error_category::message(boost::system::detail::generic_error_category *this, int __errnum, char *a3, uint64_t a4)
{
  int v4 = a3;
  if (a4)
  {
    int v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      int v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      int v5 = &v4[v6];
    }
    char *v5 = 0;
  }
  return v4;
}

uint64_t boost::system::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    if (v4 == 1)
    {
      unint64_t v5 = boost::system::error_code::operator std::error_code(a1);
      uint64_t v7 = v6;
      v15[0] = v5;
      v15[1] = v6;
      uint64_t v13 = boost::system::error_condition::operator std::error_condition((unsigned int *)a2);
      uint64_t v14 = v8;
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(void *)v7 + 32))(v7, v5, &v13) & 1) == 0) {
        return (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v14 + 40))(v14, v15, v13);
      }
      return 1;
    }
    uint64_t v10 = (uint64_t (***)(boost::system::detail::system_error_category *__hidden))a1[1];
  }
  else
  {
    uint64_t v10 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  if (((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), void, uint64_t))(*v10)[2])(v10, *(unsigned int *)a1, a2))return 1; {
  if (*(void *)(a2 + 8))
  }
    uint64_t v11 = *(uint64_t (****)(boost::system::detail::generic_error_category *__hidden))(a2 + 8);
  else {
    uint64_t v11 = &boost::system::detail::generic_cat_holder<void>::instance;
  }
  uint64_t v12 = (uint64_t (*)(void))(*v11)[3];

  return v12();
}

unint64_t boost::system::error_code::operator std::error_code(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    if (v1 == 1)
    {
      uint64_t v2 = *a1;
      unint64_t v3 = *a1 & 0xFFFFFFFF00000000;
    }
    else
    {
      LODWORD(v2) = *(_DWORD *)a1;
      uint64_t v4 = a1[1];
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5 == 0xB2AB117A257EDFD1)
      {
        std::system_category();
      }
      else if (v5 == 0xB2AB117A257EDFD0)
      {
        std::generic_category();
      }
      else if (!atomic_load_explicit((atomic_ullong *volatile)(v4 + 16), memory_order_acquire))
      {
        uint64_t v6 = operator new(0x10uLL);
        uint64_t v7 = 0;
        void *v6 = off_10049BC80;
        v6[1] = v4;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 16), (unint64_t *)&v7, (unint64_t)v6);
        if (v7)
        {
          (*(void (**)(void *))(*v6 + 8))(v6);
          unint64_t v3 = 0;
          return v3 | v2;
        }
      }
      unint64_t v3 = 0;
    }
  }
  else
  {
    std::system_category();
    unint64_t v3 = 0;
    LODWORD(v2) = 0;
  }
  return v3 | v2;
}

uint64_t boost::system::error_condition::operator std::error_condition(unsigned int *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = *a1;
  if (!v1) {
    goto LABEL_4;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3 == 0xB2AB117A257EDFD1)
  {
    std::system_category();
    return v2;
  }
  if (v3 != 0xB2AB117A257EDFD0)
  {
    if (!atomic_load_explicit((atomic_ullong *volatile)(v1 + 16), memory_order_acquire))
    {
      uint64_t v5 = operator new(0x10uLL);
      uint64_t v6 = 0;
      void *v5 = off_10049BC80;
      v5[1] = v1;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v1 + 16), (unint64_t *)&v6, (unint64_t)v5);
      if (v6) {
        (*(void (**)(void *))(*v5 + 8))(v5);
      }
    }
  }
  else
  {
LABEL_4:
    std::generic_category();
  }
  return v2;
}

void boost::system::detail::std_category::~std_category(std::error_category *this)
{
  std::error_category::~error_category(this);

  operator delete(v1);
}

uint64_t boost::system::detail::std_category::name(boost::system::detail::std_category *this)
{
  return (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
}

uint64_t boost::system::detail::std_category::default_error_condition(boost::system::detail::std_category *this)
{
  v3[0] = (*(uint64_t (**)(void))(**((void **)this + 1) + 8))(*((void *)this + 1));
  v3[1] = v1;
  return boost::system::error_condition::operator std::error_condition((unsigned int *)v3);
}

uint64_t boost::system::detail::std_category::equivalent(boost::system::detail::std_category *this, uint64_t a2, const std::error_condition *a3)
{
  cat = (boost::system::detail::std_category *)a3->__cat_;
  if (cat == this)
  {
    __n128 v9 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))*((void *)this + 1);
    int val = a3->__val_;
    uint64_t v18 = v9;
    return ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t, int *))(*v9)[2])(v9, a2, &val);
  }
  if (cat == (boost::system::detail::std_category *)std::generic_category()) {
    goto LABEL_14;
  }
  uint64_t v7 = a3->__cat_;
  if (qword_1004B5DD8 == 0xB2AB117A257EDFD1)
  {
    unsigned int explicit = (std::error_category *)std::system_category();
  }
  else if (qword_1004B5DD8 == 0xB2AB117A257EDFD0)
  {
    unsigned int explicit = (std::error_category *)std::generic_category();
  }
  else
  {
    unsigned int explicit = (std::error_category *)atomic_load_explicit(&qword_1004B5DE0, memory_order_acquire);
    if (!explicit)
    {
      unsigned int explicit = (std::error_category *)operator new(0x10uLL);
      uint64_t v10 = 0;
      explicit->__vftable = (std::error_category_vtbl *)off_10049BC80;
      explicit[1].__vftable = (std::error_category_vtbl *)&boost::system::detail::generic_cat_holder<void>::instance;
      atomic_compare_exchange_strong(&qword_1004B5DE0, (unint64_t *)&v10, (unint64_t)explicit);
      if (v10)
      {
        ((void (*)(std::error_category *))explicit->~error_category_0)(explicit);
        unsigned int explicit = v10;
      }
    }
  }
  if (v7 == explicit)
  {
LABEL_14:
    int val = a3->__val_;
    uint64_t v18 = &boost::system::detail::generic_cat_holder<void>::instance;
    goto LABEL_15;
  }
  if (v11)
  {
    uint64_t v12 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))v11[1];
    int val = a3->__val_;
    uint64_t v18 = v12;
LABEL_15:
    __n128 v9 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))*((void *)this + 1);
    return ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t, int *))(*v9)[2])(v9, a2, &val);
  }
  int v14 = (*(uint64_t (**)(boost::system::detail::std_category *, uint64_t))(*(void *)this + 24))(this, a2);
  return a3->__cat_ == v15 && a3->__val_ == v14;
}

uint64_t boost::system::detail::std_category::equivalent(boost::system::detail::std_category *this, const std::error_code *a2, uint64_t a3)
{
  cat = (boost::system::detail::std_category *)a2->__cat_;
  if (cat == this)
  {
    uint64_t val = a2->__val_;
    uint64_t v10 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))*((void *)this + 1);
    uint64_t v29 = 0;
    if ((unint64_t)v10[1] >> 1 == 0x595588BD12BF6FE8)
    {
      int v11 = val != 0;
      uint64_t v12 = v10;
    }
    else
    {
      int v11 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))(*v10)[6])(v10, val);
      uint64_t v12 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))*((void *)this + 1);
    }
    BOOL v13 = v11 == 0;
    uint64_t v14 = 2;
    if (!v13) {
      uint64_t v14 = 3;
    }
    LODWORD(v29) = val;
    uint64_t v30 = v10;
    uint64_t v31 = v14;
    return ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t *, uint64_t))(*v12)[3])(v12, &v29, a3);
  }
  if (cat == (boost::system::detail::std_category *)std::generic_category()) {
    goto LABEL_20;
  }
  uint64_t v7 = a2->__cat_;
  if (qword_1004B5DD8 == 0xB2AB117A257EDFD1)
  {
    unsigned int explicit = (std::error_category *)std::system_category();
  }
  else if (qword_1004B5DD8 == 0xB2AB117A257EDFD0)
  {
    unsigned int explicit = (std::error_category *)std::generic_category();
  }
  else
  {
    unsigned int explicit = (std::error_category *)atomic_load_explicit(&qword_1004B5DE0, memory_order_acquire);
    if (!explicit)
    {
      unsigned int explicit = (std::error_category *)operator new(0x10uLL);
      uint64_t v15 = 0;
      explicit->__vftable = (std::error_category_vtbl *)off_10049BC80;
      explicit[1].__vftable = (std::error_category_vtbl *)&boost::system::detail::generic_cat_holder<void>::instance;
      atomic_compare_exchange_strong(&qword_1004B5DE0, (unint64_t *)&v15, (unint64_t)explicit);
      if (v15)
      {
        ((void (*)(std::error_category *))explicit->~error_category_0)(explicit);
        unsigned int explicit = v15;
      }
    }
  }
  if (v7 == explicit)
  {
LABEL_20:
    uint64_t v20 = a2->__val_;
    uint64_t v29 = 0;
    if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8) {
      int v21 = v20 != 0;
    }
    else {
      int v21 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, v20);
    }
    uint64_t v22 = 2;
    if (v21) {
      uint64_t v22 = 3;
    }
    LODWORD(v29) = v20;
    uint64_t v30 = &boost::system::detail::generic_cat_holder<void>::instance;
    uint64_t v31 = v22;
    goto LABEL_36;
  }
  if (v16)
  {
    uint64_t v17 = a2->__val_;
    uint64_t v18 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))v16[1];
    uint64_t v29 = 0;
    if ((unint64_t)v18[1] >> 1 == 0x595588BD12BF6FE8) {
      int v19 = v17 != 0;
    }
    else {
      int v19 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))(*v18)[6])(v18, v17);
    }
    uint64_t v28 = 2;
    if (v19) {
      uint64_t v28 = 3;
    }
    LODWORD(v29) = v17;
    uint64_t v30 = v18;
    uint64_t v31 = v28;
LABEL_36:
    uint64_t v12 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))*((void *)this + 1);
    return ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t *, uint64_t))(*v12)[3])(v12, &v29, a3);
  }
  uint64_t v23 = (uint64_t (***)(boost::system::detail::generic_error_category *__hidden))*((void *)this + 1);
  BOOL v24 = v23 == &boost::system::detail::generic_cat_holder<void>::instance;
  BOOL v25 = v23[1] == (uint64_t (**)(boost::system::detail::generic_error_category *__hidden))qword_1004B5DD8;
  if (!qword_1004B5DD8) {
    BOOL v25 = v24;
  }
  if (!v25) {
    return 0;
  }
  equivalent_0 = (uint64_t (*)(void))std::generic_category()->equivalent_0;

  return equivalent_0();
}

uint64_t boost::system::detail::std_category::message(boost::system::detail::std_category *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t boost::filesystem::detail::anonymous namespace'::path_max(boost::filesystem::detail::_anonymous_namespace_ *this)
{
  {
    if (v2)
    {
    }
  }
}

void sub_1001B530C(_Unwind_Exception *a1)
{
}

uint64_t boost::filesystem::detail::anonymous namespace'::get_path_max(boost::filesystem::detail::_anonymous_namespace_ *this)
{
  *__error() = 0;
  uint64_t v1 = pathconf("/", 5);
  if ((unint64_t)v1 <= 0x400) {
    uint64_t v2 = 1024;
  }
  else {
    uint64_t v2 = v1;
  }
  if (v1 >= 0) {
    return v2;
  }
  else {
    return 1024;
  }
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::filesystem::directory_iterator>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<boost::filesystem::directory_iterator>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

boost::filesystem::detail::dir_itr_imp **boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(boost::filesystem::detail::dir_itr_imp **a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    boost::filesystem::detail::dir_itr_imp::~dir_itr_imp(v2);
    operator delete(v3);
  }
  return a1;
}

void boost::filesystem::detail::dir_itr_imp::~dir_itr_imp(boost::filesystem::detail::dir_itr_imp *this)
{
  boost::filesystem::detail::dir_itr_close((DIR **)this + 6, (void **)this + 7, (boost::system::error_code *)v2);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void ***boost::intrusive_ptr<boost::filesystem::detail::recur_dir_itr_imp>::~intrusive_ptr(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    uint64_t v4 = v2 + 1;
    std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(v2);
  }
  return a1;
}

void std::vector<boost::filesystem::directory_iterator>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (boost::filesystem::detail::dir_itr_imp **)**a1;
  if (v2)
  {
    uint64_t v4 = (boost::filesystem::detail::dir_itr_imp **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::filesystem::detail::possible_large_file_size_support(boost::filesystem::detail *this)
{
  return 1;
}

void boost::filesystem::detail::absolute(std::string::size_type *this@<X0>, std::string *a2@<X1>, const boost::filesystem::path *a3@<X2>, boost::system::error_code *a4@<X3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  boost::filesystem::path::find_root_directory((boost::filesystem::path *)this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)a4);
  if (v9)
  {
    if (*((char *)this + 23) < 0)
    {
      uint64_t v12 = (const std::string::value_type *)*this;
      std::string::size_type v13 = this[1];
      std::string::__init_copy_ctor_external((std::string *)a5, v12, v13);
    }
    else
    {
      *(_OWORD *)a5 = *(_OWORD *)this;
      *(void *)(a5 + 16) = this[2];
    }
    return;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v47, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else {
    std::string v47 = *a2;
  }
  boost::filesystem::path::find_root_directory((boost::filesystem::path *)a2, v9, v10, v11);
  if (v14) {
    goto LABEL_13;
  }
  if (!a3)
  {
    boost::filesystem::detail::current_path(0, &v46);
    boost::filesystem::detail::absolute((uint64_t *)&__p, (boost::filesystem::detail *)a2, (const boost::filesystem::path *)&v46, 0, v44);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    std::string v47 = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    goto LABEL_13;
  }
  boost::filesystem::detail::current_path(a3, &__p);
  uint64_t v24 = *((void *)a3 + 2);
  if ((v24 & 1) != 0 && (v24 != 1 || *(_DWORD *)a3)) {
    memset(&v46, 0, sizeof(v46));
  }
  else {
    boost::filesystem::detail::absolute((uint64_t *)&v46, (boost::filesystem::detail *)a2, (const boost::filesystem::path *)&__p, a3, v16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::string v47 = v46;
  uint64_t v45 = *((void *)a3 + 2);
  if ((v45 & 1) == 0 || v45 == 1 && !*(_DWORD *)a3)
  {
LABEL_13:
    std::string::size_type v17 = *((unsigned __int8 *)this + 23);
    if ((v17 & 0x80u) != 0) {
      std::string::size_type v17 = this[1];
    }
    if (v17)
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      if (boost::filesystem::path::find_root_name_size((boost::filesystem::path *)this, v14, v15, (unint64_t *)v16))
      {
        boost::filesystem::path::root_name((boost::filesystem::path *)this, v18, v19, v20, &__p);
      }
      else
      {
        boost::filesystem::path::root_name((boost::filesystem::path *)&v47, v18, v19, v20, &__p);
      }
      if (*(char *)(a5 + 23) < 0) {
        operator delete(*(void **)a5);
      }
      *(std::string *)a5 = __p;
      boost::filesystem::path::find_root_directory((boost::filesystem::path *)this, v21, v22, v23);
      if (v25)
      {
        boost::filesystem::path::root_directory((boost::filesystem::path *)this, v25, v26, v27, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a5, (const std::string::value_type *)p_p, size);
      }
      else
      {
        boost::filesystem::path::root_directory((boost::filesystem::path *)&v47, 0, v26, v27, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v33 = &__p;
        }
        else {
          std::string v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a5, (const std::string::value_type *)v33, v34);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        boost::filesystem::path::relative_path((boost::filesystem::path *)&v47, v35, v36, v37, &__p);
        boost::filesystem::path::append_v4((std::string *)a5, &__p, v38, v39);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      boost::filesystem::path::relative_path((boost::filesystem::path *)this, v30, v31, v32, &__p);
      std::string::size_type v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v42 = __p.__r_.__value_.__l.__size_;
      }
      if (v42)
      {
        boost::filesystem::path::append_v4((std::string *)a5, &__p, v40, v41);
        char v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v43 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(std::string *)a5 = v47;
      memset(&v47, 0, sizeof(v47));
    }
    goto LABEL_65;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
LABEL_65:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_1001B596C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void *boost::filesystem::path::root_name@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = (char *)this;
  if (*((char *)this + 23) < 0) {
    uint64_t v6 = *(char **)this;
  }
  root_name_std::string::size_type size = boost::filesystem::path::find_root_name_size(this, a2, a3, a4);

  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, v6, &v6[root_name_size], root_name_size);
}

void *boost::filesystem::path::root_directory@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = this;
  root_directory = boost::filesystem::path::find_root_directory(this, a2, a3, a4);
  if (*((char *)v5 + 23) < 0) {
    uint64_t v5 = *(boost::filesystem::path **)v5;
  }

  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, (char *)&root_directory[(void)v5], (char *)&root_directory[(void)v5 + v8], v8);
}

void *boost::filesystem::path::relative_path@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = this;
  relative_path = boost::filesystem::path::find_relative_path(this, a2, a3, a4);
  if (*((char *)v5 + 23) < 0) {
    uint64_t v5 = *(boost::filesystem::path **)v5;
  }

  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, (char *)&relative_path[(void)v5], (char *)&relative_path[(void)v5 + v8], v8);
}

void boost::filesystem::detail::canonical(std::string *this@<X0>, std::string *a2@<X1>, const boost::filesystem::path *a3@<X2>, boost::system::error_code *a4@<X3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v75, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v75 = *this;
  }
  boost::filesystem::path::find_root_directory((boost::filesystem::path *)this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)a4);
  if (!v10)
  {
    boost::filesystem::detail::absolute((std::string::size_type *)this, a2, a3, v9, (uint64_t)&v66);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    std::string v75 = v66;
    if (a3)
    {
      uint64_t v58 = *((void *)a3 + 2);
      if ((v58 & 1) != 0 && (v58 != 1 || *(_DWORD *)a3))
      {
LABEL_107:
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        goto LABEL_108;
      }
    }
  }
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  boost::filesystem::detail::status((boost::filesystem::detail *)&v75, (const boost::filesystem::path *)&v73, &v72);
  if (v72 == 1)
  {
    if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8
      || (uint64_t v14 = 2,
          ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 2)))
    {
      uint64_t v14 = 3;
    }
    *(void *)&long long v73 = 2;
    *((void *)&v73 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
    uint64_t v74 = v14;
    goto LABEL_105;
  }
  if ((v74 & 1) != 0 && (v74 != 1 || v73)) {
    goto LABEL_105;
  }
  uint64_t v15 = (boost::filesystem::detail *)boost::filesystem::path::root_path((boost::filesystem::path *)&v75, v11, v12, v13, &__p);
  char v16 = boost::filesystem::detail::dot_path(v15);
  uint64_t v18 = (std::string *)boost::filesystem::detail::dot_dot_path((boost::filesystem::detail *)v16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  int v19 = 40;
  while (2)
  {
    boost::filesystem::path::begin(&v75, v17, &v66);
    boost::filesystem::path::end((uint64_t)&v75, &v62);
    while (1)
    {
      if (v67 == v64 && v68 == v65)
      {
        int v45 = 6;
        goto LABEL_77;
      }
      if (!boost::filesystem::path::compare_v4(&v66, (std::string *)v16, v20, v17)) {
        goto LABEL_75;
      }
      if (!boost::filesystem::path::compare_v4(&v66, v18, v23, v17))
      {
        if (boost::filesystem::path::compare_v4((std::string *)a5, &__p, v24, v25)) {
          boost::filesystem::path::remove_filename((boost::filesystem::path *)a5, v22, v23, v17);
        }
        goto LABEL_75;
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v66.__r_.__value_.__l.__size_ != 1) {
          goto LABEL_32;
        }
        uint64_t v26 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) != 1) {
          goto LABEL_32;
        }
        uint64_t v26 = &v66;
      }
      if (v26->__r_.__value_.__s.__data_[0] == 47)
      {
        std::string::push_back((std::string *)a5, 47);
        goto LABEL_75;
      }
LABEL_32:
      boost::filesystem::path::append_v4((std::string *)a5, &v66, v24, v25);
      boost::filesystem::path::find_root_directory((boost::filesystem::path *)a5, v27, v28, v29);
      if (v22)
      {
        boost::filesystem::detail::symlink_status((boost::filesystem::detail *)a5, a3, (int *)&__str);
        if (a3)
        {
          uint64_t v30 = *((void *)a3 + 2);
          if ((v30 & 1) != 0 && (v30 != 1 || *(_DWORD *)a3))
          {
            int v45 = 2;
            goto LABEL_77;
          }
        }
        if (LODWORD(__str.__r_.__value_.__l.__data_) == 4) {
          break;
        }
      }
LABEL_75:
      boost::filesystem::path::iterator::increment_v4(&v66, v22, v23, v17);
    }
    if (v19)
    {
      boost::filesystem::detail::read_symlink((const char **)a5, a3, &__str);
      if (a3)
      {
        uint64_t v31 = *((void *)a3 + 2);
        if ((v31 & 1) != 0 && (v31 != 1 || *(_DWORD *)a3))
        {
          char v44 = 0;
          int v45 = 2;
          goto LABEL_72;
        }
      }
      boost::filesystem::path::remove_filename((boost::filesystem::path *)a5, v22, v23, v17);
      boost::filesystem::path::find_root_directory((boost::filesystem::path *)&__str, v32, v33, v34);
      if (v35)
      {
        while (1)
        {
          boost::filesystem::path::iterator::increment_v4(&v66, v35, v36, v37);
          if (v67 == v64 && v68 == v65) {
            break;
          }
          if (boost::filesystem::path::compare_v4(&v66, (std::string *)v16, v38, v39)) {
            boost::filesystem::path::append_v4(&__str, &v66, v36, v37);
          }
        }
        std::string::operator=(&v75, &__str);
        boost::filesystem::path::root_path((boost::filesystem::path *)&v75, v41, v42, v43, &v60);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v44 = 0;
        std::string __p = v60;
        goto LABEL_71;
      }
      boost::filesystem::path::remove_trailing_separator(&__str);
      if (boost::filesystem::path::compare_v4(&__str, (std::string *)v16, v46, v47))
      {
        if (*(char *)(a5 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
        }
        else {
          std::string v60 = *(std::string *)a5;
        }
        boost::filesystem::path::append_v4(&v60, &__str, v23, v17);
        boost::filesystem::path::iterator::increment_v4(&v66, v48, v49, v50);
        while (v67 != v64 || v68 != v65)
        {
          if (boost::filesystem::path::compare_v4(&v66, (std::string *)v16, v51, v52)) {
            boost::filesystem::path::append_v4(&v60, &v66, v55, v56);
          }
          boost::filesystem::path::iterator::increment_v4(&v66, v54, v55, v56);
        }
        std::string::operator=(&v75, &v60);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        char v44 = 0;
LABEL_71:
        int v45 = 15;
      }
      else
      {
        int v45 = 8;
        char v44 = 1;
      }
LABEL_72:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      --v19;
      if ((v44 & 1) == 0) {
        goto LABEL_77;
      }
      goto LABEL_75;
    }
    if ((qword_1004B5DD8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
      || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 62))
    {
      uint64_t v57 = 3;
    }
    else
    {
      uint64_t v57 = 2;
    }
    int v19 = 0;
    *(void *)&long long v73 = 62;
    *((void *)&v73 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
    int v45 = 3;
    uint64_t v74 = v57;
LABEL_77:
    if (v63 < 0) {
      operator delete(v62);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (v45 == 15)
    {
      if (*(char *)(a5 + 23) < 0)
      {
        **(unsigned char **)a5 = 0;
        *(void *)(a5 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a5 = 0;
        *(unsigned char *)(a5 + 23) = 0;
      }
      continue;
    }
    break;
  }
  if (v45 == 6)
  {
    int v45 = 1;
  }
  else if (*(char *)(a5 + 23) < 0)
  {
    operator delete(*(void **)a5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v45 == 3)
  {
LABEL_105:
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      long long v70 = v73;
      uint64_t v71 = v74;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::canonical", &v75, &v70);
    }
    *(_OWORD *)a3 = v73;
    *((void *)a3 + 2) = v74;
    goto LABEL_107;
  }
  if (v45 == 2) {
    goto LABEL_107;
  }
LABEL_108:
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_1001B6110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  _Unwind_Resume(exception_object);
}

int *boost::filesystem::detail::status@<X0>(boost::filesystem::detail *this@<X0>, const boost::filesystem::path *a2@<X1>, int *a3@<X8>)
{
  uint64_t v5 = this;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  double result = (int *)stat((const char *)this, &v18);
  if (result)
  {
    double result = __error();
    uint64_t v8 = *result;
    if (a2)
    {
      if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
        double result = (int *)(v8 != 0);
      }
      else {
        double result = (int *)((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v8);
      }
      uint64_t v12 = 2;
      if (result) {
        uint64_t v12 = 3;
      }
      *(_DWORD *)a2 = v8;
      *((_DWORD *)a2 + 1) = 0;
      *((void *)a2 + 1) = &boost::system::detail::system_cat_holder<void>::instance;
      *((void *)a2 + 2) = v12;
      if (v8 == 20) {
        int v13 = 0;
      }
      else {
        int v13 = 0xFFFF;
      }
      int v10 = v8 == 2 || v8 == 20;
      if (v8 == 2) {
        int v9 = 0;
      }
      else {
        int v9 = v13;
      }
    }
    else
    {
      if (v8 != 2 && v8 != 20)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v17[0] = 0;
        if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
          int v15 = v8 != 0;
        }
        else {
          int v15 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v8);
        }
        uint64_t v16 = 2;
        LODWORD(v17[0]) = v8;
        if (v15) {
          uint64_t v16 = 3;
        }
        v17[1] = &boost::system::detail::system_cat_holder<void>::instance;
        v17[2] = v16;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::status", v5, v17);
      }
      int v9 = 0;
      int v10 = 1;
    }
  }
  else
  {
    int v9 = 0xFFFF;
    int v10 = 10;
    switch(((v18.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 7;
        break;
      case 1u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 6;
        break;
      case 3u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 3;
        break;
      case 5u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 5;
        break;
      case 7u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 2;
        break;
      case 0xBu:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v10;
  a3[1] = v9;
  return result;
}

void sub_1001B644C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *boost::filesystem::path::root_path@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = (char *)this;
  if (*((char *)this + 23) < 0) {
    uint64_t v6 = *(char **)this;
  }
  root_path_std::string::size_type size = boost::filesystem::path::find_root_path_size(this, a2, a3, a4);

  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, v6, (char *)&root_path_size[(void)v6], (unint64_t)root_path_size);
}

int *boost::filesystem::detail::symlink_status@<X0>(boost::filesystem::detail *this@<X0>, const boost::filesystem::path *a2@<X1>, int *a3@<X8>)
{
  uint64_t v5 = this;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  double result = (int *)lstat((const char *)this, &v18);
  if (result)
  {
    double result = __error();
    uint64_t v8 = *result;
    if (a2)
    {
      if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
        double result = (int *)(v8 != 0);
      }
      else {
        double result = (int *)((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v8);
      }
      uint64_t v12 = 2;
      if (result) {
        uint64_t v12 = 3;
      }
      *(_DWORD *)a2 = v8;
      *((_DWORD *)a2 + 1) = 0;
      *((void *)a2 + 1) = &boost::system::detail::system_cat_holder<void>::instance;
      *((void *)a2 + 2) = v12;
      if (v8 == 20) {
        int v13 = 0;
      }
      else {
        int v13 = 0xFFFF;
      }
      int v10 = v8 == 2 || v8 == 20;
      if (v8 == 2) {
        int v9 = 0;
      }
      else {
        int v9 = v13;
      }
    }
    else
    {
      if (v8 != 2 && v8 != 20)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v17[0] = 0;
        if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
          int v15 = v8 != 0;
        }
        else {
          int v15 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v8);
        }
        uint64_t v16 = 2;
        LODWORD(v17[0]) = v8;
        if (v15) {
          uint64_t v16 = 3;
        }
        v17[1] = &boost::system::detail::system_cat_holder<void>::instance;
        v17[2] = v16;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::symlink_status", v5, v17);
      }
      int v9 = 0;
      int v10 = 1;
    }
  }
  else
  {
    int v9 = 0xFFFF;
    int v10 = 10;
    switch(((v18.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 7;
        break;
      case 1u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 6;
        break;
      case 3u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 3;
        break;
      case 5u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 5;
        break;
      case 7u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 2;
        break;
      case 9u:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 4;
        break;
      case 0xBu:
        int v9 = v18.st_mode & 0xFFF;
        int v10 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v10;
  a3[1] = v9;
  return result;
}

void sub_1001B6748(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::filesystem::detail::read_symlink(const char **this@<X0>, const boost::filesystem::path *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)this + 23) >= 0) {
    uint64_t v7 = (const char *)this;
  }
  else {
    uint64_t v7 = *this;
  }
  std::string::size_type v8 = readlink(v7, v22, 0x400uLL);
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_24:
    uint64_t v14 = *__error();
    if (!a2)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      v21[0] = 0;
      if ((unint64_t)qword_1004B5DC0 >> 1 == 0x595588BD12BF6FE8) {
        int v16 = v14 != 0;
      }
      else {
        int v16 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v14);
      }
      uint64_t v17 = 2;
      LODWORD(v21[0]) = v14;
      if (v16) {
        uint64_t v17 = 3;
      }
      v21[1] = &boost::system::detail::system_cat_holder<void>::instance;
      v21[2] = v17;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::read_symlink", this, v21);
    }
    boost::system::error_code::assign(a2, v14, (const boost::system::error_category *)&boost::system::detail::system_cat_holder<void>::instance);
  }
  else if (v8 >= 0x400)
  {
    for (size_t i = 2048; ; i *= 2)
    {
      int v10 = (char *)operator new[](i);
      std::string::size_type v11 = readlink(v7, v10, i);
      if ((v11 & 0x8000000000000000) != 0)
      {
        operator delete[](v10);
        goto LABEL_24;
      }
      if (v11 < i) {
        break;
      }
      operator delete[](v10);
      if (i > 0x4000)
      {
        if (!a2)
        {
          stat v18 = __cxa_allocate_exception(0x30uLL);
          v20[0] = 0;
          if ((qword_1004B5DC0 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
            || ((unsigned int (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, 63))
          {
            uint64_t v19 = 3;
          }
          else
          {
            uint64_t v19 = 2;
          }
          LODWORD(v20[0]) = 63;
          v20[1] = &boost::system::detail::system_cat_holder<void>::instance;
          v20[2] = v19;
          boost::filesystem::filesystem_error::filesystem_error(v18, "boost::filesystem::read_symlink", this, v20);
        }
        if ((qword_1004B5DC0 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
          || ((unsigned int (*)(uint64_t (***)(boost::system::detail::system_error_category *__hidden), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, 63))
        {
          uint64_t v13 = 3;
        }
        else
        {
          uint64_t v13 = 2;
        }
        *(void *)a2 = 63;
        *((void *)a2 + 1) = &boost::system::detail::system_cat_holder<void>::instance;
        *((void *)a2 + 2) = v13;
        return;
      }
    }
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(a3, v10, &v10[v11], v11);
    if (a2)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
    }
    operator delete[](v10);
  }
  else
  {
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(a3, v22, &v22[v8], v8);
    if (a2)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
    }
  }
}

void sub_1001B6B50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::detail::copy(boost::filesystem::detail *this, std::string::size_type *a2, const boost::filesystem::path *a3, const boost::filesystem::path *a4, boost::system::error_code *a5)
{
  std::string::size_type v8 = this;
  if (((unsigned __int16)a3 & 0x1600) != 0) {
    boost::filesystem::detail::symlink_status(this, a4, (int *)&v73);
  }
  else {
    boost::filesystem::detail::status(this, a4, (int *)&v73);
  }
  if (a4)
  {
    uint64_t v13 = *((void *)a4 + 2);
    if ((v13 & 1) != 0 && (v13 != 1 || *(_DWORD *)a4)) {
      return;
    }
  }
  if (LODWORD(v73.__r_.__value_.__l.__data_) <= 1)
  {
    uint64_t v14 = 2;
    goto LABEL_14;
  }
  if (LODWORD(v73.__r_.__value_.__l.__data_) == 2)
  {
    if (((unsigned __int16)a3 & 0x800) != 0) {
      return;
    }
    if (((unsigned __int16)a3 & 0x1000) != 0)
    {
      memset(&v73, 0, sizeof(v73));
      boost::filesystem::path::find_root_directory(v8, v9, v10, v11);
      if (v23) {
        goto LABEL_35;
      }
      boost::filesystem::detail::current_path(a4, &v72);
      if (a4 && (uint64_t v41 = *((void *)a4 + 2), (v41 & 1) != 0) && (v41 != 1 || *(_DWORD *)a4))
      {
        int v60 = 1;
      }
      else
      {
        boost::filesystem::path::parent_path(v8, v39, v40, v22, &v70);
        boost::filesystem::detail::absolute((std::string::size_type *)&v70, &v72, a4, v42, (uint64_t)&__p);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (a4 && (uint64_t v45 = *((void *)a4 + 2), (v45 & 1) != 0) && (v45 != 1 || *(_DWORD *)a4))
        {
          int v60 = 1;
        }
        else
        {
          boost::filesystem::path::parent_path((boost::filesystem::path *)a2, v43, v44, v22, &v70);
          boost::filesystem::path::find_root_directory((boost::filesystem::path *)&v70, v46, v47, v48);
          if (!v49)
          {
            boost::filesystem::detail::absolute((std::string::size_type *)&v70, &v72, a4, (boost::system::error_code *)v22, (uint64_t)&v69);
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v70.__r_.__value_.__l.__data_);
            }
            std::string v70 = v69;
            if (a4)
            {
              uint64_t v65 = *((void *)a4 + 2);
              if ((v65 & 1) != 0 && (v65 != 1 || *(_DWORD *)a4)) {
                goto LABEL_123;
              }
            }
          }
          boost::filesystem::detail::relative((boost::filesystem::detail *)&__p, (const boost::filesystem::path *)&v70, a4, (boost::system::error_code *)v22, &v69);
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v73.__r_.__value_.__l.__data_);
          }
          std::string v73 = v69;
          if (a4 && (uint64_t v51 = *((void *)a4 + 2), (v51 & 1) != 0) && (v51 != 1 || *(_DWORD *)a4))
          {
LABEL_123:
            int v60 = 1;
          }
          else
          {
            BOOL v52 = boost::filesystem::detail::dot_path(v50);
            if (boost::filesystem::path::compare_v4(&v73, (std::string *)v52, v53, v54))
            {
              boost::filesystem::path::filename_v4(v8, v55, v56, v57, &v69);
              boost::filesystem::path::append_v4(&v73, &v69, v58, v59);
              if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v69.__r_.__value_.__l.__data_);
              }
              int v60 = 0;
            }
            else
            {
              boost::filesystem::path::filename_v4(v8, v55, v56, v57, &v69);
              if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v73.__r_.__value_.__l.__data_);
              }
              int v60 = 0;
              std::string v73 = v69;
            }
            std::string::size_type v8 = (boost::filesystem::path *)&v73;
          }
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (!v60) {
LABEL_35:
      }
        boost::filesystem::detail::create_symlink(v8, (const boost::filesystem::path *)a2, a4, (boost::system::error_code *)v22);
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      uint64_t v64 = (void *)v73.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (((unsigned __int16)a3 & 0x2000) != 0)
      {
        boost::filesystem::detail::create_hard_link(v8, (const boost::filesystem::path *)a2, a4, (boost::system::error_code *)v11);
        return;
      }
      memset(&v73, 0, sizeof(v73));
      if (((unsigned __int16)a3 & 0x1400) != 0) {
        boost::filesystem::detail::symlink_status((boost::filesystem::detail *)a2, (const boost::filesystem::path *)&v73, (int *)&v72);
      }
      else {
        boost::filesystem::detail::status((boost::filesystem::detail *)a2, (const boost::filesystem::path *)&v73, (int *)&v72);
      }
      if (LODWORD(v72.__r_.__value_.__l.__data_) != 3)
      {
        if (LODWORD(v72.__r_.__value_.__l.__data_))
        {
          boost::filesystem::detail::copy_file(v8, (const boost::filesystem::path *)a2, a3, a4, v20);
          return;
        }
        if (a4) {
          goto LABEL_75;
        }
        exception = __cxa_allocate_exception(0x30uLL);
        std::string v68 = v73;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v8, a2, &v68);
        goto LABEL_139;
      }
      boost::filesystem::path::filename_v4(v8, v17, v18, v19, &__p);
      boost::filesystem::operator/(&__p, (uint64_t)a2, v61, v62, &v72);
      boost::filesystem::detail::copy_file(v8, (const boost::filesystem::path *)&v72, a3, a4, v63);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      uint64_t v64 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    operator delete(v64);
    return;
  }
  if (LODWORD(v73.__r_.__value_.__l.__data_) == 3)
  {
    memset(&v73, 0, sizeof(v73));
    if (((unsigned __int16)a3 & 0x1000) == 0)
    {
      if (((unsigned __int16)a3 & 0x1400) != 0) {
        boost::filesystem::detail::symlink_status((boost::filesystem::detail *)a2, (const boost::filesystem::path *)&v73, (int *)&v72);
      }
      else {
        boost::filesystem::detail::status((boost::filesystem::detail *)a2, (const boost::filesystem::path *)&v73, (int *)&v72);
      }
      if (LODWORD(v72.__r_.__value_.__l.__data_) == 1)
      {
        boost::filesystem::detail::create_directory((boost::filesystem::detail *)a2, v8, a4, v15);
        if (a4)
        {
          uint64_t v25 = *((void *)a4 + 2);
          if ((v25 & 1) != 0 && (v25 != 1 || *(_DWORD *)a4)) {
            return;
          }
        }
      }
      else if (!LODWORD(v72.__r_.__value_.__l.__data_))
      {
        if (!a4)
        {
          exception = __cxa_allocate_exception(0x30uLL);
          std::string v66 = v73;
          boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v8, a2, &v66);
          goto LABEL_139;
        }
LABEL_75:
        *(std::string *)a4 = v73;
        return;
      }
      if (!a3 || ((unsigned __int16)a3 & 0x100) != 0)
      {
        v70.__r_.__value_.__r.__words[0] = 0;
        boost::filesystem::detail::directory_iterator_construct((dirent **)&v70, (std::string *)v8, 0, a4, v16);
        if (!a4 || (uint64_t v29 = *((void *)a4 + 2), (v29 & 1) == 0) || v29 == 1 && !*(_DWORD *)a4)
        {
          v69.__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v30 = v70.__r_.__value_.__r.__words[0];
          if (v70.__r_.__value_.__r.__words[0])
          {
            uint64_t v31 = (const boost::filesystem::path *)(a3 | 0x4000);
            do
            {
              if (!v30 || !*(void *)(v30 + 48)) {
                break;
              }
              uint64_t v32 = (boost::filesystem::detail *)(v30 + 8);
              boost::filesystem::path::filename_v4((boost::filesystem::path *)(v30 + 8), v26, v27, v28, &__p);
              if (*((char *)a2 + 23) < 0) {
                std::string::__init_copy_ctor_external(&v72, (const std::string::value_type *)*a2, a2[1]);
              }
              else {
                std::string v72 = *(std::string *)a2;
              }
              boost::filesystem::path::append_v4(&v72, &__p, v33, v34);
              boost::filesystem::detail::copy(v32, (const boost::filesystem::path *)&v72, v31, a4, v35);
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v72.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (a4)
              {
                uint64_t v37 = *((void *)a4 + 2);
                if ((v37 & 1) != 0 && (v37 != 1 || *(_DWORD *)a4)) {
                  break;
                }
              }
              boost::filesystem::detail::directory_iterator_increment((dirent **)&v70, a4, v36);
              if (a4)
              {
                uint64_t v38 = *((void *)a4 + 2);
                if ((v38 & 1) != 0 && (v38 != 1 || *(_DWORD *)a4)) {
                  break;
                }
              }
              std::string::size_type v30 = v70.__r_.__value_.__r.__words[0];
            }
            while (v70.__r_.__value_.__r.__words[0] != v69.__r_.__value_.__r.__words[0]);
          }
          boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v69);
        }
        boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v70);
      }
      return;
    }
    if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8
      || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 21))
    {
      std::string::size_type v21 = 3;
    }
    else
    {
      std::string::size_type v21 = 2;
    }
    v73.__r_.__value_.__r.__words[0] = 21;
    v73.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
    v73.__r_.__value_.__r.__words[2] = v21;
    if (a4) {
      goto LABEL_75;
    }
    exception = __cxa_allocate_exception(0x30uLL);
    std::string v67 = v73;
    boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v8, a2, &v67);
LABEL_139:
  }
  if (LODWORD(v73.__r_.__value_.__l.__data_) != 4) {
    goto LABEL_12;
  }
  if (((unsigned __int16)a3 & 0x400) != 0) {
    return;
  }
  if (((unsigned __int16)a3 & 0x200) == 0)
  {
LABEL_12:
    uint64_t v14 = 78;
LABEL_14:
    boost::filesystem::emit_error((boost::filesystem *)v14, (uint64_t)v8, (const boost::filesystem::path *)a2, a4, (boost::system::error_code *)"boost::filesystem::copy", v12);
    return;
  }

  boost::filesystem::detail::copy_symlink((const char **)v8, (const boost::filesystem::path *)a2, a4, (boost::system::error_code *)v11);
}

void sub_1001B7314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::detail::copy_symlink(const char **this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  boost::filesystem::detail::read_symlink(this, a3, &__p);
  if (!a3 || (uint64_t v7 = *((void *)a3 + 2), (v7 & 1) == 0) || v7 == 1 && !*(_DWORD *)a3) {
    boost::filesystem::detail::create_symlink((boost::filesystem::detail *)&__p, a2, a3, v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001B74CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::detail::current_path(boost::filesystem::detail *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v5 = getcwd(v11, 0x400uLL);
  if (v5)
  {
    std::string::__assign_external(a2, v5);
    if (this)
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
    }
  }
  else if (!boost::filesystem::detail::current_path(boost::system::error_code *)::local::getcwd_error(this))
  {
    for (size_t i = 2048; ; i *= 2)
    {
      uint64_t v7 = (char *)operator new[](i);
      if (getcwd(v7, i)) {
        break;
      }
      BOOL v8 = boost::filesystem::detail::current_path(boost::system::error_code *)::local::getcwd_error(this);
      operator delete[](v7);
      if (v8) {
        return;
      }
      if (i > 0x4000)
      {
        boost::filesystem::emit_error((boost::filesystem *)0x3F, (uint64_t)this, (boost::system::error_code *)"boost::filesystem::current_path", v9);
        return;
      }
    }
    std::string::__assign_external(a2, v7);
    if (this)
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
    }
    operator delete[](v7);
  }
}

void sub_1001B760C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::detail::relative(boost::filesystem::detail *this@<X0>, const boost::filesystem::path *a2@<X1>, const boost::filesystem::path *a3@<X2>, boost::system::error_code *a4@<X3>, std::string *a5@<X8>)
{
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  memset(&__p, 0, sizeof(__p));
  boost::filesystem::path::find_root_directory(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)a4);
  if (!v9 || (boost::filesystem::path::find_root_directory(a2, v9, v10, v11), !v12))
  {
    boost::filesystem::detail::current_path((boost::filesystem::detail *)&v21, &v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v19;
    if ((v22 & 1) != 0 && (v22 != 1 || v21)) {
      goto LABEL_22;
    }
  }
  boost::filesystem::detail::weakly_canonical((std::string *)a2, &__p, (const boost::filesystem::path *)&v21, &v19);
  if ((v22 & 1) == 0 || (int v13 = 2, v22 == 1) && !v21)
  {
    boost::filesystem::detail::weakly_canonical((std::string *)this, &__p, (const boost::filesystem::path *)&v21, &v16);
    if ((v22 & 1) == 0 || (int v13 = 2, v22 == 1) && !v21)
    {
      boost::filesystem::path::lexically_relative(&v16, (const boost::filesystem::path *)&v19, v14, a5);
      int v13 = 1;
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v13 == 2)
  {
LABEL_22:
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      long long v17 = v21;
      uint64_t v18 = v22;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::relative", this, a2, &v17);
    }
    *(_OWORD *)a3 = v21;
    *((void *)a3 + 2) = v22;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__words[2] = 0;
    a5->__r_.__value_.__r.__words[0] = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001B7820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_free_exception(v30);
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::detail::create_symlink(boost::filesystem::detail *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = this;
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if (*((char *)a2 + 23) < 0) {
    a2 = *(const boost::filesystem::path **)a2;
  }
  uint64_t result = symlink((const char *)this, (const char *)a2);
  if ((result & 0x80000000) != 0)
  {
    BOOL v8 = (boost::filesystem *)*__error();
    return boost::filesystem::emit_error(v8, (uint64_t)v6, v5, a3, (boost::system::error_code *)"boost::filesystem::create_symlink", v9);
  }
  return result;
}

uint64_t boost::filesystem::detail::create_hard_link(boost::filesystem::detail *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = this;
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if (*((char *)a2 + 23) < 0) {
    a2 = *(const boost::filesystem::path **)a2;
  }
  uint64_t result = link((const char *)this, (const char *)a2);
  if (result && (uint64_t result = *__error(), result))
  {
    return boost::filesystem::emit_error((boost::filesystem *)result, (uint64_t)v6, v5, a3, (boost::system::error_code *)"boost::filesystem::create_hard_link", v8);
  }
  else if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  return result;
}

uint64_t boost::filesystem::detail::copy_file(boost::filesystem::detail *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, const boost::filesystem::path *a4, boost::system::error_code *a5)
{
  char v6 = (char)a3;
  if (a4)
  {
    *(void *)a4 = 0;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
  }
  unsigned int v27 = -1;
  unsigned int v28 = -1;
  while (1)
  {
    uint64_t v9 = *((char *)this + 23) >= 0 ? (const char *)this : *(const char **)this;
    int v10 = open(v9, 0x1000000);
    unsigned int v28 = v10;
    if ((v10 & 0x80000000) == 0) {
      break;
    }
    ssize_t v11 = *__error();
    if (v11 != 4) {
      goto LABEL_33;
    }
  }
  if (fstat(v10, &v26))
  {
LABEL_60:
    ssize_t v11 = *__error();
    goto LABEL_33;
  }
  int st_mode = v26.st_mode;
  if ((v26.st_mode & 0xF000) != 0x8000)
  {
LABEL_61:
    ssize_t v11 = 78;
    goto LABEL_33;
  }
  if ((v6 & 4) != 0)
  {
    while (1)
    {
      uint64_t v14 = *((char *)a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
      unsigned int v15 = open(v14, 16777217, st_mode | 0x80u);
      unsigned int v27 = v15;
      if ((v15 & 0x80000000) == 0) {
        break;
      }
      ssize_t v11 = *__error();
      if (v11 != 4)
      {
        if (v11 != 2) {
          goto LABEL_33;
        }
        goto LABEL_19;
      }
    }
    int v20 = 1;
LABEL_37:
    if (fstat(v15, &v25)) {
      goto LABEL_60;
    }
    int v21 = v25.st_mode;
    if ((v25.st_mode & 0xF000) != 0x8000) {
      goto LABEL_61;
    }
    if (v26.st_dev != v25.st_dev || v26.st_ino != v25.st_ino)
    {
      if (v20)
      {
        if (v26.st_mtimespec.tv_sec < v25.st_mtimespec.tv_sec
          || v26.st_mtimespec.tv_sec == v25.st_mtimespec.tv_sec && v26.st_mtimespec.tv_nsec <= v25.st_mtimespec.tv_nsec)
        {
          goto LABEL_34;
        }
        if (ftruncate(v27, 0)) {
          goto LABEL_60;
        }
      }
      if (v11) {
        goto LABEL_33;
      }
      if (v21 == st_mode || !fchmod(v27, st_mode))
      {
        if ((v6 & 0x18) != 0)
        {
          int v22 = v27;
          if ((v6 & 0x10) != 0)
          {
            while (fcntl(v22, 51) < 0)
            {
              ssize_t v11 = *__error();
              if (v11 != 4)
              {
LABEL_56:
                if (v11) {
                  goto LABEL_33;
                }
                break;
              }
            }
          }
          else
          {
            while (fcntl(v22, 51) < 0)
            {
              ssize_t v11 = *__error();
              if (v11 != 4) {
                goto LABEL_56;
              }
            }
          }
        }
        int v23 = close(v27);
        unsigned int v27 = -1;
        if ((v23 & 0x80000000) == 0 || (ssize_t v11 = *__error(), (v11 & 0xFFFFFFDF) == 4))
        {
          uint64_t v19 = 1;
          goto LABEL_59;
        }
        goto LABEL_33;
      }
      goto LABEL_60;
    }
LABEL_32:
    ssize_t v11 = 17;
LABEL_33:
    boost::filesystem::emit_error((boost::filesystem *)v11, (uint64_t)this, a2, a4, (boost::system::error_code *)"boost::filesystem::copy_file", v12);
    goto LABEL_34;
  }
LABEL_19:
  if ((v6 & 4) != 0 || (v6 & 3) == 2) {
    int v17 = 16778753;
  }
  else {
    int v17 = 16780801;
  }
  do
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v18 = (const char *)a2;
    }
    else {
      uint64_t v18 = *(const char **)a2;
    }
    unsigned int v15 = open(v18, v17, st_mode | 0x80u);
    unsigned int v27 = v15;
    if ((v15 & 0x80000000) == 0)
    {
      int v20 = 0;
      goto LABEL_37;
    }
    ssize_t v11 = *__error();
  }
  while (v11 == 4);
  if (v11 != 17) {
    goto LABEL_33;
  }
  if ((v6 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_34:
  uint64_t v19 = 0;
LABEL_59:
  return v19;
}

void sub_1001B7CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::filesystem::operator/(std::string *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, unint64_t *a4@<X3>, std::string *a5@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  boost::filesystem::path::append_v4(a5, a1, a3, a4);
}

void sub_1001B7D34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::detail::create_directory(boost::filesystem::detail *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  if (a2)
  {
    uint64_t v7 = (const char *)a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v7 = *(const char **)a2;
    }
    if (stat(v7, &v15) < 0)
    {
      uint64_t v10 = *__error();
      goto LABEL_17;
    }
    mode_t st_mode = v15.st_mode;
    if ((v15.st_mode & 0xF000) != 0x4000)
    {
      uint64_t v10 = 20;
LABEL_17:
      boost::filesystem::emit_error((boost::filesystem *)v10, (uint64_t)this, a2, a3, (boost::system::error_code *)"boost::filesystem::create_directory", v8);
      return 0;
    }
  }
  else
  {
    mode_t st_mode = 511;
  }
  if (*((char *)this + 23) >= 0) {
    ssize_t v11 = (const char *)this;
  }
  else {
    ssize_t v11 = *(const char **)this;
  }
  if (mkdir(v11, st_mode))
  {
    uint64_t v12 = (boost::filesystem *)*__error();
    memset(&v15, 0, 24);
    boost::filesystem::detail::status(this, (const boost::filesystem::path *)&v15, &v16);
    if (v16 != 3) {
      boost::filesystem::emit_error(v12, (uint64_t)this, a3, (boost::system::error_code *)"boost::filesystem::create_directory", v13);
    }
    return 0;
  }
  return 1;
}

void boost::filesystem::detail::anonymous namespace'::fd_wrapper::~fd_wrapper(boost::filesystem::detail::_anonymous_namespace_::fd_wrapper *this)
{
  int v1 = *(_DWORD *)this;
  if ((v1 & 0x80000000) == 0) {
    close(v1);
  }
}

uint64_t boost::filesystem::detail::create_directories(std::string *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (a2)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
    }
    char v6 = (boost::filesystem::detail *)boost::filesystem::path::end((uint64_t)this, &v49);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v47, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    }
    else {
      std::string v47 = v49;
    }
    long long v48 = v50;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v46, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = *this;
    }
    BOOL v8 = boost::filesystem::detail::dot_path(v6);
    uint64_t v9 = (std::string *)boost::filesystem::detail::dot_dot_path((boost::filesystem::detail *)v8);
    long long v44 = 0uLL;
    uint64_t v45 = 0;
    boost::filesystem::path::filename_v4((boost::filesystem::path *)&v46, v10, v11, v12, &__p);
    while (1)
    {
      boost::filesystem::path::find_relative_path((boost::filesystem::path *)&v46, v13, v14, v15);
      if (!v16)
      {
LABEL_28:
        int v26 = 2;
        goto LABEL_29;
      }
      std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
      }
      if (v19
        && boost::filesystem::path::compare_v4(&__p, (std::string *)v8, v17, v18)
        && boost::filesystem::path::compare_v4(&__p, v9, v17, v18))
      {
        boost::filesystem::detail::status((boost::filesystem::detail *)&v46, (const boost::filesystem::path *)&v44, (int *)&v40);
        if (LODWORD(v40.__r_.__value_.__l.__data_) == 3) {
          goto LABEL_28;
        }
        if (!LODWORD(v40.__r_.__value_.__l.__data_)) {
          break;
        }
      }
      boost::filesystem::path::iterator::decrement_v4((unsigned __int8 **)&v47, v16, v17, v18);
      boost::filesystem::path::remove_filename((boost::filesystem::path *)&v46, v20, v21, v22);
      boost::filesystem::path::filename_v4((boost::filesystem::path *)&v46, v23, v24, v25, &v40);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v40;
    }
    if (!a2)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      long long v41 = v44;
      uint64_t v42 = v45;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::create_directories", this, &v46, &v41);
    }
    *(_OWORD *)a2 = v44;
    *((void *)a2 + 2) = v45;
    int v26 = 1;
LABEL_29:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v26 == 2)
    {
      char directory = 0;
      while ((void)v48 != (void)v50 || *((void *)&v48 + 1) != *((void *)&v50 + 1))
      {
        boost::filesystem::path::append_v4(&v46, &v47, v17, v18);
        std::string::size_type v32 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v32 = v47.__r_.__value_.__l.__size_;
        }
        if (v32)
        {
          if (boost::filesystem::path::compare_v4(&v47, (std::string *)v8, v30, (unint64_t *)v31))
          {
            if (boost::filesystem::path::compare_v4(&v47, v9, v30, (unint64_t *)v31))
            {
              char directory = boost::filesystem::detail::create_directory((boost::filesystem::detail *)&v46, 0, (const boost::filesystem::path *)&v44, v31);
              if ((v45 & 1) != 0 && (v45 != 1 || v44))
              {
                if (!a2)
                {
                  uint64_t v36 = __cxa_allocate_exception(0x30uLL);
                  long long v38 = v44;
                  uint64_t v39 = v45;
                  boost::filesystem::filesystem_error::filesystem_error(v36, "boost::filesystem::create_directories", this, &v46, &v38);
                }
                char directory = 0;
                *(_OWORD *)a2 = v44;
                *((void *)a2 + 2) = v45;
                break;
              }
            }
          }
        }
        boost::filesystem::path::iterator::increment_v4(&v47, v29, v30, (unint64_t *)v31);
      }
    }
    else
    {
      char directory = 0;
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (!a2)
    {
      std::string::size_type v34 = __cxa_allocate_exception(0x30uLL);
      v51[0] = 0;
      if ((qword_1004B5DD8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
        || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 22))
      {
        uint64_t v35 = 3;
      }
      else
      {
        uint64_t v35 = 2;
      }
      LODWORD(v51[0]) = 22;
      v51[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v51[2] = v35;
      boost::filesystem::filesystem_error::filesystem_error(v34, "boost::filesystem::create_directories", this, v51);
    }
    if ((qword_1004B5DD8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
      || ((unsigned int (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t, boost::system::error_code *))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 22, a3))
    {
      uint64_t v7 = 3;
    }
    else
    {
      uint64_t v7 = 2;
    }
    char directory = 0;
    *(void *)a2 = 22;
    *((void *)a2 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
    *((void *)a2 + 2) = v7;
  }
  return directory & 1;
}

void sub_1001B8318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::system::error_code::assign(boost::system::error_code *this, uint64_t a2, const boost::system::error_category *a3)
{
  int v4 = a2;
  if (*((void *)a3 + 1) >> 1 == 0x595588BD12BF6FE8) {
    uint64_t result = a2 != 0;
  }
  else {
    uint64_t result = (*(uint64_t (**)(const boost::system::error_category *, uint64_t))(*(void *)a3 + 48))(a3, a2);
  }
  uint64_t v7 = 2;
  if (result) {
    uint64_t v7 = 3;
  }
  *(_DWORD *)this = v4;
  *((_DWORD *)this + 1) = 0;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = v7;
  return result;
}

uint64_t boost::filesystem::detail::copy_directory(boost::filesystem::detail *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  char v6 = this;
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if (stat((const char *)this, &v11) < 0
    || (*((char *)a2 + 23) >= 0 ? (uint64_t v7 = (const char *)a2) : (uint64_t v7 = *(const char **)a2),
        uint64_t result = mkdir(v7, v11.st_mode),
        (result & 0x80000000) != 0))
  {
    uint64_t v9 = __error();
    return boost::filesystem::emit_error((boost::filesystem *)*v9, (uint64_t)v6, a2, a3, (boost::system::error_code *)"boost::filesystem::copy_directory", v10);
  }
  return result;
}

uint64_t boost::filesystem::detail::create_directory_symlink(boost::filesystem::detail *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  uint64_t v5 = a2;
  char v6 = this;
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if (*((char *)a2 + 23) < 0) {
    a2 = *(const boost::filesystem::path **)a2;
  }
  uint64_t result = symlink((const char *)this, (const char *)a2);
  if ((result & 0x80000000) != 0)
  {
    BOOL v8 = (boost::filesystem *)*__error();
    return boost::filesystem::emit_error(v8, (uint64_t)v6, v5, a3, (boost::system::error_code *)"boost::filesystem::create_directory_symlink", v9);
  }
  return result;
}

BOOL boost::filesystem::detail::current_path(boost::system::error_code *)::local::getcwd_error(void *a1)
{
  unsigned int v3 = *__error();
  if (v3 == 34) {
    int v4 = 0;
  }
  else {
    int v4 = (boost::filesystem *)v3;
  }
  if (v4)
  {
    boost::filesystem::emit_error(v4, (uint64_t)a1, (boost::system::error_code *)"boost::filesystem::current_path", v2);
  }
  else if (a1)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return v4 != 0;
}

uint64_t boost::filesystem::detail::current_path(boost::filesystem::detail *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  int v4 = this;
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  uint64_t result = chdir((const char *)this);
  if (result && (uint64_t result = *__error(), result))
  {
    return boost::filesystem::emit_error((boost::filesystem *)result, (uint64_t)v4, a2, (boost::system::error_code *)"boost::filesystem::current_path", v6);
  }
  else if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  return result;
}

BOOL boost::filesystem::detail::equivalent(const char **this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v7 = (const char *)a2;
  }
  else {
    uint64_t v7 = *(const char **)a2;
  }
  int v8 = stat(v7, &v17);
  if (*((char *)this + 23) >= 0) {
    uint64_t v9 = (const char *)this;
  }
  else {
    uint64_t v9 = *this;
  }
  int v10 = stat(v9, &v16);
  if (!(v10 | v8)) {
    return v16.st_dev == v17.st_dev && v16.st_ino == v17.st_ino;
  }
  if (v10) {
    BOOL v13 = v8 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    uint64_t v14 = __error();
    boost::filesystem::emit_error((boost::filesystem *)*v14, (uint64_t)this, a2, a3, (boost::system::error_code *)"boost::filesystem::equivalent", v15);
  }
  return 0;
}

off_t boost::filesystem::detail::file_size(boost::filesystem::detail *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  int v4 = this;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if (stat((const char *)this, &v8) < 0)
  {
    uint64_t v7 = *__error();
LABEL_11:
    boost::filesystem::emit_error((boost::filesystem *)v7, (uint64_t)v4, a2, (boost::system::error_code *)"boost::filesystem::file_size", v5);
    return -1;
  }
  if ((v8.st_mode & 0xF000) != 0x8000)
  {
    uint64_t v7 = 78;
    goto LABEL_11;
  }
  return v8.st_size;
}

uint64_t boost::filesystem::detail::hard_link_count(boost::filesystem::detail *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  int v4 = this;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if ((stat((const char *)this, &v8) & 0x80000000) == 0) {
    return v8.st_nlink;
  }
  char v6 = __error();
  boost::filesystem::emit_error((boost::filesystem *)*v6, (uint64_t)v4, a2, (boost::system::error_code *)"boost::filesystem::hard_link_count", v7);
  return -1;
}

void boost::filesystem::detail::initial_path(boost::filesystem::detail *this@<X0>, std::string *a2@<X8>)
{
  {
    uint64_t v5 = this;
    this = v5;
    if (v6)
    {
      *(_OWORD *)boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path = 0uLL;
      *(void *)&boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[16] = 0;
      __cxa_atexit((void (*)(void *))boost::filesystem::path::~path, boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path, (void *)&_mh_execute_header);
      this = v5;
    }
  }
  uint64_t v4 = *(void *)&boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[8];
  if (boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[23] >= 0) {
    uint64_t v4 = boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[23];
  }
  if (v4)
  {
    if (this)
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
    }
  }
  else
  {
    boost::filesystem::detail::current_path(this, &v7);
    if (boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[23] < 0) {
      operator delete(*(void **)boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path);
    }
    *(std::string *)boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path = v7;
  }
  if (boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path, *(std::string::size_type *)&boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[8]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path;
    a2->__r_.__value_.__r.__words[2] = *(void *)&boost::filesystem::detail::initial_path(boost::system::error_code *)::init_path[16];
  }
}

BOOL boost::filesystem::detail::is_empty(std::string *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  uint64_t v4 = this;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    this = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)this, &v10) < 0)
  {
    stat v8 = __error();
    boost::filesystem::emit_error((boost::filesystem *)*v8, (uint64_t)v4, a2, (boost::system::error_code *)"boost::filesystem::is_empty", v9);
    return 0;
  }
  else if ((v10.st_mode & 0xF000) == 0x4000)
  {
    uint64_t v12 = 0;
    boost::filesystem::detail::directory_iterator_construct((dirent **)&v12, v4, 0, a2, v5);
    stat v11 = 0;
    if (v12) {
      BOOL v6 = *((void *)v12 + 6) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v11);
    boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v12);
  }
  else
  {
    return v10.st_size == 0;
  }
  return v6;
}

void sub_1001B8A78(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)(v1 - 24));
  _Unwind_Resume(a1);
}

__darwin_time_t boost::filesystem::detail::creation_time(boost::filesystem::detail *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  uint64_t v4 = this;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if ((stat((const char *)this, &v8) & 0x80000000) == 0) {
    return v8.st_birthtimespec.tv_sec;
  }
  BOOL v6 = __error();
  boost::filesystem::emit_error((boost::filesystem *)*v6, (uint64_t)v4, a2, (boost::system::error_code *)"boost::filesystem::creation_time", v7);
  return 0x8000000000000000;
}

__darwin_time_t boost::filesystem::detail::last_write_time(boost::filesystem::detail *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  uint64_t v4 = this;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if ((stat((const char *)this, &v8) & 0x80000000) == 0) {
    return v8.st_mtimespec.tv_sec;
  }
  BOOL v6 = __error();
  boost::filesystem::emit_error((boost::filesystem *)*v6, (uint64_t)v4, a2, (boost::system::error_code *)"boost::filesystem::last_write_time", v7);
  return 0x8000000000000000;
}

uint64_t boost::filesystem::detail::last_write_time(boost::filesystem::detail *this, const boost::filesystem::path *a2, const boost::filesystem::path *a3, boost::system::error_code *a4)
{
  BOOL v6 = this;
  if (a3)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  if (stat((const char *)this, &v12) < 0
    || ((v11.actime = v12.st_atimespec.tv_sec, v11.modtime = (time_t)a2, *((char *)v6 + 23) >= 0)
      ? (std::string v7 = (const char *)v6)
      : (std::string v7 = *(const char **)v6),
        uint64_t result = utime(v7, &v11),
        (result & 0x80000000) != 0))
  {
    uint64_t v9 = __error();
    return boost::filesystem::emit_error((boost::filesystem *)*v9, (uint64_t)v6, a3, (boost::system::error_code *)"boost::filesystem::last_write_time", v10);
  }
  return result;
}

int *boost::filesystem::detail::permissions(int *result, unsigned int a2, uint64_t a3)
{
  if ((~a2 & 0x3000) != 0)
  {
    unsigned int v4 = a2;
    uint64_t v5 = result;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    if ((a2 & 0x4000) != 0) {
      uint64_t result = boost::filesystem::detail::symlink_status((boost::filesystem::detail *)result, (const boost::filesystem::path *)&v17, &v15);
    }
    else {
      uint64_t result = boost::filesystem::detail::status((boost::filesystem::detail *)result, (const boost::filesystem::path *)&v17, &v15);
    }
    if ((v18 & 1) != 0 && (v18 != 1 || v17))
    {
      if (a3)
      {
        *(_OWORD *)a3 = v17;
        uint64_t v8 = v18;
LABEL_25:
        *(void *)(a3 + 16) = v8;
        return result;
      }
      exception = __cxa_allocate_exception(0x30uLL);
      long long v13 = v17;
      uint64_t v14 = v18;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::permissions", v5, &v13);
LABEL_34:
    }
    if ((v4 & 0x1000) != 0)
    {
      v4 |= v16;
    }
    else if ((v4 & 0x2000) != 0)
    {
      unsigned int v4 = v16 & ~v4;
    }
    if (*((char *)v5 + 23) >= 0) {
      BOOL v6 = (const char *)v5;
    }
    else {
      BOOL v6 = *(const char **)v5;
    }
    uint64_t result = (int *)fchmodat(-2, v6, v4 & 0xFFF, (v4 >> 9) & 0x20);
    if (result)
    {
      uint64_t v7 = *__error();
      if (a3)
      {
        if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8) {
          uint64_t result = (int *)(v7 != 0);
        }
        else {
          uint64_t result = (int *)((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, v7);
        }
        uint64_t v8 = 2;
        if (result) {
          uint64_t v8 = 3;
        }
        *(_DWORD *)a3 = v7;
        *(_DWORD *)(a3 + 4) = 0;
        *(void *)(a3 + 8) = &boost::system::detail::generic_cat_holder<void>::instance;
        goto LABEL_25;
      }
      exception = __cxa_allocate_exception(0x30uLL);
      v12[0] = 0;
      if ((unint64_t)qword_1004B5DD8 >> 1 == 0x595588BD12BF6FE8) {
        int v10 = v7 != 0;
      }
      else {
        int v10 = ((uint64_t (*)(uint64_t (***)(boost::system::detail::generic_error_category *__hidden), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, v7);
      }
      uint64_t v11 = 2;
      LODWORD(v12[0]) = v7;
      if (v10) {
        uint64_t v11 = 3;
      }
      v12[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      xpc_object_t v12[2] = v11;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::permissions", v5, v12);
      goto LABEL_34;
    }
  }
  return result;
}

void sub_1001B8E68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::filesystem::detail::weakly_canonical(std::string *this@<X0>, std::string *a2@<X1>, const boost::filesystem::path *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7 = this;
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  uint64_t v9 = (boost::filesystem::detail *)boost::filesystem::path::end((uint64_t)this, &v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v39, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else {
    std::string v39 = v41;
  }
  long long v40 = v42;
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v38, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
  }
  else {
    std::string v38 = *v7;
  }
  while (1)
  {
    std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v38.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_13;
    }
    uint64_t v9 = (boost::filesystem::detail *)boost::filesystem::detail::status((boost::filesystem::detail *)&v38, (const boost::filesystem::path *)&v43, (int *)&__p);
    if (LODWORD(__p.__r_.__value_.__l.__data_) != 1) {
      break;
    }
    boost::filesystem::path::remove_filename((boost::filesystem::path *)&v38, v11, v12, v13);
    boost::filesystem::path::iterator::decrement_v4((unsigned __int8 **)&v39, v14, v15, v16);
  }
  if (LODWORD(__p.__r_.__value_.__l.__data_))
  {
LABEL_13:
    long long v17 = boost::filesystem::detail::dot_path(v9);
    uint64_t v20 = (std::string *)boost::filesystem::detail::dot_dot_path((boost::filesystem::detail *)v17);
    BOOL v21 = 0;
    memset(&__p, 0, sizeof(__p));
    while ((void)v40 != (void)v42 || *((void *)&v40 + 1) != *((void *)&v42 + 1))
    {
      boost::filesystem::path::append_v4(&__p, &v39, v18, v19);
      BOOL v21 = v21
         || !boost::filesystem::path::compare_v4(&v39, (std::string *)v17, v24, v25)
         || !boost::filesystem::path::compare_v4(&v39, v20, v24, v25);
      boost::filesystem::path::iterator::increment_v4(&v39, v23, v24, v25);
    }
    std::string::size_type v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v26 = v38.__r_.__value_.__l.__size_;
    }
    if (!v26) {
      goto LABEL_37;
    }
    boost::filesystem::detail::canonical(&v38, a2, (const boost::filesystem::path *)&v43, (boost::system::error_code *)v19, (uint64_t)&v34);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    std::string v38 = v34;
    if ((v44 & 1) != 0 && (v44 != 1 || v43))
    {
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        long long v32 = v43;
        uint64_t v33 = v44;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::weakly_canonical", &v38, &v32);
      }
      *(_OWORD *)a3 = v43;
      *((void *)a3 + 2) = v44;
    }
    else
    {
      std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
      }
      if (v29)
      {
        boost::filesystem::path::append_v4(&v38, &__p, v27, v28);
        if (v21)
        {
          uint64_t v7 = &v38;
LABEL_37:
          boost::filesystem::path::lexically_normal_v4((boost::filesystem::path *)v7, v19, a4);
          goto LABEL_40;
        }
      }
      *a4 = v38;
      a4 = &v38;
    }
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
LABEL_40:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_42;
  }
  if (!a3)
  {
    uint64_t v30 = __cxa_allocate_exception(0x30uLL);
    long long v36 = v43;
    uint64_t v37 = v44;
    boost::filesystem::filesystem_error::filesystem_error(v30, "boost::filesystem::weakly_canonical", &v38, &v36);
  }
  *(_OWORD *)a3 = v43;
  *((void *)a3 + 2) = v44;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  a4->__r_.__value_.__r.__words[0] = 0;
LABEL_42:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_1001B91E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_free_exception(v38);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v39 - 121) < 0) {
    operator delete(*(void **)(v39 - 144));
  }
  _Unwind_Resume(a1);
}

double boost::filesystem::detail::remove(boost::filesystem::detail *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  boost::filesystem::detail::symlink_status(this, (const boost::filesystem::path *)&v13, (int *)&v11);
  if (v11 != 1)
  {
    if (v11 == 3)
    {
      if (*((char *)this + 23) >= 0) {
        uint64_t v7 = (const char *)this;
      }
      else {
        uint64_t v7 = *(const char **)this;
      }
      if (rmdir(v7)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11)
      {
        if (*((char *)this + 23) >= 0) {
          BOOL v6 = (const char *)this;
        }
        else {
          BOOL v6 = *(const char **)this;
        }
        if (!unlink(v6)) {
          return result;
        }
LABEL_15:
        uint64_t v9 = (boost::filesystem *)*__error();
        if (v9 != 2 && v9 != 20) {
          boost::filesystem::emit_error(v9, (uint64_t)this, a2, (boost::system::error_code *)"boost::filesystem::remove", v8);
        }
        return result;
      }
      if (!a2)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        long long v11 = v13;
        uint64_t v12 = v14;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove", this, &v11);
      }
      double result = *(double *)&v13;
      *(_OWORD *)a2 = v13;
      *((void *)a2 + 2) = v14;
    }
  }
  return result;
}

void sub_1001B93C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::detail::remove_all(boost::filesystem::detail *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
}

uint64_t boost::filesystem::detail::anonymous namespace'::remove_all_impl(boost::filesystem::detail::_anonymous_namespace_ *this, const boost::filesystem::path *a2, boost::system::error_code *a3)
{
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  boost::filesystem::detail::symlink_status(this, (const boost::filesystem::path *)&v28, (int *)&v27);
  uint64_t result = 0;
  int v7 = (int)v27;
  if (v27 != 1)
  {
    if (!v27)
    {
      if (!a2)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        long long v25 = v28;
        uint64_t v26 = v29;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove_all", this, &v25);
      }
      *(_OWORD *)a2 = v28;
      *((void *)a2 + 2) = v29;
      return -1;
    }
    if (v27 == 3)
    {
      *(void *)&long long v28 = 0;
      boost::filesystem::detail::directory_iterator_construct((dirent **)&v28, (std::string *)this, 0, a2, v5);
      if (a2)
      {
        uint64_t v9 = *((void *)a2 + 2);
        if ((v9 & 1) != 0 && (v9 != 1 || *(_DWORD *)a2))
        {
          boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v28);
          return -1;
        }
      }
      uint64_t v27 = 0;
      uint64_t v10 = v28;
      if ((void)v28)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        while (v10 && *(void *)(v10 + 48) || v12 && *((void *)v12 + 6))
        {
          if (a2 && (uint64_t v14 = *((void *)a2 + 2), (v14 & 1) != 0) && (v14 != 1 || *(_DWORD *)a2)
            || (boost::filesystem::detail::directory_iterator_increment((dirent **)&v28, a2, v13), a2)
            && (uint64_t v15 = *((void *)a2 + 2), (v15 & 1) != 0)
            && (v15 != 1 || *(_DWORD *)a2))
          {
            char v16 = 0;
            goto LABEL_29;
          }
          uint64_t v12 = v27;
          uint64_t v10 = v28;
          if ((boost::filesystem::detail::dir_itr_imp *)v28 == v27) {
            break;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      char v16 = 1;
LABEL_29:
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v27);
      boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr((boost::filesystem::detail::dir_itr_imp **)&v28);
      if ((v16 & 1) == 0) {
        return -1;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    if (v7 == 1) {
      goto LABEL_39;
    }
    if (v7 == 3)
    {
      if (*((char *)this + 23) >= 0) {
        long long v17 = (const char *)this;
      }
      else {
        long long v17 = *(const char **)this;
      }
      if (rmdir(v17))
      {
LABEL_36:
        uint64_t v18 = __error();
        uint64_t v20 = 0;
        BOOL v21 = (boost::filesystem *)*v18;
        if (v21 == 2 || v21 == 20)
        {
LABEL_40:
          if (a2)
          {
LABEL_41:
            uint64_t v22 = *((void *)a2 + 2);
            if ((v22 & 1) != 0 && (v22 != 1 || *(_DWORD *)a2)) {
              return -1;
            }
          }
          return v20 + v11;
        }
        boost::filesystem::emit_error(v21, (uint64_t)this, a2, (boost::system::error_code *)"boost::filesystem::remove", v19);
LABEL_39:
        uint64_t v20 = 0;
        goto LABEL_40;
      }
    }
    else
    {
      if (*((char *)this + 23) >= 0) {
        uint64_t v23 = (const char *)this;
      }
      else {
        uint64_t v23 = *(const char **)this;
      }
      if (unlink(v23)) {
        goto LABEL_36;
      }
    }
    uint64_t v20 = 1;
    if (a2) {
      goto LABEL_41;
    }
    return v20 + v11;
  }
  return result;
}

void sub_1001B9660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void boost::filesystem::detail::rename(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2, std::error_code *a3, boost::system::error_code *a4)
{
  uint64_t v5 = (const boost::filesystem::path *)a2;
  BOOL v6 = (boost::filesystem::detail *)this;
  if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    this = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  }
  rename(this, a2, a3);
  if (v7 && (uint64_t v8 = (boost::filesystem *)*__error(), v8))
  {
    boost::filesystem::emit_error(v8, (uint64_t)v6, v5, (const boost::filesystem::path *)a3, (boost::system::error_code *)"boost::filesystem::rename", v9);
  }
  else if (a3)
  {
    *(void *)&a3->__val_ = 0;
    a3->__cat_ = 0;
    *(void *)&a3[1].__val_ = 0;
  }
}

uint64_t boost::filesystem::detail::resize_file(boost::filesystem::detail *this, int64_t a2, boost::filesystem::path *a3, boost::system::error_code *a4, const char *a5)
{
  BOOL v6 = this;
  if (a2 < 0)
  {
    uint64_t result = 27;
  }
  else
  {
    if (*((char *)this + 23) < 0) {
      this = *(boost::filesystem::detail **)this;
    }
    uint64_t result = truncate((const char *)this, a2);
    if (!result || (uint64_t result = *__error(), !result))
    {
      if (a3)
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        *((void *)a3 + 2) = 0;
      }
      return result;
    }
  }

  return boost::filesystem::emit_error((boost::filesystem *)result, (uint64_t)v6, a3, (boost::system::error_code *)"boost::filesystem::resize_file", a5);
}

uint64_t boost::filesystem::detail::space@<X0>(boost::filesystem::detail *this@<X0>, const boost::filesystem::path *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = this;
  a3[1] = -1;
  a3[2] = -1;
  *a3 = -1;
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  if (*((char *)this + 23) < 0) {
    this = *(boost::filesystem::detail **)this;
  }
  uint64_t result = statfs((const char *)this, &v11);
  if (result)
  {
    uint64_t result = *__error();
    if (result) {
      return boost::filesystem::emit_error((boost::filesystem *)result, (uint64_t)v5, a2, (boost::system::error_code *)"boost::filesystem::space", v8);
    }
  }
  if (a2)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
  }
  f_bstd::string::size_type size = v11.f_bsize;
  uint64_t v10 = v11.f_bfree * v11.f_bsize;
  *a3 = v11.f_blocks * v11.f_bsize;
  a3[1] = v10;
  a3[2] = v11.f_bavail * f_bsize;
  return result;
}

void boost::filesystem::detail::temp_directory_path(boost::filesystem::detail *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  uint64_t v5 = getenv("TMPDIR");
  if (!v5)
  {
    uint64_t v5 = getenv("TMP");
    if (!v5)
    {
      uint64_t v5 = getenv("TEMP");
      if (!v5) {
        uint64_t v5 = getenv("TEMPDIR");
      }
    }
  }
  if (v5) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = "/tmp";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  uint64_t v8 = (void *)HIBYTE(v12);
  if (v12 < 0) {
    uint64_t v8 = __p[1];
  }
  if (!v8) {
    goto LABEL_20;
  }
  boost::filesystem::detail::status((boost::filesystem::detail *)__p, this, &v10);
  if (!this || (uint64_t v9 = *((void *)this + 2), (v9 & 1) == 0) || v9 == 1 && !*(_DWORD *)this)
  {
    if (v10 == 3)
    {
LABEL_18:
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(void *)(a2 + 16) = v12;
      return;
    }
LABEL_20:
    boost::filesystem::emit_error((boost::filesystem *)0x14, (uint64_t)__p, this, (boost::system::error_code *)"boost::filesystem::temp_directory_path", v7);
    goto LABEL_18;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1001B99D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::detail::system_complete(std::string *this@<X0>, const boost::filesystem::path *a2@<X1>, boost::system::error_code *a3@<X2>, unint64_t *a4@<X3>, std::string *a5@<X8>)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  char v8 = size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    boost::filesystem::path::find_root_directory((boost::filesystem::path *)this, (uint64_t)a2, (uint64_t)a3, a4);
    if (!v9)
    {
      boost::filesystem::detail::current_path(0, &v15);
      boost::filesystem::path::append_v4(&v15, this, v13, v14);
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
      std::string::size_type v10 = v15.__r_.__value_.__r.__words[2];
      goto LABEL_12;
    }
    char v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    std::string::size_type v10 = this->__r_.__value_.__r.__words[2];
LABEL_12:
    a5->__r_.__value_.__r.__words[2] = v10;
    return;
  }
  statfs v11 = (const std::string::value_type *)this->__r_.__value_.__r.__words[0];
  std::string::size_type v12 = this->__r_.__value_.__l.__size_;

  std::string::__init_copy_ctor_external(a5, v11, v12);
}

void sub_1001B9AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *boost::filesystem::path::filename_v4@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = this;
  filename_v4_std::string::size_type size = boost::filesystem::path::find_filename_v4_size(this, a2, a3, a4);
  if (*((char *)v5 + 23) < 0)
  {
    uint64_t v9 = v5;
    uint64_t v5 = *(boost::filesystem::path **)v5;
    uint64_t v8 = *((void *)v9 + 1);
  }
  else
  {
    uint64_t v8 = *((unsigned __int8 *)v5 + 23);
  }

  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, (char *)v5 + v8 - (void)filename_v4_size, (char *)v5 + v8, (unint64_t)filename_v4_size);
}

ssize_t boost::filesystem::detail::anonymous namespace'::copy_file_data_read_write(boost::filesystem::detail::_anonymous_namespace_ *this, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(this, a2);
  int v6 = v5;
  int v7 = (boost::filesystem::detail::_anonymous_namespace_ *)v2;
  if (v3 == -1) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v3 + 1;
  }
  if (v8 <= v4) {
    unint64_t v8 = v4;
  }
  if (v8 <= 0x2000) {
    unint64_t v8 = 0x2000;
  }
  if (v8 >= 0x40000) {
    LODWORD(v8) = 0x40000;
  }
  unsigned int v9 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  unsigned int v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  size_t v11 = (v10 | HIWORD(v10)) + 1;
  std::string::size_type v12 = (char *)operator new[](v11, &std::nothrow);
  if (!v12) {
  uint64_t v13 = v12;
  }
  operator delete[](v13);
  return v14;
}

void sub_1001B9C4C(_Unwind_Exception *exception_object)
{
}

ssize_t boost::filesystem::detail::anonymous namespace'::copy_file_data_read_write_impl(boost::filesystem::detail::_anonymous_namespace_ *this, int a2, char *a3, size_t a4)
{
  int v7 = (int)this;
  ssize_t result = read((int)this, a3, a4);
  if (result)
  {
    ssize_t v9 = result;
    do
    {
      if ((v9 & 0x8000000000000000) == 0)
      {
        ssize_t v10 = 0;
        while (1)
        {
          ssize_t v11 = write(a2, &a3[v10], v9 - v10);
          if (v11 < 0)
          {
            ssize_t result = *__error();
            if (result != 4) {
              return result;
            }
          }
          else
          {
            v10 += v11;
          }
          if (v10 >= v9) {
            goto LABEL_12;
          }
        }
      }
      ssize_t result = *__error();
      if (result != 4) {
        break;
      }
LABEL_12:
      ssize_t result = read(v7, a3, a4);
      ssize_t v9 = result;
    }
    while (result);
  }
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unint64_t v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  unint64_t v8 = this;
  if ((v12 & 0x80) != 0) {
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    unint64_t v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void boost::filesystem::path::append_v3(std::string *this, std::string *a2)
{
  std::string::size_type v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  char v3 = v2;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0) {
    std::string::size_type v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v5 = a2->__r_.__value_.__l.__size_;
  }
  if (v5)
  {
    if (this == a2)
    {
      if ((char)v2 < 0) {
        std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, size);
      }
      else {
        std::string __p = *a2;
      }
      boost::filesystem::path::append_v3((boost::filesystem::path *)a2, (const boost::filesystem::path *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      unint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      if ((v2 & 0x80u) == 0) {
        ssize_t v9 = (const boost::filesystem::path *)a2;
      }
      else {
        ssize_t v9 = (const boost::filesystem::path *)a2->__r_.__value_.__r.__words[0];
      }
      if (*(unsigned char *)v9 != 47)
      {
        boost::filesystem::path::append_separator_if_needed(this);
        std::string::size_type v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        unint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
        char v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      if (v3 >= 0) {
        std::string::size_type v10 = (const std::string::value_type *)a2;
      }
      else {
        std::string::size_type v10 = v8;
      }
      if (v3 >= 0) {
        std::string::size_type size = v2;
      }
      std::string::append(this, v10, size);
    }
  }
}

void sub_1001B9EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type boost::filesystem::path::append_separator_if_needed(std::string *this)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return 0;
    }
    std::string::size_type v2 = (char *)this + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(this, 47);
      return size;
    }
    return 0;
  }
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::size_type v2 = (char *)(this->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }
  return size;
}

void boost::filesystem::path::append_v3(std::string *this, std::string *a2, char *a3)
{
  if (a2 == (std::string *)a3) {
    return;
  }
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (this <= a2)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      int v7 = this;
      goto LABEL_7;
    }
LABEL_8:
    if (a2->__r_.__value_.__s.__data_[0] != 47) {
      boost::filesystem::path::append_separator_if_needed(this);
    }
    std::string::append[abi:ne180100]<char const*,0>(this, (char *)a2, a3);
    return;
  }
  int v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0] > (unint64_t)a2) {
    goto LABEL_8;
  }
  std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_7:
  if ((std::string *)((char *)v7 + size) <= a2) {
    goto LABEL_8;
  }
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)a2, a3, a3 - (char *)a2);
  boost::filesystem::path::append_v3(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001BA048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  unint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::size_type v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    std::string::size_type v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    ssize_t v14 = this;
    if ((v6 & 0x80) != 0) {
      ssize_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (size_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *size_t i = v16;
    }
    *size_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1001BA1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::path::append_v4(std::string *this, std::string *a2, uint64_t a3, unint64_t *a4)
{
  int v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if (v5 >= 0) {
    unint64_t v7 = (const char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t v7 = (const char *)a2->__r_.__value_.__l.__size_;
  }
  if (v7)
  {
    if (this == a2)
    {
      if (v5 < 0) {
        std::string::__init_copy_ctor_external(&__n, a2->__r_.__value_.__l.__data_, size);
      }
      else {
        std::string __n = *a2;
      }
      boost::filesystem::path::append_v4((boost::filesystem::path *)a2, (const boost::filesystem::path *)&__n);
      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__n.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v5 >= 0) {
        std::string::size_type v9 = (_anonymous_namespace_ *)a2;
      }
      else {
        std::string::size_type v9 = (_anonymous_namespace_ *)a2->__r_.__value_.__r.__words[0];
      }
      __n.__r_.__value_.__r.__words[0] = 0;
      {
LABEL_25:
        std::string::operator=(this, a2);
        return;
      }
      uint64_t v21 = 0;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v12 = (_anonymous_namespace_ *)this->__r_.__value_.__r.__words[0];
        unint64_t v11 = (const char *)this->__r_.__value_.__l.__size_;
      }
      else
      {
        unint64_t v11 = (const char *)HIBYTE(this->__r_.__value_.__r.__words[2]);
        unint64_t v12 = (_anonymous_namespace_ *)this;
      }
      std::string::size_type v13 = __n.__r_.__value_.__r.__words[0];
      if (__n.__r_.__value_.__r.__words[0])
      {
        if (__n.__r_.__value_.__r.__words[0] != v21) {
          goto LABEL_25;
        }
        ssize_t v14 = this;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          ssize_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        int v15 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        char v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
        std::string::size_type v17 = v15 >= 0
            ? (const boost::filesystem::path *)a2
            : (const boost::filesystem::path *)a2->__r_.__value_.__r.__words[0];
        if (memcmp(v14, v17, __n.__r_.__value_.__r.__words[0])) {
          goto LABEL_25;
        }
      }
      else
      {
        LOBYTE(v15) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
        char v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v15 & 0x80u) == 0) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = v16;
      }
      std::string::size_type v19 = (char *)v18 + v13;
      if (v18->__r_.__value_.__s.__data_[v13] != 47) {
        boost::filesystem::path::append_separator_if_needed(this);
      }
      std::string::append(this, v19, (std::string::size_type)&v7[-v13]);
    }
  }
  else if (boost::filesystem::path::find_filename_v4_size((boost::filesystem::path *)this, (uint64_t)a2, size, a4))
  {
    std::string::push_back(this, 47);
  }
}

void sub_1001BA38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *anonymous namespace'::find_root_directory_start(_anonymous_namespace_ *this, const char *a2, void *a3, unint64_t *a4)
{
  *a3 = 0;
  if (a2 && *(unsigned char *)this == 47)
  {
    if ((unint64_t)a2 < 2 || *((unsigned char *)this + 1) != 47) {
      return 0;
    }
    int v5 = a2 - 2;
    if (a2 != (const char *)2)
    {
      unint64_t v6 = (char *)this + 2;
      if (*((unsigned char *)this + 2) == 47) {
        return 0;
      }
      unint64_t v8 = memchr(v6, 47, (size_t)v5);
      std::string::size_type v9 = (const char *)(v8 - v6);
      if (!v8) {
        std::string::size_type v9 = v5;
      }
      a2 = v9 + 2;
    }
    *a3 = a2;
  }
  return a2;
}

void boost::filesystem::path::append_v4(std::string *this, _anonymous_namespace_ *a2, char *a3, unint64_t *a4)
{
  if (a2 == (_anonymous_namespace_ *)a3)
  {
    if (boost::filesystem::path::find_filename_v4_size((boost::filesystem::path *)this, (uint64_t)a2, (uint64_t)a3, a4))
    {
      std::string::push_back(this, 47);
    }
    return;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (this->__r_.__value_.__r.__words[0] <= (unint64_t)a2)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_11;
    }
LABEL_12:
    __n.__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = 0;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v11 = (_anonymous_namespace_ *)this->__r_.__value_.__r.__words[0];
      std::string::size_type v10 = (const char *)this->__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type v10 = (const char *)HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v11 = (_anonymous_namespace_ *)this;
    }
    std::string::size_type v12 = __n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0]) {
      goto LABEL_22;
    }
    if (__n.__r_.__value_.__r.__words[0] != v18) {
      goto LABEL_21;
    }
    std::string::size_type v13 = this;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (!memcmp(v13, a2, __n.__r_.__value_.__r.__words[0]))
    {
LABEL_22:
      ssize_t v14 = (char *)a2 + v12;
      if (*v14 != 47) {
        boost::filesystem::path::append_separator_if_needed(this);
      }
      std::string::append[abi:ne180100]<char const*,0>(this, v14, a3);
    }
    else
    {
LABEL_21:
      std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(this, (std::string::value_type *)a2, a3, a3 - (char *)a2);
    }
    return;
  }
  if (this > (std::string *)a2) {
    goto LABEL_12;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v8 = this;
LABEL_11:
  if ((char *)v8 + size <= (char *)a2) {
    goto LABEL_12;
  }
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__n, (char *)a2, a3, a3 - (char *)a2);
  boost::filesystem::path::append_v4(this, &__n, v15, v16);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__n.__r_.__value_.__l.__data_);
  }
}

void sub_1001BA5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::path::compare_v3(std::string *this, std::string *a2, uint64_t a3, unint64_t *a4)
{
  boost::filesystem::path::begin(this, a4, &v14);
  memset(v13, 0, 24);
  v13[3] = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v13[4] = size;
  boost::filesystem::path::begin(a2, v6, &__p);
  memset(v11, 0, 24);
  v11[3] = a2;
  std::string::size_type v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
  }
  v11[4] = v8;
  uint64_t v9 = boost::filesystem::detail::lex_compare_v3(&v14, (uint64_t)v13, &__p, (uint64_t)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return v9;
}

uint64_t boost::filesystem::detail::lex_compare_v3(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  std::string::size_type v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    std::string::size_type v8 = data;
    std::string::size_type v9 = size;
  }
  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)&a1->__r_.__value_.__l.__data_) & 0x80) != 0)return 1; {
      boost::filesystem::path::iterator::increment_v3(a1, v14, v15, v16);
      }
      boost::filesystem::path::iterator::increment_v3(a3, v17, v18, v19);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      std::string::size_type v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  if (data != v8 || size != v9) {
    return 1;
  }
  if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

std::string *boost::filesystem::path::begin@<X0>(std::string *this@<X0>, unint64_t *a2@<X3>, std::string *a3@<X8>)
{
  char v3 = this;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  int v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (v5 >= 0) {
    unint64_t v7 = (std::string *)HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t v7 = (std::string *)this->__r_.__value_.__l.__size_;
  }
  a3[1].__r_.__value_.__l.__size_ = 0;
  if (v5 < 0)
  {
    if (!size) {
      return this;
    }
    v15.__r_.__value_.__r.__words[0] = 0;
    this = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!v5) {
      return this;
    }
    v15.__r_.__value_.__r.__words[0] = 0;
  }
  std::string::size_type v8 = v15.__r_.__value_.__r.__words[0];
  if (v15.__r_.__value_.__r.__words[0]) {
    goto LABEL_10;
  }
  std::string::size_type v9 = (std::string::size_type)this;
  if (this < v7)
  {
    a3[1].__r_.__value_.__l.__size_ = (std::string::size_type)this;
    std::string::size_type v8 = 1;
    goto LABEL_13;
  }
  int v10 = SHIBYTE(v3->__r_.__value_.__r.__words[2]);
  BOOL v11 = v10 < 0;
  if (v10 >= 0) {
    std::string::size_type v12 = v3;
  }
  else {
    std::string::size_type v12 = (std::string *)v3->__r_.__value_.__r.__words[0];
  }
  if (v11) {
    std::string::size_type v8 = v3->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v8 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  }
  if (!v8)
  {
LABEL_25:
    if (!v8) {
      return this;
    }
LABEL_10:
    std::string::size_type v9 = 0;
LABEL_13:
    this = std::string::basic_string(&v15, v3, v9, v8, (std::allocator<char> *)&v16);
    *a3 = v15;
    return this;
  }
  std::string::size_type v13 = 0;
  while (v12->__r_.__value_.__s.__data_[v13] != 47)
  {
    if (v8 == ++v13) {
      goto LABEL_25;
    }
  }
  if (v13 == -1) {
    std::string::size_type v14 = v8;
  }
  else {
    std::string::size_type v14 = v13;
  }
  if (v8 != v13) {
    std::string::size_type v8 = v14;
  }
  if (v8) {
    goto LABEL_10;
  }
  return this;
}

uint64_t boost::filesystem::path::end@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = this;
  if (*(char *)(this + 23) < 0) {
    uint64_t v2 = *(void *)(this + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(this + 23);
  }
  a2[4] = v2;
  return this;
}

uint64_t boost::filesystem::path::compare_v4(std::string *this, std::string *a2, uint64_t a3, unint64_t *a4)
{
  boost::filesystem::path::begin(this, a4, &v14);
  memset(v13, 0, 24);
  v13[3] = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v13[4] = size;
  boost::filesystem::path::begin(a2, v6, &__p);
  memset(v11, 0, 24);
  v11[3] = a2;
  std::string::size_type v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
  }
  v11[4] = v8;
  uint64_t v9 = boost::filesystem::detail::lex_compare_v4(&v14, (uint64_t)v13, &__p, (uint64_t)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return v9;
}

uint64_t boost::filesystem::detail::lex_compare_v4(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  std::string::size_type v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    std::string::size_type v8 = data;
    std::string::size_type v9 = size;
  }
  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)&a1->__r_.__value_.__l.__data_) & 0x80) != 0)return 1; {
      boost::filesystem::path::iterator::increment_v4(a1, v14, v15, v16);
      }
      boost::filesystem::path::iterator::increment_v4(a3, v17, v18, v19);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      std::string::size_type v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  if (data != v8 || size != v9) {
    return 1;
  }
  if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

std::string *boost::filesystem::path::erase_redundant_separator(std::string *this, std::string::size_type a2)
{
  if (a2)
  {
    std::string::size_type v2 = SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0
       ? this->__r_.__value_.__l.__size_
       : HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v2 > a2)
    {
      std::string::size_type v3 = a2 + 1;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        int v4 = *(unsigned __int8 *)(this->__r_.__value_.__r.__words[0] + v3);
      }
      else {
        int v4 = this->__r_.__value_.__s.__data_[v3];
      }
      if (v4 == 47) {
        return std::string::erase(this, a2, 1uLL);
      }
    }
  }
  return this;
}

boost::filesystem::path *boost::filesystem::path::remove_filename(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  parent_path_std::string::size_type size = boost::filesystem::path::find_parent_path_size(this, a2, a3, a4);
  if (*((char *)this + 23) < 0)
  {
    unint64_t v7 = *(boost::filesystem::path **)this;
    unint64_t v6 = (char *)(*(void *)this + *((void *)this + 1));
  }
  else
  {
    unint64_t v6 = (char *)this + *((unsigned __int8 *)this + 23);
    unint64_t v7 = this;
  }
  std::string::erase((std::string *)this, (std::string::size_type)parent_path_size, v6 - (char *)v7 - (void)parent_path_size);
  return this;
}

const char *boost::filesystem::path::find_parent_path_size(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = this;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    int v5 = (const char *)*((void *)v4 + 1);
  }
  else
  {
    int v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  unint64_t v19 = 0;
  int v7 = *((char *)v4 + 23);
  if ((unint64_t)v5 >= v19) {
    std::string::size_type v8 = (const char *)v19;
  }
  else {
    std::string::size_type v8 = v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = v4;
  }
  else {
    std::string::size_type v9 = *(boost::filesystem::path **)v4;
  }
  int v10 = (char *)v9 - 1;
  BOOL v11 = v5;
  while ((unint64_t)v11 > v19)
  {
    std::string::size_type v12 = v11 - 1;
    int v13 = (v11--)[(void)v10];
    if (v13 == 47)
    {
      std::string::size_type v8 = v12 + 1;
      break;
    }
  }
  if ((unint64_t)v8 >= v19) {
    unint64_t v14 = v19;
  }
  else {
    unint64_t v14 = (unint64_t)v8;
  }
  if (v7 >= 0) {
    uint64_t v15 = v4;
  }
  else {
    uint64_t v15 = *(boost::filesystem::path **)v4;
  }
  char v16 = (char *)v15 - 1;
  uint64_t v17 = v8;
  while ((unint64_t)v17 > v19)
  {
    if (v17[(void)v16] != 47) {
      return v17;
    }
    if (root_directory_start == --v17)
    {
      if (v5 == v8) {
        return root_directory_start;
      }
      else {
        return root_directory_start + 1;
      }
    }
  }
  if (v5 == v8) {
    return 0;
  }
  else {
    return (const char *)v14;
  }
}

std::string *boost::filesystem::path::remove_trailing_separator(std::string *this)
{
  uint64_t v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (!size) {
      return this;
    }
  }
  else
  {
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v4 = size - 1;
  if ((v2 & 0x80) != 0)
  {
    std::string::size_type v6 = this->__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(this->__r_.__value_.__r.__words[0] + v4) == 47)
    {
      int v5 = (char *)(v6 + this->__r_.__value_.__l.__size_);
      goto LABEL_10;
    }
  }
  else if (this->__r_.__value_.__s.__data_[v4] == 47)
  {
    int v5 = (char *)this + v2;
    std::string::size_type v6 = (std::string::size_type)this;
LABEL_10:
    std::string::erase(this, (std::string::size_type)&v5[~v6], 1uLL);
  }
  return this;
}

std::string *boost::filesystem::path::replace_extension(std::string *this, const boost::filesystem::path *a2, uint64_t a3, unint64_t *a4)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  boost::filesystem::path::extension_v4((boost::filesystem::path *)this, a4, &__p);
  std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::erase(this, size - v7, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v8 = *((char *)a2 + 23);
  if (v8 < 0)
  {
    if (!*((void *)a2 + 1)) {
      return this;
    }
    std::string::size_type v9 = *(const boost::filesystem::path **)a2;
  }
  else
  {
    std::string::size_type v9 = a2;
    if (!*((unsigned char *)a2 + 23)) {
      return this;
    }
  }
  if (*(unsigned char *)v9 != 46)
  {
    std::string::push_back(this, 46);
    LOBYTE(v8) = *((unsigned char *)a2 + 23);
  }
  if ((v8 & 0x80u) == 0) {
    int v10 = (const std::string::value_type *)a2;
  }
  else {
    int v10 = *(const std::string::value_type **)a2;
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v11 = v8;
  }
  else {
    std::string::size_type v11 = *((void *)a2 + 1);
  }
  std::string::append(this, v10, v11);
  return this;
}

void sub_1001BADD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::path::find_root_name_size(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7 = 0;
  if (*((char *)this + 23) < 0)
  {
    int v5 = this;
    this = *(boost::filesystem::path **)this;
    std::string::size_type v4 = (const char *)*((void *)v5 + 1);
  }
  else
  {
    std::string::size_type v4 = (const char *)*((unsigned __int8 *)this + 23);
  }
  return v7;
}

const char *boost::filesystem::path::find_root_path_size(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  std::string::size_type v4 = this;
  uint64_t v9 = 0;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    int v5 = (const char *)*((void *)v4 + 1);
  }
  else
  {
    int v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  if (*((char *)v4 + 23) < 0) {
    unint64_t v7 = *((void *)v4 + 1);
  }
  else {
    unint64_t v7 = *((unsigned __int8 *)v4 + 23);
  }
  if ((unint64_t)root_directory_start < v7) {
    return root_directory_start + 1;
  }
  else {
    return (const char *)v9;
  }
}

const char *boost::filesystem::path::find_root_directory(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  std::string::size_type v4 = this;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    int v5 = (const char *)*((void *)v4 + 1);
  }
  else
  {
    int v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
}

const char *boost::filesystem::path::find_relative_path(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  std::string::size_type v4 = this;
  uint64_t v13 = 0;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    int v5 = (const char *)*((void *)v4 + 1);
  }
  else
  {
    int v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  ssize_t result = (const char *)v13;
  unint64_t v8 = *((unsigned __int8 *)v4 + 23);
  if (*((char *)v4 + 23) < 0)
  {
    unint64_t v9 = *((void *)v4 + 1);
    if ((unint64_t)root_directory_start >= v9) {
      return result;
    }
  }
  else
  {
    unint64_t v9 = *((unsigned __int8 *)v4 + 23);
    if ((unint64_t)root_directory_start >= v8) {
      return result;
    }
  }
  int v10 = root_directory_start + 1;
  if (v9 <= (unint64_t)(root_directory_start + 1)) {
    ssize_t result = root_directory_start + 1;
  }
  else {
    ssize_t result = (const char *)v9;
  }
  while ((unint64_t)v10 < v9)
  {
    std::string::size_type v11 = v4;
    if ((v8 & 0x80) != 0) {
      std::string::size_type v11 = *(boost::filesystem::path **)v4;
    }
    int v12 = (v10++)[(void)v11];
    if (v12 != 47) {
      return v10 - 1;
    }
  }
  return result;
}

void boost::filesystem::path::filename_v3(boost::filesystem::path *this@<X0>, unint64_t *a2@<X3>, std::string *a3@<X8>)
{
  std::string::size_type v3 = this;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    unint64_t v5 = *((void *)v3 + 1);
  }
  else
  {
    unint64_t v5 = *((unsigned __int8 *)this + 23);
  }
  unint64_t v28 = 0;
  if ((unint64_t)root_directory_start >= v5)
  {
    LOBYTE(v8) = *((unsigned char *)v3 + 23);
  }
  else
  {
    uint64_t v7 = (const char *)(v5 - 1);
    int v8 = *((char *)v3 + 23);
    unint64_t v9 = v3;
    if (v8 < 0) {
      unint64_t v9 = *(boost::filesystem::path **)v3;
    }
    if (v7[(void)v9] == 47)
    {
      int v10 = *(boost::filesystem::path **)v3;
      if (v7 >= root_directory_start) {
        uint64_t v7 = root_directory_start;
      }
      if (v8 >= 0) {
        int v10 = v3;
      }
      std::string::size_type v11 = (char *)v10 - 2;
      unint64_t v12 = v5;
      while (1)
      {
        uint64_t v13 = (const char *)(v12 - 1);
        if (v12 - 1 <= (unint64_t)root_directory_start) {
          break;
        }
        int v14 = v11[v12--];
        if (v14 != 47) {
          goto LABEL_42;
        }
      }
      uint64_t v13 = v7;
LABEL_42:
      if (v13 == root_directory_start)
      {
        unint64_t v5 = 1;
        goto LABEL_48;
      }
    }
  }
  if (v28 == v5)
  {
    root_directory_start = 0;
LABEL_48:
    if ((v8 & 0x80) != 0) {
      std::string::size_type v3 = *(boost::filesystem::path **)v3;
    }
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a3, (char *)&root_directory_start[(void)v3], (char *)&root_directory_start[(void)v3 + v5], v5);
    return;
  }
  if (v5 >= v28) {
    unint64_t v15 = v28;
  }
  else {
    unint64_t v15 = v5;
  }
  if ((v8 & 0x80u) == 0) {
    char v16 = v3;
  }
  else {
    char v16 = *(boost::filesystem::path **)v3;
  }
  uint64_t v17 = (char *)v16 - 1;
  unint64_t v18 = v5;
  while (v18 > v28)
  {
    unint64_t v19 = v18 - 1;
    int v20 = v17[v18--];
    if (v20 == 47)
    {
      unint64_t v15 = v19 + 1;
      break;
    }
  }
  v5 -= v15;
  if (v5)
  {
LABEL_47:
    root_directory_start = (const char *)v15;
    goto LABEL_48;
  }
  if (v15 <= v28) {
    goto LABEL_46;
  }
  uint64_t v21 = (const char *)(v15 - 1);
  uint64_t v22 = (v8 & 0x80u) == 0 ? v3 : *(boost::filesystem::path **)v3;
  if (v21[(void)v22] != 47) {
    goto LABEL_46;
  }
  if (v21 >= root_directory_start) {
    uint64_t v21 = root_directory_start;
  }
  uint64_t v23 = (char *)v22 - 2;
  unint64_t v24 = v15;
  while (1)
  {
    long long v25 = (const char *)(v24 - 1);
    if (v24 - 1 <= (unint64_t)root_directory_start) {
      break;
    }
    int v26 = v23[v24--];
    if (v26 != 47) {
      goto LABEL_45;
    }
  }
  long long v25 = v21;
LABEL_45:
  if (v25 == root_directory_start)
  {
LABEL_46:
    unint64_t v5 = 0;
    goto LABEL_47;
  }
  if (byte_1004FC3B7 < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v27, *((std::string::size_type *)&v27 + 1));
  }
  else
  {
    a3->__r_.__value_.__r.__words[2] = unk_1004FC3B0;
  }
}

long long *boost::filesystem::detail::dot_path(boost::filesystem::detail *this)
{
}

const char *boost::filesystem::path::find_filename_v4_size(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  std::string::size_type v4 = this;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    unint64_t v5 = (const char *)*((void *)v4 + 1);
  }
  else
  {
    unint64_t v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  unint64_t v13 = 0;
  if ((unint64_t)v5 >= v13) {
    std::string::size_type v6 = (const char *)v13;
  }
  else {
    std::string::size_type v6 = v5;
  }
  if (*((char *)v4 + 23) >= 0) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = *(boost::filesystem::path **)v4;
  }
  int v8 = (char *)v7 - 1;
  unint64_t v9 = v5;
  while ((unint64_t)v9 > v13)
  {
    int v10 = v9 - 1;
    int v11 = (v9--)[(void)v8];
    if (v11 == 47)
    {
      std::string::size_type v6 = v10 + 1;
      return (const char *)(v5 - v6);
    }
  }
  return (const char *)(v5 - v6);
}

std::string *boost::filesystem::path::stem_v3@<X0>(boost::filesystem::path *this@<X0>, unint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  boost::filesystem::path::filename_v3(this, a2, (std::string *)a3);
  if (result)
  {
    if (result)
    {
      uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
      uint64_t v10 = (v9 & 0x80u) == 0 ? a3 : *(void *)a3;
      std::string::size_type v11 = (v9 & 0x80u) == 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
      if (v11)
      {
        while (v11)
        {
          int v12 = *(unsigned __int8 *)(v10 - 1 + v11--);
          if (v12 == 46)
          {
            if (v11 != -1)
            {
              int v13 = (char)v9;
              uint64_t v14 = a3 + v9;
              if (v13 < 0) {
                uint64_t v14 = *(void *)a3 + *(void *)(a3 + 8);
              }
              return std::string::erase((std::string *)a3, v11, v14 - v10 - v11);
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

void sub_1001BB338(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *boost::filesystem::detail::dot_dot_path(boost::filesystem::detail *this)
{
}

std::string *boost::filesystem::path::stem_v4@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  boost::filesystem::path::filename_v4(this, a2, a3, a4, (void *)a5);
  if (result)
  {
    if (result)
    {
      uint64_t v11 = *(unsigned __int8 *)(a5 + 23);
      uint64_t v12 = (v11 & 0x80u) == 0 ? a5 : *(void *)a5;
      std::string::size_type v13 = (v11 & 0x80u) == 0 ? *(unsigned __int8 *)(a5 + 23) : *(void *)(a5 + 8);
      if (v13)
      {
        while (v13)
        {
          int v14 = *(unsigned __int8 *)(v12 - 1 + v13--);
          if (v14 == 46)
          {
            if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v15 = (char)v11;
              uint64_t v16 = a5 + v11;
              if (v15 < 0) {
                uint64_t v16 = *(void *)a5 + *(void *)(a5 + 8);
              }
              return std::string::erase((std::string *)a5, v13, v16 - v12 - v13);
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

void sub_1001BB410(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::path::extension_v3(boost::filesystem::path *this@<X0>, unint64_t *a2@<X3>, void *a3@<X8>)
{
  boost::filesystem::path::filename_v3(this, a2, &__p);
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      while (size)
      {
        int v10 = p_p->__r_.__value_.__s.__data_[--size];
        if (v10 == 46)
        {
          if (size == -1) {
            break;
          }
          std::string::basic_string[abi:ne180100]<0>(a3, (char *)p_p + size);
          goto LABEL_14;
        }
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001BB4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::path::extension_v4(boost::filesystem::path *this@<X0>, unint64_t *a2@<X3>, std::string *a3@<X8>)
{
  std::string::size_type v3 = this;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    unint64_t v5 = (const char *)*((void *)v3 + 1);
  }
  else
  {
    unint64_t v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  unint64_t v17 = 0;
  int v6 = *((char *)v3 + 23);
  if ((unint64_t)v5 >= v17) {
    uint64_t v7 = (const char *)v17;
  }
  else {
    uint64_t v7 = v5;
  }
  if (v6 >= 0) {
    int v8 = v3;
  }
  else {
    int v8 = *(boost::filesystem::path **)v3;
  }
  uint64_t v9 = (char *)v8 - 1;
  int v10 = v5;
  while ((unint64_t)v10 > v17)
  {
    uint64_t v11 = v10 - 1;
    int v12 = (v10--)[(void)v9];
    if (v12 == 47)
    {
      uint64_t v7 = v11 + 1;
      break;
    }
  }
  std::string::size_type v13 = (const char *)(v5 - v7);
  if (v5 != v7)
  {
    int v14 = v6 >= 0 ? v3 : *(boost::filesystem::path **)v3;
    if (v7[(void)v14] != 46
      || v13 != (const char *)1 && (v13 != (const char *)2 || *((unsigned char *)v14 + (void)v7 + 1) != 46))
    {
      uint64_t v15 = 0;
      while (&v5[v15] > v7)
      {
        int v16 = v5[(void)v14 - 1 + v15--];
        if (v16 == 46)
        {
          if (&v5[v15] > v7) {
            std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(a3, (std::string::value_type *)&v5[v15 + (void)v14], (std::string::value_type *)&v5[(void)v14], -v15);
          }
          return;
        }
      }
    }
  }
}

void sub_1001BB638(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::path::lexically_relative(std::string *this@<X0>, const boost::filesystem::path *a2@<X1>, unint64_t *a3@<X3>, std::string *a4@<X8>)
{
  boost::filesystem::path::begin(this, a3, &v47);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  boost::filesystem::path::begin((std::string *)a2, v7, &v45);
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v11 = *((void *)a2 + 1);
  }
  int v12 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v39, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else {
    std::string v39 = v47;
  }
  long long v40 = v48;
  int v13 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v37, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    std::string v37 = v45;
  }
  long long v38 = v46;
  while (v40 != __PAIR128__(size, (unint64_t)this))
  {
    BOOL v14 = (const boost::filesystem::path *)v38 == a2 && *((void *)&v38 + 1) == v11;
    if (v14 || boost::filesystem::path::compare_v4(&v39, &v37, v9, v10)) {
      break;
    }
    boost::filesystem::path::iterator::increment_v4(&v39, v15, v16, v17);
    boost::filesystem::path::iterator::increment_v4(&v37, v18, v19, v20);
  }
  std::pair<boost::filesystem::path::iterator,boost::filesystem::path::iterator>::pair[abi:ne180100]<boost::filesystem::path::iterator&,boost::filesystem::path::iterator&,0>(&v41, (long long *)&v39, (long long *)&v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v42 == v48 && v44 == v46)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_68;
  }
  if (v42 == __PAIR128__(size, (unint64_t)this) && v44 == __PAIR128__(v11, (unint64_t)a2))
  {
    if ((byte_1004FC3B7 & 0x80000000) == 0)
    {
      std::string::size_type v23 = unk_1004FC3B0;
LABEL_66:
      a4->__r_.__value_.__r.__words[2] = v23;
      goto LABEL_68;
    }
LABEL_67:
    goto LABEL_68;
  }
  uint64_t v24 = 0;
  while ((const boost::filesystem::path *)v44 != a2 || *((void *)&v44 + 1) != v11)
  {
    {
      std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
      }
      if (v29
      {
        ++v24;
      }
    }
    else
    {
      --v24;
    }
    boost::filesystem::path::iterator::increment_v4(&__p, v26, v27, v28);
  }
  if (v24 < 0)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_68;
  }
  if (v24)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    uint64_t v30 = v24 + 1;
    a4->__r_.__value_.__r.__words[2] = 0;
    do
    {
      --v30;
    }
    while (v30 > 1);
  }
  else
  {
    if ((std::string *)v42 == this && *((void *)&v42 + 1) == size) {
      goto LABEL_64;
    }
    std::string::size_type v36 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = v41.__r_.__value_.__l.__size_;
    }
    if (!v36)
    {
LABEL_64:
      if ((byte_1004FC3B7 & 0x80000000) == 0)
      {
        std::string::size_type v23 = unk_1004FC3B0;
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  while ((std::string *)v42 != this || *((void *)&v42 + 1) != size)
  {
    boost::filesystem::path::append_v4(a4, &v41, v21, v22);
    boost::filesystem::path::iterator::increment_v4(&v41, v32, v33, v34);
  }
LABEL_68:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v12 & 0x80000000) == 0) {
        return;
      }
LABEL_76:
      operator delete(v47.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (v12 < 0) {
    goto LABEL_76;
  }
}

void sub_1001BBA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::pair<boost::filesystem::path::iterator,boost::filesystem::path::iterator>::~pair((uint64_t)&a30);
  if (v30 < 0) {
    operator delete(*(void **)(v31 - 176));
  }
  if (a11 < 0) {
    operator delete(*(void **)(v31 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<boost::filesystem::path::iterator,boost::filesystem::path::iterator>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::filesystem::path::lexically_normal_v3(boost::filesystem::path *this@<X0>, unint64_t *a2@<X3>, std::string *a3@<X8>)
{
  std::string::size_type v3 = this;
  if (*((char *)this + 23) < 0)
  {
    std::string::size_type v3 = *(_anonymous_namespace_ **)this;
    unint64_t v5 = (const char *)*((void *)this + 1);
  }
  else
  {
    unint64_t v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  unint64_t v27 = 0;
  unint64_t v7 = v27;
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a3, (char *)v3, (char *)v3 + v27, v27);
  if (root_directory_start < v5)
  {
    std::string::push_back(a3, 47);
    unint64_t v7 = (unint64_t)(root_directory_start + 1);
  }
  if (v7 >= (unint64_t)v5) {
    return;
  }
  unint64_t v8 = v7;
  while (*((unsigned char *)v3 + v8) == 47)
  {
    if (v5 == (const char *)++v8) {
      return;
    }
  }
  while (1)
  {
    BOOL v14 = (char *)v3 + v8;
    std::string::size_type v15 = (std::string::size_type)&v5[-v8];
    uint64_t v16 = memchr((char *)v3 + v8, 47, (size_t)&v5[-v8]);
    if (v16) {
      std::string::size_type v15 = v16 - v14;
    }
    if (v15 != 2)
    {
      if (v15 == 1 && *v14 == 46)
      {
        int v17 = 1;
        goto LABEL_57;
      }
      goto LABEL_55;
    }
    if (*v14 == 46 && *((unsigned char *)v3 + v8 + 1) == 46)
    {
      unint64_t v18 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = a3->__r_.__value_.__l.__size_;
        if (size <= v7) {
          goto LABEL_55;
        }
      }
      else
      {
        std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (v7 >= v18) {
          goto LABEL_55;
        }
      }
      int v13 = (std::string *)a3->__r_.__value_.__r.__words[0];
      if (size >= v7) {
        std::string::size_type v10 = v7;
      }
      else {
        std::string::size_type v10 = size;
      }
      if ((v18 & 0x80u) == 0) {
        int v20 = a3;
      }
      else {
        int v20 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      uint64_t v21 = (uint64_t)&v20[-1].__r_.__value_.__r.__words[2] + 7;
      unint64_t v22 = size;
      while (v22 > v7)
      {
        unint64_t v23 = v22 - 1;
        int v24 = *(unsigned __int8 *)(v21 + v22--);
        if (v24 == 47)
        {
          std::string::size_type v10 = v23 + 1;
          break;
        }
      }
      if (size - v10 != 2
        || ((v18 & 0x80u) == 0 ? (long long v25 = a3) : (long long v25 = (std::string *)a3->__r_.__value_.__r.__words[0]),
            v25->__r_.__value_.__s.__data_[v10] != 46 || v25->__r_.__value_.__s.__data_[v10 + 1] != 46))
      {
        if (v10 > v7)
        {
          uint64_t v9 = (v18 & 0x80u) == 0 ? (uint64_t)a3 : a3->__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(v9 + v10 - 1) == 47) {
            --v10;
          }
        }
        int v11 = (char)v18;
        uint64_t v12 = (uint64_t)a3 + v18;
        if (v11 >= 0) {
          int v13 = a3;
        }
        else {
          uint64_t v12 = (uint64_t)v13 + a3->__r_.__value_.__l.__size_;
        }
        std::string::erase(a3, v10, v12 - ((void)v13 + v10));
        goto LABEL_56;
      }
    }
LABEL_55:
    boost::filesystem::path::append_separator_if_needed(a3);
    std::string::append(a3, (const std::string::value_type *)v3 + v8, v15);
LABEL_56:
    int v17 = 0;
LABEL_57:
    v8 += v15;
    if ((const char *)v8 == v5) {
      break;
    }
    if (v8 < (unint64_t)v5)
    {
      while (*((unsigned char *)v3 + v8) == 47)
      {
        if (++v8 >= (unint64_t)v5) {
          goto LABEL_61;
        }
      }
    }
    if ((const char *)v8 == v5) {
      goto LABEL_61;
    }
  }
  std::string::size_type v26 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v26 & 0x80u) != 0) {
    std::string::size_type v26 = a3->__r_.__value_.__l.__size_;
  }
  if (((v26 != 0) & ~v17) == 0)
  {
LABEL_61:
    boost::filesystem::path::append_separator_if_needed(a3);
    std::string::push_back(a3, 46);
  }
}

void sub_1001BBDA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::filesystem::path::lexically_normal_v4(boost::filesystem::path *this@<X0>, unint64_t *a2@<X3>, std::string *a3@<X8>)
{
  std::string::size_type v3 = this;
  if (*((char *)this + 23) < 0)
  {
    std::string::size_type v3 = *(_anonymous_namespace_ **)this;
    unint64_t v5 = (const char *)*((void *)this + 1);
  }
  else
  {
    unint64_t v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  unint64_t v34 = 0;
  unint64_t v7 = v34;
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a3, (char *)v3, (char *)v3 + v34, v34);
  if (root_directory_start < v5)
  {
    std::string::push_back(a3, 47);
    unint64_t v7 = (unint64_t)(root_directory_start + 1);
  }
  if (v7 >= (unint64_t)v5) {
    return;
  }
  unint64_t v8 = v7;
  while (*((unsigned char *)v3 + v8) == 47)
  {
    if (v5 == (const char *)++v8) {
      return;
    }
  }
  do
  {
    std::string::size_type v15 = (char *)v3 + v8;
    std::string::size_type v16 = (std::string::size_type)&v5[-v8];
    int v17 = memchr((char *)v3 + v8, 47, (size_t)&v5[-v8]);
    if (v17) {
      std::string::size_type v16 = v17 - v15;
    }
    uint64_t v9 = (const char *)(v16 + v8);
    if (v16 == 2)
    {
      if (*v15 != 46 || *((unsigned char *)v3 + v8 + 1) != 46) {
        goto LABEL_56;
      }
      unint64_t v18 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = a3->__r_.__value_.__l.__size_;
        if (size <= v7) {
          goto LABEL_56;
        }
      }
      else
      {
        std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (v7 >= v18) {
          goto LABEL_56;
        }
      }
      BOOL v14 = (std::string *)a3->__r_.__value_.__r.__words[0];
      if (size >= v7) {
        std::string::size_type v11 = v7;
      }
      else {
        std::string::size_type v11 = size;
      }
      if ((v18 & 0x80u) == 0) {
        int v20 = a3;
      }
      else {
        int v20 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      uint64_t v21 = (uint64_t)&v20[-1].__r_.__value_.__r.__words[2] + 7;
      unint64_t v22 = size;
      while (v22 > v7)
      {
        unint64_t v23 = v22 - 1;
        int v24 = *(unsigned __int8 *)(v21 + v22--);
        if (v24 == 47)
        {
          std::string::size_type v11 = v23 + 1;
          break;
        }
      }
      if (size - v11 != 2
        || ((v18 & 0x80u) == 0 ? (long long v25 = a3) : (long long v25 = (std::string *)a3->__r_.__value_.__r.__words[0]),
            v25->__r_.__value_.__s.__data_[v11] != 46 || v25->__r_.__value_.__s.__data_[v11 + 1] != 46))
      {
        if (v11 > v7)
        {
          uint64_t v10 = (v18 & 0x80u) == 0 ? (uint64_t)a3 : a3->__r_.__value_.__r.__words[0];
          if (*(unsigned char *)(v10 + v11 - 1) == 47) {
            --v11;
          }
        }
        int v12 = (char)v18;
        uint64_t v13 = (uint64_t)a3 + v18;
        if (v12 >= 0) {
          BOOL v14 = a3;
        }
        else {
          uint64_t v13 = (uint64_t)v14 + a3->__r_.__value_.__l.__size_;
        }
        std::string::erase(a3, v11, v13 - ((void)v14 + v11));
LABEL_57:
        if (v9 == v5) {
          goto LABEL_78;
        }
        goto LABEL_11;
      }
LABEL_56:
      boost::filesystem::path::append_separator_if_needed(a3);
      std::string::append(a3, (const std::string::value_type *)v3 + v8, v16);
      goto LABEL_57;
    }
    if (v16 != 1 || *v15 != 46) {
      goto LABEL_56;
    }
    if (v9 == v5) {
      break;
    }
LABEL_11:
    if (v9 < v5)
    {
      while (v9[(void)v3] == 47)
      {
        if (++v9 >= v5) {
          goto LABEL_59;
        }
      }
    }
    unint64_t v8 = (unint64_t)v9;
  }
  while (v9 != v5);
LABEL_59:
  std::string::size_type v26 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  int v27 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v28 = a3->__r_.__value_.__l.__size_;
    if (!v28) {
      goto LABEL_78;
    }
    if (v28 == 1) {
      goto LABEL_77;
    }
LABEL_65:
    std::string::size_type v29 = v28 - 1;
    if ((v27 & 0x80) != 0)
    {
      if (*(unsigned char *)(a3->__r_.__value_.__r.__words[0] + v29) != 46) {
        goto LABEL_77;
      }
      std::string::size_type v30 = a3->__r_.__value_.__l.__size_;
    }
    else
    {
      if (a3->__r_.__value_.__s.__data_[v29] != 46) {
        goto LABEL_77;
      }
      std::string::size_type v30 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v31 = v30 - 2;
    if ((v27 & 0x80) != 0)
    {
      uint64_t v32 = (std::string *)a3->__r_.__value_.__r.__words[0];
      if (*(unsigned char *)(a3->__r_.__value_.__r.__words[0] + v31) != 46) {
        goto LABEL_77;
      }
      std::string::size_type v26 = a3->__r_.__value_.__l.__size_;
      if (v26 == 2) {
        goto LABEL_78;
      }
    }
    else
    {
      if (a3->__r_.__value_.__s.__data_[v31] != 46) {
        goto LABEL_77;
      }
      if (v27 == 2) {
        goto LABEL_78;
      }
      uint64_t v32 = a3;
    }
    if (v32->__r_.__value_.__s.__data_[v26 - 3] != 47) {
      goto LABEL_77;
    }
  }
  else if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
  {
    if (v27 != 1)
    {
      std::string::size_type v28 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      goto LABEL_65;
    }
LABEL_77:
    boost::filesystem::path::append_separator_if_needed(a3);
  }
LABEL_78:
  std::string::size_type v33 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v33 & 0x80u) != 0) {
    std::string::size_type v33 = a3->__r_.__value_.__l.__size_;
  }
  if (!v33) {
    std::string::push_back(a3, 46);
  }
}

void sub_1001BC12C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

void boost::filesystem::path::iterator::increment_v3(std::string *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = this;
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0) {
    std::string::size_type v6 = *((void *)data + 1);
  }
  else {
    std::string::size_type v6 = data[23];
  }
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    p_std::string::size_type size = &v4[1].__r_.__value_.__l.__size_;
    std::string::size_type v8 = v4[1].__r_.__value_.__l.__size_ + v4->__r_.__value_.__l.__size_;
    v4[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v6)
    {
      *v4->__r_.__value_.__l.__data_ = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      return;
    }
  }
  else
  {
    p_std::string::size_type size = &v4[1].__r_.__value_.__l.__size_;
    std::string::size_type v8 = v4[1].__r_.__value_.__l.__size_ + HIBYTE(v4->__r_.__value_.__r.__words[2]);
    v4[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v6)
    {
      v4->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v4->__r_.__value_.__s + 23) = 0;
      return;
    }
  }
  std::string::pointer v9 = data;
  if (data[23] < 0) {
    std::string::pointer v9 = *(std::string::pointer *)data;
  }
  if (v9[v8] == 47)
  {
    uint64_t v21 = 0;
    if (data[23] < 0) {
      std::string::pointer data = *(std::string::pointer *)data;
    }
    std::string::size_type v8 = *p_size;
    if ((const char *)*p_size == root_directory_start)
    {
      if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v4->__r_.__value_.__l.__size_ == v21)
        {
          v4->__r_.__value_.__l.__size_ = 1;
          int v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
          goto LABEL_20;
        }
      }
      else if (v21 == HIBYTE(v4->__r_.__value_.__r.__words[2]))
      {
        *((unsigned char *)&v4->__r_.__value_.__s + 23) = 1;
LABEL_20:
        LOWORD(v4->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }
    std::string::pointer data = v4[1].__r_.__value_.__l.__data_;
    if (v8 == v6)
    {
LABEL_26:
      if (v6 - 1 >= (unint64_t)root_directory_start) {
        int v12 = root_directory_start;
      }
      else {
        int v12 = (const char *)(v6 - 1);
      }
      if (data[23] >= 0) {
        std::string::pointer v13 = data;
      }
      else {
        std::string::pointer v13 = *(std::string::pointer *)data;
      }
      std::string::pointer v14 = v13 - 2;
      std::string::size_type v15 = (const char *)v6;
      while (1)
      {
        std::string::size_type v16 = v15 - 1;
        if (v15 - 1 <= root_directory_start) {
          break;
        }
        int v17 = (v15--)[(void)v14];
        if (v17 != 47) {
          goto LABEL_37;
        }
      }
      std::string::size_type v16 = v12;
LABEL_37:
      std::string::size_type v8 = v6;
      if (v16 != root_directory_start)
      {
        v4[1].__r_.__value_.__l.__size_ = v6 - 1;
        return;
      }
    }
    else
    {
      while (1)
      {
        std::string::pointer v11 = data;
        if (data[23] < 0) {
          std::string::pointer v11 = *(std::string::pointer *)data;
        }
        if (v11[v8] != 47) {
          break;
        }
        *p_std::string::size_type size = ++v8;
        if (v6 == v8) {
          goto LABEL_26;
        }
      }
    }
  }
  if (data[23] < 0)
  {
    std::string::pointer v18 = *(std::string::pointer *)data;
    std::string::size_type v19 = *((void *)data + 1);
  }
  else
  {
    std::string::pointer v18 = data;
    std::string::size_type v19 = data[23];
  }
  if (v19 <= v8) {
    goto LABEL_45;
  }
  int v20 = (const char *)v8;
  while (v20[(void)v18] != 47)
  {
    if ((const char *)v19 == ++v20) {
      goto LABEL_45;
    }
  }
  if ((const char *)v19 == v20 || v20 == (const char *)-1) {
LABEL_45:
  }
    int v20 = (const char *)v6;
  if (data[23] < 0) {
    std::string::pointer data = *(std::string::pointer *)data;
  }

  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(v4, &data[v8], (std::string::value_type *)&v20[(void)data], (std::string::size_type)&v20[-v8]);
}

void boost::filesystem::path::iterator::increment_v4(std::string *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = this;
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0) {
    std::string::size_type v6 = *((void *)data + 1);
  }
  else {
    std::string::size_type v6 = data[23];
  }
  uint64_t v7 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v4->__r_.__value_.__l.__size_) {
      goto LABEL_13;
    }
  }
  else if (*((unsigned char *)&v4->__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  std::string::size_type size = v4[1].__r_.__value_.__l.__size_;
  if (size + 1 == v6)
  {
    std::string::pointer v9 = data;
    if (data[23] < 0) {
      std::string::pointer v9 = *(std::string::pointer *)data;
    }
    if (v9[size] == 47)
    {
      v4[1].__r_.__value_.__l.__size_ = v6;
      return;
    }
  }
LABEL_13:
  if ((v7 & 0x80) != 0)
  {
    p_std::string::size_type size = &v4[1].__r_.__value_.__l.__size_;
    std::string::size_type v11 = v4[1].__r_.__value_.__l.__size_ + v4->__r_.__value_.__l.__size_;
    v4[1].__r_.__value_.__l.__size_ = v11;
    if (v11 >= v6)
    {
LABEL_63:
      *v4->__r_.__value_.__l.__data_ = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      return;
    }
  }
  else
  {
    p_std::string::size_type size = &v4[1].__r_.__value_.__l.__size_;
    std::string::size_type v11 = v4[1].__r_.__value_.__l.__size_ + v7;
    v4[1].__r_.__value_.__l.__size_ = v11;
    if (v11 >= v6)
    {
LABEL_15:
      v4->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v4->__r_.__value_.__s + 23) = 0;
      return;
    }
  }
  std::string::pointer v12 = data;
  if (data[23] < 0) {
    std::string::pointer v12 = *(std::string::pointer *)data;
  }
  if (v12[v11] == 47)
  {
    uint64_t v24 = 0;
    if (data[23] < 0) {
      std::string::pointer data = *(std::string::pointer *)data;
    }
    std::string::size_type v11 = *p_size;
    if ((const char *)*p_size == root_directory_start)
    {
      if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v4->__r_.__value_.__l.__size_ == v24)
        {
          v4->__r_.__value_.__l.__size_ = 1;
          int v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
          goto LABEL_28;
        }
      }
      else if (v24 == HIBYTE(v4->__r_.__value_.__r.__words[2]))
      {
        *((unsigned char *)&v4->__r_.__value_.__s + 23) = 1;
LABEL_28:
        LOWORD(v4->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }
    for (data = v4[1].__r_.__value_.__l.__data_; v6 != v11; *p_std::string::size_type size = ++v11)
    {
      std::string::pointer v14 = data;
      if (data[23] < 0) {
        std::string::pointer v14 = *(std::string::pointer *)data;
      }
      if (v14[v11] != 47) {
        goto LABEL_46;
      }
    }
    std::string::size_type v15 = v6 - 1 >= (unint64_t)root_directory_start ? root_directory_start : (const char *)(v6 - 1);
    std::string::pointer v16 = data[23] >= 0 ? data : *(std::string::pointer *)data;
    std::string::pointer v17 = v16 - 2;
    std::string::pointer v18 = (const char *)v6;
    while (1)
    {
      std::string::size_type v19 = v18 - 1;
      if (v18 - 1 <= root_directory_start) {
        break;
      }
      int v20 = (v18--)[(void)v17];
      if (v20 != 47) {
        goto LABEL_45;
      }
    }
    std::string::size_type v19 = v15;
LABEL_45:
    std::string::size_type v11 = v6;
    if (v19 != root_directory_start)
    {
      v4[1].__r_.__value_.__l.__size_ = v6 - 1;
      if ((SHIBYTE(v4->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_63;
    }
  }
LABEL_46:
  if (data[23] < 0)
  {
    std::string::pointer v21 = *(std::string::pointer *)data;
    std::string::size_type v22 = *((void *)data + 1);
  }
  else
  {
    std::string::pointer v21 = data;
    std::string::size_type v22 = data[23];
  }
  if (v22 <= v11) {
    goto LABEL_53;
  }
  unint64_t v23 = (const char *)v11;
  while (v23[(void)v21] != 47)
  {
    if ((const char *)v22 == ++v23) {
      goto LABEL_53;
    }
  }
  if ((const char *)v22 == v23 || v23 == (const char *)-1) {
LABEL_53:
  }
    unint64_t v23 = (const char *)v6;
  if (data[23] < 0) {
    std::string::pointer data = *(std::string::pointer *)data;
  }

  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(v4, &data[v11], (std::string::value_type *)&v23[(void)data], (std::string::size_type)&v23[-v11]);
}

void boost::filesystem::path::iterator::decrement_v3(unsigned __int8 **this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = (boost::filesystem::path::iterator *)this;
  unint64_t v5 = this[3];
  if ((char)v5[23] < 0)
  {
    uint64_t v7 = v5;
    unint64_t v5 = *(unsigned __int8 **)v5;
    std::string::size_type v6 = (const char *)*((void *)v7 + 1);
  }
  else
  {
    std::string::size_type v6 = (const char *)v5[23];
  }
  unint64_t v34 = 0;
  std::string::pointer v9 = (const char *)*((void *)v4 + 4);
  if (root_directory_start >= v6 || v9 != root_directory_start)
  {
    if ((unint64_t)v6 >= 2 && v9 == v6)
    {
      std::string::pointer v12 = (uint64_t *)*((void *)v4 + 3);
      std::string::pointer v13 = v6 - 1;
      uint64_t v14 = (uint64_t)v12;
      if (*((char *)v12 + 23) < 0) {
        uint64_t v14 = *v12;
      }
      if (v13[v14] == 47)
      {
        if (v13 >= root_directory_start) {
          std::string::size_type v15 = root_directory_start;
        }
        else {
          std::string::size_type v15 = v6 - 1;
        }
        if (*((char *)v12 + 23) < 0) {
          std::string::pointer v12 = (uint64_t *)*v12;
        }
        uint64_t v16 = (uint64_t)v12 - 2;
        while (1)
        {
          std::string::pointer v17 = v6 - 1;
          if (v6 - 1 <= root_directory_start) {
            break;
          }
          int v18 = (v6--)[v16];
          if (v18 != 47) {
            goto LABEL_26;
          }
        }
        std::string::pointer v17 = v15;
LABEL_26:
        if (v17 != root_directory_start)
        {
          *((void *)v4 + 4) = v13;
          return;
        }
      }
    }
    unint64_t v19 = v34;
    int v20 = v9 + 1;
    while (1)
    {
      std::string::pointer v21 = v20 - 1;
      if ((unint64_t)(v20 - 1) <= v34) {
        break;
      }
      if (v20 - root_directory_start == 2)
      {
        *((void *)v4 + 4) = root_directory_start;
        if (*((char *)v4 + 23) < 0)
        {
          *((void *)v4 + 1) = 1;
          int v4 = *(boost::filesystem::path::iterator **)v4;
        }
        else
        {
          *((unsigned char *)v4 + 23) = 1;
        }
        *(_WORD *)int v4 = 47;
        return;
      }
      uint64_t v22 = *((void *)v4 + 3);
      unint64_t v23 = (uint64_t *)v22;
      if (*(char *)(v22 + 23) < 0) {
        unint64_t v23 = *(uint64_t **)v22;
      }
      int v24 = (v20--)[(void)v23 - 2];
      if (v24 != 47)
      {
        uint64_t v25 = *(void *)v22;
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v25 = *((void *)v4 + 3);
        }
        std::string::size_type v26 = v21 - 1;
        unint64_t v27 = (unint64_t)v21;
        while (1)
        {
          unint64_t v28 = v27;
          if ((unint64_t)(v26 + 1) <= v34) {
            break;
          }
          int v29 = (v26--)[v25];
          --v27;
          if (v29 == 47)
          {
            unint64_t v30 = (unint64_t)(v26 + 2);
            goto LABEL_48;
          }
        }
        unint64_t v30 = v34;
LABEL_48:
        *((void *)v4 + 4) = v30;
        if (*(char *)(v22 + 23) < 0) {
          uint64_t v22 = *(void *)v22;
        }
        std::string::size_type v31 = (std::string::value_type *)(v22 + v30);
        std::string::size_type v33 = (std::string::value_type *)&v21[v22];
        if (v19 <= v28) {
          unint64_t v19 = v28;
        }
        std::string::size_type v32 = (std::string::size_type)&v21[-v19];
        goto LABEL_42;
      }
    }
  }
  *((void *)v4 + 4) = 0;
  std::string::size_type v31 = (std::string::value_type *)*((void *)v4 + 3);
  if (v31[23] < 0) {
    std::string::size_type v31 = *(std::string::value_type **)v31;
  }
  std::string::size_type v32 = v34;
  std::string::size_type v33 = &v31[v34];
LABEL_42:

  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>((std::string *)v4, v31, v33, v32);
}

void boost::filesystem::path::iterator::decrement_v4(unsigned __int8 **this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = (boost::filesystem::path::iterator *)this;
  unint64_t v5 = this[3];
  if ((char)v5[23] < 0)
  {
    uint64_t v7 = v5;
    unint64_t v5 = *(unsigned __int8 **)v5;
    std::string::size_type v6 = (const char *)*((void *)v7 + 1);
  }
  else
  {
    std::string::size_type v6 = (const char *)v5[23];
  }
  unint64_t v34 = 0;
  std::string::pointer v9 = (const char *)*((void *)v4 + 4);
  if (root_directory_start >= v6 || v9 != root_directory_start)
  {
    if ((unint64_t)v6 >= 2 && v9 == v6)
    {
      std::string::pointer v12 = (uint64_t *)*((void *)v4 + 3);
      std::string::pointer v13 = v6 - 1;
      uint64_t v14 = (uint64_t)v12;
      if (*((char *)v12 + 23) < 0) {
        uint64_t v14 = *v12;
      }
      if (v13[v14] == 47)
      {
        if (v13 >= root_directory_start) {
          std::string::size_type v15 = root_directory_start;
        }
        else {
          std::string::size_type v15 = v6 - 1;
        }
        if (*((char *)v12 + 23) < 0) {
          std::string::pointer v12 = (uint64_t *)*v12;
        }
        uint64_t v16 = (uint64_t)v12 - 2;
        while (1)
        {
          std::string::pointer v17 = v6 - 1;
          if (v6 - 1 <= root_directory_start) {
            break;
          }
          int v18 = (v6--)[v16];
          if (v18 != 47) {
            goto LABEL_26;
          }
        }
        std::string::pointer v17 = v15;
LABEL_26:
        if (v17 != root_directory_start)
        {
          *((void *)v4 + 4) = v13;
          if (*((char *)v4 + 23) < 0)
          {
            **(unsigned char **)int v4 = 0;
            *((void *)v4 + 1) = 0;
          }
          else
          {
            *(unsigned char *)int v4 = 0;
            *((unsigned char *)v4 + 23) = 0;
          }
          return;
        }
      }
    }
    unint64_t v19 = v34;
    int v20 = v9 + 1;
    while (1)
    {
      std::string::pointer v21 = v20 - 1;
      if ((unint64_t)(v20 - 1) <= v34) {
        break;
      }
      if (v20 - root_directory_start == 2)
      {
        *((void *)v4 + 4) = root_directory_start;
        if (*((char *)v4 + 23) < 0)
        {
          *((void *)v4 + 1) = 1;
          int v4 = *(boost::filesystem::path::iterator **)v4;
        }
        else
        {
          *((unsigned char *)v4 + 23) = 1;
        }
        *(_WORD *)int v4 = 47;
        return;
      }
      uint64_t v22 = *((void *)v4 + 3);
      unint64_t v23 = (uint64_t *)v22;
      if (*(char *)(v22 + 23) < 0) {
        unint64_t v23 = *(uint64_t **)v22;
      }
      int v24 = (v20--)[(void)v23 - 2];
      if (v24 != 47)
      {
        uint64_t v25 = *(void *)v22;
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v25 = *((void *)v4 + 3);
        }
        std::string::size_type v26 = v21 - 1;
        unint64_t v27 = (unint64_t)v21;
        while (1)
        {
          unint64_t v28 = v27;
          if ((unint64_t)(v26 + 1) <= v34) {
            break;
          }
          int v29 = (v26--)[v25];
          --v27;
          if (v29 == 47)
          {
            unint64_t v30 = (unint64_t)(v26 + 2);
            goto LABEL_48;
          }
        }
        unint64_t v30 = v34;
LABEL_48:
        *((void *)v4 + 4) = v30;
        if (*(char *)(v22 + 23) < 0) {
          uint64_t v22 = *(void *)v22;
        }
        std::string::size_type v31 = (std::string::value_type *)(v22 + v30);
        std::string::size_type v33 = (std::string::value_type *)&v21[v22];
        if (v19 <= v28) {
          unint64_t v19 = v28;
        }
        std::string::size_type v32 = (std::string::size_type)&v21[-v19];
        goto LABEL_42;
      }
    }
  }
  *((void *)v4 + 4) = 0;
  std::string::size_type v31 = (std::string::value_type *)*((void *)v4 + 3);
  if (v31[23] < 0) {
    std::string::size_type v31 = *(std::string::value_type **)v31;
  }
  std::string::size_type v32 = v34;
  std::string::size_type v33 = &v31[v34];
LABEL_42:

  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>((std::string *)v4, v31, v33, v32);
}

void anonymous namespace'::path_locale_deleter::~path_locale_deleter(_anonymous_namespace_::path_locale_deleter *this)
{
  {
    operator delete(v1);
  }
}

const std::locale::facet *boost::filesystem::path::codecvt(boost::filesystem::path *this)
{
  if (!explicit)
  {
    unsigned int explicit = (std::locale *)operator new(8uLL);
    size_t v3 = 0;
    if (v3)
    {
      std::locale::~locale(explicit);
      operator delete(v4);
      unsigned int explicit = v3;
    }
  }

  return std::locale::use_facet(explicit, &std::codecvt<wchar_t,char,__mbstate_t>::id);
}

void sub_1001BCBC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void boost::filesystem::path::imbue(const std::locale *this@<X0>, std::locale *a2@<X8>)
{
  unint64_t v5 = (std::locale *)operator new(8uLL);
  if (v6)
  {
    std::locale::locale(a2, v6);
    std::locale::~locale(v6);
    operator delete(v7);
  }
  else
  {
  }
}

void anonymous namespace'::default_locale(std::locale *a1@<X8>)
{
  std::locale::locale(&v5);
  size_t v3 = (std::codecvt<wchar_t, char, mbstate_t> *)operator new(0x18uLL);
  boost::filesystem::detail::utf8_codecvt_facet::utf8_codecvt_facet(v3, 0);
  uint64_t v4 = std::locale::id::__get(&std::codecvt<wchar_t,char,__mbstate_t>::id);
  std::locale::__install_ctor(a1, &v5, v3, v4);
  std::locale::~locale(&v5);
}

void sub_1001BCCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  operator delete(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

std::string *std::pair<boost::filesystem::path::iterator,boost::filesystem::path::iterator>::pair[abi:ne180100]<boost::filesystem::path::iterator&,boost::filesystem::path::iterator&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  uint64_t v7 = (std::string *)((char *)this + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    this[2].__r_.__value_.__l.__size_ = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(long long *)((char *)a3 + 24);
  return this;
}

void sub_1001BCD80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t global constructor keyed to'_032768()
{
}

std::codecvt<wchar_t, char, mbstate_t> *boost::filesystem::detail::utf8_codecvt_facet::utf8_codecvt_facet(std::codecvt<wchar_t, char, mbstate_t> *this, size_t a2)
{
  ssize_t result = std::codecvt<wchar_t,char,__mbstate_t>::codecvt(this, a2);
  result->__vftable = (std::codecvt<wchar_t, char, mbstate_t>_vtbl *)off_10049BCE0;
  return result;
}

{
  std::codecvt<wchar_t, char, mbstate_t> *result;

  ssize_t result = std::codecvt<wchar_t,char,__mbstate_t>::codecvt(this, a2);
  result->__vftable = (std::codecvt<wchar_t, char, mbstate_t>_vtbl *)off_10049BCE0;
  return result;
}

void boost::filesystem::detail::utf8_codecvt_facet::~utf8_codecvt_facet(std::codecvt<wchar_t, char, mbstate_t> *this)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(this);

  operator delete(v1);
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_in(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char *a4, unsigned __int8 **a5, unsigned int *a6, unsigned int *a7, unsigned int **a8)
{
  if (a3 == (unsigned __int8 *)a4 || a6 == a7)
  {
LABEL_29:
    *a5 = a3;
    *a8 = a6;
    return a3 != (unsigned __int8 *)a4;
  }
  while (1)
  {
    if ((char)*a3 < -64 || (unsigned int v8 = *a3, v8 >= 0xFE))
    {
      *a5 = a3;
      goto LABEL_32;
    }
    if ((v8 & 0x80) == 0)
    {
      ++a3;
      goto LABEL_7;
    }
    if ((v8 & 0xE0) == 0xC0)
    {
      unsigned int v9 = 1;
    }
    else if ((v8 & 0xF0) == 0xE0)
    {
      unsigned int v9 = 2;
    }
    else
    {
      unsigned int v9 = (v8 & 0xFC) == 0xF8 ? 4 : 5;
      if ((v8 & 0xF8) == 0xF0) {
        unsigned int v9 = 3;
      }
    }
    v8 -= boost::filesystem::detail::detail::get_octet1_modifier_table(void)::octet1_modifier_table[v9];
    if (a3 + 1 != (unsigned __int8 *)a4) {
      break;
    }
    LODWORD(v10) = 0;
    BOOL v14 = 1;
    ++a3;
LABEL_26:
    if (a3 == (unsigned __int8 *)a4 && v14)
    {
      *a5 = (unsigned __int8 *)&a4[-(v10 + 1)];
      *a8 = a6;
      return 1;
    }
LABEL_7:
    *a6++ = v8;
    if (a3 == (unsigned __int8 *)a4 || a6 == a7) {
      goto LABEL_29;
    }
  }
  uint64_t v10 = 0;
  unsigned int v11 = v9 - 1;
  while (1)
  {
    std::string::pointer v12 = (char *)&a3[v10];
    if ((char)a3[v10 + 1] >= -64) {
      break;
    }
    unsigned int v8 = a3[v10 + 1] + (v8 << 6) - 128;
    BOOL v13 = v11 == v10;
    BOOL v14 = v11 != v10++;
    if (v13 || v12 + 2 == a4)
    {
      a3 += v10 + 1;
      goto LABEL_26;
    }
  }
  *a5 = (unsigned __int8 *)(v12 + 1);
LABEL_32:
  *a8 = a6;
  return 2;
}

BOOL boost::filesystem::detail::utf8_codecvt_facet::do_out(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int **a5, unsigned char *a6, unsigned char *a7, uint64_t *a8)
{
  if (a3 == a4 || a6 == a7)
  {
    uint64_t v12 = (uint64_t)a6;
LABEL_33:
    *a5 = a3;
    *a8 = v12;
    return a3 != a4;
  }
  else
  {
    while (1)
    {
      unsigned int v8 = *a3;
      if ((int)*a3 >= 128)
      {
        if (v8 >= 0x800)
        {
          if (v8 >= 0x10000)
          {
            if (v8 >> 26) {
              int v10 = 5;
            }
            else {
              int v10 = 4;
            }
            if (v8 >= 0x200000) {
              int v9 = v10;
            }
            else {
              int v9 = 3;
            }
          }
          else
          {
            int v9 = 2;
          }
        }
        else
        {
          int v9 = 1;
        }
      }
      else
      {
        int v9 = 0;
      }
      LODWORD(v11) = 0;
      *a6 = (int)v8 / (1 << (6 * v9))
          + LOBYTE(boost::filesystem::detail::detail::get_octet1_modifier_table(void)::octet1_modifier_table[v9]);
      uint64_t v12 = (uint64_t)(a6 + 1);
      BOOL v13 = v9 != 0;
      if (v9 && (unsigned char *)v12 != a7)
      {
        uint64_t v11 = 0;
        int v14 = v9 - 1;
        char v15 = 6 * v9 - 6;
        do
        {
          uint64_t v16 = &a6[v11];
          int v17 = (int)*a3 / (1 << v15);
          char v18 = v17 & 0x3F;
          int v20 = -v17;
          BOOL v19 = v20 < 0;
          int v21 = v20 & 0x3F;
          if (v19) {
            LOBYTE(v22) = v18;
          }
          else {
            int v22 = -v21;
          }
          v16[1] = v22 ^ 0x80;
          BOOL v23 = v14 == v11;
          BOOL v13 = v14 != v11++;
          if (v23) {
            break;
          }
          v15 -= 6;
        }
        while (v16 + 2 != a7);
        uint64_t v12 = (uint64_t)&a6[v11 + 1];
      }
      BOOL v23 = (unsigned char *)v12 != a7 || !v13;
      if (!v23) {
        break;
      }
      if (++a3 != a4)
      {
        a6 = (unsigned char *)v12;
        if ((unsigned char *)v12 != a7) {
          continue;
        }
      }
      goto LABEL_33;
    }
    *a5 = a3;
    *a8 = (uint64_t)&a7[-(v11 + 1)];
    return 1;
  }
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::get_cont_octet_out_count(unsigned int a1)
{
  if (a1 >> 26) {
    int v1 = 5;
  }
  else {
    int v1 = 4;
  }
  if (a1 >= 0x200000) {
    int v2 = v1;
  }
  else {
    int v2 = 3;
  }
  if (a1 >= 0x10000) {
    int v3 = v2;
  }
  else {
    int v3 = 2;
  }
  if (a1 >= 0x800) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 1;
  }
  if ((int)a1 >= 128) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_length(boost::filesystem::detail::utf8_codecvt_facet *this, __mbstate_t *a2, const char *a3, const char *a4, unint64_t a5)
{
  LODWORD(v5) = a3;
  if (a5)
  {
    LODWORD(v5) = a3;
    if (a3 < a4)
    {
      unint64_t v6 = 1;
      unint64_t v5 = (unint64_t)a3;
      do
      {
        int v7 = *(char *)v5;
        if (v7 < 0)
        {
          if ((v7 & 0xE0) == 0xC0)
          {
            unint64_t v8 = 2;
          }
          else if ((v7 & 0xF0) == 0xE0)
          {
            unint64_t v8 = 3;
          }
          else
          {
            int v9 = v7 & 0xF8;
            if ((v7 & 0xFC) == 0xF8) {
              unint64_t v8 = 5;
            }
            else {
              unint64_t v8 = 6;
            }
            if (v9 == 240) {
              unint64_t v8 = 4;
            }
          }
        }
        else
        {
          unint64_t v8 = 1;
        }
        if ((unint64_t)&a4[-v5] < v8) {
          break;
        }
        v5 += v8;
        if (v6 >= a5) {
          break;
        }
        ++v6;
      }
      while (v5 < (unint64_t)a4);
    }
  }
  return (v5 - a3);
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::get_octet_count(boost::filesystem::detail::utf8_codecvt_facet *this)
{
  if ((this & 0xFC) == 0xF8) {
    int v1 = 5;
  }
  else {
    int v1 = 6;
  }
  if ((this & 0xF8) == 0xF0) {
    int v2 = 4;
  }
  else {
    int v2 = v1;
  }
  if ((this & 0xF0) == 0xE0) {
    int v3 = 3;
  }
  else {
    int v3 = v2;
  }
  if ((this & 0xE0) == 0xC0) {
    unsigned int v4 = 2;
  }
  else {
    unsigned int v4 = v3;
  }
  if ((this & 0x80) != 0) {
    return v4;
  }
  else {
    return 1;
  }
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_unshift(boost::filesystem::detail::utf8_codecvt_facet *this, __mbstate_t *a2, char *a3, char *a4, char **a5)
{
  *a5 = a3;
  return 0;
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_encoding(boost::filesystem::detail::utf8_codecvt_facet *this)
{
  return 0;
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_always_noconv(boost::filesystem::detail::utf8_codecvt_facet *this)
{
  return 0;
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_max_length(boost::filesystem::detail::utf8_codecvt_facet *this)
{
  return 6;
}

uint64_t boost::filesystem::detail::utf8_codecvt_facet::do_length(boost::filesystem::detail::utf8_codecvt_facet *this, const __mbstate_t *a2, const char *a3, const char *a4)
{
  return (*(uint64_t (**)(boost::filesystem::detail::utf8_codecvt_facet *, const __mbstate_t *, const char *, const char *))(*(void *)this + 64))(this, a2, a3, a4);
}

const char *ot::Mac::rcp2_m154_status_string(ot::Mac *this)
{
  for (unsigned __int8 i = 0; i < 0x29u; ++i)
  {
    if (this == *((unsigned __int8 *)&ot::Mac::rcp2_m154_status_string_lookup_table + 16 * i)) {
      return (const char *)*((void *)&ot::Mac::rcp2_m154_status_string_lookup_table + 2 * i + 1);
    }
  }
  return "UNRECOGNIZED";
}

void ot::Mac::Mac::LogVendorRCP2(ot::Mac::Mac *a1, ot::Mac::TxFrame *a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, int a6)
{
  v87 = a1;
  v86 = a2;
  uint64_t v85 = a3;
  unsigned __int8 v84 = a4;
  unsigned __int8 v83 = a5;
  int v82 = a6;
  v80 = a1;
  int Rcp2FrameVersion = (char)ot::Mac::TxFrame::GetRcp2FrameVersion(a2);
  if ((Rcp2FrameVersion - 2) <= 2)
  {
    int v68 = v84;
    int v69 = v83;
    double v70 = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v86);
    int TxRetryCount = ot::Mac::TxFrame::GetTxRetryCount(v86);
    std::string v72 = otThreadErrorToString(v82);
    std::string v66 = v90;
    ot::Mac::Frame::ToInfoString(v86, (ot::StringWriter *)v90);
    uint64_t v73 = ot::String<(unsigned short)150>::AsCString((uint64_t)v90);
    int v67 = 100;
    unsigned int v74 = ot::Mac::Mac::GetCcaFailureRatePercent(v80) / 0x64;
    unsigned int v75 = ot::Mac::Mac::GetCcaFailureRatePercent(v80) % 0x64;
    uint64_t v76 = v85;
    v77 = ot::Mac::rcp2_m154_status_string((ot::Mac *)*((unsigned __int8 *)v86 + 57));
    unsigned int v78 = *((unsigned __int8 *)v86 + 57);
    v79 = &v26;
    uint64_t v27 = v83;
    double v28 = v70;
    uint64_t v29 = TxRetryCount;
    unint64_t v30 = v72;
    uint64_t v31 = v73;
    uint64_t v32 = v74;
    uint64_t v33 = v75;
    uint64_t v34 = v85;
    uint64_t v35 = v77;
    uint64_t v36 = v78;
    uint64_t Antenna = (char)ot::Mac::TxFrame::GetAntenna(v86);
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Mac", "Frame tx attempt %d/%d failed, txPower=%f, retryCount=%d, error:%s, %s, ccaFailureRate:%d.%02d%%%s, RCP2Status=%s (0x%02X) antenna=%d", v84, v6, v7, v8, v9, v10, v84);
  }
  else if (Rcp2FrameVersion != 5)
  {
    int v41 = v84;
    int v42 = v83;
    double v43 = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v86);
    int v44 = ot::Mac::TxFrame::GetTxRetryCount(v86);
    std::string v45 = otThreadErrorToString(v82);
    std::string v39 = v88;
    ot::Mac::Frame::ToInfoString(v86, (ot::StringWriter *)v88);
    uint64_t v46 = ot::String<(unsigned short)150>::AsCString((uint64_t)v88);
    int v40 = 100;
    unsigned int v47 = ot::Mac::Mac::GetCcaFailureRatePercent(v80) / 0x64;
    unsigned int v48 = ot::Mac::Mac::GetCcaFailureRatePercent(v80) % 0x64;
    uint64_t v49 = v85;
    char v18 = ot::Mac::rcp2_m154_status_string((ot::Mac *)*((unsigned __int8 *)v86 + 57));
    uint64_t v19 = *((unsigned __int8 *)v86 + 57);
    long long v50 = &v26;
    uint64_t v27 = v83;
    double v28 = v43;
    uint64_t v29 = v44;
    unint64_t v30 = v45;
    uint64_t v31 = v46;
    uint64_t v32 = v47;
    uint64_t v33 = v48;
    uint64_t v34 = v85;
    uint64_t v35 = v18;
    uint64_t v36 = v19;
    ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Mac", "Frame tx attempt %d/%d failed, txPower=%f, retryCount=%d, error:%s, %s, ccaFailureRate:%d.%02d%%%s, RCP2Status=%s (0x%02X)", v20, v21, v22, v23, v24, v25, v84);
    return;
  }
  unsigned int v53 = v84;
  unsigned int v54 = v83;
  double v55 = 0.25 * (double)(char)ot::Mac::TxFrame::GetTxPower(v86);
  int v56 = ot::Mac::TxFrame::GetTxRetryCount(v86);
  uint64_t v57 = otThreadErrorToString(v82);
  uint64_t v51 = v89;
  ot::Mac::Frame::ToInfoString(v86, (ot::StringWriter *)v89);
  uint64_t v58 = ot::String<(unsigned short)150>::AsCString((uint64_t)v51);
  unsigned int CcaFailureRatePercent = ot::Mac::Mac::GetCcaFailureRatePercent(v80);
  unsigned int v52 = 100;
  unsigned int v59 = CcaFailureRatePercent / 0x64;
  unsigned int v12 = ot::Mac::Mac::GetCcaFailureRatePercent(v80);
  unsigned int v60 = v12 % v52;
  uint64_t v61 = v85;
  v62 = ot::Mac::rcp2_m154_status_string((ot::Mac *)*((unsigned __int8 *)v86 + 57));
  unsigned int v63 = *((unsigned __int8 *)v86 + 57);
  int v64 = ot::Mac::TxFrame::GetAntenna(v86);
  uint64_t PcapMode = ot::Mac::TxFrame::GetPcapMode(v86);
  uint64_t v65 = &v26;
  uint64_t v27 = v54;
  double v28 = v55;
  uint64_t v29 = v56;
  unint64_t v30 = v57;
  uint64_t v31 = v58;
  uint64_t v32 = v59;
  uint64_t v33 = v60;
  uint64_t v34 = v61;
  uint64_t v35 = v62;
  uint64_t v36 = v63;
  uint64_t Antenna = (char)v64;
  uint64_t v38 = PcapMode;
  ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"Mac", "Frame tx attempt %d/%d failed, txPower=%f, retryCount=%d, error:%s, %s, ccaFailureRate:%d.%02d%%%s, RCP2Status=%s (0x%02X) antenna=%d, pcap mode=%d", v54, v53, v14, v15, v16, v17, v53);
}

uint64_t ot::Mac::TxFrame::GetRcp2FrameVersion(ot::Mac::TxFrame *this)
{
  return *((char *)this + 56);
}

{
  return ot::Mac::TxFrame::GetRcp2FrameVersion(this);
}

uint64_t ot::Mac::TxFrame::GetTxPower(ot::Mac::TxFrame *this)
{
  return *((char *)this + 42);
}

{
  return ot::Mac::TxFrame::GetTxPower(this);
}

uint64_t ot::Mac::TxFrame::GetTxRetryCount(ot::Mac::TxFrame *this)
{
  return *((unsigned __int8 *)this + 43);
}

{
  return ot::Mac::TxFrame::GetTxRetryCount(this);
}

uint64_t ot::String<(unsigned short)150>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)150>::AsCString(a1);
}

uint64_t ot::Mac::Mac::GetCcaFailureRatePercent(ot::Mac::Mac *this)
{
  return ot::SuccessRateTracker::GetFailureRatePercent((ot::Mac::Mac *)((char *)this + 516));
}

{
  return ot::Mac::Mac::GetCcaFailureRatePercent(this);
}

uint64_t ot::Mac::TxFrame::GetAntenna(ot::Mac::TxFrame *this)
{
  return *((char *)this + 46);
}

{
  return ot::Mac::TxFrame::GetAntenna(this);
}

uint64_t ot::Mac::TxFrame::GetPcapMode(ot::Mac::TxFrame *this)
{
  return *((unsigned __int8 *)this + 58);
}

{
  return ot::Mac::TxFrame::GetPcapMode(this);
}

uint64_t ot::SuccessRateTracker::GetFailureRatePercent(ot::SuccessRateTracker *this)
{
  return (10000 * *(unsigned __int16 *)this / 0xFFFF);
}

{
  return ot::SuccessRateTracker::GetFailureRatePercent(this);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioSpinel(uint64_t a1)
{
  *(void *)(a1 + 216) = 0;
  ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::MultiFrameBuffer(a1 + 224);
  ot::Posix::HdlcInterface::HdlcInterface((void *)(a1 + 8448), (uint64_t)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleReceivedFrame, a1, a1 + 224, (uint64_t)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleTransportError);
  *(_WORD *)(a1 + 8544) = 0;
  *(unsigned char *)(a1 + 8546) = 1;
  *(unsigned char *)(a1 + 8547) = 0;
  *(unsigned char *)(a1 + 8548) = 0;
  *(_DWORD *)(a1 + 8552) = 0;
  *(void *)(a1 + 8560) = 0;
  *(_DWORD *)(a1 + 8576) = 0;
  *(_DWORD *)(a1 + 8580) = 0;
  *(void *)(a1 + 9160) = 0;
  *(_WORD *)(a1 + 9176) = 0;
  *(_WORD *)(a1 + 9178) = -1;
  *(unsigned char *)(a1 + 9180) = 0;
  *(unsigned char *)(a1 + 9181) = 0;
  *(unsigned char *)(a1 + 9182) = 1;
  *(unsigned char *)(a1 + 9183) = 0;
  *(unsigned char *)(a1 + 9184) = 0;
  *(_DWORD *)(a1 + 9328) = 0;
  *(unsigned char *)(a1 + 9332) &= ~1u;
  *(unsigned char *)(a1 + 9333) = 0;
  *(unsigned char *)(a1 + 9334) = 0;
  *(unsigned char *)(a1 + 9335) &= ~1u;
  *(_WORD *)(a1 + 9336) = 0;
  *(_WORD *)(a1 + 9516) = 0;
  *(_WORD *)(a1 + 10030) = 0;
  *(_WORD *)(a1 + 10044) &= ~2u;
  *(_WORD *)(a1 + 10044) &= ~4u;
  *(_WORD *)(a1 + 10044) &= ~8u;
  *(_WORD *)(a1 + 10044) &= ~0x10u;
  *(_WORD *)(a1 + 10044) &= ~0x20u;
  *(_WORD *)(a1 + 10044) &= ~0x40u;
  *(_WORD *)(a1 + 10044) &= ~0x80u;
  *(_WORD *)(a1 + 10044) &= ~0x100u;
  *(unsigned char *)(a1 + 10046) = 0;
  *(unsigned char *)(a1 + 10047) = 0;
  *(void *)(a1 + 10048) = 0;
  *(void *)(a1 + 10056) = 0;
  *(void *)(a1 + 10064) = -1;
  *(void *)(a1 + 10072) = -1;
  *(void *)(a1 + 10080) = -1;
  ot::MaxPowerTable::MaxPowerTable((ot::MaxPowerTable *)(a1 + 10088));
  uint64_t result = a1;
  *(void *)(a1 + 10120) = 0;
  *(void *)(a1 + 10128) = 0;
  *(unsigned char *)(a1 + 9192) = 0;
  *(void *)(a1 + 10104) = 0;
  *(void *)(a1 + 10112) = 0;
  return result;
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioSpinel(a1);
  return a1;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioSpinel(a1);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioSpinel(a1);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::MultiFrameBuffer(uint64_t a1)
{
  return a1;
}

{
  uint64_t result;

  ot::Hdlc::FrameWritePointer::FrameWritePointer(a1);
  ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::Clear(a1);
  uint64_t result = a1;
  *(unsigned char *)(a1 + 8216) = 0;
  return result;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleReceivedFrame(uint64_t a1, const unsigned __int8 *a2)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleReceivedFrame(a1, a2);
}

{
  const unsigned __int8 *v2;
  unsigned __int16 Length;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const unsigned __int8 *v12;
  const unsigned __int8 *v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t Frame;
  char v33;
  int v34;
  uint64_t v35;

  uint64_t v35 = a1;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  Frame = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame(a1 + 224, a2);
  Length = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength((uint64_t *)(a1 + 224), v2);
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LogSpinelFrame(a1, Frame, Length, 0);
  if ((*(_WORD *)(a1 + 10044) & 0x40) != 0)
  {
    uint64_t v34 = 13;
  }
  else
  {
    unint64_t v30 = (unsigned __int8 *)ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame(a1 + 224, v4);
    uint64_t v6 = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength((uint64_t *)(a1 + 224), v5);
    if ((int)spinel_datatype_unpack(v30, v6, "C", v7, v8, v9, v10, v11, (uint64_t)&v33) > 0
      && (v33 & 0x80) == 0x80
      && !((v33 & 0x30) >> 4))
    {
      if ((v33 & 0xF) != 0)
      {
        uint64_t v29 = (unsigned __int8 *)ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame(a1 + 224, v12);
        uint64_t v14 = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength((uint64_t *)(a1 + 224), v13);
        ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleResponse(a1, v29, v14, v15, v16, v17, v18, v19);
        ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::DiscardFrame(a1 + 224);
      }
      else
      {
        ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleNotification(a1, (uint64_t *)(a1 + 224));
      }
    }
    else
    {
      uint64_t v34 = 6;
    }
  }
  if (v34)
  {
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::DiscardFrame(a1 + 224);
    uint64_t v20 = otThreadErrorToString(v34);
    otLogWarnPlat("Error handling hdlc frame: %s", v21, v22, v23, v24, v25, v26, v27, v20);
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, v34);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleReceivedFrame(a1, a2);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleTransportError(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

ot::MaxPowerTable *ot::MaxPowerTable::MaxPowerTable(ot::MaxPowerTable *this)
{
  return this;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Init(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v95 = a1;
  char v94 = a2 & 1;
  char v93 = a3 & 1;
  char v92 = a4 & 1;
  int v91 = 0;
  char v90 = 0;
  char v89 = 0;
  *(unsigned char *)(a1 + 9335) = *(unsigned char *)(a1 + 9335) & 0xFD | (2 * (a2 & 1));
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ResetRcp(a1, v94 & 1, a3, a4, a5, a6, a7, a8);
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckSpinelVersion(a1, v8, v9, v10, v11, v12, v13, v14);
  int v91 = result;
  if (!result)
  {
    uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2, (uint64_t)"U", v16, v17, v18, v19, v20, a1 + 9192);
    int v91 = result;
    if (!result)
    {
      uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 8, (uint64_t)"E", v21, v22, v23, v24, v25, a1 + 9320);
      int v91 = result;
      if (!result)
      {
        if ((ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsRcp(a1, &v90, &v89, v26, v27, v28, v29, v30) & 1) == 0)
        {
          unsigned __int8 v88 = 3;
          if (v93) {
            unsigned __int8 v88 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RestoreDatasetFromNcp((ot::Instance *)a1) != 0;
          }
          v87 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
          if (v87) {
            int v82 = v87 + 1;
          }
          else {
            int v82 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
          }
          uint64_t v38 = otExitCodeToString(v88);
          otLogCritPlat("%s() at %s:%d: %s", "Init", v82, 400, v38);
          handle_daemon_exit();
          exit(v88);
        }
        if ((v92 & 1) == 0)
        {
          if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRcpApiVersion(a1, v90 & 1, v89 & 1, v33, v34, v35, v36, v37))
          {
            v86 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
            if (v86) {
              v81 = v86 + 1;
            }
            else {
              v81 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
            }
            if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRcpApiVersion(a1, v90 & 1, v89 & 1, v46, v47, v48, v49, v50) == 7)unsigned __int8 v51 = 2; {
            else
            }
              unsigned __int8 v51 = 1;
            unsigned int v52 = otExitCodeToString(v51);
            otLogCritPlat("%s() at %s:%d: %s", "Init", v81, 407, v52);
            handle_daemon_exit();
            if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRcpApiVersion(a1, v90 & 1, v89 & 1, v53, v54, v55, v56, v57) == 7)int v58 = 2; {
            else
            }
              int v58 = 1;
            exit(v58);
          }
          if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRadioCapabilities(a1, v39, v40, v41, v42, v43, v44, v45))
          {
            uint64_t v85 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
            if (v85) {
              v80 = v85 + 1;
            }
            else {
              v80 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
            }
            if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRadioCapabilities(a1, v59, v60, v61, v62, v63, v64, v65) == 7)unsigned __int8 v66 = 2; {
            else
            }
              unsigned __int8 v66 = 1;
            int v67 = otExitCodeToString(v66);
            otLogCritPlat("%s() at %s:%d: %s", "Init", v80, 409, v67);
            handle_daemon_exit();
            if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRadioCapabilities(a1, v68, v69, v70, v71, v72, v73, v74) == 7)int v75 = 2; {
            else
            }
              int v75 = 1;
            exit(v75);
          }
        }
        uint64_t result = (uint64_t)otPlatRadioRcp2GetSpinelVersion(*(void *)(a1 + 216), v31, v32, v33, v34, v35, v36, v37);
        *(void *)(a1 + 8968) = a1 + 8584;
        *(void *)(a1 + 9032) = a1 + 8711;
        *(void *)(a1 + 9096) = a1 + 8838;
      }
    }
  }
  if (v91)
  {
    unsigned __int8 v84 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v84) {
      v79 = v84 + 1;
    }
    else {
      v79 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    if (v91 == 7) {
      unsigned __int8 v76 = 2;
    }
    else {
      unsigned __int8 v76 = 1;
    }
    v77 = otExitCodeToString(v76);
    otLogCritPlat("%s() at %s:%d: %s", "Init", v79, 421, v77);
    handle_daemon_exit();
    if (v91 == 7) {
      int v78 = 2;
    }
    else {
      int v78 = 1;
    }
    exit(v78);
  }
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Init(a1, a2, a3, a4, a5, a6, a7, a8);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ResetRcp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10 = 0;
  *(unsigned char *)(a1 + 9333) = 0;
  *(_DWORD *)(a1 + 8552) = 0;
  if ((a2 & 1) != 0
    && !ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendReset(a1, 2, a3, a4, a5, a6, a7, a8)&& !ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::WaitResponse(a1, 0))
  {
    otLogInfoPlat("Software reset RCP successfully", a2, a3, a4, a5, a6, a7, a8, v8);
    char v10 = 1;
  }
  if ((v10 & 1) == 0)
  {
    otLogInfoPlat("Softreset frame timeout still, trigger RCP hardware reset", a2, a3, a4, a5, a6, a7, a8, v8);
    *(unsigned char *)(a1 + 10046) = 0;
    rcp_hard_reset();
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ResetRcp(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckSpinelVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = a1;
  uint64_t v14 = a1;
  unsigned int v18 = 0;
  int v17 = 0;
  int v16 = 0;
  char v10 = &v16;
  unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 1, (uint64_t)"ii", a4, a5, a6, a7, a8, (uint64_t)&v17);
  if (!v18 && (v17 != 4 || v16 != 3))
  {
    otLogCritPlat("Spinel version mismatch - Posix:%d.%d, RCP:%d.%d", 4, 3, v17, v16);
    uint64_t v15 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v15) {
      uint64_t v13 = v15 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    uint64_t v11 = v13;
    int v12 = 3;
    char v8 = otExitCodeToString(3u);
    otLogCritPlat("%s() at %s:%d: %s", "CheckSpinelVersion", v13, 491, v8);
    handle_daemon_exit();
    exit(v12);
  }
  return v18;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckSpinelVersion(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v20 = a2;
  if (pciNotOpen(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 8548)) {
      __assert_rtn("Get", "radio_spinel_impl.hpp", 2385, "mWaitingTid == 0");
    }
    do
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v9, v10, v11, v12, v13, v14, v15);
      *(void *)(a1 + 8568) = &a9;
      unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithPropertyFormatV(a1, a3, 2, v20, 0, *(char ***)(a1 + 8568));
    }
    while ((*(_WORD *)(a1 + 10044) & 0x40) != 0);
    return v18;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsRcp(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = a1;
  uint64_t v43 = a2;
  uint64_t v42 = a3;
  uint64_t v41 = v45;
  unsigned int v40 = 100;
  char v39 = 0;
  char v38 = 0;
  *a2 = 0;
  *uint64_t v42 = 0;
  if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 5, (uint64_t)"D", a4, a5, a6, a7, a8, (uint64_t)v45))
  {
    uint64_t v37 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v37) {
      uint64_t v31 = v37 + 1;
    }
    else {
      uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 5, (uint64_t)"D", v13, v14, v15, v16, v17, (uint64_t)v45) == 7)unsigned __int8 v18 = 2; {
    else
    }
      unsigned __int8 v18 = 1;
    uint64_t v19 = otExitCodeToString(v18);
    otLogCritPlat("%s() at %s:%d: %s", "IsRcp", v31, 511, v19);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 5, (uint64_t)"D", v20, v21, v22, v23, v24, (uint64_t)v45) == 7)int v25 = 2; {
    else
    }
      int v25 = 1;
    exit(v25);
  }
  while (v40)
  {
    int v36 = 0;
    int v35 = spinel_datatype_unpack(v41, v40, "i", v8, v9, v10, v11, v12, (uint64_t)&v36);
    if (v35 <= 0)
    {
      uint64_t v34 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v34) {
        uint64_t v30 = v34 + 1;
      }
      else {
        uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v26 = otExitCodeToString(3u);
      otLogCritPlat("%s() at %s:%d: %s", "IsRcp", v30, 519, v26);
      handle_daemon_exit();
      exit(3);
    }
    if (v36 == 513) {
      char v39 = 1;
    }
    if (v36 == 34) {
      char v38 = 1;
    }
    if (v36 == 518) {
      *(unsigned char *)(a1 + 9334) = 1;
    }
    if (v36 == 64) {
      *uint64_t v43 = 1;
    }
    if (v36 == 177) {
      *uint64_t v42 = 1;
    }
    v41 += v35;
    v40 -= v35;
  }
  if (v39 & 1) == 0 && (v38)
  {
    otLogCritPlat("RCP capability list does not include support for radio/raw mode");
    uint64_t v33 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v33) {
      uint64_t v29 = v33 + 1;
    }
    else {
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    uint64_t v27 = otExitCodeToString(3u);
    otLogCritPlat("%s() at %s:%d: %s", "IsRcp", v29, 553, v27);
    handle_daemon_exit();
    exit(3);
  }
  return v38 & 1;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsRcp(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RestoreDatasetFromNcp(ot::Instance *a1)
{
  int v1 = ot::Instance::Get(a1);
  int v2 = (ot::SettingsDriver *)ot::Instance::Get<ot::SettingsDriver>((uint64_t)v1);
  ot::SettingsDriver::Init(v2, 0, 0);
  otLogInfoPlat("Trying to get saved dataset from NCP", v3, v4, v5, v6, v7, v8, v9, v24);
  uint64_t v15 = (ot::Instance *)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get((uint64_t)a1, 5400, (uint64_t)".", v10, v11, v12, v13, v14, (uint64_t)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ThreadDatasetHandler);
  unsigned int v26 = v15;
  if (!v15)
  {
    uint64_t v15 = (ot::Instance *)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get((uint64_t)a1, 5401, (uint64_t)".", v16, v17, v18, v19, v20, (uint64_t)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ThreadDatasetHandler);
    unsigned int v26 = v15;
  }
  uint64_t v21 = ot::Instance::Get(v15);
  uint64_t v22 = (ot::SettingsDriver *)ot::Instance::Get<ot::SettingsDriver>((uint64_t)v21);
  ot::SettingsDriver::Deinit(v22);
  return v26;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RestoreDatasetFromNcp(a1);
}

char *strrchr[abi:nn180100](char *a1, int a2)
{
  return strrchr(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRcpApiVersion(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = a1;
  char v20 = a2 & 1;
  char v19 = a3 & 1;
  unsigned int v18 = 0;
  if (a2)
  {
    unsigned int v17 = 0;
    unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 176, (uint64_t)"i", a4, a5, a6, a7, a8, (uint64_t)&v17);
    if (v18) {
      return v18;
    }
    if (v17 < 4)
    {
      otLogCritPlat("RCP and host are using incompatible API versions");
      otLogCritPlat("RCP API Version %u is older than min required by host %u", v17, 4);
      uint64_t v16 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v16) {
        uint64_t v12 = v16 + 1;
      }
      else {
        uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v8 = otExitCodeToString(3u);
      otLogCritPlat("%s() at %s:%d: %s", "CheckRcpApiVersion", v12, 619, v8);
      handle_daemon_exit();
      exit(3);
    }
  }
  if (v19)
  {
    unsigned int v15 = 0;
    unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 177, (uint64_t)"i", a4, a5, a6, a7, a8, (uint64_t)&v15);
    if (!v18 && v15 > 0xA)
    {
      otLogCritPlat("RCP and host are using incompatible API versions");
      otLogCritPlat("RCP requires min host API version %u but host is older and at version %u", v15, 10);
      uint64_t v14 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v14) {
        uint64_t v11 = v14 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v9 = otExitCodeToString(3u);
      otLogCritPlat("%s() at %s:%d: %s", "CheckRcpApiVersion", v11, 639, v9);
      handle_daemon_exit();
      exit(3);
    }
  }
  return v18;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRcpApiVersion(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRadioCapabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a1;
  uint64_t v19 = a1;
  char v24 = 109;
  unsigned int v23 = 0;
  int v22 = 0;
  unsigned int v23 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4619, (uint64_t)"i", a4, a5, a6, a7, a8, (uint64_t)&v22);
  if (!v23)
  {
    uint64_t v8 = v19;
    *(unsigned char *)(v19 + 9180) = v22;
    if ((*(unsigned char *)(v8 + 9180) & 0x6D) != 0x6D)
    {
      char v21 = 0;
      char v21 = *(unsigned char *)(v19 + 9180) & 0x6D ^ 0x6D;
      if (v21) {
        uint64_t v9 = "ack-timeout ";
      }
      else {
        uint64_t v9 = "";
      }
      if ((v21 & 4) != 0) {
        uint64_t v10 = "tx-retries ";
      }
      else {
        uint64_t v10 = "";
      }
      if ((v21 & 8) != 0) {
        uint64_t v11 = "CSMA-backoff ";
      }
      else {
        uint64_t v11 = "";
      }
      if ((v21 & 0x20) != 0) {
        uint64_t v12 = "tx-security ";
      }
      else {
        uint64_t v12 = "";
      }
      uint64_t v13 = "tx-timing ";
      if ((v21 & 0x40) == 0) {
        uint64_t v13 = "";
      }
      otLogCritPlat("RCP is missing required capabilities: %s%s%s%s%s", v9, v10, v11, v12, v13);
      char v20 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v20) {
        unsigned int v18 = v20 + 1;
      }
      else {
        unsigned int v18 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v16 = v18;
      int v17 = 3;
      uint64_t v14 = otExitCodeToString(3u);
      otLogCritPlat("%s() at %s:%d: %s", "CheckRadioCapabilities", v18, 589, v14);
      handle_daemon_exit();
      exit(v17);
    }
  }
  return v23;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CheckRadioCapabilities(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Deinit(uint64_t a1)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioSpinel(a1);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Deinit(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsPromiscuous(uint64_t a1)
{
  return *(unsigned char *)(a1 + 9332) & 1;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsPromiscuous(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuous(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11 = a2 & 1;
  unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 56, "C", a4, a5, a6, a7, a8, (a2 & 1) != 0);
  if (!v10) {
    *(unsigned char *)(a1 + 9332) = *(unsigned char *)(a1 + 9332) & 0xFE | v11 & 1;
  }
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuous(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v20 = a2;
  if (pciNotOpen(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 8548)) {
      __assert_rtn("Set", "radio_spinel_impl.hpp", 2447, "mWaitingTid == 0");
    }
    do
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v9, v10, v11, v12, v13, v14, v15);
      *(void *)(a1 + 8568) = &a9;
      unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandV(a1, 6, 3, v20, a3, *(char ***)(a1 + 8568));
    }
    while ((*(_WORD *)(a1 + 10044) & 0x40) != 0);
    return v18;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetShortAddress(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = 0;
  if (*(unsigned __int16 *)(a1 + 9176) != a2)
  {
    unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 53, "S", a4, a5, a6, a7, a8, a2);
    if (!v10) {
      *(_WORD *)(a1 + 9176) = a2;
    }
  }
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetShortAddress(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetIeeeEui64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a1;
  unsigned int v26 = a2;
  uint64_t v29 = 0;
  unsigned int v25 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15494, (uint64_t)"E", a4, a5, a6, a7, a8, (uint64_t)&v29);
  v24[9] = v24;
  v24[1] = BYTE1(v29);
  v24[2] = BYTE2(v29);
  v24[3] = BYTE3(v29);
  v24[4] = BYTE4(v29);
  v24[5] = BYTE5(v29);
  v24[6] = BYTE6(v29);
  v24[7] = HIBYTE(v29);
  otLogWarnPlat("GetIeeeEui64 RCP2=%x%x%x%x%x%x%x%x", v8, v9, v10, v11, v12, v13, v14, v29);
  if (v25)
  {
    char v15 = otThreadErrorToString(v25);
    otLogWarnPlat("GetIeeeEui64 RCP2: %s", v16, v17, v18, v19, v20, v21, v22, v15);
    return v25;
  }
  else
  {
    *unsigned int v26 = v29;
    return 0;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetIeeeEui64(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetExtendedAddress(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 52, "E", a4, a5, a6, a7, a8, (uint64_t)a2);
  if (v18)
  {
    char v8 = otThreadErrorToString(v18);
    otLogWarnPlat("SetExtendedAddress: %s", v9, v10, v11, v12, v13, v14, v15, v8);
  }
  else
  {
    *(void *)(a1 + 9168) = *a2;
  }
  return v18;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetExtendedAddress(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPanId(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = 0;
  if (*(unsigned __int16 *)(a1 + 9178) != a2)
  {
    unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 54, "S", a4, a5, a6, a7, a8, a2);
    if (!v10) {
      *(_WORD *)(a1 + 9178) = a2;
    }
  }
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPanId(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTransmitPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 37, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get transmit power failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTransmitPower(a1, a2, a3, a4, a5, a6, a7, a8);
}

void ot::Spinel::LogIfFail(char a1, int a2)
{
  if (a2)
  {
    if (a2 != 14)
    {
      otThreadErrorToString(a2);
      otLogWarnPlat("%s: %s", v2, v3, v4, v5, v6, v7, v8, a1);
    }
  }
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTransmitPower(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 37, "c", a4, a5, a6, a7, a8, a2);
  if (!v10)
  {
    *(unsigned char *)(a1 + 10037) = a2;
    *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFFF7 | 8;
  }
  ot::Spinel::LogIfFail((char)"Set transmit power failed", v10);
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTransmitPower(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRcpLogLevel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 16385, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set RCP Log Level failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRcpLogLevel(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMinInterframeDelay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2000016, (uint64_t)"L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get min interframe delay", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMinInterframeDelay(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMinInterframeDelay(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2000016, "L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set Interframe delay failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMinInterframeDelay(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCcaEnergyDetectThreshold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 36, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get CCA ED threshold failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCcaEnergyDetectThreshold(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCcaEnergyDetectThreshold(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 36, "c", a4, a5, a6, a7, a8, a2);
  if (!v10)
  {
    *(unsigned char *)(a1 + 10036) = a2;
    *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFFFB | 4;
  }
  ot::Spinel::LogIfFail((char)"Set CCA ED threshold failed", v10);
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCcaEnergyDetectThreshold(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPcapEnable(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 40, "b", a4, a5, a6, a7, a8, a2 & 1);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPcapEnable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetPcapEnable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1;
  char v10 = 0;
  int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 40, (uint64_t)"b", a4, a5, a6, a7, a8, (uint64_t)&v10);
  ot::Spinel::LogIfFail((char)"Get Pcap Enable failed", v9);
  return v10 & 1;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetPcapEnable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRssiOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2000001, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get RSSI offset failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRssiOffset(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRssiOffset(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2000001, "c", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set RSSI offset failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRssiOffset(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuousEnable(uint64_t a1)
{
  unsigned __int8 Channel = otLinkGetChannel(*(void *)(a1 + 216));
  unsigned int v29 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 32, "b", v1, v2, v3, v4, v5, 1);
  if (!v29)
  {
    unsigned int v29 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 40, "b", v6, v7, v8, v9, v10, 1);
    if (!v29)
    {
      unsigned int v29 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 55, "b", v11, v12, v13, v14, v15, 1);
      if (!v29)
      {
        unsigned int v29 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 56, "C", v16, v17, v18, v19, v20, 2);
        if (!v29) {
          return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 33, "C", v21, v22, v23, v24, v25, Channel);
        }
      }
    }
  }
  return v29;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuousEnable(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuousDisable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v15 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 56, "C", a4, a5, a6, a7, a8, 0);
  if (!v15) {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 40, "b", v8, v9, v10, v11, v12, 0);
  }
  return v15;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuousDisable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetFemLnaGain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 42, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get FEM LNA gain failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetFemLnaGain(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFemLnaGain(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 42, "c", a4, a5, a6, a7, a8, a2);
  if (!v10)
  {
    *(unsigned char *)(a1 + 10038) = a2;
    *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFFDF | 0x20;
  }
  ot::Spinel::LogIfFail((char)"Set FEM LNA gain failed", v10);
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFemLnaGain(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVersion(uint64_t a1)
{
  return a1 + 9192;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVersion(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioCaps(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9180);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioCaps(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRssi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1;
  char v10 = 127;
  int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 38, (uint64_t)"c", a4, a5, a6, a7, a8, (uint64_t)&v10);
  ot::Spinel::LogIfFail((char)"Get RSSI failed", v9);
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRssi(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetReceiveSensitivity(uint64_t a1)
{
  return *(char *)(a1 + 9184);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetReceiveSensitivity(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetState(uint64_t a1)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetState(void)const::sOtRadioStateMap[*(unsigned int *)(a1 + 9328)];
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetState(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetChannel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9181);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetChannel(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCoexEnabled(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11 = a2 & 1;
  unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4621, "b", a4, a5, a6, a7, a8, a2 & 1);
  if (!v10)
  {
    *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFFFE | v11 & 1;
    *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFFEF | 0x10;
  }
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCoexEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsCoexEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1;
  char v10 = 0;
  int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4621, (uint64_t)"b", a4, a5, a6, a7, a8, (uint64_t)&v10);
  ot::Spinel::LogIfFail((char)"Get Coex State failed", v9);
  return v10 & 1;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsCoexEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCoexMetrics(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4620, (uint64_t)"t(LLLLLLLL)t(LLLLLLLLL)bL", a2 + 32, a2 + 28, a2 + 24, a2 + 20, a2 + 16, a2 + 4);
  ot::Spinel::LogIfFail((char)"Get Coex Metrics failed", v3);
  return v3;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCoexMetrics(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTransmitFrame(uint64_t a1)
{
  return a1 + 9032;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTransmitFrame(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableSrcMatch(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4867, "b", a4, a5, a6, a7, a8, a2 & 1);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableSrcMatch(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddSrcMatchShortEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(a1, 4868, "S", a4, a5, a6, a7, a8, a2);
  if (!v11)
  {
    if (*(__int16 *)(a1 + 9516) >= 64) {
      __assert_rtn("AddSrcMatchShortEntry", "radio_spinel_impl.hpp", 2014, "mSrcMatchShortEntryCount < OPENTHREAD_CONFIG_MLE_MAX_CHILDREN");
    }
    for (int i = 0; i < *(__int16 *)(a1 + 9516); ++i)
    {
      if (*(unsigned __int16 *)(a1 + 9388 + 2 * i) == a2) {
        return v11;
      }
    }
    *(_WORD *)(a1 + 9388 + 2 * (__int16)(*(_WORD *)(a1 + 9516))++) = a2;
  }
  return v11;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddSrcMatchShortEntry(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v13 = a2;
  if (pciNotOpen(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 8548)) {
      __assert_rtn("Insert", "radio_spinel_impl.hpp", 2512, "mWaitingTid == 0");
    }
    do
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1);
      *(void *)(a1 + 8568) = &a9;
      unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandV(a1, 7, 4, v13, a3, *(char ***)(a1 + 8568));
    }
    while ((*(_WORD *)(a1 + 10044) & 0x40) != 0);
    return v11;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Remove(a1, 4868, "S", a4, a5, a6, a7, a8, a2);
  if (!v11)
  {
    for (int i = 0; i < *(__int16 *)(a1 + 9516); ++i)
    {
      if (*(unsigned __int16 *)(a1 + 9388 + 2 * i) == a2)
      {
        *(_WORD *)(a1 + 9388 + 2 * i) = *(_WORD *)(a1 + 9388 + 2 * ((__int16)(*(_WORD *)(a1 + 9516))-- - 1));
        return v11;
      }
    }
  }
  return v11;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntry(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Remove(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v20 = a2;
  if (pciNotOpen(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 8548)) {
      __assert_rtn("Remove", "radio_spinel_impl.hpp", 2540, "mWaitingTid == 0");
    }
    do
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v9, v10, v11, v12, v13, v14, v15);
      *(void *)(a1 + 8568) = &a9;
      unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandV(a1, 8, 5, v20, a3, *(char ***)(a1 + 8568));
    }
    while ((*(_WORD *)(a1 + 10044) & 0x40) != 0);
    return v18;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Remove(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4868, 0, a4, a5, a6, a7, a8, v9);
  if (!v11) {
    *(_WORD *)(a1 + 9516) = 0;
  }
  return v11;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntries(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddSrcMatchExtEntry(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(a1, 4869, "E", a4, a5, a6, a7, a8, (uint64_t)a2);
  if (!v11)
  {
    if (*(__int16 *)(a1 + 10030) >= 64) {
      __assert_rtn("AddSrcMatchExtEntry", "radio_spinel_impl.hpp", 2040, "mSrcMatchExtEntryCount < OPENTHREAD_CONFIG_MLE_MAX_CHILDREN");
    }
    for (int i = 0; i < *(__int16 *)(a1 + 10030); ++i)
    {
      if (!memcmp(a2, (const void *)(a1 + 9518 + 8 * i), 8uLL)) {
        return v11;
      }
    }
    *(void *)(a1 + 9518 + 8 * (__int16)(*(_WORD *)(a1 + 10030))++) = *a2;
  }
  return v11;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddSrcMatchExtEntry(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntry(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Remove(a1, 4869, "E", a4, a5, a6, a7, a8, (uint64_t)a2);
  if (!v11)
  {
    for (int i = 0; i < *(__int16 *)(a1 + 10030); ++i)
    {
      if (!memcmp((const void *)(a1 + 9518 + 8 * i), a2, 8uLL))
      {
        *(void *)(a1 + 9518 + 8 * i) = *(void *)(a1 + 9518 + 8 * ((__int16)(*(_WORD *)(a1 + 10030))-- - 1));
        return v11;
      }
    }
  }
  return v11;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntry(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4869, 0, a4, a5, a6, a7, a8, v9);
  if (!v11) {
    *(_WORD *)(a1 + 10030) = 0;
  }
  return v11;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntries(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnergyScan(uint64_t a1, char a2, __int16 a3)
{
  if ((*(unsigned char *)(a1 + 9180) & 2) != 0)
  {
    *(unsigned char *)(a1 + 10032) = a2;
    *(_WORD *)(a1 + 10034) = a3;
    *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFF7F | 0x80;
    unsigned int v5 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 49, "D");
    if (!v5)
    {
      unsigned int v5 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 50, "S");
      if (!v5)
      {
        unsigned int v5 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 48, "C");
        if (!v5) {
          *(unsigned char *)(a1 + 9181) = a2;
        }
      }
    }
  }
  else
  {
    return 27;
  }
  return v5;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnergyScan(a1, a2, a3);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Transmit(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v25 = a2;
  uint64_t v23 = a1;
  unsigned int v24 = 13;
  if (*(_DWORD *)(a1 + 9328) == 2 || *(_DWORD *)(v23 + 9328) == 1 && (*(unsigned char *)(v23 + 9180) & 0x10) != 0)
  {
    uint64_t v2 = v23;
    *(void *)(v23 + 9160) = v25;
    otPlatRadioTxStarted(*(void *)(v2 + 216), *(ot::Mac::TxFrame **)(v2 + 9160));
    unsigned int v3 = **(char ***)(v23 + 9160);
    uint64_t v4 = *(unsigned __int16 *)(*(void *)(v23 + 9160) + 8);
    uint64_t v5 = *(unsigned __int8 *)(*(void *)(v23 + 9160) + 10);
    uint64_t v6 = *(unsigned __int8 *)(*(void *)(v23 + 9160) + 40);
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v23 + 9160) + 41);
    int v8 = (*(unsigned __int8 *)(*(void *)(v23 + 9160) + 45) >> 2) & 1;
    char v9 = *(unsigned char *)(*(void *)(v23 + 9160) + 45) & 1;
    int v10 = (*(unsigned __int8 *)(*(void *)(v23 + 9160) + 45) >> 1) & 1;
    int v11 = (*(unsigned __int8 *)(*(void *)(v23 + 9160) + 45) >> 4) & 1;
    uint64_t v12 = *(unsigned int *)(*(void *)(v23 + 9160) + 32);
    uint64_t v13 = *(unsigned int *)(*(void *)(v23 + 9160) + 36);
    uint64_t v14 = *(unsigned __int8 *)(*(void *)(v23 + 9160) + 44);
    v22[13] = v22;
    v22[1] = v4;
    v22[2] = v5;
    v22[3] = v6;
    v22[4] = v7;
    v22[5] = v8 & 1;
    v22[6] = v9 & 1;
    v22[7] = v10 & 1;
    v22[8] = v11 & 1;
    v22[9] = v12;
    unsigned char v22[10] = v13;
    v22[11] = v14;
    unsigned int v24 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Request(v23, 3, 113, "dCCCbbbbLLC", v15, v16, v17, v18, v3);
    if (!v24)
    {
      *(_DWORD *)(v23 + 9328) = 3;
      unint64_t v19 = otPlatTimeGet();
      uint64_t v20 = v23;
      *(void *)(v23 + 10064) = v19 + 10000000 * (*(unsigned __int8 *)(*(void *)(v23 + 9160) + 41) / 16 + 1);
      *(unsigned char *)(v20 + 9181) = *(unsigned char *)(*(void *)(v20 + 9160) + 10);
    }
  }
  return v24;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Transmit(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Request(uint64_t a1, int a2, int a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestV(a1, a2, a3, a4, &a9);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Request(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Receive(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v13 = 0;
  if (*(_DWORD *)(a1 + 9328))
  {
    if (*(unsigned __int8 *)(a1 + 9181) != a2 || (*(unsigned char *)(a1 + 9182) & 1) == 1)
    {
      unsigned int v13 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 33, "C", a4, a5, a6, a7, a8, a2);
      if (v13) {
        return v13;
      }
      *(unsigned char *)(a1 + 9181) = a2;
      if ((*(unsigned char *)(a1 + 9182) & 1) == 1)
      {
        *(unsigned char *)(a1 + 9182) = 0;
        otLogNotePlat("First SPINEL_PROP_PHY_CHAN", v8, v9, a4, a5, a6, a7, a8, v11);
      }
    }
    if (*(_DWORD *)(a1 + 9328) != 1
      || (unsigned int v13 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 55, "b", a4, a5, a6, a7, a8, 1)) == 0)
    {
      if (*(unsigned char *)(a1 + 8547))
      {
        ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FreeTid(a1, *(unsigned char *)(a1 + 8547));
        *(unsigned char *)(a1 + 8547) = 0;
      }
      *(_DWORD *)(a1 + 9328) = 2;
    }
  }
  else
  {
    return 13;
  }
  return v13;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Receive(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FreeTid(uint64_t result, char a2)
{
  *(_WORD *)(result + 8544) &= ~(unsigned __int16)(1 << a2);
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FreeTid(result, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Sleep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = 0;
  if (!gPciStatus)
  {
    int v9 = *(_DWORD *)(a1 + 9328);
    if (v9 != 1)
    {
      if (v9 == 2)
      {
        unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 55, "b", a4, a5, a6, a7, a8, 0);
        if (!v11) {
          *(_DWORD *)(a1 + 9328) = 1;
        }
      }
      else
      {
        return 13;
      }
    }
  }
  return v11;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Sleep(a1, a2, a3, a4, a5, a6, a7, a8);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FreeTransmitTid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 8547))
  {
    otLogInfoPlat("Freed Transmit Tid %d", a2, a3, a4, a5, a6, a7, a8, *(unsigned char *)(a1 + 8547));
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FreeTid(a1, *(unsigned char *)(a1 + 8547));
    *(unsigned char *)(a1 + 8547) = 0;
    *(_DWORD *)(a1 + 9328) = 2;
    *(void *)(a1 + 10064) = -1;
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::TransmitDone(a1, *(ot::Mac::TxFrame **)(a1 + 9160), 0, 0xBu);
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FreeTransmitTid(a1, a2, a3, a4, a5, a6, a7, a8);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::TransmitDone(uint64_t a1, ot::Mac::TxFrame *a2, ot::Mac::RxFrame *a3, unsigned int a4)
{
  if (otPlatDiagModeGet()) {
    otPlatDiagRadioTransmitDone(*(void *)(a1 + 216), (uint64_t)a2, a4);
  }
  else {
    otPlatRadioTxDone(*(void *)(a1 + 216), a2, a3, a4);
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::TransmitDone(a1, a2, a3, a4);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LoadPTB(uint64_t a1)
{
  memset(__b, 0, sizeof(__b));
  getFilePathFromDirectory(__b, "/usr/share/firmware/wpan/", ".ptb", 0xC8u);
  if (!__b[0])
  {
    otLogWarnPlat("RadioSpinel LoadPTB: file not found", v1, v2, v3, v4, v5, v6, v7, v24);
    ptb_bandedge_captureABC_Failure(0);
  }
  if (__b[0])
  {
    if ((unsigned __int16)readFromFilePTB(__b, v28, 0x514u))
    {
      unsigned int v26 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15534, "d", v10, v11, v12, v13, v14, (uint64_t)v28);
      if (v26)
      {
        char v15 = otThreadErrorToString(v26);
        otLogWarnPlat("RadioSpinel LoadPTB:Set Spinel property:SPINEL_PROP_VENDOR_POWER_TABLE error=%s", v16, v17, v18, v19, v20, v21, v22, v15);
        ptb_bandedge_captureABC_Failure(2);
      }
    }
    else
    {
      otLogWarnPlat("RadioSpinel LoadPTB: file %s empty", v8, v9, v10, v11, v12, v13, v14, (char)__b);
      ptb_bandedge_captureABC_Failure(1);
      return 6;
    }
  }
  else
  {
    return 7;
  }
  return v26;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LoadPTB(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::resetRCP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v17 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendReset(a1, 2, a3, a4, a5, a6, a7, a8);
  if (!v17) {
    otLogDebgPlat("RadioSpinel Reset RCP", v8, v9, v10, v11, v12, v13, v14, v16);
  }
  return v17;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::resetRCP(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendReset(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v17 = spinel_datatype_pack((BOOL *)v20, 0x514u, "CiC", a4, a5, a6, a7, a8, 128);
  if (v17 > 0 && (unint64_t)v17 <= 0x514)
  {
    otLogNotePlat("[->RCP] PROP_VALUE_SET(RESET) Type(%d)", v8, v9, v10, v11, v12, v13, v14, a2);
    unsigned int v18 = ot::Posix::HdlcInterface::SendFrame((ot::Posix::HdlcInterface *)(a1 + 8448), v20);
    if (!v18) {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LogSpinelFrame(a1, (uint64_t)v20, v17, 1);
    }
  }
  else
  {
    return 3;
  }
  return v18;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendReset(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Enable(uint64_t a1, uint64_t a2)
{
  uint64_t v84 = a1;
  uint64_t v83 = a2;
  uint64_t v79 = a1;
  unsigned int PTB = 0;
  char v81 = 0;
  if (!ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsEnabled(a1))
  {
    *(void *)(v79 + 216) = v83;
    otLogNotePlat("RadioSpinel::Enable SIZEOF : sz_Instance[0x%lx]", v2, v3, v4, v5, v6, v7, v8, 48);
    if (!isSupportedPlatform())
    {
      otLogWarnPlat("Unsupported Platform: Daemon Exiting", v9, v10, v11, v12, v13, v14, v15, v75);
      v80 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v80) {
        int v78 = v80 + 1;
      }
      else {
        int v78 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      unsigned __int8 v76 = v78;
      int v77 = 1;
      char v16 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "Enable", v78, 3329, v16);
      handle_daemon_exit();
      exit(v77);
    }
    unsigned int PTB = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LoadPTB(v79);
    if (PTB)
    {
      char v22 = otThreadErrorToString(PTB);
      otLogWarnPlat("RadioSpinel LoadPTB failed : %s", v23, v24, v25, v26, v27, v28, v29, v22);
    }
    unsigned int PTB = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(v79, 15535, (uint64_t)"b", v17, v18, v19, v20, v21, (uint64_t)&v81);
    if (PTB)
    {
      char v43 = otThreadErrorToString(PTB);
      otLogDebgPlat("Failed to read MSF Load status: %s", v44, v45, v46, v47, v48, v49, v50, v43);
    }
    else
    {
      uint64_t v37 = "Success";
      if ((v81 & 1) == 0) {
        uint64_t v37 = "Fail";
      }
      otLogDebgPlat("MSF File Load status in RCP2 =%s", v30, v31, v32, v33, v34, v35, v36, (char)v37);
    }
    unsigned int PTB = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v79, 32, "b", v38, v39, v40, v41, v42, 1);
    if (!PTB)
    {
      unsigned int PTB = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v79, 54, "S", v51, v52, v53, v54, v55, *(unsigned __int16 *)(v79 + 9178));
      if (!PTB)
      {
        unsigned int PTB = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v79, 53, "S", v56, v57, v58, v59, v60, *(unsigned __int16 *)(v79 + 9176));
        if (!PTB)
        {
          unsigned int PTB = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(v79, 39, (uint64_t)"c", v61, v62, v63, v64, v65, v79 + 9184);
          if (!PTB) {
            *(_DWORD *)(v79 + 9328) = 1;
          }
        }
      }
    }
  }
  if (PTB)
  {
    char v66 = otThreadErrorToString(PTB);
    otLogWarnPlat("RadioSpinel enable: %s", v67, v68, v69, v70, v71, v72, v73, v66);
    return 1;
  }
  return PTB;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Enable(a1, a2);
}

BOOL ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsEnabled(uint64_t a1)
{
  return *(_DWORD *)(a1 + 9328) != 0;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsEnabled(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Disable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v30 = 0;
  if (pciNotOpen(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsEnabled(a1))
    {
      if (*(_DWORD *)(a1 + 9328) == 1)
      {
        if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 32, "b", v8, v9, v10, v11, v12, 0))
        {
          uint64_t v29 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
          if (v29) {
            uint64_t v27 = v29 + 1;
          }
          else {
            uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
          }
          if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 32, "b", v13, v14, v15, v16, v17, 0) == 7)unsigned __int8 v18 = 2; {
          else
          }
            unsigned __int8 v18 = 1;
          uint64_t v19 = otExitCodeToString(v18);
          otLogCritPlat("%s() at %s:%d: %s", "Disable", v27, 3379, v19);
          handle_daemon_exit();
          if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 32, "b", v20, v21, v22, v23, v24, 0) == 7)int v25 = 2; {
          else
          }
            int v25 = 1;
          exit(v25);
        }
        *(_DWORD *)(a1 + 9328) = 0;
        *(void *)(a1 + 216) = 0;
      }
      else
      {
        return 13;
      }
    }
    return v30;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Disable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t pciNotOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gPciStatus)
  {
    otLogWarnPlat("exit Spinel.Process due to PCI failure gPciStatus =%d \n", a2, a3, a4, a5, a6, a7, a8, gPciStatus);
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

{
  return pciNotOpen(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsTransmitting(uint64_t a1)
{
  return *(_DWORD *)(a1 + 9328) == 3;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsTransmitting(a1);
}

BOOL ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsTransmitDone(uint64_t a1)
{
  return *(_DWORD *)(a1 + 9328) == 4;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsTransmitDone(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTxRadioEndUs(uint64_t a1)
{
  return *(void *)(a1 + 10064);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTxRadioEndUs(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessSkywalkState(a1, a2, a3, a4, a5, a6, a7, a8);
  if (ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::HasSavedFrame(a1 + 224))
  {
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessFrameQueue(a1);
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v8, v9, v10, v11, v12, v13, v14);
  }
  uint64_t SpinelInterface = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetSpinelInterface(a1);
  ot::Posix::HdlcInterface::Process(SpinelInterface, a2);
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v16, v17, v18, v19, v20, v21, v22);
  if (ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::HasSavedFrame(a1 + 224))
  {
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessFrameQueue(a1);
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v23, v24, v25, v26, v27, v28, v29);
  }
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessRadioStateMachine(a1);
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v30, v31, v32, v33, v34, v35, v36);
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CalcRcpTimeOffset(a1, v37, v38, v39, v40, v41, v42, v43);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Process(a1, a2, a3, a4, a5, a6, a7, a8);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessSkywalkState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!gPciStatus
    || (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessSkywalkState(void)::spinelOnHold & 1) != 0)
  {
    if (gPciStatus
      || (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessSkywalkState(void)::spinelOnHold & 1) != 1)
    {
      if (gPciStatus)
      {
        otLogWarnPlat("exit Spinel.Process due to PCI failure gPciStatus =%d \n", a2, a3, a4, a5, a6, a7, a8, gPciStatus);
        ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::ClearSavedFrames((char *)(a1 + 224));
      }
    }
    else
    {
      if (!*(void *)(a1 + 216))
      {
        otLogNotePlat("[HandleTransportError Instance is null\n", a2, a3, a4, a5, a6, a7, a8, v30);
        uint64_t v35 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
        if (v35) {
          uint64_t v33 = v35 + 1;
        }
        else {
          uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
        }
        uint64_t v29 = otExitCodeToString(4u);
        otLogCritPlat("%s() at %s:%d: %s", "ProcessSkywalkState", v33, 1812, v29);
        handle_daemon_exit();
        exit(4);
      }
      otLogNotePlat("[HandleTransportError OT UP\n", a2, a3, a4, a5, a6, a7, a8, v30);
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessSkywalkState(void)::spinelOnHold = 0;
    }
  }
  else
  {
    *(_WORD *)(a1 + 8544) = 0;
    *(unsigned char *)(a1 + 8546) = 1;
    *(unsigned char *)(a1 + 8547) = 0;
    *(unsigned char *)(a1 + 8548) = 0;
    *(_DWORD *)(a1 + 8552) = 0;
    *(_DWORD *)(a1 + 8580) = 0;
    *(unsigned char *)(a1 + 9333) = 0;
    *(unsigned char *)(a1 + 9335) &= ~1u;
    if (*(void *)(a1 + 216))
    {
      otThreadSetEnabled(*(void *)(a1 + 216), 0);
      otLogNotePlat("Thread stop, Done", v8, v9, v10, v11, v12, v13, v14, v30);
      otIp6SetEnabled(*(void *)(a1 + 216), 0);
      otLogNotePlat("Ifconfig down, Done", v15, v16, v17, v18, v19, v20, v21, v31);
      otLinkSetEnabled(*(void *)(a1 + 216), 0);
      otLogNotePlat("[HandleTransportError OT Down\n", v22, v23, v24, v25, v26, v27, v28, v32);
    }
    else
    {
      otLogNotePlat("[HandleTransportError OT Down Instance Null\n", a2, a3, a4, a5, a6, a7, a8, v30);
    }
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessSkywalkState(void)::spinelOnHold = 1;
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessSkywalkState(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::HasSavedFrame(uint64_t a1)
{
  return *(void *)(a1 + 8208) != a1 + 10;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::HasSavedFrame(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessFrameQueue(uint64_t a1)
{
  v15[1] = (unsigned __int8 *)a1;
  v15[0] = 0;
  unsigned __int16 v14 = 0;
  ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::markReset(a1 + 224, 0);
  while (!ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetNextSavedFrame(a1 + 224, (uint64_t *)v15, &v14))ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleNotification(a1, v15[0], v14, v1, v2, v3, v4, v5);
  if ((ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::getReset(a1 + 224) & 1) == 1)
  {
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::markReset(a1 + 224, 0);
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::Clear(a1 + 224);
    otLogNotePlat("[ProcessFrameQueue] Interrupted by Reset.\n", v6, v7, v8, v9, v10, v11, v12, a1);
  }
  else if (ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::noSpaceLeft(a1 + 224))
  {
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::Clear(a1 + 224);
  }
  else
  {
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::ClearSavedFrames((char *)(a1 + 224));
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessFrameQueue(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v110 = a1;
  uint64_t v102 = a1;
  __int16 v109 = 3;
  unsigned int v108 = 0;
  unsigned int v108 = *(_DWORD *)(a1 + 9328);
  if ((*(_WORD *)(a1 + 10044) & 0x40) != 0)
  {
    uint64_t v8 = v102;
    *(_WORD *)(v102 + 10044) &= ~0x40u;
    int v9 = *(_DWORD *)(v8 + 9328);
    uint64_t v10 = *(unsigned __int8 *)(v8 + 8547);
    uint64_t v11 = *(unsigned __int8 *)(v8 + 8548);
    uint64_t v12 = *(unsigned int *)(v8 + 8580);
    uint64_t v13 = *(unsigned int *)(v8 + 8552);
    uint64_t v14 = *(unsigned __int16 *)(v8 + 8544);
    uint64_t v15 = *(unsigned __int8 *)(v8 + 8546);
    uint64_t v16 = *(unsigned __int8 *)(v8 + 10046);
    v100 = &v64;
    uint64_t v65 = v10;
    uint64_t v66 = v11;
    uint64_t v67 = v12;
    uint64_t v68 = v13;
    uint64_t v69 = v14;
    uint64_t v70 = v15;
    uint64_t v71 = v16;
    otLogWarnPlat("RCP failure detected: mState=%d, mTxRadioTid=%d, mWaitingTid=%d, mError=%d, mWaitingKey=%d, mCmdTidsInUse=%d, mCmdNextTid=%d, mHardResetTest=%d", a2, a3, a4, a5, a6, a7, a8, v9);
    uint64_t v17 = v102;
    ++*(_DWORD *)(v102 + 10112);
    uint64_t v101 = 9336;
    ++*(_WORD *)(v17 + 9336);
    int v18 = (*(unsigned __int8 *)(v17 + 9335) >> 1) & 1;
    LOWORD(v64) = *(_WORD *)(v17 + 9336);
    uint64_t v65 = 3;
    uint64_t v66 = v18 & 1;
    otLogWarnPlat("Trying to recover (%d/%d), mResetRadioOnStartup is %d", v19, v20, v21, v22, v23, v24, v25, v64);
    if (*(_WORD *)(v102 + v101) == 2)
    {
      otLogCritPlat("Soft reset is not taking effect, try hard reset");
      *(unsigned char *)(v102 + 10046) = 0;
      rcp_hard_reset();
    }
    if (*(__int16 *)(v102 + 9336) > 3)
    {
      otLogCritPlat("Too many rcp failures, exiting");
      v107 = 0;
      v107 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v107) {
        v99 = v107 + 1;
      }
      else {
        v99 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      v97 = v99;
      int v98 = 1;
      uint64_t v26 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "RecoverFromRcpFailure", v97, 3599, v26);
      handle_daemon_exit();
      exit(v98);
    }
    uint64_t v27 = v102;
    int v96 = 0;
    *(_DWORD *)(v102 + 9328) = 0;
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::Clear(v27 + 224);
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::markReset(v102 + 224, 1);
    char v28 = v96;
    uint64_t v29 = v102;
    *(_WORD *)(v102 + 8544) = 0;
    *(unsigned char *)(v29 + 8546) = 1;
    *(unsigned char *)(v29 + 8547) = 0;
    *(unsigned char *)(v29 + 8548) = 0;
    *(_DWORD *)(v29 + 8580) = 0;
    *(unsigned char *)(v29 + 9335) = *(unsigned char *)(v29 + 9335) & 0xFE | v28;
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ResetRcp(v29, (*(unsigned __int8 *)(v29 + 9335) >> 1) & 1, v30, v31, v32, v33, v34, v35);
    uint64_t v64 = 1;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, 32, "b"))
    {
      v106 = 0;
      v106 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v106) {
        uint64_t v95 = v106 + 1;
      }
      else {
        uint64_t v95 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      char v90 = v95;
      uint64_t v91 = 1;
      uint64_t v64 = 1;
      unsigned int v92 = 32;
      char v93 = "b";
      BOOL v36 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, 32, "b") == 7;
      int v94 = 2;
      if (v36) {
        unsigned __int8 v37 = 2;
      }
      else {
        unsigned __int8 v37 = 1;
      }
      uint64_t v38 = otExitCodeToString(v37);
      otLogCritPlat("%s() at %s:%d: %s", "RecoverFromRcpFailure", v90, 3631, v38);
      handle_daemon_exit();
      uint64_t v64 = v91;
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, v92, v93) == 7) {
        int v39 = v94;
      }
      else {
        int v39 = 1;
      }
      exit(v39);
    }
    uint64_t v40 = v102;
    *(_DWORD *)(v102 + 9328) = 1;
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RestoreProperties(v40);
    uint64_t v89 = v108;
    if (v108)
    {
      uint64_t v49 = v108;
      char v48 = 1;
    }
    else
    {
      uint64_t v49 = 0;
      char v48 = 0;
    }
    if ((v48 & 1) == 0)
    {
      switch(v49)
      {
        case 0:
          *(_DWORD *)(v102 + 9328) = 0;
          break;
        case 1:
          break;
        case 2:
          uint64_t v64 = 1;
          if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, 55, "b"))
          {
            v105 = 0;
            v105 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
            if (v105) {
              unsigned __int8 v88 = v105 + 1;
            }
            else {
              unsigned __int8 v88 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
            }
            uint64_t v83 = v88;
            uint64_t v84 = 1;
            uint64_t v64 = 1;
            unsigned int v85 = 55;
            v86 = "b";
            BOOL v50 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, 55, "b") == 7;
            int v87 = 2;
            if (v50) {
              unsigned __int8 v51 = 2;
            }
            else {
              unsigned __int8 v51 = 1;
            }
            uint64_t v52 = otExitCodeToString(v51);
            otLogCritPlat("%s() at %s:%d: %s", "RecoverFromRcpFailure", v83, 3649, v52);
            handle_daemon_exit();
            uint64_t v64 = v84;
            if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, v85, v86) == 7)int v53 = v87; {
            else
            }
              int v53 = 1;
            exit(v53);
          }
          *(_DWORD *)(v102 + 9328) = 2;
          break;
        case 3:
        case 4:
          uint64_t v64 = 1;
          if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, 55, "b"))
          {
            v104 = 0;
            v104 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
            if (v104) {
              int v82 = v104 + 1;
            }
            else {
              int v82 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
            }
            int v77 = v82;
            uint64_t v78 = 1;
            uint64_t v64 = 1;
            unsigned int v79 = 55;
            v80 = "b";
            BOOL v54 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, 55, "b") == 7;
            int v81 = 2;
            if (v54) {
              unsigned __int8 v55 = 2;
            }
            else {
              unsigned __int8 v55 = 1;
            }
            uint64_t v56 = otExitCodeToString(v55);
            otLogCritPlat("%s() at %s:%d: %s", "RecoverFromRcpFailure", v77, 3654, v56);
            handle_daemon_exit();
            uint64_t v64 = v78;
            if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v102, v79, v80) == 7)int v57 = v81; {
            else
            }
              int v57 = 1;
            exit(v57);
          }
          uint64_t v58 = v102;
          *(_DWORD *)(v102 + 9188) = 11;
          *(_DWORD *)(v58 + 9328) = 4;
          break;
        default:
          JUMPOUT(0);
      }
    }
    if ((*(_WORD *)(v102 + 10044) & 0x80) != 0
      && ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnergyScan(v102, *(unsigned char *)(v102 + 10032), *(_WORD *)(v102 + 10034)))
    {
      v103 = 0;
      v103 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v103) {
        unsigned __int8 v76 = v103 + 1;
      }
      else {
        unsigned __int8 v76 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v72 = v76;
      uint64_t v73 = 10032;
      char v59 = *(unsigned char *)(v102 + 10032);
      uint64_t v74 = 10034;
      BOOL v60 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnergyScan(v102, v59, *(_WORD *)(v102 + 10034)) == 7;
      int v75 = 2;
      if (v60) {
        unsigned __int8 v61 = 2;
      }
      else {
        unsigned __int8 v61 = 1;
      }
      uint64_t v62 = otExitCodeToString(v61);
      otLogCritPlat("%s() at %s:%d: %s", "RecoverFromRcpFailure", v72, 3662, v62);
      handle_daemon_exit();
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnergyScan(v102, *(unsigned char *)(v102 + v73), *(_WORD *)(v102 + v74)) == 7)int v63 = v75; {
      else
      }
        int v63 = 1;
      exit(v63);
    }
    --*(_WORD *)(v102 + 9336);
    otLogNotePlat("RCP recovery is done", v41, v42, v43, v44, v45, v46, v47, v64);
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetSpinelInterface(uint64_t a1)
{
  return a1 + 8448;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetSpinelInterface(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessRadioStateMachine(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 9328) == 4)
  {
    *(_DWORD *)(a1 + 9328) = 2;
    *(void *)(a1 + 10064) = -1;
    if (*(_WORD *)(a1 + 9104)) {
      int v9 = (ot::Mac::RxFrame *)(a1 + 9096);
    }
    else {
      int v9 = 0;
    }
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::TransmitDone(a1, *(ot::Mac::TxFrame **)(a1 + 9160), v9, *(_DWORD *)(a1 + 9188));
  }
  else if (*(_DWORD *)(a1 + 9328) == 3 && otPlatTimeGet() >= *(void *)(a1 + 10064))
  {
    otLogWarnPlat("radio tx timeout", v1, v2, v3, v4, v5, v6, v7, v8);
    update_radio_tx_timeout_metric();
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ProcessRadioStateMachine(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CalcRcpTimeOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a1;
  if ((pciNotOpen(a1, a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    int v30 = 0;
    unint64_t v29 = 0;
    unint64_t v28 = 0;
    uint64_t v27 = 0;
    if ((*(unsigned char *)(a1 + 9335) & 1) == 0
      || (unint64_t v24 = otPlatTimeGet(),
          v24 >= ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextRadioTimeRecalcStart(a1)))
    {
      otLogDebgPlat("Trying to get RCP time offset", v8, v9, v10, v11, v12, v13, v14, v23);
      int v26 = spinel_datatype_pack((BOOL *)v32, 8u, "X", v15, v16, v17, v18, v19, v27);
      if (v26 > 0 && (unint64_t)v26 <= 8)
      {
        unint64_t v29 = otPlatTimeGet();
        int v30 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetWithParam(a1, 2050, v32, v26, (uint64_t)"X", v20, v21, v22, (uint64_t)&v27);
        unint64_t v28 = otPlatTimeGet();
        if (v30)
        {
          *(void *)(a1 + 10072) = v28;
        }
        else
        {
          *(void *)(a1 + 10080) = v27 - (v28 / 2 + v29 / 2);
          *(unsigned char *)(a1 + 9335) = *(unsigned char *)(a1 + 9335) & 0xFE | 1;
          *(void *)(a1 + 10072) = v28 + 60000000;
        }
      }
      else
      {
        int v30 = 3;
      }
    }
    ot::Spinel::LogIfFail((char)"Error calculating RCP time offset: %s", v30);
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CalcRcpTimeOffset(a1, a2, a3, a4, a5, a6, a7, a8);
}

char *ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::ClearSavedFrames(char *result)
{
  uint64_t v1 = result;
  unsigned __int16 v2 = *((void *)result + 1026) - ((_WORD)result + 10);
  if ((unsigned __int16)*((void *)result + 1026) != (_WORD)result + 10)
  {
    uint64_t result = (char *)memmove(result + 10, *((const void **)result + 1026), (unsigned __int16)(*(_WORD *)result - *((void *)result + 1026)));
    *(void *)v1 -= v2;
    *((void *)v1 + 1026) -= v2;
    *((_WORD *)v1 + 4) += v2;
  }
  return result;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::ClearSavedFrames(result);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetDiagEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 10047) = a2 & 1;
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetDiagEnabled(result, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsDiagEnabled(uint64_t a1)
{
  return *(unsigned char *)(a1 + 10047) & 1;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsDiagEnabled(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 10048) = a3;
  *(void *)(a1 + 10056) = a4;
  LODWORD(result) = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15296, "U", a4, a5, a6, a7, a8, a2);
  *(void *)(a1 + 10048) = 0;
  *(void *)(a1 + 10056) = 0;
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioChannelMask(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = a1;
  char v40 = a2 & 1;
  int v39 = 0;
  unsigned int v38 = 0;
  unsigned __int8 v37 = v42;
  unsigned int v36 = 32;
  if (a2) {
    uint64_t v8 = 41;
  }
  else {
    uint64_t v8 = 34;
  }
  if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, v8, (uint64_t)"D", a4, a5, a6, a7, a8, (uint64_t)v42))
  {
    uint64_t v35 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v35) {
      uint64_t v31 = v35 + 1;
    }
    else {
      uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    if (v40) {
      uint64_t v19 = 41;
    }
    else {
      uint64_t v19 = 34;
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, v19, (uint64_t)"D", v14, v15, v16, v17, v18, (uint64_t)v42) == 7)unsigned __int8 v20 = 2; {
    else
    }
      unsigned __int8 v20 = 1;
    uint64_t v21 = otExitCodeToString(v20);
    otLogCritPlat("%s() at %s:%d: %s", "GetRadioChannelMask", v31, 3417, v21);
    handle_daemon_exit();
    if (v40) {
      uint64_t v27 = 41;
    }
    else {
      uint64_t v27 = 34;
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, v27, (uint64_t)"D", v22, v23, v24, v25, v26, (uint64_t)v42) == 7)int v28 = 2; {
    else
    }
      int v28 = 1;
    exit(v28);
  }
  while (v36)
  {
    unsigned __int8 v34 = 0;
    int v33 = spinel_datatype_unpack(v37, v36, "C", v9, v10, v11, v12, v13, (uint64_t)&v34);
    if (v33 <= 0)
    {
      int v39 = 1;
      goto LABEL_28;
    }
    if (v34 >= 0x20u)
    {
      int v39 = 6;
      goto LABEL_28;
    }
    v38 |= 1 << v34;
    v37 += v33;
    v36 -= v33;
  }
  int SupportedChannelMask = ot::MaxPowerTable::GetSupportedChannelMask((ot::MaxPowerTable *)(a1 + 10088));
  v38 &= SupportedChannelMask;
LABEL_28:
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, v39);
  ot::Spinel::LogIfFail((char)"Get radio channel mask failed", v39);
  return v38;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioChannelMask(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::MaxPowerTable::GetSupportedChannelMask(ot::MaxPowerTable *this)
{
  unsigned int v3 = 0;
  for (unsigned __int8 i = 11; i <= 0x19u; ++i)
  {
    if (*((unsigned char *)this + i - 11) != 127) {
      v3 |= 1 << i;
    }
  }
  return v3;
}

{
  return ot::MaxPowerTable::GetSupportedChannelMask(this);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(uint64_t result, int a2)
{
  *(_DWORD *)(result + 10116) += a2 == 6;
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(result, a2);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LogSpinelFrame(uint64_t a1, uint64_t a2, unsigned __int16 a3, char a4)
{
  v395 = v430;
  uint64_t v486 = a1;
  uint64_t v485 = a2;
  unsigned __int16 v484 = a3;
  char v483 = a4 & 1;
  uint64_t v393 = a1;
  int v482 = 0;
  v394 = v496;
  bzero(v496, 0x400uLL);
  int v481 = 0;
  char v480 = 0;
  int v479 = 0;
  int v478 = 0;
  uint64_t v477 = 0;
  int v476 = 0;
  uint64_t v475 = 0;
  v474 = v496;
  v473 = &v497;
  if ((int)otLoggingGetLevel(v4) < 5) {
    goto LABEL_215;
  }
  uint64_t v12 = v395;
  uint64_t v13 = "Sent spinel frame";
  if ((v483 & 1) == 0) {
    uint64_t v13 = "Received spinel frame";
  }
  *((void *)v395 + 36) = v13;
  uint64_t v14 = (unsigned __int8 *)*((void *)v12 + 42);
  unint64_t v347 = (unint64_t)&v479;
  unint64_t v348 = (unint64_t)&v478;
  unint64_t v349 = (unint64_t)&v477;
  unint64_t v350 = (unint64_t)&v476;
  *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v14, v484, "CiiD", v7, v8, v9, v10, v11, (uint64_t)&v480);
  if (*((int *)v395 + 81) <= 0)
  {
    *((_DWORD *)v395 + 82) = 6;
    goto LABEL_215;
  }
  v391 = (char *)*((void *)v395 + 35);
  unsigned int v392 = *((void *)v395 + 34) - *((void *)v395 + 35);
  uint64_t v388 = *((void *)v395 + 36);
  unsigned int v389 = (v480 & 0xC0) >> 6;
  int v390 = v480 & 0xF;
  uint64_t v15 = spinel_command_to_cstr(*((_DWORD *)v395 + 79));
  unint64_t v347 = v389;
  unint64_t v348 = v390;
  unint64_t v349 = (unint64_t)v15;
  *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v391, v392, "%s, flg:0x%x, tid:%u, cmd:%s", v16, v17, v18, v19, v388);
  if (*((_DWORD *)v395 + 79) == 1) {
    goto LABEL_215;
  }
  v386 = (char *)*((void *)v395 + 35);
  unsigned int v387 = *((void *)v395 + 34) - *((void *)v395 + 35);
  char v20 = spinel_prop_key_to_cstr(*((_DWORD *)v395 + 78));
  *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v386, v387, ", key:%s", v21, v22, v23, v24, v20);
  if (*((_DWORD *)v395 + 79) == 2) {
    goto LABEL_215;
  }
  int v385 = *((_DWORD *)v395 + 78);
  switch(v385)
  {
    case 0:
      unint64_t v29 = v395;
      *((_DWORD *)v395 + 67) = 0;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v29 + 38), *((_DWORD *)v29 + 75), "i", v7, v8, v9, v10, v11, (uint64_t)v472);
      if (*((int *)v395 + 81) > 0)
      {
        v383 = (char *)*((void *)v395 + 35);
        unsigned int v384 = *((void *)v395 + 34) - *((void *)v395 + 35);
        char v30 = spinel_status_to_cstr(*((_DWORD *)v395 + 67));
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v383, v384, ", status:%s", v31, v32, v33, v34, v30);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case 1:
      v80 = v395;
      *((_DWORD *)v395 + 41) = 0;
      *((_DWORD *)v80 + 40) = 0;
      int v81 = (unsigned __int8 *)*((void *)v80 + 38);
      unsigned int v82 = *((_DWORD *)v80 + 75);
      unint64_t v347 = (unint64_t)&v460;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v81, v82, "ii", v7, v8, v9, v10, v11, (uint64_t)v461);
      if (*((int *)v395 + 81) > 0)
      {
        uint64_t v83 = (char *)*((void *)v395 + 35);
        unsigned int v84 = *((void *)v395 + 34) - v83;
        unsigned int v85 = (unsigned char *)*((unsigned int *)v395 + 40);
        LODWORD(v346) = *((_DWORD *)v395 + 41);
        unint64_t v347 = (unint64_t)v85;
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v83, v84, ", major:%u, minor:%u", v8, v9, v10, v11, v346);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case 2:
      char v90 = v395;
      *((void *)v395 + 16) = 0;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v90 + 38), *((_DWORD *)v90 + 75), "U", v7, v8, v9, v10, v11, (uint64_t)v457);
      if (*((int *)v395 + 81) >= 0) {
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), ", version:%s", v8, v9, v10, v11, *((void *)v395 + 16));
      }
      else {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case 5:
      uint64_t v72 = (char **)v395;
      uint64_t v73 = v393;
      *((_DWORD *)v395 + 42) = 0;
      *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v73, v72[35], v72[34] - v72[35], ", caps:", v8, v9, v10, v11, v346);
      while (*((_DWORD *)v395 + 75))
      {
        *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v395 + 38), *((_DWORD *)v395 + 75), "i", v7, v8, v9, v10, v11, (uint64_t)v462);
        if (*((int *)v395 + 81) <= 0)
        {
          *((_DWORD *)v395 + 82) = 6;
          goto LABEL_215;
        }
        uint64_t v74 = v395;
        *((void *)v395 + 38) += *((int *)v395 + 81);
        *((_DWORD *)v74 + 75) -= *((_DWORD *)v74 + 81);
        v377 = (char *)*((void *)v74 + 35);
        unsigned int v378 = *((void *)v74 + 34) - *((void *)v74 + 35);
        char v75 = spinel_capability_to_cstr(*((_DWORD *)v74 + 42));
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v377, v378, "%s ", v76, v77, v78, v79, v75);
      }
      goto LABEL_215;
    case 8:
      goto LABEL_181;
    case 32:
      goto LABEL_62;
    case 33:
      goto LABEL_78;
    case 34:
      goto LABEL_142;
  }
  if ((v385 - 36) <= 3) {
    goto LABEL_65;
  }
  switch(v385)
  {
    case ')':
LABEL_142:
      v86 = v395;
      *((_DWORD *)v395 + 39) = 0;
      *((_DWORD *)v86 + 39) = 0;
      *((void *)v86 + 18) = 0;
      *((void *)v86 + 18) = v495;
      *((_DWORD *)v86 + 35) = 0;
      *((_DWORD *)v86 + 35) = 32;
      int v87 = (unsigned __int8 *)*((void *)v86 + 38);
      unsigned int v88 = *((_DWORD *)v86 + 75);
      unint64_t v347 = (unint64_t)&v459;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack_in_place(v87, v88, "D", v7, v8, v9, v10, v11, (uint64_t)v495);
      if (*((int *)v395 + 81) > 0)
      {
        while (*((_DWORD *)v395 + 35))
        {
          unsigned __int8 v458 = 0;
          *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v395 + 18), *((_DWORD *)v395 + 35), "C", v7, v8, v9, v10, v11, (uint64_t)&v458);
          if (*((int *)v395 + 81) <= 0)
          {
            *((_DWORD *)v395 + 82) = 6;
            goto LABEL_215;
          }
          if (v458 >= 0x20u)
          {
            *((_DWORD *)v395 + 82) = 6;
            goto LABEL_215;
          }
          uint64_t v89 = v395;
          *((_DWORD *)v395 + 39) |= 1 << v458;
          *((void *)v89 + 18) += *((int *)v89 + 81);
          *((_DWORD *)v89 + 35) -= *((_DWORD *)v89 + 81);
        }
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), ", channelMask:0x%08x", v8, v9, v10, v11, *((_DWORD *)v395 + 39));
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case '*':
LABEL_65:
      uint64_t v35 = v395;
      *((void *)v395 + 32) = 0;
      *((void *)v35 + 32) = 0;
      v470[0] = 0;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v35 + 38), *((_DWORD *)v35 + 75), "c", v7, v8, v9, v10, v11, (uint64_t)v470);
      if (*((int *)v395 + 81) > 0)
      {
        unsigned int v36 = *((_DWORD *)v395 + 78);
        BOOL v37 = v36 > 0x24;
        uint64_t v38 = v36 - 36;
        uint64_t v382 = v38;
        if (v37)
        {
          uint64_t v40 = v38;
          char v39 = 1;
        }
        else
        {
          uint64_t v40 = v38;
          char v39 = 0;
        }
        if ((v39 & 1) == 0)
        {
          switch(v40)
          {
            case 0:
              *((void *)v395 + 32) = "threshold";
              break;
            case 1:
              *((void *)v395 + 32) = "power";
              break;
            case 2:
              *((void *)v395 + 32) = "rssi";
              break;
            case 3:
              *((void *)v395 + 32) = "sensitivity";
              break;
            case 4:
            case 5:
              break;
            case 6:
              *((void *)v395 + 32) = "gain";
              break;
            default:
              JUMPOUT(0);
          }
        }
        uint64_t v41 = (char *)*((void *)v395 + 35);
        unsigned int v42 = *((void *)v395 + 34) - v41;
        uint64_t v346 = *((void *)v395 + 32);
        unint64_t v347 = v470[0];
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v41, v42, ", %s:%d", v8, v9, v10, v11, v346);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case '+':
      goto LABEL_128;
    case ',':
      goto LABEL_92;
    case '-':
      if (*((_DWORD *)v395 + 79) == 4)
      {
        char v402 = 0;
        __int16 v401 = 0;
        uint64_t v400 = 0;
        unsigned int v399 = 0;
        v338 = (unsigned __int8 *)*((void *)v395 + 38);
        unsigned int v339 = *((_DWORD *)v395 + 75);
        unint64_t v347 = (unint64_t)&v401;
        unint64_t v348 = (unint64_t)&v400;
        unint64_t v349 = (unint64_t)&v399;
        *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v338, v339, "Csd", v7, v8, v9, v10, v11, (uint64_t)&v402);
        if (*((int *)v395 + 81) > 0)
        {
          v340 = (char *)*((void *)v395 + 35);
          unsigned int v341 = *((void *)v395 + 34) - v340;
          unint64_t v347 = v401;
          *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v340, v341, ", ch:%u, actualPower:%d, rawPowerSetting:", v8, v9, v10, v11, v402);
          for (unsigned __int16 i = 0; i < v399; ++i)
            *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), "%02x", v8, v9, v10, v11, *(unsigned char *)(v400 + i));
        }
        else
        {
          *((_DWORD *)v395 + 82) = 6;
        }
      }
      goto LABEL_215;
    case '.':
      char v397 = 0;
      __int16 v396 = 0;
      v342 = (unsigned __int8 *)*((void *)v395 + 38);
      unsigned int v343 = *((_DWORD *)v395 + 75);
      unint64_t v347 = (unint64_t)&v396;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v342, v343, "Cs", v7, v8, v9, v10, v11, (uint64_t)&v397);
      if (*((int *)v395 + 81) > 0)
      {
        v344 = (char *)*((void *)v395 + 35);
        unsigned int v345 = *((void *)v395 + 34) - v344;
        unint64_t v347 = v396;
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v344, v345, ", ch:%u, targetPower:%d", v8, v9, v10, v11, v397);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case '0':
      goto LABEL_78;
    case '1':
      char v407 = 16;
      unsigned int v406 = 0;
      v331 = (unsigned __int8 *)*((void *)v395 + 38);
      unsigned int v332 = *((_DWORD *)v395 + 75);
      unint64_t v347 = (unint64_t)&v406;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v331, v332, "D", v7, v8, v9, v10, v11, (uint64_t)v488);
      if (*((int *)v395 + 81) > 0)
      {
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), ", channels:", v8, v9, v10, v11, v346);
        for (unsigned __int8 j = 0; j < v406; ++j)
          *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), "%u ", v8, v9, v10, v11, v488[j]);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case '2':
LABEL_92:
      uint64_t v46 = v395;
      *((void *)v395 + 28) = 0;
      *((void *)v46 + 28) = 0;
      v468[0] = 0;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v46 + 38), *((_DWORD *)v46 + 75), "S", v7, v8, v9, v10, v11, (uint64_t)v468);
      if (*((int *)v395 + 81) > 0)
      {
        int v380 = *((_DWORD *)v395 + 78);
        switch(v380)
        {
          case 44:
            *((void *)v395 + 28) = "region";
            break;
          case 50:
            *((void *)v395 + 28) = "period";
            break;
          case 53:
            *((void *)v395 + 28) = "saddr";
            break;
          case 54:
            *((void *)v395 + 28) = "panid";
            break;
          case 4868:
            *((void *)v395 + 28) = "saddr";
            break;
        }
        uint64_t v47 = (char *)*((void *)v395 + 35);
        unsigned int v48 = *((void *)v395 + 34) - v47;
        uint64_t v346 = *((void *)v395 + 28);
        unint64_t v347 = v468[0];
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v47, v48, ", %s:0x%04x", v8, v9, v10, v11, v346);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case '4':
LABEL_181:
      v166 = v395;
      v427 = 0;
      *((void *)v395 + 48) = 0;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack_in_place(*((unsigned __int8 **)v166 + 38), *((_DWORD *)v166 + 75), "E", v7, v8, v9, v10, v11, (uint64_t)v490);
      if (*((int *)v395 + 81) > 0)
      {
        if (*((_DWORD *)v395 + 78) == 8) {
          v371 = "eui64";
        }
        else {
          v371 = "laddr";
        }
        v427 = v371;
        v167 = (char *)*((void *)v395 + 35);
        unsigned int v168 = *((void *)v395 + 34) - v167;
        v370 = &v346;
        unint64_t v347 = v490[0];
        unint64_t v348 = v490[1];
        unint64_t v349 = v490[2];
        unint64_t v350 = v490[3];
        unint64_t v351 = v490[4];
        unint64_t v352 = v490[5];
        unint64_t v353 = v490[6];
        v354 = (char *)v490[7];
        unsigned int v169 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v167, v168, ", %s:%02x%02x%02x%02x%02x%02x%02x%02x", v8, v9, v10, v11, (char)v371);
        *((void *)v395 + 35) += v169;
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
  }
  if (v385 == 54 || v385 == 53) {
    goto LABEL_92;
  }
  switch(v385)
  {
    case '7':
LABEL_62:
      char v471 = 0;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v395 + 38), *((_DWORD *)v395 + 75), "b", v7, v8, v9, v10, v11, (uint64_t)&v471);
      if (*((int *)v395 + 81) > 0) {
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), ", enabled:%u", v8, v9, v10, v11, v471 & 1);
      }
      else {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case '8':
      goto LABEL_78;
    case '9':
LABEL_128:
      uint64_t v64 = v395;
      *((void *)v395 + 22) = 0;
      v464[0] = 0;
      char v463 = 0;
      uint64_t v65 = (unsigned __int8 *)*((void *)v64 + 38);
      unsigned int v66 = *((_DWORD *)v64 + 75);
      unint64_t v347 = (unint64_t)&v463;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v65, v66, "Cc", v7, v8, v9, v10, v11, (uint64_t)v464);
      if (*((int *)v395 + 81) > 0)
      {
        uint64_t v67 = v395;
        uint64_t v68 = v393;
        uint64_t v69 = "rssi";
        if (*((_DWORD *)v395 + 78) != 57) {
          uint64_t v69 = "power";
        }
        *((void *)v395 + 22) = v69;
        uint64_t v70 = (char *)v67[35];
        unsigned int v71 = v67[34] - v70;
        unint64_t v347 = v67[22];
        unint64_t v348 = v463;
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v68, v70, v71, ", channel:%u, %s:%d", v8, v9, v10, v11, v464[0]);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case 'p':
      v145 = v395;
      *((_DWORD *)v395 + 10) = 0;
      *((_DWORD *)v145 + 10) = 151;
      v146 = (unsigned __int8 *)*((void *)v145 + 38);
      unsigned int v147 = *((_DWORD *)v145 + 75);
      unint64_t v347 = (unint64_t)&v437;
      int v148 = spinel_datatype_unpack_in_place(v146, v147, "D", v7, v8, v9, v10, v11, (uint64_t)v494);
      v149 = v395;
      *((_DWORD *)v395 + 81) = v148;
      if (*((unsigned int *)v149 + 10) >= 0x97uLL) {
        __assert_rtn("LogSpinelFrame", "radio_spinel_impl.hpp", 4986, "stringLength < sizeof(debugString)");
      }
      if (*((int *)v395 + 81) > 0)
      {
        v150 = (char **)v395;
        uint64_t v151 = v393;
        v494[*((unsigned int *)v395 + 10)] = 0;
        *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v151, v150[35], v150[34] - v150[35], ", debug:%s", v8, v9, v10, v11, (char)v494);
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case 'q':
      if (*((_DWORD *)v395 + 79) == 6)
      {
        uint64_t v91 = v395;
        unsigned __int16 v446 = 0;
        char v445 = 0;
        *((_DWORD *)v395 + 14) = 0;
        unsigned int v92 = (unsigned __int8 *)*((void *)v91 + 38);
        unsigned int v93 = *((_DWORD *)v91 + 75);
        v376 = &v346;
        unint64_t v347 = (unint64_t)&v448;
        unint64_t v348 = (unint64_t)&v451;
        unint64_t v349 = (unint64_t)&v445;
        unint64_t v350 = (unint64_t)&v446;
        unint64_t v351 = (unint64_t)v449;
        unint64_t v352 = (unint64_t)&v452;
        unint64_t v353 = (unint64_t)&v450;
        v354 = &v444;
        int v94 = spinel_datatype_unpack(v92, v93, "dccSt(CCX)t(i)", v7, v8, v9, v10, v11, (uint64_t)v447);
        *((_DWORD *)v395 + 81) = v94;
        if (*((int *)v395 + 81) > 0)
        {
          uint64_t v95 = (char *)*((void *)v395 + 35);
          unsigned int v96 = *((void *)v395 + 34) - v95;
          unint64_t v347 = v451;
          unsigned int v97 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v95, v96, ", len:%u, rssi:%d ...", v8, v9, v10, v11, v448);
          *((void *)v395 + 35) += v97;
          v375 = v496;
          otLogDebgPlat("%s", v98, v99, v100, v101, v102, v103, v104, (char)v496);
          uint64_t v110 = v395;
          *((void *)v395 + 35) = v375;
          *((void *)v110 + 38) += *((int *)v110 + 81);
          *((_DWORD *)v110 + 75) -= (unsigned __int16)*((_DWORD *)v110 + 81);
          if (*((_DWORD *)v110 + 75))
          {
            v111 = v395;
            char v443 = 0;
            *((_DWORD *)v395 + 12) = 0;
            v112 = (unsigned __int8 *)*((void *)v111 + 38);
            unsigned int v113 = *((_DWORD *)v111 + 75);
            unint64_t v347 = (unint64_t)&v442;
            unint64_t v348 = (unint64_t)v453;
            int v114 = spinel_datatype_unpack(v112, v113, "t(CL)L", v105, v106, v107, v108, v109, (uint64_t)&v443);
            *((_DWORD *)v395 + 81) = v114;
          }
          v115 = (char *)*((void *)v395 + 35);
          unsigned int v116 = *((void *)v395 + 34) - v115;
          v117 = (unsigned char *)*((void *)v395 + 10);
          v118 = (unsigned char *)*((unsigned int *)v395 + 14);
          v119 = (unsigned char *)*((unsigned int *)v395 + 24);
          unint64_t v347 = v446;
          unint64_t v348 = v449[0];
          unint64_t v349 = v452;
          unint64_t v350 = (unint64_t)v117;
          unint64_t v351 = (unint64_t)v118;
          unint64_t v352 = (unint64_t)v119;
          unsigned int v120 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v115, v116, "... noise:%d, flags:0x%04x, channel:%u, lqi:%u, timestamp:%lu, rxerr:%u, RCP timestamp:%u", v106, v107, v108, v109, v445);
          *((void *)v395 + 35) += v120;
        }
        else
        {
          *((_DWORD *)v395 + 82) = 6;
        }
      }
      else if (*((_DWORD *)v395 + 79) == 3)
      {
        char v441 = 0;
        char v440 = 0;
        char v439 = 0;
        char v438 = 0;
        v121 = (unsigned __int8 *)*((void *)v395 + 38);
        unsigned int v122 = *((_DWORD *)v395 + 75);
        v374 = &v346;
        unint64_t v347 = (unint64_t)&v448;
        unint64_t v348 = (unint64_t)v449;
        unint64_t v349 = (unint64_t)&v455;
        unint64_t v350 = (unint64_t)&v456;
        unint64_t v351 = (unint64_t)&v441;
        unint64_t v352 = (unint64_t)&v440;
        unint64_t v353 = (unint64_t)&v439;
        v354 = &v438;
        unint64_t v355 = (unint64_t)v453;
        v356 = (unsigned int *)&v454;
        int v123 = spinel_datatype_unpack(v121, v122, "dCCCbbbbLL", (uint64_t)v447, v8, v9, v10, v11, (uint64_t)v447);
        *((_DWORD *)v395 + 81) = v123;
        if (*((int *)v395 + 81) > 0)
        {
          v124 = (char *)*((void *)v395 + 35);
          unsigned int v125 = *((void *)v395 + 34) - v124;
          unint64_t v347 = v449[0];
          unint64_t v348 = v455;
          unint64_t v349 = v456;
          unsigned int v126 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v124, v125, ", len:%u, channel:%u, maxbackoffs:%u, maxretries:%u ...", v8, v9, v10, v11, v448);
          *((void *)v395 + 35) += v126;
          v373 = v496;
          otLogDebgPlat("%s", v127, v128, v129, v130, v131, v132, v133, (char)v496);
          uint64_t v134 = v393;
          v135 = v395;
          *((void *)v395 + 35) = v373;
          v136 = (char *)*((void *)v135 + 35);
          unsigned int v137 = *((void *)v135 + 34) - v136;
          v138 = (unsigned char *)*((unsigned int *)v135 + 24);
          v139 = (unsigned char *)*((unsigned int *)v135 + 25);
          unint64_t v347 = v440 & 1;
          unint64_t v348 = v439 & 1;
          unint64_t v349 = v438 & 1;
          unint64_t v350 = (unint64_t)v138;
          unint64_t v351 = (unint64_t)v139;
          unsigned int v144 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v134, v136, v137, "... csmaCaEnabled:%u, isHeaderUpdated:%u, isARetx:%u, skipAes:%u, txDelay:%u, txDelayBase:%u", v140, v141, v142, v143, v441 & 1);
          *((void *)v395 + 35) += v144;
        }
        else
        {
          *((_DWORD *)v395 + 82) = 6;
        }
      }
      goto LABEL_215;
    case 't':
      v152 = v395;
      *((void *)v395 + 4) = 0;
      char v435 = 0;
      *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v152 + 38), *((_DWORD *)v152 + 75), "U", v7, v8, v9, v10, v11, (uint64_t)v436);
      if (*((int *)v395 + 81) >= 0)
      {
        v153 = v395;
        *((void *)v395 + 38) += *((int *)v395 + 81);
        *((_DWORD *)v153 + 75) -= *((_DWORD *)v153 + 81);
        *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v153 + 38), *((_DWORD *)v153 + 75), "C", v7, v8, v9, v10, v11, (uint64_t)&v435);
        if (*((int *)v395 + 81) > 0)
        {
          v154 = (char *)*((void *)v395 + 35);
          unsigned int v155 = *((void *)v395 + 34) - v154;
          unint64_t v347 = *((void *)v395 + 4);
          *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v154, v155, ", level:%u, log:%s", v8, v9, v10, v11, v435);
        }
        else
        {
          *((_DWORD *)v395 + 82) = 6;
        }
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
  }
  if (v385 == 177 || v385 == 176)
  {
LABEL_118:
    BOOL v60 = v395;
    *((void *)v395 + 24) = 0;
    *((_DWORD *)v60 + 47) = 0;
    *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v60 + 38), *((_DWORD *)v60 + 75), "i", v7, v8, v9, v10, v11, (uint64_t)v465);
    if (*((int *)v395 + 81) > 0)
    {
      int v379 = *((_DWORD *)v395 + 78);
      switch(v379)
      {
        case 176:
          *((void *)v395 + 24) = "version";
          break;
        case 177:
          *((void *)v395 + 24) = "min-host-version";
          break;
        case 4619:
          *((void *)v395 + 24) = "caps";
          break;
        default:
          *((void *)v395 + 24) = "";
          break;
      }
      unsigned __int8 v61 = (char *)*((void *)v395 + 35);
      unsigned int v62 = *((void *)v395 + 34) - v61;
      int v63 = (unsigned char *)*((unsigned int *)v395 + 47);
      uint64_t v346 = *((void *)v395 + 24);
      unint64_t v347 = (unint64_t)v63;
      *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v61, v62, ", %s:%u", v8, v9, v10, v11, v346);
    }
    else
    {
      *((_DWORD *)v395 + 82) = 6;
    }
    goto LABEL_215;
  }
  if (v385 == 2048)
  {
    v159 = v395;
    char v432 = 0;
    unsigned __int8 v431 = 0;
    *(_DWORD *)v395 = 0;
    *(_DWORD *)v159 = 16;
    int v429 = 16;
    int v428 = 16;
    v160 = (unsigned __int8 *)*((void *)v159 + 38);
    unsigned int v161 = *((_DWORD *)v159 + 75);
    v372 = &v346;
    unint64_t v347 = (unint64_t)&v431;
    unint64_t v348 = (unint64_t)&v493;
    unint64_t v349 = (unint64_t)v430;
    unint64_t v350 = (unint64_t)&v492;
    unint64_t v351 = (unint64_t)&v429;
    unint64_t v352 = (unint64_t)&v491;
    unint64_t v353 = (unint64_t)&v428;
    int v162 = spinel_datatype_unpack(v160, v161, "CCddd", v7, v8, v9, v10, v11, (uint64_t)&v432);
    *((_DWORD *)v395 + 81) = v162;
    if (*((int *)v395 + 81) > 0)
    {
      v163 = (char *)*((void *)v395 + 35);
      unsigned int v164 = *((void *)v395 + 34) - v163;
      unint64_t v347 = v431;
      unsigned int v165 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v163, v164, ", keyIdMode:%u, keyId:%u, prevKey:***, currKey:***, nextKey:***", v8, v9, v10, v11, v432);
      *((void *)v395 + 35) += v165;
    }
    else
    {
      *((_DWORD *)v395 + 82) = 6;
    }
    goto LABEL_215;
  }
  if (v385 == 2050 || v385 == 2049)
  {
    int v53 = v395;
    *((void *)v395 + 26) = 0;
    *((_DWORD *)v53 + 51) = 0;
    *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v53 + 38), *((_DWORD *)v53 + 75), "L", v7, v8, v9, v10, v11, (uint64_t)v466);
    if (*((int *)v395 + 81) > 0)
    {
      BOOL v54 = v395;
      uint64_t v55 = v393;
      uint64_t v56 = "timestamp";
      if (*((_DWORD *)v395 + 78) != 2050) {
        uint64_t v56 = "counter";
      }
      *((void *)v395 + 26) = v56;
      int v57 = (char *)*((void *)v54 + 35);
      unsigned int v58 = *((void *)v54 + 34) - v57;
      uint64_t v59 = *((void *)v54 + 26);
      unint64_t v347 = *((unsigned int *)v54 + 51);
      *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v55, v57, v58, ", %s:%u", v8, v9, v10, v11, v59);
    }
    else
    {
      *((_DWORD *)v395 + 82) = 6;
    }
    goto LABEL_215;
  }
  if (v385 == 2051)
  {
    unsigned __int16 v404 = 0;
    unsigned __int8 v403 = 0;
    v333 = (unsigned __int8 *)*((void *)v395 + 38);
    unsigned int v334 = *((_DWORD *)v395 + 75);
    unint64_t v347 = (unint64_t)v487;
    unint64_t v348 = (unint64_t)&v403;
    *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v333, v334, "SEC", v7, v8, v9, v10, v11, (uint64_t)&v404);
    if (*((int *)v395 + 81) > 0)
    {
      v335 = (char *)*((void *)v395 + 35);
      unsigned int v336 = *((void *)v395 + 34) - v335;
      v365 = &v346;
      unint64_t v347 = v487[0];
      unint64_t v348 = v487[1];
      unint64_t v349 = v487[2];
      unint64_t v350 = v487[3];
      unint64_t v351 = v487[4];
      unint64_t v352 = v487[5];
      unint64_t v353 = v487[6];
      v354 = (char *)v487[7];
      unint64_t v355 = v403;
      unsigned int v337 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v335, v336, ", saddr:%04x, extaddr:%02x%02x%02x%02x%02x%02x%02x%02x, flags:0x%02x", v404, v9, v10, v11, v404);
      *((void *)v395 + 35) += v337;
    }
    else
    {
      *((_DWORD *)v395 + 82) = 6;
    }
    goto LABEL_215;
  }
  if (v385 == 2053 || v385 == 2052)
  {
LABEL_78:
    uint64_t v43 = v395;
    *((void *)v395 + 30) = 0;
    *((void *)v43 + 30) = 0;
    v469[0] = 0;
    *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v43 + 38), *((_DWORD *)v43 + 75), "C", v7, v8, v9, v10, v11, (uint64_t)v469);
    if (*((int *)v395 + 81) > 0)
    {
      int v381 = *((_DWORD *)v395 + 78);
      switch(v381)
      {
        case 33:
          *((void *)v395 + 30) = "channel";
          break;
        case 48:
          *((void *)v395 + 30) = "state";
          break;
        case 56:
          *((void *)v395 + 30) = "mode";
          break;
        case 2052:
          *((void *)v395 + 30) = "accuracy";
          break;
        case 2053:
          *((void *)v395 + 30) = "uncertainty";
          break;
      }
      uint64_t v44 = (char *)*((void *)v395 + 35);
      unsigned int v45 = *((void *)v395 + 34) - v44;
      uint64_t v346 = *((void *)v395 + 30);
      unint64_t v347 = v469[0];
      *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, v44, v45, ", %s:%u", v8, v9, v10, v11, v346);
    }
    else
    {
      *((_DWORD *)v395 + 82) = 6;
    }
    goto LABEL_215;
  }
  switch(v385)
  {
    case 4619:
      goto LABEL_118;
    case 4620:
      v178 = (unsigned __int8 *)*((void *)v395 + 38);
      unsigned int v179 = *((_DWORD *)v395 + 75);
      v367 = &v408;
      v368 = &v346;
      unint64_t v347 = (unint64_t)&v410;
      unint64_t v348 = (unint64_t)&v411;
      unint64_t v349 = (unint64_t)&v412;
      unint64_t v350 = (unint64_t)&v413;
      unint64_t v351 = (unint64_t)&v414;
      unint64_t v352 = (unint64_t)&v415;
      unint64_t v353 = (unint64_t)&v416;
      v354 = (char *)&v417;
      unint64_t v355 = (unint64_t)&v418;
      v356 = &v419;
      v357 = &v420;
      v358 = &v421;
      v359 = &v422;
      v360 = &v423;
      v361 = &v424;
      v362 = &v425;
      v363 = &v426;
      v364 = &v408;
      int v180 = spinel_datatype_unpack(v178, v179, "t(LLLLLLLL)t(LLLLLLLLL)bL", (uint64_t)&v417, (uint64_t)&v416, (uint64_t)&v415, (uint64_t)&v414, (uint64_t)&v413, (uint64_t)&v409);
      *((_DWORD *)v395 + 81) = v180;
      if (*((int *)v395 + 81) > 0)
      {
        v366 = v496;
        otLogDebgPlat("%s ...", v5, v6, v7, v8, v9, v10, v11, (char)v496);
        char v181 = ot::ToUlong(v409);
        otLogDebgPlat(" txRequest:%lu", v182, v183, v184, v185, v186, v187, v188, v181);
        char v189 = ot::ToUlong(v410);
        otLogDebgPlat(" txGrantImmediate:%lu", v190, v191, v192, v193, v194, v195, v196, v189);
        char v197 = ot::ToUlong(v411);
        otLogDebgPlat(" txGrantWait:%lu", v198, v199, v200, v201, v202, v203, v204, v197);
        char v205 = ot::ToUlong(v412);
        otLogDebgPlat(" txGrantWaitActivated:%lu", v206, v207, v208, v209, v210, v211, v212, v205);
        char v213 = ot::ToUlong(v413);
        otLogDebgPlat(" txGrantWaitTimeout:%lu", v214, v215, v216, v217, v218, v219, v220, v213);
        char v221 = ot::ToUlong(v414);
        otLogDebgPlat(" txGrantDeactivatedDuringRequest:%lu", v222, v223, v224, v225, v226, v227, v228, v221);
        char v229 = ot::ToUlong(v415);
        otLogDebgPlat(" txDelayedGrant:%lu", v230, v231, v232, v233, v234, v235, v236, v229);
        char v237 = ot::ToUlong(v416);
        otLogDebgPlat(" avgTxRequestToGrantTime:%lu", v238, v239, v240, v241, v242, v243, v244, v237);
        char v245 = ot::ToUlong(v417);
        otLogDebgPlat(" rxRequest:%lu", v246, v247, v248, v249, v250, v251, v252, v245);
        char v253 = ot::ToUlong(v418);
        otLogDebgPlat(" rxGrantImmediate:%lu", v254, v255, v256, v257, v258, v259, v260, v253);
        char v261 = ot::ToUlong(v419);
        otLogDebgPlat(" rxGrantWait:%lu", v262, v263, v264, v265, v266, v267, v268, v261);
        char v269 = ot::ToUlong(v420);
        otLogDebgPlat(" rxGrantWaitActivated:%lu", v270, v271, v272, v273, v274, v275, v276, v269);
        char v277 = ot::ToUlong(v421);
        otLogDebgPlat(" rxGrantWaitTimeout:%lu", v278, v279, v280, v281, v282, v283, v284, v277);
        char v285 = ot::ToUlong(v422);
        otLogDebgPlat(" rxGrantDeactivatedDuringRequest:%lu", v286, v287, v288, v289, v290, v291, v292, v285);
        char v293 = ot::ToUlong(v423);
        otLogDebgPlat(" rxDelayedGrant:%lu", v294, v295, v296, v297, v298, v299, v300, v293);
        char v301 = ot::ToUlong(v424);
        otLogDebgPlat(" avgRxRequestToGrantTime:%lu", v302, v303, v304, v305, v306, v307, v308, v301);
        char v309 = ot::ToUlong(v425);
        otLogDebgPlat(" rxGrantNone:%lu", v310, v311, v312, v313, v314, v315, v316, v309);
        otLogDebgPlat(" stopped:%u", v317, v318, v319, v320, v321, v322, v323, v426 & 1);
        uint64_t v324 = v393;
        v325 = (char **)v395;
        *((void *)v395 + 35) = v366;
        unsigned int v330 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v324, v325[35], v325[34] - v325[35], " grantGlitch:%u", v326, v327, v328, v329, v408);
        *((void *)v395 + 35) += v330;
      }
      else
      {
        *((_DWORD *)v395 + 82) = 6;
      }
      goto LABEL_215;
    case 4621:
    case 4867:
      goto LABEL_62;
  }
  if (v385 != 4868)
  {
    if (v385 != 4869)
    {
      if (v385 == 15296)
      {
        v156 = v395;
        *((void *)v395 + 2) = 0;
        *((void *)v156 + 1) = 0;
        v157 = (unsigned __int8 *)*((void *)v156 + 38);
        unsigned int v158 = *((_DWORD *)v156 + 75);
        unint64_t v347 = (unint64_t)&v433;
        *((_DWORD *)v395 + 81) = spinel_datatype_unpack(v157, v158, "U", v7, v8, v9, v10, v11, (uint64_t)v434);
        if (*((int *)v395 + 81) > 0) {
          *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), ", diag:%s", v8, v9, v10, v11, *((void *)v395 + 2));
        }
        else {
          *((_DWORD *)v395 + 82) = 6;
        }
      }
      goto LABEL_215;
    }
    unsigned int v170 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34) - *((void *)v395 + 35), ", extaddr:", v8, v9, v10, v11, v346);
    v171 = v395;
    *((void *)v395 + 35) += v170;
    if (*((unsigned int *)v171 + 75) >= 8uLL)
    {
      while (*((unsigned int *)v395 + 75) >= 8uLL)
      {
        int v172 = spinel_datatype_unpack_in_place(*((unsigned __int8 **)v395 + 38), *((_DWORD *)v395 + 75), "E", v7, v8, v9, v10, v11, (uint64_t)v489);
        *((_DWORD *)v395 + 81) = v172;
        if (*((int *)v395 + 81) <= 0)
        {
          *((_DWORD *)v395 + 82) = 6;
          goto LABEL_215;
        }
        v173 = v395;
        uint64_t v174 = v393;
        *((void *)v395 + 38) += *((int *)v395 + 81);
        *((_DWORD *)v173 + 75) -= *((_DWORD *)v173 + 81);
        v175 = (char *)*((void *)v173 + 35);
        unsigned int v176 = *((void *)v173 + 34) - v175;
        v369 = &v346;
        unint64_t v347 = v489[1];
        unint64_t v348 = v489[2];
        unint64_t v349 = v489[3];
        unint64_t v350 = v489[4];
        unint64_t v351 = v489[5];
        unint64_t v352 = v489[6];
        unint64_t v353 = v489[7];
        unsigned int v177 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v174, v175, v176, "%02x%02x%02x%02x%02x%02x%02x%02x ", v8, v9, v10, v11, v489[0]);
        *((void *)v395 + 35) += v177;
      }
      goto LABEL_215;
    }
LABEL_107:
    *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34)- *((void *)v395 + 35), "none", v8, v9, v10, v11, v346);
    goto LABEL_215;
  }
  __int16 v467 = 0;
  unsigned int v49 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v393, *((char **)v395 + 35), *((void *)v395 + 34) - *((void *)v395 + 35), ", saddr:", v8, v9, v10, v11, v346);
  BOOL v50 = v395;
  *((void *)v395 + 35) += v49;
  if (*((unsigned int *)v50 + 75) < 2uLL) {
    goto LABEL_107;
  }
  while (*((unsigned int *)v395 + 75) >= 2uLL)
  {
    *((_DWORD *)v395 + 81) = spinel_datatype_unpack(*((unsigned __int8 **)v395 + 38), *((_DWORD *)v395 + 75), "S", v7, v8, v9, v10, v11, (uint64_t)&v467);
    if (*((int *)v395 + 81) <= 0)
    {
      *((_DWORD *)v395 + 82) = 6;
      break;
    }
    unsigned __int8 v51 = v395;
    uint64_t v52 = v393;
    *((void *)v395 + 38) += *((int *)v395 + 81);
    *((_DWORD *)v51 + 75) -= *((_DWORD *)v51 + 81);
    *((void *)v395 + 35) += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v52, *((char **)v51 + 35), *((void *)v51 + 34) - *((void *)v51 + 35), "0x%04x ", v8, v9, v10, v11, v467);
  }
LABEL_215:
  if (*((_DWORD *)v395 + 82))
  {
    otLogDebgPlat("%s, failed to parse spinel frame !", v5, v6, v7, v8, v9, v10, v11, *((void *)v395 + 36));
  }
  else if (*((_DWORD *)v395 + 78) != 116)
  {
    otLogDebgPlat("%s", v5, v6, v7, v8, v9, v10, v11, (char)v496);
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LogSpinelFrame(a1, a2, a3, a4);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8208);
  return v3 + 4 + (unsigned __int16)ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetSkipLength(a1, a2);
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame(a1, a2);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength(uint64_t *a1, const unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  return (unsigned __int16)(v3 - ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame((uint64_t)a1, a2));
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength(a1, a2);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleNotification(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = a1;
  uint64_t v38 = a2;
  int v37 = 0;
  int v36 = 0;
  int v35 = 0;
  memset(v34, 0, 13);
  int v33 = 0;
  char v32 = 0;
  Frame = (unsigned __int8 *)ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame((uint64_t)a2, (const unsigned __int8 *)a2);
  unsigned __int16 Length = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength(v38, v2);
  int v35 = spinel_datatype_unpack(Frame, Length, "CiiD", v4, v5, v6, v7, v8, (uint64_t)v34);
  if (v35 > 0)
  {
    if ((v34[0] & 0xF) != 0)
    {
      int v33 = 6;
    }
    else
    {
      if (v37 != 116)
      {
        v40[0] = 0;
        unint64_t v29 = (ot::Spinel *)ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame((uint64_t)v38, v9);
        unsigned __int16 v11 = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength(v38, v10);
        ot::Spinel::encode_data_into_string(v29, (const unsigned __int8 *)v11, v40, (char *)0x401, 0);
        spinel_command_to_cstr(*(int *)&v34[1]);
        spinel_prop_key_to_cstr(v37);
        ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength(v38, v12);
        otLogNotePlat("In %s,[RCP->] (%d) %s(%s) [%s] len=%d", v13, v14, v15, v16, v17, v18, v19, (char)"HandleNotification");
      }
      if (*(_DWORD *)&v34[1] == 6)
      {
        if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsSafeToHandleNow(a1, v37)) {
          ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleValueIs(a1, v37, *(uint64_t *)&v34[5], v36);
        }
        else {
          char v32 = 1;
        }
      }
      else if (*(_DWORD *)&v34[1] == 8 || *(_DWORD *)&v34[1] == 7)
      {
        char v21 = ot::ToUlong(*(unsigned int *)&v34[1]);
        otLogInfoPlat("Ignored command %lu", v22, v23, v24, v25, v26, v27, v28, v21);
      }
      else
      {
        int v33 = 6;
      }
    }
  }
  else
  {
    int v33 = 6;
  }
  if ((v32 & 1) == 0 || ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SaveFrame((uint64_t)v38))
  {
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::DiscardFrame((uint64_t)v38);
    if (v32) {
      otLogCritPlat("RX Spinel buffer full, dropped incoming frame");
    }
  }
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, v33);
  ot::Spinel::LogIfFail((char)"Error processing notification", v33);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleNotification(a1, a2);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleResponse(uint64_t a1, unsigned __int8 *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = a1;
  *(void *)&v13[1] = a2;
  v13[0] = a3;
  int v12 = 0;
  uint64_t v11 = 0;
  int v10 = 0;
  char v9 = 0;
  spinel_datatype_unpack(a2, a3, "CiiD", a4, a5, a6, a7, a8, (uint64_t)&v9);
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, 6);
  ot::Spinel::LogIfFail((char)"Error processing response", 6);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleResponse(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::DiscardFrame(uint64_t a1)
{
  ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SetSkipLength(a1, 0);
  IgnoreError();
  uint64_t result = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame(a1, v1);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = a1 + 8202 - *(_WORD *)a1;
  return result;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::DiscardFrame(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleTransportError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  otLogNotePlat("[HandleTransportError status= %d gPciStatus=%d\n", a2, a3, a4, a5, a6, a7, a8, a2 & 1);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleTransportError(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacKey(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = a1;
  unsigned __int8 v18 = a2;
  unsigned __int8 v17 = a3;
  uint64_t v16 = (_OWORD *)a4;
  uint64_t v15 = (_OWORD *)a5;
  uint64_t v14 = (_OWORD *)a6;
  uint64_t v11 = a1;
  unsigned int v13 = 0;
  uint64_t v12 = 0;
  if (a4 && v15 && v14)
  {
    v10[9] = v10;
    v10[1] = v17;
    v10[2] = v16;
    v10[3] = 16;
    v10[4] = v15;
    v10[5] = 16;
    v10[6] = v14;
    _DWORD v10[7] = 16;
    unsigned int v13 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v11, 2048, "CCddd", a4, a5, a6, a7, a8, v18);
    if (!v13)
    {
      uint64_t v8 = v11;
      *(unsigned char *)(v11 + 9338) = v18;
      *(unsigned char *)(v8 + 9339) = v17;
      *(_OWORD *)(v8 + 9340) = *v16;
      *(_OWORD *)(v8 + 9356) = *v15;
      *(_OWORD *)(v8 + 9372) = *v14;
      *(_WORD *)(v8 + 10044) = *(_WORD *)(v8 + 10044) & 0xFFFD | 2;
    }
  }
  else
  {
    return 7;
  }
  return v13;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacKey(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2049, "Lb", a4, a5, a6, a7, a8, a2);
  if (!v10)
  {
    *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFEFF | 0x100;
    *(_DWORD *)(a1 + 10040) = a2;
  }
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMacFrameCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2049, (uint64_t)"L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get MAC Frame Counter failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMacFrameCounter(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRadioRegion(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v24 = HIBYTE(a2);
  unsigned int v23 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 44, "S", a4, a5, a6, a7, a8, a2);
  if (v23)
  {
    otThreadErrorToString(v23);
    otLogWarnPlat("Failed to set region code \"%c%c\": %s", v15, v16, v17, v18, v19, v20, v21, v24);
  }
  else
  {
    otLogNotePlat("Set region code \"%c%c\" successfully", v8, v9, v10, v11, v12, v13, v14, v24);
  }
  return v23;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 44, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  }
  else {
    return 7;
  }
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ConfigureEnhAckProbing(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2051, "SEC", a4, a5, a6, a7, a8, a3);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ConfigureEnhAckProbing(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ReceiveAt(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4876, "CLLC", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ReceiveAt(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCslSampleTime(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2054, "L", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCslChannel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 5419, "C", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCslChannel(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableCsl(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2055, "LSE", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2055, "LSE", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetWakeupConfiguration(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v23 = a1;
  unsigned __int16 v22 = a2;
  unsigned __int8 v21 = a3;
  uint64_t v12 = a1;
  int v20 = 0;
  unsigned __int8 v19 = 0;
  unsigned __int16 v18 = 1;
  unsigned __int16 v17 = 60;
  unsigned __int16 PrioritizedWindowSize = 0;
  unsigned __int16 PrioritizedWindowSize = otLinkGetPrioritizedWindowSize(*(void *)(a1 + 216));
  __int16 v15 = 8;
  unsigned __int16 v14 = 0;
  uint64_t v13 = v21 - 1;
  if (v21 <= 1u)
  {
    uint64_t v4 = v21 - 1;
    char v3 = 0;
  }
  else
  {
    uint64_t v4 = v21 - 1;
    char v3 = 1;
  }
  if (v3)
  {
    unsigned __int16 v14 = 7500;
    unsigned __int8 v19 = 1;
  }
  else
  {
    switch(v4)
    {
      case 0:
        unsigned __int16 v14 = 15000;
        unsigned __int8 v19 = 1;
        break;
      case 1:
        unsigned __int16 v14 = 7500;
        unsigned __int8 v19 = 1;
        break;
      case 2:
        unsigned __int16 v14 = 7500;
        unsigned __int8 v19 = 2;
        break;
      case 3:
        unsigned __int16 v14 = 15000;
        unsigned __int8 v19 = 1;
        break;
      default:
        JUMPOUT(0);
    }
  }
  if (!otPlatRadioRcp2SpinelVersionIsSameOrNewer(1u, 1u)) {
    v14 /= 1000;
  }
  __int16 v15 = 8;
  v11[9] = v11;
  v11[1] = v14;
  v11[2] = v19;
  v11[3] = 60;
  v11[4] = 8;
  void v11[5] = v18;
  v11[6] = v17;
  v11[7] = PrioritizedWindowSize;
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v12, 4353, "LLCLLLLL", v5, v6, v7, v8, v9, v22);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetWakeupConfiguration(a1, a2, a3);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::StopWakeup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4353, "LLCL", a4, a5, a6, a7, a8, 0);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::StopWakeup(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCstSampleTime(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2056, "L", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCstSampleTime(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableCst(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2057, "LSE", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableCst(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCslAccuracy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1;
  unsigned __int8 v10 = -1;
  int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2052, (uint64_t)"C", a4, a5, a6, a7, a8, (uint64_t)&v10);
  ot::Spinel::LogIfFail((char)"Get CSL Accuracy failed", v9);
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2056, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCslAccuracy(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCslUncertainty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1;
  unsigned __int8 v10 = -1;
  int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2053, (uint64_t)"C", a4, a5, a6, a7, a8, (uint64_t)&v10);
  ot::Spinel::LogIfFail((char)"Get CSL Uncertainty failed", v9);
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCslUncertainty(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HasPendingFrame(uint64_t a1)
{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::HasSavedFrame(a1 + 224);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HasPendingFrame(a1);
}

uint64_t ot::Instance::Get<ot::SettingsDriver>(uint64_t a1)
{
  return a1 + 201;
}

{
  return ot::Instance::Get<ot::SettingsDriver>(a1);
}

uint64_t ot::SettingsDriver::Init(ot::SettingsDriver *this, const unsigned __int16 *a2, __int16 a3)
{
  InstancePtr = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsInit((uint64_t)InstancePtr, (uint64_t)a2, a3);
}

{
  return ot::SettingsDriver::Init(this, a2, a3);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ThreadDatasetHandler(uint64_t a1, const unsigned __int8 *a2, unsigned __int16 a3)
{
  uint64_t v34 = a1;
  int v33 = a2;
  unsigned __int16 v32 = a3;
  unsigned int Uint16 = 0;
  BOOL v30 = 0;
  BOOL v30 = *(_DWORD *)(a1 + 8552) == 5400;
  ot::Spinel::Decoder::Decoder((ot::Spinel::Decoder *)v29);
  ot::MeshCoP::Dataset::Dataset((ot::MeshCoP::Dataset *)v35);
  memset(__b, 0, sizeof(__b));
  ot::Spinel::Decoder::Init((ot::Spinel::Decoder *)v29, v33, v32);
  while (!ot::Spinel::Decoder::IsAllReadInStruct((ot::Spinel::Decoder *)v29))
  {
    unsigned int v28 = 0;
    unsigned int Uint16 = ot::Spinel::Decoder::OpenStruct((ot::Spinel::Decoder *)v29);
    if (Uint16) {
      return Uint16;
    }
    unsigned int Uint16 = ot::Spinel::Decoder::ReadUintPacked((ot::Spinel::Decoder *)v29, &v28);
    if (Uint16) {
      return Uint16;
    }
    switch(v28)
    {
      case 0x21u:
        unsigned __int8 v21 = 0;
        unsigned int Uint16 = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)v29, &v21);
        if (Uint16) {
          return Uint16;
        }
        WORD1(__b[11]) = v21;
        LOWORD(__b[15]) = __b[15] & 0xFEFF | 0x100;
        break;
      case 0x22u:
        unsigned __int8 v15 = 0;
        HIDWORD(__b[14]) = 0;
        while (!ot::Spinel::Decoder::IsAllReadInStruct((ot::Spinel::Decoder *)v29))
        {
          unsigned int Uint16 = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)v29, &v15);
          if (Uint16) {
            return Uint16;
          }
          if (v15 > 0x1Fu) {
            return 7;
          }
          HIDWORD(__b[14]) |= 1 << v15;
        }
        LOWORD(__b[15]) = __b[15] & 0xF7FF | 0x800;
        break;
      case 0x36u:
        unsigned int Uint16 = ot::Spinel::Decoder::ReadUint16((ot::Spinel::Decoder *)v29, (unsigned __int16 *)&__b[11]);
        if (Uint16) {
          return Uint16;
        }
        LOWORD(__b[15]) = __b[15] & 0xFF7F | 0x80;
        break;
      case 0x44u:
        std::string __src = 0;
        size_t v25 = 0;
        unsigned int Uint16 = ot::Spinel::Decoder::ReadUtf8((ot::Spinel::Decoder *)v29, (const char **)&__src);
        if (Uint16) {
          return Uint16;
        }
        size_t v25 = (unsigned __int16)ot::StringLength((ot *)__src, (const char *)0x10);
        memcpy(&__b[6], __src, v25);
        *((unsigned char *)&__b[6] + v25) = 0;
        LOWORD(__b[15]) = __b[15] & 0xFFF7 | 8;
        break;
      case 0x45u:
        memset(v24, 0, sizeof(v24));
        unsigned int Uint16 = ot::Spinel::Decoder::ReadData((ot::Spinel::Decoder *)v29, (const unsigned __int8 **)&v24[1], v24);
        if (Uint16) {
          return Uint16;
        }
        if (v24[0] != 8) {
          return 7;
        }
        memcpy((char *)&__b[8] + 1, *(const void **)&v24[1], v24[0]);
        LOWORD(__b[15]) = __b[15] & 0xFFEF | 0x10;
        break;
      case 0x46u:
        *(void *)&__n[1] = 0;
        __n[0] = 0;
        unsigned int Uint16 = ot::Spinel::Decoder::ReadData((ot::Spinel::Decoder *)v29, (const unsigned __int8 **)&__n[1], __n);
        if (Uint16) {
          return Uint16;
        }
        if (__n[0] != 16) {
          return 7;
        }
        memcpy(&__b[4], *(const void **)&__n[1], __n[0]);
        LOWORD(__b[15]) = __b[15] & 0xFFFB | 4;
        break;
      case 0x4Bu:
        int v20 = 0;
        unsigned __int16 v19 = 0;
        unsigned int Uint16 = ot::Spinel::Decoder::ReadData((ot::Spinel::Decoder *)v29, (const unsigned __int8 **)&v20, &v19);
        if (Uint16) {
          return Uint16;
        }
        if (v19 != 16) {
          return 7;
        }
        *(_OWORD *)((char *)&__b[11] + 6) = *(_OWORD *)v20;
        LOWORD(__b[15]) = __b[15] & 0xFDFF | 0x200;
        break;
      case 0x62u:
        uint64_t v23 = 0;
        unsigned __int8 v22 = 0;
        unsigned int Uint16 = ot::Spinel::Decoder::ReadIp6Address((ot::Spinel::Decoder *)v29, &v23);
        if (Uint16) {
          return Uint16;
        }
        unsigned int Uint16 = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)v29, &v22);
        if (Uint16) {
          return Uint16;
        }
        if (v22 != 64) {
          return 7;
        }
        *(void *)((char *)&__b[9] + 1) = *(void *)v23;
        LOWORD(__b[15]) = __b[15] & 0xFFDF | 0x20;
        break;
      case 0x151Eu:
        unsigned int Uint16 = ot::Spinel::Decoder::ReadUint32((ot::Spinel::Decoder *)v29, (unsigned int *)&__b[10] + 1);
        if (Uint16) {
          return Uint16;
        }
        LOWORD(__b[15]) = __b[15] & 0xFFBF | 0x40;
        break;
      case 0x151Fu:
        unsigned __int8 v16 = 1;
        unsigned int Uint16 = ot::Spinel::Decoder::ReadUint16((ot::Spinel::Decoder *)v29, (unsigned __int16 *)&__b[13] + 3);
        if (Uint16) {
          return Uint16;
        }
        unsigned int Uint16 = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)v29, &v17);
        if (Uint16) {
          return Uint16;
        }
        if ((unsigned __int16)otThreadGetVersion() >= 3u)
        {
          __int16 RemainingLengthInStruct = ot::Spinel::Decoder::GetRemainingLengthInStruct((ot::Spinel::Decoder *)v29);
          char v5 = v4 | (RemainingLengthInStruct == 0);
          if ((v5 & 1) == 0)
          {
            unsigned int Uint16 = ot::Spinel::Decoder::ReadUint8((ot::Spinel::Decoder *)v29, &v18);
            if (Uint16) {
              return Uint16;
            }
            ++v16;
          }
        }
        ot::SecurityPolicy::SetFlags((ot::SecurityPolicy *)((char *)&__b[13] + 6), (char *)&v17, v16);
        LOWORD(__b[15]) = __b[15] & 0xFBFF | 0x400;
        break;
    }
    unsigned int Uint16 = ot::Spinel::Decoder::CloseStruct((ot::Spinel::Decoder *)v29);
    if (Uint16) {
      return Uint16;
    }
  }
  __b[0] = 0;
  __b[1] = 0;
  LOWORD(__b[15]) = __b[15] & 0xFFFE | 1;
  uint64_t v6 = (ot::Instance *)ot::MeshCoP::Dataset::SetFrom((ot::MeshCoP::Dataset *)v35, (const ot::MeshCoP::Dataset::Info *)__b);
  unsigned int Uint16 = v6;
  if (!v6)
  {
    uint64_t v7 = ot::Instance::Get(v6);
    unsigned __int16 v14 = (ot::SettingsDriver *)ot::Instance::Get<ot::SettingsDriver>((uint64_t)v7);
    if (v30) {
      __int16 v8 = 1;
    }
    else {
      __int16 v8 = 2;
    }
    __int16 v12 = v8;
    ot::MeshCoP::Dataset::GetBytes((ot::MeshCoP::Dataset *)v35);
    uint64_t v13 = v9;
    unsigned __int16 Size = ot::MeshCoP::Dataset::GetSize((ot::MeshCoP::Dataset *)v35);
    return ot::SettingsDriver::Set(v14, v12, v13, Size);
  }
  return Uint16;
}

uint64_t ot::SettingsDriver::Deinit(ot::SettingsDriver *this)
{
  return otPlatSettingsDeinit();
}

{
  return ot::SettingsDriver::Deinit(this);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextRadioTimeRecalcStart(uint64_t a1)
{
  return *(void *)(a1 + 10072);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextRadioTimeRecalcStart(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddChildEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(a1, 2000021, "S", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddChildEntry(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearChildEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Remove(a1, 2000021, "S", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearChildEntry(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNow(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9335)) {
    return otPlatTimeGet() + *(void *)(a1 + 10080);
  }
  else {
    return -1;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNow(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetBusSpeed(uint64_t a1)
{
  return ot::Posix::HdlcInterface::GetBusSpeed((ot::Posix::HdlcInterface *)(a1 + 8448));
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetBusSpeed(a1);
}

uint64_t ot::Posix::HdlcInterface::GetBusSpeed(ot::Posix::HdlcInterface *this)
{
  return *((unsigned int *)this + 11);
}

{
  return ot::Posix::HdlcInterface::GetBusSpeed(this);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetChannelMaxTransmitPower(uint64_t a1, unsigned __int8 a2, char a3)
{
  if (a2 >= 0xBu && a2 <= 0x19u)
  {
    ot::MaxPowerTable::SetTransmitPower(a1 + 10088, a2, a3);
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 43, "Cc", v3, v4, v5, v6, v7, a2);
  }
  else
  {
    return 7;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetChannelMaxTransmitPower(a1, a2, a3);
}

void ot::DataPollSender::HandlePollTimer(ot::DataPollSender *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ot::MaxPowerTable::SetTransmitPower(uint64_t this, unsigned __int8 a2, char a3)
{
  *(unsigned char *)(this + a2 - 11) = a3;
  return this;
}

{
  return ot::MaxPowerTable::SetTransmitPower(this, a2, a3);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithPropertyFormatV(uint64_t a1, uint64_t a2, int a3, int a4, unsigned char *a5, char **a6)
{
  *(void *)(a1 + 8560) = a2;
  LODWORD(result) = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestV(a1, a3, a4, a5, a6);
  *(void *)(a1 + 8560) = 0;
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithPropertyFormatV(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetWithParam(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v17 = a2;
  if (pciNotOpen(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 8548)) {
      __assert_rtn("GetWithParam", "radio_spinel_impl.hpp", 2418, "mWaitingTid == 0");
    }
    do
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1);
      *(void *)(a1 + 8568) = &a9;
      unsigned int v14 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithPropertyFormat(a1, a5, 2, v17, "D", v9, v10, v11, a3);
    }
    while ((*(_WORD *)(a1 + 10044) & 0x40) != 0);
    return v14;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetWithParam(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithPropertyFormat(uint64_t a1, uint64_t a2, int a3, int a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithPropertyFormatV(a1, a2, a3, a4, a5, &a9);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithPropertyFormat(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandV(uint64_t a1, int a2, int a3, int a4, unsigned char *a5, char **a6)
{
  *(_DWORD *)(a1 + 8576) = a2;
  LODWORD(result) = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestV(a1, a3, a4, a5, a6);
  *(_DWORD *)(a1 + 8576) = 0;
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandV(a1, a2, a3, a4, a5, a6);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioSpinelMetrics(uint64_t a1)
{
  return a1 + 10104;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioSpinelMetrics(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::MemPeek(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  *(void *)(a1 + 10120) = a2;
  *(void *)(a1 + 10128) = a3;
  if (pciNotOpen(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 8548)) {
      __assert_rtn("MemPeek", "radio_spinel_impl.hpp", 2481, "mWaitingTid == 0");
    }
    do
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, v9, v10, v11, v12, v13, v14, v15);
      unsigned int v18 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandVNK(a1, 19, 0x12u, a4, &a9);
    }
    while ((*(_WORD *)(a1 + 10044) & 0x40) != 0);
    return v18;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::MemPeek(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandVNK(uint64_t a1, int a2, unsigned int a3, unsigned char *a4, char **a5)
{
  *(_DWORD *)(a1 + 8576) = a2;
  LODWORD(result) = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestVNK(a1, a3, a4, a5);
  *(_DWORD *)(a1 + 8576) = 0;
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestWithExpectedCommandVNK(a1, a2, a3, a4, a5);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetHostPowerState(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 12, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set host power state failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetHostPowerState(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleReceivedFrame(void *a1, char *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = a1;
  uint64_t v40 = a2;
  unsigned __int16 v39 = a3;
  uint64_t v38 = a4;
  uint64_t v37 = a5;
  char v36 = a6 & 1;
  unsigned int v28 = a1;
  *a1 = a4;
  a1[1] = v37;
  uint64_t v8 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf((uint64_t)a1, (char *)*a1, *((_DWORD *)a1 + 2) - *(_DWORD *)a1, "\n", a5, a6, a7, a8, v27[0]);
  *v28 += v8;
  int v35 = v27;
  unint64_t v29 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v8, v9);
  BOOL v30 = (unsigned __int8 *)&v27[-v29];
  uint64_t v34 = v10;
  ot::Spinel::parse_string_into_data((ot::Spinel *)&v27[-v29], (unsigned __int8 *)v39, v40, v11);
  unsigned int v33 = 0;
  char v32 = 0;
  int v31 = 0;
  if ((v36 & 1) == 1)
  {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelLogSpinelFrame((uint64_t)v28, (uint64_t)v30, v39, 1, v12, v13, v14, v15);
  }
  else
  {
    unsigned int v33 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelLogSpinelFrame((uint64_t)v28, (uint64_t)v30, v39, 0, v12, v13, v14, v15);
    if (!v33)
    {
      int v31 = spinel_datatype_unpack(v30, v39, "C", v16, v17, v18, v19, v20, (uint64_t)&v32);
      if (v31 > 0 && (v32 & 0x80) == 0x80 && !((v32 & 0x30) >> 4))
      {
        if ((v32 & 0xF) != 0) {
          return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleResponse((uint64_t)v28, v30, v39, v21, v22, v23, v24, v25);
        }
        else {
          return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleNotification((uint64_t)v28, v30, v39, v21, v22, v23, v24, v25);
        }
      }
      else
      {
        return 6;
      }
    }
  }
  return v33;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleReceivedFrame(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(uint64_t a1, char *a2, unsigned int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  signed int v11 = vsnprintf(a2, a3, a4, &a9);
  if (v11 >= 0) {
    return ot::Min<unsigned int>(v11, a3 - 1);
  }
  else {
    return 0;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelLogSpinelFrame(uint64_t a1, uint64_t a2, unsigned __int16 a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v393 = v428;
  uint64_t v481 = a1;
  uint64_t v480 = a2;
  unsigned __int16 v479 = a3;
  char v478 = a4 & 1;
  uint64_t v392 = a1;
  uint64_t v8 = (ot::Instance *)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "\n", a5, a6, a7, a8, v348);
  *(void *)v392 += v8;
  int v477 = 0;
  int v476 = 0;
  char v475 = 0;
  int v474 = 0;
  int v473 = 0;
  uint64_t v472 = 0;
  int v471 = 0;
  uint64_t v470 = 0;
  if ((int)otLoggingGetLevel(v8) < 5) {
    goto LABEL_218;
  }
  uint64_t v16 = v393;
  uint64_t v17 = "Sent spinel frame";
  if ((v478 & 1) == 0) {
    uint64_t v17 = "Received spinel frame";
  }
  *((void *)v393 + 34) = v17;
  uint64_t v18 = (unsigned __int8 *)*((void *)v16 + 40);
  unint64_t v349 = (unint64_t)&v474;
  unint64_t v350 = (unint64_t)&v473;
  unint64_t v351 = (unint64_t)&v472;
  unint64_t v352 = (unint64_t)&v471;
  *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v18, v479, "CiiD", v11, v12, v13, v14, v15, (uint64_t)&v475);
  if (*((int *)v393 + 77) <= 0)
  {
    *((_DWORD *)v393 + 78) = 6;
    goto LABEL_218;
  }
  int v390 = *(char **)v392;
  unsigned int v391 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
  uint64_t v387 = *((void *)v393 + 34);
  unsigned int v388 = (v475 & 0xC0) >> 6;
  int v389 = v475 & 0xF;
  uint64_t v19 = spinel_command_to_cstr(*((_DWORD *)v393 + 75));
  unint64_t v349 = v388;
  unint64_t v350 = v389;
  unint64_t v351 = (unint64_t)v19;
  *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v390, v391, "%s, flg:0x%x, tid:%u, cmd:%s", v20, v21, v22, v23, v387);
  if (*((_DWORD *)v393 + 75) == 1) {
    goto LABEL_218;
  }
  int v385 = *(char **)v392;
  unsigned int v386 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
  char v24 = spinel_prop_key_to_cstr(*((_DWORD *)v393 + 74));
  *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v385, v386, ", key:%s", v25, v26, v27, v28, v24);
  if (*((_DWORD *)v393 + 75) == 2) {
    goto LABEL_218;
  }
  int v384 = *((_DWORD *)v393 + 74);
  switch(v384)
  {
    case 0:
      unsigned int v33 = v393;
      *((_DWORD *)v393 + 67) = 0;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v33 + 36), *((_DWORD *)v33 + 71), "i", v11, v12, v13, v14, v15, (uint64_t)v469);
      if (*((int *)v393 + 77) > 0)
      {
        uint64_t v382 = *(char **)v392;
        unsigned int v383 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
        char v34 = spinel_status_to_cstr(*((_DWORD *)v393 + 67));
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v382, v383, ", status:%s", v35, v36, v37, v38, v34);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case 1:
      unsigned int v84 = v393;
      *((_DWORD *)v393 + 41) = 0;
      *((_DWORD *)v84 + 40) = 0;
      unsigned int v85 = (unsigned __int8 *)*((void *)v84 + 36);
      unsigned int v86 = *((_DWORD *)v84 + 71);
      unint64_t v349 = (unint64_t)&v457;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v85, v86, "ii", v11, v12, v13, v14, v15, (uint64_t)v458);
      if (*((int *)v393 + 77) > 0)
      {
        int v87 = *(char **)v392;
        unsigned int v88 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
        uint64_t v89 = (unsigned char *)*((unsigned int *)v393 + 40);
        LODWORD(v348) = *((_DWORD *)v393 + 41);
        unint64_t v349 = (unint64_t)v89;
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v87, v88, ", major:%u, minor:%u", v12, v13, v14, v15, v348);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case 2:
      int v94 = v393;
      *((void *)v393 + 16) = 0;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v94 + 36), *((_DWORD *)v94 + 71), "U", v11, v12, v13, v14, v15, (uint64_t)v454);
      if (*((int *)v393 + 77) >= 0) {
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, ", version:%s", v12, v13, v14, v15, *((void *)v393 + 16));
      }
      else {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case 5:
      uint64_t v76 = v392;
      *((_DWORD *)v393 + 42) = 0;
      *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v76, *(char **)v76, *(_DWORD *)(v76 + 8) - *(_DWORD *)v76, ", caps:", v12, v13, v14, v15, v348);
      while (*((_DWORD *)v393 + 71))
      {
        *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v393 + 36), *((_DWORD *)v393 + 71), "i", v11, v12, v13, v14, v15, (uint64_t)v459);
        if (*((int *)v393 + 77) <= 0)
        {
          *((_DWORD *)v393 + 78) = 6;
          goto LABEL_218;
        }
        uint64_t v77 = v392;
        uint64_t v78 = (int *)v393;
        *((void *)v393 + 36) += *((int *)v393 + 77);
        v78[71] -= v78[77];
        v376 = *(char **)v77;
        unsigned int v377 = *(void *)(v77 + 8) - *(void *)v77;
        char v79 = spinel_capability_to_cstr(v78[42]);
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v376, v377, "%s ", v80, v81, v82, v83, v79);
      }
      goto LABEL_218;
    case 8:
      goto LABEL_184;
    case 32:
      goto LABEL_62;
    case 33:
      goto LABEL_78;
    case 34:
      goto LABEL_142;
  }
  if ((v384 - 36) <= 3) {
    goto LABEL_65;
  }
  switch(v384)
  {
    case ')':
LABEL_142:
      char v90 = v393;
      *((_DWORD *)v393 + 39) = 0;
      *((_DWORD *)v90 + 39) = 0;
      *((void *)v90 + 18) = 0;
      *((void *)v90 + 18) = v491;
      *((_DWORD *)v90 + 35) = 0;
      *((_DWORD *)v90 + 35) = 32;
      uint64_t v91 = (unsigned __int8 *)*((void *)v90 + 36);
      unsigned int v92 = *((_DWORD *)v90 + 71);
      unint64_t v349 = (unint64_t)&v456;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack_in_place(v91, v92, "D", v11, v12, v13, v14, v15, (uint64_t)v491);
      if (*((int *)v393 + 77) > 0)
      {
        while (*((_DWORD *)v393 + 35))
        {
          unsigned __int8 v455 = 0;
          *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v393 + 18), *((_DWORD *)v393 + 35), "C", v11, v12, v13, v14, v15, (uint64_t)&v455);
          if (*((int *)v393 + 77) <= 0)
          {
            *((_DWORD *)v393 + 78) = 6;
            goto LABEL_218;
          }
          if (v455 >= 0x20u)
          {
            *((_DWORD *)v393 + 78) = 6;
            goto LABEL_218;
          }
          unsigned int v93 = v393;
          *((_DWORD *)v393 + 39) |= 1 << v455;
          *((void *)v93 + 18) += *((int *)v93 + 77);
          *((_DWORD *)v93 + 35) -= *((_DWORD *)v93 + 77);
        }
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, ", channelMask:0x%08x", v12, v13, v14, v15, *((_DWORD *)v393 + 39));
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case '*':
LABEL_65:
      unsigned __int16 v39 = v393;
      *((void *)v393 + 32) = 0;
      *((void *)v39 + 32) = 0;
      v467[0] = 0;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v39 + 36), *((_DWORD *)v39 + 71), "c", v11, v12, v13, v14, v15, (uint64_t)v467);
      if (*((int *)v393 + 77) > 0)
      {
        unsigned int v40 = *((_DWORD *)v393 + 74);
        BOOL v41 = v40 > 0x24;
        uint64_t v42 = v40 - 36;
        uint64_t v381 = v42;
        if (v41)
        {
          uint64_t v44 = v42;
          char v43 = 1;
        }
        else
        {
          uint64_t v44 = v42;
          char v43 = 0;
        }
        if ((v43 & 1) == 0)
        {
          switch(v44)
          {
            case 0:
              *((void *)v393 + 32) = "threshold";
              break;
            case 1:
              *((void *)v393 + 32) = "power";
              break;
            case 2:
              *((void *)v393 + 32) = "rssi";
              break;
            case 3:
              *((void *)v393 + 32) = "sensitivity";
              break;
            case 4:
            case 5:
              break;
            case 6:
              *((void *)v393 + 32) = "gain";
              break;
            default:
              JUMPOUT(0);
          }
        }
        unsigned int v45 = *(char **)v392;
        unsigned int v46 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
        uint64_t v348 = *((void *)v393 + 32);
        unint64_t v349 = v467[0];
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v45, v46, ", %s:%d", v12, v13, v14, v15, v348);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case '+':
      goto LABEL_128;
    case ',':
      goto LABEL_92;
    case '-':
      if (*((_DWORD *)v393 + 75) == 4)
      {
        char v400 = 0;
        __int16 v399 = 0;
        uint64_t v398 = 0;
        unsigned int v397 = 0;
        unsigned int v339 = (unsigned __int8 *)*((void *)v393 + 36);
        unsigned int v340 = *((_DWORD *)v393 + 71);
        unint64_t v349 = (unint64_t)&v399;
        unint64_t v350 = (unint64_t)&v398;
        unint64_t v351 = (unint64_t)&v397;
        *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v339, v340, "Csd", v11, v12, v13, v14, v15, (uint64_t)&v400);
        if (*((int *)v393 + 77) > 0)
        {
          unsigned int v341 = *(char **)v392;
          unsigned int v342 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
          unint64_t v349 = v399;
          *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v341, v342, ", ch:%u, actualPower:%d, rawPowerSetting:", v12, v13, v14, v15, v400);
          for (unsigned __int16 i = 0; i < v397; ++i)
            *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, "%02x", v12, v13, v14, v15, *(unsigned char *)(v398 + i));
        }
        else
        {
          *((_DWORD *)v393 + 78) = 6;
        }
      }
      goto LABEL_218;
    case '.':
      char v395 = 0;
      __int16 v394 = 0;
      unsigned int v343 = (unsigned __int8 *)*((void *)v393 + 36);
      unsigned int v344 = *((_DWORD *)v393 + 71);
      unint64_t v349 = (unint64_t)&v394;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v343, v344, "Cs", v11, v12, v13, v14, v15, (uint64_t)&v395);
      if (*((int *)v393 + 77) > 0)
      {
        unsigned int v345 = *(char **)v392;
        unsigned int v346 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
        unint64_t v349 = v394;
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v345, v346, ", ch:%u, targetPower:%d", v12, v13, v14, v15, v395);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case '0':
      goto LABEL_78;
    case '1':
      char v405 = 16;
      unsigned int v404 = 0;
      unsigned int v332 = (unsigned __int8 *)*((void *)v393 + 36);
      unsigned int v333 = *((_DWORD *)v393 + 71);
      unint64_t v349 = (unint64_t)&v404;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v332, v333, "D", v11, v12, v13, v14, v15, (uint64_t)v483);
      if (*((int *)v393 + 77) > 0)
      {
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, ", channels:", v12, v13, v14, v15, v348);
        for (unsigned __int8 j = 0; j < v404; ++j)
          *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, "%u ", v12, v13, v14, v15, v483[j]);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case '2':
LABEL_92:
      BOOL v50 = v393;
      *((void *)v393 + 28) = 0;
      *((void *)v50 + 28) = 0;
      v465[0] = 0;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v50 + 36), *((_DWORD *)v50 + 71), "S", v11, v12, v13, v14, v15, (uint64_t)v465);
      if (*((int *)v393 + 77) > 0)
      {
        int v379 = *((_DWORD *)v393 + 74);
        switch(v379)
        {
          case 44:
            *((void *)v393 + 28) = "region";
            break;
          case 50:
            *((void *)v393 + 28) = "period";
            break;
          case 53:
            *((void *)v393 + 28) = "saddr";
            break;
          case 54:
            *((void *)v393 + 28) = "panid";
            break;
          case 4868:
            *((void *)v393 + 28) = "saddr";
            break;
        }
        unsigned __int8 v51 = *(char **)v392;
        unsigned int v52 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
        uint64_t v348 = *((void *)v393 + 28);
        unint64_t v349 = v465[0];
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v51, v52, ", %s:0x%04x", v12, v13, v14, v15, v348);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case '4':
LABEL_184:
      unsigned int v169 = v393;
      unsigned int v425 = 0;
      *((void *)v393 + 46) = 0;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack_in_place(*((unsigned __int8 **)v169 + 36), *((_DWORD *)v169 + 71), "E", v11, v12, v13, v14, v15, (uint64_t)v485);
      if (*((int *)v393 + 77) > 0)
      {
        if (*((_DWORD *)v393 + 74) == 8) {
          v372 = "eui64";
        }
        else {
          v372 = "laddr";
        }
        unsigned int v425 = v372;
        unsigned int v170 = *(char **)v392;
        unsigned int v171 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
        v371 = &v348;
        unint64_t v349 = v485[0];
        unint64_t v350 = v485[1];
        unint64_t v351 = v485[2];
        unint64_t v352 = v485[3];
        unint64_t v353 = v485[4];
        unint64_t v354 = v485[5];
        unint64_t v355 = v485[6];
        v356 = (unsigned int *)v485[7];
        unsigned int v172 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v170, v171, ", %s:%02x%02x%02x%02x%02x%02x%02x%02x", v12, v13, v14, v15, (char)v372);
        *(void *)v392 += v172;
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
  }
  if (v384 == 54 || v384 == 53) {
    goto LABEL_92;
  }
  switch(v384)
  {
    case '7':
      goto LABEL_62;
    case '8':
      goto LABEL_78;
    case '9':
LABEL_128:
      uint64_t v68 = v393;
      *((void *)v393 + 22) = 0;
      v461[0] = 0;
      char v460 = 0;
      uint64_t v69 = (unsigned __int8 *)*((void *)v68 + 36);
      unsigned int v70 = *((_DWORD *)v68 + 71);
      unint64_t v349 = (unint64_t)&v460;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v69, v70, "Cc", v11, v12, v13, v14, v15, (uint64_t)v461);
      if (*((int *)v393 + 77) > 0)
      {
        uint64_t v71 = v392;
        uint64_t v72 = v393;
        uint64_t v73 = "rssi";
        if (*((_DWORD *)v393 + 74) != 57) {
          uint64_t v73 = "power";
        }
        *((void *)v393 + 22) = v73;
        uint64_t v74 = *(char **)v71;
        unsigned int v75 = *(_DWORD *)(v71 + 8) - *(_DWORD *)v71;
        unint64_t v349 = *((void *)v72 + 22);
        unint64_t v350 = v460;
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v71, v74, v75, ", channel:%u, %s:%d", v12, v13, v14, v15, v461[0]);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case 'p':
      v149 = v393;
      *((_DWORD *)v393 + 11) = 0;
      *((_DWORD *)v149 + 11) = 151;
      v150 = (unsigned __int8 *)*((void *)v149 + 36);
      unsigned int v151 = *((_DWORD *)v149 + 71);
      unint64_t v349 = (unint64_t)&v435;
      int v152 = spinel_datatype_unpack_in_place(v150, v151, "D", v11, v12, v13, v14, v15, (uint64_t)v489);
      v153 = v393;
      *((_DWORD *)v393 + 77) = v152;
      if (*((unsigned int *)v153 + 11) >= 0x97uLL) {
        __assert_rtn("SpinelLogSpinelFrame", "spinel_parser_impl.hpp", 1153, "stringLength < sizeof(debugString)");
      }
      if (*((int *)v393 + 77) > 0)
      {
        uint64_t v154 = v392;
        v489[*((unsigned int *)v393 + 11)] = 0;
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v154, *(char **)v154, *(_DWORD *)(v154 + 8) - *(_DWORD *)v154, ", debug:%s", v12, v13, v14, v15, (char)v489);
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case 'q':
      if (*((_DWORD *)v393 + 75) == 6)
      {
        uint64_t v95 = v393;
        unsigned __int16 v443 = 0;
        char v442 = 0;
        *((_DWORD *)v393 + 14) = 0;
        unsigned int v96 = (unsigned __int8 *)*((void *)v95 + 36);
        unsigned int v97 = *((_DWORD *)v95 + 71);
        v375 = &v348;
        unint64_t v349 = (unint64_t)&v445;
        unint64_t v350 = (unint64_t)&v448;
        unint64_t v351 = (unint64_t)&v442;
        unint64_t v352 = (unint64_t)&v443;
        unint64_t v353 = (unint64_t)v446;
        unint64_t v354 = (unint64_t)&v449;
        unint64_t v355 = (unint64_t)&v447;
        v356 = (unsigned int *)&v441;
        int v98 = spinel_datatype_unpack(v96, v97, "dccSt(CCX)t(i)", v11, v12, v13, v14, v15, (uint64_t)v444);
        *((_DWORD *)v393 + 77) = v98;
        if (*((int *)v393 + 77) > 0)
        {
          uint64_t v99 = *(char **)v392;
          unsigned int v100 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
          unint64_t v349 = v448;
          unsigned int v101 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v99, v100, ", len:%u, rssi:%d, ", v12, v13, v14, v15, v445);
          uint64_t v102 = v393;
          unsigned int v103 = v101;
          uint64_t v104 = v392;
          *(void *)v392 += v103;
          uint64_t v105 = *(char **)v104;
          unsigned int v106 = *(_DWORD *)(v104 + 8) - *(_DWORD *)v104;
          uint64_t v107 = (unsigned char *)*((void *)v102 + 10);
          uint64_t v108 = (unsigned char *)*((unsigned int *)v102 + 14);
          unint64_t v349 = v443;
          unint64_t v350 = v446[0];
          unint64_t v351 = v449;
          unint64_t v352 = (unint64_t)v107;
          unint64_t v353 = (unint64_t)v108;
          unsigned int v113 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v104, v105, v106, "noise:%d, flags:0x%04x, channel:%u, lqi:%u, timestamp:%lu, rxerr:%u", v109, v110, v111, v112, v442);
          int v114 = (ot::Spinel **)v393;
          *(void *)v392 += v113;
          v374 = v490;
          v490[0] = 0;
          ot::Spinel::encode_data_into_string(v114[8], (const unsigned __int8 *)v445, v490, (char *)0x401, 0);
          unsigned int v119 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, "\n", v115, v116, v117, v118, v348);
          char v120 = (char)v374;
          unsigned int v121 = v119;
          uint64_t v122 = v392;
          *(void *)v392 += v121;
          unsigned int v127 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v122, *(char **)v122, *(_DWORD *)(v122 + 8) - *(_DWORD *)v122, "Data: %s", v123, v124, v125, v126, v120);
          *(void *)v392 += v127;
        }
        else
        {
          *((_DWORD *)v393 + 78) = 6;
        }
      }
      else if (*((_DWORD *)v393 + 75) == 3)
      {
        char v440 = 0;
        BOOL v439 = 0;
        BOOL v438 = 0;
        BOOL v437 = 0;
        BOOL v436 = 0;
        uint64_t v128 = (unsigned __int8 *)*((void *)v393 + 36);
        unsigned int v129 = *((_DWORD *)v393 + 71);
        unint64_t v349 = (unint64_t)&v440;
        *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v128, v129, "CC", v11, v12, v13, v14, v15, (uint64_t)v446);
        if (*((_DWORD *)v393 + 77) == 2)
        {
          uint64_t v130 = v393;
          *((void *)v393 + 36) += *((int *)v393 + 77);
          *((_DWORD *)v130 + 71) -= *((_DWORD *)v130 + 77);
          uint64_t v131 = (unsigned __int8 *)*((void *)v393 + 36);
          unsigned int v132 = *((_DWORD *)v393 + 71);
          unint64_t v349 = (unint64_t)&v452;
          if ((v440 & 0x40) != 0)
          {
            unint64_t v350 = (unint64_t)&v450;
            unint64_t v351 = (unint64_t)&v450 + 4;
            unint64_t v352 = (unint64_t)&v453;
            unint64_t v353 = (unint64_t)v444;
            unint64_t v354 = (unint64_t)&v445;
            *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v131, v132, "CCLLCd", v11, v12, v13, v14, v15, (uint64_t)&v451);
          }
          else
          {
            unint64_t v350 = (unint64_t)v444;
            unint64_t v351 = (unint64_t)&v445;
            int v133 = spinel_datatype_unpack(v131, v132, "CCd", v11, v12, v13, v14, v15, (uint64_t)&v451);
            uint64_t v134 = v393;
            *((_DWORD *)v393 + 77) = v133;
            *((_DWORD *)v134 + 24) = 0;
            *((_DWORD *)v134 + 25) = 0;
            unsigned __int8 v453 = 0;
          }
          if (*((_DWORD *)v393 + 77) == *((_DWORD *)v393 + 71))
          {
            BOOL v439 = (v440 & 4) == 0;
            BOOL v438 = (v440 & 8) != 0;
            BOOL v437 = (v440 & 0x10) != 0;
            BOOL v436 = (v440 & 0x20) != 0;
            v135 = *(char **)v392;
            unsigned int v136 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
            unint64_t v349 = v446[0];
            unint64_t v350 = v451;
            unint64_t v351 = v452;
            unsigned int v137 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v135, v136, ", len:%u, channel:%u, maxbackoffs:%u, maxretries:%u, ", v12, v13, v14, v15, v445);
            v138 = v393;
            unsigned int v139 = v137;
            uint64_t v140 = v392;
            *(void *)v392 += v139;
            uint64_t v141 = *(char **)v140;
            unsigned int v142 = *(_DWORD *)(v140 + 8) - *(_DWORD *)v140;
            uint64_t v143 = (unsigned char *)*((unsigned int *)v138 + 24);
            unsigned int v144 = (unsigned char *)*((unsigned int *)v138 + 25);
            unint64_t v349 = v438;
            unint64_t v350 = v437;
            unint64_t v351 = v436;
            unint64_t v352 = (unint64_t)v143;
            unint64_t v353 = (unint64_t)v144;
            unint64_t v354 = v453;
            *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v140, v141, v142, "csmaCaEnabled:%u, isHeaderUpdated:%u, isARetx:%u, skipAes:%u, txDelay:%u, txDelayBase:%u, rxChannelAfterTxDone:%u", v145, v146, v147, v148, v439);
          }
          else
          {
            *((_DWORD *)v393 + 78) = 6;
          }
        }
        else
        {
          *((_DWORD *)v393 + 78) = 6;
        }
      }
      goto LABEL_218;
    case 't':
      unsigned int v155 = v393;
      *((void *)v393 + 4) = 0;
      char v433 = 0;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v155 + 36), *((_DWORD *)v155 + 71), "U", v11, v12, v13, v14, v15, (uint64_t)v434);
      if (*((int *)v393 + 77) >= 0)
      {
        v156 = v393;
        *((void *)v393 + 36) += *((int *)v393 + 77);
        *((_DWORD *)v156 + 71) -= *((_DWORD *)v156 + 77);
        *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v156 + 36), *((_DWORD *)v156 + 71), "C", v11, v12, v13, v14, v15, (uint64_t)&v433);
        if (*((int *)v393 + 77) > 0)
        {
          v157 = *(char **)v392;
          unsigned int v158 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
          unint64_t v349 = *((void *)v393 + 4);
          *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v157, v158, ", level:%u, log:%s", v12, v13, v14, v15, v433);
        }
        else
        {
          *((_DWORD *)v393 + 78) = 6;
        }
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
  }
  if (v384 == 177 || v384 == 176)
  {
LABEL_118:
    uint64_t v64 = v393;
    *((void *)v393 + 24) = 0;
    *((_DWORD *)v64 + 47) = 0;
    *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v64 + 36), *((_DWORD *)v64 + 71), "i", v11, v12, v13, v14, v15, (uint64_t)v462);
    if (*((int *)v393 + 77) > 0)
    {
      int v378 = *((_DWORD *)v393 + 74);
      switch(v378)
      {
        case 176:
          *((void *)v393 + 24) = "version";
          break;
        case 177:
          *((void *)v393 + 24) = "min-host-version";
          break;
        case 4619:
          *((void *)v393 + 24) = "caps";
          break;
        default:
          *((void *)v393 + 24) = "";
          break;
      }
      uint64_t v65 = *(char **)v392;
      unsigned int v66 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
      uint64_t v67 = (unsigned char *)*((unsigned int *)v393 + 47);
      uint64_t v348 = *((void *)v393 + 24);
      unint64_t v349 = (unint64_t)v67;
      *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v65, v66, ", %s:%u", v12, v13, v14, v15, v348);
    }
    else
    {
      *((_DWORD *)v393 + 78) = 6;
    }
    goto LABEL_218;
  }
  if (v384 == 2048)
  {
    int v162 = v393;
    char v430 = 0;
    unsigned __int8 v429 = 0;
    *(_DWORD *)uint64_t v393 = 0;
    *(_DWORD *)int v162 = 16;
    int v427 = 16;
    int v426 = 16;
    v163 = (unsigned __int8 *)*((void *)v162 + 36);
    unsigned int v164 = *((_DWORD *)v162 + 71);
    v373 = &v348;
    unint64_t v349 = (unint64_t)&v429;
    unint64_t v350 = (unint64_t)&v488;
    unint64_t v351 = (unint64_t)v428;
    unint64_t v352 = (unint64_t)&v487;
    unint64_t v353 = (unint64_t)&v427;
    unint64_t v354 = (unint64_t)&v486;
    unint64_t v355 = (unint64_t)&v426;
    int v165 = spinel_datatype_unpack(v163, v164, "CCddd", v11, v12, v13, v14, v15, (uint64_t)&v430);
    *((_DWORD *)v393 + 77) = v165;
    if (*((int *)v393 + 77) > 0)
    {
      v166 = *(char **)v392;
      unsigned int v167 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
      unint64_t v349 = v429;
      unsigned int v168 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v166, v167, ", keyIdMode:%u, keyId:%u, prevKey:***, currKey:***, nextKey:***", v12, v13, v14, v15, v430);
      *(void *)v392 += v168;
    }
    else
    {
      *((_DWORD *)v393 + 78) = 6;
    }
    goto LABEL_218;
  }
  if (v384 == 2050 || v384 == 2049)
  {
    int v57 = v393;
    *((void *)v393 + 26) = 0;
    *((_DWORD *)v57 + 51) = 0;
    *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v57 + 36), *((_DWORD *)v57 + 71), "L", v11, v12, v13, v14, v15, (uint64_t)v463);
    if (*((int *)v393 + 77) > 0)
    {
      uint64_t v58 = v392;
      uint64_t v59 = v393;
      BOOL v60 = "timestamp";
      if (*((_DWORD *)v393 + 74) != 2050) {
        BOOL v60 = "counter";
      }
      *((void *)v393 + 26) = v60;
      unsigned __int8 v61 = *(char **)v58;
      unsigned int v62 = *(_DWORD *)(v58 + 8) - *(_DWORD *)v58;
      uint64_t v63 = *((void *)v59 + 26);
      unint64_t v349 = *((unsigned int *)v59 + 51);
      *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v58, v61, v62, ", %s:%u", v12, v13, v14, v15, v63);
    }
    else
    {
      *((_DWORD *)v393 + 78) = 6;
    }
    goto LABEL_218;
  }
  if (v384 == 2051)
  {
    unsigned __int16 v402 = 0;
    unsigned __int8 v401 = 0;
    unsigned int v334 = (unsigned __int8 *)*((void *)v393 + 36);
    unsigned int v335 = *((_DWORD *)v393 + 71);
    unint64_t v349 = (unint64_t)v482;
    unint64_t v350 = (unint64_t)&v401;
    *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v334, v335, "SEC", v11, v12, v13, v14, v15, (uint64_t)&v402);
    if (*((int *)v393 + 77) > 0)
    {
      unsigned int v336 = *(char **)v392;
      unsigned int v337 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
      v367 = &v348;
      unint64_t v349 = v482[0];
      unint64_t v350 = v482[1];
      unint64_t v351 = v482[2];
      unint64_t v352 = v482[3];
      unint64_t v353 = v482[4];
      unint64_t v354 = v482[5];
      unint64_t v355 = v482[6];
      v356 = (unsigned int *)v482[7];
      unint64_t v357 = v401;
      unsigned int v338 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v336, v337, ", saddr:%04x, extaddr:%02x%02x%02x%02x%02x%02x%02x%02x, flags:0x%02x", v402, v13, v14, v15, v402);
      *(void *)v392 += v338;
    }
    else
    {
      *((_DWORD *)v393 + 78) = 6;
    }
    goto LABEL_218;
  }
  if (v384 == 2053 || v384 == 2052)
  {
LABEL_78:
    uint64_t v47 = v393;
    *((void *)v393 + 30) = 0;
    *((void *)v47 + 30) = 0;
    v466[0] = 0;
    *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v47 + 36), *((_DWORD *)v47 + 71), "C", v11, v12, v13, v14, v15, (uint64_t)v466);
    if (*((int *)v393 + 77) > 0)
    {
      int v380 = *((_DWORD *)v393 + 74);
      switch(v380)
      {
        case 33:
          *((void *)v393 + 30) = "channel";
          break;
        case 48:
          *((void *)v393 + 30) = "state";
          break;
        case 56:
          *((void *)v393 + 30) = "mode";
          break;
        case 2052:
          *((void *)v393 + 30) = "accuracy";
          break;
        case 2053:
          *((void *)v393 + 30) = "uncertainty";
          break;
      }
      unsigned int v48 = *(char **)v392;
      unsigned int v49 = *(_DWORD *)(v392 + 8) - *(_DWORD *)v392;
      uint64_t v348 = *((void *)v393 + 30);
      unint64_t v349 = v466[0];
      *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, v48, v49, ", %s:%u", v12, v13, v14, v15, v348);
    }
    else
    {
      *((_DWORD *)v393 + 78) = 6;
    }
    goto LABEL_218;
  }
  switch(v384)
  {
    case 4619:
      goto LABEL_118;
    case 4620:
      char v181 = (unsigned __int8 *)*((void *)v393 + 36);
      unsigned int v182 = *((_DWORD *)v393 + 71);
      v368 = &v406;
      v369 = &v348;
      unint64_t v349 = (unint64_t)&v408;
      unint64_t v350 = (unint64_t)&v409;
      unint64_t v351 = (unint64_t)&v410;
      unint64_t v352 = (unint64_t)&v411;
      unint64_t v353 = (unint64_t)&v412;
      unint64_t v354 = (unint64_t)&v413;
      unint64_t v355 = (unint64_t)&v414;
      v356 = &v415;
      unint64_t v357 = (unint64_t)&v416;
      v358 = &v417;
      v359 = &v418;
      v360 = &v419;
      v361 = &v420;
      v362 = &v421;
      v363 = &v422;
      v364 = &v423;
      v365 = &v424;
      v366 = &v406;
      int v183 = spinel_datatype_unpack(v181, v182, "t(LLLLLLLL)t(LLLLLLLLL)bL", (uint64_t)&v415, (uint64_t)&v414, (uint64_t)&v413, (uint64_t)&v412, (uint64_t)&v411, (uint64_t)&v407);
      *((_DWORD *)v393 + 77) = v183;
      if (*((int *)v393 + 77) > 0)
      {
        char v184 = ot::ToUlong(v407);
        otLogDebgPlat(" txRequest:%lu", v185, v186, v187, v188, v189, v190, v191, v184);
        char v192 = ot::ToUlong(v408);
        otLogDebgPlat(" txGrantImmediate:%lu", v193, v194, v195, v196, v197, v198, v199, v192);
        char v200 = ot::ToUlong(v409);
        otLogDebgPlat(" txGrantWait:%lu", v201, v202, v203, v204, v205, v206, v207, v200);
        char v208 = ot::ToUlong(v410);
        otLogDebgPlat(" txGrantWaitActivated:%lu", v209, v210, v211, v212, v213, v214, v215, v208);
        char v216 = ot::ToUlong(v411);
        otLogDebgPlat(" txGrantWaitTimeout:%lu", v217, v218, v219, v220, v221, v222, v223, v216);
        char v224 = ot::ToUlong(v412);
        otLogDebgPlat(" txGrantDeactivatedDuringRequest:%lu", v225, v226, v227, v228, v229, v230, v231, v224);
        char v232 = ot::ToUlong(v413);
        otLogDebgPlat(" txDelayedGrant:%lu", v233, v234, v235, v236, v237, v238, v239, v232);
        char v240 = ot::ToUlong(v414);
        otLogDebgPlat(" avgTxRequestToGrantTime:%lu", v241, v242, v243, v244, v245, v246, v247, v240);
        char v248 = ot::ToUlong(v415);
        otLogDebgPlat(" rxRequest:%lu", v249, v250, v251, v252, v253, v254, v255, v248);
        char v256 = ot::ToUlong(v416);
        otLogDebgPlat(" rxGrantImmediate:%lu", v257, v258, v259, v260, v261, v262, v263, v256);
        char v264 = ot::ToUlong(v417);
        otLogDebgPlat(" rxGrantWait:%lu", v265, v266, v267, v268, v269, v270, v271, v264);
        char v272 = ot::ToUlong(v418);
        otLogDebgPlat(" rxGrantWaitActivated:%lu", v273, v274, v275, v276, v277, v278, v279, v272);
        char v280 = ot::ToUlong(v419);
        otLogDebgPlat(" rxGrantWaitTimeout:%lu", v281, v282, v283, v284, v285, v286, v287, v280);
        char v288 = ot::ToUlong(v420);
        otLogDebgPlat(" rxGrantDeactivatedDuringRequest:%lu", v289, v290, v291, v292, v293, v294, v295, v288);
        char v296 = ot::ToUlong(v421);
        otLogDebgPlat(" rxDelayedGrant:%lu", v297, v298, v299, v300, v301, v302, v303, v296);
        char v304 = ot::ToUlong(v422);
        otLogDebgPlat(" avgRxRequestToGrantTime:%lu", v305, v306, v307, v308, v309, v310, v311, v304);
        char v312 = ot::ToUlong(v423);
        otLogDebgPlat(" rxGrantNone:%lu", v313, v314, v315, v316, v317, v318, v319, v312);
        otLogDebgPlat(" stopped:%u", v320, v321, v322, v323, v324, v325, v326, v424 & 1);
        unsigned int v331 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, " grantGlitch:%u", v327, v328, v329, v330, v406);
        *(void *)v392 += v331;
      }
      else
      {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
    case 4621:
    case 4867:
LABEL_62:
      char v468 = 0;
      *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v393 + 36), *((_DWORD *)v393 + 71), "b", v11, v12, v13, v14, v15, (uint64_t)&v468);
      if (*((int *)v393 + 77) > 0) {
        *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, ", enabled:%u", v12, v13, v14, v15, v468 & 1);
      }
      else {
        *((_DWORD *)v393 + 78) = 6;
      }
      goto LABEL_218;
  }
  if (v384 != 4868)
  {
    if (v384 != 4869)
    {
      if (v384 == 15296)
      {
        v159 = v393;
        *((void *)v393 + 2) = 0;
        *((void *)v159 + 1) = 0;
        v160 = (unsigned __int8 *)*((void *)v159 + 36);
        unsigned int v161 = *((_DWORD *)v159 + 71);
        unint64_t v349 = (unint64_t)&v431;
        *((_DWORD *)v393 + 77) = spinel_datatype_unpack(v160, v161, "U", v11, v12, v13, v14, v15, (uint64_t)v432);
        if (*((int *)v393 + 77) > 0) {
          *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, ", diag:%s", v12, v13, v14, v15, *((void *)v393 + 2));
        }
        else {
          *((_DWORD *)v393 + 78) = 6;
        }
      }
      goto LABEL_218;
    }
    unsigned int v173 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, ", extaddr:", v12, v13, v14, v15, v348);
    uint64_t v174 = v393;
    *(void *)v392 += v173;
    if (*((unsigned int *)v174 + 71) >= 8uLL)
    {
      while (*((unsigned int *)v393 + 71) >= 8uLL)
      {
        int v175 = spinel_datatype_unpack_in_place(*((unsigned __int8 **)v393 + 36), *((_DWORD *)v393 + 71), "E", v11, v12, v13, v14, v15, (uint64_t)v484);
        *((_DWORD *)v393 + 77) = v175;
        if (*((int *)v393 + 77) <= 0)
        {
          *((_DWORD *)v393 + 78) = 6;
          goto LABEL_218;
        }
        uint64_t v176 = v392;
        unsigned int v177 = v393;
        *((void *)v393 + 36) += *((int *)v393 + 77);
        *((_DWORD *)v177 + 71) -= *((_DWORD *)v177 + 77);
        v178 = *(char **)v176;
        unsigned int v179 = *(_DWORD *)(v176 + 8) - *(_DWORD *)v176;
        v370 = &v348;
        unint64_t v349 = v484[1];
        unint64_t v350 = v484[2];
        unint64_t v351 = v484[3];
        unint64_t v352 = v484[4];
        unint64_t v353 = v484[5];
        unint64_t v354 = v484[6];
        unint64_t v355 = v484[7];
        unsigned int v180 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v176, v178, v179, "%02x%02x%02x%02x%02x%02x%02x%02x ", v12, v13, v14, v15, v484[0]);
        *(void *)v392 += v180;
      }
      goto LABEL_218;
    }
LABEL_107:
    *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, "none", v12, v13, v14, v15, v348);
    goto LABEL_218;
  }
  __int16 v464 = 0;
  unsigned int v53 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v392, *(char **)v392, *(_DWORD *)(v392 + 8) - *(_DWORD *)v392, ", saddr:", v12, v13, v14, v15, v348);
  BOOL v54 = v393;
  *(void *)v392 += v53;
  if (*((unsigned int *)v54 + 71) < 2uLL) {
    goto LABEL_107;
  }
  while (*((unsigned int *)v393 + 71) >= 2uLL)
  {
    *((_DWORD *)v393 + 77) = spinel_datatype_unpack(*((unsigned __int8 **)v393 + 36), *((_DWORD *)v393 + 71), "S", v11, v12, v13, v14, v15, (uint64_t)&v464);
    if (*((int *)v393 + 77) <= 0)
    {
      *((_DWORD *)v393 + 78) = 6;
      break;
    }
    uint64_t v55 = v392;
    uint64_t v56 = v393;
    *((void *)v393 + 36) += *((int *)v393 + 77);
    *((_DWORD *)v56 + 71) -= *((_DWORD *)v56 + 77);
    *(void *)v392 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v55, *(char **)v55, *(_DWORD *)(v55 + 8) - *(_DWORD *)v55, "0x%04x ", v12, v13, v14, v15, v464);
  }
LABEL_218:
  if (*((_DWORD *)v393 + 78)) {
    otLogDebgPlat("%s, failed to parse spinel frame !", v9, v10, v11, v12, v13, v14, v15, *((void *)v393 + 34));
  }
  return *((unsigned int *)v393 + 78);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelLogSpinelFrame(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleNotification(uint64_t a1, unsigned __int8 *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a1;
  uint64_t v36 = a2;
  unsigned __int16 v35 = a3;
  *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "\n", a5, a6, a7, a8, v24);
  int v34 = 0;
  int v33 = 0;
  int v32 = 0;
  int v31 = 0;
  unsigned int v30 = 0;
  char v29 = 0;
  unsigned int v28 = 0;
  int v32 = spinel_datatype_unpack(v36, v35, "CiiD", v8, v9, v10, v11, v12, (uint64_t)&v29);
  if (v32 > 0)
  {
    if ((v29 & 0xF) != 0)
    {
      return 6;
    }
    else if (v30 == 6)
    {
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsSafeToHandleNow(a1, v34)) {
        return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleValueIs(a1, v34, v31, v33, v14, v15, v16, v17);
      }
    }
    else if (v30 == 8 || v30 == 7)
    {
      uint64_t v25 = *(char **)a1;
      unsigned int v26 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
      char v18 = ot::ToUlong(v30);
      *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, v25, v26, "Ignored command %lu\n", v19, v20, v21, v22, v18);
    }
    else
    {
      return 6;
    }
  }
  else
  {
    return 6;
  }
  return v28;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleNotification(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleResponse(uint64_t a1, unsigned __int8 *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  unsigned __int16 v19 = a3;
  *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "\n", a5, a6, a7, a8, v14);
  int v18 = 0;
  uint64_t v17 = 0;
  int v16 = 0;
  char v15 = 0;
  spinel_datatype_unpack(v20, v19, "CiiD", v8, v9, v10, v11, v12, (uint64_t)&v15);
  return 6;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleResponse(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::ToUlong(uint64_t this)
{
  return this;
}

{
  return ot::ToUlong(this);
}

BOOL ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsSafeToHandleNow(uint64_t a1, int a2)
{
  BOOL v3 = 1;
  if (a2 != 113) {
    BOOL v3 = a2 == 57;
  }
  return !v3;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsSafeToHandleNow(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleValueIs(uint64_t a1, int a2, unsigned __int8 *a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v65 = a1;
  int v64 = a2;
  uint64_t v63 = a3;
  unsigned __int16 v62 = a4;
  *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "\n", a5, a6, a7, a8, v44);
  unsigned int v61 = 0;
  v60[4] = 0;
  *(_DWORD *)BOOL v60 = pcap_enabled();
  BOOL v59 = promiscuous_enabled();
  if ((v64 != 117 || !v59 && (v60[0] & 1) == 0) && v64 != 15538 && v64 != 15518)
  {
    if (v64 == 113)
    {
      return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelParseRadioFrame(a1, a1 + 8968, v63, v62, (uint64_t)&v60[1], v10, v11, v12);
    }
    else if (v64)
    {
      if (v64 == 57)
      {
        char v57 = 0;
        char v56 = 0;
        *(_DWORD *)&v60[1] = spinel_datatype_unpack(v63, v62, "Cc", v8, v9, v10, v11, v12, (uint64_t)&v57);
        if (*(int *)&v60[1] > 0)
        {
          *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "scanChannel: %d, maxRssi:%d\n", v27, v28, v29, v30, v57);
          *(_WORD *)(a1 + 10044) &= ~0x80u;
        }
        else
        {
          return 6;
        }
      }
      else
      {
        if (v64 == 112)
        {
          int v55 = 151;
          *(_DWORD *)&v60[1] = spinel_datatype_unpack_in_place(v63, v62, "D", v8, v9, v10, v11, v12, (uint64_t)v66);
          __assert_rtn("SpinelHandleValueIs", "spinel_parser_impl.hpp", 221, "len < sizeof(logStream)");
        }
        if (v64 == 116 && (*(unsigned char *)(a1 + 9334) & 1) != 0)
        {
          uint64_t v54 = 0;
          unsigned __int8 v53 = 0;
          *(_DWORD *)&v60[1] = spinel_datatype_unpack(v63, v62, "U", v8, v9, v10, v11, v12, (uint64_t)&v54);
          if (*(int *)&v60[1] >= 0)
          {
            v63 += *(int *)&v60[1];
            v62 -= *(_WORD *)&v60[1];
            int v52 = 0;
            uint64_t v51 = 0;
            *(_DWORD *)&v60[1] = spinel_datatype_unpack(v63, v62, "Ci", v31, v32, v33, v34, v35, (uint64_t)&v53);
            if (*(int *)&v60[1] > 0)
            {
              v63 += *(int *)&v60[1];
              v62 -= *(_WORD *)&v60[1];
              if (v62 < 8uLL
                || (*(_DWORD *)&v60[1] = spinel_datatype_unpack(v63, v62, "X", v36, v37, v38, v39, v40, (uint64_t)&v51),
                    *(int *)&v60[1] > 0))
              {
                if (v53)
                {
                  uint64_t v42 = v53;
                  char v41 = 1;
                }
                else
                {
                  uint64_t v42 = 0;
                  char v41 = 0;
                }
                if ((v41 & 1) == 0)
                {
                  switch(v42)
                  {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                      return v61;
                    default:
                      JUMPOUT(0);
                  }
                }
              }
              else
              {
                return 6;
              }
            }
            else
            {
              return 6;
            }
          }
          else
          {
            return 6;
          }
        }
      }
    }
    else
    {
      unsigned int v58 = 0;
      *(_DWORD *)&v60[1] = spinel_datatype_unpack(v63, v62, "i", v8, v9, v10, v11, v12, (uint64_t)&v58);
      if (*(int *)&v60[1] > 0)
      {
        unsigned int v48 = *(char **)a1;
        unsigned int v49 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
        char v13 = spinel_status_to_cstr(v58);
        *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, v48, v49, "[-RCP-]: RCP was reset (%s, %d)\n", v14, v15, v16, v17, v13);
        if (v58 < 0x70 || v58 > 0x80)
        {
          if (v58 == 2000000)
          {
            *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "[-RCP-]: TX Request Timed out, TRANSMIT_NOT_GRANTED\n", v18, v19, v20, v21, v45);
          }
          else if (v58 != 3)
          {
            unsigned int v46 = *(char **)a1;
            unsigned int v47 = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
            char v22 = spinel_status_to_cstr(v58);
            *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, v46, v47, "RCP last status: %s\n", v23, v24, v25, v26, v22);
          }
        }
      }
      else
      {
        return 6;
      }
    }
  }
  return v61;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleValueIs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleTransmitDone(uint64_t a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a1;
  int v38 = a2;
  int v37 = a3;
  uint64_t v36 = a4;
  unsigned __int16 v35 = a5;
  *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "\n", a5, a6, a7, a8, v27);
  uint64_t v34 = 0;
  char v33 = 0;
  char v32 = 0;
  char v31 = 0;
  char v30 = 0;
  int v29 = 0;
  if (v38 == 6 && !v37)
  {
    int v29 = spinel_datatype_unpack(v36, v35, "i", v8, v9, v10, v11, v12, (uint64_t)&v34);
    if (v29 > 0)
    {
      if (v34 == 4)
      {
        *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "HandleTransmitDone: Status[%d] SPINEL_STATUS_INVALID_STATE\n", v14, v15, v16, v17, 4);
        __assert_rtn("SpinelHandleTransmitDone", "spinel_parser_impl.hpp", 521, "false");
      }
      v36 += v29;
      v35 -= v29;
      int v29 = spinel_datatype_unpack(v36, v35, "b", v13, v14, v15, v16, v17, (uint64_t)&v33);
      if (v29 > 0)
      {
        v36 += v29;
        v35 -= v29;
        int v29 = spinel_datatype_unpack(v36, v35, "b", v18, v19, v20, v21, v22, (uint64_t)&v32);
        if (v29 > 0)
        {
          v36 += v29;
          v35 -= v29;
          if (v34)
          {
            HIDWORD(v34) = ot::Spinel::SpinelStatusToOtError((ot::Spinel *)v34);
          }
          else
          {
            HIDWORD(v34) = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelParseRadioFrame(a1, a1 + 9096, v36, v35, (uint64_t)&v29, v23, v24, v25);
            if (!HIDWORD(v34))
            {
              v36 += v29;
              v35 -= v29;
            }
          }
        }
        else
        {
          HIDWORD(v34) = 6;
        }
      }
      else
      {
        HIDWORD(v34) = 6;
      }
    }
    else
    {
      HIDWORD(v34) = 6;
    }
  }
  else
  {
    HIDWORD(v34) = 1;
  }
  return HIDWORD(v34);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleTransmitDone(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelParseRadioFrame(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v68 = a1;
  uint64_t v67 = a2;
  unsigned int v66 = a3;
  unsigned __int16 v65 = a4;
  int v64 = (_DWORD *)a5;
  uint64_t v57 = a1;
  *(void *)a1 += ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(a1, *(char **)a1, *(_DWORD *)(a1 + 8) - *(_DWORD *)a1, "\n", a5, a6, a7, a8, v47);
  unsigned int v63 = 0;
  unsigned __int16 v62 = 0;
  char v61 = 0x80;
  int v60 = 127;
  unsigned int v59 = 0;
  int v58 = 0;
  if (v65)
  {
    uint64_t v13 = *(void *)v67;
    char v56 = &v47;
    unint64_t v48 = (unint64_t)&v60;
    uint64_t v49 = v67 + 29;
    BOOL v50 = &v61;
    uint64_t v51 = &v62;
    uint64_t v52 = v67 + 10;
    uint64_t v53 = v67 + 30;
    uint64_t v54 = v67 + 16;
    int v55 = &v59;
    int v58 = spinel_datatype_unpack_in_place(v66, v65, "dccSt(CCX)t(i)", v8, v9, v10, v11, v12, v13);
    if (v58 > 0)
    {
      uint64_t v18 = *(char **)v57;
      unsigned int v19 = *(_DWORD *)(v57 + 8) - *(_DWORD *)v57;
      unint64_t v48 = *(char *)(v67 + 29);
      unsigned int v20 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v57, v18, v19, "len:%u, rssi:%d, ", v14, v15, v16, v17, v60);
      uint64_t v21 = v57;
      *(void *)v57 += v20;
      uint64_t v22 = *(char **)v21;
      unsigned int v23 = *(_DWORD *)(v21 + 8) - *(_DWORD *)v21;
      uint64_t v24 = *(unsigned __int8 *)(v67 + 10);
      uint64_t v25 = (char *)*(unsigned __int8 *)(v67 + 30);
      uint64_t v26 = *(unsigned __int16 **)(v67 + 16);
      unint64_t v48 = v62;
      uint64_t v49 = v24;
      BOOL v50 = v25;
      uint64_t v51 = v26;
      uint64_t v52 = v59;
      unsigned int v31 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v21, v22, v23, "noise:%d, flags:0x%04x, channel:%u, lqi:%u, timestamp:%lu, rxerr:%u", v27, v28, v29, v30, v61);
      uint64_t v37 = v57;
      *(void *)v57 += v31;
      _DWORD *v64 = v58;
      v66 += v58;
      v65 -= v58;
      if ((*(unsigned char *)(v37 + 9180) & 0x20) != 0)
      {
        unint64_t v48 = v67 + 24;
        int v58 = spinel_datatype_unpack_in_place(v66, v65, "t(CL)", v32, v33, v34, v35, v36, v67 + 28);
        if (v58 <= 0) {
          return 6;
        }
        uint64_t v42 = *(char **)v57;
        unsigned int v43 = *(_DWORD *)(v57 + 8) - *(_DWORD *)v57;
        char v44 = (int *)*(unsigned int *)(v67 + 24);
        LOBYTE(v47) = *(unsigned char *)(v67 + 28);
        unint64_t v48 = (unint64_t)v44;
        unsigned int v45 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Snprintf(v57, v42, v43, ", AckKeyId:%d, mAckFrameCounter:0x%d", v38, v39, v40, v41, v47);
        *(void *)v57 += v45;
        *v64 += v58;
      }
      if (v59)
      {
        if (v59 >= 0x26) {
          return 6;
        }
        else {
          return v59;
        }
      }
      else
      {
        *(_WORD *)(v67 + 8) = v60;
        *(unsigned char *)(v67 + 31) = *(unsigned char *)(v67 + 31) & 0xFE | ((v62 & 0x10) != 0);
        *(unsigned char *)(v67 + 31) = *(unsigned char *)(v67 + 31) & 0xFD | (2 * ((v62 & 0x20) != 0));
      }
    }
    else
    {
      return 6;
    }
  }
  else
  {
    *(_WORD *)(v67 + 8) = 0;
  }
  return v63;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelParseRadioFrame(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::SpinelStatusToOtError(ot::Spinel *this)
{
  if (this)
  {
    switch(this)
    {
      case 1:
        return 1;
      case 2:
        return 12;
      case 3:
        return 7;
      case 4:
        return 13;
      case 9:
        return 6;
      case 0xB:
        return 3;
      case 0xC:
        return 5;
      case 0xD:
        return 12;
      case 0xE:
        return 2;
      case 0x11:
        return 14;
      case 0x12:
        return 15;
      case 0x13:
        return 24;
      case 0x14:
        return 23;
      case 0x6C01:
        return 39;
      default:
        if (this < 0x4000 || this > 0x14000) {
          return 1;
        }
        else {
          return (this - 0x4000);
        }
    }
  }
  else
  {
    return 0;
  }
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Peek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v15 = a4;
  if (*(unsigned char *)(a1 + 8548)) {
    __assert_rtn("Peek", "radio_spinel_impl_vendor.hpp", 75, "mWaitingTid == 0");
  }
  do
  {
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RecoverFromRcpFailure(a1, a2, a3, a4, a5, a6, a7, a8);
    unsigned int v14 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::MemPeek(a1, a2, a3, "LS", v8, v9, v10, v11, (char *)v15);
  }
  while ((*(_WORD *)(a1 + 10044) & 0x40) != 0);
  return v14;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Peek(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15360, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexRxMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMixedModeUpperBound(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15372, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexRxMixedModeUpperBound failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMixedModeUpperBound(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMixedModeLowerBound(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15373, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexRxMixedModeLowerBound failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMixedModeLowerBound(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexTxMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15361, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexTxMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexTxMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15362, (uint64_t)"b", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexEnabled failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexCounters(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15363, (uint64_t)"t(LLLLLLLLLLLLLL)t(LLLLLLLLLLLLLL)t(LLLLLLLLLLLLLLL)t(LLLL)", a2 + 140, a2 + 136, a2 + 132, a2 + 128, a2 + 124, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexCounters failed", v3);
  return v3;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexGrantTimeout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15364, (uint64_t)"L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexGrantTimeout failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexGrantTimeout(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsNone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15365, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexThrottleMaxAttemptsNone failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsNone(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsTxOnly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15366, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexThrottleMaxAttemptsTxOnly failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsTxOnly(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsRxOnly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15367, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexThrottleMaxAttemptsRxOnly failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsRxOnly(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxThrottleTimeout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15368, (uint64_t)"L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexRxThrottleTimeout failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxThrottleTimeout(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexHistograms(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15369, (uint64_t)"t(LLLLLLLLLLLLLLLLLLLL)t(LLLLLLLLLLLLLLLLLLLL)t(LLLLLLLLLLLLLLLLLLLL)t(LLLLLLLLLLLLLLLLLLLL)t(LLLLLLLLLLLLLLLL)t(LLLLLLLLLLL)", a2 + 380, a2 + 376, a2 + 372, a2 + 368, a2 + 364, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexHistograms failed", v3);
  return v3;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexHistograms(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRequestAheadCslTx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15370, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexRequestAheadCslTx failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRequestAheadCslTx(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRequestAheadCslTxMin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15371, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCoexRequestAheadCslTxMin failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRequestAheadCslTxMin(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCslTxSchedulerFrameRequestAhead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15509, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCslTxSchedulerFrameRequestAhead failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCslTxSchedulerFrameRequestAhead(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPmuWakeTestResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15425, (uint64_t)"L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPmuWakeTestResult failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPmuWakeTestResult(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFemEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15440, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorFemEnabled failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFemEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMinBe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15456, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCsmaMinBE failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMinBe(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMaxBe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15457, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCsmaMaxBE failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMaxBe(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMaxBackoffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15458, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCsmaMaxBackoffs failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMaxBackoffs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaCcaIdleAttempts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15462, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCsmaCcaIdleAttempts failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaCcaIdleAttempts(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaSlidingWindowEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15459, (uint64_t)"b", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCsmaSlidingWindowEnabled failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaSlidingWindowEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCcaEnergyDetectedHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15460, (uint64_t)"t(LLLLLLLLLLLL)", a2, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCcaEnergyDetectedHistogram failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCcaEnergyDetectedHistogram(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaBackoffHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15461, (uint64_t)"D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCsmaBackoffHistogram failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaBackoffHistogram(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15472, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMinSifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15473, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsMinSIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMinSifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMinLifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15474, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsMinLIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMinLifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsRetxMinSifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15475, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsRetxMinSIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsRetxMinSifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsRetxMinLifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15476, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsRetxMinLIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsRetxMinLifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15477, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsAckTurnAroundTime failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundTime(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15478, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsAckTurnAroundMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundEnable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15479, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsAckTurnAroundEnable failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundEnable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckDataPerNeighbor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15480, (uint64_t)"D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorIfsAckDataPerNeighbor failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckDataPerNeighbor(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15488, (uint64_t)"U", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorVersion failed", v9);
  if (v9) {
    handle_captureABC(15488);
  }
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorVersion(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorOpenThreadRadioCounters(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15584, (uint64_t)"t(LLLLLLLLLLLLLLLLLL)t(LLLLLLLLLLLLLLLLLLLLL)t(LLLL)", a2 + 132, a2 + 124, a2 + 120, a2 + 116, a2 + 112, a2);
  ot::Spinel::LogIfFail((char)"Get VendorOpenThreadRadioCounters failed", v3);
  return v3;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorOpenThreadRadioCounters(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15489, (uint64_t)"t(LLLL)", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorRadioCounters failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioCounters(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15490, (uint64_t)"t(LLLL)t(LLLL)t(LLLL)t(LLL)", a2 + 12, a2 + 8, a2 + 4, a2, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorRadioStats failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioStats(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAssignedHwMac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15494, (uint64_t)"E", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorAssignedHWMac failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAssignedHwMac(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTableActiveId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15522, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerLimitTableActiveId failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTableActiveId(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAssert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15491, (uint64_t)"L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorAssert failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAssert(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorHardFault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15492, (uint64_t)"", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Get VendorHardFault failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorHardFault(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorStackOverflow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15493, (uint64_t)"", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Get VendorStackOverflow failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorStackOverflow(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFactoryReset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15495, (uint64_t)"", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Get VendorFactoryReset failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFactoryReset(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFaultInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15498, (uint64_t)"t(LCXLL)", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorFaultInfo failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFaultInfo(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepFilterList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15499, (uint64_t)"A(L)", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorDeepSleepFilterList failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepFilterList(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepLogLevel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15500, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorDeepSleepLogLevel failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepLogLevel(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepRegionLoglevels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15501, (uint64_t)"D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorDeepSleepRegionLoglevels failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepRegionLoglevels(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorHostWakeReason(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15502, (uint64_t)"L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorHostWakeReason failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorHostWakeReason(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeviceId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15507, (uint64_t)"cccccccc", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorDeviceId failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeviceId(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorValidateSettings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15510, (uint64_t)"bL", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorValidateSettings failed", v9);
  return v9;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15520, (uint64_t)"D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerLimitTable failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTableVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15523, (uint64_t)"U", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerLimitTableVersion failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTableVersion(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTablePowerTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15524, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerLimitTablePowerTest failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTablePowerTest(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLmitActiveTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15525, (uint64_t)"D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerLmitActiveTable failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLmitActiveTable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15526, (uint64_t)"D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerMappingTable failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15527, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerMappingTableVersion failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableVersion(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTablePowerTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15529, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerMappingTablePowerTest failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTablePowerTest(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioCurrentPowerInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15530, (uint64_t)"Ccccc", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorRadioCurrentPowerInfo failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioCurrentPowerInfo(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableFlashData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15532, (uint64_t)"D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerMappingTableFlashData failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableFlashData(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableFlashDataIsvalid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15533, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPowerMappingTableFlashDataIsvalid failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableFlashDataIsvalid(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15360, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexRxMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMixedModeUpperBound(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15372, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexRxMixedModeUpperBound failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMixedModeUpperBound(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMixedModeLowerBound(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15373, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexRxMixedModeLowerBound failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMixedModeLowerBound(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexTxMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15361, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexTxMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexTxMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexEnabled(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15362, "b", a4, a5, a6, a7, a8, a2 & 1);
  ot::Spinel::LogIfFail((char)"Set VendorCoexEnabled failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15363, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorCoexCounters failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCounters(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexGrantTimeout(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15364, "L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexGrantTimeout failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexGrantTimeout(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsNone(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15365, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexThrottleMaxAttemptsNone failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsNone(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsTxOnly(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15366, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexThrottleMaxAttemptsTxOnly failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsTxOnly(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsRxOnly(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15367, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexThrottleMaxAttemptsRxOnly failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsRxOnly(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxThrottleTimeout(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15368, "L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexRxThrottleTimeout failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxThrottleTimeout(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexHistograms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15369, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorCoexHistograms failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexHistograms(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRequestAheadCslTx(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15370, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexRequestAheadCslTx failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRequestAheadCslTx(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRequestAheadCslTxMin(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15371, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCoexRequestAheadCslTxMin failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRequestAheadCslTxMin(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCslTxSchedulerFrameRequestAhead(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15509, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCslTxSchedulerFrameRequestAhead failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCslTxSchedulerFrameRequestAhead(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPmuWakeTestStart(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15424, "L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorPmuWakeTestResult failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPmuWakeTestStart(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorFemEnabled(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15440, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorFemEnabled failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorFemEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMinBe(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15456, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCsmaMinBE failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMinBe(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMaxBe(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15457, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCsmaMaxBE failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMaxBe(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMaxBackoffs(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15458, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCsmaMaxBackoffs failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMaxBackoffs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaCcaIdleAttempts(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15462, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCsmaCcaIdleAttempts failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaCcaIdleAttempts(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaSlidingWindowEnabled(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15459, "b", a4, a5, a6, a7, a8, a2 & 1);
  ot::Spinel::LogIfFail((char)"Set VendorCsmaSlidingWindowEnabled failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaSlidingWindowEnabled(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCcaEnergyDetectedHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15460, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorCcaEnergyDetectedHistogram failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCcaEnergyDetectedHistogram(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaBackoffHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15461, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorCsmaBackoffHistogram failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaBackoffHistogram(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15472, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMinSifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15473, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsMinSIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMinSifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMinLifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15474, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsMinLIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMinLifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsRetxMinSifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15475, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsRetxMinSIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsRetxMinSifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsRetxMinLifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15476, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsRetxMinLIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsRetxMinLifs(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundTime(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15477, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsAckturnaroundTime failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundTime(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15478, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsAckturnaroundMode failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundEnable(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15479, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorIfsAckturnaroundEnable failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundEnable(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCntrStatsReset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15505, "S", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorIfsRetxMinLIFS failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCntrStatsReset(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorOpenThreadRadioCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15584, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorOpenThreadRadioCounters failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorOpenThreadRadioCounters(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRadioCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15489, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorRadioCounters failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRadioCounters(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRadioStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15490, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorRadioStats failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRadioStats(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAssignedHWMac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15494, "E", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorAssignedHWMac failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAssignedHWMac(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAssert(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15491, "L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorAssert failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAssert(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorHardResdtTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(a1 + 10046) = a2;
  otLogInfoPlat("%s: Set hard reset test mode as %d", a2, a3, a4, a5, a6, a7, a8, (char)"SetVendorHardResdtTest");
  return 0;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorHardResdtTest(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetLoggingTest(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15496, "CCU", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorAssert failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetLoggingTest(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFilterUnsolNotif (uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15497, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set FilterUnsolNotif failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFilterUnsolNotif (a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorFaultInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15498, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorFaultInfo failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorFaultInfo(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepFilterList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15499, "L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorDeepSleepFilterList failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepFilterList(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepLogLevel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15500, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorDeepSleepLogLevel failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepLogLevel(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepRegionLoglevels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15501, "D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorDeepSleepRegionLoglevels failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepRegionLoglevels(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorHostWakeReason(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15502, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorHostWakeReason failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorHostWakeReason(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FlashErase(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15503, "LL", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set FlashErase failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FlashErase(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FlashWrite(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15504, "LD", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set FlashWrite failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FlashWrite(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPowerLimitTableActiveId(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15522, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorPowerLimitTableActiveId failed", v9);
  return v9;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPowerMappingTableClear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15531, "C", a4, a5, a6, a7, a8, 0);
  ot::Spinel::LogIfFail((char)"Set VendorPowerMappingTableClear failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPowerMappingTableClear(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPowerMappingTableFlashData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15532, "D", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorPowerMappingTableFlashData failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPowerMappingTableFlashData(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorSetLogTimeStampBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 16387, "X", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set LogTimeStampBase failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorSetLogTimeStampBase(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorUartDisableStart(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15426, "L", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorUartDisableStart failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorUartDisableStart(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorTxInfo(uint64_t result, int *a2, _WORD *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = result;
  char v44 = a2;
  unsigned int v43 = a3;
  uint64_t v42 = a4;
  uint64_t v33 = result;
  char v41 = 0;
  char v40 = 0;
  char v39 = 0;
  int v38 = 0;
  int v37 = 0;
  char v36 = 0;
  char v35 = 0;
  int v34 = 0;
  if (*a3)
  {
    uint64_t result = spinel_datatype_unpack(v42, (unsigned __int16)*v43, "Cc", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v41);
    *char v44 = result;
    *(unsigned char *)(*(void *)(v33 + 9160) + 43) = v41;
    *(unsigned char *)(*(void *)(v33 + 9160) + 42) = v40;
    v42 += *v44;
    *v43 -= *v44;
    *(unsigned char *)(*(void *)(v33 + 9160) + 56) = 1;
    if (*v43)
    {
      uint64_t result = spinel_datatype_unpack(v42, (unsigned __int16)*v43, "CL", v8, v9, v10, v11, v12, (uint64_t)&v39);
      *char v44 = result;
      *(unsigned char *)(*(void *)(v33 + 9160) + 46) = v39;
      *(_DWORD *)(*(void *)(v33 + 9160) + 48) = v38;
      v42 += *v44;
      *v43 -= *v44;
      *(unsigned char *)(*(void *)(v33 + 9160) + 56) = 2;
      if (*v43)
      {
        uint64_t result = spinel_datatype_unpack(v42, (unsigned __int16)*v43, "L", v13, v14, v15, v16, v17, (uint64_t)&v37);
        *char v44 = result;
        *(_DWORD *)(*(void *)(v33 + 9160) + 52) = v37;
        v42 += *v44;
        *v43 -= *v44;
        *(unsigned char *)(*(void *)(v33 + 9160) + 56) = 3;
        if (*v43)
        {
          uint64_t result = spinel_datatype_unpack(v42, (unsigned __int16)*v43, "C", v18, v19, v20, v21, v22, (uint64_t)&v36);
          *char v44 = result;
          *(unsigned char *)(*(void *)(v33 + 9160) + 57) = v36;
          v42 += *v44;
          *v43 -= *v44;
          *(unsigned char *)(*(void *)(v33 + 9160) + 56) = 4;
          if (*v43)
          {
            uint64_t result = spinel_datatype_unpack(v42, (unsigned __int16)*v43, "C", v23, v24, v25, v26, v27, (uint64_t)&v35);
            *char v44 = result;
            *(unsigned char *)(*(void *)(v33 + 9160) + 58) = v35;
            v42 += *v44;
            *v43 -= *v44;
            *(unsigned char *)(*(void *)(v33 + 9160) + 56) = 5;
            if (*v43)
            {
              uint64_t result = spinel_datatype_unpack(v42, (unsigned __int16)*v43, "L", v28, v29, v30, v31, v32, (uint64_t)&v34);
              *char v44 = result;
              *(_DWORD *)(*(void *)(v33 + 9160) + 60) = v34;
              v42 += *v44;
              *v43 -= *v44;
              *(unsigned char *)(*(void *)(v33 + 9160) + 56) = 6;
            }
          }
        }
      }
    }
  }
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorTxInfo(result, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRxOnIdleUseQOSPercentagePolicyConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15396, (uint64_t)"b", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get Vendor RX_ON_IDLE_USE_QOS_PERCENTAGE_POLICY Config", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRxOnIdleUseQOSPercentagePolicyConfig(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRFState(uint64_t a1, uint64_t (*a2)(void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15538, "L", a4, a5, a6, a7, a8, 0);
  ot::Spinel::mRFStateCallback = a2;
  ot::Spinel::mRFStateContext = a3;
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRFState(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDutyCycle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15395, (uint64_t)"LLbb", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get Duty Cycle failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDutyCycle(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTimelineLogLevel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15516, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get Timeline log level failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTimelineLogLevel(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexCollectionDuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15517, (uint64_t)"S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get Coex Collection Duration failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexCollectionDuration(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15518, (uint64_t)"t(CSSSSSSSSSSSSS)", a2 + 3, a2 + 1, a2, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get Coex Counters failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexCounter(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexStateEvent(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ot::Spinel::mCoexStateCallback = a2;
  ot::Spinel::LogIfFail((char)"Get Coex State Event failed", 0);
  return 0;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexStateEvent(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDutyCycle(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15395, "LLbb", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set Duty Cycle failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDutyCycle(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRxOnIdleUseQOSPercentagePolicyConfig(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15396, "b", a4, a5, a6, a7, a8, a2 & 1);
  ot::Spinel::LogIfFail((char)"Set Vendor RX_ON_IDLE_USE_QOS_PERCENTAGE_POLICY Config", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRxOnIdleUseQOSPercentagePolicyConfig(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTimelineLogLevel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15516, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set Timeline log level failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTimelineLogLevel(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCollectionDuration(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15517, "S", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set Coex Collection Duration failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCollectionDuration(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCollection(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15518, "b", a4, a5, a6, a7, a8, a2 & 1);
  ot::Spinel::LogIfFail((char)"Set Coex Collection failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCollection(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAntenna(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15512, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorAntenna failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAntenna(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15513, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCC failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15511, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorCore failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCore(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPCAP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15514, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPCAP failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPCAP(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPriority(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 2305, (uint64_t)"CCL", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPriority failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPriority(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPTB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15534, (uint64_t)"d", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPTB failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPTB(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15537, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get Vendor Power failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPower(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMSFState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15535, (uint64_t)"b", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get MSFState failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMSFState(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorGPIO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 15515, (uint64_t)"CCCC", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get GPIO failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorGPIO(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAntenna(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15512, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorAntenna failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAntenna(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCC(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15513, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorCC failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPCAP(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15514, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorPCAP failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPCAP(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPriority(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 2305, "CCL", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set Priority failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPriority(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPTB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15534, "d", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set VendorPTB failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPTB(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15537, "C", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Get VendorPower failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPower(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorGPIO(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 15515, "CC", a4, a5, a6, a7, a8, a2);
  ot::Spinel::LogIfFail((char)"Set GPIO failed", v9);
  return v9;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorGPIO(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateTpcLinkMargin(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4642, "SC", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcMode(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4628, "C", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4628, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcMode(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcWeightFactor(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4630, "C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcWeightFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4630, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcLinkMarginRouters(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4631, "C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcLinkMarginRouters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4631, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcLinkMarginChildren(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4632, "C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcLinkMarginChildren(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4632, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcPropotionalGain(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4633, "l", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcPropotionalGain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4633, (uint64_t)"l", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcIntegralGain(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4634, "l", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcIntegralGain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4634, (uint64_t)"l", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcErrorGainCodeword0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4635, "c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcErrorGainCodeword0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4635, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcErrorGainCodeword1(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4636, "c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcErrorGainCodeword1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4636, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcErrorGainCodeword2(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4637, "c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcErrorGainCodeword2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4637, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcErrorGainCodeword3(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4638, "c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcErrorGainCodeword3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4638, (uint64_t)"c", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcLostAckStepUp(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4638, "C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcLostAckStepUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4638, (uint64_t)"C", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddTpcTableEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(a1, 4641, "SECb", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RemoveTpcTableEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Remove(a1, 4641, "S", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcAttachmentStatus(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4643, "b", a4, a5, a6, a7, a8, a2 & 1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTpcTableEntryRxOnWhenIdle(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4644, "Sb", a4, a5, a6, a7, a8, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetFrameTxPowerHistogram(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v6 = a3;
  v4[19] = a1;
  unsigned int v5 = 13;
  v4[18] = v4;
  v4[1] = a2 + 4;
  v4[2] = a2 + 8;
  v4[3] = a2 + 12;
  v4[4] = a2 + 16;
  v4[5] = a2 + 20;
  v4[6] = a2 + 24;
  v4[7] = a2 + 28;
  v4[8] = a2 + 32;
  v4[9] = a2 + 36;
  v4[10] = a2 + 40;
  v4[11] = a2 + 44;
  v4[12] = a2 + 48;
  v4[13] = a2 + 52;
  v4[14] = a2 + 56;
  v4[15] = a2 + 60;
  v4[16] = a2 + 64;
  unsigned int v5 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4645, (uint64_t)"t(LLLLLLLLLLLLLLLLL)", v7 + 20, v7 + 16, v7 + 12, v7 + 8, v7 + 4, v7);
  if (!v5) {
    unsigned char *v6 = 17;
  }
  return v5;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::getStreamRawHistogram(uint64_t a1, uint64_t a2)
{
  if (a2 && a1 != -16)
  {
    for (int i = 0; i < 50; ++i)
      *(_DWORD *)(a2 + 4 * i) = *(_DWORD *)(a1 + 16 + 4 * i);
    return 0;
  }
  else
  {
    return 13;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::getStreamRawHistogram(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::resetStreamRawHistogram(uint64_t a1)
{
  if (a1 == -16)
  {
    return 13;
  }
  else
  {
    for (int i = 0; i < 50; ++i)
      *(_DWORD *)(a1 + 16 + 4 * i) = 0;
    return 0;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::resetStreamRawHistogram(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ResetFrameTxPowerHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4645, "L", a4, a5, a6, a7, a8, 0);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNeighborTxPowerHistogram(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v6 = a3;
  v4[19] = a1;
  unsigned int v5 = 13;
  v4[18] = v4;
  v4[1] = a2 + 4;
  v4[2] = a2 + 8;
  v4[3] = a2 + 12;
  v4[4] = a2 + 16;
  v4[5] = a2 + 20;
  v4[6] = a2 + 24;
  v4[7] = a2 + 28;
  v4[8] = a2 + 32;
  v4[9] = a2 + 36;
  v4[10] = a2 + 40;
  v4[11] = a2 + 44;
  v4[12] = a2 + 48;
  v4[13] = a2 + 52;
  v4[14] = a2 + 56;
  v4[15] = a2 + 60;
  v4[16] = a2 + 64;
  unsigned int v5 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4646, (uint64_t)"t(LLLLLLLLLLLLLLLLL)", v7 + 20, v7 + 16, v7 + 12, v7 + 8, v7 + 4, v7);
  if (!v5) {
    unsigned char *v6 = 17;
  }
  return v5;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ResetNeighborTxPowerHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4646, "L", a4, a5, a6, a7, a8, 0);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNeighborEnergySavingsFactorHistogram(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v6 = a3;
  v4[21] = a1;
  unsigned int v5 = 13;
  void v4[20] = v4;
  v4[1] = a2 + 4;
  v4[2] = a2 + 8;
  v4[3] = a2 + 12;
  v4[4] = a2 + 16;
  v4[5] = a2 + 20;
  v4[6] = a2 + 24;
  v4[7] = a2 + 28;
  v4[8] = a2 + 32;
  v4[9] = a2 + 36;
  v4[10] = a2 + 40;
  v4[11] = a2 + 44;
  v4[12] = a2 + 48;
  v4[13] = a2 + 52;
  v4[14] = a2 + 56;
  v4[15] = a2 + 60;
  v4[16] = a2 + 64;
  v4[17] = a2 + 68;
  v4[18] = a2 + 72;
  unsigned int v5 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get(a1, 4647, (uint64_t)"t(LLLLLLLLLLLLLLLLLLL)", v7 + 28, v7 + 24, v7 + 20, v7 + 16, v7 + 12, v7);
  if (!v5) {
    unsigned char *v6 = 19;
  }
  return v5;
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ResetNeighborEnergySavingsFactorHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 4647, "L", a4, a5, a6, a7, a8, 0);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddCalibratedPower(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a4) {
    __assert_rtn("AddCalibratedPower", "radio_spinel_impl.hpp", 4527, "aRawPowerSetting != nullptr");
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(a1, 45, "Csd", a4, a5, a6, a7, a8, a2);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddCalibratedPower(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearCalibratedPowers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 45, 0, a4, a5, a6, a7, a8, v9);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearCalibratedPowers(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetChannelTargetPower(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 0xBu && a2 <= 0x19u) {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 46, "Cs", a4, a5, a6, a7, a8, a2);
  }
  else {
    return 7;
  }
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetChannelTargetPower(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::WaitResponse(uint64_t a1, char a2)
{
  char v28 = a2 & 1;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 10046))
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleRcpTimeout(a1);
      return 28;
    }
  }
  else if (*(unsigned char *)(a1 + 10046) == 1)
  {
    return 28;
  }
  unint64_t v27 = otPlatTimeGet() + 2000000;
  char v25 = *(unsigned char *)(a1 + 8548);
  ot::ToUlong(*(unsigned int *)(a1 + 8552));
  otLogDebgPlat("Wait response: tid=%u key=%lu", v2, v3, v4, v5, v6, v7, v8, v25);
  while (v27 > otPlatTimeGet()
       && !ot::Posix::HdlcInterface::WaitForFrame((ot::Posix::HdlcInterface *)(a1 + 8448)))
  {
    char v24 = 1;
    if (!*(unsigned char *)(a1 + 8548)) {
      char v24 = *(unsigned char *)(a1 + 9333) ^ 1;
    }
    if ((v24 & 1) == 0)
    {
      ot::Spinel::LogIfFail((char)"Error waiting response", *(_DWORD *)(a1 + 8580));
      *(_DWORD *)(a1 + 8552) = 0;
      return *(unsigned int *)(a1 + 8580);
    }
  }
  otLogWarnPlat("Wait for response timeout gPciStatus=%d", v9, v10, v11, v12, v13, v14, v15, gPciStatus);
  if (gPciStatus)
  {
    otLogWarnPlat("Exit response timeout due to PCI failure %d\n", v16, v17, v18, v19, v20, v21, v22, gPciStatus);
    *(_DWORD *)(a1 + 8552) = 0;
    *(unsigned char *)(a1 + 9333) = 0;
    *(_DWORD *)(a1 + 8580) = 28;
  }
  else
  {
    if (v28) {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleRcpTimeout(a1);
    }
    *(_DWORD *)(a1 + 8580) = 28;
  }
  return *(unsigned int *)(a1 + 8580);
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::WaitResponse(a1, a2);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleRcpTimeout(uint64_t result)
{
  *(_WORD *)(result + 10044) = *(_WORD *)(result + 10044) & 0xFFBF | 0x40;
  return result;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleRcpTimeout(result);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::markReset(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8216) = a2 & 1;
  return result;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::markReset(result, a2);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetNextSavedFrame(uint64_t a1, uint64_t *a2, _WORD *a3)
{
  unsigned int v11 = 0;
  if (*a2)
  {
    if ((*(unsigned char *)(a1 + 8216) & 1) == 1) {
      return 23;
    }
    if (a1 + 10 > (unint64_t)*a2
      || (unint64_t v7 = *a2, v7 >= ot::GetArrayEnd<unsigned char,(unsigned short)8192>(a1 + 10)))
    {
      logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(2) & 1) != 0)
      {
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_0_2_8_0_8_0((uint64_t)v16, a1 + 10, *a2);
          _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "[GetNextSavedFrame]:  mBuffer[%p] aFrame[%p]", v16, 0x16u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v15, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v15, 0x16u);
      }
      handle_getnextframe_captureABC();
      __assert_rtn("GetNextSavedFrame", "hdlc.hpp", 438, "false");
    }
  }
  if (*a2) {
    uint64_t v6 = *a2 + (unsigned __int16)*a3;
  }
  else {
    uint64_t v6 = a1 + 10;
  }
  *a2 = v6;
  if (*a2 == *(void *)(a1 + 8208))
  {
    *a3 = 0;
    *a2 = 0;
    return 23;
  }
  else
  {
    __int16 Uint16 = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)*a2, (const unsigned __int8 *)a2);
    unsigned __int16 v4 = ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*a2 + 2), v3);
    *a3 = Uint16 - v4;
    *a2 += v4 + 4;
  }
  return v11;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetNextSavedFrame(a1, a2, a3);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleNotification(uint64_t a1, unsigned __int8 *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = a1;
  uint64_t v17 = a2;
  unsigned __int16 v16 = a3;
  int v15 = 0;
  int v14 = 0;
  int v13 = 0;
  uint64_t v12 = 0;
  int v11 = 0;
  char v10 = 0;
  int v9 = 0;
  int v13 = spinel_datatype_unpack(a2, a3, "CiiD", a4, a5, a6, a7, a8, (uint64_t)&v10);
  if (v13 <= 0 || (v10 & 0xF) != 0)
  {
    int v9 = 6;
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, 6);
  }
  else
  {
    if (v11 == 6)
    {
      if (v15 != 113 && v15 != 57) {
        otLogCritPlat("[HandleNotification]:::::INVALID KEY = %d", v15);
      }
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleValueIs(a1, v15, v12, v14);
    }
    ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, 0);
  }
  ot::Spinel::LogIfFail((char)"Error processing saved notification", v9);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleNotification(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::getReset(uint64_t a1)
{
  return *(unsigned char *)(a1 + 8216) & 1;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::getReset(a1);
}

void ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::Clear(uint64_t a1)
{
  *(void *)(a1 + 8208) = a1 + 10;
  *(void *)a1 = a1 + 14;
  *(_WORD *)(a1 + 8) = 8188;
  ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SetSkipLength(a1, 0);
  IgnoreError();
}

{
  ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::Clear(a1);
}

BOOL ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::noSpaceLeft(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8208);
  return v2 + 4 > (unint64_t)ot::GetArrayEnd<unsigned char,(unsigned short)8192>(a1 + 10);
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::noSpaceLeft(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextTid(uint64_t a1)
{
  unsigned __int8 v4 = *(unsigned char *)(a1 + 8546);
  while (((1 << v4) & *(unsigned __int16 *)(a1 + 8544)) != 0)
  {
    if (v4 < 0xFu) {
      char v3 = v4 + 1;
    }
    else {
      char v3 = 1;
    }
    unsigned __int8 v4 = v3;
    if (v3 == *(unsigned char *)(a1 + 8546)) {
      return 0;
    }
  }
  *(_WORD *)(a1 + 8544) |= 1 << v4;
  if (v4 < 0xFu) {
    char v2 = v4 + 1;
  }
  else {
    char v2 = 1;
  }
  *(unsigned char *)(a1 + 8546) = v2;
  return v4;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextTid(a1);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestV(uint64_t a1, int a2, int a3, unsigned char *a4, char **a5)
{
  int NextTid = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextTid(a1);
  if ((_BYTE)NextTid)
  {
    unsigned int v17 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendCommand(a1, a2, a3, NextTid, a4, a5, v5, v6);
    if (v17)
    {
      otLogWarnPlat("RadioSpinel:RequestV SendCommand failed tid=%d", v7, v8, v9, v10, v11, v12, v13, NextTid);
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FreeTid(a1, NextTid);
    }
    else if (a3 == 113)
    {
      if (*(unsigned char *)(a1 + 8547)) {
        __assert_rtn("RequestV", "radio_spinel_impl.hpp", 2781, "mTxRadioTid == 0");
      }
      *(unsigned char *)(a1 + 8547) = NextTid;
    }
    else if (a3 == 15491 || a3 == 15492 || a3 == 15493)
    {
      *(_WORD *)(a1 + 8544) = 0;
      *(unsigned char *)(a1 + 8546) = 1;
      *(unsigned char *)(a1 + 8548) = 0;
      *(_DWORD *)(a1 + 8552) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 8552) = a3;
      *(unsigned char *)(a1 + 8548) = NextTid;
      return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::WaitResponse(a1, 1);
    }
  }
  else
  {
    return 5;
  }
  return v17;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestV(a1, a2, a3, a4, a5);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendCommand(uint64_t a1, int a2, int a3, uint64_t a4, unsigned char *a5, char **a6, uint64_t a7, uint64_t a8)
{
  char v30 = a4;
  int v25 = spinel_datatype_pack((BOOL *)v34, 0x514u, "Cii", a4, (uint64_t)a5, (uint64_t)a6, a7, a8, a4 | 0x80u);
  if (v25 > 0 && (unint64_t)v25 <= 0x514)
  {
    unsigned __int16 v24 = v25;
    if (a5)
    {
      if (a3 == 52) {
        otLogInfoPlat("SPINEL_PROP_MAC_15_4_LADDR: format[%s] offset[%u]", v8, v9, v10, v11, v12, v13, v14, (char)a5);
      }
      if (a3 == 113)
      {
        time_streamraw_tx = otPlatTimeGet();
        tx_streamraw_tid = v30;
      }
      int v26 = spinel_datatype_vpack((BOOL *)&v34[(unsigned __int16)v25], 1300 - (unsigned __int16)v25, a5, a6);
      if (v26 <= 0 || (unint64_t)(v26 + v24) > 0x514) {
        return 3;
      }
      v24 += v26;
    }
    v33[0] = 0;
    ot::Spinel::encode_data_into_string((ot::Spinel *)v34, (const unsigned __int8 *)v24, v33, (char *)0x401, 0);
    spinel_command_to_cstr(a2);
    spinel_prop_key_to_cstr(a3);
    otLogNotePlat("[->RCP] (%d) %s(%s) (format[%s]) key(%d) [%s] len=%d", v15, v16, v17, v18, v19, v20, v21, v30);
    return ot::Posix::HdlcInterface::SendFrame((ot::Posix::HdlcInterface *)(a1 + 8448), v34);
  }
  return 3;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendCommand(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestVNK(uint64_t a1, unsigned int a2, unsigned char *a3, char **a4)
{
  int NextTid = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextTid(a1);
  if ((_BYTE)NextTid)
  {
    unsigned int v10 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendCommandNK(a1, a2, NextTid, a3, a4, v4, v5, v6);
    if (!v10)
    {
      *(unsigned char *)(a1 + 8548) = NextTid;
      return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::WaitResponse(a1, 1);
    }
  }
  else
  {
    return 5;
  }
  return v10;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RequestVNK(a1, a2, a3, a4);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendCommandNK(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned char *a4, char **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = spinel_datatype_pack((BOOL *)v16, 0x514u, "Ci", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a3 | 0x80u);
  if (v11 > 0 && (unint64_t)v11 <= 0x514)
  {
    unsigned __int16 v10 = v11;
    if (a4)
    {
      int v12 = spinel_datatype_vpack((BOOL *)&v16[(unsigned __int16)v11], 1300 - (unsigned __int16)v11, a4, a5);
      if (v12 <= 0 || (unint64_t)(v12 + v10) > 0x514) {
        return 3;
      }
      v10 += v12;
    }
    unsigned int v13 = ot::Posix::HdlcInterface::SendFrame((ot::Posix::HdlcInterface *)(a1 + 8448), v16);
    if (!v13) {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::LogSpinelFrame(a1, (uint64_t)v16, v10, 1);
    }
  }
  else
  {
    return 3;
  }
  return v13;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SendCommandNK(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ParseRadioFrame(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = a1;
  uint64_t v46 = a2;
  uint64_t v45 = a3;
  unsigned __int16 v44 = a4;
  unsigned int v43 = (_DWORD *)a5;
  uint64_t v36 = a1;
  unsigned int v42 = 0;
  __int16 v41 = 0;
  char v40 = 0x80;
  int v39 = 127;
  unsigned int v38 = 0;
  int v37 = 0;
  if (!(_WORD)a4)
  {
    *(_WORD *)(v46 + 8) = 0;
    goto LABEL_19;
  }
  uint64_t v8 = *(void *)v46;
  char v35 = &v26;
  unint64_t v27 = &v39;
  uint64_t v28 = v46 + 29;
  uint64_t v29 = &v40;
  char v30 = &v41;
  uint64_t v31 = v46 + 10;
  uint64_t v32 = v46 + 30;
  uint64_t v33 = v46 + 16;
  int v34 = &v38;
  int v37 = spinel_datatype_unpack_in_place(v45, v44, "dccSt(CCX)t(i)", a4, a5, a6, a7, a8, v8);
  if (v37 <= 0) {
    otLogInfoRcp("%s unpack parse error: Frame ", v9, v10, v11, v12, v13, v14, v15, (char)"ParseRadioFrame");
  }
  if (v37 <= 0)
  {
    unsigned int v42 = 6;
    goto LABEL_19;
  }
  uint64_t v16 = v36;
  *unsigned int v43 = v37;
  v45 += v37;
  v44 -= v37;
  if ((*(unsigned char *)(v16 + 9180) & 0x20) != 0)
  {
    unint64_t v27 = (int *)(v46 + 24);
    int v37 = spinel_datatype_unpack_in_place(v45, v44, "t(CL)", v11, v12, v13, v14, v15, v46 + 28);
    if (v37 <= 0) {
      otLogInfoRcp("%s unpack parse error: MAC-data", v9, v10, v11, v12, v13, v14, v15, (char)"ParseRadioFrame");
    }
    if (v37 <= 0)
    {
      unsigned int v42 = 6;
      goto LABEL_19;
    }
    *v43 += v37;
    if ((v41 & 0x20) != 0)
    {
      uint64_t v17 = v36;
      *(_WORD *)(v36 + 10044) = *(_WORD *)(v36 + 10044) & 0xFEFF | 0x100;
      *(_DWORD *)(v17 + 10040) = *(_DWORD *)(v46 + 24);
    }
  }
  if (v38)
  {
    if (v38 >= 0x26)
    {
      otLogInfoRcp("receiveError > OT_NUM_ERRORS. receiveError[%d]", v9, v10, v11, v12, v13, v14, v15, v38);
      unsigned int v42 = 6;
    }
    else
    {
      otLogInfoRcp("receiveError < OT_NUM_ERRORS, receiveError[%d]", v9, v10, v11, v12, v13, v14, v15, v38);
      unsigned int v42 = v38;
    }
  }
  else
  {
    *(_WORD *)(v46 + 8) = v39;
    *(unsigned char *)(v46 + 31) = *(unsigned char *)(v46 + 31) & 0xFE | ((v41 & 0x10) != 0);
    *(unsigned char *)(v46 + 31) = *(unsigned char *)(v46 + 31) & 0xFD | (2 * ((v41 & 0x20) != 0));
  }
LABEL_19:
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(v36, v42);
  ot::Spinel::LogIfFail((char)"Handle radio frame failed", v42);
  if (v42 == 6)
  {
    otLogDebgRcp("%s parse error happen, trigger FLR to help debug", v18, v19, v20, v21, v22, v23, v24, (char)"ParseRadioFrame");
    rcp_hard_reset();
  }
  return v42;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ParseRadioFrame(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL ot::Spinel::Decoder::IsAllReadInStruct(ot::Spinel::Decoder *this)
{
  return *((unsigned __int16 *)this + 5) == *((unsigned __int16 *)this + 6);
}

{
  return ot::Spinel::Decoder::IsAllReadInStruct(this);
}

uint64_t ot::Spinel::Decoder::GetRemainingLengthInStruct(ot::Spinel::Decoder *this)
{
  return (unsigned __int16)(*((_WORD *)this + 6) - *((_WORD *)this + 5));
}

{
  return ot::Spinel::Decoder::GetRemainingLengthInStruct(this);
}

uint64_t ot::SettingsDriver::Set(ot::SettingsDriver *this, __int16 a2, const void *a3, unsigned __int16 a4)
{
  InstancePtr = ot::SettingsDriver::GetInstancePtr(this);
  return otPlatSettingsSet((uint64_t)InstancePtr, a2, a3, a4);
}

{
  return ot::SettingsDriver::Set(this, a2, a3, a4);
}

uint64_t ot::MeshCoP::Dataset::GetSize(ot::MeshCoP::Dataset *this)
{
  return *((unsigned __int16 *)this + 130);
}

{
  return ot::MeshCoP::Dataset::GetSize(this);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleValueIs(uint64_t a1, int a2, uint64_t a3, __int16 a4)
{
  uint64_t v87 = a1;
  int v86 = a2;
  *(void *)&v85[1] = a3;
  v85[0] = a4;
  int DataWithLen = 0;
  v83[4] = 0;
  *(_DWORD *)uint64_t v83 = pcap_enabled();
  BOOL v82 = promiscuous_enabled();
  if (v86 == 117 && (v82 || (v83[0] & 1) != 0))
  {
    write_stream_to_pcap(*(const unsigned __int8 **)&v85[1], v85[0]);
  }
  else if (v86 == 15538 || v86 == 15518)
  {
    *(void *)&__n[1] = 0;
    __n[0] = 0;
    ot::Spinel::Decoder::Decoder((ot::Spinel::Decoder *)v80);
    ot::Spinel::Decoder::Init((ot::Spinel::Decoder *)v80, *(const unsigned __int8 **)&v85[1], v85[0]);
    int DataWithLen = ot::Spinel::Decoder::ReadDataWithLen((ot::Spinel::Decoder *)v80, (const unsigned __int8 **)&__n[1], __n);
    if (!DataWithLen)
    {
      memcpy(__dst, *(const void **)&__n[1], __n[0]);
      if (v86 == 15538)
      {
        otLogInfoPlat("Got RFState %d\n", v9, v10, v11, v12, v13, v14, v15, __n[0]);
        ot::Spinel::mRFStateCallback(LOBYTE(v85[0]), __dst, ot::Spinel::mRFStateContext);
      }
      else if (v86 == 15518)
      {
        otLogInfoPlat("Got Coex State %d\n", v9, v10, v11, v12, v13, v14, v15, __n[0]);
        if (ot::Spinel::mCoexStateCallback) {
          ot::Spinel::mCoexStateCallback(LOBYTE(__n[0]), __dst);
        }
        else {
          otLogInfoPlat("coex state call back is not set. Might just set the duration time from ot command line.\n", v16, v17, v18, v19, v20, v21, v22, v69);
        }
      }
    }
  }
  else if (v86 == 113)
  {
    int DataWithLen = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ParseRadioFrame(a1, a1 + 8968, *(unsigned __int8 **)&v85[1], v85[0], (uint64_t)&v83[1], v6, v7, v8);
    if (!DataWithLen)
    {
      ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioReceive(a1);
      if (!v82 && (v83[0] & 1) == 0) {
        write_stream_to_pcap(*(const unsigned __int8 **)&v85[1], v85[0]);
      }
    }
  }
  else if (v86)
  {
    if (v86 == 57)
    {
      char v78 = 0;
      char v77 = 0;
      *(_DWORD *)&v83[1] = spinel_datatype_unpack(*(unsigned __int8 **)&v85[1], v85[0], "Cc", v4, v5, v6, v7, v8, (uint64_t)&v78);
      if (*(int *)&v83[1] > 0)
      {
        *(_WORD *)(a1 + 10044) &= ~0x80u;
        otPlatRadioEnergyScanDone(*(void *)(a1 + 216), v77);
      }
      else
      {
        int DataWithLen = 6;
      }
    }
    else
    {
      if (v86 == 112)
      {
        int v76 = 151;
        *(_DWORD *)&v83[1] = spinel_datatype_unpack_in_place(*(unsigned __int8 **)&v85[1], v85[0], "D", v4, v5, v6, v7, v8, (uint64_t)v88);
        __assert_rtn("HandleValueIs", "radio_spinel_impl.hpp", 1443, "len < sizeof(logStream)");
      }
      if (v86 == 116 && (*(unsigned char *)(a1 + 9334) & 1) != 0)
      {
        uint64_t v75 = 0;
        unsigned __int8 v74 = 0;
        *(_DWORD *)&v83[1] = spinel_datatype_unpack(*(unsigned __int8 **)&v85[1], v85[0], "U", v4, v5, v6, v7, v8, (uint64_t)&v75);
        if (*(int *)&v83[1] >= 0)
        {
          *(void *)&v85[1] += *(int *)&v83[1];
          v85[0] -= *(_WORD *)&v83[1];
          int v73 = 0;
          uint64_t v72 = 0;
          *(_DWORD *)&v83[1] = spinel_datatype_unpack(*(unsigned __int8 **)&v85[1], v85[0], "Ci", v55, v56, v57, v58, v59, (uint64_t)&v74);
          if (*(int *)&v83[1] > 0)
          {
            *(void *)&v85[1] += *(int *)&v83[1];
            v85[0] -= *(_WORD *)&v83[1];
            if (v85[0] < 8uLL
              || (*(_DWORD *)&v83[1] = spinel_datatype_unpack(*(unsigned __int8 **)&v85[1], v85[0], "X", v62, v63, v64, v65, v66, (uint64_t)&v72), *(int *)&v83[1] > 0))
            {
              if (v74)
              {
                uint64_t v68 = v74;
                char v67 = 1;
              }
              else
              {
                uint64_t v68 = 0;
                char v67 = 0;
              }
              if ((v67 & 1) == 0)
              {
                switch(v68)
                {
                  case 0:
                  case 1:
                  case 2:
                    otLogCritRcp("[%llu] RCP => %s", v60, v61, v62, v63, v64, v65, v66, v72);
                    handle_captureABC(2);
                    goto LABEL_61;
                  case 3:
                  case 4:
                    otLogWarnRcp("[%llu] RCP => %s", v60, v61, v62, v63, v64, v65, v66, v72);
                    goto LABEL_61;
                  case 5:
                    otLogNoteRcp("[%llu] RCP => %s", v60, v61, v62, v63, v64, v65, v66, v72);
                    goto LABEL_61;
                  case 6:
                    otLogInfoRcp("[%llu] RCP => %s", v60, v61, v62, v63, v64, v65, v66, v72);
                    goto LABEL_61;
                  case 7:
                    break;
                  default:
                    JUMPOUT(0);
                }
              }
              otLogDebgRcp("[%llu] RCP => %s", v60, v61, v62, v63, v64, v65, v66, v72);
            }
            else
            {
              int DataWithLen = 6;
            }
          }
          else
          {
            int DataWithLen = 6;
          }
        }
        else
        {
          int DataWithLen = 6;
        }
      }
    }
  }
  else
  {
    unsigned int v79 = 0;
    *(_DWORD *)&v83[1] = spinel_datatype_unpack(*(unsigned __int8 **)&v85[1], v85[0], "i", v4, v5, v6, v7, v8, (uint64_t)&v79);
    if (*(int *)&v83[1] > 0)
    {
      char v23 = spinel_status_to_cstr(v79);
      otLogInfoPlat("[-RCP-]: RCP was reset (%s, %d)", v24, v25, v26, v27, v28, v29, v30, v23);
      if (v79 < 0x70 || v79 > 0x80)
      {
        if (v79 == 2000000)
        {
          otLogInfoPlat("[-RCP-]: TX Request Timed out, TRANSMIT_NOT_GRANTED", v31, v32, v33, v34, v35, v36, v37, v70);
          if ((ot::Spinel::too_many_grants_denied(v46) & 1) == 1) {
            handle_captureABC(2000000);
          }
        }
        else if (v79 == 3)
        {
          handle_captureABC(3);
        }
        else
        {
          char v47 = spinel_status_to_cstr(v79);
          otLogInfoPlat("RCP last status: %s", v48, v49, v50, v51, v52, v53, v54, v47);
        }
      }
      else if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsEnabled(a1))
      {
        ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleRcpUnexpectedReset(a1, v79);
      }
      else
      {
        handle_rcp_reset(v79);
        char v38 = spinel_status_to_cstr(v79);
        otLogInfoPlat("RCP reset: %s", v39, v40, v41, v42, v43, v44, v45, v38);
        *(unsigned char *)(a1 + 9333) = 1;
      }
    }
    else
    {
      int DataWithLen = 6;
    }
  }
LABEL_61:
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, DataWithLen);
  ot::Spinel::LogIfFail((char)"Failed to handle ValueIs", DataWithLen);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleValueIs(a1, a2, a3, a4);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SaveFrame(uint64_t a1)
{
  unsigned int v8 = 0;
  if (ot::Hdlc::FrameWritePointer::CanWrite((ot::Hdlc::FrameWritePointer *)a1, 4u))
  {
    Skip__int16 Length = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetSkipLength(a1, v1);
    __int16 Length = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetLength((uint64_t *)a1, v2);
    ot::Encoding::LittleEndian::WriteUint16((unsigned __int16)(Length + SkipLength), *(_WORD **)(a1 + 8208), v4);
    *(void *)(a1 + 8208) = *(void *)a1;
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SetSkipLength(a1, 0);
    IgnoreError();
  }
  else
  {
    return 3;
  }
  return v8;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SaveFrame(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioReceive(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 9332) & 1) != 0 || *(_DWORD *)(a1 + 9328))
  {
    if (otPlatDiagModeGet()) {
      otPlatDiagRadioReceiveDone(*(void *)(a1 + 216), a1 + 8968, 0);
    }
    else {
      otPlatRadioReceiveDone(*(void *)(a1 + 216), (ot::Mac::Frame *)(a1 + 8968), 0);
    }
  }
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioReceive(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleRcpUnexpectedReset(uint64_t a1, int a2)
{
  uint64_t v5 = a1;
  int v4 = a2;
  uint64_t v3 = a1;
  ++*(_DWORD *)(a1 + 10108);
  char v2 = spinel_status_to_cstr(v4);
  otLogCritPlat("Unexpected RCP reset: %s", v2);
  *(_WORD *)(v3 + 10044) = *(_WORD *)(v3 + 10044) & 0xFFBF | 0x40;
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleRcpUnexpectedReset(a1, a2);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleWaitingResponse(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = a1;
  int v35 = a2;
  int v34 = a3;
  uint64_t v33 = a4;
  unsigned __int16 v32 = a5;
  if (a3)
  {
    if (v34 == 15296)
    {
      *(_DWORD *)(a1 + 8580) = 0;
      if (*(void *)(a1 + 10048)
        && (int)spinel_datatype_unpack_in_place(v33, v32, "U", (uint64_t)a4, a5, a6, a7, a8, *(void *)(a1 + 10048)) <= 0)
      {
        *(_DWORD *)(a1 + 8580) = 6;
      }
    }
    else if (v34 == *(_DWORD *)(a1 + 8552))
    {
      if (*(void *)(a1 + 8560))
      {
        otLogInfoPlat("::::mPropertyFormat[%s]", a2, a3, (uint64_t)a4, a5, a6, a7, a8, *(void *)(a1 + 8560));
        if (**(unsigned char **)(a1 + 8560) == 46)
        {
          uint64_t v16 = *(void *)(a1 + 8568);
          *(void *)(a1 + 8568) = v16 + 16;
          uint64_t v29 = *(uint64_t (**)(void *, unsigned __int8 *, void))v16;
          uint64_t v30 = *(void *)(v16 + 8);
          if (*(void *)v16 == 0 && (*(void *)v16 == 0 && (v30 & 1) == 0 || v30 == 0)) {
            __assert_rtn("HandleWaitingResponse", "radio_spinel_impl.hpp", 1232, "handler != nullptr");
          }
          uint64_t v26 = (void *)(a1 + (v30 >> 1));
          if (v30) {
            int v17 = (*(uint64_t (**)(void *, unsigned __int8 *, void))(*v26 + v29))(v26, v33, v32);
          }
          else {
            int v17 = v29(v26, v33, v32);
          }
          *(_DWORD *)(a1 + 8580) = v17;
        }
        else
        {
          int v28 = spinel_datatype_vunpack_in_place(v33, v32, *(char **)(a1 + 8560), *(void **)(a1 + 8568));
          if (v28 > 0)
          {
            *(_DWORD *)(a1 + 8580) = 0;
          }
          else
          {
            otLogInfoPlat("::::parse_error[%d]", v18, v19, v20, v21, v22, v23, v24, v28);
            *(_DWORD *)(a1 + 8580) = 6;
          }
        }
      }
      else if (v35 == *(_DWORD *)(a1 + 8576))
      {
        *(_DWORD *)(a1 + 8580) = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 8580) = 2;
      }
    }
    else
    {
      otLogWarnPlat("::::HandleWaitingResponse::ERROR_DROP", a2, a3, (uint64_t)a4, a5, a6, a7, a8, v25);
      *(_DWORD *)(a1 + 8580) = 2;
    }
  }
  else
  {
    unsigned int v31 = 0;
    if ((int)spinel_datatype_unpack(v33, v32, "i", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v31) > 0)
    {
      char v8 = spinel_status_to_cstr(v31);
      otLogInfoPlat("[-RCP-] Status = %s", v9, v10, v11, v12, v13, v14, v15, v8);
      *(_DWORD *)(a1 + 8580) = ot::Spinel::SpinelStatusToOtError((ot::Spinel *)v31);
      if (v31 == 11) {
        rcp_hard_reset();
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8580) = 6;
    }
  }
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, *(_DWORD *)(a1 + 8580));
  ot::Spinel::LogIfFail((char)"Error processing result", *(_DWORD *)(a1 + 8580));
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleWaitingResponse(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::updateStreamRawHistogram(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    int v4 = a2 / 5;
    if (a2 % 5)
    {
      if (v4 < 0)
      {
        char v5 = 0;
      }
      else
      {
        if (v4 >= 50) {
          ++*(_DWORD *)(a1 + 212);
        }
        else {
          ++*(_DWORD *)(a1 + 16 + 4 * v4);
        }
        char v5 = 1;
      }
    }
    else if (v4 <= 0 || v4 >= 50)
    {
      ++*(_DWORD *)(a1 + 212);
      char v5 = 1;
    }
    else
    {
      char v2 = (_DWORD *)(a1 + 16 + 4 * (v4 - 1));
      ++*v2;
      char v5 = 1;
    }
    char v6 = v5;
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::updateStreamRawHistogram(a1, a2);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleTransmitDone(uint64_t a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a1;
  int v38 = a2;
  int v37 = a3;
  uint64_t v36 = a4;
  unsigned __int16 v35 = a5;
  int v34 = 0;
  unsigned int v33 = 0;
  char v32 = 0;
  char v31 = 0;
  char v30 = 0;
  char v29 = 0;
  int v28 = 0;
  if (a2 == 6 && !v37)
  {
    int v28 = spinel_datatype_unpack(v36, v35, "i", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v33);
    if (v28 > 0)
    {
      if (v33 == 4)
      {
        otLogCritPlat("HandleTransmitDone: Status[%d] SPINEL_STATUS_INVALID_STATE", 4);
        __assert_rtn("HandleTransmitDone", "radio_spinel_impl.hpp", 2942, "false");
      }
      v36 += v28;
      v35 -= v28;
      int v28 = spinel_datatype_unpack(v36, v35, "b", v8, v9, v10, v11, v12, (uint64_t)&v32);
      if (v28 > 0)
      {
        v36 += v28;
        v35 -= v28;
        int v28 = spinel_datatype_unpack(v36, v35, "b", v13, v14, v15, v16, v17, (uint64_t)&v31);
        if (v28 > 0)
        {
          v36 += v28;
          v35 -= v28;
          if (v33)
          {
            int v34 = ot::Spinel::SpinelStatusToOtError((ot::Spinel *)v33);
            if (v33 == 11) {
              rcp_hard_reset();
            }
          }
          else
          {
            int v34 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ParseRadioFrame(a1, a1 + 9096, v36, v35, (uint64_t)&v28, v18, v19, v20);
            if (v34) {
              goto LABEL_24;
            }
            v36 += v28;
            v35 -= v28;
          }
          ot::Mac::TxFrame::SetIsHeaderUpdated(*(void *)(a1 + 9160), v31 & 1);
          if ((*(unsigned char *)(a1 + 9180) & 0x20) != 0
            && (v31 & 1) != 0
            && ot::Mac::Frame::GetSecurityEnabled(*(ot::Mac::Frame **)(a1 + 9160)))
          {
            unsigned __int8 v27 = 0;
            int v28 = spinel_datatype_unpack(v36, v35, "CL", v25, v21, v22, v23, v24, (uint64_t)&v27);
            v36 += v28;
            v35 -= v28;
            if (v28 <= 0)
            {
              int v34 = 6;
              goto LABEL_24;
            }
            ot::Mac::Frame::SetKeyId(*(ot::Mac::Frame **)(a1 + 9160), v27);
            ot::Mac::Frame::SetFrameCounter(*(ot::Mac::Frame **)(a1 + 9160), 0);
            *(_WORD *)(a1 + 10044) = *(_WORD *)(a1 + 10044) & 0xFEFF | 0x100;
            *(_DWORD *)(a1 + 10040) = 0;
          }
          ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorTxInfo(a1, &v28, &v35, v36, v21, v22, v23, v24);
          goto LABEL_24;
        }
        int v34 = 6;
      }
      else
      {
        int v34 = 6;
      }
    }
    else
    {
      int v34 = 6;
    }
  }
  else
  {
    int v34 = 1;
  }
LABEL_24:
  *(_DWORD *)(a1 + 9328) = 4;
  *(_DWORD *)(a1 + 9188) = v34;
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateParseErrorCount(a1, v34);
  ot::Spinel::LogIfFail((char)"Handle transmit done failed", v34);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HandleTransmitDone(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Mac::TxFrame::SetIsHeaderUpdated(uint64_t this, char a2)
{
  *(unsigned char *)(this + 45) = *(unsigned char *)(this + 45) & 0xFE | a2 & 1;
  return this;
}

{
  return ot::Mac::TxFrame::SetIsHeaderUpdated(this, a2);
}

BOOL ot::Mac::Frame::GetSecurityEnabled(ot::Mac::Frame *this)
{
  unsigned __int16 FrameControlField = ot::Mac::Frame::GetFrameControlField(this);
  return ot::Mac::Frame::IsSecurityEnabled((ot::Mac::Frame *)FrameControlField);
}

{
  return ot::Mac::Frame::GetSecurityEnabled(this);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RestoreProperties(uint64_t a1)
{
  uint64_t v179 = a1;
  uint64_t v164 = a1;
  uint64_t v78 = *(unsigned __int16 *)(a1 + 9178);
  if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(a1, 54, "S"))
  {
    v178 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v178) {
      v163 = v178 + 1;
    }
    else {
      v163 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    unsigned int v158 = v163;
    uint64_t v159 = 9178;
    uint64_t v78 = *(unsigned __int16 *)(v164 + 9178);
    unsigned int v160 = 54;
    unsigned int v161 = "S";
    int v162 = 2;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 54, "S") == 7) {
      unsigned __int8 v1 = 2;
    }
    else {
      unsigned __int8 v1 = 1;
    }
    char v2 = otExitCodeToString(v1);
    otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v158, 3757, v2);
    handle_daemon_exit();
    uint64_t v78 = *(unsigned __int16 *)(v164 + v159);
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v160, v161) == 7) {
      int v3 = v162;
    }
    else {
      int v3 = 1;
    }
    exit(v3);
  }
  uint64_t v78 = *(unsigned __int16 *)(v164 + 9176);
  if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 53, "S"))
  {
    unsigned int v177 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v177) {
      v157 = v177 + 1;
    }
    else {
      v157 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    int v152 = v157;
    uint64_t v153 = 9176;
    uint64_t v78 = *(unsigned __int16 *)(v164 + 9176);
    unsigned int v154 = 53;
    unsigned int v155 = "S";
    int v156 = 2;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 53, "S") == 7) {
      unsigned __int8 v4 = 2;
    }
    else {
      unsigned __int8 v4 = 1;
    }
    char v5 = otExitCodeToString(v4);
    otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v152, 3758, v5);
    handle_daemon_exit();
    uint64_t v78 = *(unsigned __int16 *)(v164 + v153);
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v154, v155) == 7) {
      int v6 = v156;
    }
    else {
      int v6 = 1;
    }
    exit(v6);
  }
  uint64_t v78 = v164 + 9168;
  if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 52, "E"))
  {
    uint64_t v176 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v176) {
      unsigned int v151 = v176 + 1;
    }
    else {
      unsigned int v151 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    uint64_t v146 = v151;
    uint64_t v147 = 9168;
    uint64_t v78 = v164 + 9168;
    unsigned int v148 = 52;
    v149 = "E";
    int v150 = 2;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 52, "E") == 7) {
      unsigned __int8 v7 = 2;
    }
    else {
      unsigned __int8 v7 = 1;
    }
    uint64_t v8 = otExitCodeToString(v7);
    otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v146, 3759, v8);
    handle_daemon_exit();
    uint64_t v78 = v164 + v147;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v148, v149) == 7) {
      int v9 = v150;
    }
    else {
      int v9 = 1;
    }
    exit(v9);
  }
  uint64_t v78 = *(unsigned __int8 *)(v164 + 9181);
  if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 33, "C"))
  {
    int v175 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
    if (v175) {
      uint64_t v145 = v175 + 1;
    }
    else {
      uint64_t v145 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
    }
    uint64_t v140 = v145;
    uint64_t v141 = 9181;
    uint64_t v78 = *(unsigned __int8 *)(v164 + 9181);
    unsigned int v142 = 33;
    uint64_t v143 = "C";
    int v144 = 2;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 33, "C") == 7) {
      unsigned __int8 v17 = 2;
    }
    else {
      unsigned __int8 v17 = 1;
    }
    uint64_t v18 = otExitCodeToString(v17);
    otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v140, 3760, v18);
    handle_daemon_exit();
    uint64_t v78 = *(unsigned __int8 *)(v164 + v141);
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v142, v143) == 7) {
      int v19 = v144;
    }
    else {
      int v19 = 1;
    }
    exit(v19);
  }
  if ((*(_WORD *)(v164 + 10044) & 2) != 0)
  {
    uint64_t v20 = *(unsigned __int8 *)(v164 + 9338);
    uint64_t v21 = *(unsigned __int8 *)(v164 + 9339);
    unsigned int v139 = &v78;
    uint64_t v78 = v20;
    uint64_t v79 = v21;
    uint64_t v80 = v164 + 9340;
    uint64_t v81 = 16;
    uint64_t v82 = v164 + 9356;
    uint64_t v83 = 16;
    uint64_t v84 = v164 + 9372;
    uint64_t v85 = 16;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 2048, "CCddd"))
    {
      uint64_t v174 = 0;
      uint64_t v174 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v174) {
        v138 = v174 + 1;
      }
      else {
        v138 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v128 = v138;
      uint64_t v129 = 9338;
      uint64_t v22 = *(unsigned __int8 *)(v164 + 9338);
      uint64_t v130 = 9339;
      uint64_t v23 = *(unsigned __int8 *)(v164 + 9339);
      uint64_t v131 = 9340;
      uint64_t v132 = 9356;
      uint64_t v133 = 9372;
      uint64_t v78 = v22;
      uint64_t v79 = v23;
      uint64_t v80 = v164 + 9340;
      uint64_t v134 = 16;
      uint64_t v81 = 16;
      uint64_t v82 = v164 + 9356;
      uint64_t v83 = 16;
      uint64_t v84 = v164 + 9372;
      uint64_t v85 = 16;
      unsigned int v135 = 2048;
      unsigned int v136 = "CCddd";
      BOOL v24 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 2048, "CCddd") == 7;
      int v137 = 2;
      if (v24) {
        unsigned __int8 v25 = 2;
      }
      else {
        unsigned __int8 v25 = 1;
      }
      uint64_t v26 = otExitCodeToString(v25);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v128, 3768, v26);
      handle_daemon_exit();
      uint64_t v27 = *(unsigned __int8 *)(v164 + v130);
      uint64_t v78 = *(unsigned __int8 *)(v164 + v129);
      uint64_t v79 = v27;
      uint64_t v80 = v164 + v131;
      uint64_t v81 = v134;
      uint64_t v82 = v164 + v132;
      uint64_t v83 = v134;
      uint64_t v84 = v164 + v133;
      uint64_t v85 = v134;
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v135, v136) == 7) {
        int v28 = v137;
      }
      else {
        int v28 = 1;
      }
      exit(v28);
    }
  }
  if ((*(_WORD *)(v164 + 10044) & 0x100) != 0)
  {
    uint64_t v78 = (*(_DWORD *)(v164 + 10040) + 1000);
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 2049, "L"))
    {
      unsigned int v173 = 0;
      unsigned int v173 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v173) {
        unsigned int v127 = v173 + 1;
      }
      else {
        unsigned int v127 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v123 = v127;
      uint64_t v78 = (*(_DWORD *)(v164 + 10040) + 1000);
      unsigned int v124 = 2049;
      uint64_t v125 = "L";
      BOOL v29 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 2049, "L") == 7;
      int v126 = 2;
      if (v29) {
        unsigned __int8 v30 = 2;
      }
      else {
        unsigned __int8 v30 = 1;
      }
      char v31 = otExitCodeToString(v30);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v123, 3787, v31);
      handle_daemon_exit();
      uint64_t v78 = (*(_DWORD *)(v164 + 10040) + 1000);
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v124, v125) == 7) {
        int v32 = v126;
      }
      else {
        int v32 = 1;
      }
      exit(v32);
    }
  }
  for (int i = 0; i < *(__int16 *)(v164 + 9516); ++i)
  {
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(v164, 4868, "S", v12, v13, v14, v15, v16, *(unsigned __int16 *)(v164 + 9388 + 2 * i)))
    {
      unsigned int v171 = 0;
      unsigned int v171 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v171) {
        uint64_t v122 = v171 + 1;
      }
      else {
        uint64_t v122 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v117 = v122;
      uint64_t v118 = 9388;
      uint64_t v78 = *(unsigned __int16 *)(v164 + 9388 + 2 * i);
      unsigned int v119 = 4868;
      char v120 = "S";
      BOOL v38 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(v164, 4868, "S", v33, v34, v35, v36, v37, v78) == 7;
      int v121 = 2;
      if (v38) {
        unsigned __int8 v39 = 2;
      }
      else {
        unsigned __int8 v39 = 1;
      }
      uint64_t v40 = otExitCodeToString(v39);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v117, 3802, v40);
      handle_daemon_exit();
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(v164, v119, v120, v41, v42, v43, v44, v45, *(unsigned __int16 *)(v164 + v118 + 2 * i)) == 7)int v46 = v121; {
      else
      }
        int v46 = 1;
      exit(v46);
    }
  }
  for (int j = 0; j < *(__int16 *)(v164 + 10030); ++j)
  {
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(v164, 4869, "E", v12, v13, v14, v15, v16, v164 + 9518 + 8 * j))
    {
      unsigned int v169 = 0;
      unsigned int v169 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v169) {
        uint64_t v116 = v169 + 1;
      }
      else {
        uint64_t v116 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v111 = v116;
      uint64_t v112 = 9518;
      unsigned int v113 = 4869;
      int v114 = "E";
      BOOL v52 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(v164, 4869, "E", v47, v48, v49, v50, v51, v164 + 9518 + 8 * j) == 7;
      int v115 = 2;
      if (v52) {
        unsigned __int8 v53 = 2;
      }
      else {
        unsigned __int8 v53 = 1;
      }
      uint64_t v54 = otExitCodeToString(v53);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v111, 3808, v54);
      handle_daemon_exit();
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Insert(v164, v113, v114, v55, v56, v57, v58, v59, v164 + v112 + 8 * j) == 7)int v60 = v115; {
      else
      }
        int v60 = 1;
      exit(v60);
    }
  }
  if ((*(_WORD *)(v164 + 10044) & 4) != 0)
  {
    uint64_t v78 = *(char *)(v164 + 10036);
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 36, "c"))
    {
      unsigned int v168 = 0;
      unsigned int v168 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v168) {
        uint64_t v110 = v168 + 1;
      }
      else {
        uint64_t v110 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v105 = v110;
      uint64_t v106 = 10036;
      uint64_t v78 = *(char *)(v164 + 10036);
      unsigned int v107 = 36;
      uint64_t v108 = "c";
      BOOL v61 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 36, "c") == 7;
      int v109 = 2;
      if (v61) {
        unsigned __int8 v62 = 2;
      }
      else {
        unsigned __int8 v62 = 1;
      }
      uint64_t v63 = otExitCodeToString(v62);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v105, 3813, v63);
      handle_daemon_exit();
      uint64_t v78 = *(char *)(v164 + v106);
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v107, v108) == 7) {
        int v64 = v109;
      }
      else {
        int v64 = 1;
      }
      exit(v64);
    }
  }
  if ((*(_WORD *)(v164 + 10044) & 8) != 0)
  {
    uint64_t v78 = *(char *)(v164 + 10037);
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 37, "c"))
    {
      unsigned int v167 = 0;
      unsigned int v167 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v167) {
        uint64_t v104 = v167 + 1;
      }
      else {
        uint64_t v104 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      uint64_t v99 = v104;
      uint64_t v100 = 10037;
      uint64_t v78 = *(char *)(v164 + 10037);
      unsigned int v101 = 37;
      uint64_t v102 = "c";
      BOOL v65 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 37, "c") == 7;
      int v103 = 2;
      if (v65) {
        unsigned __int8 v66 = 2;
      }
      else {
        unsigned __int8 v66 = 1;
      }
      char v67 = otExitCodeToString(v66);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v99, 3818, v67);
      handle_daemon_exit();
      uint64_t v78 = *(char *)(v164 + v100);
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v101, v102) == 7) {
        int v68 = v103;
      }
      else {
        int v68 = 1;
      }
      exit(v68);
    }
  }
  if ((*(_WORD *)(v164 + 10044) & 0x10) != 0)
  {
    uint64_t v78 = *(_WORD *)(v164 + 10044) & 1;
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 4621, "b"))
    {
      v166 = 0;
      v166 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v166) {
        int v98 = v166 + 1;
      }
      else {
        int v98 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      unsigned int v92 = v98;
      uint64_t v93 = 10044;
      __int16 v69 = *(_WORD *)(v164 + 10044);
      int v94 = 1;
      uint64_t v78 = v69 & 1;
      unsigned int v95 = 4621;
      unsigned int v96 = "b";
      BOOL v70 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 4621, "b") == 7;
      int v97 = 2;
      if (v70) {
        unsigned __int8 v71 = 2;
      }
      else {
        unsigned __int8 v71 = 1;
      }
      uint64_t v72 = otExitCodeToString(v71);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v92, 3823, v72);
      handle_daemon_exit();
      uint64_t v78 = *(_WORD *)(v164 + v93) & v94 & 1;
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v95, v96) == 7) {
        int v73 = v97;
      }
      else {
        int v73 = 1;
      }
      exit(v73);
    }
  }
  if ((*(_WORD *)(v164 + 10044) & 0x20) != 0)
  {
    uint64_t v78 = *(char *)(v164 + 10038);
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 42, "c"))
    {
      int v165 = 0;
      int v165 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp", 47);
      if (v165) {
        uint64_t v91 = v165 + 1;
      }
      else {
        uint64_t v91 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/lib/spinel/radio_spinel_impl.hpp";
      }
      int v86 = v91;
      uint64_t v87 = 10038;
      uint64_t v78 = *(char *)(v164 + 10038);
      unsigned int v88 = 42;
      uint64_t v89 = "c";
      BOOL v74 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, 42, "c") == 7;
      int v90 = 2;
      if (v74) {
        unsigned __int8 v75 = 2;
      }
      else {
        unsigned __int8 v75 = 1;
      }
      int v76 = otExitCodeToString(v75);
      otLogCritPlat("%s() at %s:%d: %s", "RestoreProperties", v86, 3828, v76);
      handle_daemon_exit();
      uint64_t v78 = *(char *)(v164 + v87);
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set(v164, v88, v89) == 7) {
        int v77 = v90;
      }
      else {
        int v77 = 1;
      }
      exit(v77);
    }
  }
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::CalcRcpTimeOffset(v164, v10, v11, v12, v13, v14, v15, v16);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RestoreProperties(a1);
}

void ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RestoreHostProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a1;
  uint64_t v9 = a1;
  signed __int8 v23 = 0;
  unsigned __int8 v22 = 0;
  unsigned __int8 v21 = 0;
  BOOL v20 = 0;
  unsigned int v19 = 0;
  unsigned int v18 = 0;
  BOOL v17 = 0;
  BOOL v16 = 0;
  signed __int8 v15 = 0;
  unsigned __int8 v14 = 0;
  unsigned __int8 v13 = 0;
  unsigned __int8 v12 = 0;
  unsigned __int8 v11 = 0;
  unsigned __int8 v10 = 0;
  otLogWarnPlat("RestoreHostProperties ..", a2, a3, a4, a5, a6, a7, a8, (char)v8);
  get_host_rcp_setting_params(&v23, &v22, &v21, &v20, &v19, &v18, &v17, &v16, &v15, &v14, &v13, &v12, &v11, &v10);
}

uint64_t ot::Min<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 >= a2) {
    return a2;
  }
  else {
    return a1;
  }
}

{
  return ot::Min<unsigned int>(a1, a2);
}

void *ot::MaxPowerTable::MaxPowerTable(void *this)
{
  *this = 0x1E1E1E1E1E1E1E1ELL;
  *(void *)((char *)this + 7) = 0x1E1E1E1E1E1E1E1ELL;
  return this;
}

void *ot::SettingsDriver::GetInstancePtr(ot::SettingsDriver *this)
{
  return ot::InstanceLocator::GetInstance(this);
}

{
  return ot::SettingsDriver::GetInstancePtr(this);
}

void *ot::InstanceLocator::GetInstance(ot::InstanceLocator *this)
{
  return &ot::gInstanceRaw;
}

{
  return ot::InstanceLocator::GetInstance(this);
}

BOOL ot::Mac::Frame::IsSecurityEnabled(ot::Mac::Frame *this)
{
  return (unsigned __int16)ot::Mac::Frame::GetFcfBit((ot::Mac::Frame *)(unsigned __int16)this, 8, 512) != 0;
}

{
  return ot::Mac::Frame::IsSecurityEnabled(this);
}

uint64_t ot::Mac::Frame::GetFrameControlField(ot::Mac::Frame *this)
{
  unsigned __int16 v3 = **(unsigned __int8 **)this;
  if (!ot::Mac::Frame::IsShortFcf((ot::Mac::Frame *)**(unsigned __int8 **)this)) {
    v3 |= *(unsigned __int8 *)(*(void *)this + 1) << 8;
  }
  return v3;
}

{
  return ot::Mac::Frame::GetFrameControlField(this);
}

uint64_t ot::Mac::Frame::GetFcfBit(ot::Mac::Frame *this, __int16 a2, __int16 a3)
{
  __int16 v6 = (__int16)this;
  if (ot::Mac::Frame::IsMultipurpose((ot::Mac::Frame *)(unsigned __int16)this)) {
    return (unsigned __int16)(v6 & a3);
  }
  else {
    return (unsigned __int16)(v6 & a2);
  }
}

{
  return ot::Mac::Frame::GetFcfBit(this, a2, a3);
}

BOOL ot::Mac::Frame::IsMultipurpose(ot::Mac::Frame *this)
{
  return (this & 7) == 5;
}

{
  return ot::Mac::Frame::IsMultipurpose(this);
}

BOOL ot::Mac::Frame::IsShortFcf(ot::Mac::Frame *this)
{
  return (this & 0xF) == 5;
}

{
  return ot::Mac::Frame::IsShortFcf(this);
}

uint64_t ot::Hdlc::FrameWritePointer::FrameWritePointer(uint64_t this)
{
  *(void *)this = 0;
  *(_WORD *)(this + 8) = 0;
  return this;
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetSkipLength(uint64_t a1, const unsigned __int8 *a2)
{
  return (unsigned __int16)ot::Encoding::LittleEndian::ReadUint16((ot::Encoding::LittleEndian *)(*(void *)(a1 + 8208) + 2), a2);
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetSkipLength(a1, a2);
}

uint64_t ot::Encoding::LittleEndian::ReadUint16(ot::Encoding::LittleEndian *this, const unsigned __int8 *a2)
{
  return (unsigned __int16)(*(unsigned __int8 *)this | (*((unsigned __int8 *)this + 1) << 8));
}

{
  return ot::Encoding::LittleEndian::ReadUint16(this, a2);
}

uint64_t ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SetSkipLength(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v7 = 3;
  uint64_t v6 = *(void *)(a1 + 8208);
  if (v6 + 4 + (unint64_t)a2 <= ot::GetArrayEnd<unsigned char,(unsigned short)8192>(a1 + 10))
  {
    ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)(*(void *)(a1 + 8208) + 2), v2);
    *(void *)a1 = ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::GetFrame(a1, v3);
    *(_WORD *)(a1 + 8) = a1 + 8202 - *(_WORD *)a1;
    return 0;
  }
  return v7;
}

{
  return ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::SetSkipLength(a1, a2);
}

uint64_t ot::GetArrayEnd<unsigned char,(unsigned short)8192>(uint64_t a1)
{
  return a1 + 0x2000;
}

{
  return ot::GetArrayEnd<unsigned char,(unsigned short)8192>(a1);
}

uint64_t ot::Encoding::LittleEndian::WriteUint16(uint64_t this, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = this;
  return this;
}

{
  return ot::Encoding::LittleEndian::WriteUint16(this, a2, a3);
}

uint64_t __os_log_helper_16_0_2_8_0_8_0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 1) = 2;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  return result;
}

uint64_t __os_log_helper_16_2_2_8_32_8_32(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 2;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 32;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  return result;
}

BOOL ot::Hdlc::FrameWritePointer::CanWrite(ot::Hdlc::FrameWritePointer *this, unsigned __int16 a2)
{
  return *((unsigned __int16 *)this + 4) >= (int)a2;
}

{
  return ot::Hdlc::FrameWritePointer::CanWrite(this, a2);
}

void ot::Mac::SubMac::InitializeCSTPhase(ot::Mac::Frame **this)
{
  ot::Mac::Frame::GetThreadIe(this[3], 2u);
  if (v1)
  {
    unsigned __int8 v22 = (ot::Mac::CstIe *)(v1 + 2);
    char v2 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)this);
    if (ot::Mle::Mle::IsCslPeripheralDetaching(v2))
    {
      ot::Mac::CstIe::SetPhase(v22, 0, v3);
      ot::Mac::CstIe::SetPeriod(v22, 0, v4);
      ot::Mac::Frame::SetCslIe(this[3], 0, 0);
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"SubMac", "%s: Setting CST Phase/Period to 0, Needs Confirmation", v5, v6, v7, v8, v9, v10, (char)"InitializeCSTPhase");
      uint64_t v11 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)this);
      ot::Mle::Mle::SetPeripheralDetachState(v11, 0);
      uint64_t v12 = ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)this);
      ot::Mle::Mle::NeedsDetachConfirm(v12, 1);
    }
    else
    {
      ot::Mac::CstIe::SetPhase(v22, 0xFFFFu, v3);
      ot::Mac::CstIe::SetPeriod(v22, 0xFFFFu, v13);
      ot::Mac::Frame::SetCslIe(this[3], 0xFFFFu, 0xFFFFu);
    }
  }
  else
  {
    unsigned __int8 v14 = (ot::Mle::Mle *)ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>((ot::InstanceLocator *)this);
    if (ot::Mle::Mle::IsCslPeripheralDetaching(v14)) {
      ot::Logger::LogAtLevel<(ot::LogLevel)4>((ot *)"SubMac", "%s: Detach is pending, but TX frame does not have CST IE to set it to 0 for link teardown", v15, v16, v17, v18, v19, v20, (char)"InitializeCSTPhase");
    }
  }
}

void ot::Mac::Frame::GetThreadIe(ot::Mac::Frame *this, unsigned __int8 a2)
{
  ot::AsConst<ot::Mac::Frame>();
  ot::Mac::Frame::GetThreadIe(v2, a2);
  ot::AsNonConst<unsigned char>();
}

{
  ot::Mac::Frame::GetThreadIe(this, a2);
}

uint64_t ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(ot::InstanceLocator *a1)
{
  Instance = ot::InstanceLocator::GetInstance(a1);
  return ot::Instance::Get<ot::Mle::Mle>((uint64_t)Instance);
}

{
  return ot::GetProvider<ot::InstanceLocator>::Get<ot::Mle::Mle>(a1);
}

uint64_t ot::Mle::Mle::IsCslPeripheralDetaching(ot::Mle::Mle *this)
{
  return *((unsigned char *)this + 1112) & 1;
}

{
  return ot::Mle::Mle::IsCslPeripheralDetaching(this);
}

uint64_t ot::Mac::CstIe::SetPhase(ot::Mac::CstIe *this, unsigned __int16 a2, unsigned __int8 *a3)
{
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)this + 2, a3);
}

{
  return ot::Mac::CstIe::SetPhase(this, a2, a3);
}

uint64_t ot::Mac::CstIe::SetPeriod(ot::Mac::CstIe *this, unsigned __int16 a2, unsigned __int8 *a3)
{
  return ot::Encoding::LittleEndian::WriteUint16(a2, (_WORD *)this + 3, a3);
}

{
  return ot::Mac::CstIe::SetPeriod(this, a2, a3);
}

uint64_t ot::Mle::Mle::SetPeripheralDetachState(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1112) = *(unsigned char *)(this + 1112) & 0xFE | a2 & 1;
  return this;
}

{
  return ot::Mle::Mle::SetPeripheralDetachState(this, a2);
}

uint64_t ot::Mle::Mle::NeedsDetachConfirm(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1112) = *(unsigned char *)(this + 1112) & 0xFD | (2 * (a2 & 1));
  return this;
}

{
  return ot::Mle::Mle::NeedsDetachConfirm(this, a2);
}

uint64_t ot::Instance::Get<ot::Mle::Mle>(uint64_t a1)
{
  return a1 + 90320;
}

{
  return ot::Instance::Get<ot::Mle::Mle>(a1);
}

uint64_t otPlatVendorGetRFState(uint64_t a1, uint64_t (*a2)(void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  otLogInfoPlat("otPlatVendorGetRFState", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v14);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRFState((uint64_t)&sRadioSpinel, a2, a3, v8, v9, v10, v11, v12);
}

uint64_t otPlatVendorGetRxOnIdleUseQOSPercentagePolicyConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRxOnIdleUseQOSPercentagePolicyConfig((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetDutyCycle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDutyCycle((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetTimelineLogLevel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTimelineLogLevel((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexCollectionDuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexCollectionDuration((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexCounter((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorUpdateCoexStateTable(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexStateEvent((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetRxOnIdleUseQOSPercentagePolicyConfig(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRxOnIdleUseQOSPercentagePolicyConfig((uint64_t)&sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetDutyCycle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDutyCycle((uint64_t)&sRadioSpinel, a2, a3, a4 & 1, a5, a6, a7, a8);
  }
  if (!(a2 % 0x4E2) && a2 >= 0x4E2 && a2 <= 0x493E)
  {
    if (a3 % 0x3A98 || a3 < 0x3A98 || a3 > 0xE6B68)
    {
      otLogInfoPlat("BT Load: Invalid interval time! y value should be MULTIPLE of 15000us and max value can be 63*15000=945000.", a2, a3, a4, a5, a6, a7, a8, v9);
      return 7;
    }
    if (a3 < a2 || (a3 - a2) < 0x64)
    {
      otLogInfoPlat("BT Load: Invalid Input! Requirement: X < Y and Y - X > 100", a2, a3, a4, a5, a6, a7, a8, v9);
      return 7;
    }
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDutyCycle((uint64_t)&sRadioSpinel, a2, a3, a4 & 1, a5, a6, a7, a8);
  }
  otLogInfoPlat("BT Load: Invalid high duty time! x value should be MULTIPLE of 1250us and max value can be 15*1250=18750.", a2, a3, a4, a5, a6, a7, a8, v9);
  return 7;
}

uint64_t otPlatVendorSetTimelineLogLevel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTimelineLogLevel((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexCollectionDuration(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCollectionDuration((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetOrStopCoexCollection(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCollection((uint64_t)&sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t ot::Cli::Interpreter::Process<27894625410694749ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  unsigned int v4 = 0;
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetVendorRFState((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  return v4;
}

BOOL ot::Utils::CmdLineParser::Arg::IsEmpty(ot::Utils::CmdLineParser::Arg *this)
{
  return *(void *)this == 0;
}

{
  return ot::Utils::CmdLineParser::Arg::IsEmpty(this);
}

uint64_t ot::Cli::Interpreter::Process<5506771640909644592ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetDutyCycle((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetDutyCycle((ot::Cli::OutputImplementer **)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Interpreter::Process<10542062831847721859ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetTimelineLogLevel((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetTimelineLogLevel((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Interpreter::Process<2720438644259256559ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetCoexCollectionDuration((ot::Cli::Vendor *)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetCoexCollectionDuration((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Interpreter::Process<15578538707854125405ull>(uint64_t a1, ot::Utils::CmdLineParser::Arg *a2)
{
  if (ot::Utils::CmdLineParser::Arg::IsEmpty(a2)) {
    return ot::Cli::Vendor::ProcessGetCoexCounter((ot::Cli::OutputImplementer **)(a1 + 400), a2);
  }
  else {
    return ot::Cli::Vendor::ProcessSetCoexCollection((ot::Cli::Vendor *)(a1 + 400), (ot::Utils::CmdLineParser **)a2, v2);
  }
}

uint64_t ot::Cli::Vendor::ProcessGetVendorRFState(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  return otPlatVendorGetRFState(InstancePtr, (uint64_t (*)(void, void, void))ot::Cli::Vendor::HandleRFStateReply, (uint64_t)this, v3, v4, v5, v6, v7);
}

uint64_t ot::Cli::Output::GetInstancePtr(ot::Cli::Output *this)
{
  return *(void *)this;
}

{
  return ot::Cli::Output::GetInstancePtr(this);
}

uint64_t ot::Cli::Vendor::HandleRFStateReply(ot::Cli::Vendor *this, unsigned __int8 *a2, ot::Cli::OutputImplementer **a3, void *a4)
{
  return ot::Cli::Vendor::HandleRFStateReply(a3, this, a2);
}

uint64_t ot::Cli::Vendor::HandleRFStateReply(ot::Cli::OutputImplementer **this, unsigned __int8 a2, unsigned __int8 *a3)
{
  uint64_t v3 = "ON";
  if (a3[4]) {
    uint64_t v4 = "ON";
  }
  else {
    uint64_t v4 = "OFF";
  }
  signed __int8 v23 = v4;
  if (!a3[8]) {
    uint64_t v3 = "OFF";
  }
  uint64_t v24 = v3;
  if (a3[9]) {
    unsigned __int8 v22 = "HEAD";
  }
  else {
    unsigned __int8 v22 = "BODY";
  }
  int v5 = a3[7];
  int v6 = a3[6];
  int v7 = a3[5];
  int v8 = a3[10];
  int v9 = a3[11];
  int v10 = a3[12];
  int v11 = a3[13];
  int v12 = a3[14];
  int v13 = a3[15];
  int v14 = a3[20];
  int v15 = a3[21];
  uint64_t v16 = "ON";
  if (a3[24]) {
    uint64_t v17 = "ON";
  }
  else {
    uint64_t v17 = "OFF";
  }
  if (a3[25]) {
    uint64_t v18 = "ON";
  }
  else {
    uint64_t v18 = "OFF";
  }
  if (a3[26]) {
    uint64_t v19 = "ON";
  }
  else {
    uint64_t v19 = "OFF";
  }
  if (a3[29]) {
    uint64_t v20 = "ON";
  }
  else {
    uint64_t v20 = "OFF";
  }
  if ((a3[29] & 2) == 0) {
    uint64_t v16 = "OFF";
  }
  return ot::Cli::Output::OutputLine(this, "  cell_ant:%s,\n                   cell_ant_val:%d \n                   pcap:%d \n                   bt_ant_Val:%d \n                   wifi_5g_state:%s \n                   head_body:%s \n                   mode:%d \n                   current_cc:%d \n                   epa_status_ant[0~3]:%d %d %d %d \n                   target_power_ant[0~3]:%2.2f %2.2f %2.2f %2.2f \n                   rstrain_status:%d \n                   coex_operating_mode:%d \n                   mrc_status:%d \n                   band_code:%d  \n                   wifi_2g_state:%s \n                   rc1_state: %s \n                   bt_status:%s \n                   default_ant:%d \n"
           "                   current_ant:%d \n"
           "                   tpc:%s \n"
           "                   antenna_diversity:%s \n",
           v23,
           v7,
           v6,
           v5,
           v24,
           v22,
           v8,
           v9,
           v10,
           v11,
           v12,
           v13,
           (double)(char)a3[16] / 4.0,
           (double)(char)a3[17] / 4.0,
           (double)(char)a3[18] / 4.0,
           (double)(char)a3[19] / 4.0,
           v14,
           v15,
           a3[22],
           a3[23],
           v17,
           v18,
           v19,
           a3[27],
           a3[28],
           v20,
           v16);
}

uint64_t ot::Cli::Vendor::ProcessGetDutyCycle(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v15 = this;
  int v14 = a2;
  unsigned int DutyCycle = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int DutyCycle = otPlatVendorGetDutyCycle(InstancePtr, (uint64_t)v11, v3, v4, v5, v6, v7, v8);
  if (!DutyCycle) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "High Duty = %uus, Interuint64_t val = %uus, Datapoll Align is %d", v11[0], v11[1], v12 & 1);
  }
  return DutyCycle;
}

uint64_t ot::Cli::Vendor::ProcessGetTimelineLogLevel(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v14 = this;
  int v13 = a2;
  unsigned int TimelineLogLevel = 0;
  unsigned __int8 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int TimelineLogLevel = otPlatVendorGetTimelineLogLevel(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!TimelineLogLevel) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Timeline log level = %u", v11);
  }
  return TimelineLogLevel;
}

uint64_t ot::Cli::Vendor::ProcessGetCoexCollectionDuration(ot::Cli::Vendor *this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v14 = this;
  int v13 = a2;
  unsigned int CoexCollectionDuration = 0;
  unsigned __int16 v11 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
  unsigned int CoexCollectionDuration = otPlatVendorGetCoexCollectionDuration(InstancePtr, (uint64_t)&v11, v3, v4, v5, v6, v7, v8);
  if (!CoexCollectionDuration) {
    ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Coex State Duration is %d", v11);
  }
  return CoexCollectionDuration;
}

uint64_t ot::Cli::Vendor::ProcessGetCoexCounter(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser::Arg *a2)
{
  int v28 = this;
  uint64_t v27 = a2;
  unsigned __int16 v11 = this;
  unsigned int v26 = 0;
  uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
  if (!otPlatVendorGetCoexCounter(InstancePtr, (uint64_t)&v12, v3, v4, v5, v6, v7, v8))
  {
    v10[15] = &v12;
    v10[16] = v10;
    ot::Cli::Output::OutputLine(v11, "coex state is:\n\t\t\t\trssi_average:%d \n\t\t\t\tnum_of_tx_req:%d \n\t\t\t\tnum_of_rtx:%d \n\t\t\t\tnum_of_tx_granted:%d \n\t\t\t\tnum_of_tx_cca_failed:%d \n\t\t\t\tnum_of_tx_acked_packets:%d \n\t\t\t\taverage_backoff_time:%d \n\t\t\t\taverage_tx_power:%d \n\t\t\t\tnum_of_rx_granted:%d \n\t\t\t\tnum_of_rx_granted_ack:%d \n\t\t\t\tnum_of_good_rx:%d \n\t\t\t\tnum_of_rx_sync_TO:%d \n\t\t\t\tnum_of_rx_granted_WIFI:%d \n\t\t\t\tnum_of_rx_granted_ack_WIFI:%d \n", v12, v13, v14,
      v15,
      v16,
      v17,
      v18,
      v19,
      v20,
      v21,
      v22,
      v23,
      v24,
      v25);
  }
  return v26;
}

uint64_t ot::Cli::Vendor::ProcessSetDutyCycle(ot::Cli::OutputImplementer **this, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  unsigned __int16 v17 = this;
  unsigned __int16 v16 = a2;
  unsigned int v15 = 0;
  unsigned int v14 = 0;
  unsigned int v13 = 0;
  BOOL v12 = 0;
  unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(a2, (char *)&v14, a3);
  if (!v15)
  {
    if (!v14)
    {
      ot::Cli::Output::OutputLine(this, "Disable Duty Cycle functionality");
LABEL_7:
      uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr((ot::Cli::Output *)this);
      return otPlatVendorSetDutyCycle(InstancePtr, v14, v13, v12, v6, v7, v8, v9);
    }
    unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsUint32(v16 + 1, (char *)&v13, v3);
    if (!v15)
    {
      unsigned int v15 = ot::Utils::CmdLineParser::Arg::ParseAsBool(v16 + 2, &v12, v4);
      if (!v15)
      {
        ot::Cli::Output::OutputLine(this, "Set high duty = %uus, interuint64_t val = %uus, datapullalign = %u", v14, v13, v12);
        goto LABEL_7;
      }
    }
  }
  return v15;
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsUint32(ot::Utils::CmdLineParser **this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseAsUint32(*this, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsUint32(this, a2, a3);
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsBool(ot::Utils::CmdLineParser **this, BOOL *a2, BOOL *a3)
{
  return ot::Utils::CmdLineParser::ParseAsBool(*this, (char *)a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsBool(this, a2, a3);
}

uint64_t ot::Cli::Vendor::ProcessSetTimelineLogLevel(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  unsigned int v15 = this;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint8(a2, (char *)&v12, a3);
  if (!v13)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    unsigned int v13 = otPlatVendorSetTimelineLogLevel(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
    if (!v13) {
      persist_timelinelog_level();
    }
  }
  return v13;
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsUint8(ot::Utils::CmdLineParser **this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseAsUint8(*this, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsUint8(this, a2, a3);
}

uint64_t ot::Cli::Vendor::ProcessSetCoexCollectionDuration(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2, unsigned __int8 *a3)
{
  unsigned int v15 = this;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  unsigned __int16 v12 = 0;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsUint16(a2, (char *)&v12, a3);
  if (!v13)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    unsigned int v13 = otPlatVendorSetCoexCollectionDuration(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
    if (!v13)
    {
      if (v12) {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Set Coex State Duration as %d msec", v12);
      }
      else {
        ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Disable Coex State report");
      }
    }
  }
  return v13;
}

uint64_t ot::Utils::CmdLineParser::Arg::ParseAsUint16(ot::Utils::CmdLineParser **this, char *a2, unsigned __int8 *a3)
{
  return ot::Utils::CmdLineParser::ParseAsUint16(*this, a2, a3);
}

{
  return ot::Utils::CmdLineParser::Arg::ParseAsUint16(this, a2, a3);
}

uint64_t ot::Cli::Vendor::ProcessSetCoexCollection(ot::Cli::Vendor *this, ot::Utils::CmdLineParser **a2, BOOL *a3)
{
  unsigned int v15 = this;
  unsigned int v14 = a2;
  unsigned int v13 = 0;
  BOOL v12 = 0;
  unsigned int v13 = ot::Utils::CmdLineParser::Arg::ParseAsBool(a2, &v12, a3);
  if (!v13)
  {
    uint64_t InstancePtr = ot::Cli::Output::GetInstancePtr(this);
    unsigned int v13 = otPlatVendorResetOrStopCoexCollection(InstancePtr, v12, v4, v5, v6, v7, v8, v9);
    if (!v13) {
      ot::Cli::Output::OutputLine((ot::Cli::OutputImplementer **)this, "Set Set Coex Collection as %u", v12);
    }
  }
  return v13;
}

void sub_1001D8844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D968C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *CtrXPC::Result::operator=(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  std::string::operator=[abi:ne180100]((uint64_t)(a1 + 2), (long long *)(a2 + 8));
  return a1;
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, id *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = xpc::object::operator*(*(id **)a1);
  uint64_t v7 = *(const char **)(a1 + 8);
  uint64_t v8 = xpc::object::operator*(a2);
  xpc_dictionary_set_value(v6, v7, v8);

  *a3 = *a2;
  xpc_object_t v9 = xpc_null_create();
  id v10 = *a2;
  *a2 = v9;
}

void sub_1001DA08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  uint64_t v52 = *(void *)(v50 - 160);
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }

  objc_destroyWeak((id *)(v50 - 152));
  _Unwind_Resume(a1);
}

void sub_1001DB658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  uint64_t v51 = *(void *)(v49 - 240);
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }

  objc_destroyWeak((id *)(v49 - 232));
  _Unwind_Resume(a1);
}

void sub_1001DBD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,id location)
{
  if (a34 < 0) {
    operator delete(__p);
  }

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001DC1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,id location)
{
  if (a34 < 0) {
    operator delete(__p);
  }

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001DC530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v40 = v36;
  dispatch::queue::~queue((id *)&a9);

  objc_destroyWeak(v38);
  if (a20 < 0) {
    operator delete(__p);
  }

  objc_destroyWeak(v35);
  objc_destroyWeak(v34);

  objc_destroyWeak((id *)(v39 - 88));
  _Unwind_Resume(a1);
}

void sub_1001DCA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }

  _Unwind_Resume(a1);
}

uint64_t boost::any_cast<unsigned char>(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)boost::any_cast<unsigned char>(a1);
  if (!v1)
  {
    v3.__vftable = 0;
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return *v1;
}

void sub_1001DCB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void dispatch::queue::~queue(id *this)
{
  id v2 = *this;
  *this = 0;
}

void sub_1001DCD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DCEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DD134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }

  objc_destroyWeak((id *)(v34 - 56));
  _Unwind_Resume(a1);
}

uint64_t std::string::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  return a1;
}

void sub_1001DD298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001DDAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v41 = v39;

  if (a31 < 0) {
    operator delete(__p);
  }
  xpc::dict::~dict(&a32);
  if (a38 < 0) {
    operator delete(a33);
  }
  uint64_t v43 = *(void *)(v40 - 112);
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }

  objc_destroyWeak((id *)(v40 - 104));
  _Unwind_Resume(a1);
}

void sub_1001DDFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,id location,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }

  if (a27 < 0) {
    operator delete(a22);
  }
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 8))(a28);
  }

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001DE870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,id location,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a35) {
    (*(void (**)(uint64_t))(*(void *)a35 + 8))(a35);
  }

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001DF19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v67 - 89) < 0) {
    operator delete(*(void **)(v67 - 112));
  }
  uint64_t v69 = *(void *)(v67 - 184);
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  uint64_t v70 = *(void *)(v67 - 176);
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  if (v66 < 0) {
    operator delete(v64);
  }

  objc_destroyWeak((id *)(v67 - 168));
  _Unwind_Resume(a1);
}

void sub_1001DFE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v44 = *(void *)(v42 - 96);
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }

  objc_destroyWeak((id *)(v42 - 88));
  _Unwind_Resume(a1);
}

void sub_1001E058C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v54 - 121) < 0) {
    operator delete(*(void **)(v54 - 144));
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree(v54 - 176);

  objc_destroyWeak((id *)(v54 - 152));
  _Unwind_Resume(a1);
}

uint64_t **std::map<std::string,boost::any>::operator[](uint64_t **a1, _OWORD *a2)
{
  std::bad_cast v3 = a2;
  return std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v3)+ 7;
}

void sub_1001E089C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  objc_destroyWeak((id *)(v22 - 24));
  _Unwind_Resume(a1);
}

void sub_1001E0A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E0A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E0B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E0D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001E1014(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1001E1384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001E1418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E1484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E167C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  xpc::dict::~dict((xpc_object_t *)&a9);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E19A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,id location)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (a28 < 0) {
    operator delete(a23);
  }

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,id location,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id xpc::dict::object_proxy::operator*(uint64_t a1)
{
  id v2 = xpc::object::operator*(*(id **)a1);
  std::bad_cast v3 = xpc_dictionary_get_value(v2, *(const char **)(a1 + 8));

  return v3;
}

void sub_1001E2448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **std::map<std::string,trackerInfo>::operator[](uint64_t **a1, std::string *a2)
{
  std::bad_cast v3 = a2;
  return std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v3)+ 7;
}

void sub_1001E3F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,void *__p,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 8))(a32);
  }
  if (a42 < 0) {
    operator delete(__p);
  }

  objc_destroyWeak((id *)(v58 - 168));
  _Unwind_Resume(a1);
}

void *CtrXPC::Result::toString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xE) {
    id v2 = "kInvalidErrorCode";
  }
  else {
    id v2 = off_10049C030[a1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void sub_1001E4714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,id location)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  if (a21 < 0) {
    operator delete(a16);
  }

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E4C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

id xpc::object::operator*(id *a1)
{
  return *a1;
}

uint64_t std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree(uint64_t a1)
{
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,boost::any>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::bad_cast v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::~__tree(uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *std::string::basic_string[abi:ne180100](void *a1, unint64_t a2, char a3)
{
  std::bad_cast v3 = a1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 0x17)
  {
    if ((a2 | 7) == 0x17) {
      size_t v6 = 25;
    }
    else {
      size_t v6 = (a2 | 7) + 1;
    }
    a1 = operator new(v6);
    v3[1] = a2;
    void v3[2] = v6 | 0x8000000000000000;
    *std::bad_cast v3 = a1;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_11;
    }
  }
  uint64_t v7 = 0;
  do
    *((unsigned char *)a1 + v7++) = a3;
  while (a2 != v7);
LABEL_11:
  *((unsigned char *)a1 + a2) = 0;
  return v3;
}

uint64_t boost::any_cast<unsigned char>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)boost::any::type((boost::any *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !result))
    {
      if (*v1) {
        return *v1 + 8;
      }
      else {
        __break(0x5516u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *boost::any::type(boost::any *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    return (void *)(*(uint64_t (**)(void))(*(void *)v1 + 16))();
  }
  else {
}
  }

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::release(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    if (result) {
      *a1 = 0;
    }
  }
  return result;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::refcount_ptr(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  return a1;
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::release(a1);
  *a1 = a2;
  if (a2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

uint64_t boost::any_cast<std::string>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)boost::any::type((boost::any *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000001003F6406 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      if (*v1) {
        return *v1 + 8;
      }
      else {
        __break(0x5516u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        xpc_object_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

__n128 std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<Q0>(uint64_t a1@<X0>, __n128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = (__n128 *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  unint64_t v8 = (*a2)[1].n128_u64[0];
  __n128 result = **a2;
  void v6[2] = result;
  v6[3].n128_u64[0] = v8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  v6[3].n128_u64[1] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5) {
    *a1 = v5;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], *a3);
  uint64_t v7 = a1[2];
  BOOL v8 = __CFADD__(v7, 1);
  xpc_object_t v9 = (uint64_t *)((char *)v7 + 1);
  if (v8) {
    __break(0x5500u);
  }
  else {
    a1[2] = v9;
  }
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  BOOL v4 = v3 < 0;
  if (v3 >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = *a3;
  }
  if (v4) {
    size_t v6 = (size_t)a3[1];
  }
  else {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    xpc_object_t v9 = a2;
  }
  else {
    xpc_object_t v9 = *a2;
  }
  if (v6 >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v6;
  }
  int v11 = memcmp(v9, v5, v10);
  if (v11) {
    return v11 < 0;
  }
  else {
    return v8 < v6;
  }
}

uint64_t std::__tree_left_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 8);
  uint64_t v2 = *v1;
  *(void *)(result + 8) = *v1;
  if (v2) {
    *(void *)(v2 + 16) = result;
  }
  v1[2] = *(void *)(result + 16);
  *(void *)(*(void *)(result + 16) + 8 * (**(void **)(result + 16) != result)) = v1;
  uint64_t *v1 = result;
  *(void *)(result + 16) = v1;
  return result;
}

void *std::__tree_right_rotate[abi:ne180100]<std::__tree_node_base<void *> *>(void *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *(void *)(*result + 8);
  *__n128 result = v2;
  if (v2) {
    *(void *)(v2 + 16) = result;
  }
  *(void *)(v1 + 16) = result[2];
  *(void *)(result[2] + 8 * (*(void *)result[2] != (void)result)) = v1;
  *(void *)(v1 + 8) = result;
  result[2] = v1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::any>,void *>>>>::reset[abi:ne180100](void **a1, void *a2)
{
  int v3 = *a1;
  *a1 = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::any>,void *>>>::operator()[abi:ne180100]((uint64_t)(a1 + 1), v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::any>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,boost::any>,0>((uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_1001E585C()
{
}

void sub_1001E58F4()
{
}

void *std::map<std::string,boost::any>::map[abi:ne180100](void *a1, uint64_t *a2)
{
  BOOL v4 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__tree(a1);
  std::map<std::string,boost::any>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>>>((uint64_t)v4, *a2, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1001E5950(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree(v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,boost::any>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    BOOL v4 = (uint64_t **)result;
    uint64_t v5 = (uint64_t *)(result + 8);
    do
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::any> const&>(v4, v5, (const void **)(a2 + 32), a2 + 32);
      __n128 result = std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v6);
      a2 = v6;
    }
    while (v6 != a3);
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__tree(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *__n128 result = result + 1;
  return result;
}

std::string *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__construct_node<std::pair<std::string const,boost::any> const&>@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,boost::any>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1001E5A38(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::any>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void **std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator--[abi:ne180100](void **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = (void *)**result;
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (void *)v2[1];
    }
    while (v2);
  }
  else
  {
    do
    {
      int v3 = (void *)v1[2];
      BOOL v4 = *v3 == (void)v1;
      uint64_t v1 = v3;
    }
    while (v4);
  }
  *__n128 result = v3;
  return result;
}

uint64_t std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(void **)result;
  uint64_t v2 = *(void **)(*(void *)result + 8);
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  else
  {
    do
    {
      int v3 = (void *)v1[2];
      BOOL v4 = *v3 == (void)v1;
      uint64_t v1 = v3;
    }
    while (!v4);
  }
  *(void *)__n128 result = v3;
  return result;
}

std::string *std::pair<std::string const,boost::any>::pair[abi:ne180100](std::string *a1, const std::string *a2)
{
  std::string::basic_string(a1, a2);
  uint64_t data = (uint64_t)a2[1].__r_.__value_.__l.__data_;
  if (data) {
    uint64_t data = (*(uint64_t (**)(uint64_t))(*(void *)data + 24))(data);
  }
  a1[1].__r_.__value_.__r.__words[0] = data;
  return a1;
}

void sub_1001E5B1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::clear(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = v2;
  *(void *)(a1 + 16) = 0;
  *uint64_t v2 = 0;
}

uint64_t std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v5 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__lower_bound<std::string>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v4 != v5)
  {
    uint64_t v6 = v5;
    if (!std::less<std::string>::operator()[abi:ne180100](a1 + 16, a2, (const void **)(v5 + 32))) {
      return v6;
    }
  }
  return v4;
}

uint64_t std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__lower_bound<std::string>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = a1 + 16;
    do
    {
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a2);
      xpc_object_t v9 = (uint64_t *)(v5 + 8);
      if (!v8)
      {
        xpc_object_t v9 = (uint64_t *)v5;
        a4 = v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__erase_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::find<std::string>(a1, a2);
  if (a1 + 8 == v3) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::erase(a1, v3);
  return 1;
}

uint64_t std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__remove_node_pointer(uint64_t a1, uint64_t *a2)
{
  BOOL v8 = a2;
  uint64_t result = std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v8);
  if (*(uint64_t **)a1 == a2) {
    *(void *)a1 = v8;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  BOOL v6 = v5 != 0;
  uint64_t v7 = v5 - 1;
  if (v6)
  {
    *(void *)(a1 + 16) = v7;
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
    return (uint64_t)v8;
  }
  else
  {
    __break(0x5515u);
  }
  return result;
}

void *std::__tree_next[abi:ne180100]<std::__tree_node_base<void *> *>(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  if (v1)
  {
    do
    {
      uint64_t result = v1;
      uint64_t v1 = (void *)*v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      uint64_t result = (void *)v3[2];
      BOOL v4 = *result == (void)v3;
      uint64_t v3 = result;
    }
    while (!v4);
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, const std::string **a4)
{
  uint64_t v7 = (void ***)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  BOOL v8 = *v7;
  if (!*v7)
  {
    xpc_object_t v9 = (uint64_t **)v7;
    std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v12, v9, (uint64_t *)v11[0]);
    BOOL v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v8;
}

std::string *std::__tree<std::__value_type<std::string,trackerInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,trackerInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,trackerInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  BOOL v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,trackerInfo>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>(v7, (std::string *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1001E5E84(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>::construct[abi:ne180100]<std::pair<std::string const,trackerInfo>,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>,void>(int a1, std::string *this, uint64_t a3, const std::string **a4)
{
  uint64_t result = std::string::basic_string(this, *a4);
  result[1].__r_.__value_.__r.__words[0] = 0;
  result[1].__r_.__value_.__l.__size_ = 0;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>::operator()[abi:ne180100]((uint64_t)(a1 + 1), v3);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,trackerInfo>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void OUTLINED_FUNCTION_1_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 14) = v6;
  *(_WORD *)(a3 + 18) = 2080;
  *(void *)(a3 + 20) = v3;
  *(_WORD *)(a3 + 28) = v5;
  *(_DWORD *)(a3 + 30) = v4;
}

void OUTLINED_FUNCTION_2_6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 4) = v3;
  *(_WORD *)(a3 + 12) = 1024;
}

void OUTLINED_FUNCTION_3_5(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x22u);
}

void OUTLINED_FUNCTION_11_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

void OUTLINED_FUNCTION_12_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 14) = v2;
  *(_WORD *)(a2 + 18) = 2080;
}

void OUTLINED_FUNCTION_13_1(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 4) = v2;
  *(_WORD *)(a2 + 12) = 1024;
}

void RcpHostContext::GetRcpHostContext()
{
  __assert_rtn("GetRcpHostContext", "host_context.h", 276, "sRcpHostContext != nullptr");
}

void _GLOBAL__sub_I_ThreadNetworkManagerInstance_SM_extension_mm()
{
  qword_1004B62B8 = 0;
  qword_1004B62B0 = 0;
  ProvideEmacTracker = (uint64_t)&qword_1004B62B0;
  __cxa_atexit((void (*)(void *))std::map<std::string,trackerInfo>::~map[abi:ne180100], &ProvideEmacTracker, (void *)&_mh_execute_header);
}

void setValue(const __CFString *a1, const void *a2)
{
}

void setValueForBundle(const __CFString *a1, const void *a2, const char *cStr)
{
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFPreferencesSetAppValue(a1, a2, v5);
  if (v5)
  {
    CFRelease(v5);
  }
}

CFPropertyListRef copyValue(const __CFString *a1)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(a1, @"com.apple.threadradiodData");
  if (!result)
  {
    return CFPreferencesCopyAppValue(a1, @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.threadradiodData.plist");
  }
  return result;
}

CFPropertyListRef copyValueForBundle(const __CFString *a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x8000100u);
  CFPropertyListRef v4 = CFPreferencesCopyAppValue(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

BOOL synchronize(void)
{
  return CFPreferencesAppSynchronize(@"com.apple.threadradiodData") != 0;
}

CFStringRef synchronize(const char *cStr)
{
  CFStringRef result = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (result)
  {
    CFStringRef v2 = result;
    int v3 = CFPreferencesAppSynchronize(result);
    CFRelease(v2);
    return (const __CFString *)(v3 != 0);
  }
  return result;
}

void saveStringValue(const char *cStr, const char *__s)
{
  if (__s && strlen(__s) >= 0x65)
  {
    CFPropertyListRef v4 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v10 = 67109634;
      *(_DWORD *)int v11 = 100;
      *(_WORD *)&v11[4] = 2080;
      *(void *)&v11[6] = cStr;
      __int16 v12 = 2080;
      unsigned int v13 = __s;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Error: Input string value length is greater than %d. For key =>  %s . string value is => \"%s\"", (uint8_t *)&v10, 0x1Cu);
    }
  }
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef v6 = CFStringCreateWithCString(0, __s, 0x8000100u);
  CFStringRef v7 = v6;
  if (v5 && v6)
  {
    CFPreferencesSetAppValue(v5, v6, @"com.apple.threadradiodData");
    if (!CFPreferencesAppSynchronize(@"com.apple.threadradiodData"))
    {
      BOOL v8 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        *(void *)int v11 = cStr;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Failed to Sync key: \"%s\"", (uint8_t *)&v10, 0xCu);
      }
    }
LABEL_15:
    CFRelease(v5);
    goto LABEL_16;
  }
  xpc_object_t v9 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed to save saveStringValue due to null input.", (uint8_t *)&v10, 2u);
  }

  if (v5) {
    goto LABEL_15;
  }
LABEL_16:
  if (v7) {
    CFRelease(v7);
  }
}

void saveStringValueasNULL(const char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFPreferencesSetAppValue(v2, 0, @"com.apple.threadradiodData");
  if (!CFPreferencesAppSynchronize(@"com.apple.threadradiodData"))
  {
    int v3 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      CFStringRef v5 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Failed to Sync key: \"%s\"", (uint8_t *)&v4, 0xCu);
    }
  }
  if (v2) {
    CFRelease(v2);
  }
}

BOOL saveDoubleValue(const char *cStr, double a2)
{
  double valuePtr = a2;
  CFStringRef v3 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFStringRef v5 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    int v11 = "BOOL saveDoubleValue(const char *, double)";
    __int16 v12 = 1024;
    int v13 = 134;
    __int16 v14 = 2080;
    unsigned int v15 = cStr;
    __int16 v16 = 2112;
    CFNumberRef v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s:%d: - key = %s, v = %@", buf, 0x26u);
  }

  CFPreferencesSetAppValue(v3, v4, @"com.apple.threadradiodData");
  int v6 = CFPreferencesAppSynchronize(@"com.apple.threadradiodData");
  if (v6)
  {
    if (!v3) {
      goto LABEL_11;
    }
LABEL_10:
    CFRelease(v3);
    goto LABEL_11;
  }
  CFStringRef v7 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v11 = "BOOL saveDoubleValue(const char *, double)";
    __int16 v12 = 1024;
    int v13 = 139;
    __int16 v14 = 2080;
    unsigned int v15 = cStr;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s:%d: Failed to Sync key: \"%s\"", buf, 0x1Cu);
  }

  if (v3)
  {
    CFPreferencesSetAppValue(v3, 0, @"com.apple.threadradiodData");
    goto LABEL_10;
  }
LABEL_11:
  if (v4) {
    CFRelease(v4);
  }
  return v6 != 0;
}

void saveIntValue(const char *cStr, int a2)
{
  int valuePtr = a2;
  CFStringRef v3 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFStringRef v5 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    xpc_object_t v9 = cStr;
    __int16 v10 = 2112;
    CFNumberRef v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "saveIntValue - key = %s, v = %@", buf, 0x16u);
  }

  CFPreferencesSetAppValue(v3, v4, @"com.apple.threadradiodData");
  if (!CFPreferencesAppSynchronize(@"com.apple.threadradiodData"))
  {
    int v6 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      xpc_object_t v9 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Failed to Sync key: \"%s\"", buf, 0xCu);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void saveLLIntValueForBundleID(const char *cStr, uint64_t a2, const char *a3)
{
  uint64_t valuePtr = a2;
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  CFStringRef v7 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    CFNumberRef v11 = cStr;
    __int16 v12 = 2112;
    CFNumberRef v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "saveLLIntValue - key = %s, v = %@, uint64_t val = 0x%llx", buf, 0x20u);
  }

  setValueForBundle(v5, v6, a3);
  if ((synchronize(a3) & 1) == 0)
  {
    BOOL v8 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      CFNumberRef v11 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Failed to Sync key: \"%s\"", buf, 0xCu);
    }
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
}

void saveLLIntValueNULLForBundleID(const char *cStr, const char *a2)
{
  CFStringRef v4 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  setValueForBundle(v4, 0, a2);
  if ((synchronize(a2) & 1) == 0)
  {
    CFStringRef v5 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      CFStringRef v7 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Failed to Sync key: \"%s\"", (uint8_t *)&v6, 0xCu);
    }
  }
  if (v4) {
    CFRelease(v4);
  }
}

void saveIntValueasNULL(const char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFPreferencesSetAppValue(v2, 0, @"com.apple.threadradiodData");
  if (!CFPreferencesAppSynchronize(@"com.apple.threadradiodData"))
  {
    CFStringRef v3 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      CFStringRef v5 = cStr;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Failed to Sync key: \"%s\"", (uint8_t *)&v4, 0xCu);
    }
  }
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t getIntValue(const char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  unsigned int valuePtr = 0;
  CFPropertyListRef v3 = copyValue(v2);
  int v4 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    xpc_object_t v9 = cStr;
    __int16 v10 = 2112;
    CFPropertyListRef v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "getIntValue - key = %s, v = %@", buf, 0x16u);
  }

  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID()) {
      CFNumberGetValue((CFNumberRef)v3, kCFNumberIntType, &valuePtr);
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  return valuePtr;
}

uint64_t getLLIntValueForBundleID(const char *cStr, const char *a2)
{
  CFStringRef v4 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  uint64_t valuePtr = 0;
  CFNumberRef v5 = (const __CFNumber *)copyValueForBundle(v4, a2);
  CFNumberRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFNumberGetTypeID()) {
      CFNumberGetValue(v6, kCFNumberLongLongType, &valuePtr);
    }
  }
  BOOL v8 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v12 = cStr;
    __int16 v13 = 2112;
    CFNumberRef v14 = v6;
    __int16 v15 = 2048;
    uint64_t v16 = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "getLLIntValue - key = %s, v = %@, value = 0x%llx", buf, 0x20u);
  }

  if (v4) {
    CFRelease(v4);
  }
  if (v6) {
    CFRelease(v6);
  }
  return valuePtr;
}

double getDoubleValue(const char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  double valuePtr = 0.0;
  CFNumberRef v3 = (const __CFNumber *)copyValue(v2);
  CFNumberRef v4 = v3;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID()) {
      CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  CFNumberRef v6 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    __int16 v10 = "double getDoubleValue(const char *)";
    __int16 v11 = 1024;
    int v12 = 277;
    __int16 v13 = 2080;
    CFNumberRef v14 = cStr;
    __int16 v15 = 2048;
    double v16 = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d:  - key = %s, v = %f", buf, 0x26u);
  }

  return valuePtr;
}

long long *getStringValue(const char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef v2 = &stringValue;
  stringValue = 0u;
  unk_1004B62E0 = 0u;
  xmmword_1004B62F0 = 0u;
  unk_1004B6300 = 0u;
  xmmword_1004B6310 = 0u;
  unk_1004B6320 = 0u;
  dword_1004B6330 = 0;
  CFStringRef v3 = (const __CFString *)copyValue(v1);
  CFStringRef v4 = v3;
  if (!v3 || (CFTypeID v5 = CFGetTypeID(v3), v5 != CFStringGetTypeID()))
  {
    CFStringRef v2 = 0;
    if (!v1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (!CFStringGetCString(v4, (char *)&stringValue, 100, 0x8000100u)) {
    CFStringRef v2 = 0;
  }
  if (v1) {
LABEL_8:
  }
    CFRelease(v1);
LABEL_9:
  if (v4) {
    CFRelease(v4);
  }
  return v2;
}

void getStringValueLocal(const char *cStr, char *a2, int a3)
{
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef v6 = (const __CFString *)copyValue(v5);
  CFStringRef v7 = v6;
  if (v6)
  {
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFStringGetTypeID())
    {
      CFStringGetCString(v7, a2, a3, 0x8000100u);
      xpc_object_t v9 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        __int16 v11 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "getStringValueLocal: Read String: %s", (uint8_t *)&v10, 0xCu);
      }
    }
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v7) {
    CFRelease(v7);
  }
}

BOOL getBoolValue_isStateMachineEnabled(void)
{
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"Thread:StateMachine:Wed:Enabled", @"com.apple.threadradiodData", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    return AppBooleanValue != 0;
  }
  CFStringRef v1 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    getBoolValue_isStateMachineEnabled();
  }

  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"Thread:StateMachine:Wed:Enabled", @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.threadradiodData.plist", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    return AppBooleanValue != 0;
  }
  CFStringRef v3 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    getBoolValue_isStateMachineEnabled();
  }

  return 1;
}

BOOL getBoolValue_isAudioNoThreadFeatureEnabled(void)
{
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"EnableAudioNoThreadFeature", @"com.apple.threadradiodData", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    int v1 = AppBooleanValue;
  }
  else
  {
    CFStringRef v2 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      getBoolValue_isAudioNoThreadFeatureEnabled();
    }

    Boolean keyExistsAndHasValidFormat = 0;
    int v1 = CFPreferencesGetAppBooleanValue(@"EnableAudioNoThreadFeature", @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.threadradiodData.plist", &keyExistsAndHasValidFormat);
    CFStringRef v3 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      getBoolValue_isAudioNoThreadFeatureEnabled();
    }
  }
  return v1 != 0;
}

BOOL getBoolValue_isThreadAlwaysOnFeatureEnabled(void)
{
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"EnableThreadAlwaysOnFeature", @"com.apple.threadradiodData", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    int v1 = AppBooleanValue;
  }
  else
  {
    CFStringRef v2 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      getBoolValue_isThreadAlwaysOnFeatureEnabled();
    }

    Boolean keyExistsAndHasValidFormat = 0;
    int v1 = CFPreferencesGetAppBooleanValue(@"EnableThreadAlwaysOnFeature", @"/System/Library/PrivateFrameworks/CoreThreadRadio.framework/com.apple.threadradiodData.plist", &keyExistsAndHasValidFormat);
    CFStringRef v3 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      getBoolValue_isThreadAlwaysOnFeatureEnabled();
    }
  }
  return v1 != 0;
}

BOOL clearThreadConfiguration(void)
{
  uint64_t v0 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    CFStringRef v7 = "clearThreadConfiguration";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Entered in %s", (uint8_t *)&v6, 0xCu);
  }

  CFStringRef v1 = CFStringCreateWithCString(0, "TC", 0x8000100u);
  CFStringRef v2 = CFStringCreateWithCString(0, "com.apple.threadradiodData", 0x8000100u);
  CFPreferencesSetAppValue(v1, 0, v2);
  int v3 = CFPreferencesAppSynchronize(@"com.apple.threadradiodData");
  if (!v3)
  {
    CFStringRef v4 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Failed to Sync \"Thread Credentials\" ", (uint8_t *)&v6, 2u);
    }
  }
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v3 != 0;
}

void saveThreadCredentials(int a1, uint64_t a2, const char *a3, unsigned __int8 *a4, const char *a5, int a6)
{
  __int16 valuePtr = a1;
  uint64_t v23 = a2;
  int v22 = a6;
  encode_data_into_string(a4, 16, __b, 0x24uLL, 0);
  int v12 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = a1;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = a2;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = a3;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = __b;
    *(_WORD *)&buf[38] = 2080;
    *(void *)&buf[40] = a5;
    __int16 v31 = 1024;
    int v32 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Saving TC as follows - PANID: %d, XPANID: %llu, NWName: %s, key: %s, PSKc: %s, ch = %d", buf, 0x36u);
  }

  *(_OWORD *)buf = *(_OWORD *)off_10049C0A8;
  *(_OWORD *)&buf[16] = *(_OWORD *)off_10049C0B8;
  *(_OWORD *)&buf[32] = *(_OWORD *)off_10049C0C8;
  values[0] = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberLongLongType, &v23);
  values[2] = (void *)CFStringCreateWithCString(0, a3, 0x8000100u);
  values[3] = CFDataCreate(0, a4, 16);
  values[4] = (void *)CFStringCreateWithCString(0, a5, 0x8000100u);
  values[5] = CFNumberCreate(0, kCFNumberIntType, &v22);
  CFDictionaryRef v13 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)buf, (const void **)values, 6, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v14 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)unsigned __int16 v25 = 138412546;
    CFDictionaryRef v26 = v13;
    __int16 v27 = 2112;
    CFDictionaryRef v28 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Saving TC Dict (%@): %@", v25, 0x16u);
  }

  if (v13)
  {
    CFStringRef v15 = CFStringCreateWithCString(0, "TC", 0x8000100u);
    CFStringRef v16 = CFStringCreateWithCString(0, "com.apple.threadradiodData", 0x8000100u);
    CFStringRef v17 = v16;
    if (v15 && v16)
    {
      CFPreferencesSetAppValue(v15, v13, v16);
      if (!CFPreferencesAppSynchronize(@"com.apple.threadradiodData"))
      {
        unsigned __int16 v18 = ThreadNetworkLoggingCategory(1u);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)unsigned __int16 v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Failed to Sync \"Thread Credentials\"", v25, 2u);
        }
      }
      CFRelease(v13);
    }
    else
    {
      unsigned __int16 v19 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)unsigned __int16 v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Failed to save \"Thread Credentials\"", v25, 2u);
      }

      if (!v15) {
        goto LABEL_17;
      }
    }
    CFRelease(v15);
LABEL_17:
    if (v17) {
      CFRelease(v17);
    }
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    unsigned __int16 v21 = values[i];
    if (v21)
    {
      CFRelease(v21);
      if (values[i]) {
        CFRelease(*(CFTypeRef *)&buf[i * 8]);
      }
    }
  }
}

void saveThreadCredentialsAsString(const char *a1, const char *a2, const char *a3, const char *a4, const char *a5, int a6)
{
  int valuePtr = a6;
  int v12 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = a2;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&buf[24] = a3;
    *(_WORD *)int v22 = 2080;
    *(void *)&v22[2] = a4;
    *(_WORD *)&unsigned char v22[10] = 2080;
    *(void *)&v22[12] = a5;
    __int16 v23 = 1024;
    int v24 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Saving TC as follows - PANID: %s, XPANID: %s, NWName: %s, key: %s, PSKc: %s, ch = %d", buf, 0x3Au);
  }

  *(_OWORD *)buf = *(_OWORD *)off_10049C0A8;
  *(_OWORD *)&buf[16] = *(_OWORD *)off_10049C0B8;
  *(_OWORD *)int v22 = *(_OWORD *)off_10049C0C8;
  values[0] = (void *)CFStringCreateWithCString(0, a1, 0x8000100u);
  values[1] = (void *)CFStringCreateWithCString(0, a2, 0x8000100u);
  values[2] = (void *)CFStringCreateWithCString(0, a3, 0x8000100u);
  values[3] = (void *)CFStringCreateWithCString(0, a4, 0x8000100u);
  values[4] = (void *)CFStringCreateWithCString(0, a5, 0x8000100u);
  values[5] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryRef v13 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)buf, (const void **)values, 6, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v14 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v18 = 138412290;
    CFDictionaryRef v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Saving TC Dict: %@", (uint8_t *)&v18, 0xCu);
  }

  if (v13)
  {
    CFPreferencesSetAppValue(@"TC", v13, @"com.apple.threadradiodData");
    if (!CFPreferencesAppSynchronize(@"com.apple.threadradiodData"))
    {
      CFStringRef v15 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LOWORD(v18) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Failed to Sync \"Thread Credentials\"", (uint8_t *)&v18, 2u);
      }
    }
    CFRelease(v13);
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    CFStringRef v17 = values[i];
    if (v17)
    {
      CFRelease(v17);
      if (values[i]) {
        CFRelease(*(CFTypeRef *)&buf[i * 8]);
      }
    }
  }
  __break(0x5512u);
}

void getStringValueFromDict(const __CFDictionary *a1, const char *a2, char *a3, int a4)
{
  value = 0;
  CFStringRef v7 = CFStringCreateWithCString(0, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v7, (const void **)&value);
  if (value)
  {
    CFTypeID v8 = CFGetTypeID(value);
    if (v8 == CFStringGetTypeID())
    {
      CFStringGetCString((CFStringRef)value, a3, a4, 0x8000100u);
      xpc_object_t v9 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        int v12 = a3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Read String: %s", buf, 0xCu);
      }
    }
  }
  if (v7) {
    CFRelease(v7);
  }
}

void getIntValueFromDict(const __CFDictionary *a1, const char *a2, unsigned __int16 a3)
{
  unsigned __int16 valuePtr = a3;
  CFTypeRef cf = 0;
  CFStringRef v4 = CFStringCreateWithCString(0, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v4, &cf);
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)cf, kCFNumberShortType, &valuePtr);
      int v6 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        int v10 = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Read value: %d", buf, 8u);
      }
    }
  }
  if (v4) {
    CFRelease(v4);
  }
}

void getLongLongValueFromDict(const __CFDictionary *a1, const char *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t valuePtr = a3;
  CFStringRef v4 = CFStringCreateWithCString(0, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v4, &cf);
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr);
      int v6 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v10 = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Read long long value: %llu", buf, 0xCu);
      }
    }
  }
  if (v4) {
    CFRelease(v4);
  }
}

void getDataValueFromDict(const __CFDictionary *a1, const char *a2, unsigned __int8 *a3, unsigned int a4)
{
  value = 0;
  CFStringRef v7 = CFStringCreateWithCString(0, a2, 0x8000100u);
  CFDictionaryGetValueIfPresent(a1, v7, (const void **)&value);
  if (value)
  {
    CFTypeID v8 = CFGetTypeID(value);
    if (v8 == CFDataGetTypeID())
    {
      uint64_t v9 = a4;
      v20.location = 0;
      v20.length = a4;
      CFDataGetBytes((CFDataRef)value, v20, a3);
      __chkstk_darwin(v10, v11);
      CFDictionaryRef v13 = (char *)&v16 - v12;
      encode_data_into_string(a3, v9, (char *)&v16 - v12, v14, 0);
      CFStringRef v15 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        CFDictionaryRef v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Read Data value: %s", buf, 0xCu);
      }
    }
  }
  if (v7) {
    CFRelease(v7);
  }
}

void readThreadCredentials(uint64_t a1@<X8>)
{
  CFStringRef v2 = CFStringCreateWithCString(0, "TC", 0x8000100u);
  CFStringRef v3 = CFStringCreateWithCString(0, "com.apple.threadradiodData", 0x8000100u);
  CFDictionaryRef v4 = (const __CFDictionary *)CFPreferencesCopyAppValue(v2, v3);
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  CFTypeID v5 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    CFDictionaryRef v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Read TC Dict: %@", (uint8_t *)&v7, 0xCu);
  }

  if (v4)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v4))
    {
      getStringValueFromDict(v4, "networkName", (char *)(a1 + 16), 256);
      getStringValueFromDict(v4, "PSKc", (char *)(a1 + 288), 16);
      getIntValueFromDict(v4, "channel", *(_WORD *)(a1 + 304));
      getIntValueFromDict(v4, "panid", *(_WORD *)a1);
      getLongLongValueFromDict(v4, "xpanid", *(void *)(a1 + 8));
      getDataValueFromDict(v4, "masterKey", (unsigned __int8 *)(a1 + 272), 0x10u);
    }
    CFRelease(v4);
  }
}

BOOL getCommissionerPassPhrase(uint64_t a1, uint64_t a2, std::string *a3)
{
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100](&__p, (const std::string::value_type *)a1);
  std::string::append[abi:ne180100](&__p, (const std::string::value_type *)a2);
  int v6 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v7 = (void *)a2;
    }
    else {
      int v7 = *(void **)a2;
    }
    if (*(char *)(a1 + 23) >= 0) {
      CFDictionaryRef v8 = (std::string *)a1;
    }
    else {
      CFDictionaryRef v8 = *(std::string **)a1;
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    CFDictionaryRef v19 = "getCommissionerPassPhrase";
    __int16 v20 = 2080;
    unsigned __int16 v21 = v7;
    __int16 v22 = 2080;
    __int16 v23 = v8;
    __int16 v24 = 2080;
    unsigned __int16 v25 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s : parameters - XPANID: %s, NWName: %s and key : %s", buf, 0x2Au);
  }

  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  StringValue = getStringValue((const char *)v10);
  if (StringValue)
  {
    uint64_t v12 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      CFDictionaryRef v13 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        CFDictionaryRef v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      CFDictionaryRef v19 = "getCommissionerPassPhrase";
      __int16 v20 = 2080;
      unsigned __int16 v21 = StringValue;
      __int16 v22 = 2080;
      __int16 v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s : Value found %s, key is %s ", buf, 0x20u);
    }

    std::string::append(a3, (const std::string::value_type *)StringValue);
  }
  else
  {
    unint64_t v14 = ThreadNetworkLoggingCategory(1u);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      CFStringRef v15 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        CFStringRef v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315394;
      CFDictionaryRef v19 = "getCommissionerPassPhrase";
      __int16 v20 = 2080;
      unsigned __int16 v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s : Value not found, key is %s ", buf, 0x16u);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return StringValue != 0;
}

void sub_1001E93A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void saveCommissionPassPhrasesAsString(const char *a1, const char *a2, const char *a3)
{
  memset(&v8, 0, sizeof(v8));
  std::string::append(&v8, a2);
  std::string::append(&v8, a1);
  CFTypeID v5 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = &v8;
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v6 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    uint64_t v10 = "saveCommissionPassPhrasesAsString";
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    __int16 v13 = 2080;
    unint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s : Saving Credentials string as follows key: %s, PassPhrase : %s", buf, 0x20u);
  }

  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v8;
  }
  else {
    int v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  saveStringValue((const char *)v7, a3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1001E94FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL removekeyEntryFromPlist(void)
{
  CFArrayRef v13 = CFPreferencesCopyKeyList(@"com.apple.threadradiodData", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  uint64_t v0 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    CFDictionaryRef v19 = "removekeyEntryFromPlist";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "%s: Copied KeyList", buf, 0xCu);
  }

  if (v13)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    CFArrayRef v1 = v13;
    id v2 = [(__CFArray *)v1 countByEnumeratingWithState:&v14 objects:v22 count:16];
    CFStringRef v3 = v1;
    if (v2)
    {
      unsigned __int8 v4 = 0;
      uint64_t v5 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v2; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v5) {
            objc_enumerationMutation(v1);
          }
          int v7 = *(__CFString **)(*((void *)&v14 + 1) + 8 * i);
          if ([(__CFString *)v7 containsString:@"MyHome"])
          {
            CFPreferencesSetAppValue(v7, 0, @"com.apple.threadradiodData");
            std::string v8 = ThreadNetworkLoggingCategory(1u);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            {
              uint64_t v9 = (const char *)[(__CFString *)v7 UTF8String];
              *(_DWORD *)buf = 136315394;
              CFDictionaryRef v19 = "removekeyEntryFromPlist";
              __int16 v20 = 2080;
              unsigned __int16 v21 = v9;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s: Deleted key =>  %s", buf, 0x16u);
            }
          }
          else if (v4)
          {
            unsigned __int8 v4 = 1;
          }
          else
          {
            unsigned __int8 v4 = [(__CFString *)v7 isEqualToString:@"TC"];
          }
        }
        id v2 = [(__CFArray *)v1 countByEnumeratingWithState:&v14 objects:v22 count:16];
      }
      while (v2);

      if ((v4 & 1) == 0)
      {
LABEL_22:
        uint64_t v10 = ThreadNetworkLoggingCategory(1u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          CFDictionaryRef v19 = "removekeyEntryFromPlist";
          __int16 v11 = "%s: function end. ";
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v11, buf, 0xCu);
          goto LABEL_27;
        }
        goto LABEL_27;
      }
      CFPreferencesSetAppValue(@"TC", 0, @"com.apple.threadradiodData");
      CFStringRef v3 = ThreadNetworkLoggingCategory(1u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        CFDictionaryRef v19 = "removekeyEntryFromPlist";
        __int16 v20 = 2080;
        unsigned __int16 v21 = "TC";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s: Deleted key =>  %s", buf, 0x16u);
      }
    }

    goto LABEL_22;
  }
  uint64_t v10 = ThreadNetworkLoggingCategory(1u);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    CFDictionaryRef v19 = "removekeyEntryFromPlist";
    __int16 v11 = "%s: Couldn't copy plist in NSArray object";
    goto LABEL_26;
  }
LABEL_27:

  return v13 != 0;
}

void sub_1001E98C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *std::string::append[abi:ne180100](std::string *a1, const std::string::value_type *a2)
{
  std::string::size_type v2 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v3 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v3 = v2;
  }
  return std::string::append(a1, a2, v3);
}

void getBoolValue_isStateMachineEnabled()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "%s: [%s]:KEY_NOT_FOUND in Frameworks", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "%s: [%s]:KEY_NOT_FOUND in Preferences", v2, v3, v4, v5, 2u);
}

void getBoolValue_isAudioNoThreadFeatureEnabled()
{
  *(_DWORD *)uint64_t v2 = 136315906;
  *(void *)&v2[4] = "getBoolValue_isAudioNoThreadFeatureEnabled";
  *(_WORD *)&v2[12] = 2080;
  *(void *)&v2[14] = "EnableAudioNoThreadFeature";
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_4_3((void *)&_mh_execute_header, v0, v1, "%s: [%s]:Fallback to Frameworks, keyPresent = %s, Value = %d", *(const char **)v2, *(const char **)&v2[8], *(const char **)&v2[16], v3);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "%s: [%s]:KEY_NOT_FOUND in Preferences", v2, v3, v4, v5, 2u);
}

void getBoolValue_isThreadAlwaysOnFeatureEnabled()
{
  *(_DWORD *)uint64_t v2 = 136315906;
  *(void *)&v2[4] = "getBoolValue_isThreadAlwaysOnFeatureEnabled";
  *(_WORD *)&v2[12] = 2080;
  *(void *)&v2[14] = "EnableAudioNoThreadFeature";
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_4_3((void *)&_mh_execute_header, v0, v1, "%s: [%s]:Fallback to Frameworks, keyPresent = %s, Value = %d", *(const char **)v2, *(const char **)&v2[8], *(const char **)&v2[16], v3);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0((void *)&_mh_execute_header, v0, v1, "%s: [%s]:KEY_NOT_FOUND in Preferences", v2, v3, v4, v5, 2u);
}

void sub_1001EA240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001EA540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001EA7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001EAA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001EB620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001EC1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

void sub_1001EC528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EC928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_ThreadNetworkManagerInstance_syslog_extension_mm()
{
}

id getUUIDAsStr(void)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v0 = +[NSUUID UUID];
  [v0 getUUIDBytes:v10];

  os_log_t v1 = +[NSData dataWithBytes:v10 length:16];
  encode_data_into_string((unsigned __int8 *)v10, 16, __b, 0x24uLL, 0);
  uint64_t v2 = +[NSString stringWithUTF8String:__b];
  int v3 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412546;
    int v6 = v1;
    __int16 v7 = 2112;
    std::string v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Generated new uuid_temp: %@, full string: %@", (uint8_t *)&v5, 0x16u);
  }

  return v2;
}

void sub_1001ECB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getUUIDAsByteArray(void)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v0 = +[NSUUID UUID];
  [v0 getUUIDBytes:v6];

  os_log_t v1 = +[NSData dataWithBytes:v6 length:16];
  uint64_t v2 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    int v5 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Generated new uuid_temp: %@", (uint8_t *)&v4, 0xCu);
  }

  return v1;
}

void sub_1001ECCB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generateNewXPANIDAsString(void)
{
  uint64_t v0 = getUUIDAsStr();
  os_log_t v1 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    uint64_t v2 = [v0 substringToIndex:16];
    int v5 = 138412546;
    int v6 = v2;
    __int16 v7 = 2112;
    std::string v8 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Generated new XPANID: %@, full string: %@", (uint8_t *)&v5, 0x16u);
  }
  int v3 = [v0 substringToIndex:16];

  return v3;
}

void sub_1001ECDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t generateNewXPANIDAsInt(void)
{
  uint64_t v0 = getUUIDAsByteArray();
  unint64_t v3 = 0;
  [v0 getBytes:&v3 length:8];
  unint64_t v3 = bswap64(v3);
  NSLog(@"Generated new XPANID Temp: %@, XPANID: 0x%016llx", v0, v3);
  unint64_t v1 = v3;

  return v1;
}

void sub_1001ECE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generatreNewNetworkName(void)
{
  uint64_t v0 = +[NSMutableString stringWithCapacity:0];
  uint32_t v1 = arc4random();
  uint64_t v2 = +[NSString stringWithFormat:@"%s%d", "MyHome", v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31)) + 1];
  [v0 appendString:v2];

  unint64_t v3 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    int v6 = v0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Generated new Network Name: %@", buf, 0xCu);
  }

  return v0;
}

void sub_1001ECFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generatreNewPANIDAsString(void)
{
  uint64_t v0 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v9 = scannedNetworkCount;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "generatreNewPANIDAsString: scannedNetworkCount: %d", buf, 8u);
  }

  do
  {
    uint64_t v1 = arc4random() % 0xF000 + 4096;
    if (scannedNetworkCount < 1) {
      break;
    }
    uint64_t v2 = 0;
    char v3 = 0;
    do
    {
      if (v2 == 100) {
        __break(0x5512u);
      }
      v3 |= v1 == (unsigned __int16)scannedNetworks[v2++];
    }
    while (scannedNetworkCount != v2);
  }
  while ((v3 & 1) != 0);
  int v4 = +[NSMutableString stringWithCapacity:0];
  int v5 = +[NSString stringWithFormat:@"0x%04X", v1];
  [v4 appendString:v5];

  int v6 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109378;
    int v9 = v1;
    __int16 v10 = 2112;
    __int16 v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Generated new PANID: %04x, %@", buf, 0x12u);
  }

  return v4;
}

void sub_1001ED1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t generatreNewPANIDAsInt(void)
{
  uint64_t v0 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    int v6 = 67109120;
    int v7 = scannedNetworkCount;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "generatreNewPANIDAsInt: scannedNetworkCount: %d", (uint8_t *)&v6, 8u);
  }

  do
  {
    uint32_t v1 = arc4random() % 0xF000 + 4096;
    if (scannedNetworkCount < 1) {
      break;
    }
    uint64_t v2 = 0;
    char v3 = 0;
    do
    {
      if (v2 == 100) {
        __break(0x5512u);
      }
      v3 |= v1 == (unsigned __int16)scannedNetworks[v2++];
    }
    while (scannedNetworkCount != v2);
  }
  while ((v3 & 1) != 0);
  int v4 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 67109120;
    int v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Generated new PANID: %04x", (uint8_t *)&v6, 8u);
  }

  return (unsigned __int16)v1;
}

id generateCommisonerCredentialAsString(void)
{
  uint64_t v0 = getUUIDAsStr();
  uint32_t v1 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    int v4 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Generated new CC \"%@\" ", (uint8_t *)&v3, 0xCu);
  }

  return v0;
}

void sub_1001ED480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generateNewMasterKeyAsString(void)
{
  uint64_t v0 = getUUIDAsStr();
  uint32_t v1 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    int v4 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Generated new Master Key \"%@\" ", (uint8_t *)&v3, 0xCu);
  }

  return v0;
}

void sub_1001ED568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generateNewMasterKeyAsByteArray(void)
{
  uint64_t v0 = +[NSMutableData dataWithLength:16];
  id v1 = [v0 length];
  id v2 = v0;
  if (SecRandomCopyBytes(kSecRandomDefault, (size_t)v1, [v2 mutableBytes]))
  {
    std::string v8 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      generateNewMasterKeyAsByteArray(v8);
    }

    __assert_rtn("generateNewMasterKeyAsByteArray", "ThreadNetworkManagerUtils.mm", 173, "false");
  }
  id v3 = objc_alloc((Class)NSData);
  id v4 = v2;
  id v5 = objc_msgSend(v3, "initWithBytes:length:", objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));
  int v6 = log_get_logging_obg("com.apple.wpantund.tnm", "form");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412290;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Generated the new Master Key :: \"%@\" ", (uint8_t *)&v9, 0xCu);
  }

  return v5;
}

void sub_1001ED734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void generateNSStringfromCArray(unsigned __int8 *a1, unsigned int a2)
{
  if (!a1)
  {
    std::string v8 = +[NSString string];
    goto LABEL_8;
  }
  id v4 = +[NSMutableString stringWithCapacity:2 * a2];
  if (!a2)
  {
LABEL_6:
    std::string v8 = +[NSString stringWithString:v4];

LABEL_8:
    id v9 = v8;
    return;
  }
  uint64_t v5 = 0;
  while (1)
  {
    int v6 = +[NSString stringWithFormat:@"%02lx", a1[v5]];
    [v4 appendString:v6];

    int v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v5 = v7;
    if (v7 >= (unint64_t)a2) {
      goto LABEL_6;
    }
  }
  __break(0x5500u);
}

void sub_1001ED85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getRandomAlphanumericPSKdWithLength(uint64_t a1)
{
  id v2 = +[NSMutableString stringWithCapacity:a1];
  if (a1 < 1)
  {
LABEL_5:
    return v2;
  }
  else
  {
    int v3 = 0;
    while (1)
    {
      id result = [v2 appendFormat:@"%C", objc_msgSend(@"ABCDEFGHJKLMNPRSTUVWXY0123456789", "characterAtIndex:", arc4random()% (unint64_t)objc_msgSend(@"ABCDEFGHJKLMNPRSTUVWXY0123456789", "length"))];
      int v5 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        break;
      }
      ++v3;
      if (v5 >= a1) {
        goto LABEL_5;
      }
    }
    __break(0x5500u);
  }
  return result;
}

void sub_1001ED950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isNetworkConnected(void)
{
  id v0 = [objc_alloc((Class)NWPathEvaluator) initWithEndpoint:0 parameters:0];
  id v1 = v0;
  if (!v0) {
    return 0;
  }
  id v2 = [v0 path];
  if ([v2 usesInterfaceType:1])
  {
    uint64_t v3 = 1;
  }
  else
  {
    id v4 = [v1 path];
    uint64_t v3 = (uint64_t)[v4 usesInterfaceType:3];
  }
  return v3;
}

void sub_1001EDA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL isSystemUpTimeIsGreaterThan(unint64_t a1)
{
  return getSystemUptimeInSec() > a1;
}

std::string *stringToLowercase@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  id result = std::string::basic_string(a2, __str);
  uint64_t v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v5 = (char)v4;
  int v6 = (char *)a2 + v4;
  if (v5 >= 0) {
    int v7 = v6;
  }
  else {
    int v7 = (char *)(a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_);
  }
  if (v5 >= 0) {
    std::string v8 = (char *)a2;
  }
  else {
    std::string v8 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  while (v8 != v7)
  {
    id result = (std::string *)__tolower(*v8);
    *v8++ = (char)result;
  }
  return result;
}

void sub_1001EDACC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *stringEqualCaseInsensitive(std::string *a1, std::string *a2)
{
  stringToLowercase(a1, &__s1);
  id result = stringToLowercase(a2, &__p);
  char v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
  }
  if (size != v6)
  {
    BOOL v12 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
LABEL_23:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_28;
    }
    return (std::string *)v12;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    BOOL v12 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_27;
    }
LABEL_24:
    if (v4 < 0) {
LABEL_28:
    }
      operator delete(__s1.__r_.__value_.__l.__data_);
    return (std::string *)v12;
  }
  unint64_t v9 = 0;
  while (v9 <= 0x17)
  {
    int v10 = __s1.__r_.__value_.__s.__data_[v9];
    int v11 = p_p->__r_.__value_.__s.__data_[v9];
    BOOL v12 = v10 == v11;
    ++v9;
    if (v10 != v11 || HIBYTE(__s1.__r_.__value_.__r.__words[2]) == v9) {
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

void sub_1001EDBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void generateNewMasterKeyAsByteArray(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to generated new Master Key, unexpected error.. asserting.. ", v1, 2u);
}

void srputil_srp_mdns_proxyd_interface_init()
{
  if (srputil_srp_mdns_proxyd_interface_q)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    LOWORD(v13) = 0;
    uint64_t v1 = "srp-mdns-proxyd Q is already active";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, v1, (uint8_t *)&v13, 2u);
    goto LABEL_10;
  }
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("wpantund.srp_mdns_proxyd.Interface.Queue", v2);
  srputil_srp_mdns_proxyd_interface_q = (uint64_t)v3;
  char v4 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  logging_obg = v4;
  if (v3)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    LOWORD(v13) = 0;
    uint64_t v1 = "srp-mdns-proxyd Q Init Success";
    goto LABEL_7;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    srputil_srp_mdns_proxyd_interface_init_cold_1(logging_obg, v5, v6, v7, v8, v9, v10, v11);
  }
LABEL_10:
  BOOL v12 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v13 = 134217984;
    uint64_t v14 = cref;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "srp-mdns-proxyd cref at init: %p", (uint8_t *)&v13, 0xCu);
  }
}

void srputil_start_srp_mdns_proxyd()
{
  if (ncp_state == 8)
  {
    if (cref)
    {
      logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
      if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
        return;
      }
      *(_DWORD *)std::string __p = 134217984;
      *(void *)&__p[4] = cref;
      uint64_t v1 = "srp-mdns-proxyd is already running, no need to start again, Cref: %p";
LABEL_14:
      char v4 = logging_obg;
      uint32_t v5 = 12;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v1, __p, v5);
      return;
    }
    if (start_cb_pending)
    {
      logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
      if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
        return;
      }
      *(_DWORD *)std::string __p = 134217984;
      *(void *)&__p[4] = cref;
      uint64_t v1 = "srp-mdns-proxyd start is already ongoing, no need to start again, Cref: %p";
      goto LABEL_14;
    }
    start_cb_pending = 1;
    uint64_t v6 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Starting srp-mdns-proxyd", __p, 2u);
    }
    if (srputil_srp_mdns_proxyd_interface_q)
    {
      dispatch_async((dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &__block_literal_global_10);
      return;
    }
    uint64_t v7 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string __p = 0;
      uint64_t v1 = "Starting srp-mdns-proxyd Failed: No Q";
      char v4 = v7;
      uint32_t v5 = 2;
      goto LABEL_15;
    }
  }
  else
  {
    id v2 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      nl::wpantund::ncp_state_to_string((char *)ncp_state, (uint64_t)__p);
      dispatch_queue_t v3 = v9 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)buf = 136315394;
      uint64_t v11 = v3;
      __int16 v12 = 2048;
      uint64_t v13 = cref;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "srp-mdns-proxyd Thread is not associated , no need to start SRP, ncp_state = %s, Cref: %p", buf, 0x16u);
      if (v9 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
}

void __srputil_start_srp_mdns_proxyd_block_invoke(id a1)
{
  logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    v6[0] = srputil_srp_mdns_proxyd_interface_q;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Starting srp-mdns-proxyd from Q: %@", (uint8_t *)&v5, 0xCu);
  }
  int v2 = advertising_proxy_enable();
  dispatch_queue_t v3 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  char v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __srputil_start_srp_mdns_proxyd_block_invoke_cold_1(v2, v4);
    }
    cref = 0;
    start_cb_pending = 0;
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 67109376;
    LODWORD(v6[0]) = 0;
    WORD2(v6[0]) = 2048;
    *(void *)((char *)v6 + 6) = cref;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting srp-mdns-proxyd Success: Err: %d, Cref: %p", (uint8_t *)&v5, 0x12u);
  }
}

void srputil_srp_mdns_proxyd_started_callback(uint64_t a1, uint64_t a2, int a3)
{
  log_domain = log_get_log_domain("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(log_domain, OS_LOG_TYPE_INFO))
  {
    int v8 = 134218496;
    uint64_t v9 = a1;
    __int16 v10 = 2048;
    uint64_t v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, log_domain, OS_LOG_TYPE_INFO, "srp-mdns-proxyd start Callback: conn_ref %p,  response %p,   err %d.", (uint8_t *)&v8, 0x1Cu);
  }
  if (a3)
  {
    cref = 0;
    ++b2b_srp_enable_failures;
    uint64_t v7 = log_get_log_domain("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      srputil_srp_mdns_proxyd_started_callback(a2, a3, v7);
    }
  }
  else
  {
    b2b_srp_enable_failures = 0;
  }
  start_cb_pending = 0;
  if (!cref) {
    srputil_check_and_resume_srp_mdns_proxyd();
  }
}

void srputil_stop_srp_mdns_proxyd()
{
  uint64_t v0 = cref;
  logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  BOOL v2 = os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO);
  if (v0)
  {
    if (v2)
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v18 = cref;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Stopping srp-mdns-proxyd, Cref: %p", buf, 0xCu);
    }
    if (srputil_srp_mdns_proxyd_interface_q)
    {
      dispatch_async((dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &__block_literal_global_12);
    }
    else
    {
      dispatch_queue_t v3 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        srputil_stop_srp_mdns_proxyd_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
      }
    }
  }
  else
  {
    if (v2)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, " srp-mdns-proxyd is not running to stop it", buf, 2u);
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "Error");
    std::string::basic_string[abi:ne180100]<0>(&v13, "Error in Srp-mdns interaction");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot stop srp-mdns-proxy in RCP as advertising proxy reference is null");
    AWDMetricsClient_TriggerAutoBugCaptures();
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
  }
}

void sub_1001EE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void __srputil_stop_srp_mdns_proxyd_block_invoke(id a1)
{
  if (cref)
  {
    advertising_proxy_ref_dealloc();
    cref = 0;
    start_cb_pending = 0;
    logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v3 = 138412546;
    uint64_t v4 = srputil_srp_mdns_proxyd_interface_q;
    __int16 v5 = 2048;
    uint64_t v6 = cref;
    BOOL v2 = "Stopped srp-mdns-proxyd from Q:%@, cref: %p";
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (!os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v3 = 138412546;
    uint64_t v4 = srputil_srp_mdns_proxyd_interface_q;
    __int16 v5 = 2048;
    uint64_t v6 = cref;
    BOOL v2 = "Already stopped,cannot stop again srp-mdns-proxyd from Q:%@, cref: %p";
  }
  _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, v2, (uint8_t *)&v3, 0x16u);
}

void srputil_set_ncp_state(int a1)
{
  uint64_t SystemUptimeInSec = getSystemUptimeInSec();
  __darwin_time_t DaemonUptimeInSec = getDaemonUptimeInSec();
  uint64_t v4 = (char *)ncp_state;
  ncp_state = a1;
  logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    nl::wpantund::ncp_state_to_string(v4, (uint64_t)v16);
    int v6 = v17;
    uint64_t v7 = (void **)v16[0];
    nl::wpantund::ncp_state_to_string((char *)ncp_state, (uint64_t)__p);
    uint64_t v8 = v16;
    if (v6 < 0) {
      uint64_t v8 = v7;
    }
    if (v15 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    *(_DWORD *)buf = 134219010;
    uint64_t v19 = SystemUptimeInSec;
    __int16 v20 = 2048;
    __darwin_time_t v21 = DaemonUptimeInSec;
    __int16 v22 = 2080;
    __int16 v23 = v8;
    __int16 v24 = 2080;
    unsigned __int16 v25 = v9;
    __int16 v26 = 2048;
    uint64_t v27 = cref;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "[%llu, %llu] srp-mdns-proxyd NCP State changed from %s -> %s, cref: %p", buf, 0x34u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  if (v4 != 8 && ncp_state == 8)
  {
    if (cref)
    {
      int v13 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v19 = cref;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[srp-mdns-proxyd] is already running with cref: %p, first stop it...", buf, 0xCu);
      }
      srputil_stop_srp_mdns_proxyd();
    }
    goto LABEL_23;
  }
  if (ncp_state != 8 && v4 == 8)
  {
    srputil_stop_srp_mdns_proxyd();
  }
  else if (ncp_state == 8 && !cref)
  {
    char v12 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Starting [srp-mdns-proxyd] SRP as cref is NULL but Thread is Assosciated", buf, 2u);
    }
LABEL_23:
    srputil_start_srp_mdns_proxyd();
  }
}

void sub_1001EE8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void srputil_check_and_resume_srp_mdns_proxyd(void)
{
  log_domain = log_get_log_domain("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(log_domain, OS_LOG_TYPE_INFO))
  {
    nl::wpantund::ncp_state_to_string((char *)ncp_state, (uint64_t)__p);
    uint64_t v1 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)__darwin_time_t v21 = v1;
    *(_WORD *)&v21[8] = 2048;
    *(void *)&v21[10] = cref;
    __int16 v22 = 1024;
    int v23 = b2b_srp_enable_failures;
    _os_log_impl((void *)&_mh_execute_header, log_domain, OS_LOG_TYPE_INFO, " srp-mdns-proxyd resume called in state %s, cref: %p, b2b_srp_enable_failures: %d", buf, 0x1Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if (ncp_state == 8)
  {
    uint64_t v2 = 3000000000;
    if (b2b_srp_enable_failures >= 8u) {
      char v3 = 30;
    }
    else {
      char v3 = 10;
    }
    uint64_t v4 = 30000000000;
    if (b2b_srp_enable_failures < 8u) {
      uint64_t v4 = 10000000000;
    }
    if (b2b_srp_enable_failures >= 5u) {
      char v5 = v3;
    }
    else {
      char v5 = 3;
    }
    if (b2b_srp_enable_failures >= 5u) {
      uint64_t v2 = v4;
    }
    if (b2b_srp_enable_failures >= 3u) {
      char v6 = v5;
    }
    else {
      char v6 = 1;
    }
    if (b2b_srp_enable_failures >= 3u) {
      int64_t v7 = v2;
    }
    else {
      int64_t v7 = 1000000000;
    }
    srputil_check_and_resume_srp_mdns_proxyd(void)::enabling_delay_timer = v6;
    dispatch_time_t v8 = dispatch_time(0, v7);
    uint64_t v9 = log_get_log_domain("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)__darwin_time_t v21 = srputil_check_and_resume_srp_mdns_proxyd(void)::enabling_delay_timer;
      *(_WORD *)&v21[4] = 2048;
      *(void *)&v21[6] = cref;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Resuming srp-mdns-proxyd after %d sec, cref: %p", buf, 0x12u);
    }
    if (srputil_srp_mdns_proxyd_interface_q)
    {
      dispatch_after(v8, (dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &__block_literal_global_15_0);
    }
    else
    {
      uint64_t v10 = log_get_log_domain("com.apple.wpantund.tnm", "default");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        srputil_stop_srp_mdns_proxyd_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }
}

void ___Z40srputil_check_and_resume_srp_mdns_proxydv_block_invoke(id a1)
{
  log_domain = log_get_log_domain("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(log_domain, OS_LOG_TYPE_INFO))
  {
    int v2 = 134217984;
    uint64_t v3 = cref;
    _os_log_impl((void *)&_mh_execute_header, log_domain, OS_LOG_TYPE_INFO, "Resuming srp-mdns-proxyd now, cref: %p", (uint8_t *)&v2, 0xCu);
  }
  srputil_start_srp_mdns_proxyd();
}

uint64_t srputil_set_stop()
{
  log_domain = log_get_log_domain("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(log_domain, OS_LOG_TYPE_INFO))
  {
    int v8 = 134218240;
    uint64_t v9 = cref;
    __int16 v10 = 2048;
    uint64_t v11 = shutdown_cref;
    _os_log_impl((void *)&_mh_execute_header, log_domain, OS_LOG_TYPE_INFO, "srp-mdns-proxyd: Calling advertising_proxy_start_thread_shutdown, cref: %p, shutdown_cref: %p", (uint8_t *)&v8, 0x16u);
  }
  if (!srputil_srp_mdns_proxyd_interface_q)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      srputil_set_stop_cold_1();
    }
    return 0;
  }
  dispatch_async((dispatch_queue_t)srputil_srp_mdns_proxyd_interface_q, &__block_literal_global_18);
  dispatch_time_t v1 = dispatch_time(0, 5000000000);
  intptr_t v2 = dispatch_semaphore_wait((dispatch_semaphore_t)srp_semaphore, v1);
  uint64_t v3 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      srputil_set_stop_cold_2(v4);
    }
    return 0;
  }
  uint64_t v6 = 1;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v8 = 134218240;
    uint64_t v9 = cref;
    __int16 v10 = 2048;
    uint64_t v11 = shutdown_cref;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "srp-mdns-proxyd: Done with advertising_proxy_start_thread_shutdown, cref: %p, shutdown_cref: %p", (uint8_t *)&v8, 0x16u);
  }
  return v6;
}

void __srputil_set_stop_block_invoke(id a1)
{
}

intptr_t srputil_srp_start_threadstop_callback(uint64_t a1)
{
  log_domain = log_get_log_domain("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(log_domain, OS_LOG_TYPE_INFO))
  {
    int v6 = 136316162;
    int64_t v7 = "void srputil_srp_start_threadstop_callback(advertising_proxy_conn_ref, xpc_object_t, advertising_proxy_error_type)";
    __int16 v8 = 1024;
    *(_DWORD *)uint64_t v9 = 235;
    *(_WORD *)&v9[4] = 2048;
    *(void *)&v9[6] = a1;
    *(_WORD *)&v9[14] = 2048;
    *(void *)&v9[16] = shutdown_cref;
    __int16 v10 = 2048;
    uint64_t v11 = cref;
    _os_log_impl((void *)&_mh_execute_header, log_domain, OS_LOG_TYPE_INFO, "%s:%d: srp-mdns-proxyd: Inside the srputil_srp_start_threadstop_callback, signaling srp_semaphore, shutdown_conn_ref: %p, shutdown_cref: %p, cref: %p", (uint8_t *)&v6, 0x30u);
  }
  if (a1)
  {
    advertising_proxy_ref_dealloc();
  }
  else
  {
    uint64_t v3 = log_get_log_domain("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      srputil_srp_start_threadstop_callback();
    }
  }
  logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412802;
    int64_t v7 = (const char *)srputil_srp_mdns_proxyd_interface_q;
    __int16 v8 = 2048;
    *(void *)uint64_t v9 = cref;
    *(_WORD *)&v9[8] = 2048;
    *(void *)&v9[10] = shutdown_cref;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Dealloc srp-mdns-proxyd shutdown conenction from Q:%@, cref: %p, shutdown_cref: %p", (uint8_t *)&v6, 0x20u);
  }
  shutdown_cref = 0;
  return dispatch_semaphore_signal((dispatch_semaphore_t)srp_semaphore);
}

void srputil_srp_mdns_proxyd_interface_init_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __srputil_start_srp_mdns_proxyd_block_invoke_cold_1(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Starting srp-mdns-proxyd Failed: Err: %d", (uint8_t *)v2, 8u);
}

void srputil_srp_mdns_proxyd_started_callback(uint64_t a1, int a2, os_log_t log)
{
  int v3 = 134218752;
  uint64_t v4 = cref;
  __int16 v5 = 2048;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = a2;
  __int16 v9 = 1024;
  int v10 = b2b_srp_enable_failures;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "srp-mdns-proxyd start Callback with failure: cref %p  response %p   err %d, b2b_srp_enable_failures: %d", (uint8_t *)&v3, 0x22u);
}

void srputil_stop_srp_mdns_proxyd_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void srputil_set_stop_cold_1()
{
  OUTLINED_FUNCTION_2();
  int v2 = 256;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "%s:%d srputil_srp_mdns_proxyd_interface_q is nill ", v1, 0x12u);
}

void srputil_set_stop_cold_2(os_log_t log)
{
  int v1 = 136315138;
  int v2 = "srputil_set_stop";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: srp-mdns-proxyd: Error, semaphore wait timed out ", (uint8_t *)&v1, 0xCu);
}

void srputil_srp_start_threadstop_callback()
{
  OUTLINED_FUNCTION_2();
  int v2 = 240;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "%s:%d: srp-mdns-proxyd: srputil_srp_start_threadstop_callback, shutdown_conn_ref is NULL, deallocation not required", v1, 0x12u);
}

dispatch_semaphore_t _GLOBAL__sub_I_ThreadNetworkManager_srputil_cpp()
{
  dispatch_semaphore_t result = dispatch_semaphore_create(0);
  srp_semaphore = (uint64_t)result;
  return result;
}

void ctrUtilInitThreadFeatureEnabled(void)
{
  ctr_util_thread_feature_enabled = 1;
}

uint64_t ctrUtilIsThreadFeatureEnabled(void)
{
  return ctr_util_thread_feature_enabled;
}

uint64_t ctrGetBuildVersion(char *a1)
{
  return 0;
}

void sub_1001EF468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1001EF510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EFD34(_Unwind_Exception *a1)
{
  __int16 v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1001EFF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ThreadNetworkManagerTopologyHandler_Init_Database(void)
{
  os_log_t v0 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    int v1 = 136315138;
    int v2 = "ThreadNetworkManagerTopologyHandler_Init_Database";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Inside %s", (uint8_t *)&v1, 0xCu);
  }

  std::__list_imp<std::map<std::string,boost::any>>::clear(&database);
}

void ThreadNetworkManagerTopologyHandler_Update_ChildTableAddresses(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Update_ChildTableAddresses";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  uint64_t v13 = a2;
  uint64_t v16 = (uint64_t)&v16;
  uint64_t v17 = &v16;
  uint64_t v18 = 0;
  boost::any_cast<std::list<std::map<std::string,boost::any>>>(a1, (uint64_t *)buf);
  std::list<std::map<std::string,boost::any>>::__move_assign(&v16, buf);
  std::__list_imp<std::map<std::string,boost::any>>::clear((uint64_t *)buf);
  for (uint64_t i = v17; i != &v16; uint64_t i = (uint64_t *)i[1])
  {
    for (uint64_t j = qword_1004FC3F0; (uint64_t *)j != &database; uint64_t j = *(void *)(j + 8))
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "ExtAddress");
      __int16 v7 = (const boost::any *)std::map<std::string,boost::any>::at(j + 16, (const void **)buf);
      unint64_t v8 = any_to_uint64(v7, 0);
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "ExtAddress");
      __int16 v9 = (const boost::any *)std::map<std::string,boost::any>::at((uint64_t)(i + 2), (const void **)buf);
      unint64_t v10 = any_to_uint64(v9, 0);
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      if (v8 == v10)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "IPv6Addresses");
        uint64_t v11 = (uint64_t *)std::map<std::string,boost::any>::at((uint64_t)(i + 2), (const void **)__p);
        std::pair<std::string,boost::any>::pair[abi:ne180100]<char const(&)[14],boost::any&,0>(buf, "IPv6Addresses", v11);
        std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::pair<std::string,boost::any>>((uint64_t **)(j + 16), (const void **)buf, (__n128 *)buf);
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        }
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v12 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Update_ChildTableAddresses";
    __int16 v20 = 2048;
    uint64_t v21 = qword_1004FC3F8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  std::list<std::map<std::string,boost::any>>::list(v13, (uint64_t)&database);
  std::__list_imp<std::map<std::string,boost::any>>::clear(&v16);
}

void sub_1001F0650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

uint64_t std::map<std::string,boost::any>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t std::pair<std::string,boost::any>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ThreadNetworkManagerTopologyHandler_Update_ChildTable(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = (uint64_t)&v5;
  uint64_t v6 = &v5;
  uint64_t v7 = 0;
  boost::any_cast<std::list<std::map<std::string,boost::any>>>(a1, (uint64_t *)buf);
  std::list<std::map<std::string,boost::any>>::__move_assign(&v5, buf);
  std::__list_imp<std::map<std::string,boost::any>>::clear((uint64_t *)buf);
  int v3 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    __int16 v9 = "ThreadNetworkManagerTopologyHandler_Update_ChildTable";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  ThreadNetworkManagerTopologyHandler_Init_Database();
  std::list<std::map<std::string,boost::any>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::map<std::string,boost::any>,void *>,std::__list_const_iterator<std::map<std::string,boost::any>,void *>>(&database, (uint64_t)v6, (uint64_t)&v5);
  uint64_t v4 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v9 = "ThreadNetworkManagerTopologyHandler_Update_ChildTable";
    __int16 v10 = 2048;
    uint64_t v11 = qword_1004FC3F8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  std::list<std::map<std::string,boost::any>>::list(a2, (uint64_t)&database);
  std::__list_imp<std::map<std::string,boost::any>>::clear(&v5);
}

void sub_1001F08F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<std::map<std::string,boost::any>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadNetworkManagerTopologyHandler_Add_Child@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (const void **)v14;
  boost::any_cast<std::map<std::string,boost::any>>(a1, (uint64_t)buf);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__move_assign((uint64_t)&v13, buf);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree((uint64_t)buf);
  int v3 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  uint64_t v4 = (uint64_t *)qword_1004FC3F0;
  if ((uint64_t *)qword_1004FC3F0 == &database)
  {
LABEL_10:
    __int16 v9 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s added new child to database", buf, 0xCu);
    }

    std::list<std::map<std::string,boost::any>>::push_back(&database, &v13);
  }
  else
  {
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "ExtAddress");
      uint64_t v5 = (const boost::any *)std::map<std::string,boost::any>::at((uint64_t)&v13, (const void **)buf);
      unint64_t v6 = any_to_uint64(v5, 0);
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "ExtAddress");
      uint64_t v7 = (const boost::any *)std::map<std::string,boost::any>::at((uint64_t)(v4 + 2), (const void **)buf);
      unint64_t v8 = any_to_uint64(v7, 0);
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      if (v6 == v8) {
        break;
      }
      uint64_t v4 = (uint64_t *)v4[1];
      if (v4 == &database) {
        goto LABEL_10;
      }
    }
    __int16 v10 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s found existing child with same ExtAddr", buf, 0xCu);
    }
  }
  uint64_t v11 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Add_Child";
    __int16 v16 = 2048;
    uint64_t v17 = qword_1004FC3F8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  std::list<std::map<std::string,boost::any>>::list(a2, (uint64_t)&database);
  return std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree((uint64_t)&v13);
}

void sub_1001F0C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t ThreadNetworkManagerTopologyHandler_Delete_Child@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = v13;
  boost::any_cast<std::map<std::string,boost::any>>(a1, (uint64_t)buf);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__move_assign((uint64_t)&v12, buf);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree((uint64_t)buf);
  uint64_t v2 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Delete_Child";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Inside %s", buf, 0xCu);
  }

  for (uint64_t i = (uint64_t *)qword_1004FC3F0; i != &database; uint64_t i = (uint64_t *)i[1])
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "ExtAddress");
    uint64_t v4 = (const boost::any *)std::map<std::string,boost::any>::at((uint64_t)&v12, (const void **)buf);
    unint64_t v5 = any_to_uint64(v4, 0);
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "ExtAddress");
    unint64_t v6 = (const boost::any *)std::map<std::string,boost::any>::at((uint64_t)(i + 2), (const void **)buf);
    unint64_t v7 = any_to_uint64(v6, 0);
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    if (v5 == v7)
    {
      uint64_t i = (uint64_t *)std::list<std::map<std::string,boost::any>>::erase((uint64_t)&database, i);
      unint64_t v8 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Delete_Child";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s removed child from database", buf, 0xCu);
      }
    }
  }
  __int16 v9 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "ThreadNetworkManagerTopologyHandler_Delete_Child";
    __int16 v15 = 2048;
    uint64_t v16 = qword_1004FC3F8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s return database with size:%ld", buf, 0x16u);
  }

  std::list<std::map<std::string,boost::any>>::list(a2, (uint64_t)&database);
  return std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree((uint64_t)&v12);
}

void sub_1001F0F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t std::list<std::map<std::string,boost::any>>::erase(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(v2 + 8) = v3;
  *(void *)a2[1] = v2;
  uint64_t v4 = *(void *)(result + 16);
  BOOL v5 = v4 != 0;
  uint64_t v6 = v4 - 1;
  if (v5)
  {
    *(void *)(result + 16) = v6;
    std::__list_imp<std::map<std::string,boost::any>>::__delete_node[abi:ne180100]<>(result, a2);
    return v3;
  }
  else
  {
    __break(0x5515u);
  }
  return result;
}

void std::__list_imp<std::map<std::string,boost::any>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      BOOL v5 = (uint64_t *)v2[1];
      std::__list_imp<std::map<std::string,boost::any>>::__delete_node[abi:ne180100]<>((uint64_t)a1, v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::map<std::string,boost::any>>::__delete_node[abi:ne180100]<>(uint64_t a1, void *a2)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::~__tree((uint64_t)a2 + 16);

  operator delete(a2);
}

void *std::pair<std::string,boost::any>::pair[abi:ne180100]<char const(&)[14],boost::any&,0>(void *a1, char *a2, uint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(a1, a2);
  uint64_t v5 = *a3;
  if (*a3) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  a1[3] = v5;
  return a1;
}

void sub_1001F10BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::any_cast<std::list<std::map<std::string,boost::any>>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    dispatch_semaphore_t result = *((void *)boost::any::type((boost::any *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F31A6 & 0x7FFFFFFFFFFFFFFFLL)
      || (dispatch_semaphore_t result = strcmp((const char *)result, (const char *)(0x80000001003F31A6 & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      if (*v1) {
        return *v1 + 8;
      }
      else {
        __break(0x5516u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::list<std::map<std::string,boost::any>>::__move_assign(uint64_t *a1, void *a2)
{
  return std::list<std::map<std::string,boost::any>>::splice((uint64_t)a1, a1, a2);
}

uint64_t std::list<std::map<std::string,boost::any>>::splice(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    uint64_t *v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    uint64_t v8 = *(void *)(result + 16);
    BOOL v9 = __CFADD__(v8, v3);
    uint64_t v10 = v8 + v3;
    if (v9)
    {
      __break(0x5500u);
    }
    else
    {
      *(void *)(result + 16) = v10;
      a3[2] = 0;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_unique_key_args<std::string,std::pair<std::string,boost::any>>(uint64_t **a1, const void **a2, __n128 *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__construct_node<std::pair<std::string,boost::any>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v10, v7, (uint64_t *)v9[0]);
    uint64_t v6 = (uint64_t *)v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::any>,void *>>>>::reset[abi:ne180100](v9, 0);
  }
  return v6;
}

__n128 std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__construct_node<std::pair<std::string,boost::any>>@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (__n128 *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  __n128 result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  unint64_t v8 = a2[1].n128_u64[0];
  unint64_t v9 = a2[1].n128_u64[1];
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  void v6[2] = result;
  v6[3].n128_u64[0] = v8;
  v6[3].n128_u64[1] = v9;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::list<std::map<std::string,boost::any>>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
    std::list<std::map<std::string,boost::any>>::push_back(a1, (const void ***)(i + 16));
  return a1;
}

void sub_1001F131C(_Unwind_Exception *a1)
{
  std::__list_imp<std::map<std::string,boost::any>>::clear(v1);
  _Unwind_Resume(a1);
}

void std::list<std::map<std::string,boost::any>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::map<std::string,boost::any>,void *>,std::__list_const_iterator<std::map<std::string,boost::any>,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (uint64_t *)a1[1];
  if (a2 == a3)
  {
LABEL_5:
    if (v6 != a1)
    {
      std::list<std::map<std::string,boost::any>>::erase((uint64_t)a1, v6, a1);
      return;
    }
  }
  else
  {
    while (v6 != a1)
    {
      std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::operator=(v6 + 2, (uint64_t *)(v4 + 16));
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = (uint64_t *)v6[1];
      if (v4 == a3)
      {
        uint64_t v4 = a3;
        goto LABEL_5;
      }
    }
  }

  std::list<std::map<std::string,boost::any>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::map<std::string,boost::any>,void *>,std::__list_const_iterator<std::map<std::string,boost::any>,void *>>((uint64_t)a1, a1, v4, a3);
}

uint64_t *std::list<std::map<std::string,boost::any>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::map<std::string,boost::any>,void *>,std::__list_const_iterator<std::map<std::string,boost::any>,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4) {
    return a2;
  }
  __n128 result = std::__list_imp<std::map<std::string,boost::any>>::__create_node[abi:ne180100]<std::map<std::string,boost::any> const&>(a1, 0, 0, (uint64_t *)(a3 + 16));
  unint64_t v9 = result;
  uint64_t v10 = *(void *)(a3 + 8);
  if (v10 == a4)
  {
    uint64_t v13 = 1;
LABEL_8:
    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v9;
    *unint64_t v9 = v14;
    *a2 = (uint64_t)result;
    result[1] = (uint64_t)a2;
    uint64_t v15 = *(void *)(a1 + 16);
    BOOL v16 = __CFADD__(v15, v13);
    uint64_t v17 = v15 + v13;
    if (v16) {
      goto LABEL_11;
    }
    *(void *)(a1 + 16) = v17;
    return v9;
  }
  uint64_t v11 = 1;
  uint64_t v12 = (uint64_t)result;
  while (1)
  {
    __n128 result = std::__list_imp<std::map<std::string,boost::any>>::__create_node[abi:ne180100]<std::map<std::string,boost::any> const&>(a1, v12, 0, (uint64_t *)(v10 + 16));
    *(void *)(v12 + 8) = result;
    uint64_t v13 = v11 + 1;
    if (v11 == -1) {
      break;
    }
    uint64_t v10 = *(void *)(v10 + 8);
    ++v11;
    uint64_t v12 = (uint64_t)result;
    if (v10 == a4) {
      goto LABEL_8;
    }
  }
LABEL_11:
  __break(0x5500u);
  return result;
}

void sub_1001F14CC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    std::__list_imp<std::map<std::string,boost::any>>::__delete_node[abi:ne180100]<>(v1, v3);
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1001F14EC(_Unwind_Exception *a1)
{
}

void std::list<std::map<std::string,boost::any>>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *a2;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      BOOL v8 = v7 != 0;
      uint64_t v9 = v7 - 1;
      if (!v8) {
        break;
      }
      uint64_t v10 = (uint64_t *)a2[1];
      *(void *)(a1 + 16) = v9;
      std::__list_imp<std::map<std::string,boost::any>>::__delete_node[abi:ne180100]<>(a1, a2);
      a2 = v10;
      if (v10 == a3) {
        return;
      }
    }
    __break(0x5515u);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2) {
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>>(a1, *a2, (uint64_t)(a2 + 1));
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v8 = a2;
  if (!result[2]) {
    goto LABEL_11;
  }
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::_DetachedTreeCache[abi:ne180100](&v5, result);
  while (v7 && v8 != a3)
  {
    std::__value_type<std::string,boost::any>::operator=[abi:ne180100]((uint64_t)(v7 + 4), (const std::string *)(v8 + 32));
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__node_insert_multi(v4, (uint64_t)v7);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::__detach_next((uint64_t)v6);
    }
    std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v8);
  }
  for (__n128 result = (uint64_t *)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v5);
        ;
        __n128 result = (uint64_t *)std::__tree_const_iterator<std::__value_type<std::string,boost::any>,std::__tree_node<std::__value_type<std::string,boost::any>,void *> *,long>::operator++[abi:ne180100]((uint64_t)&v8))
  {
    a2 = v8;
LABEL_11:
    if (a2 == a3) {
      break;
    }
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_multi<std::pair<std::string const,boost::any> const&>(v4, (const std::string *)(a2 + 32));
  }
  return result;
}

uint64_t std::__value_type<std::string,boost::any>::operator=[abi:ne180100](uint64_t a1, const std::string *a2)
{
  v4[0] = a1;
  v4[1] = a1 + 24;
  std::pair<std::string &,boost::any &>::operator=[abi:ne180100]<std::string const,boost::any,(void *)0>((uint64_t)v4, a2);
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)(a2 + 32));
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v6, leaf_high, (uint64_t *)a2);
  return a2;
}

void *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::__advance[abi:ne180100](uint64_t a1)
{
  __n128 result = *(void **)(a1 + 8);
  *(void *)(a1 + 16) = result;
  if (result)
  {
    __n128 result = std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::__detach_next((uint64_t)result);
    *(void *)(a1 + 8) = result;
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::_DetachedTreeCache[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  *a1 = a2;
  a1[1] = (uint64_t *)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::__detach_from_tree(a2);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::__advance[abi:ne180100]((uint64_t)a1);
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::__detach_from_tree(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (uint64_t)(a1 + 1);
  *(void *)(v2 + 16) = 0;
  a1[2] = 0;
  a1[1] = 0;
  if (*(void *)(v1 + 8)) {
    return *(void *)(v1 + 8);
  }
  else {
    return v1;
  }
}

uint64_t std::pair<std::string &,boost::any &>::operator=[abi:ne180100]<std::string const,boost::any,(void *)0>(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  boost::any::operator=(*(uint64_t **)(a1 + 8), a2[1].__r_.__value_.__r.__words);
  return a1;
}

uint64_t *boost::any::operator=(uint64_t *a1, void *a2)
{
  if (*a2) {
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))(*a2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        __n128 result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    __n128 result = v5 + 1;
  }
  else
  {
    __n128 result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *__n128 result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (!v3) {
        break;
      }
      *(void *)(a1 + 8) = v3;
      uint64_t v2 = v3;
    }
    std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

void *std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__emplace_multi<std::pair<std::string const,boost::any> const&>(uint64_t **a1, const std::string *a2)
{
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__construct_node<std::pair<std::string const,boost::any> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__insert_node_at(a1, v6, leaf_high, (uint64_t *)v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::any>,void *>>>>::reset[abi:ne180100](v7, 0);
  return v4;
}

void sub_1001F1A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::any>,void *>>>>::reset[abi:ne180100]((void **)va, 0);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::map<std::string,boost::any>>::__create_node[abi:ne180100]<std::map<std::string,boost::any> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = 1;
  uint64_t v7 = operator new(0x28uLL);
  uint64_t v12 = v7;
  void *v7 = a2;
  v7[1] = a3;
  std::map<std::string,boost::any>::map[abi:ne180100](v7 + 2, a4);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  std::__allocation_guard<std::allocator<std::__list_node<std::map<std::string,boost::any>,void *>>>::__destroy[abi:ne180100]((uint64_t)v10);
  return v8;
}

void sub_1001F1A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__allocation_guard<std::allocator<std::__list_node<std::map<std::string,boost::any>,void *>>>::__destroy[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__allocation_guard<std::allocator<std::__list_node<std::map<std::string,boost::any>,void *>>>::__destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(void *)(a1 + 8) >= 0x666666666666667uLL) {
      __break(0x550Cu);
    }
    else {
      operator delete(v2);
    }
  }
}

uint64_t boost::any_cast<std::map<std::string,boost::any>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    __n128 result = *((void *)boost::any::type((boost::any *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000001003F67CCLL & 0x7FFFFFFFFFFFFFFFLL)
      || (__n128 result = strcmp((const char *)result, (const char *)(0x80000001003F67CCLL & 0x7FFFFFFFFFFFFFFFLL)),
          !result))
    {
      if (*v1) {
        return *v1 + 8;
      }
      else {
        __break(0x5516u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,boost::any>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::any>>>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  void *v4 = v5;
  uint64_t v6 = a2[2];
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = a2 + 1;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void _GLOBAL__sub_I_ThreadNetworkManagerTopologyHandler_mm()
{
  database = (uint64_t)&database;
  qword_1004FC3F0 = (uint64_t)&database;
  qword_1004FC3F8 = 0;
  __cxa_atexit((void (*)(void *))std::list<std::map<std::string,boost::any>>::~list, &database, (void *)&_mh_execute_header);
}

void sub_1001F1C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F1DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F1F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F2144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F23D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F2620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001F26D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001F3278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *location, id *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  dispatch::queue::~queue(&a44);
  objc_destroyWeak(v55);
  if (a55 < 0) {
    operator delete(__p);
  }
  objc_destroyWeak(v58);
  objc_destroyWeak(v57);
  objc_destroyWeak(v56);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);

  objc_destroyWeak((id *)(v59 - 152));
  _Unwind_Resume(a1);
}

void sub_1001F3790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }

  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_1001F3A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1001F3DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001F3F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F411C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F42F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F451C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F47D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F49EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1001F4B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F4C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = *(void *)(v15 - 56);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (*(char *)(v15 - 17) < 0) {
    operator delete(*(void **)(v15 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F4E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = v22;

  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001F5184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a9) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }

  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001F54EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F63E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }

  xpc::dict::~dict(&a32);
  _Unwind_Resume(a1);
}

void convert_ValMap_to_xpc_object(any *a1@<X0>, const char *a2@<X1>, const char *a3@<X2>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v8, "method", a3);
  xpc_dictionary_set_string(v8, "key", a2);
  if (!a1->var0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "<empty>");
    operator new();
  }
  append_to_xpc_object_by_value_type(v8, a1);
  id v9 = v8;
  uint64_t v10 = v9;
  xpc_object_t v11 = v9;
  if (!v9) {
    xpc_object_t v11 = xpc_null_create();
  }

  id v12 = v11;
  uint64_t v13 = v12;
  *a4 = v12;
  if (v12)
  {
    if (xpc_get_type(v12) != (xpc_type_t)&_xpc_type_dictionary)
    {
      *a4 = xpc_null_create();
    }
  }
  else
  {
    *a4 = xpc_null_create();
  }
}

void sub_1001F67A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    awdmetricsclient_convert_ValMap_to_xpc_object();
  }
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001F68D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,xpc_object_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 8))(a25);
  }
  xpc::dict::~dict(&a26);
  if (a33 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001F7D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a56) {
    (*(void (**)(uint64_t))(*(void *)a56 + 8))(a56);
  }
  if (a57) {
    (*(void (**)(uint64_t))(*(void *)a57 + 8))(a57);
  }
  uint64_t v64 = *(void *)(v62 - 208);
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  uint64_t v65 = *(void *)(v62 - 200);
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  if (*(char *)(v62 - 161) < 0) {
    operator delete(*(void **)(v62 - 184));
  }

  _Unwind_Resume(a1);
}

void sub_1001F95A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 8))(a28);
  }
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 8))(a33);
  }
  if (a43) {
    (*(void (**)(uint64_t))(*(void *)a43 + 8))(a43);
  }
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a53) {
    (*(void (**)(uint64_t))(*(void *)a53 + 8))(a53);
  }
  uint64_t v56 = *(void *)(v54 - 232);
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }

  uint64_t v57 = *(void *)(v54 - 192);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  xpc::dict::~dict((xpc_object_t *)(v54 - 184));
  if (*(char *)(v54 - 145) < 0) {
    operator delete(*(void **)(v54 - 168));
  }
  _Unwind_Resume(a1);
}

void sub_1001FA3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v51 - 81) < 0) {
    operator delete(*(void **)(v51 - 104));
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FAF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 8))(a38);
  }

  uint64_t v53 = *(void *)(v51 - 192);
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  xpc::dict::~dict((xpc_object_t *)(v51 - 184));
  if (*(char *)(v51 - 145) < 0) {
    operator delete(*(void **)(v51 - 168));
  }
  _Unwind_Resume(a1);
}

void sub_1001FB63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FB850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  va_start(va, a6);

  xpc::dict::~dict((xpc_object_t *)va);
  if (v8 < 0) {
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

void sub_1001FBB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FC3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a34) {
    (*(void (**)(uint64_t))(*(void *)a34 + 8))(a34);
  }
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8))(a42);
  }

  xpc::dict::~dict((xpc_object_t *)(v43 - 184));
  if (*(char *)(v43 - 145) < 0) {
    operator delete(*(void **)(v43 - 168));
  }
  _Unwind_Resume(a1);
}

void sub_1001FC984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FCC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1001FCEA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  xpc::dict::~dict((xpc_object_t *)va);
  if (v5 < 0) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1001FCFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001FD0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001FD3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FD4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001FD950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a19, 8);

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_1001FDB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001FDFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a19, 8);

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001FE210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001FF58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _Unwind_Exception *exception_object, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_100200104(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;

  _Unwind_Resume(a1);
}

void tnmDumpRecord(THThreadNetworkCredentialsActiveDataSetRecord *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 network];
  uint64_t v3 = [v2 extendedPANID];
  if (v3)
  {
    uint64_t v4 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 network];
    id v5 = [v4 extendedPANID];
    uint64_t v6 = (ctu *)[v5 bytes];
    uint64_t v7 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 network];
    int v8 = [v7 extendedPANID];
    id v9 = [v8 length];
    ctu::hex((uint64_t *)__p, v6, v9, v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "(unknown)");
  }

  xpc_object_t v11 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "\t==== Credentials ====\n", buf, 2u);
  }

  id v12 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 uniqueIdentifier];
  BOOL v13 = v12 == 0;

  if (!v13)
  {
    uint64_t v14 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 uniqueIdentifier];
      id v16 = [v15 UUIDString];
      id v17 = [v16 UTF8String];
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "\t\t  - UUID: \t\t%s\n", buf, 0xCu);
    }
  }
  char v18 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 borderAgent];
  char v19 = [v18 discriminatorId];
  if (v19)
  {
    __int16 v20 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 borderAgent];
    id v21 = [v20 discriminatorId];
    char v22 = (ctu *)[v21 bytes];
    uint64_t v23 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 borderAgent];
    __int16 v24 = [v23 discriminatorId];
    id v25 = [v24 length];
    ctu::hex((uint64_t *)buf, v22, v25, v26);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "(unknown)");
  }

  uint64_t v27 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    CFDictionaryRef v28 = buf;
    if (v128 < 0) {
      CFDictionaryRef v28 = *(unsigned char **)buf;
    }
    *(_DWORD *)uint64_t v123 = 136315138;
    *(void *)&v123[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "\t\t  -  Border Agent Discriminator ID : %s\n", v123, 0xCu);
  }

  BOOL v29 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    unsigned __int8 v30 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 network];
    __int16 v31 = [v30 networkName];
    int v32 = v31;
    if (!v31) {
      __int16 v31 = @"(unknown)";
    }
    id v33 = [(__CFString *)v31 UTF8String];
    *(_DWORD *)uint64_t v123 = 136315138;
    *(void *)&v123[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "\t\t  - Network Name: \t%s\n", v123, 0xCu);
  }
  uint64_t v34 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    uint64_t v35 = __p;
    if (v122 < 0) {
      uint64_t v35 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t v123 = 136315138;
    *(void *)&v123[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "\t\t  - Network XPANID: \t%s\n", v123, 0xCu);
  }

  uint64_t v36 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
  uint64_t v37 = [v36 PANID];
  BOOL v38 = v37 == 0;

  if (!v38)
  {
    uint64_t v39 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      uint64_t v40 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      id v41 = [v40 PANID];
      uint64_t v42 = (ctu *)[v41 bytes];
      uint64_t v43 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      uint64_t v44 = [v43 PANID];
      id v45 = [v44 length];
      ctu::hex((uint64_t *)v123, v42, v45, v46);
      if (v124 >= 0) {
        uint64_t v47 = v123;
      }
      else {
        uint64_t v47 = *(unsigned char **)v123;
      }
      *(_DWORD *)uint64_t v125 = 136315138;
      int v126 = v47;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "\t\t  - Network PANID: \t%s\n", v125, 0xCu);
      if (v124 < 0) {
        operator delete(*(void **)v123);
      }
    }
  }
  uint64_t v48 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
  uint64_t v49 = [v48 masterKey];
  BOOL v50 = v49 == 0;

  if (!v50)
  {
    uint64_t v51 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
    {
      uint64_t v52 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      id v53 = [v52 masterKey];
      uint64_t v54 = (ctu *)[v53 bytes];
      uint64_t v55 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      uint64_t v56 = [v55 masterKey];
      id v57 = [v56 length];
      ctu::hex((uint64_t *)v123, v54, v57, v58);
      if (v124 >= 0) {
        uint64_t v59 = v123;
      }
      else {
        uint64_t v59 = *(unsigned char **)v123;
      }
      *(_DWORD *)uint64_t v125 = 136642819;
      int v126 = v59;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "\t\t  - Master Key: \t%{sensitive}s\n", v125, 0xCu);
      if (v124 < 0) {
        operator delete(*(void **)v123);
      }
    }
  }
  int v60 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
  BOOL v61 = [v60 PSKc];
  BOOL v62 = v61 == 0;

  if (!v62)
  {
    uint64_t v63 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      uint64_t v64 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      id v65 = [v64 PSKc];
      int v66 = (ctu *)[v65 bytes];
      uint64_t v67 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      int v68 = [v67 PSKc];
      id v69 = [v68 length];
      ctu::hex((uint64_t *)v123, v66, v69, v70);
      if (v124 >= 0) {
        unsigned __int8 v71 = v123;
      }
      else {
        unsigned __int8 v71 = *(unsigned char **)v123;
      }
      *(_DWORD *)uint64_t v125 = 136642819;
      int v126 = v71;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "\t\t  - PSKc: \t\t%{sensitive}s\n", v125, 0xCu);
      if (v124 < 0) {
        operator delete(*(void **)v123);
      }
    }
  }
  uint64_t v72 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
  int v73 = [v72 passPhrase];
  BOOL v74 = v73 == 0;

  if (!v74)
  {
    unsigned __int8 v75 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
    {
      int v76 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      id v77 = [v76 passPhrase];
      id v78 = [v77 UTF8String];
      *(_DWORD *)uint64_t v123 = 136315138;
      *(void *)&v123[4] = v78;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "\t\t  - Passphrase: \t%s\n", v123, 0xCu);
    }
  }
  uint64_t v79 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
  unsigned int v80 = [v79 channel];
  BOOL v81 = v80 == kTHNetworkChannel_None;

  if (!v81)
  {
    uint64_t v82 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
    {
      uint64_t v83 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      unsigned int v84 = [v83 channel];
      *(_DWORD *)uint64_t v123 = 67109120;
      *(_DWORD *)&v123[4] = v84;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "\t\t  - Network Channel: \t%u\n", v123, 8u);
    }
  }
  uint64_t v85 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentialsDataSet];
  int v86 = [v85 dataSetArray];
  if (v86)
  {
    uint64_t v87 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentialsDataSet];
    id v88 = [v87 dataSetArray];
    uint64_t v89 = (ctu *)[v88 bytes];
    int v90 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentialsDataSet];
    uint64_t v91 = [v90 dataSetArray];
    id v92 = [v91 length];
    ctu::hex((uint64_t *)v123, v89, v92, v93);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v123, "(unknown)");
  }

  int v94 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
  if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
  {
    unsigned int v95 = v123;
    if (v124 < 0) {
      unsigned int v95 = *(unsigned char **)v123;
    }
    *(_DWORD *)uint64_t v125 = 136642819;
    int v126 = v95;
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "\t\t  - DataSet Credentials: %{sensitive}s\n", v125, 0xCu);
  }

  unsigned int v96 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
  int v97 = [v96 userInfo];
  BOOL v98 = v97 == 0;

  if (!v98)
  {
    uint64_t v99 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
    {
      uint64_t v100 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 credentials];
      id v101 = [v100 userInfo];
      uint64_t v102 = [v101 UTF8String];
      *(_DWORD *)uint64_t v125 = 136315138;
      int v126 = v102;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "\t\t  - User Info: \t%s\n", v125, 0xCu);
    }
  }
  int v103 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 keychainAccessGroup];
  BOOL v104 = v103 == 0;

  if (!v104)
  {
    uint64_t v105 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
    {
      id v106 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 keychainAccessGroup];
      unsigned int v107 = [v106 UTF8String];
      *(_DWORD *)uint64_t v125 = 136315138;
      int v126 = v107;
      _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_INFO, "\t\t  - Access Group: \t%s\n", v125, 0xCu);
    }
  }
  uint64_t v108 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 creationDate];
  BOOL v109 = v108 == 0;

  if (!v109)
  {
    uint64_t v110 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
    {
      uint64_t v111 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 creationDate];
      id v112 = [v111 description];
      unsigned int v113 = [v112 UTF8String];
      *(_DWORD *)uint64_t v125 = 136315138;
      int v126 = v113;
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_INFO, "\t\t  - Created on: \t%s\n", v125, 0xCu);
    }
  }
  int v114 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 lastModificationDate];
  BOOL v115 = v114 == 0;

  if (!v115)
  {
    uint64_t v116 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
    if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
    {
      uint64_t v117 = [(THThreadNetworkCredentialsActiveDataSetRecord *)v1 lastModificationDate];
      id v118 = [v117 description];
      unsigned int v119 = [v118 UTF8String];
      *(_DWORD *)uint64_t v125 = 136315138;
      int v126 = v119;
      _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_INFO, "\t\t  - Last modified on: \t%s\n", v125, 0xCu);
    }
  }
  char v120 = log_get_logging_obg("com.apple.wpantund.tnm", "threadStart");
  if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v125 = 0;
    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_INFO, "\t-----------------\n", v125, 2u);
  }

  if (v124 < 0) {
    operator delete(*(void **)v123);
  }
  if (v128 < 0) {
    operator delete(*(void **)buf);
  }
  if (v122 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10020111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }

  _Unwind_Resume(a1);
}

void sub_100201748(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_100201A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_100201BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100201CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100201F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100202100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020294C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100202C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100202EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100203468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002037B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_100203918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100203DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

void sub_100203FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100204850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  _Block_object_dispose(&a22, 8);
  xpc::dict::~dict((xpc_object_t *)&a28);

  if (a36) {
    (*(void (**)(uint64_t))(*(void *)a36 + 8))(a36);
  }

  if (a42 < 0) {
    operator delete(__p);
  }
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a56 < 0) {
    operator delete(a51);
  }

  _Unwind_Resume(a1);
}

void sub_100204C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __Block_byref_object_copy__278(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(id *)(a2 + 48);
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *(void **)(a2 + 48);
  *(void *)(a2 + 48) = v3;
}

void __Block_byref_object_dispose__279(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;

  xpc_object_t v3 = *(void **)(a1 + 48);
}

void sub_100204E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002050D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_100205244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100205490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_100205600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100205A48(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100205FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

void sub_10020623C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020638C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100206680(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

void sub_1002069B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100207C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, int a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }

  uint64_t v56 = *(void *)(v54 - 224);
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }

  if (*(char *)(v54 - 193) < 0) {
    operator delete(*(void **)(v54 - 216));
  }
  if (a13 < 0) {
    operator delete(a11);
  }
  if (*(char *)(v54 - 161) < 0) {
    operator delete(*(void **)(v54 - 184));
  }

  _Unwind_Resume(a1);
}

void sub_100208C34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100209CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a61 < 0) {
    operator delete(a56);
  }

  _Unwind_Resume(a1);
}

void sub_10020A4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10020A8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_10020AA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020B380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }

  _Unwind_Resume(a1);
}

void sub_10020BCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_10020C008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020C554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

void sub_10020C82C(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_10020CC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_10020D07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*(void **)(v2 + 8));
  }
  xpc::dict::~dict((xpc_object_t *)va);

  _Unwind_Resume(a1);
}

void sub_10020D33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10020D5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_10020E5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL xpc::dict::operator BOOL(id *a1)
{
  uint64_t v1 = xpc::object::operator*(a1);
  BOOL v2 = xpc_get_type(v1) == (xpc_type_t)&_xpc_type_dictionary;

  return v2;
}

void sub_10020E798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020E904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020FAB4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100210068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100210288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002106EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  *(void *)(v28 - 112) = &a18;
  std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 112));
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002109CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100211168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  _Unwind_Resume(exception_object);
}

void sub_100211990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

void sub_100211FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100212418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  if (a31 < 0) {
    operator delete(a26);
  }

  _Unwind_Resume(a1);
}

void sub_1002143A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,xpc_object_t a44)
{
  if (*(char *)(v45 - 233) < 0) {
    operator delete(*(void **)(v45 - 256));
  }

  if (*(char *)(v45 - 137) < 0) {
    operator delete(*(void **)(v45 - 160));
  }
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 8))(a33);
  }
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8))(a37);
  }
  if (*(char *)(v45 - 97) < 0) {
    operator delete(*(void **)(v45 - 120));
  }
  xpc::dict::~dict(&a44);
  _Unwind_Resume(a1);
}

void sub_100214D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_100215040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100215620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100216474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8))(a37);
  }
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  uint64_t v53 = *(void *)(v51 - 160);
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  uint64_t v54 = *(void *)(v51 - 128);
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  if (*(char *)(v50 + 31) < 0) {
    operator delete(*(void **)(v50 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_1002168EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100216B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void sub_100216C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100216F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002170CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002175AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v35 = *(void *)(v33 - 72);
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_100217A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100218A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_10021A290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *a36,void *a37,void *a38,void *a39)
{
  _Unwind_Resume(a1);
}

void sub_10021A9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }

  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }

  _Unwind_Resume(a1);
}

void sub_10021AD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v25 = *(void *)(v23 - 56);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }

  _Unwind_Resume(a1);
}

void sub_10021B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

xpc::dict *xpc::dict::dict(xpc::dict *this, id *a2)
{
  xpc::object::operator*(a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  *(void *)this = v3;
  if (!v3)
  {
    xpc_object_t v4 = xpc_null_create();
    id v5 = *(void **)this;
    *(void *)this = v4;
  }
  return this;
}

void std::vector<unsigned char>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  BOOL v2 = **a1;
  if (v2)
  {
    v1[1] = v2;
    operator delete(v2);
  }
}

void xpc::dict::to_debug_string(xpc_object_t *this@<X0>, void *a2@<X8>)
{
  id v3 = xpc_copy_description(*this);
  std::string::basic_string[abi:ne180100]<0>(a2, v3);

  free(v3);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

__n128 std::vector<unsigned char>::__move_assign(uint64_t a1, __n128 *a2)
{
  std::vector<unsigned char>::__vdeallocate(a1);
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::vector<unsigned char>::__vdeallocate(uint64_t a1)
{
  BOOL v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10021B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t boost::any_cast<unsigned int const&>(uint64_t a1)
{
  uint64_t result = boost::any_cast<unsigned int const>(a1);
  if (!result)
  {
    v2.__vftable = 0;
    std::bad_cast::bad_cast(&v2);
    v2.__vftable = (std::bad_cast_vtbl *)off_100495C28;
    boost::throw_exception<boost::bad_any_cast>();
  }
  return result;
}

void sub_10021B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t boost::any_cast<unsigned int const>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t result = *((void *)boost::any::type((boost::any *)result) + 1) & 0x7FFFFFFFFFFFFFFFLL;
    if ((const char *)result == v2 || (uint64_t result = strcmp((const char *)result, v2), !result))
    {
      if (*v1) {
        return *v1 + 8;
      }
      else {
        __break(0x5516u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *boost::any::holder<nl::Data>::holder(void *a1, uint64_t a2)
{
  *a1 = off_1004962A0;
  std::vector<unsigned char>::vector(a1 + 1, a2);
  return a1;
}

void *std::vector<unsigned char>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

void *boost::any::holder<std::list<std::map<std::string,boost::any>>>::holder(void *a1, void *a2)
{
  id v3 = a1 + 1;
  *a1 = off_100498D20;
  a1[1] = v3;
  a1[2] = v3;
  a1[3] = 0;
  std::list<std::map<std::string,boost::any>>::splice((uint64_t)v3, v3, a2);
  return a1;
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_11_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_17_0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 4) = v3;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = result;
  *(_WORD *)(a3 + 22) = 2112;
  *(void *)(a3 + 24) = a2;
  return result;
}

void OUTLINED_FUNCTION_18_1(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0x1Cu);
}

void OUTLINED_FUNCTION_24_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void _GLOBAL__sub_I_ThreadNetworkManagerInstance_mm()
{
  qword_1004B6438 = 0;
  unk_1004B6440 = 0;
  mDaemonVersion = 0;
  __cxa_atexit((void (*)(void *))&std::string::~string, &mDaemonVersion, (void *)&_mh_execute_header);
  qword_1004B6450 = 0;
  unk_1004B6458 = 0;
  mVendorVersion = 0;
  __cxa_atexit((void (*)(void *))&std::string::~string, &mVendorVersion, (void *)&_mh_execute_header);
}

void threadSessionInfo::~threadSessionInfo(id *this)
{
}

void ThreadInfoBetweenRoles::~ThreadInfoBetweenRoles(id *this)
{
}

void WEDInfoStruct::~WEDInfoStruct(id *this)
{
}

void sub_10021FA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v23 = v21;

  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002201A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }

  _Unwind_Resume(a1);
}

void sub_1002203E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100220814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100220B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(a1);
}

void sub_100220D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002211F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  xpc::dict::~dict(&a23);
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002215D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002218A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  xpc_object_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_100221A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100221EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  xpc::dict::~dict(&a23);
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002223AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  xpc::dict::~dict(&a23);
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100222638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100222708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100222D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100223088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  xpc::dict::~dict((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void sub_100223350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_100223478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100223638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002239E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_ThreadNetworkManagerInstance_RCP2CAMetrics_extension_mm()
{
  xmmword_1004B6488 = 0u;
  *(_OWORD *)&qword_1004B6498 = 0u;
  xmmword_1004B64A8 = 0u;
  xmmword_1004B64B8 = 0u;
  xmmword_1004B64C8 = 0u;
  *(_OWORD *)&qword_1004B64D8 = 0u;
  qword_1004B64E8 = @"Regular-Stop";
  __cxa_atexit((void (*)(void *))threadSessionInfo::~threadSessionInfo, threadSessionMetrics, (void *)&_mh_execute_header);
  byte_1004B6500 = 0;
  qword_1004B6508 = @"NA";
  qword_1004B6510 = @"unknown";
  qword_1004B6518 = @"unknown";
  qword_1004B6520 = 0;
  __cxa_atexit((void (*)(void *))ThreadInfoBetweenRoles::~ThreadInfoBetweenRoles, &mThreadInfoBetweenRoles, (void *)&_mh_execute_header);
  qword_1004B6570 = 0;
  byte_1004B6578 = 0;
  qword_1004B6580 = 0;
  currentWEDInfo = 0u;
  *(_OWORD *)&qword_1004B6550 = 0u;
  __cxa_atexit((void (*)(void *))WEDInfoStruct::~WEDInfoStruct, &currentWEDInfo, (void *)&_mh_execute_header);
  mObjectWEDHistory = 0;
  dword_1004B6590 = 0;
}

void ThreadNetworkLoggingCategory(unsigned int a1)
{
  if (ThreadNetworkLoggingCategory_onceToken != -1) {
    dispatch_once(&ThreadNetworkLoggingCategory_onceToken, &__block_literal_global_12);
  }
  if (a1 >= 3)
  {
    __break(0x5512u);
    goto LABEL_9;
  }
  if (a1 == 2)
  {
LABEL_9:
    __break(1u);
    return;
  }
  std::bad_cast v2 = (void *)ThreadNetworkLoggingCategory_logHandles[a1];

  id v3 = v2;
}

void sub_1002246D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100224814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002249D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100224B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100224C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void startThreadNetworkManagerBridge(void)
{
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v2 = dispatch_queue_create("wpantund.TNM.Queue", v1);
  id v3 = (void *)tnm_queue;
  tnm_queue = (uint64_t)v2;

  if (!tnm_queue)
  {
    uint64_t v4 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      startThreadNetworkManagerBridge(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  id v12 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v13 = dispatch_queue_create("periodicStats.TNM.Queue", v12);
  uint64_t v14 = (void *)trigger_based_periodic_stats_collection_queue;
  trigger_based_periodic_stats_collection_queue = (uint64_t)v13;

  if (!trigger_based_periodic_stats_collection_queue)
  {
    uint64_t v15 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      startThreadNetworkManagerBridge(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  uint64_t v23 = [ThreadNetworkManagerInstance alloc];
  id v24 = [(ThreadNetworkManagerInstance *)v23 init:tnm_queue statsQueue:trigger_based_periodic_stats_collection_queue];
  uint64_t v25 = (void *)instance;
  instance = (uint64_t)v24;

  if (!instance)
  {
    uint64_t v26 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      startThreadNetworkManagerBridge(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  uint64_t v34 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    int v36 = 136315394;
    uint64_t v37 = "startThreadNetworkManagerBridge";
    __int16 v38 = 2112;
    uint64_t v39 = instance;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s: Instance is initiated : %@, signalling semaphore.", (uint8_t *)&v36, 0x16u);
  }

  dispatch_semaphore_signal((dispatch_semaphore_t)instance_init_semaphore);
  uint64_t v35 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    int v36 = 136315138;
    uint64_t v37 = "startThreadNetworkManagerBridge";
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "%s: instance semaphore is signalled...", (uint8_t *)&v36, 0xCu);
  }
}

void threadNetworkManager_MsgHandlerBridge(const std::string *a1@<X0>, xpc::object *a2@<X1>, void **a3@<X8>)
{
  if (tnm_queue)
  {
    if (!instance)
    {
      uint64_t v6 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "threadNetworkManager_MsgHandlerBridge";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: instance semaphore is waiting...", (uint8_t *)&buf, 0xCu);
      }

      dispatch_semaphore_wait((dispatch_semaphore_t)instance_init_semaphore, 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v7 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a1;
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v8 = (const std::string *)a1->__r_.__value_.__r.__words[0];
      }
      xpc::object::to_string((uint64_t *)&buf, a2);
      if (v24 >= 0) {
        p_long long buf = &buf;
      }
      else {
        p_long long buf = (long long *)buf;
      }
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v26 = v8;
      __int16 v27 = 2080;
      uint64_t v28 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TNM Handling command for client %s with inputs %s", v25, 0x16u);
      if (v24 < 0) {
        operator delete((void *)buf);
      }
    }

    uint64_t v10 = (void *)instance;
    std::string::basic_string(&v22, a1);
    xpc::dict::dict((xpc::dict *)&v21, (id *)a2);
    if (v10) {
      objc_msgSend(v10, "threadNetworkManagerInstance_MsgHandler:message:", &v22, &v21);
    }
    else {
      *a3 = 0;
    }
    id v19 = v21;
    id v21 = 0;

    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v11 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
        a1 = (const std::string *)a1->__r_.__value_.__r.__words[0];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "TNM Msg received from client %s before TNM is started", (uint8_t *)&buf, 0xCu);
    }

    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v13 = v12;
    if (!v12) {
      xpc_object_t v13 = xpc_null_create();
    }

    id v14 = v13;
    uint64_t v15 = v14;
    *a3 = v14;
    if (!v14 || xpc_get_type(v14) != (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v16 = xpc_null_create();
      uint64_t v17 = *a3;
      *a3 = v16;
    }
    *(void *)&long long buf = a3;
    *((void *)&buf + 1) = "ret";
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v20);
    id v18 = v20;
    id v20 = 0;
  }
}

void sub_100225584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v5 = xpc_null_create();
  xpc::dict::object_proxy::operator=(a1, &v5, a2);
  id v4 = v5;
  id v5 = 0;
}

void startThreadNetworkManagerBridge(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_4_0((void *)&_mh_execute_header, a1, a3, "%s: Failed to create periodicStats.TNM.Queue, unexpected scenario, asserting...", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_4_0((void *)&_mh_execute_header, a1, a3, "%s: Failed to create tnm queue, unexpected scenario, asserting...", a5, a6, a7, a8, 2u);
}

void _GLOBAL__sub_I_ThreadNetworkManagerBridge_mm()
{
  instance_init_semaphore = (uint64_t)dispatch_semaphore_create(0);
}

void threadNetworkManager_MsgHandler(const std::string *a1, void **a2, uint64_t a3)
{
  int IsThreadFeatureEnabled = ctrUtilIsThreadFeatureEnabled();
  logging_obg = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = IsThreadFeatureEnabled;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "threadNetworkManager_MsgHandler - os_feature_enabled : %d", (uint8_t *)&buf, 8u);
  }
  if ((IsThreadFeatureEnabled & 1) == 0)
  {
    xpc_object_t v13 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "threadNetworkManager_MsgHandler";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s: This functionality is disabled...", (uint8_t *)&buf, 0xCu);
    }
    xpc_object_t v14 = xpc_null_create();
    if (*(void *)a3) {
      uint64_t v15 = _Block_copy(*(const void **)a3);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v17 = *(NSObject **)(a3 + 8);
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120;
    uint64_t v29 = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_0;
    uint64_t v30 = &__block_descriptor_tmp_9;
    if (v15) {
      id v18 = _Block_copy(v15);
    }
    else {
      id v18 = 0;
    }
    int v33 = 6;
    aBlock = v18;
    xpc_object_t object = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v17, &buf);
    xpc_release(object);
    xpc_object_t object = 0;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
    goto LABEL_51;
  }
  BOOL v8 = tnm_queue == 0;
  uint64_t v9 = log_get_logging_obg("com.apple.wpantund.tnm", "default");
  uint64_t v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      threadNetworkManager_MsgHandler(v10);
    }
    xpc_object_t v14 = xpc_null_create();
    if (*(void *)a3) {
      xpc_object_t v16 = _Block_copy(*(const void **)a3);
    }
    else {
      xpc_object_t v16 = 0;
    }
    id v21 = *(NSObject **)(a3 + 8);
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120;
    uint64_t v29 = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_0;
    uint64_t v30 = &__block_descriptor_tmp_9;
    if (v16) {
      std::string v22 = _Block_copy(v16);
    }
    else {
      std::string v22 = 0;
    }
    int v33 = 2;
    aBlock = v22;
    xpc_object_t object = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v21, &buf);
    xpc_release(object);
    xpc_object_t object = 0;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v16) {
      _Block_release(v16);
    }
LABEL_51:
    xpc_release(v14);
    return;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "threadNetworkManager_MsgHandler";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s: dispatching on msg bridge response handler ...", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v11 = tnm_queue;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1174405120;
  v23[2] = ___Z31threadNetworkManager_MsgHandlerNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvhS7_EEE_block_invoke;
  v23[3] = &__block_descriptor_tmp_11;
  std::string::basic_string(&__p, a1);
  xpc_object_t v12 = *a2;
  xpc_object_t v25 = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  id v19 = *(void **)a3;
  if (*(void *)a3) {
    id v19 = _Block_copy(v19);
  }
  id v20 = *(NSObject **)(a3 + 8);
  uint64_t v26 = v19;
  dispatch_object_t v27 = v20;
  if (v20) {
    dispatch_retain(v20);
  }
  dispatch_async(v11, v23);
  if (v27) {
    dispatch_release(v27);
  }
  if (v26) {
    _Block_release(v26);
  }
  xpc_release(v25);
  xpc_object_t v25 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100225C28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___Z31threadNetworkManager_MsgHandlerNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvhS7_EEE_block_invoke(uint64_t a1)
{
  std::string::basic_string(&v9, (const std::string *)(a1 + 32));
  dispatch_queue_t v2 = *(void **)(a1 + 56);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  threadNetworkManager_MsgHandlerBridge(&v9, (xpc::object *)&object, &v10);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  xpc_object_t v3 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  id v4 = *(const void **)(a1 + 64);
  if (v4) {
    id v5 = _Block_copy(v4);
  }
  else {
    id v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(a1 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_0;
  block[3] = &__block_descriptor_tmp_9;
  if (v5) {
    uint64_t v7 = _Block_copy(v5);
  }
  else {
    uint64_t v7 = 0;
  }
  int v14 = 0;
  aBlock = v7;
  xpc_object_t v13 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  dispatch_async(v6, block);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v3);
  xpc_release(v10);
}

void sub_100225E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c15_ZTSN3xpc4dictE64c57_ZTSN8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  std::string::basic_string((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  id v4 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 56) = xpc_null_create();
  }
  id v5 = *(void **)(a2 + 64);
  if (v5) {
    id v5 = _Block_copy(v5);
  }
  uint64_t v6 = *(NSObject **)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c15_ZTSN3xpc4dictE64c57_ZTSN8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEE(uint64_t a1)
{
  dispatch_queue_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0)
  {
    id v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_queue_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, void, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_100225FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  xpc::dict::~dict((xpc_object_t *)va);
  _Unwind_Resume(a1);
}

void threadNetworkManager_MsgHandler(os_log_t log)
{
  int v1 = 136315138;
  dispatch_queue_t v2 = "threadNetworkManager_MsgHandler";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: Returning error response handler ...", (uint8_t *)&v1, 0xCu);
}

double NetworkDiagnosticsReqTransmitReceive::NetworkDiagnosticsReqTransmitReceive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)(a1 + 208) = a3;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)(a1 + 208) = a3;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  return result;
}

void NetworkDiagnosticsReqTransmitReceive::cleanup(NetworkDiagnosticsLogger **this, int a2, int a3)
{
  if (a3)
  {
    *((_DWORD *)this + 54) = 0;
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::clear(this + 1);
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::clear(this + 6);
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::clear(this + 11);
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::clear(this + 16);
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::clear(this + 21);
    this[29] = this[28];
    *((_WORD *)this + 124) = 0;
    *((unsigned char *)this + 280) = 0;
  }
}

BOOL NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v6 = a2;
  BOOL v8 = (char *)a2 + 23;
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  int v9 = inet_pton(30, (const char *)a2, (void *)a3);
  if (v9 <= 0)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get(v8, v6, logging_obg);
    }
  }
  else
  {
    *(_WORD *)(a3 + 32) = 16;
    *(unsigned char *)(a3 + 16) = 1;
    if (a4)
    {
      *(unsigned char *)(a3 + 17) = 8;
      *(_WORD *)(a3 + 34) = 2;
      if (*(unsigned char *)(*(void *)a1 + 50))
      {
        *(unsigned char *)(a3 + 18) = 9;
        __int16 v10 = 3;
LABEL_11:
        *(_WORD *)(a3 + 34) = v10;
      }
    }
    else
    {
      *(_WORD *)(a3 + 17) = 4101;
      *(unsigned char *)(a3 + 19) = 8;
      *(_WORD *)(a3 + 34) = 4;
      if (*(unsigned char *)(*(void *)a1 + 50))
      {
        *(_WORD *)(a3 + 20) = 1033;
        __int16 v10 = 6;
        goto LABEL_11;
      }
    }
  }
  return v9 > 0;
}

BOOL NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_self_ncp(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  BOOL v4 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get(a1, a2, (uint64_t)&v26, 0);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 264);
    unint64_t v6 = *(void *)(a1 + 272);
    if (v5 >= v6)
    {
      uint64_t v11 = *(void *)(a1 + 256);
      unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v11) >> 2);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0x71C71C71C71C71CLL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v11) >> 2);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x38E38E38E38E38ELL) {
        unint64_t v15 = 0x71C71C71C71C71CLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        xpc_object_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Ctr_send_diagnostics_t>>(a1 + 272, v15);
      }
      else {
        xpc_object_t v16 = 0;
      }
      uint64_t v17 = &v16[36 * v12];
      id v18 = &v16[36 * v15];
      long long v19 = v26;
      long long v20 = v27;
      *((_DWORD *)v17 + 8) = v28;
      *(_OWORD *)uint64_t v17 = v19;
      *((_OWORD *)v17 + 1) = v20;
      int v9 = v17 + 36;
      std::string v22 = *(char **)(a1 + 256);
      id v21 = *(char **)(a1 + 264);
      if (v21 != v22)
      {
        do
        {
          long long v23 = *(_OWORD *)(v21 - 36);
          long long v24 = *(_OWORD *)(v21 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v21 - 1);
          *(_OWORD *)(v17 - 20) = v24;
          *(_OWORD *)(v17 - 36) = v23;
          v17 -= 36;
          v21 -= 36;
        }
        while (v21 != v22);
        id v21 = *(char **)(a1 + 256);
      }
      *(void *)(a1 + 256) = v17;
      *(void *)(a1 + 264) = v9;
      *(void *)(a1 + 272) = v18;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      long long v7 = v26;
      long long v8 = v27;
      *(_DWORD *)(v5 + 32) = v28;
      *(_OWORD *)unint64_t v5 = v7;
      *(_OWORD *)(v5 + 16) = v8;
      int v9 = (char *)(v5 + 36);
    }
    *(void *)(a1 + 264) = v9;
    *(unsigned char *)(a1 + 280) = 1;
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_self_ncp(a2, a1, logging_obg);
    }
  }
  return v4;
}

uint64_t NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_routers(NetworkDiagnosticsReqTransmitReceive *this)
{
  *((void *)this + 33) = *((void *)this + 32);
  uint64_t v2 = *((void *)this + 28);
  if (*((void *)this + 29) == v2)
  {
LABEL_31:
    uint64_t result = 1;
    *((unsigned char *)this + 280) = 1;
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = 0;
    unint64_t v5 = (char **)((char *)this + 256);
    uint64_t v29 = (char *)this + 272;
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v31 = 0;
      getDestinationIPv6FromPrefixAndRloc16(*(unsigned __int16 *)(v2 + 2 * v3), (const void **)(*(void *)this + 6688), (uint64_t)__p);
      *(void *)&long long v38 = *((void *)this + 28) + 2 * v3;
      std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)this + 8, (unsigned __int16 *)v38, (uint64_t)&std::piecewise_construct, (unsigned __int16 **)&v38)[12] = 1;
      BOOL v6 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get((uint64_t)this, (uint64_t *)__p, (uint64_t)&v38, 0);
      if (v6)
      {
        unint64_t v7 = *((void *)this + 33);
        unint64_t v8 = *((void *)this + 34);
        if (v7 >= v8)
        {
          unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - (void)*v5) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x71C71C71C71C71CLL) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - (void)*v5) >> 2);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x38E38E38E38E38ELL) {
            unint64_t v18 = 0x71C71C71C71C71CLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Ctr_send_diagnostics_t>>((uint64_t)v29, v18);
          }
          else {
            long long v19 = 0;
          }
          long long v20 = &v19[36 * v15];
          long long v21 = v38;
          long long v22 = v39;
          *((_DWORD *)v20 + 8) = v40;
          *(_OWORD *)long long v20 = v21;
          *((_OWORD *)v20 + 1) = v22;
          long long v24 = (char *)*((void *)this + 32);
          long long v23 = (char *)*((void *)this + 33);
          xpc_object_t v25 = v20;
          if (v23 != v24)
          {
            do
            {
              long long v26 = *(_OWORD *)(v23 - 36);
              long long v27 = *(_OWORD *)(v23 - 20);
              *((_DWORD *)v25 - 1) = *((_DWORD *)v23 - 1);
              *(_OWORD *)(v25 - 20) = v27;
              *(_OWORD *)(v25 - 36) = v26;
              v25 -= 36;
              v23 -= 36;
            }
            while (v23 != v24);
            long long v23 = *v5;
          }
          uint64_t v11 = v20 + 36;
          *((void *)this + 32) = v25;
          *((void *)this + 33) = v20 + 36;
          *((void *)this + 34) = &v19[36 * v18];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          long long v9 = v38;
          long long v10 = v39;
          *(_DWORD *)(v7 + 32) = v40;
          *(_OWORD *)unint64_t v7 = v9;
          *(_OWORD *)(v7 + 16) = v10;
          uint64_t v11 = (char *)(v7 + 36);
        }
        *((void *)this + 33) = v11;
      }
      else
      {
        logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
        {
          unint64_t v13 = __p;
          if (v31 < 0) {
            unint64_t v13 = (void **)__p[0];
          }
          unint64_t v14 = (void *)(*(void *)this + 6688);
          if (*(char *)(*(void *)this + 6711) < 0) {
            unint64_t v14 = (void *)*v14;
          }
          *(_DWORD *)long long buf = 136315650;
          int v33 = "send_networkdiagnostics_get_to_routers";
          __int16 v34 = 2080;
          uint64_t v35 = v13;
          __int16 v36 = 2080;
          uint64_t v37 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "TDM: %s ERROR Cannot send network diagnostics get to neighbor router=%s MLPrefix=%s ", buf, 0x20u);
        }
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (!v6) {
        return 0;
      }
      uint64_t v3 = (unsigned __int16)++v4;
      uint64_t v2 = *((void *)this + 28);
      if ((unsigned __int16)v4 >= (unint64_t)((*((void *)this + 29) - v2) >> 1)) {
        goto LABEL_31;
      }
    }
  }
  return result;
}

void sub_100226820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_children(NetworkDiagnosticsReqTransmitReceive *this)
{
  if (!*((void *)this + 19) && !*((void *)this + 24)) {
    *((unsigned char *)this + 249) = 1;
  }
  uint64_t v2 = 1;
  if (*(_DWORD *)(*(void *)this + 44))
  {
    *((_DWORD *)this + 54) = 3;
    *((void *)this + 33) = *((void *)this + 32);
    uint64_t v3 = (unsigned __int16 *)((char *)this + 144);
    uint64_t v51 = (char *)this + 272;
    uint64_t v52 = (char **)((char *)this + 256);
    while (1)
    {
      uint64_t v3 = *(unsigned __int16 **)v3;
      if (!v3) {
        break;
      }
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      std::string __p = 0;
      getDestinationIPv6FromPrefixAndRloc16(v3[8], (const void **)(*(void *)this + 6688), (uint64_t)&__p);
      *(void *)int v60 = v3 + 8;
      std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)this + 48, v3 + 8, (uint64_t)&std::piecewise_construct, (unsigned __int16 **)v60)[12] = 1;
      BOOL v4 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get((uint64_t)this, (uint64_t *)&__p, (uint64_t)v60, 0);
      if (v4)
      {
        unint64_t v5 = *((void *)this + 33);
        unint64_t v6 = *((void *)this + 34);
        if (v5 >= v6)
        {
          unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (void)*v52) >> 2);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0x71C71C71C71C71CLL) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)*v52) >> 2);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x38E38E38E38E38ELL) {
            unint64_t v15 = 0x71C71C71C71C71CLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15) {
            unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Ctr_send_diagnostics_t>>((uint64_t)v51, v15);
          }
          else {
            unint64_t v16 = 0;
          }
          unint64_t v17 = &v16[36 * v12];
          long long v18 = *(_OWORD *)v60;
          long long v19 = *(_OWORD *)&v60[16];
          *((_DWORD *)v17 + 8) = v61;
          *(_OWORD *)unint64_t v17 = v18;
          *((_OWORD *)v17 + 1) = v19;
          long long v21 = (char *)*((void *)this + 32);
          long long v20 = (char *)*((void *)this + 33);
          long long v22 = v17;
          if (v20 != v21)
          {
            do
            {
              long long v23 = *(_OWORD *)(v20 - 36);
              long long v24 = *(_OWORD *)(v20 - 20);
              *((_DWORD *)v22 - 1) = *((_DWORD *)v20 - 1);
              *(_OWORD *)(v22 - 20) = v24;
              *(_OWORD *)(v22 - 36) = v23;
              v22 -= 36;
              v20 -= 36;
            }
            while (v20 != v21);
            long long v20 = *v52;
          }
          long long v9 = v17 + 36;
          *((void *)this + 32) = v22;
          *((void *)this + 33) = v17 + 36;
          *((void *)this + 34) = &v16[36 * v15];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          long long v7 = *(_OWORD *)v60;
          long long v8 = *(_OWORD *)&v60[16];
          *(_DWORD *)(v5 + 32) = v61;
          *(_OWORD *)unint64_t v5 = v7;
          *(_OWORD *)(v5 + 16) = v8;
          long long v9 = (char *)(v5 + 36);
        }
        *((void *)this + 33) = v9;
      }
      else
      {
        logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
        {
          p_p = &__p;
          if (v55 < 0) {
            p_p = __p;
          }
          *(_DWORD *)long long buf = 136315394;
          id v57 = "send_networkdiagnostics_get_to_children";
          __int16 v58 = 2080;
          uint64_t v59 = p_p;
          _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "TDM: %s Cannot send network diagnostics get to FED child node %s", buf, 0x16u);
        }
      }
      if (SHIBYTE(v55) < 0)
      {
        operator delete(__p);
        if (!v4) {
          return 0;
        }
      }
      else if (!v4)
      {
        return 0;
      }
    }
    if (*(_DWORD *)(*(void *)this + 44) == 2)
    {
      xpc_object_t v25 = (unsigned __int16 *)((char *)this + 184);
      while (1)
      {
        xpc_object_t v25 = *(unsigned __int16 **)v25;
        if (!v25) {
          break;
        }
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        std::string __p = 0;
        getDestinationIPv6FromPrefixAndRloc16(v25[8], (const void **)(*(void *)this + 6688), (uint64_t)&__p);
        *(void *)int v60 = v25 + 8;
        std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)this + 48, v25 + 8, (uint64_t)&std::piecewise_construct, (unsigned __int16 **)v60)[12] = 1;
        BOOL v26 = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get((uint64_t)this, (uint64_t *)&__p, (uint64_t)v60, 1);
        if (v26)
        {
          unint64_t v27 = *((void *)this + 33);
          unint64_t v28 = *((void *)this + 34);
          if (v27 >= v28)
          {
            unint64_t v34 = 0x8E38E38E38E38E39 * ((uint64_t)(v27 - (void)*v52) >> 2);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x71C71C71C71C71CLL) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v36 = 0x8E38E38E38E38E39 * ((uint64_t)(v28 - (void)*v52) >> 2);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x38E38E38E38E38ELL) {
              unint64_t v37 = 0x71C71C71C71C71CLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37) {
              long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Ctr_send_diagnostics_t>>((uint64_t)v51, v37);
            }
            else {
              long long v38 = 0;
            }
            long long v39 = &v38[36 * v34];
            long long v40 = *(_OWORD *)v60;
            long long v41 = *(_OWORD *)&v60[16];
            *((_DWORD *)v39 + 8) = v61;
            *(_OWORD *)long long v39 = v40;
            *((_OWORD *)v39 + 1) = v41;
            uint64_t v43 = (char *)*((void *)this + 32);
            uint64_t v42 = (char *)*((void *)this + 33);
            uint64_t v44 = v39;
            if (v42 != v43)
            {
              do
              {
                long long v45 = *(_OWORD *)(v42 - 36);
                long long v46 = *(_OWORD *)(v42 - 20);
                *((_DWORD *)v44 - 1) = *((_DWORD *)v42 - 1);
                *(_OWORD *)(v44 - 20) = v46;
                *(_OWORD *)(v44 - 36) = v45;
                v44 -= 36;
                v42 -= 36;
              }
              while (v42 != v43);
              uint64_t v42 = *v52;
            }
            uint64_t v31 = v39 + 36;
            *((void *)this + 32) = v44;
            *((void *)this + 33) = v39 + 36;
            *((void *)this + 34) = &v38[36 * v37];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            long long v29 = *(_OWORD *)v60;
            long long v30 = *(_OWORD *)&v60[16];
            *(_DWORD *)(v27 + 32) = v61;
            *(_OWORD *)unint64_t v27 = v29;
            *(_OWORD *)(v27 + 16) = v30;
            uint64_t v31 = (char *)(v27 + 36);
          }
          *((void *)this + 33) = v31;
        }
        else
        {
          uint64_t v32 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            int v33 = &__p;
            if (v55 < 0) {
              int v33 = __p;
            }
            *(_DWORD *)long long buf = 136315394;
            id v57 = "send_networkdiagnostics_get_to_children";
            __int16 v58 = 2080;
            uint64_t v59 = v33;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "TDM: %s Cannot send network diagnostics get to SED child node %s", buf, 0x16u);
          }
        }
        if (SHIBYTE(v55) < 0) {
          operator delete(__p);
        }
        if (!v26) {
          return 0;
        }
      }
    }
    else
    {
      uint64_t v47 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        uint64_t v48 = *((void *)this + 19);
        uint64_t v49 = *((void *)this + 24);
        *(_DWORD *)int v60 = 136315650;
        *(void *)&v60[4] = "send_networkdiagnostics_get_to_children";
        *(_WORD *)&v60[12] = 2048;
        *(void *)&v60[14] = v48;
        *(_WORD *)&v60[22] = 2048;
        *(void *)&v60[24] = v49;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "TDM: %s Send to all children not enabled. Exit here fedsetsize=%lu sedsetsize=%lu", v60, 0x20u);
      }
    }
    uint64_t v2 = 1;
    *((unsigned char *)this + 280) = 1;
  }
  return v2;
}

void sub_100226E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void NetworkDiagnosticsReqTransmitReceive::populate_pending_diag_req_destinations(void *a1, int a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v6 = 0;
    long long v7 = (void **)(a1 + 28);
    uint64_t v8 = (uint64_t)(a1 + 30);
    do
    {
      if (((*(unsigned __int8 *)(a3 + (v6 >> 3) + 3) << (v6 & 7)) & 0x80) != 0
        && getRloc16FromRouterId(v6) != a2)
      {
        __int16 Rloc16FromRouterId = getRloc16FromRouterId(v6);
        __int16 v10 = Rloc16FromRouterId;
        unint64_t v12 = (char *)a1[29];
        unint64_t v11 = a1[30];
        if ((unint64_t)v12 >= v11)
        {
          unint64_t v14 = (char *)*v7;
          uint64_t v15 = v12 - (unsigned char *)*v7;
          if (v15 <= -3) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v15 >> 1;
          unint64_t v17 = v11 - (void)v14;
          if (v17 <= (v15 >> 1) + 1) {
            unint64_t v18 = v16 + 1;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v17 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v19 = v18;
          }
          if (v19)
          {
            long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v8, v19);
            unint64_t v14 = (char *)a1[28];
            unint64_t v12 = (char *)a1[29];
          }
          else
          {
            long long v20 = 0;
          }
          long long v21 = &v20[2 * v16];
          *(_WORD *)long long v21 = v10;
          unint64_t v13 = v21 + 2;
          while (v12 != v14)
          {
            __int16 v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          a1[28] = v21;
          a1[29] = v13;
          a1[30] = &v20[2 * v19];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_WORD *)unint64_t v12 = Rloc16FromRouterId;
          unint64_t v13 = v12 + 2;
        }
        a1[29] = v13;
      }
      ++v6;
    }
    while (v6 != 63);
  }
}

BOOL NetworkDiagnosticsReqTransmitReceive::parse_rsp_tlvs(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, _WORD *a5, unsigned char *a6)
{
  if (a2)
  {
    if (a3)
    {
      int v12 = 0;
      uint64_t v13 = a2;
      do
      {
        switch(*(unsigned char *)v13)
        {
          case 1:
            *a5 = bswap32(*(unsigned __int16 *)(v13 + 2)) >> 16;
            *a6 = 1;
            break;
          case 2:
          case 3:
          case 6:
          case 7:
            break;
          case 4:
            a4[5] = v13;
            break;
          case 5:
            a4[1] = v13;
            if (*(_DWORD *)(a1 + 216) == 1) {
              NetworkDiagnosticsReqTransmitReceive::populate_pending_diag_req_destinations((void *)a1, (unsigned __int16)*a5, v13);
            }
            break;
          case 8:
            a4[3] = v13;
            break;
          case 9:
            a4[4] = v13;
            break;
          default:
            if (*(unsigned char *)v13 == 16) {
              a4[2] = v13;
            }
            break;
        }
        int v14 = *(unsigned __int8 *)(v13 + 1);
        if (v14 == 255) {
          int v15 = 3;
        }
        else {
          int v15 = 1;
        }
        if (v14 == 255)
        {
          uint64_t v18 = *(unsigned __int8 *)(v13 + 2);
          uint64_t v19 = *(unsigned __int8 *)(v13 + 3);
          int v14 = v19 | (v18 << 8);
          uint64_t v17 = v19 | (v18 << 8);
          uint64_t v16 = 3;
        }
        else
        {
          uint64_t v16 = 1;
          uint64_t v17 = *(unsigned __int8 *)(v13 + 1);
        }
        v13 += 1 + v16 + v17;
        int v20 = v12 + v15 + v14;
        int v12 = v20 + 1;
      }
      while (a3 > (unsigned __int16)(v20 + 1));
    }
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsReqTransmitReceive::parse_rsp_tlvs(logging_obg, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  return a2 != 0;
}

BOOL NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_self(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v16 = a3;
  uint64_t v3 = (_DWORD *)(a1 + 216);
  int v4 = *(_DWORD *)(a1 + 216);
  if (v4 == 1)
  {
    *(unsigned char *)(a2 + 1) = 0;
    uint64_t v8 = a1 + 8;
    LOWORD(v12) = a3;
    long long v9 = *(_OWORD *)(a2 + 16);
    long long v13 = *(_OWORD *)a2;
    long long v14 = v9;
    long long v15 = *(_OWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,NetworkDiagDataType>>(a1 + 8, (unsigned __int16 *)&v12, (uint64_t)&v12);
    NetworkDiagnosticsLogger::output_data_to_file(*(void **)(a1 + 208), a3, a2, v3, (void *)(a1 + 88), (void *)(a1 + 128), (void *)(a1 + 168));
    int v12 = &v16;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v8, &v16, (uint64_t)&std::piecewise_construct, &v12)+ 25) = 1;
    if (*(void *)(a1 + 224) == *(void *)(a1 + 232))
    {
      if (*(void *)(a1 + 152) || *(void *)(a1 + 192)) {
        NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_children((NetworkDiagnosticsReqTransmitReceive *)a1);
      }
      else {
        *(_WORD *)(a1 + 248) = 257;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 216) = 2;
      NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_routers((NetworkDiagnosticsReqTransmitReceive *)a1);
      *(void *)(a1 + 232) = *(void *)(a1 + 224);
    }
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_self();
    }
  }
  return v4 == 1;
}

BOOL NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_routers(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  unsigned __int16 v15 = a3;
  uint64_t v3 = (_DWORD *)(a1 + 216);
  int v4 = *(_DWORD *)(a1 + 216);
  if (v4 == 2)
  {
    *(unsigned char *)(a2 + 1) = 0;
    uint64_t v7 = a1 + 8;
    unsigned __int16 v16 = &v15;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1 + 8, &v15, (uint64_t)&std::piecewise_construct, &v16);
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v8 + 28) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v8 + 20) = v10;
    *(_OWORD *)(v8 + 12) = v9;
    NetworkDiagnosticsLogger::output_data_to_file(*(void **)(a1 + 208), v15, a2, v3, (void *)(a1 + 88), (void *)(a1 + 128), (void *)(a1 + 168));
    unsigned __int16 v16 = &v15;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v7, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 25) = 1;
    unint64_t v11 = *(uint64_t **)(a1 + 24);
    if (!v11) {
      goto LABEL_6;
    }
    char v12 = 1;
    do
    {
      v12 &= *((unsigned char *)v11 + 25) != 0;
      unint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
    if (v12)
    {
LABEL_6:
      *(unsigned char *)(a1 + 248) = 1;
      NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_children((NetworkDiagnosticsReqTransmitReceive *)a1);
    }
  }
  else
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_routers();
    }
  }
  return v4 == 2;
}

BOOL NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_children(uint64_t a1, uint64_t a2, unsigned __int16 a3, unsigned char *a4)
{
  unsigned __int16 v19 = a3;
  int v4 = (_DWORD *)(a1 + 216);
  int v5 = *(_DWORD *)(a1 + 216);
  if (v5 == 3)
  {
    *(unsigned char *)(a2 + 1) = 0;
    uint64_t v9 = a1 + 48;
    *(void *)long long buf = &v19;
    long long v10 = std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1 + 48, &v19, (uint64_t)&std::piecewise_construct, (unsigned __int16 **)buf);
    long long v11 = *(_OWORD *)a2;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v10 + 28) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v10 + 20) = v12;
    *(_OWORD *)(v10 + 12) = v11;
    NetworkDiagnosticsLogger::output_data_to_file(*(void **)(a1 + 208), v19, a2, v4, (void *)(a1 + 88), (void *)(a1 + 128), (void *)(a1 + 168));
    *(void *)long long buf = &v19;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v9, &v19, (uint64_t)&std::piecewise_construct, (unsigned __int16 **)buf)+ 25) = 1;
    *a4 = 1;
    long long v13 = *(uint64_t **)(a1 + 64);
    if (!v13) {
      goto LABEL_10;
    }
    int v14 = 1;
    do
    {
      if (!*((unsigned char *)v13 + 25))
      {
        logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          int v16 = *((unsigned __int16 *)v13 + 8);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "process_diag_rsp_from_children";
          __int16 v21 = 1024;
          int v22 = v16;
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM: %s Still waiting for diag rsp from Child node Rloc16=0x%x ", buf, 0x12u);
        }
        int v14 = 0;
        *a4 = 0;
      }
      long long v13 = (uint64_t *)*v13;
    }
    while (v13);
    if (v14) {
LABEL_10:
    }
      *(unsigned char *)(a1 + 249) = 1;
  }
  else
  {
    uint64_t v17 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_children();
    }
  }
  return v5 == 3;
}

BOOL NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response(NetworkDiagnosticsReqTransmitReceive *this, unsigned __int8 *a2, unsigned int a3)
{
  memset(v29, 0, sizeof(v29));
  unsigned __int16 v28 = 0;
  char v27 = 0;
  BOOL v4 = NetworkDiagnosticsReqTransmitReceive::parse_rsp_tlvs((uint64_t)this, (uint64_t)a2, a3, v29, &v28, &v27);
  BOOL result = 0;
  if (v4)
  {
    if (v27)
    {
      int v6 = *((_DWORD *)this + 54);
      switch(v6)
      {
        case 3:
          if (!NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_children((uint64_t)this, (uint64_t)v29, v28, &v26))
          {
            logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response();
            return 0;
          }
          break;
        case 2:
          if (!NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_routers((uint64_t)this, (uint64_t)v29, v28))
          {
            uint64_t v25 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response();
            return 0;
          }
          break;
        case 1:
          if (!NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_self((uint64_t)this, (uint64_t)v29, v28))
          {
            uint64_t v7 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
            NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response(v7, v8, v9, v10, v11, v12, v13, v14);
            return 0;
          }
          break;
        default:
          uint64_t v24 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
          BOOL result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response();
          return 0;
      }
      return 1;
    }
    unsigned __int16 v15 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response(v15, v16, v17, v18, v19, v20, v21, v22);
    return 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::clear(void *result)
{
  if (result[3])
  {
    int v1 = result;
    BOOL result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        BOOL result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Ctr_send_diagnostics_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(36 * a2);
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (unsigned __int16 *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[8] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(unsigned __int16 **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = (unsigned __int16 *)operator new(0x48uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  v11[8] = **a4;
  *(_OWORD *)(v11 + 28) = 0u;
  *(_OWORD *)(v11 + 20) = 0u;
  *(_OWORD *)(v11 + 12) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *(void *)uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_100227AE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,NetworkDiagDataType>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (unsigned __int16 *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (v10[8] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(unsigned __int16 **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = (unsigned __int16 *)operator new(0x48uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  char v10[8] = *(_WORD *)a3;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v10 + 20) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v10 + 28) = *(_OWORD *)(a3 + 40);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *(void *)uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_100227F9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_6(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get(char *a1, void *a2, os_log_t log)
{
  if (*a1 >= 0) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = (void *)*a2;
  }
  int v4 = 136315138;
  unint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: Bad destination IP address passed  %s", (uint8_t *)&v4, 0xCu);
}

void NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_self_ncp(uint64_t *a1, uint64_t a2, os_log_t log)
{
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = (uint64_t *)*a1;
  }
  int v4 = (void *)(*(void *)a2 + 6688);
  if (*(char *)(*(void *)a2 + 6711) < 0) {
    int v4 = (void *)*v4;
  }
  int v5 = 136315650;
  unint64_t v6 = "send_networkdiagnostics_get_to_self_ncp";
  __int16 v7 = 2080;
  uint8x8_t v8 = v3;
  __int16 v9 = 2080;
  uint64_t v10 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: %s ERROR Cannot send network self dest =%s MLPrefix=%s ", (uint8_t *)&v5, 0x20u);
}

void NetworkDiagnosticsReqTransmitReceive::parse_rsp_tlvs(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_self()
{
  OUTLINED_FUNCTION_3_6(__stack_chk_guard);
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_1_1((void *)&_mh_execute_header, v0, v1, "TDM: %s Error Invalid state(%d) to process diag rsp from self  ", v2, v3, v4, v5, 2u);
}

void NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_routers()
{
  OUTLINED_FUNCTION_3_6(__stack_chk_guard);
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_1_1((void *)&_mh_execute_header, v0, v1, "TDM: %s Error Invalid state(%d) to process diag rsp from self  ", v2, v3, v4, v5, 2u);
}

void NetworkDiagnosticsReqTransmitReceive::process_diag_rsp_from_children()
{
  OUTLINED_FUNCTION_3_6(__stack_chk_guard);
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_1_1((void *)&_mh_execute_header, v0, v1, "TDM: %s Error Invalid state(%d) to process diag rsp from children ", v2, v3, v4, v5, 2u);
}

void NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_4_0((void *)&_mh_execute_header, a1, a3, "TDM: %s Error Processing diag data rsp from self  ", a5, a6, a7, a8, 2u);
}

void NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response()
{
  OUTLINED_FUNCTION_3_6(__stack_chk_guard);
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_1_1((void *)&_mh_execute_header, v0, v1, "TDM: %s Error Cannot process diag rsp tlv invalid state=%d  ", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_1_1((void *)&_mh_execute_header, v0, v1, "TDM: %s Error Processing diag data rsp from routers rloc16=0x%x  ", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_1_1((void *)&_mh_execute_header, v0, v1, "TDM: %s Error Processing diag data rsp from child rloc16=0x%x  ", v2, v3, v4, v5, 2u);
}

uint64_t remove_old_files(void)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "/var/mobile/Library/Logs/CrashReporter/CoreThread/topology/");
  uint64_t v10 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v11;
  }
  boost::filesystem::directory_iterator::directory_iterator((dirent **)&v9, &__p, 0, v0, v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (!boost::filesystem::directory_iterator::equal((uint64_t *)&v9, (uint64_t *)&v10))
  {
    uint64_t v2 = boost::filesystem::directory_iterator::dereference((boost::filesystem::directory_iterator *)&v9);
    if (*(char *)(v2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
    }
    else {
      std::string __p = *(std::string *)v2;
    }
    time_t v4 = boost::filesystem::detail::last_write_time((boost::filesystem::detail *)&__p, 0, v3);
    if (v4 != -1)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::from_time_t(v4).__d_.__rep_;
      if (std::chrono::system_clock::now().__d_.__rep_ - rep >= 18001000000) {
        boost::filesystem::detail::remove_all((boost::filesystem::detail *)&__p, 0, v5);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    boost::filesystem::detail::directory_iterator_increment((dirent **)&v9, 0, v5);
  }
  boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v9);
  boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(&v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_10022867C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, boost::filesystem::detail::dir_itr_imp *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t create_new_tdm_log_folder(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc((Class)NSString) initWithFormat:@"%@", @"/var/mobile/Library/Logs/CrashReporter/CoreThread/topology"];
  uint64_t v4 = +[NSFileManager defaultManager];
  uint64_t v5 = (void *)fileManager;
  fileManager = v4;

  unsigned __int8 v13 = 0;
  unsigned __int8 v6 = [(id)fileManager fileExistsAtPath:v3 isDirectory:&v13];
  if (v13)
  {
    char v7 = v6;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      create_new_tdm_log_folder(v7, &v13);
    }
    goto LABEL_8;
  }
  id v12 = 0;
  [(id)fileManager createDirectoryAtPath:v3 withIntermediateDirectories:1 attributes:0 error:&v12];
  id v8 = v12;
  if (!v8)
  {
LABEL_8:
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    std::string::assign((std::string *)a2, (const std::string::value_type *)[v3 cStringUsingEncoding:4]);
    uint64_t v10 = 1;
    goto LABEL_12;
  }
  __int16 v9 = v8;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v15 = @"/var/mobile/Library/Logs/CrashReporter/CoreThread/topology";
    __int16 v16 = 2112;
    size_t v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "error creating directory \"%@\": %@", buf, 0x16u);
  }

  uint64_t v10 = 0;
LABEL_12:

  return v10;
}

void sub_1002288B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

dirent **boost::filesystem::directory_iterator::directory_iterator(dirent **a1, std::string *a2, const boost::filesystem::path *a3, uint64_t a4, boost::system::error_code *a5)
{
  *a1 = 0;
  boost::filesystem::detail::directory_iterator_construct(a1, a2, a3, 0, a5);
  return a1;
}

void sub_100228904(_Unwind_Exception *a1)
{
  boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::~intrusive_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::directory_iterator::dereference(boost::filesystem::directory_iterator *this)
{
  if (!*(void *)this
    || !*(void *)(boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::operator->((uint64_t *)this) + 48))
  {
    boost::filesystem::directory_iterator::dereference();
  }
  return boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::operator->((uint64_t *)this) + 8;
}

uint64_t boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::operator->(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

BOOL boost::filesystem::directory_iterator::equal(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a1 == *a2) {
    return 1;
  }
  if (*a1)
  {
    if (*(void *)(boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::operator->(a1) + 48)) {
      return 0;
    }
    uint64_t v2 = *a2;
  }
  return !v2 || *(void *)(boost::intrusive_ptr<boost::filesystem::detail::dir_itr_imp>::operator->(a2) + 48) == 0;
}

void create_new_tdm_log_folder(char a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  v3[0] = 67109376;
  v3[1] = a1 & 1;
  __int16 v4 = 1024;
  int v5 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Directory Already exists.Cannot create, isFile: %d, isDir: %d", (uint8_t *)v3, 0xEu);
}

void boost::filesystem::directory_iterator::dereference()
{
}

void NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig(NetworkDiagnosticsPendingConfig *this)
{
  *(void *)((char *)this + 20) = 0xE1A0000000FLL;
  *(_WORD *)((char *)this + 1) = 257;
  *((unsigned char *)this + 3) = 1;
  *(_OWORD *)((char *)this + 4) = xmmword_1003F6D30;
  atomic_store(0, (unsigned __int8 *)this);
}

{
  *(void *)((char *)this + 20) = 0xE1A0000000FLL;
  *(_WORD *)((char *)this + 1) = 257;
  *((unsigned char *)this + 3) = 1;
  *(_OWORD *)((char *)this + 4) = xmmword_1003F6D30;
  atomic_store(0, (unsigned __int8 *)this);
}

void NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig(NetworkDiagnosticsPendingConfig *this, const NetworkDiagnosticsPendingConfig *a2)
{
  *(void *)((char *)this + 20) = *(void *)((char *)a2 + 20);
  *(_WORD *)((char *)this + 1) = *(_WORD *)((char *)a2 + 1);
  *((unsigned char *)this + 3) = *((unsigned char *)a2 + 3);
  *(_OWORD *)((char *)this + 4) = *(_OWORD *)((char *)a2 + 4);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)a2);
  atomic_store(v2 & 1, (unsigned __int8 *)this);
}

{
  unsigned __int8 v2;

  *(void *)((char *)this + 20) = *(void *)((char *)a2 + 20);
  *(_WORD *)((char *)this + 1) = *(_WORD *)((char *)a2 + 1);
  *((unsigned char *)this + 3) = *((unsigned char *)a2 + 3);
  *(_OWORD *)((char *)this + 4) = *(_OWORD *)((char *)a2 + 4);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)a2);
  atomic_store(v2 & 1, (unsigned __int8 *)this);
}

__n128 NetworkDiagnosticsPendingConfig::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  __n128 result = *(__n128 *)(a2 + 4);
  *(__n128 *)(a1 + 4) = result;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a2);
  atomic_store(v3 & 1, (unsigned __int8 *)a1);
  return result;
}

void NetworkDiagnosticsConfigDb::NetworkDiagnosticsConfigDb(NetworkDiagnosticsConfigDb *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 45) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  NetworkDiagnosticsLogFileDescriptors::NetworkDiagnosticsLogFileDescriptors((NetworkDiagnosticsConfigDb *)((char *)this + 368));
  *(_OWORD *)((char *)this + 6616) = 0u;
  *((void *)this + 829) = 0;
  *(_OWORD *)((char *)this + 6664) = 0u;
  *(_OWORD *)((char *)this + 6680) = 0u;
  *(_OWORD *)((char *)this + 6696) = 0u;
  *(_OWORD *)((char *)this + 6712) = 0u;
  *(_OWORD *)((char *)this + 6721) = 0u;
  *((_DWORD *)this + 1685) = 2;
  *((unsigned char *)this + 6744) = 1;
  *((void *)this + 5) = 0x200000E1ALL;
  *((_WORD *)this + 24) = 257;
  *((unsigned char *)this + 50) = 1;
  *(_OWORD *)((char *)this + 24) = xmmword_1003F6D40;
}

void sub_100228CA0(_Unwind_Exception *a1)
{
  NetworkDiagnosticsLogFileNames::~NetworkDiagnosticsLogFileNames(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t NetworkDiagnosticsConfigDb::update(uint64_t a1, uint64_t a2)
{
  *(int8x16_t *)(a1 + 24) = vextq_s8(*(int8x16_t *)(a2 + 8), *(int8x16_t *)(a2 + 8), 8uLL);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 3);
  if (!*(unsigned char *)(a1 + 6736))
  {
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 4);
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 2);
  }
  return 1;
}

void NetworkDiagnosticsConfigDb::updateNCPProperties(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, __int16 a5, uint64_t a6, __int16 a7, __int16 a8, int a9)
{
  __int16 v16 = (void *)(a1 + 6688);
  std::string::operator=((std::string *)(a1 + 6688), a2);
  size_t v17 = (void *)(a1 + 6712);
  std::string::operator=((std::string *)(a1 + 6712), a3);
  uint64_t v18 = (void *)(a1 + 6664);
  std::string::operator=((std::string *)(a1 + 6664), a4);
  *(_WORD *)(a1 + 6656) = a5;
  *(void *)(a1 + 6648) = a6;
  *(_WORD *)(a1 + 6658) = a7;
  *(_WORD *)(a1 + 6640) = a8;
  *(_DWORD *)(a1 + 6660) = a9;
  logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 6711) < 0) {
      __int16 v16 = (void *)*v16;
    }
    if (*(char *)(a1 + 6687) < 0) {
      uint64_t v18 = (void *)*v18;
    }
    if (*(char *)(a1 + 6735) < 0) {
      size_t v17 = (void *)*v17;
    }
    int v20 = *(unsigned __int16 *)(a1 + 6640);
    int v21 = *(unsigned __int16 *)(a1 + 6656);
    int v22 = *(unsigned __int16 *)(a1 + 6658);
    uint64_t v23 = *(void *)(a1 + 6648);
    int v24 = 136316930;
    uint64_t v25 = v16;
    __int16 v26 = 2080;
    char v27 = v18;
    __int16 v28 = 2080;
    long long v29 = v17;
    __int16 v30 = 1024;
    int v31 = v20;
    __int16 v32 = 1024;
    int v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 2048;
    uint64_t v37 = v23;
    __int16 v38 = 1024;
    int v39 = a9;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM: NetworkDiagnosticsConfigDb::updateNCPProperties mLPrefix=%s nwName=%s mLAddr=%s leaderRouterId=%d panId=%d channel=%d xPanId=%llu partitionId=%d", (uint8_t *)&v24, 0x42u);
  }
}

BOOL NetworkDiagnosticsConfigDb::initialize(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    int v5 = (const std::string::value_type *)a2;
  }
  else {
    int v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  char v7 = std::string::append(&v153, v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_network_diagnostics.txt");
  if ((v152 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v10 = v152;
  }
  else {
    std::string::size_type v10 = v151;
  }
  std::string v11 = std::string::append(&v154, p_p, v10);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  v155[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v14 = v155[0];
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 71) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 79) = v13;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    __int16 v16 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v16 = *(const std::string::value_type **)a2;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a2 + 8);
  }
  uint64_t v18 = std::string::append(&v153, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_shell_output.txt");
  if ((v152 & 0x80u) == 0) {
    int v20 = (const std::string::value_type *)&__p;
  }
  else {
    int v20 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v21 = v152;
  }
  else {
    std::string::size_type v21 = v151;
  }
  int v22 = std::string::append(&v154, v20, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v155[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v25 = v155[0];
  *(void *)(a1 + 80) = v23;
  *(void *)(a1 + 88) = v25;
  *(void *)(a1 + 95) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 103) = v24;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v26 = *(char *)(a2 + 23);
  if (v26 >= 0) {
    char v27 = (const std::string::value_type *)a2;
  }
  else {
    char v27 = *(const std::string::value_type **)a2;
  }
  if (v26 >= 0) {
    std::string::size_type v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v28 = *(void *)(a2 + 8);
  }
  long long v29 = std::string::append(&v153, v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_legend.svg");
  if ((v152 & 0x80u) == 0) {
    int v31 = (const std::string::value_type *)&__p;
  }
  else {
    int v31 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v32 = v152;
  }
  else {
    std::string::size_type v32 = v151;
  }
  int v33 = std::string::append(&v154, v31, v32);
  std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
  v155[0] = v33->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
  char v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v36 = v155[0];
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v36;
  *(void *)(a1 + 119) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 127) = v35;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v37 = *(char *)(a2 + 23);
  if (v37 >= 0) {
    __int16 v38 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v38 = *(const std::string::value_type **)a2;
  }
  if (v37 >= 0) {
    std::string::size_type v39 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v39 = *(void *)(a2 + 8);
  }
  long long v40 = std::string::append(&v153, v38, v39);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_counters.txt");
  if ((v152 & 0x80u) == 0) {
    uint64_t v42 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v42 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v43 = v152;
  }
  else {
    std::string::size_type v43 = v151;
  }
  uint64_t v44 = std::string::append(&v154, v42, v43);
  std::string::size_type v45 = v44->__r_.__value_.__r.__words[0];
  v155[0] = v44->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
  char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  uint64_t v47 = v155[0];
  *(void *)(a1 + 128) = v45;
  *(void *)(a1 + 136) = v47;
  *(void *)(a1 + 143) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 151) = v46;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v48 = *(char *)(a2 + 23);
  if (v48 >= 0) {
    uint64_t v49 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v49 = *(const std::string::value_type **)a2;
  }
  if (v48 >= 0) {
    std::string::size_type v50 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v50 = *(void *)(a2 + 8);
  }
  uint64_t v51 = std::string::append(&v153, v49, v50);
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_about.txt");
  if ((v152 & 0x80u) == 0) {
    uint64_t v53 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v53 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v54 = v152;
  }
  else {
    std::string::size_type v54 = v151;
  }
  uint64_t v55 = std::string::append(&v154, v53, v54);
  std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
  v155[0] = v55->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
  char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  uint64_t v58 = v155[0];
  *(void *)(a1 + 152) = v56;
  *(void *)(a1 + 160) = v58;
  *(void *)(a1 + 167) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 175) = v57;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v59 = *(char *)(a2 + 23);
  if (v59 >= 0) {
    int v60 = (const std::string::value_type *)a2;
  }
  else {
    int v60 = *(const std::string::value_type **)a2;
  }
  if (v59 >= 0) {
    std::string::size_type v61 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v61 = *(void *)(a2 + 8);
  }
  BOOL v62 = std::string::append(&v153, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_services_discovered.txt");
  if ((v152 & 0x80u) == 0) {
    uint64_t v64 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v64 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v65 = v152;
  }
  else {
    std::string::size_type v65 = v151;
  }
  int v66 = std::string::append(&v154, v64, v65);
  std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
  v155[0] = v66->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
  char v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  uint64_t v69 = v155[0];
  *(void *)(a1 + 176) = v67;
  *(void *)(a1 + 184) = v69;
  *(void *)(a1 + 191) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 199) = v68;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v70 = *(char *)(a2 + 23);
  if (v70 >= 0) {
    unsigned __int8 v71 = (const std::string::value_type *)a2;
  }
  else {
    unsigned __int8 v71 = *(const std::string::value_type **)a2;
  }
  if (v70 >= 0) {
    std::string::size_type v72 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v72 = *(void *)(a2 + 8);
  }
  int v73 = std::string::append(&v153, v71, v72);
  long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_services_resolved.txt");
  if ((v152 & 0x80u) == 0) {
    unsigned __int8 v75 = (const std::string::value_type *)&__p;
  }
  else {
    unsigned __int8 v75 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v76 = v152;
  }
  else {
    std::string::size_type v76 = v151;
  }
  id v77 = std::string::append(&v154, v75, v76);
  std::string::size_type v78 = v77->__r_.__value_.__r.__words[0];
  v155[0] = v77->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v77->__r_.__value_.__r.__words[1] + 7);
  char v79 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  uint64_t v80 = v155[0];
  *(void *)(a1 + 200) = v78;
  *(void *)(a1 + 208) = v80;
  *(void *)(a1 + 215) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 223) = v79;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v81 = *(char *)(a2 + 23);
  if (v81 >= 0) {
    uint64_t v82 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v82 = *(const std::string::value_type **)a2;
  }
  if (v81 >= 0) {
    std::string::size_type v83 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v83 = *(void *)(a2 + 8);
  }
  unsigned int v84 = std::string::append(&v153, v82, v83);
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_cache_table.txt");
  if ((v152 & 0x80u) == 0) {
    int v86 = (const std::string::value_type *)&__p;
  }
  else {
    int v86 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v87 = v152;
  }
  else {
    std::string::size_type v87 = v151;
  }
  id v88 = std::string::append(&v154, v86, v87);
  std::string::size_type v89 = v88->__r_.__value_.__r.__words[0];
  v155[0] = v88->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v88->__r_.__value_.__r.__words[1] + 7);
  char v90 = HIBYTE(v88->__r_.__value_.__r.__words[2]);
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  uint64_t v91 = v155[0];
  *(void *)(a1 + 224) = v89;
  *(void *)(a1 + 232) = v91;
  *(void *)(a1 + 239) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 247) = v90;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v92 = *(char *)(a2 + 23);
  if (v92 >= 0) {
    unint64_t v93 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v93 = *(const std::string::value_type **)a2;
  }
  if (v92 >= 0) {
    std::string::size_type v94 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v94 = *(void *)(a2 + 8);
  }
  unsigned int v95 = std::string::append(&v153, v93, v94);
  long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_fed_info.txt");
  if ((v152 & 0x80u) == 0) {
    int v97 = (const std::string::value_type *)&__p;
  }
  else {
    int v97 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v98 = v152;
  }
  else {
    std::string::size_type v98 = v151;
  }
  uint64_t v99 = std::string::append(&v154, v97, v98);
  std::string::size_type v100 = v99->__r_.__value_.__r.__words[0];
  v155[0] = v99->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1] + 7);
  char v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v102 = v155[0];
  *(void *)(a1 + 248) = v100;
  *(void *)(a1 + 256) = v102;
  *(void *)(a1 + 263) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 271) = v101;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v103 = *(char *)(a2 + 23);
  if (v103 >= 0) {
    BOOL v104 = (const std::string::value_type *)a2;
  }
  else {
    BOOL v104 = *(const std::string::value_type **)a2;
  }
  if (v103 >= 0) {
    std::string::size_type v105 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v105 = *(void *)(a2 + 8);
  }
  id v106 = std::string::append(&v153, v104, v105);
  long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_sed_info.txt");
  if ((v152 & 0x80u) == 0) {
    uint64_t v108 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v108 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v109 = v152;
  }
  else {
    std::string::size_type v109 = v151;
  }
  uint64_t v110 = std::string::append(&v154, v108, v109);
  std::string::size_type v111 = v110->__r_.__value_.__r.__words[0];
  v155[0] = v110->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v110->__r_.__value_.__r.__words[1] + 7);
  char v112 = HIBYTE(v110->__r_.__value_.__r.__words[2]);
  v110->__r_.__value_.__l.__size_ = 0;
  v110->__r_.__value_.__r.__words[2] = 0;
  v110->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  uint64_t v113 = v155[0];
  *(void *)(a1 + 272) = v111;
  *(void *)(a1 + 280) = v113;
  *(void *)(a1 + 287) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 295) = v112;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v114 = *(char *)(a2 + 23);
  if (v114 >= 0) {
    BOOL v115 = (const std::string::value_type *)a2;
  }
  else {
    BOOL v115 = *(const std::string::value_type **)a2;
  }
  if (v114 >= 0) {
    std::string::size_type v116 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v116 = *(void *)(a2 + 8);
  }
  uint64_t v117 = std::string::append(&v153, v115, v116);
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_router_info.txt");
  if ((v152 & 0x80u) == 0) {
    unsigned int v119 = (const std::string::value_type *)&__p;
  }
  else {
    unsigned int v119 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v120 = v152;
  }
  else {
    std::string::size_type v120 = v151;
  }
  int v121 = std::string::append(&v154, v119, v120);
  std::string::size_type v122 = v121->__r_.__value_.__r.__words[0];
  v155[0] = v121->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v121->__r_.__value_.__r.__words[1] + 7);
  char v123 = HIBYTE(v121->__r_.__value_.__r.__words[2]);
  v121->__r_.__value_.__l.__size_ = 0;
  v121->__r_.__value_.__r.__words[2] = 0;
  v121->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  uint64_t v124 = v155[0];
  *(void *)(a1 + 296) = v122;
  *(void *)(a1 + 304) = v124;
  *(void *)(a1 + 311) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 319) = v123;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v125 = *(char *)(a2 + 23);
  if (v125 >= 0) {
    int v126 = (const std::string::value_type *)a2;
  }
  else {
    int v126 = *(const std::string::value_type **)a2;
  }
  if (v125 >= 0) {
    std::string::size_type v127 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v127 = *(void *)(a2 + 8);
  }
  char v128 = std::string::append(&v153, v126, v127);
  long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_network_diagnostics.dot");
  if ((v152 & 0x80u) == 0) {
    uint64_t v130 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v130 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v131 = v152;
  }
  else {
    std::string::size_type v131 = v151;
  }
  uint64_t v132 = std::string::append(&v154, v130, v131);
  std::string::size_type v133 = v132->__r_.__value_.__r.__words[0];
  v155[0] = v132->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1] + 7);
  char v134 = HIBYTE(v132->__r_.__value_.__r.__words[2]);
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  uint64_t v135 = v155[0];
  *(void *)(a1 + 320) = v133;
  *(void *)(a1 + 328) = v135;
  *(void *)(a1 + 335) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 343) = v134;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "/");
  int v136 = *(char *)(a2 + 23);
  if (v136 >= 0) {
    int v137 = (const std::string::value_type *)a2;
  }
  else {
    int v137 = *(const std::string::value_type **)a2;
  }
  if (v136 >= 0) {
    std::string::size_type v138 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v138 = *(void *)(a2 + 8);
  }
  unsigned int v139 = std::string::append(&v153, v137, v138);
  long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v140;
  v139->__r_.__value_.__l.__size_ = 0;
  v139->__r_.__value_.__r.__words[2] = 0;
  v139->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_nwdiag_legend.dot");
  if ((v152 & 0x80u) == 0) {
    uint64_t v141 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v141 = (const std::string::value_type *)__p;
  }
  if ((v152 & 0x80u) == 0) {
    std::string::size_type v142 = v152;
  }
  else {
    std::string::size_type v142 = v151;
  }
  uint64_t v143 = std::string::append(&v154, v141, v142);
  std::string::size_type v144 = v143->__r_.__value_.__r.__words[0];
  v155[0] = v143->__r_.__value_.__l.__size_;
  *(void *)((char *)v155 + 7) = *(std::string::size_type *)((char *)&v143->__r_.__value_.__r.__words[1] + 7);
  char v145 = HIBYTE(v143->__r_.__value_.__r.__words[2]);
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  uint64_t v146 = v155[0];
  *(void *)(a1 + 344) = v144;
  *(void *)(a1 + 352) = v146;
  *(void *)(a1 + 359) = *(void *)((char *)v155 + 7);
  *(unsigned char *)(a1 + 367) = v145;
  if ((char)v152 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  BOOL v147 = NetworkDiagnosticsConfigDb::openFiles(a1, a2);
  if (!v147)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsConfigDb::initialize(logging_obg);
    }
  }
  return v147;
}

void sub_100229B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL NetworkDiagnosticsConfigDb::openFiles(uint64_t a1, uint64_t a2)
{
  int v4 = (const std::string::value_type *)(a1 + 6616);
  if (create_new_tdm_log_folder(a2, a1 + 6616))
  {
    remove_old_files();
    int v5 = *(char *)(a1 + 6639);
    if (v5 >= 0) {
      std::string::size_type v6 = v4;
    }
    else {
      std::string::size_type v6 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v7 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 56), 0, v6, v7);
    int v8 = *(char *)(a1 + 6639);
    if (v8 >= 0) {
      __int16 v9 = v4;
    }
    else {
      __int16 v9 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v10 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 80), 0, v9, v10);
    int v11 = *(char *)(a1 + 6639);
    if (v11 >= 0) {
      std::string::size_type v12 = v4;
    }
    else {
      std::string::size_type v12 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v13 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 104), 0, v12, v13);
    int v14 = *(char *)(a1 + 6639);
    if (v14 >= 0) {
      int v15 = v4;
    }
    else {
      int v15 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v16 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 128), 0, v15, v16);
    int v17 = *(char *)(a1 + 6639);
    if (v17 >= 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v19 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 152), 0, v18, v19);
    int v20 = *(char *)(a1 + 6639);
    if (v20 >= 0) {
      std::string::size_type v21 = v4;
    }
    else {
      std::string::size_type v21 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v22 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 176), 0, v21, v22);
    int v23 = *(char *)(a1 + 6639);
    if (v23 >= 0) {
      char v24 = v4;
    }
    else {
      char v24 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v25 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 200), 0, v24, v25);
    int v26 = *(char *)(a1 + 6639);
    if (v26 >= 0) {
      char v27 = v4;
    }
    else {
      char v27 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v28 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 224), 0, v27, v28);
    int v29 = *(char *)(a1 + 6639);
    if (v29 >= 0) {
      long long v30 = v4;
    }
    else {
      long long v30 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v29 >= 0) {
      std::string::size_type v31 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v31 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 248), 0, v30, v31);
    int v32 = *(char *)(a1 + 6639);
    if (v32 >= 0) {
      int v33 = v4;
    }
    else {
      int v33 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v32 >= 0) {
      std::string::size_type v34 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v34 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 272), 0, v33, v34);
    int v35 = *(char *)(a1 + 6639);
    if (v35 >= 0) {
      uint64_t v36 = v4;
    }
    else {
      uint64_t v36 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v35 >= 0) {
      std::string::size_type v37 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v37 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 296), 0, v36, v37);
    int v38 = *(char *)(a1 + 6639);
    if (v38 >= 0) {
      std::string::size_type v39 = v4;
    }
    else {
      std::string::size_type v39 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v38 >= 0) {
      std::string::size_type v40 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v40 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 320), 0, v39, v40);
    int v41 = *(char *)(a1 + 6639);
    if (v41 >= 0) {
      uint64_t v42 = v4;
    }
    else {
      uint64_t v42 = *(const std::string::value_type **)(a1 + 6616);
    }
    if (v41 >= 0) {
      std::string::size_type v43 = *(unsigned __int8 *)(a1 + 6639);
    }
    else {
      std::string::size_type v43 = *(void *)(a1 + 6624);
    }
    std::string::insert((std::string *)(a1 + 344), 0, v42, v43);
    uint64_t v44 = (void *)(a1 + 368);
    std::ofstream::open();
    if ((*((unsigned char *)v44 + *(void *)(*v44 - 24) + 32) & 5) == 0)
    {
      int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 368), (uint64_t)"Current Time:", 13);
      int v49 = *(char *)(a2 + 23);
      if (v49 >= 0) {
        uint64_t v50 = a2;
      }
      else {
        uint64_t v50 = *(void *)a2;
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v51 = *(void *)(a2 + 8);
      }
      long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
      uint64_t v53 = std::locale::use_facet(&v85, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
      std::string::size_type v54 = std::locale::use_facet(&v85, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      std::ofstream::open();
      if ((*(unsigned char *)(a1 + 5480 + *(void *)(*(void *)(a1 + 5480) - 24) + 32) & 5) != 0)
      {
        logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
        BOOL result = os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
      }
      else
      {
        std::ofstream::open();
        if ((*(unsigned char *)(a1 + 6048 + *(void *)(*(void *)(a1 + 6048) - 24) + 32) & 5) != 0)
        {
          std::string::size_type v56 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
          BOOL result = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
        }
        else
        {
          std::ofstream::open();
          if ((*(unsigned char *)(a1 + 3208 + *(void *)(*(void *)(a1 + 3208) - 24) + 32) & 5) != 0)
          {
            char v57 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
            BOOL result = os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
            if (!result) {
              return result;
            }
          }
          else
          {
            uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 3208), (uint64_t)"Current Time:", 13);
            int v59 = *(char *)(a2 + 23);
            if (v59 >= 0) {
              uint64_t v60 = a2;
            }
            else {
              uint64_t v60 = *(void *)a2;
            }
            if (v59 >= 0) {
              uint64_t v61 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v61 = *(void *)(a2 + 8);
            }
            BOOL v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v62);
            std::endl[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 3208));
            std::ofstream::open();
            if ((*(unsigned char *)(a1 + 3776 + *(void *)(*(void *)(a1 + 3776) - 24) + 32) & 5) != 0)
            {
              long long v63 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
              BOOL result = os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
              if (!result) {
                return result;
              }
            }
            else
            {
              std::ofstream::open();
              if ((*(unsigned char *)(a1 + 4344 + *(void *)(*(void *)(a1 + 4344) - 24) + 32) & 5) != 0)
              {
                uint64_t v64 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
                BOOL result = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
              }
              else
              {
                std::ofstream::open();
                if ((*(unsigned char *)(a1 + 4912 + *(void *)(*(void *)(a1 + 4912) - 24) + 32) & 5) == 0)
                {
                  int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 3776), (uint64_t)"Current Time:", 13);
                  int v67 = *(char *)(a2 + 23);
                  if (v67 >= 0) {
                    uint64_t v68 = a2;
                  }
                  else {
                    uint64_t v68 = *(void *)a2;
                  }
                  if (v67 >= 0) {
                    uint64_t v69 = *(unsigned __int8 *)(a2 + 23);
                  }
                  else {
                    uint64_t v69 = *(void *)(a2 + 8);
                  }
                  int v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v68, v69);
                  unsigned __int8 v71 = std::endl[abi:ne180100]<char,std::char_traits<char>>(v70);
                  std::endl[abi:ne180100]<char,std::char_traits<char>>(v71);
                  std::string::size_type v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 4344), (uint64_t)"Current Time:", 13);
                  int v73 = *(char *)(a2 + 23);
                  if (v73 >= 0) {
                    uint64_t v74 = a2;
                  }
                  else {
                    uint64_t v74 = *(void *)a2;
                  }
                  if (v73 >= 0) {
                    uint64_t v75 = *(unsigned __int8 *)(a2 + 23);
                  }
                  else {
                    uint64_t v75 = *(void *)(a2 + 8);
                  }
                  std::string::size_type v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
                  id v77 = std::endl[abi:ne180100]<char,std::char_traits<char>>(v76);
                  std::endl[abi:ne180100]<char,std::char_traits<char>>(v77);
                  std::string::size_type v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 4912), (uint64_t)"Current Time:", 13);
                  int v79 = *(char *)(a2 + 23);
                  if (v79 >= 0) {
                    uint64_t v80 = a2;
                  }
                  else {
                    uint64_t v80 = *(void *)a2;
                  }
                  if (v79 >= 0) {
                    uint64_t v81 = *(unsigned __int8 *)(a2 + 23);
                  }
                  else {
                    uint64_t v81 = *(void *)(a2 + 8);
                  }
                  uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v80, v81);
                  std::string::size_type v83 = std::endl[abi:ne180100]<char,std::char_traits<char>>(v82);
                  std::endl[abi:ne180100]<char,std::char_traits<char>>(v83);
                  unsigned int v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 1504), (uint64_t)"Version  : 1.1", 14);
                  std::endl[abi:ne180100]<char,std::char_traits<char>>(v84);
                  return 1;
                }
                std::string::size_type v65 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
                BOOL result = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
              }
            }
          }
        }
      }
      NetworkDiagnosticsConfigDb::openFiles();
      return 0;
    }
    std::string::size_type v45 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    BOOL result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    if (result)
    {
      NetworkDiagnosticsConfigDb::openFiles();
      return 0;
    }
  }
  else
  {
    uint64_t v47 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    BOOL result = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    if (result)
    {
      NetworkDiagnosticsConfigDb::openFiles((uint64_t *)a2, v47);
      return 0;
    }
  }
  return result;
}

void sub_10022A4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsConfigDb::closeFiles(NetworkDiagnosticsConfigDb *this)
{
  unsigned __int8 v2 = (void *)((char *)this + 368);
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 46) - 24) + 400) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 685) - 24) + 5512) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 685) - 24) + 5480), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 685) - 24) + 5512) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 756) - 24) + 6080) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 756) - 24) + 6048), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 756) - 24) + 6080) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 259) - 24) + 2104) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 259) - 24) + 2072), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 259) - 24) + 2104) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 472) - 24) + 3808) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 472) - 24) + 3776), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 472) - 24) + 3808) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 543) - 24) + 4376) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 543) - 24) + 4344), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 543) - 24) + 4376) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 614) - 24) + 4944) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 614) - 24) + 4912), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 614) - 24) + 4944) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 330) - 24) + 2672) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 330) - 24) + 2640), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 330) - 24) + 2672) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 401) - 24) + 3240) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 401) - 24) + 3208), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 401) - 24) + 3240) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 188) - 24) + 1536) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 188) - 24) + 1504), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 188) - 24) + 1536) | 4);
  }
  return 1;
}

void NetworkDiagnosticsLogFileDescriptors::NetworkDiagnosticsLogFileDescriptors(NetworkDiagnosticsLogFileDescriptors *this)
{
  *(void *)this = v3;
  uint64_t v4 = v2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = v2;
  int v5 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
  std::ios_base::init(v5, (char *)this + 8);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 71) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 568) = v4;
  std::string::size_type v6 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 71) - 24) + 568);
  std::ios_base::init(v6, (char *)this + 576);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 142) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 1136) = v4;
  std::string::size_type v7 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 142) - 24) + 1136);
  std::ios_base::init(v7, (char *)this + 1144);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 213) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 1704) = v4;
  int v8 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 213) - 24) + 1704);
  std::ios_base::init(v8, (char *)this + 1712);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 284) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 2272) = v4;
  __int16 v9 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 284) - 24) + 2272);
  std::ios_base::init(v9, (char *)this + 2280);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 355) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 2840) = v4;
  std::string::size_type v10 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 355) - 24) + 2840);
  std::ios_base::init(v10, (char *)this + 2848);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 426) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 3408) = v4;
  int v11 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 426) - 24) + 3408);
  std::ios_base::init(v11, (char *)this + 3416);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 497) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 3976) = v4;
  std::string::size_type v12 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 497) - 24) + 3976);
  std::ios_base::init(v12, (char *)this + 3984);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 568) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 4544) = v4;
  std::string::size_type v13 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 568) - 24) + 4544);
  std::ios_base::init(v13, (char *)this + 4552);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 639) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 5112) = v4;
  int v14 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 639) - 24) + 5112);
  std::ios_base::init(v14, (char *)this + 5120);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 710) = v3;
  *(void *)((char *)this + *(void *)(v3 - 24) + 5680) = v4;
  int v15 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 710) - 24) + 5680);
  std::ios_base::init(v15, (char *)this + 5688);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
}

void sub_10022B240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  std::ostream::~ostream();
  std::ios::~ios();
  std::ofstream::~ofstream(v17);
  std::ofstream::~ofstream(v16);
  std::ofstream::~ofstream(v18);
  std::ofstream::~ofstream(a10);
  std::ofstream::~ofstream(a11);
  std::ofstream::~ofstream(a12);
  std::ofstream::~ofstream(a13);
  std::ofstream::~ofstream(a14);
  std::ofstream::~ofstream(a15);
  std::ofstream::~ofstream(v15);
  _Unwind_Resume(a1);
}

void sub_10022B370()
{
}

void sub_10022B39C()
{
}

void sub_10022B3C8()
{
}

void sub_10022B3F4()
{
}

void sub_10022B420()
{
}

void sub_10022B444()
{
}

void *std::ofstream::~ofstream(void *a1)
{
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void NetworkDiagnosticsLogFileNames::~NetworkDiagnosticsLogFileNames(void **this)
{
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void OUTLINED_FUNCTION_2_8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void NetworkDiagnosticsConfigDb::initialize(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: ERR cannot open the files for debug logging", v1, 2u);
}

void NetworkDiagnosticsConfigDb::openFiles()
{
  OUTLINED_FUNCTION_2_8(__stack_chk_guard);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_6((void *)&_mh_execute_header, v0, v1, "TDM:ERR to open %s", v2);
}

void NetworkDiagnosticsConfigDb::openFiles(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "TDM:ERR to create TDM log folder currentTime: %s", (uint8_t *)&v3, 0xCu);
}

void threadDiagnosticsManager_MsgHandler(uint64_t a1, void **a2, uint64_t a3)
{
  int IsThreadFeatureEnabled = ctrUtilIsThreadFeatureEnabled();
  logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = IsThreadFeatureEnabled;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "threadDiagnosticsManager_MsgHandler - os_feature_enabled : %d", (uint8_t *)&buf, 8u);
  }
  if ((IsThreadFeatureEnabled & 1) == 0)
  {
    std::string::size_type v12 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "threadDiagnosticsManager_MsgHandler";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s: This functionality is disabled...", (uint8_t *)&buf, 0xCu);
    }
    xpc_object_t v13 = xpc_null_create();
    if (*(void *)a3) {
      int v14 = _Block_copy(*(const void **)a3);
    }
    else {
      int v14 = 0;
    }
    std::string::size_type v16 = *(NSObject **)(a3 + 8);
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120;
    int v29 = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_1;
    long long v30 = &__block_descriptor_tmp_3;
    if (v14) {
      int v17 = _Block_copy(v14);
    }
    else {
      int v17 = 0;
    }
    int v33 = 6;
    aBlock = v17;
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v16, &buf);
    xpc_release(object);
    xpc_object_t object = 0;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v14) {
      _Block_release(v14);
    }
    goto LABEL_54;
  }
  BOOL v8 = tdm_queue == 0;
  __int16 v9 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  std::string::size_type v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      threadDiagnosticsManager_MsgHandler(v10);
    }
    xpc_object_t v13 = xpc_null_create();
    if (*(void *)a3) {
      int v15 = _Block_copy(*(const void **)a3);
    }
    else {
      int v15 = 0;
    }
    std::string::size_type v21 = *(NSObject **)(a3 + 8);
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 1174405120;
    int v29 = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_1;
    long long v30 = &__block_descriptor_tmp_3;
    if (v15) {
      std::string::size_type v22 = _Block_copy(v15);
    }
    else {
      std::string::size_type v22 = 0;
    }
    int v33 = 2;
    aBlock = v22;
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    dispatch_async(v21, &buf);
    xpc_release(object);
    xpc_object_t object = 0;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
LABEL_54:
    xpc_release(v13);
    return;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "threadDiagnosticsManager_MsgHandler";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s: dispatching on msg bridge response handler ...", (uint8_t *)&buf, 0xCu);
  }
  int v11 = tdm_queue;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1174405120;
  v23[2] = ___Z35threadDiagnosticsManager_MsgHandlerNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvhS7_EEE_block_invoke;
  v23[3] = &__block_descriptor_tmp_12;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  uint64_t v18 = *a2;
  xpc_object_t v25 = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  std::string::size_type v19 = *(void **)a3;
  if (*(void *)a3) {
    std::string::size_type v19 = _Block_copy(v19);
  }
  int v20 = *(NSObject **)(a3 + 8);
  int v26 = v19;
  dispatch_object_t v27 = v20;
  if (v20) {
    dispatch_retain(v20);
  }
  dispatch_async(v11, v23);
  if (v27) {
    dispatch_release(v27);
  }
  if (v26) {
    _Block_release(v26);
  }
  xpc_release(v25);
  xpc_object_t v25 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10022BBE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___Z35threadDiagnosticsManager_MsgHandlerNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvhS7_EEE_block_invoke(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v9 = *(std::string *)(a1 + 32);
  }
  uint64_t v2 = *(void **)(a1 + 56);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  threadDiagnosticsManager_MsgHandlerBridge((const std::string::value_type *)&v9, (xpc::object *)&object, &v10);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  xpc_object_t v3 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    int v5 = _Block_copy(v4);
  }
  else {
    int v5 = 0;
  }
  std::string::size_type v6 = *(NSObject **)(a1 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_1;
  block[3] = &__block_descriptor_tmp_3;
  if (v5) {
    std::string::size_type v7 = _Block_copy(v5);
  }
  else {
    std::string::size_type v7 = 0;
  }
  int v14 = 0;
  aBlock = v7;
  xpc_object_t v13 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  dispatch_async(v6, block);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v3);
  xpc_release(v10);
}

void sub_10022BE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvhN3xpc4dictEEEclIJN6CtrXPC3__0ES2_EEEvDpT__block_invoke_1(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, void, xpc_object_t *))(v3 + 16))(v3, v1, &object);
  xpc_release(object);
}

void sub_10022BED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void threadDiagnosticsManager_MsgHandler(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "threadDiagnosticsManager_MsgHandler";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: Returning error response handler ...", (uint8_t *)&v1, 0xCu);
}

uint64_t NetworkDiagnosticsManager::getInstance(NetworkDiagnosticsManager *this)
{
  if (!NetworkDiagnosticsManager::mInstance) {
    operator new();
  }
  return NetworkDiagnosticsManager::mInstance;
}

void sub_10022C0C4()
{
}

void sub_10022C170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022C4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022D178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  xpc::dict::~dict(v28);
  _Unwind_Resume(a1);
}

void sub_10022D5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  objc_destroyWeak((id *)(v23 - 40));

  _Unwind_Resume(a1);
}

void sub_10022D770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::any_cast<nl::Data>(void *result)
{
  if (result)
  {
    int v1 = result;
    uint64_t v2 = *result;
    if (v2) {
      uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
    else {
    uint64_t v4 = (const char *)(v3[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    if (v4 == (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)
      || !strcmp(v4, (const char *)(0x80000001003F6658 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      return (void *)(*v1 + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_10022DB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022DE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  if (v17 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022E084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  if (v17 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022E308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  if (v17 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022E56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022E7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022EA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022EC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022EEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022F090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10022F3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (*(char *)(v36 - 65) < 0) {
    operator delete(*(void **)(v36 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_10022F7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_ThreadDiagnosticsManagerInstance_mm()
{
}

void NetworkDiagnosticsMdnsResolver::NetworkDiagnosticsMdnsResolver(NetworkDiagnosticsMdnsResolver *this, NetworkDiagnosticsConfigDb *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v3 = (uint64_t *)((char *)this + 8);
  *(void *)this = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  uint64_t v4 = (void (__cdecl ***)(std::ofstream *__hidden))((char *)this + 120);
  int v5 = (void (__cdecl ***)(std::ofstream *__hidden))((char *)this + 536);
  *((void *)this + 15) = v7;
  *(void (__cdecl ***)(std::ofstream *__hidden))((char *)v4 + *(void *)(v7 - 24)) = v6;
  BOOL v8 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 15) - 24) + 120);
  std::ios_base::init(v8, (char *)this + 128);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((_DWORD *)this + 28) = 0;
  *((unsigned char *)this + 688) = 1;
  uint64_t v10 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); i != v10; std::allocator<MyServiceType>::destroy[abi:ne180100]((uint64_t)this + 24, i))
    i -= 136;
  *((void *)this + 2) = v10;
  std::vector<MyServiceType>::reserve(v3, 0x64uLL);
}

void sub_10023038C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ofstream::~ofstream(v4);
  std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::~__hash_table(v2 + 32);
  std::vector<MyServiceType>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<MyServiceType>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  BOOL result = (void **)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<MyServiceType>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 136 * v6;
    std::vector<MyServiceType>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<MyServiceType>::~__split_buffer(v7);
  }
  return result;
}

void sub_100230484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MyServiceType>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void NetworkDiagnosticsMdnsResolver::~NetworkDiagnosticsMdnsResolver(NetworkDiagnosticsMdnsResolver *this)
{
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::~__hash_table((uint64_t)this + 72);
  std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::~__hash_table((uint64_t)this + 32);
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<MyServiceType>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void NetworkDiagnosticsMdnsResolver::closeFiles(NetworkDiagnosticsMdnsResolver *this)
{
  int v1 = (void *)((char *)this + 120);
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 15) - 24) + 152) & 5) == 0 && !std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)v1 + *(void *)(*v1 - 24));
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

void NetworkDiagnosticsMdnsResolver::cleanup(NetworkDiagnosticsMdnsResolver *this, BOOL a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = *((void *)this + 1);
    for (uint64_t i = *((void *)this + 2); i != v5; std::allocator<MyServiceType>::destroy[abi:ne180100]((uint64_t)this + 24, i))i -= 136;
    *((void *)this + 2) = v5;
    std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::clear((uint64_t)this + 32);
    std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::clear((uint64_t)this + 72);
    *((_DWORD *)this + 28) = 0;
  }

  NetworkDiagnosticsMdnsResolver::closeFiles(this);
}

BOOL NetworkDiagnosticsMdnsResolver::initialize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string v9 = (void *)(a1 + 120);
  uint64_t v10 = (char *)a2 + 23;
  std::ofstream::open();
  int v11 = *(_DWORD *)((unsigned char *)v9 + *(void *)(*(void *)(a1 + 120) - 24) + 32) & 5;
  if (v11)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsMdnsResolver::initialize(v10, a2, logging_obg);
    }
  }
  else
  {
    xpc_object_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Current Time:", 13);
    int v14 = *(char *)(a6 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a6;
    }
    else {
      uint64_t v15 = *(void *)a6;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a6 + 8);
    }
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
    uint64_t v18 = std::locale::use_facet(&v21, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    std::string::size_type v19 = std::locale::use_facet(&v21, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return v11 == 0;
}

void sub_1002308A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices(NetworkDiagnosticsMdnsResolver *this, CFNetServiceBrowserRef browser)
{
  if (browser)
  {
    CFNetServiceBrowserStopSearch(browser, &error);
    Current = CFRunLoopGetCurrent();
    CFNetServiceBrowserUnscheduleFromRunLoop(browser, Current, kCFRunLoopCommonModes);
    CFNetServiceBrowserInvalidate(browser);
    CFRelease(browser);
    *((void *)this + 87) = 0;
    *((unsigned char *)this + 688) = 1;
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM:NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices completed", v7, 2u);
    }
  }
  else
  {
    uint64_t v6 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices();
    }
  }
}

void NetworkDiagnosticsMdnsResolver::updatebrowsedService(uint64_t *a1, __CFNetServiceBrowser *a2, std::string *__str, uint64_t a4, uint64_t a5, char a6)
{
  int v27 = 0;
  *(_OWORD *)std::string::size_type v28 = 0u;
  *(_OWORD *)int v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)std::string::size_type v31 = 0u;
  *(_OWORD *)int v32 = 0u;
  long long v33 = 0u;
  memset(__p, 0, sizeof(__p));
  __int16 v35 = -1;
  std::string::operator=((std::string *)v31, __str);
  std::string::operator=((std::string *)&v29[1], (const std::string *)a4);
  std::string::operator=((std::string *)v28, (const std::string *)a5);
  unint64_t v12 = a1[2];
  if (v12 >= a1[3])
  {
    uint64_t v13 = std::vector<MyServiceType>::__push_back_slow_path<MyServiceType const&>(a1 + 1, (const MyServiceType *)&v27);
  }
  else
  {
    MyServiceType::MyServiceType((MyServiceType *)a1[2], (const MyServiceType *)&v27);
    uint64_t v13 = v12 + 136;
    a1[2] = v12 + 136;
  }
  a1[2] = v13;
  padString(__str, 0x1EuLL, 32);
  padString((std::string *)a4, 0x1EuLL, 32);
  padString((std::string *)a5, 0x32uLL, 32);
  int v14 = *(char *)(a5 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a5;
  }
  else {
    uint64_t v15 = *(void *)a5;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a5 + 8);
  }
  int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 15, v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"   ", 3);
  int v18 = *(char *)(a4 + 23);
  if (v18 >= 0) {
    uint64_t v19 = a4;
  }
  else {
    uint64_t v19 = *(void *)a4;
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v20 = *(void *)(a4 + 8);
  }
  std::locale v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 15, v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"   ", 3);
  int v22 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v22 >= 0) {
    uint64_t v23 = __str;
  }
  else {
    uint64_t v23 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if (v22 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  xpc_object_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 15, (uint64_t)v23, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  int v26 = std::locale::use_facet(&v36, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  if ((a6 & 1) == 0) {
    NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices((NetworkDiagnosticsMdnsResolver *)a1, a2);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[1]);
  }
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(v28[0]);
  }
}

void sub_100230C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *(void *)(v9 + 16) = v10;
  MyServiceType::~MyServiceType(&a9);
  _Unwind_Resume(a1);
}

void MyServiceType::~MyServiceType(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void NetworkDiagnosticsMdnsResolver::MyBrowseCallBack(NetworkDiagnosticsMdnsResolver *this, __CFNetServiceBrowser *a2, CFNetServiceRef theService, _DWORD *a4, CFStreamError *a5, void *a6)
{
  char v9 = (char)a2;
  if (!a5)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsMdnsResolver::MyBrowseCallBack();
    }
  }
  if (!a4 || !a4[2]) {
    goto LABEL_13;
  }
  unint64_t v12 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    NetworkDiagnosticsMdnsResolver::MyBrowseCallBack();
  }
  if ((v9 & 1) == 0 && a5)
  {
    uint64_t v13 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsMdnsResolver::MyBrowseCallBack();
    }
    NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices((NetworkDiagnosticsMdnsResolver *)a5, this);
  }
  else
  {
LABEL_13:
    CFStringRef Name = CFNetServiceGetName(theService);
    CFStringGetCString(Name, buffer, 64, 0x8000100u);
    CFStringRef Type = CFNetServiceGetType(theService);
    CFStringGetCString(Type, v25, 24, 0x8000100u);
    CFStringRef Domain = CFNetServiceGetDomain(theService);
    CFStringGetCString(Domain, __s, 1005, 0x8000100u);
    int v17 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v23 = buffer;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "TDM: MyBrowseCallBack for %s.%s hostname:%s", (uint8_t *)&buf, 0x20u);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, __s);
    std::string::basic_string[abi:ne180100]<0>(v20, v25);
    std::string::basic_string[abi:ne180100]<0>(__p, buffer);
    if (a5) {
      NetworkDiagnosticsMdnsResolver::updatebrowsedService(&a5->domain, this, &buf, (uint64_t)v20, (uint64_t)__p, v9);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100230F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef verifydescription(const void *a1)
{
  return @"entered here ";
}

uint64_t NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices(NetworkDiagnosticsMdnsResolver *this)
{
  *((unsigned char *)this + 688) = 0;
  clientContext.version = 0;
  clientContext.info = this;
  clientContext.retain = 0;
  clientContext.release = 0;
  clientContext.copyDescription = (CFAllocatorCopyDescriptionCallBack)verifydescription;
  CFNetServiceBrowserRef v2 = CFNetServiceBrowserCreate(kCFAllocatorDefault, (CFNetServiceBrowserClientCallBack)NetworkDiagnosticsMdnsResolver::MyBrowseCallBack, &clientContext);
  if (v2)
  {
    std::ios_base::iostate v3 = v2;
    *((void *)this + 87) = v2;
    Current = CFRunLoopGetCurrent();
    CFNetServiceBrowserScheduleWithRunLoop(v3, Current, kCFRunLoopCommonModes);
    uint64_t result = CFNetServiceBrowserSearchForServices(v3, @"local", @"_hap._udp", &error);
    if (!result)
    {
      uint64_t v6 = CFRunLoopGetCurrent();
      CFNetServiceBrowserUnscheduleFromRunLoop(v3, v6, kCFRunLoopCommonModes);
      CFRelease(v3);
      logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
      uint64_t result = os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR);
      if (result)
      {
        NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices(&error.domain, logging_obg);
        return 0;
      }
    }
  }
  else
  {
    BOOL v8 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices();
      return 0;
    }
  }
  return result;
}

void NetworkDiagnosticsMdnsResolver::MyCancelResolve(NetworkDiagnosticsMdnsResolver *this, __CFNetService *a2)
{
  if (!a2)
  {
    logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsMdnsResolver::MyCancelResolve();
    }
  }
  Current = CFRunLoopGetCurrent();
  CFNetServiceUnscheduleFromRunLoop(a2, Current, kCFRunLoopCommonModes);
  CFNetServiceSetClient(a2, 0, 0);
  CFNetServiceCancel(a2);
  CFRelease(a2);
}

void NetworkDiagnosticsMdnsResolver::MyResolveCallBack(NetworkDiagnosticsMdnsResolver *this, int a2, CFNetServiceRef theService, CFStreamError *a4, void *a5)
{
  CFArrayRef Addressing = CFNetServiceGetAddressing(theService);
  int Count = CFArrayGetCount(Addressing);
  CFStringRef TargetHost = CFNetServiceGetTargetHost(theService);
  CStringPtr = (char *)CFStringGetCStringPtr(TargetHost, 0);
  std::string::basic_string[abi:ne180100]<0>(&v37, CStringPtr);
  if (Addressing)
  {
    if (Count)
    {
      ++*((_DWORD *)this + 28);
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(Addressing, 0);
      if (ValueAtIndex)
      {
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        int v14 = BytePtr;
        if (BytePtr)
        {
          if (BytePtr[1] == 30)
          {
            long long v36 = *(_OWORD *)(BytePtr + 8);
            uint64_t v15 = (uint64_t)inet_ntop(30, &v36, __s, 0x2Eu);
            if (v15)
            {
              logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
              if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
              {
                int v17 = &v37;
                if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v17 = (std::string *)v37.__r_.__value_.__r.__words[0];
                }
                unsigned int v18 = bswap32(*((unsigned __int16 *)v14 + 1));
                *(_DWORD *)std::string buf = 136315650;
                *(void *)std::string::size_type v40 = v17;
                *(_WORD *)&v40[8] = 2080;
                *(void *)&v40[10] = __s;
                *(_WORD *)&v40[18] = 1024;
                unsigned int v41 = HIWORD(v18);
                _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM: MyResolveCallBack hostanme:%s ip:%s port:%d", buf, 0x1Cu);
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, __s);
              uint64_t v19 = *((void *)this + 1);
              uint64_t v20 = v19 + 136 * a2;
              if (*(char *)(v20 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v20 + 8), *(void *)(v20 + 16));
                uint64_t v19 = *((void *)this + 1);
              }
              else
              {
                long long v21 = *(_OWORD *)(v20 + 8);
                v34.__r_.__value_.__r.__words[2] = *(void *)(v20 + 24);
                *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
              }
              std::string::operator=((std::string *)(v19 + 136 * a2 + 80), &__str);
              uint64_t v30 = *((void *)this + 1) + 136 * a2;
              *(_DWORD *)(v30 + 128) = bswap32(*((unsigned __int16 *)v14 + 1)) >> 16;
              std::string::operator=((std::string *)(v30 + 104), &v37);
              *(_WORD *)(*((void *)this + 1) + 136 * a2 + 132) = -1;
              std::string::size_type v31 = std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::find<std::string>((void *)this + 4, (unsigned __int8 *)&__str);
              if (v31)
              {
                MyServiceType::MyServiceType((MyServiceType *)buf, (const MyServiceType *)(v31 + 40));
                uint64_t v32 = *((void *)this + 1) + 136 * a2;
                *(_WORD *)(v32 + 132) = *((_WORD *)v31 + 86);
                uint64_t v15 = MyServiceType::operator=((uint64_t)(v31 + 40), v32);
              }
              else
              {
                MyServiceType::MyServiceType((MyServiceType *)buf, (const MyServiceType *)(*((void *)this + 1) + 136 * a2));
                p_str = &__str;
                long long v33 = std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (long long **)&p_str);
                uint64_t v15 = MyServiceType::operator=((uint64_t)(v33 + 40), (uint64_t)buf);
              }
              if (v50 < 0) {
                operator delete(__p);
              }
              if (v48 < 0) {
                operator delete(v47);
              }
              if (v46 < 0) {
                operator delete(v45);
              }
              if (v44 < 0) {
                operator delete(v43);
              }
              if (v42 < 0) {
                operator delete(*(void **)&v40[4]);
              }
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
          }
          else
          {
            int v26 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
            uint64_t v15 = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
            if (v15)
            {
              int v27 = &v37;
              if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
              }
              int v28 = v14[1];
              int v29 = *v14;
              *(_DWORD *)std::string buf = 136315650;
              *(void *)std::string::size_type v40 = v27;
              *(_WORD *)&v40[8] = 1024;
              *(_DWORD *)&v40[10] = v28;
              *(_WORD *)&v40[14] = 1024;
              *(_DWORD *)&v40[16] = v29;
              _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "TDM: Not a valid Ipv6 address hostname:%s sa_family=%d sa_len=%d", buf, 0x18u);
            }
          }
        }
        else
        {
          xpc_object_t v25 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
          uint64_t v15 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
          if (v15) {
            NetworkDiagnosticsMdnsResolver::MyResolveCallBack();
          }
        }
      }
      else
      {
        char v24 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
        uint64_t v15 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
        if (v15) {
          NetworkDiagnosticsMdnsResolver::MyResolveCallBack();
        }
      }
    }
    else
    {
      uint64_t v23 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
      uint64_t v15 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (v15) {
        NetworkDiagnosticsMdnsResolver::MyResolveCallBack();
      }
    }
  }
  else
  {
    int v22 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    uint64_t v15 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    if (v15) {
      NetworkDiagnosticsMdnsResolver::MyResolveCallBack();
    }
  }
  NetworkDiagnosticsMdnsResolver::MyCancelResolve((NetworkDiagnosticsMdnsResolver *)v15, theService);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_1002315EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MyServiceType::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 132) = *(_WORD *)(a2 + 132);
  return a1;
}

void NetworkDiagnosticsMdnsResolver::MyResolveService(NetworkDiagnosticsMdnsResolver *this)
{
  uint64_t v1 = *((void *)this + 1);
  CFNetServiceBrowserRef v2 = (uint64_t *)((char *)this + 8);
  if (*((void *)this + 2) == v1) {
    return;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 1;
  while (1)
  {
    uint64_t v6 = v1 + 136 * v4;
    uint64_t v7 = (const char *)(v6 + 56);
    if (*(char *)(v6 + 79) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
    CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
    if (!v8)
    {
      logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR)) {
        NetworkDiagnosticsMdnsResolver::MyResolveService(&v32, v33, logging_obg);
      }
      goto LABEL_25;
    }
    CFStringRef v9 = v8;
    uint64_t v10 = *v2 + 136 * v4;
    int v11 = (const char *)(v10 + 32);
    if (*(char *)(v10 + 55) < 0) {
      int v11 = *(const char **)v11;
    }
    CFStringRef v12 = CFStringCreateWithCString(0, v11, 0x8000100u);
    if (v12) {
      break;
    }
    CFStringRef v24 = v9;
LABEL_24:
    CFRelease(v24);
LABEL_25:
    uint64_t v4 = v5;
    uint64_t v1 = *((void *)this + 1);
    if (0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 2) - v1) >> 3) <= v5++) {
      return;
    }
  }
  CFStringRef v13 = v12;
  uint64_t v14 = *v2 + 136 * v4;
  uint64_t v15 = (const char *)(v14 + 8);
  if (*(char *)(v14 + 31) < 0) {
    uint64_t v15 = *(const char **)v15;
  }
  CFStringRef v16 = CFStringCreateWithCString(0, v15, 0x8000100u);
  if (!v16)
  {
    xpc_object_t v25 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsMdnsResolver::MyResolveService(&v30, v31, v25);
    }
    CFRelease(v9);
    CFStringRef v24 = v13;
    goto LABEL_24;
  }
  CFStringRef v17 = v16;
  unsigned int v18 = CFNetServiceCreate(kCFAllocatorDefault, v9, v13, v16, 5683);
  if (v18)
  {
    uint64_t v20 = v18;
    LODWORD(v19) = *(_DWORD *)(*(void *)this + 28);
    if (CFNetServiceResolveWithTimeout(v18, (double)v19, &error))
    {
      NetworkDiagnosticsMdnsResolver::MyResolveCallBack(this, v5 - 1, v20, v21, v22);
    }
    else
    {
      Current = CFRunLoopGetCurrent();
      CFNetServiceUnscheduleFromRunLoop(v20, Current, kCFRunLoopCommonModes);
      CFNetServiceSetClient(v20, 0, 0);
      CFRelease(v20);
      int v27 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218240;
        CFIndex domain = error.domain;
        __int16 v37 = 1024;
        SInt32 v38 = error.error;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "TDM: ERROR: CFNetServiceResolve returned %ld, %d", buf, 0x12u);
      }
    }
    CFRelease(v9);
    CFRelease(v13);
    CFStringRef v24 = v17;
    goto LABEL_24;
  }
  int v29 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
    NetworkDiagnosticsMdnsResolver::MyResolveService(v2, v4, v29);
  }
  CFRelease(v9);
  CFRelease(v13);
  CFRelease(v17);
}

void MyServiceType::MyServiceType(MyServiceType *this, const MyServiceType *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (std::string *)((char *)this + 32);
  *(_OWORD *)((char *)this + 56) = 0u;
  unsigned int v5 = (std::string *)((char *)this + 56);
  uint64_t v6 = (std::string *)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v7 = (std::string *)((char *)this + 104);
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_DWORD *)this = *(_DWORD *)a2;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::operator=(v4, (const std::string *)((char *)a2 + 32));
  std::string::operator=(v5, (const std::string *)((char *)a2 + 56));
  std::string::operator=(v6, (const std::string *)((char *)a2 + 80));
  std::string::operator=(v7, (const std::string *)((char *)a2 + 104));
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_WORD *)this + 66) = *((_WORD *)a2 + 66);
}

void sub_100231B20(_Unwind_Exception *exception_object)
{
  if (v1[127] < 0) {
    operator delete(*v6);
  }
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MyServiceType>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFNetServiceBrowserRef v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<MyServiceType>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<MyServiceType>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*(void **)(a2 + 104));
  }
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    std::ios_base::iostate v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  CFNetServiceBrowserRef v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFNetServiceBrowserRef v2 = a2;
    do
    {
      std::ios_base::iostate v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MyServiceType>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      CFNetServiceBrowserRef v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MyServiceType>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    CFNetServiceBrowserRef v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::vector<MyServiceType>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MyServiceType>,std::reverse_iterator<MyServiceType*>,std::reverse_iterator<MyServiceType*>,std::reverse_iterator<MyServiceType*>>((uint64_t)(a1 + 2), a1[1], (const MyServiceType *)a1[1], *a1, (const MyServiceType *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MyServiceType>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MyServiceType>,std::reverse_iterator<MyServiceType*>,std::reverse_iterator<MyServiceType*>,std::reverse_iterator<MyServiceType*>>(uint64_t a1, uint64_t a2, const MyServiceType *a3, uint64_t a4, const MyServiceType *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  xpc_object_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    CFStringRef v9 = a3;
    do
    {
      CFStringRef v9 = (const MyServiceType *)((char *)v9 - 136);
      MyServiceType::MyServiceType((MyServiceType *)(v7 - 136), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 136;
      *((void *)&v15 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MyServiceType>,std::reverse_iterator<MyServiceType*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_100231F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MyServiceType>,std::reverse_iterator<MyServiceType*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MyServiceType>,std::reverse_iterator<MyServiceType*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MyServiceType>,std::reverse_iterator<MyServiceType*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<MyServiceType>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<MyServiceType>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<MyServiceType>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<MyServiceType>::destroy[abi:ne180100](v4, i - 136);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t std::vector<MyServiceType>::__push_back_slow_path<MyServiceType const&>(uint64_t *a1, const MyServiceType *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v9 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v9 = v5;
  }
  CFStringRef v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MyServiceType>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = (MyServiceType *)&v10[136 * v4];
  CFStringRef v16 = &v10[136 * v9];
  MyServiceType::MyServiceType(v14, a2);
  long long v15 = (char *)v14 + 136;
  std::vector<MyServiceType>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<MyServiceType>::~__split_buffer(&v13);
  return v11;
}

void sub_100232184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MyServiceType>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    BOOL v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,NetworkDiagDataType>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,NetworkDiagDataType>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_100232A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0xB0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,MyServiceType>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100232AE4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,MyServiceType>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)((char *)&this[5].__r_.__value_.__r.__words[2] + 4) = 0u;
  WORD2(this[6].__r_.__value_.__r.__words[1]) = -1;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MyServiceType>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MyServiceType>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void NetworkDiagnosticsMdnsResolver::initialize(char *a1, void *a2, os_log_t log)
{
  if (*a1 >= 0) {
    long long v3 = a2;
  }
  else {
    long long v3 = (void *)*a2;
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM:ERR to open %s", (uint8_t *)&v4, 0xCu);
}

void NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "TDM:gServiceBroserRef is NULL", v2, v3, v4, v5, v6);
}

void NetworkDiagnosticsMdnsResolver::MyBrowseCallBack()
{
  OUTLINED_FUNCTION_2_9();
  OUTLINED_FUNCTION_10_0((void *)&_mh_execute_header, v0, v1, "TDM: Error inside MyBrowseCallBack stop browsing services %ld,%ld", v2, v3);
}

{
  uint64_t v0;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_2_9();
  OUTLINED_FUNCTION_10_0((void *)&_mh_execute_header, v0, v1, "TDM: Error inside MyBrowseCallBack %ld,%ld", v2, v3);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "TDM: inside MyBrowseCallBack instance is NULL ", v2, v3, v4, v5, v6);
}

void NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "TDM: gServiceBrowserRef is NULL. Failed to create ", v2, v3, v4, v5, v6);
}

void NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = 134218240;
  uint64_t v5 = v2;
  __int16 v6 = 1024;
  int v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "TDM: CFNetServiceBrowserSearchForServices returned :(domain = %ld, CFStreamError error = %d)", (uint8_t *)&v4, 0x12u);
}

void NetworkDiagnosticsMdnsResolver::MyCancelResolve()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "MyCancelResolve gServiceBeingResolved is NULL", v2, v3, v4, v5, v6);
}

void NetworkDiagnosticsMdnsResolver::MyResolveCallBack()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "TDM: ERROR: Address is NULL in response ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "TDM: ERROR: No address got in response to resolve ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "TDM: ERROR: addrDataRef is NULL ", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0((void *)&_mh_execute_header, v0, v1, "TDM: ERROR: sa is NULL ", v2, v3, v4, v5, v6);
}

void NetworkDiagnosticsMdnsResolver::MyResolveService(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: ERROR: MyResolveService cannot create CFString for domain", buf, 2u);
}

{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: ERROR: MyResolveService cannot create CFString for name", buf, 2u);
}

void NetworkDiagnosticsMdnsResolver::MyResolveService(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 136 * a2;
  uint64_t v5 = (void *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  uint64_t v6 = v3 + 136 * a2;
  int v7 = (void *)(v6 + 32);
  if (*(char *)(v6 + 55) < 0) {
    int v7 = (void *)*v7;
  }
  uint64_t v8 = v3 + 136 * a2;
  unint64_t v9 = (void *)(v8 + 56);
  if (*(char *)(v8 + 79) < 0) {
    unint64_t v9 = (void *)*v9;
  }
  int v10 = 136315650;
  unint64_t v11 = v5;
  __int16 v12 = 2080;
  unint64_t v13 = v7;
  __int16 v14 = 2080;
  uint64_t v15 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: ERROR: MyResolveService CFNetServiceCreate failed for name:%s type:%s domain:%s port:5683", (uint8_t *)&v10, 0x20u);
}

void NetworkDiagnosticsLogger::NetworkDiagnosticsLogger(NetworkDiagnosticsLogger *this, NetworkDiagnosticsMdnsResolver *a2, NetworkDiagnosticsConfigDb *a3)
{
  *(void *)this = v7;
  uint64_t v8 = v6;
  *(void *)((char *)this + *(void *)(v7 - 24)) = v6;
  unint64_t v9 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
  std::ios_base::init(v9, (char *)this + 8);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 71) = v7;
  *(void *)((char *)this + *(void *)(v7 - 24) + 568) = v8;
  int v10 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 71) - 24) + 568);
  std::ios_base::init(v10, (char *)this + 576);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 142) = v7;
  *(void *)((char *)this + *(void *)(v7 - 24) + 1136) = v8;
  unint64_t v11 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 142) - 24) + 1136);
  std::ios_base::init(v11, (char *)this + 1144);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 213) = v7;
  *(void *)((char *)this + *(void *)(v7 - 24) + 1704) = v8;
  __int16 v12 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 213) - 24) + 1704);
  std::ios_base::init(v12, (char *)this + 1712);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 284) = v7;
  *(void *)((char *)this + *(void *)(v7 - 24) + 2272) = v8;
  unint64_t v13 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 284) - 24) + 2272);
  std::ios_base::init(v13, (char *)this + 2280);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 355) = v7;
  *(void *)((char *)this + *(void *)(v7 - 24) + 2840) = v8;
  __int16 v14 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 355) - 24) + 2840);
  std::ios_base::init(v14, (char *)this + 2848);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 426) = v7;
  *(void *)((char *)this + *(void *)(v7 - 24) + 3408) = v8;
  uint64_t v15 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 426) - 24) + 3408);
  std::ios_base::init(v15, (char *)this + 3416);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *((void *)this + 497) = a2;
  *((void *)this + 498) = a3;
}

void sub_100233708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  std::ostream::~ostream();
  std::ios::~ios();
  std::ofstream::~ofstream(v13);
  std::ofstream::~ofstream(v12);
  std::ofstream::~ofstream(v11);
  std::ofstream::~ofstream(a9);
  std::ofstream::~ofstream(a10);
  std::ofstream::~ofstream(v10);
  _Unwind_Resume(a1);
}

void sub_100233810()
{
}

void sub_100233834()
{
}

void NetworkDiagnosticsLogger::closeFiles(NetworkDiagnosticsLogger *this)
{
  if ((*((unsigned char *)this + *(void *)(*(void *)this - 24) + 32) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*(void *)this - 24)), *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 32) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 71) - 24) + 600) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 71) - 24) + 568), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 71) - 24) + 600) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 213) - 24) + 1736) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 213) - 24) + 1704), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 213) - 24) + 1736) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 355) - 24) + 2872) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 355) - 24) + 2840), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 355) - 24) + 2872) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 426) - 24) + 3440) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 426) - 24) + 3408), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 426) - 24) + 3440) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 142) - 24) + 1168) & 5) == 0 && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 142) - 24) + 1136), *(_DWORD *)((char *)this + *(void *)(*((void *)this + 142) - 24) + 1168) | 4);
  }
  if ((*((unsigned char *)this + *(void *)(*((void *)this + 284) - 24) + 2304) & 5) == 0 && !std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 284) - 24) + 2272);
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

void NetworkDiagnosticsLogger::cleanup(NetworkDiagnosticsLogger *this, int a2, int a3, void *a4, void *a5, void *a6)
{
  if (a2 && *(unsigned char *)(*((void *)this + 498) + 49))
  {
    NetworkDiagnosticsLogger::output_services_info((uint64_t)this, a4, a5, a6);
    NetworkDiagnosticsLogger::output_dns_info_to_debug((uint64_t)this, a4, a5, a6);
  }
  if (a3)
  {
    NetworkDiagnosticsLogger::insertNetworkInformationToDot(this);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)"}", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    __int16 v12 = std::locale::use_facet(&v13, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    std::ostream::flush();
  }

  NetworkDiagnosticsLogger::closeFiles(this);
}

void sub_100233C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_services_info(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 3976);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5 != *(void *)(v4 + 16))
  {
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    unint64_t v9 = (void *)(result + 1704);
    uint64_t v10 = result + 1728;
    do
    {
      v48.__locale_ = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      convertUint16ToHexString(*(unsigned __int16 *)(v5 + 136 * v7 + 132), (uint64_t)&v48);
      *(void *)(v10 + *(void *)(*v9 - 24)) = 5;
      std::to_string(&v47, v8);
      padString(&v47, 5uLL, 32);
      unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Index=", 6);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v12 = &v47;
      }
      else {
        __int16 v12 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v47.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
      NodeCFStringRef Type = getNodeType(*(_WORD *)(*(void *)(v4 + 8) + 136 * v7 + 132), a2, a3, a4);
      *(void *)(v10 + *(void *)(*v9 - 24)) = 10;
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Type=", 5);
      convertNodeTypeForDisplay(NodeType, __p);
      if ((v46 & 0x80u) == 0) {
        unint64_t v16 = __p;
      }
      else {
        unint64_t v16 = (void **)__p[0];
      }
      if ((v46 & 0x80u) == 0) {
        uint64_t v17 = v46;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      if ((char)v46 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(v10 + *(void *)(*v9 - 24)) = 10;
      float v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Rloc16=", 7);
      if (v50 >= 0) {
        locale = &v48;
      }
      else {
        locale = v48.__locale_;
      }
      if (v50 >= 0) {
        uint64_t v20 = HIBYTE(v50);
      }
      else {
        uint64_t v20 = v49;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)locale, v20);
      *(void *)(v10 + *(void *)(*v9 - 24)) = 10;
      padString((std::string *)(*(void *)(v4 + 8) + 136 * v7 + 8), 0x32uLL, 32);
      unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Name=", 5);
      uint64_t v22 = *(void *)(v4 + 8) + 136 * v7;
      uint64_t v25 = *(void *)(v22 + 8);
      uint64_t v23 = v22 + 8;
      uint64_t v24 = v25;
      int v26 = *(char *)(v23 + 23);
      if (v26 >= 0) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = v24;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(v23 + 23);
      }
      else {
        uint64_t v28 = *(void *)(v23 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v27, v28);
      *(void *)(v10 + *(void *)(*v9 - 24)) = 50;
      padString((std::string *)(*(void *)(v4 + 8) + 136 * v7 + 80), 0x32uLL, 32);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"IpAddr=", 7);
      uint64_t v30 = *(void *)(v4 + 8) + 136 * v7;
      uint64_t v33 = *(void *)(v30 + 80);
      uint64_t v31 = v30 + 80;
      uint64_t v32 = v33;
      int v34 = *(char *)(v31 + 23);
      if (v34 >= 0) {
        uint64_t v35 = v31;
      }
      else {
        uint64_t v35 = v32;
      }
      if (v34 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(v31 + 23);
      }
      else {
        uint64_t v36 = *(void *)(v31 + 8);
      }
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v35, v36);
      std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
      unint64_t v38 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(v48.__locale_);
      }
      uint64_t v7 = ++v8;
      uint64_t v5 = *(void *)(v4 + 8);
    }
    while (0xF0F0F0F0F0F0F0F1 * ((*(void *)(v4 + 16) - v5) >> 3) > v8);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    unint64_t v39 = std::locale::use_facet(&v48, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
    std::locale::~locale(&v48);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    unint64_t v40 = std::locale::use_facet(&v48, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
    std::locale::~locale(&v48);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined", 91);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
    char v42 = std::locale::use_facet(&v48, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v48);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_10023414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

uint64_t NetworkDiagnosticsLogger::output_dns_info_to_debug(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void **)(result + 3976);
  if (v4[7])
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = (void *)(result + 568);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(result + 568), (uint64_t)"---------", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    unsigned __int16 v8 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"DNS INFO:", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"---------", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    __int16 v12 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    std::locale v13 = (void *)v4[6];
    uint64_t v189 = v5 + 74;
    if (v13)
    {
      uint64_t v176 = v4;
      unsigned __int16 v14 = 0;
      unsigned __int16 v187 = 0;
      uint64_t v188 = 0;
      uint64_t v15 = v5 + 284;
      unint64_t v16 = v5 + 287;
      uint64_t v17 = v5;
      float v18 = v5 + 426;
      unsigned int v180 = v17 + 429;
      unsigned int v182 = v16;
      BOOL v19 = v17 + 355;
      unsigned int v177 = v17;
      v178 = v17 + 358;
      do
      {
        MyServiceType::MyServiceType((MyServiceType *)&v200, (const MyServiceType *)(v13 + 5));
        uint64_t v197 = 0;
        uint64_t v198 = 0;
        uint64_t v199 = 0;
        convertUint16ToHexString(v209, (uint64_t)&v197);
        std::to_string(&v196, v14);
        padString(&v196, 5uLL, 32);
        std::to_string(&v195, WORD2(v188));
        padString(&v196, 5uLL, 32);
        std::to_string(&v194, (unsigned __int16)v188);
        padString(&v196, 5uLL, 32);
        std::to_string(&v193, v187);
        padString(&v196, 5uLL, 32);
        padString(&v201, 0x32uLL, 32);
        padString(&v206, 0x32uLL, 32);
        NodeCFStringRef Type = getNodeType(v209, a2, a3, a4);
        unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Index=", 6);
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &v196;
        }
        else {
          uint64_t v22 = (std::string *)v196.__r_.__value_.__r.__words[0];
        }
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v196.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v196.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 15;
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Type=", 5);
        convertNodeTypeForDisplay(NodeType, &__p);
        if ((v192 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v192 & 0x80u) == 0) {
          uint64_t v26 = v192;
        }
        else {
          uint64_t v26 = v191;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, v26);
        if ((char)v192 < 0) {
          operator delete(__p);
        }
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 15;
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Rloc16=", 7);
        if (v199 >= 0) {
          uint64_t v28 = &v197;
        }
        else {
          uint64_t v28 = v197;
        }
        if (v199 >= 0) {
          uint64_t v29 = HIBYTE(v199);
        }
        else {
          uint64_t v29 = v198;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 10;
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Name=", 5);
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v201;
        }
        else {
          uint64_t v31 = (std::string *)v201.__r_.__value_.__r.__words[0];
        }
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v32 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v32 = v201.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 10;
        uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"IpAddr=", 7);
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v34 = &v206;
        }
        else {
          int v34 = (std::string *)v206.__r_.__value_.__r.__words[0];
        }
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = v206.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
        uint64_t v36 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        if (NodeType)
        {
          if (NodeType == 2)
          {
            uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Index=", 6);
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v70 = &v193;
            }
            else {
              int v70 = (std::string *)v193.__r_.__value_.__r.__words[0];
            }
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v71 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v71 = v193.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
            *(void *)((char *)v182 + *(void *)(*v15 - 24)) = 15;
            std::string::size_type v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Type=", 5);
            convertNodeTypeForDisplay(2u, &__p);
            if ((v192 & 0x80u) == 0) {
              int v73 = &__p;
            }
            else {
              int v73 = __p;
            }
            if ((v192 & 0x80u) == 0) {
              uint64_t v74 = v192;
            }
            else {
              uint64_t v74 = v191;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
            if ((char)v192 < 0) {
              operator delete(__p);
            }
            *(void *)((char *)v182 + *(void *)(*v15 - 24)) = 15;
            uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Rloc16=", 7);
            if (v199 >= 0) {
              std::string::size_type v76 = &v197;
            }
            else {
              std::string::size_type v76 = v197;
            }
            if (v199 >= 0) {
              uint64_t v77 = HIBYTE(v199);
            }
            else {
              uint64_t v77 = v198;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
            *(void *)((char *)v182 + *(void *)(*v15 - 24)) = 10;
            std::string::size_type v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Name=", 5);
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v79 = &v201;
            }
            else {
              int v79 = (std::string *)v201.__r_.__value_.__r.__words[0];
            }
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v80 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v80 = v201.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
            *(void *)((char *)v182 + *(void *)(*v15 - 24)) = 10;
            uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"IpAddr=", 7);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v82 = &v206;
            }
            else {
              uint64_t v82 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v83 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v83 = v206.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
            std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
            unsigned int v84 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            ++v187;
          }
          else if (NodeType == 1)
          {
            uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Index=", 6);
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v38 = &v195;
            }
            else {
              unint64_t v38 = (std::string *)v195.__r_.__value_.__r.__words[0];
            }
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v39 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v39 = v195.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
            *(void *)((char *)v178 + *(void *)(*v19 - 24)) = 15;
            unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Type=", 5);
            convertNodeTypeForDisplay(1u, &__p);
            if ((v192 & 0x80u) == 0) {
              unint64_t v41 = &__p;
            }
            else {
              unint64_t v41 = __p;
            }
            if ((v192 & 0x80u) == 0) {
              uint64_t v42 = v192;
            }
            else {
              uint64_t v42 = v191;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
            if ((char)v192 < 0) {
              operator delete(__p);
            }
            *(void *)((char *)v178 + *(void *)(*v19 - 24)) = 15;
            std::string::size_type v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Rloc16=", 7);
            if (v199 >= 0) {
              char v44 = &v197;
            }
            else {
              char v44 = v197;
            }
            if (v199 >= 0) {
              uint64_t v45 = HIBYTE(v199);
            }
            else {
              uint64_t v45 = v198;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
            *(void *)((char *)v178 + *(void *)(*v19 - 24)) = 10;
            unsigned __int8 v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Name=", 5);
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v47 = &v201;
            }
            else {
              std::string v47 = (std::string *)v201.__r_.__value_.__r.__words[0];
            }
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v48 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v48 = v201.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            *(void *)((char *)v178 + *(void *)(*v19 - 24)) = 10;
            uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"IpAddr=", 7);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v50 = &v206;
            }
            else {
              uint64_t v50 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v51 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v51 = v206.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
            std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
            long long v52 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            ++WORD2(v188);
          }
          else
          {
            std::locale v85 = (const char *)&v197;
            if (v199 < 0) {
              std::locale v85 = (const char *)v197;
            }
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v86 = &v201;
            }
            else {
              int v86 = (std::string *)v201.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v87 = &v206;
            }
            else {
              std::string::size_type v87 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            fprintf(__stderrp, "Invalid Nodetype for Resolved service rloc16=%s name=%s ipAddr=%s\n", v85, (const char *)v86, (const char *)v87);
          }
        }
        else
        {
          uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Index=", 6);
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v54 = &v194;
          }
          else {
            std::string::size_type v54 = (std::string *)v194.__r_.__value_.__r.__words[0];
          }
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v55 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v55 = v194.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
          *(void *)((char *)v180 + *(void *)(*v18 - 24)) = 15;
          std::string::size_type v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Type=", 5);
          convertNodeTypeForDisplay(0, &__p);
          if ((v192 & 0x80u) == 0) {
            char v57 = &__p;
          }
          else {
            char v57 = __p;
          }
          if ((v192 & 0x80u) == 0) {
            uint64_t v58 = v192;
          }
          else {
            uint64_t v58 = v191;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
          if ((char)v192 < 0) {
            operator delete(__p);
          }
          *(void *)((char *)v180 + *(void *)(*v18 - 24)) = 15;
          int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Rloc16=", 7);
          if (v199 >= 0) {
            uint64_t v60 = &v197;
          }
          else {
            uint64_t v60 = v197;
          }
          if (v199 >= 0) {
            uint64_t v61 = HIBYTE(v199);
          }
          else {
            uint64_t v61 = v198;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
          *(void *)((char *)v180 + *(void *)(*v18 - 24)) = 10;
          BOOL v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Name=", 5);
          if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v63 = &v201;
          }
          else {
            long long v63 = (std::string *)v201.__r_.__value_.__r.__words[0];
          }
          if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v64 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v64 = v201.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
          *(void *)((char *)v180 + *(void *)(*v18 - 24)) = 10;
          std::string::size_type v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"IpAddr=", 7);
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v66 = &v206;
          }
          else {
            int v66 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v67 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v67 = v206.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
          std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
          uint64_t v68 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          LOWORD(v188) = v188 + 1;
        }
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v193.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v195.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v196.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v199) < 0) {
          operator delete(v197);
        }
        if (v208 < 0) {
          operator delete(v207);
        }
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v206.__r_.__value_.__l.__data_);
        }
        if (v205 < 0) {
          operator delete(v204);
        }
        if (v203 < 0) {
          operator delete(v202);
        }
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v201.__r_.__value_.__l.__data_);
        }
        ++v14;
        std::locale v13 = (void *)*v13;
      }
      while (v13);
      uint64_t v4 = v176;
      uint64_t v5 = v177;
    }
    else
    {
      uint64_t v188 = 0;
      unsigned __int16 v187 = 0;
      unsigned __int16 v14 = 0;
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    id v88 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    std::string::size_type v89 = v5 + 355;
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(v5[355] - 24) + 2840));
    char v90 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v91 = v5 + 426;
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(v5[426] - 24) + 3408));
    int v92 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v93 = v5 + 284;
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(v5[284] - 24) + 2272));
    std::string::size_type v94 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    unsigned int v95 = (void *)v4[11];
    if (v95)
    {
      char v181 = v5 + 429;
      int v183 = v5 + 287;
      uint64_t v179 = v5 + 358;
      do
      {
        MyServiceType::MyServiceType((MyServiceType *)&v200, (const MyServiceType *)(v95 + 5));
        uint64_t v197 = 0;
        uint64_t v198 = 0;
        uint64_t v199 = 0;
        convertUint16ToHexString(v209, (uint64_t)&v197);
        std::to_string(&v196, v14);
        padString(&v196, 5uLL, 32);
        std::to_string(&v195, WORD2(v188));
        padString(&v196, 5uLL, 32);
        std::to_string(&v194, (unsigned __int16)v188);
        padString(&v196, 5uLL, 32);
        std::to_string(&v193, v187);
        padString(&v196, 5uLL, 32);
        padString(&v201, 0x32uLL, 32);
        padString(&v206, 0x32uLL, 32);
        unsigned int v96 = getNodeType(v209, a2, a3, a4);
        int v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Index=", 6);
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v98 = &v196;
        }
        else {
          std::string::size_type v98 = (std::string *)v196.__r_.__value_.__r.__words[0];
        }
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v99 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v99 = v196.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v98, v99);
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 15;
        std::string::size_type v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Type=", 5);
        convertNodeTypeForDisplay(v96, &__p);
        if ((v192 & 0x80u) == 0) {
          char v101 = &__p;
        }
        else {
          char v101 = __p;
        }
        if ((v192 & 0x80u) == 0) {
          uint64_t v102 = v192;
        }
        else {
          uint64_t v102 = v191;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)v101, v102);
        if ((char)v192 < 0) {
          operator delete(__p);
        }
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 15;
        int v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Rloc16=", 7);
        if (v199 >= 0) {
          BOOL v104 = &v197;
        }
        else {
          BOOL v104 = v197;
        }
        if (v199 >= 0) {
          uint64_t v105 = HIBYTE(v199);
        }
        else {
          uint64_t v105 = v198;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v104, v105);
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 10;
        id v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Name=", 5);
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v107 = &v201;
        }
        else {
          long long v107 = (std::string *)v201.__r_.__value_.__r.__words[0];
        }
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v108 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v108 = v201.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v107, v108);
        *(void *)((char *)v189 + *(void *)(*v6 - 24)) = 10;
        std::string::size_type v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"IpAddr=", 7);
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v110 = &v206;
        }
        else {
          uint64_t v110 = (std::string *)v206.__r_.__value_.__r.__words[0];
        }
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v111 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v111 = v206.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v110, v111);
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
        char v112 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        if (v96)
        {
          if (v96 == 2)
          {
            char v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Index=", 6);
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v146 = &v193;
            }
            else {
              uint64_t v146 = (std::string *)v193.__r_.__value_.__r.__words[0];
            }
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v147 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v147 = v193.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)v146, v147);
            *(void *)((char *)v183 + *(void *)(*v93 - 24)) = 15;
            unsigned int v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Type=", 5);
            convertNodeTypeForDisplay(2u, &__p);
            if ((v192 & 0x80u) == 0) {
              v149 = &__p;
            }
            else {
              v149 = __p;
            }
            if ((v192 & 0x80u) == 0) {
              uint64_t v150 = v192;
            }
            else {
              uint64_t v150 = v191;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)v149, v150);
            if ((char)v192 < 0) {
              operator delete(__p);
            }
            *(void *)((char *)v183 + *(void *)(*v93 - 24)) = 15;
            std::string::size_type v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Rloc16=", 7);
            if (v199 >= 0) {
              unsigned __int8 v152 = &v197;
            }
            else {
              unsigned __int8 v152 = v197;
            }
            if (v199 >= 0) {
              uint64_t v153 = HIBYTE(v199);
            }
            else {
              uint64_t v153 = v198;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)v152, v153);
            *(void *)((char *)v183 + *(void *)(*v93 - 24)) = 10;
            std::string v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Name=", 5);
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v155 = &v201;
            }
            else {
              unsigned int v155 = (std::string *)v201.__r_.__value_.__r.__words[0];
            }
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v156 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v156 = v201.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v155, v156);
            *(void *)((char *)v183 + *(void *)(*v93 - 24)) = 10;
            v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"IpAddr=", 7);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v158 = &v206;
            }
            else {
              unsigned int v158 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v159 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v159 = v206.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)v158, v159);
            std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
            unsigned int v160 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v160->__vftable[2].~facet_0)(v160, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            ++v187;
          }
          else if (v96 == 1)
          {
            uint64_t v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Index=", 6);
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v114 = &v195;
            }
            else {
              int v114 = (std::string *)v195.__r_.__value_.__r.__words[0];
            }
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v115 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v115 = v195.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v114, v115);
            *(void *)((char *)v179 + *(void *)(*v89 - 24)) = 15;
            std::string::size_type v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Type=", 5);
            convertNodeTypeForDisplay(1u, &__p);
            if ((v192 & 0x80u) == 0) {
              uint64_t v117 = &__p;
            }
            else {
              uint64_t v117 = __p;
            }
            if ((v192 & 0x80u) == 0) {
              uint64_t v118 = v192;
            }
            else {
              uint64_t v118 = v191;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
            if ((char)v192 < 0) {
              operator delete(__p);
            }
            *(void *)((char *)v179 + *(void *)(*v89 - 24)) = 15;
            unsigned int v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Rloc16=", 7);
            if (v199 >= 0) {
              std::string::size_type v120 = &v197;
            }
            else {
              std::string::size_type v120 = v197;
            }
            if (v199 >= 0) {
              uint64_t v121 = HIBYTE(v199);
            }
            else {
              uint64_t v121 = v198;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
            *(void *)((char *)v179 + *(void *)(*v89 - 24)) = 10;
            std::string::size_type v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Name=", 5);
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v123 = &v201;
            }
            else {
              char v123 = (std::string *)v201.__r_.__value_.__r.__words[0];
            }
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v124 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v124 = v201.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
            *(void *)((char *)v179 + *(void *)(*v89 - 24)) = 10;
            int v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"IpAddr=", 7);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v126 = &v206;
            }
            else {
              int v126 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v127 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v127 = v206.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)v126, v127);
            std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
            char v128 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            ++WORD2(v188);
          }
          else
          {
            unsigned int v161 = (const char *)&v197;
            if (v199 < 0) {
              unsigned int v161 = (const char *)v197;
            }
            if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v162 = &v201;
            }
            else {
              int v162 = (std::string *)v201.__r_.__value_.__r.__words[0];
            }
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v163 = &v206;
            }
            else {
              v163 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            fprintf(__stderrp, "Invalid Nodetype for Unresolved service rloc16=%s name=%s ipAddr=%s\n", v161, (const char *)v162, (const char *)v163);
          }
        }
        else
        {
          long long v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Index=", 6);
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v130 = &v194;
          }
          else {
            uint64_t v130 = (std::string *)v194.__r_.__value_.__r.__words[0];
          }
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v131 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v131 = v194.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v130, v131);
          *(void *)((char *)v181 + *(void *)(*v91 - 24)) = 15;
          uint64_t v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Type=", 5);
          convertNodeTypeForDisplay(0, &__p);
          if ((v192 & 0x80u) == 0) {
            std::string::size_type v133 = &__p;
          }
          else {
            std::string::size_type v133 = __p;
          }
          if ((v192 & 0x80u) == 0) {
            uint64_t v134 = v192;
          }
          else {
            uint64_t v134 = v191;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)v133, v134);
          if ((char)v192 < 0) {
            operator delete(__p);
          }
          *(void *)((char *)v181 + *(void *)(*v91 - 24)) = 15;
          uint64_t v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Rloc16=", 7);
          if (v199 >= 0) {
            int v136 = &v197;
          }
          else {
            int v136 = v197;
          }
          if (v199 >= 0) {
            uint64_t v137 = HIBYTE(v199);
          }
          else {
            uint64_t v137 = v198;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v136, v137);
          *(void *)((char *)v181 + *(void *)(*v91 - 24)) = 10;
          std::string::size_type v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Name=", 5);
          if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v139 = &v201;
          }
          else {
            unsigned int v139 = (std::string *)v201.__r_.__value_.__r.__words[0];
          }
          if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v140 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v140 = v201.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)v139, v140);
          *(void *)((char *)v181 + *(void *)(*v91 - 24)) = 10;
          uint64_t v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"IpAddr=", 7);
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v142 = &v206;
          }
          else {
            std::string::size_type v142 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v143 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v143 = v206.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v142, v143);
          std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
          std::string::size_type v144 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v144->__vftable[2].~facet_0)(v144, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          LOWORD(v188) = v188 + 1;
        }
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v193.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v195.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v196.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v199) < 0) {
          operator delete(v197);
        }
        if (v208 < 0) {
          operator delete(v207);
        }
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v206.__r_.__value_.__l.__data_);
        }
        if (v205 < 0) {
          operator delete(v204);
        }
        if (v203 < 0) {
          operator delete(v202);
        }
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v201.__r_.__value_.__l.__data_);
        }
        ++v14;
        unsigned int v95 = (void *)*v95;
      }
      while (v95);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
    uint64_t v164 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v164->__vftable[2].~facet_0)(v164, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
    int v165 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v165->__vftable[2].~facet_0)(v165, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined", 91);
    std::ios_base::getloc((const std::ios_base *)((char *)v166 + *(void *)(*v166 - 24)));
    unsigned int v167 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v167->__vftable[2].~facet_0)(v167, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
    unsigned int v168 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v168->__vftable[2].~facet_0)(v168, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
    unsigned int v169 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v169->__vftable[2].~facet_0)(v169, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    unsigned int v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined", 91);
    std::ios_base::getloc((const std::ios_base *)((char *)v170 + *(void *)(*v170 - 24)));
    unsigned int v171 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v171->__vftable[2].~facet_0)(v171, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
    unsigned int v172 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v172->__vftable[2].~facet_0)(v172, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
    unsigned int v173 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v173->__vftable[2].~facet_0)(v173, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"NOTE:  Rloc16=0xffff implies the mapping from RLOC->Ipv6Addr->Hostname cannot be determined", 91);
    std::ios_base::getloc((const std::ios_base *)((char *)v174 + *(void *)(*v174 - 24)));
    int v175 = std::locale::use_facet(&v200, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v175->__vftable[2].~facet_0)(v175, 10);
    std::locale::~locale(&v200);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_100235FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::locale::~locale((std::locale *)(v60 - 224));
  _Unwind_Resume(a1);
}

uint64_t NetworkDiagnosticsLogger::insertNetworkInformationToDot(void *a1)
{
  uint64_t v2 = a1[498];
  int v3 = *(unsigned __int16 *)(v2 + 6658);
  unsigned int v4 = *(_DWORD *)(v2 + 6660);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v112);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"0x", 2);
  v109[0] = 48;
  uint64_t v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, v109);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 4;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v109);
  unsigned __int16 v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"0x", 2);
  v108.__r_.__value_.__s.__data_[0] = 48;
  unint64_t v9 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, (char *)&v108);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 16;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"ThreadNwInfo [pos=\"0,0!\" shape=\"plaintext\" fontsize=\"14\" margin=\"0\" width=\"0\" height=\"0\" label=<<table title=\"Thread NW Info\" border=\"0\" cellborder=\"1\" cellspacing=\"0\" color=\"black\">\\ \" ", 186);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  __int16 v12 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  std::locale v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">Time</td><td align=\"left\">", 47);
  int v14 = *(char *)(v2 + 23);
  if (v14 >= 0) {
    uint64_t v15 = v2;
  }
  else {
    uint64_t v15 = *(void *)v2;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v16 = *(void *)(v2 + 8);
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  float v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  BOOL v19 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">NetworkName</td><td align=\"left\">", 54);
  int v21 = *(char *)(v2 + 6687);
  if (v21 >= 0) {
    uint64_t v22 = v2 + 6664;
  }
  else {
    uint64_t v22 = *(void *)(v2 + 6664);
  }
  if (v21 >= 0) {
    uint64_t v23 = *(unsigned __int8 *)(v2 + 6687);
  }
  else {
    uint64_t v23 = *(void *)(v2 + 6672);
  }
  uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  uint64_t v26 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">Channel</td><td align=\"left\">", 50);
  std::to_string(&v108, v3);
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v28 = &v108;
  }
  else {
    uint64_t v28 = (std::string *)v108.__r_.__value_.__r.__words[0];
  }
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v108.__r_.__value_.__l.__size_;
  }
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, size);
  uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
  std::string::size_type v32 = std::locale::use_facet(&v115, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale(&v115);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">PANID</td><td align=\"left\">", 48);
  uint64_t v33 = (void *)std::ostream::operator<<();
  int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
  std::string::size_type v35 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">XPANID</td><td align=\"left\">", 49);
  uint64_t v36 = (void *)std::ostream::operator<<();
  uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
  unint64_t v38 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">PartitionID</td><td align=\"left\">", 54);
  std::to_string(&v108, v4);
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v40 = &v108;
  }
  else {
    unint64_t v40 = (std::string *)v108.__r_.__value_.__r.__words[0];
  }
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v108.__r_.__value_.__l.__size_;
  }
  uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
  std::string::size_type v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
  char v44 = std::locale::use_facet(&v115, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v115);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">MLPrefix</td><td align=\"left\">", 51);
  int v46 = *(char *)(v2 + 6711);
  if (v46 >= 0) {
    uint64_t v47 = v2 + 6688;
  }
  else {
    uint64_t v47 = *(void *)(v2 + 6688);
  }
  if (v46 >= 0) {
    uint64_t v48 = *(unsigned __int8 *)(v2 + 6711);
  }
  else {
    uint64_t v48 = *(void *)(v2 + 6696);
  }
  uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
  uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"/64", 3);
  std::string::size_type v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
  long long v52 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">TotalRouters</td><td href=\"", 48);
  int v54 = *(char *)(v2 + 319);
  if (v54 >= 0) {
    uint64_t v55 = v2 + 296;
  }
  else {
    uint64_t v55 = *(void *)(v2 + 296);
  }
  if (v54 >= 0) {
    uint64_t v56 = *(unsigned __int8 *)(v2 + 319);
  }
  else {
    uint64_t v56 = *(void *)(v2 + 304);
  }
  char v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
  uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"\" align=\"left\">", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"<U><FONT color=\"blue\">", 22);
  int v59 = (void *)std::ostream::operator<<();
  uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"</FONT></U> </td></tr> \\ ", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
  uint64_t v61 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  BOOL v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">TotalFEDs</td><td href=\"", 45);
  int v63 = *(char *)(v2 + 271);
  if (v63 >= 0) {
    uint64_t v64 = v2 + 248;
  }
  else {
    uint64_t v64 = *(void *)(v2 + 248);
  }
  if (v63 >= 0) {
    uint64_t v65 = *(unsigned __int8 *)(v2 + 271);
  }
  else {
    uint64_t v65 = *(void *)(v2 + 256);
  }
  int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
  std::string::size_type v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\" align=\"left\">", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"<U><FONT color=\"blue\">", 22);
  uint64_t v68 = (void *)std::ostream::operator<<();
  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"</FONT></U> </td></tr> \\ ", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  int v70 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">TotalSEDs</td><td href=\"", 45);
  int v72 = *(char *)(v2 + 295);
  if (v72 >= 0) {
    uint64_t v73 = v2 + 272;
  }
  else {
    uint64_t v73 = *(void *)(v2 + 272);
  }
  if (v72 >= 0) {
    uint64_t v74 = *(unsigned __int8 *)(v2 + 295);
  }
  else {
    uint64_t v74 = *(void *)(v2 + 280);
  }
  uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
  std::string::size_type v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\" align=\"left\">", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"<U><FONT color=\"blue\">", 22);
  uint64_t v77 = (void *)std::ostream::operator<<();
  std::string::size_type v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"</FONT></U> </td></tr> \\ ", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(*v78 - 24)));
  int v79 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">TotalNodes</td><td align=\"left\">", 53);
  std::string::size_type v80 = (void *)std::ostream::operator<<();
  uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"</td></tr> \\ ", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(void *)(*v81 - 24)));
  uint64_t v82 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">TotalServicesDiscovered</td><td href=\"", 59);
  int v84 = *(char *)(v2 + 199);
  if (v84 >= 0) {
    uint64_t v85 = v2 + 176;
  }
  else {
    uint64_t v85 = *(void *)(v2 + 176);
  }
  if (v84 >= 0) {
    uint64_t v86 = *(unsigned __int8 *)(v2 + 199);
  }
  else {
    uint64_t v86 = *(void *)(v2 + 184);
  }
  std::string::size_type v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, v85, v86);
  id v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\" align=\"left\">", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"<U><FONT color=\"blue\">", 22);
  std::string::size_type v89 = (void *)std::ostream::operator<<();
  char v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"</FONT></U> </td></tr> \\ ", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v90 + *(void *)(*v90 - 24)));
  uint64_t v91 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  int v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<tr><td align=\"left\">TotalServicesResolved</td><td href=\"", 57);
  int v93 = *(char *)(v2 + 223);
  if (v93 >= 0) {
    uint64_t v94 = v2 + 200;
  }
  else {
    uint64_t v94 = *(void *)(v2 + 200);
  }
  if (v93 >= 0) {
    uint64_t v95 = *(unsigned __int8 *)(v2 + 223);
  }
  else {
    uint64_t v95 = *(void *)(v2 + 208);
  }
  unsigned int v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
  int v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"\" align=\"left\">", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"<U><FONT color=\"blue\">", 22);
  std::string::size_type v98 = (void *)std::ostream::operator<<();
  std::string::size_type v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"</FONT></U> </td></tr> \\ ", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24)));
  std::string::size_type v100 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
  char v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"</table>>];", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(void *)(*v101 - 24)));
  uint64_t v102 = std::locale::use_facet((const std::locale *)&v108, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)(v102, 10);
  std::locale::~locale((std::locale *)&v108);
  std::ostream::put();
  std::ostream::flush();
                             - 24)] = v105;
  uint64_t v106 = v104;
  v110[0] = v104;
  if (v111 < 0) {
    operator delete((void *)v110[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v112[0] = v103;
  *(void *)((char *)v112 + *(void *)(v103 - 24)) = v105;
  v113[0] = v106;
  if (v114 < 0) {
    operator delete((void *)v113[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1002370B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t NetworkDiagnosticsLogger::initialize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ofstream::open();
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
LABEL_2:
    BOOL v19 = __stderrp;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v20 = (const char *)a2;
    }
    else {
      uint64_t v20 = *(const char **)a2;
    }
LABEL_35:
    fprintf(v19, "ERR to open %s\n", v20);
    return 0;
  }
  int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Current Time:", 13);
  int v22 = *(char *)(a11 + 23);
  if (v22 >= 0) {
    uint64_t v23 = a11;
  }
  else {
    uint64_t v23 = *(void *)a11;
  }
  if (v22 >= 0) {
    uint64_t v24 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v24 = *(void *)(a11 + 8);
  }
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  uint64_t v26 = std::locale::use_facet(&v68, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v27 = std::locale::use_facet(&v68, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  std::ofstream::open();
  if ((*((unsigned char *)a1 + *(void *)(a1[71] - 24) + 600) & 5) != 0)
  {
    BOOL v19 = __stderrp;
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v20 = (const char *)a3;
    }
    else {
      uint64_t v20 = *(const char **)a3;
    }
    goto LABEL_35;
  }
  uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 71, (uint64_t)"Current Time:", 13);
  int v29 = *(char *)(a11 + 23);
  if (v29 >= 0) {
    uint64_t v30 = a11;
  }
  else {
    uint64_t v30 = *(void *)a11;
  }
  if (v29 >= 0) {
    uint64_t v31 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v31 = *(void *)(a11 + 8);
  }
  std::string::size_type v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
  uint64_t v33 = std::locale::use_facet(&v68, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(a1[71] - 24) + 568));
  int v34 = std::locale::use_facet(&v68, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  std::ofstream::open();
  if ((*((unsigned char *)a1 + *(void *)(a1[142] - 24) + 1168) & 5) != 0) {
    goto LABEL_22;
  }
  std::string::size_type v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 142, (uint64_t)"Current Time:", 13);
  int v36 = *(char *)(a11 + 23);
  if (v36 >= 0) {
    uint64_t v37 = a11;
  }
  else {
    uint64_t v37 = *(void *)a11;
  }
  if (v36 >= 0) {
    uint64_t v38 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v38 = *(void *)(a11 + 8);
  }
  std::string::size_type v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
  unint64_t v40 = std::locale::use_facet(&v68, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(a1[142] - 24) + 1136));
  std::string::size_type v41 = std::locale::use_facet(&v68, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v68);
  std::ostream::put();
  std::ostream::flush();
  std::ofstream::open();
  if ((*((unsigned char *)a1 + *(void *)(a1[213] - 24) + 1736) & 5) != 0)
  {
    BOOL v19 = __stderrp;
    if (*(char *)(a7 + 23) >= 0) {
      uint64_t v20 = (const char *)a7;
    }
    else {
      uint64_t v20 = *(const char **)a7;
    }
    goto LABEL_35;
  }
  a2 = a9;
  std::string::size_type v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 213, (uint64_t)"Current Time:", 13);
  int v44 = *(char *)(a11 + 23);
  if (v44 >= 0) {
    uint64_t v45 = a11;
  }
  else {
    uint64_t v45 = *(void *)a11;
  }
  if (v44 >= 0) {
    uint64_t v46 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v46 = *(void *)(a11 + 8);
  }
  uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(a1 + 213);
  std::ofstream::open();
  if ((*((unsigned char *)a1 + *(void *)(a1[355] - 24) + 2872) & 5) != 0) {
    goto LABEL_2;
  }
  a6 = a10;
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 355, (uint64_t)"Current Time:", 13);
  int v49 = *(char *)(a11 + 23);
  uint64_t v50 = v49 >= 0 ? a11 : *(void *)a11;
  uint64_t v51 = v49 >= 0 ? *(unsigned __int8 *)(a11 + 23) : *(void *)(a11 + 8);
  long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v52);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(a1 + 355);
  std::ofstream::open();
  if ((*((unsigned char *)a1 + *(void *)(a1[426] - 24) + 3440) & 5) != 0)
  {
LABEL_22:
    BOOL v19 = __stderrp;
    if (*(char *)(a6 + 23) >= 0) {
      uint64_t v20 = (const char *)a6;
    }
    else {
      uint64_t v20 = *(const char **)a6;
    }
    goto LABEL_35;
  }
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 426, (uint64_t)"Current Time:", 13);
  int v54 = *(char *)(a11 + 23);
  if (v54 >= 0) {
    uint64_t v55 = a11;
  }
  else {
    uint64_t v55 = *(void *)a11;
  }
  if (v54 >= 0) {
    uint64_t v56 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v56 = *(void *)(a11 + 8);
  }
  char v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v57);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(a1 + 426);
  std::ofstream::open();
  if ((*((unsigned char *)a1 + *(void *)(a1[284] - 24) + 2304) & 5) != 0)
  {
    BOOL v19 = __stderrp;
    if (*(char *)(a8 + 23) >= 0) {
      uint64_t v20 = (const char *)a8;
    }
    else {
      uint64_t v20 = *(const char **)a8;
    }
    goto LABEL_35;
  }
  uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 284, (uint64_t)"Current Time:", 13);
  int v59 = *(char *)(a11 + 23);
  if (v59 >= 0) {
    uint64_t v60 = a11;
  }
  else {
    uint64_t v60 = *(void *)a11;
  }
  if (v59 >= 0) {
    uint64_t v61 = *(unsigned __int8 *)(a11 + 23);
  }
  else {
    uint64_t v61 = *(void *)(a11 + 8);
  }
  BOOL v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v62);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(a1 + 284);
  int v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"digraph {", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v63);
  if (!*(unsigned char *)(a1[498] + 48))
  {
    uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"concentrate=true;",
            17);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v64);
  }
  uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"forcelabels=true;", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v65);
  int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"rankdir=LR;", 11);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v66);
  std::string::size_type v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"node [shape=box, color=red];",
          28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v67);
  NetworkDiagnosticsLogger::insertLegendToDotFile(a1, a4, a5, a3);
  return 1;
}

void sub_100237974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

uint64_t NetworkDiagnosticsLogger::insertLegendToDotFile(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v8 = a1 + 142;
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 142, (uint64_t)"digraph {", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"forcelabels=true;", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  __int16 v12 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  std::locale v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"rankdir=LR;", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  int v14 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"rank=same;", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
  uint64_t v16 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"node [shape=box, color=black];",
          30);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  float v18 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"color = black;", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Router [shape=\"box\"] [color=\"blue\"];",
          36);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  int v22 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Leader [shape=\"box\"] [color=\"green\"]", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" [xlabel=<<font color=\"violet\"> <B> <I>", 39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  \"DNS Info\"", 12);
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"</I></B></font>>];",
          18);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  uint64_t v24 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ExpandBox [style=invis]", 23);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  uint64_t v26 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"FED [shape=circle color=\"red\"];",
          31);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
  uint64_t v28 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"SED [shape=circle color=\"orange\"];",
          34);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  uint64_t v30 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Router -> Leader [style=invis]", 30);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
  std::string::size_type v32 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Leader -> FED [style=invis]", 27);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  int v34 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"FED -> SED [style=invis]", 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
  int v36 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Parent [style=invis]", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
  uint64_t v38 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Child  [style=invis];",
          21);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
  unint64_t v40 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Parent -> Child [label=\"\\l parent-child link\" color=\"brown\"];",
          61);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
  uint64_t v42 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
  int v44 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Invis [label=\"       \" style=invis];",
          36);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
  uint64_t v46 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Legend [ tooltip=\"Display legend\" shape=plaintext fontsize=\"14\" href=\"", 70);
  int v48 = *(char *)(a3 + 23);
  if (v48 >= 0) {
    uint64_t v49 = a3;
  }
  else {
    uint64_t v49 = *(void *)a3;
  }
  if (v48 >= 0) {
    uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v50 = *(void *)(a3 + 8);
  }
  uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
  long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\" label=<<font color=\"blue\"> <U> Legend </U></font>>][color=blue];",
          66);
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
  uint64_t v53 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Tlvs [ tooltip=\"Display debug log\" shape=plaintext fontsize=\"14\" href=\"", 71);
  int v55 = *(char *)(a4 + 23);
  if (v55 >= 0) {
    uint64_t v56 = a4;
  }
  else {
    uint64_t v56 = *(void *)a4;
  }
  if (v55 >= 0) {
    uint64_t v57 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v57 = *(void *)(a4 + 8);
  }
  uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
  int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\" label=<<font color=\"blue\"> <U> Tlvs </U></font>>][color=blue];",
          64);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
  uint64_t v60 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Output [ tooltip=\"Display execution script output\" shape=plaintext fontsize=\"14\" href=\"", 87);
  int v62 = *(char *)(a2 + 23);
  if (v62 >= 0) {
    uint64_t v63 = a2;
  }
  else {
    uint64_t v63 = *(void *)a2;
  }
  if (v62 >= 0) {
    uint64_t v64 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v64 = *(void *)(a2 + 8);
  }
  uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v63, v64);
  int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"\" label=<<font color=\"blue\"> <U> Output </U></font>>][color=blue];",
          66);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
  std::string::size_type v67 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  std::locale v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Invis  -> Legend [style=invis];",
          31);
  std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
  uint64_t v69 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  int v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Legend -> Tlvs  [style=invis];",
          30);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(void *)(*v70 - 24)));
  std::string::size_type v71 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  int v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Tlvs  -> Output [style=invis];",
          30);
  std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24)));
  uint64_t v73 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Output -> Counters [style=invis];",
          33);
  std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(void *)(*v74 - 24)));
  uint64_t v75 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
  std::locale::~locale(&v77);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_10023894C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t **NetworkDiagnosticsLogger::output_addr16tlv_to_file(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 v23 = a2;
  __int16 v12 = (void *)(a1 + 568);
  std::locale v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 568), (uint64_t)"Rloc16:", 7);
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = *(void *)a3;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a3 + 8);
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  float v18 = std::locale::use_facet(&v24, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  std::ostream::flush();
  BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"------- ", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet(&v24, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  int v21 = std::locale::use_facet(&v24, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  uint64_t result = (uint64_t **)std::ostream::flush();
  if (*a5 != 2)
  {
    if (*a5 != 1) {
      return result;
    }
    if ((a2 & 0x1FF) != 0) {
      a6 = a7;
    }
  }
  return std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a6, &v23, &v23);
}

void sub_100238BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void NetworkDiagnosticsLogger::output_ipAddrListTlv_to_file(uint64_t a1, unsigned int a2, uint64_t a3, std::string *a4, _DWORD *a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  int v14 = (void *)(a1 + 568);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 568), (uint64_t)"IpAddressList: ", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
  uint64_t v16 = std::locale::use_facet((const std::locale *)v73, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale((std::locale *)v73);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-------------- ", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  float v18 = std::locale::use_facet((const std::locale *)v73, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)v73);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v19 = *(void *)(a3 + 24);
  memset(&__str, 0, sizeof(__str));
  if (v19)
  {
    unsigned int v20 = *(unsigned __int8 *)(v19 + 1);
    uint64_t v61 = (unsigned __int8 *)(v19 + 1);
    if (v20 == 255)
    {
      unsigned int v21 = (bswap32(*(unsigned __int16 *)(v19 + 2)) >> 20);
      if (!v21) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v20 <= 0xF)
      {
LABEL_7:
        fprintf(__stderrp, "ERR: Ip Address List is empty for Rloc=%x\n", a2);
        goto LABEL_8;
      }
      unsigned int v21 = v20 >> 4;
    }
    uint64_t v28 = 0;
    char v24 = 0;
    uint64_t v60 = v21;
    uint64_t v58 = a4;
    while (1)
    {
      int v29 = v61 + 3;
      if (*v61 != 255) {
        int v29 = v61 + 1;
      }
      memset(__s, 0, 46);
      inet_ntop(30, &v29[16 * v28], (char *)__s, 0x2Eu);
      std::string::basic_string[abi:ne180100]<0>(v73, (char *)__s);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = *(std::string *)v73;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Index:", 6);
      uint64_t v30 = (void *)std::ostream::operator<<();
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" Ipv6 Address: ", 15);
      size_t v32 = strlen((const char *)__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)__s, v32);
      if (v24) {
        goto LABEL_50;
      }
      if (*a5 == 1) {
        break;
      }
      uint64_t v38 = std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::find<std::string>(a8, (unsigned __int8 *)&__str);
      if (!v38)
      {
        char v24 = 0;
        goto LABEL_51;
      }
      uint64_t v39 = (uint64_t)(v38 + 40);
      MyServiceType::MyServiceType((MyServiceType *)v73, (const MyServiceType *)(v38 + 40));
      if (v78 != a2) {
        unsigned __int16 v78 = a2;
      }
      unint64_t v40 = a5;
      std::string::size_type v41 = a8;
      uint64_t v42 = a6;
      MyServiceType::operator=(v39, (uint64_t)v73);
      uint64_t v43 = a9[1] - *a9;
      if (v43)
      {
        unint64_t v44 = 0xF0F0F0F0F0F0F0F1 * (v43 >> 3);
        uint64_t v45 = *a9 + 80;
        uint64_t v46 = 1;
        do
        {
          int v47 = *(char *)(v45 + 23);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v47 >= 0) {
            std::string::size_type v50 = *(unsigned __int8 *)(v45 + 23);
          }
          else {
            std::string::size_type v50 = *(void *)(v45 + 8);
          }
          if (v47 >= 0) {
            uint64_t v51 = (const void *)v45;
          }
          else {
            uint64_t v51 = *(const void **)v45;
          }
          if (v50 >= size) {
            size_t v52 = size;
          }
          else {
            size_t v52 = v50;
          }
          BOOL v53 = !memcmp(p_str, v51, v52) && v50 == size;
          if (v53 && *(unsigned __int16 *)(v45 + 52) != a2) {
            *(_WORD *)(v45 + 52) = a2;
          }
          v45 += 136;
        }
        while (v44 > (unsigned __int16)v46++);
      }
      int v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" Name:", 6);
      a4 = v58;
      if (v73[31] >= 0) {
        uint64_t v56 = &v73[8];
      }
      else {
        uint64_t v56 = *(unsigned char **)&v73[8];
      }
      if (v73[31] >= 0) {
        uint64_t v57 = v73[31];
      }
      else {
        uint64_t v57 = *(void *)&v73[16];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      std::string::operator=(v58, (const std::string *)&v73[8]);
      a6 = v42;
      a8 = v41;
      a5 = v40;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v76) < 0) {
        operator delete(*((void **)&v75 + 1));
      }
      if (SBYTE7(v75) < 0) {
        operator delete((void *)v74);
      }
      if ((v73[55] & 0x80000000) != 0) {
        operator delete(*(void **)&v73[32]);
      }
      if ((v73[31] & 0x80000000) != 0)
      {
        uint64_t v37 = *(void **)&v73[8];
LABEL_115:
        operator delete(v37);
      }
LABEL_50:
      char v24 = 1;
LABEL_51:
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      uint64_t v33 = std::locale::use_facet((const std::locale *)v73, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale((std::locale *)v73);
      std::ostream::put();
      std::ostream::flush();
      if (++v28 == v60) {
        goto LABEL_9;
      }
    }
    gethostname(v73, 0x400uLL);
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" Name:", 6);
    size_t v35 = strlen(v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v73, v35);
    std::string::basic_string[abi:ne180100]<0>(v63, v73);
    if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a4->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v63;
    a4->__r_.__value_.__r.__words[2] = *(void *)&v63[16];
    if (!a6) {
      goto LABEL_50;
    }
    *(_DWORD *)uint64_t v63 = 0;
    memset(&v63[8], 0, 48);
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    memset(v67, 0, sizeof(v67));
    __int16 v68 = -1;
    std::string::operator=((std::string *)((char *)&v65 + 8), &__str);
    std::string::operator=((std::string *)v67, a4);
    __int16 v68 = a2;
    std::string::operator=((std::string *)&v63[8], a4);
    strcpy(v72, "CANNOT DETRMINE");
    std::string::basic_string[abi:ne180100]<0>(&v70, v72);
    if (SBYTE7(v65) < 0) {
      operator delete((void *)v64);
    }
    long long v64 = v70;
    *(void *)&long long v65 = v71;
    std::string::basic_string[abi:ne180100]<0>(&v70, v72);
    if ((v63[55] & 0x80000000) != 0) {
      operator delete(*(void **)&v63[32]);
    }
    *(_OWORD *)&v63[32] = v70;
    *(void *)&v63[48] = v71;
    *(_DWORD *)&v67[24] = 0;
    *(void *)&long long v70 = &__str;
    int v36 = std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a7, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (long long **)&v70);
    MyServiceType::operator=((uint64_t)(v36 + 40), (uint64_t)v63);
    if ((v67[23] & 0x80000000) != 0) {
      operator delete(*(void **)v67);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(*((void **)&v65 + 1));
    }
    if (SBYTE7(v65) < 0) {
      operator delete((void *)v64);
    }
    if ((v63[55] & 0x80000000) != 0) {
      operator delete(*(void **)&v63[32]);
    }
    if ((v63[31] & 0x80000000) == 0) {
      goto LABEL_50;
    }
    uint64_t v37 = *(void **)&v63[8];
    goto LABEL_115;
  }
  int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ERR: IP Address List information not present", 44);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  unsigned __int16 v23 = std::locale::use_facet((const std::locale *)v73, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale((std::locale *)v73);
  std::ostream::put();
  std::ostream::flush();
LABEL_8:
  char v24 = 0;
LABEL_9:
  if ((v24 & 1) == 0 && a6)
  {
    memset(v63, 0, 24);
    convertUint16ToHexString(a2, (uint64_t)v63);
    if (v63[23] >= 0) {
      uint64_t v25 = v63;
    }
    else {
      uint64_t v25 = *(const char **)v63;
    }
    fprintf(__stderrp, "WARN: output_ipAddrListTlv_to_file sDsnInfo has no entry possibly bec not reg to SRP proxy. Cannot determine hostname for Rloc16=%s\n", v25);
    strcpy((char *)&v70, "CANNOT DETRMINE");
    *(_DWORD *)uint64_t v73 = 0;
    memset(&v73[8], 0, 48);
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    memset(__p, 0, sizeof(__p));
    unsigned __int16 v78 = -1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_)
      {
        uint64_t v26 = (std::string *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_19;
      }
    }
    else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      uint64_t v26 = &__str;
LABEL_19:
      fprintf(__stderrp, "WARN Entered address for dnsInfo unresolved service=%s rloc16=%x\n", (const char *)v26, a2);
      std::string::operator=((std::string *)((char *)&v75 + 8), &__str);
    }
    std::string::basic_string[abi:ne180100]<0>(__s, (char *)&v70);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(_OWORD *)std::string __p = __s[0];
    *(void *)&__p[16] = *(void *)&__s[1];
    unsigned __int16 v78 = a2;
    std::string::basic_string[abi:ne180100]<0>(__s, (char *)&v70);
    if ((v73[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v73[8]);
    }
    *(_OWORD *)&v73[8] = __s[0];
    *(void *)&v73[24] = *(void *)&__s[1];
    std::string::basic_string[abi:ne180100]<0>(__s, (char *)&v70);
    if (SBYTE7(v75) < 0) {
      operator delete((void *)v74);
    }
    long long v74 = __s[0];
    *(void *)&long long v75 = *(void *)&__s[1];
    std::string::basic_string[abi:ne180100]<0>(__s, (char *)&v70);
    if ((v73[55] & 0x80000000) != 0) {
      operator delete(*(void **)&v73[32]);
    }
    *(_OWORD *)&v73[32] = __s[0];
    *(void *)&v73[48] = *(void *)&__s[1];
    *(_DWORD *)&__p[24] = 0;
    *(void *)&__s[0] = &__str;
    uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,MyServiceType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MyServiceType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MyServiceType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MyServiceType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a7, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (long long **)__s);
    MyServiceType::operator=((uint64_t)(v27 + 40), (uint64_t)v73);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v76) < 0) {
      operator delete(*((void **)&v75 + 1));
    }
    if (SBYTE7(v75) < 0) {
      operator delete((void *)v74);
    }
    if ((v73[55] & 0x80000000) != 0) {
      operator delete(*(void **)&v73[32]);
    }
    if ((v73[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v73[8]);
    }
    if ((v63[23] & 0x80000000) != 0) {
      operator delete(*(void **)v63);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100239618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::locale a57)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

uint64_t NetworkDiagnosticsLogger::output_node_to_dot_file(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8, void *a9, void *a10)
{
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
  int v17 = *(char *)(a3 + 23);
  if (v17 >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *(void *)a3;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v19 = *(void *)(a3 + 8);
  }
  unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\"", 1);
  if (getRloc16FromRouterId(a7) == a2)
  {
    unsigned int v21 = " [shape=box] [color=green] ";
  }
  else
  {
    NodeCFStringRef Type = getNodeType(a2, a8, a9, a10);
    switch(NodeType)
    {
      case 0:
        unsigned int v21 = " [shape=circle] [color=orange] ";
        unsigned __int16 v23 = a1;
        uint64_t v24 = 31;
        goto LABEL_17;
      case 1:
        unsigned int v21 = " [shape=circle] [color=red] ";
        unsigned __int16 v23 = a1;
        uint64_t v24 = 28;
        goto LABEL_17;
      case 2:
        unsigned int v21 = " [shape=box] [color=blue] ";
        unsigned __int16 v23 = a1;
        uint64_t v24 = 26;
        goto LABEL_17;
    }
    unsigned int v21 = " [shape=box] [color=black] ";
  }
  unsigned __int16 v23 = a1;
  uint64_t v24 = 27;
LABEL_17:
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v21, v24);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  uint64_t v26 = std::locale::use_facet(&v36, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v27 = *(unsigned __int8 *)(a5 + 23);
  if ((v27 & 0x80u) != 0) {
    uint64_t v27 = *(void *)(a5 + 8);
  }
  if (v27)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ xlabel=<<font color=\"violet\"> <B> <I>", 39);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" \"", 2);
    int v29 = *(char *)(a5 + 23);
    if (v29 >= 0) {
      uint64_t v30 = a5;
    }
    else {
      uint64_t v30 = *(void *)a5;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v31 = *(void *)(a5 + 8);
    }
    size_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"</I></B></font>> ]", 18);
  }
  uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)";", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  int v34 = std::locale::use_facet(&v36, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_100239988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_routeTlv_to_file(void *a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = *(void *)(a4 + 8);
  unsigned __int16 v8 = a1 + 71;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(a1[71] - 24) + 568));
  unint64_t v9 = std::locale::use_facet(&v69, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Route: ", 7);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  unint64_t v11 = std::locale::use_facet(&v69, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  __int16 v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"------ ", 7);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  std::locale v13 = std::locale::use_facet(&v69, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v69);
  std::ostream::put();
  std::ostream::flush();
  if (v7)
  {
    unsigned int v14 = *(unsigned __int8 *)(v7 + 1);
    if (v14 == 255) {
      unsigned int v14 = bswap32(*(unsigned __int16 *)(v7 + 2)) >> 16;
    }
    if (v14 <= 8)
    {
      long long v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERR: Route information not valid", 32);
      std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
      long long v65 = std::locale::use_facet(&v69, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"RouterSequenceId:", 17);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      uint64_t v16 = std::locale::use_facet(&v69, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v69);
      std::ostream::put();
      std::ostream::flush();
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      int v17 = std::locale::use_facet(&v69, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v69);
      std::ostream::put();
      std::ostream::flush();
      unsigned int v18 = 0;
      unsigned __int8 v19 = 0;
      do
      {
        if (((*(unsigned __int8 *)(v7 + (v18 >> 3) + 3) << (v18 & 7)) & 0x80) != 0)
        {
          v69.__locale_ = 0;
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          uint64_t Rloc16FromRouterId = getRloc16FromRouterId(v18);
          int v21 = Rloc16FromRouterId;
          convertUint16ToHexString(Rloc16FromRouterId, (uint64_t)&v69);
          unsigned int v22 = *(unsigned __int8 *)(v7 + v19 + 11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"RouteId:", 8);
          unsigned __int16 v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",  ", 3);
          uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Rloc16:", 7);
          if (v71 >= 0) {
            locale = &v69;
          }
          else {
            locale = v69.__locale_;
          }
          if (v71 >= 0) {
            uint64_t v26 = HIBYTE(v71);
          }
          else {
            uint64_t v26 = v70;
          }
          uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)locale, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",  ", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Cost:", 5);
          uint64_t v28 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",  ", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LQIn:", 5);
          int v29 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)",  ", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LQOut:", 6);
          uint64_t v30 = (ot *)(v22 >> 6);
          uint64_t v31 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",  ", 3);
          std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
          size_t v32 = std::locale::use_facet(&v72, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
          std::locale::~locale(&v72);
          std::ostream::put();
          std::ostream::flush();
          if (v21 != a2 && ot::LinkQualityToCost(v30) != 16)
          {
            if (a5)
            {
              uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
              int v34 = *(char *)(a3 + 23);
              if (v34 >= 0) {
                uint64_t v35 = a3;
              }
              else {
                uint64_t v35 = *(void *)a3;
              }
              if (v34 >= 0) {
                uint64_t v36 = *(unsigned __int8 *)(a3 + 23);
              }
              else {
                uint64_t v36 = *(void *)(a3 + 8);
              }
              uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
              uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\"", 1);
              uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" -> ", 4);
              unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\"", 1);
              if (v71 >= 0) {
                std::string::size_type v41 = &v69;
              }
              else {
                std::string::size_type v41 = v69.__locale_;
              }
              if (v71 >= 0) {
                uint64_t v42 = HIBYTE(v71);
              }
              else {
                uint64_t v42 = v70;
              }
              uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
              unint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\"", 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"[label=\"", 8);
              ot::LinkQualityToCost(v30);
              uint64_t v45 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\" weight=\"", 10);
              ot::LinkQualityToCost(v30);
              uint64_t v46 = (void *)std::ostream::operator<<();
              int v47 = "     \"];";
              uint64_t v48 = 8;
            }
            else
            {
              uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
              int v50 = *(char *)(a3 + 23);
              if (v50 >= 0) {
                uint64_t v51 = a3;
              }
              else {
                uint64_t v51 = *(void *)a3;
              }
              if (v50 >= 0) {
                uint64_t v52 = *(unsigned __int8 *)(a3 + 23);
              }
              else {
                uint64_t v52 = *(void *)(a3 + 8);
              }
              BOOL v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
              int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"\"", 1);
              int v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" -> ", 4);
              uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\"", 1);
              if (v71 >= 0) {
                uint64_t v57 = &v69;
              }
              else {
                uint64_t v57 = v69.__locale_;
              }
              if (v71 >= 0) {
                uint64_t v58 = HIBYTE(v71);
              }
              else {
                uint64_t v58 = v70;
              }
              uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
              int v47 = "\";";
              uint64_t v48 = 2;
            }
            int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
            uint64_t v60 = std::locale::use_facet(&v72, &std::ctype<char>::id);
            ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
            std::locale::~locale(&v72);
            std::ostream::put();
            std::ostream::flush();
          }
          if (SHIBYTE(v71) < 0) {
            operator delete(v69.__locale_);
          }
          ++v19;
        }
        ++v18;
      }
      while (v18 != 63);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
      uint64_t v61 = std::locale::use_facet(&v69, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
    }
  }
  else
  {
    int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERR: Route information not present", 34);
    std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
    uint64_t v63 = std::locale::use_facet(&v69, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
  }
  std::locale::~locale(&v69);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_10023A20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17)
{
}

uint64_t NetworkDiagnosticsLogger::output_connectivityTlv_to_file(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (void *)(a1 + 568);
  std::ios_base::getloc((const std::ios_base *)(a1 + 568 + *(void *)(*(void *)(a1 + 568) - 24)));
  uint64_t v5 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ConnectivityTLV: ", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  unsigned __int16 v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"----------------", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  unint64_t v9 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v10 = *(void *)(a3 + 40);
  if (!v10)
  {
    unsigned int v14 = "Connectivity TLV not present";
    uint64_t v15 = v4;
    uint64_t v16 = 28;
LABEL_9:
    std::locale v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v14, v16);
    goto LABEL_10;
  }
  unsigned int v11 = *(unsigned __int8 *)(v10 + 1);
  if (v11 == 255) {
    unsigned int v11 = bswap32(*(unsigned __int16 *)(v10 + 2)) >> 16;
  }
  if (v11 <= 9 && v11 != 7)
  {
    unsigned int v14 = "ERR: Connectivity TLV is not valid";
    uint64_t v15 = v4;
    uint64_t v16 = 34;
    goto LABEL_9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ActiveRouters = ", 16);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  IdSequence = ", 15);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  LeaderCost = ", 15);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  Parentpriority = ", 19);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  __int16 v12 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  SEDBufferstd::string::size_type size = ", 18);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  SEDDatagramint Count = ", 21);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  LQ1= ", 7);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  LQ2= ", 7);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  LQ3= ", 7);
  std::ostream::operator<<();
  std::locale v13 = v4;
LABEL_10:
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  int v17 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unsigned int v18 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unsigned __int8 v19 = std::locale::use_facet(&v21, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_10023A780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_macCountersTlv_to_file(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (void *)(a1 + 568);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 568), (uint64_t)"MacCountersTLV: ", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"----------------", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  unsigned __int16 v8 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v9 = *(void *)(a3 + 32);
  if (!v9)
  {
    __int16 v12 = "ERR: Mac counters TLV not present";
    std::locale v13 = v4;
    uint64_t v14 = 33;
LABEL_8:
    unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    goto LABEL_9;
  }
  unsigned int v10 = *(unsigned __int8 *)(v9 + 1);
  if (v10 == 255) {
    unsigned int v10 = bswap32(*(unsigned __int16 *)(v9 + 2)) >> 16;
  }
  if (v10 <= 0x23)
  {
    __int16 v12 = "ERR: Mac counters TLV is not valid";
    std::locale v13 = v4;
    uint64_t v14 = 34;
    goto LABEL_8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"IfInUcastPkts = ", 16);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   IfOutUcastPkts = ", 20);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   IfInBcastPkts = ", 19);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   IfOutBcastPkts = ", 20);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unsigned int v11 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"IfInErrors=", 11);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   IfOutErrors = ", 17);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   IfInDiscards = ", 18);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   IfOutDiscards = ", 19);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"   IfUnknownProtos = ", 21);
  std::ostream::operator<<();
LABEL_9:
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v15 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_10023AB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t NetworkDiagnosticsLogger::output_childTableTlv_to_file(void *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v8 = a1 + 71;
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 71, (uint64_t)"ChildTable: ", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  unsigned int v10 = std::locale::use_facet(&v78, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v78);
  std::ostream::put();
  std::ostream::flush();
  unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"----------- ", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  __int16 v12 = std::locale::use_facet(&v78, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v78);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v13 = *(void *)(a4 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v78);
  if (!v13)
  {
    uint64_t v16 = "ERR: ChildTable information not present";
    uint64_t v17 = 39;
LABEL_8:
    unsigned int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v16, v17);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    unsigned __int8 v19 = std::locale::use_facet(&v75, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v75);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_53;
  }
  int v14 = *(unsigned __int8 *)(v13 + 1);
  if (v14 == 255)
  {
    unsigned int v15 = bswap32(*(unsigned __int16 *)(v13 + 2)) >> 16;
    if ((unsigned __int16)(-21845 * v15) < 0x5556u) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if ((-1431655765 * v14) >= 0x55555556)
  {
LABEL_7:
    uint64_t v16 = "ERR: ChildTable information not valid";
    uint64_t v17 = 37;
    goto LABEL_8;
  }
  unsigned int v15 = *(unsigned __int8 *)(v13 + 1);
LABEL_10:
  unsigned int v20 = 43691 * v15;
  if ((v20 >> 17))
  {
    unsigned int v21 = v20 >> 17;
    BOOL v22 = v14 == 255;
    uint64_t v23 = v13 + 3;
    if (!v22) {
      uint64_t v23 = v13 + 1;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v25 = v21;
    do
    {
      v75.__locale_ = 0;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      unsigned __int16 v74 = 0;
      uint64_t Rloc16FromChildId = getRloc16FromChildId(a2, bswap32(*(_WORD *)v24 & 0xFF01) >> 16);
      unsigned __int16 v74 = Rloc16FromChildId;
      convertUint16ToHexString(Rloc16FromChildId, (uint64_t)&v75);
      if ((*(unsigned char *)(v24 + 2) & 8) != 0)
      {
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a5, &v74, &v74);
        int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"", 1);
        if (v77 >= 0) {
          locale = &v75;
        }
        else {
          locale = v75.__locale_;
        }
        if (v77 >= 0) {
          uint64_t v36 = HIBYTE(v77);
        }
        else {
          uint64_t v36 = v76;
        }
        uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
        uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\"", 1);
        uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" [shape=circle,color=red];",
                26);
        std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
        unint64_t v40 = std::locale::use_facet(&v85, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale(&v85);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a6, &v74, &v74);
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"", 1);
        if (v77 >= 0) {
          uint64_t v28 = &v75;
        }
        else {
          uint64_t v28 = v75.__locale_;
        }
        if (v77 >= 0) {
          uint64_t v29 = HIBYTE(v77);
        }
        else {
          uint64_t v29 = v76;
        }
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
        uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\"", 1);
        size_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" [shape=circle,color=orange];",
                29);
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
        uint64_t v33 = std::locale::use_facet(&v85, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale(&v85);
        std::ostream::put();
        std::ostream::flush();
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ChildId:", 8);
      std::string::size_type v41 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)",  ", 3);
      uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Rloc16:", 7);
      if (v77 >= 0) {
        uint64_t v43 = &v75;
      }
      else {
        uint64_t v43 = v75.__locale_;
      }
      if (v77 >= 0) {
        uint64_t v44 = HIBYTE(v77);
      }
      else {
        uint64_t v44 = v76;
      }
      uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)",  ", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Mode:", 5);
      uint64_t v46 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)",  ", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Timeout:", 8);
      std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
      int v47 = std::locale::use_facet(&v85, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
      int v49 = *(char *)(a3 + 23);
      if (v49 >= 0) {
        uint64_t v50 = a3;
      }
      else {
        uint64_t v50 = *(void *)a3;
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v51 = *(void *)(a3 + 8);
      }
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      BOOL v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\"", 1);
      int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" -> ", 4);
      int v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\"", 1);
      if (v77 >= 0) {
        uint64_t v56 = &v75;
      }
      else {
        uint64_t v56 = v75.__locale_;
      }
      if (v77 >= 0) {
        uint64_t v57 = HIBYTE(v77);
      }
      else {
        uint64_t v57 = v76;
      }
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\"", 1);
      uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"[color=\"brown\"];",
              16);
      std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
      uint64_t v61 = std::locale::use_facet(&v85, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v77) < 0) {
        operator delete(v75.__locale_);
      }
      v24 += 3;
      --v25;
    }
    while (v25);
  }
  else
  {
    int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ChildTable empty", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
    uint64_t v63 = std::locale::use_facet(&v75, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
    std::locale::~locale(&v75);
    std::ostream::put();
    std::ostream::flush();
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  long long v64 = std::locale::use_facet(&v75, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
  std::locale::~locale(&v75);
  std::ostream::put();
  std::ostream::flush();
LABEL_53:
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  long long v65 = std::locale::use_facet(&v75, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
  std::locale::~locale(&v75);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  long long v66 = std::locale::use_facet(&v75, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale(&v75);
  std::ostream::put();
  std::ostream::flush();
  if (v81 >= v82) {
    uint64_t v67 = ((uint64_t (*)(void (__cdecl ***)(std::stringbuf *__hidden)))v80[7])(&v80);
  }
  else {
    uint64_t v67 = v82 - v81;
  }
  if (v67) {
    std::ostream::operator<<();
  }
  *(void *)((char *)&v78
  uint64_t v79 = v68;
  if (v84 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10023B5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23)
{
}

void NetworkDiagnosticsLogger::output_data_to_file(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5, void *a6, void *a7)
{
  unsigned int v12 = a2;
  uint64_t v14 = a1[497];
  uint64_t v15 = a1[498];
  int v16 = *(unsigned __int8 *)(v15 + 49);
  int v21 = *(unsigned __int8 *)(v15 + 48);
  int v22 = *(unsigned __int8 *)(v15 + 50);
  __int16 v17 = *(_WORD *)(v15 + 6640);
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  convertUint16ToHexString(a2, (uint64_t)v24);
  NetworkDiagnosticsLogger::output_addr16tlv_to_file((uint64_t)a1, v12, (uint64_t)v24, v18, a4, (uint64_t)a5, (uint64_t)a6);
  memset(&__p, 0, sizeof(__p));
  NetworkDiagnosticsLogger::output_ipAddrListTlv_to_file((uint64_t)a1, v12, a3, &__p, a4, v16 != 0, v14 + 72, (void *)(v14 + 32), (void *)(v14 + 8));
  NetworkDiagnosticsLogger::output_node_to_dot_file(a1, v12, (uint64_t)v24, v19, (uint64_t)&__p, v20, v17, a5, a6, a7);
  if (*a4 != 3)
  {
    NetworkDiagnosticsLogger::output_routeTlv_to_file(a1, v12, (uint64_t)v24, a3, v21 != 0);
    NetworkDiagnosticsLogger::output_childTableTlv_to_file(a1, v12, (uint64_t)v24, a3, (uint64_t)a6, (uint64_t)a7);
  }
  if (v22)
  {
    NetworkDiagnosticsLogger::output_macCountersTlv_to_file((uint64_t)a1, 0, a3);
    NetworkDiagnosticsLogger::output_connectivityTlv_to_file((uint64_t)a1, 0, a3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
}

void sub_10023B804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__do_rehash<true>(a1, prime);
    }
  }
}

uint64_t ot::LinkQualityToCost(ot *this)
{
  unsigned int v1 = 0x1020410u >> (8 * (_BYTE)this);
  if (this >= 4) {
    LOBYTE(v1) = 16;
  }
  return v1;
}

BOOL ot::IsLoopback(ot *this, unsigned int *a2)
{
  return !*(_DWORD *)this && !*((_DWORD *)this + 1) && !*((_DWORD *)this + 2) && *((_DWORD *)this + 3) == 0;
}

BOOL ot::IsLinkLocal(ot *this, unsigned __int16 *a2)
{
  return (*(_WORD *)this & 0xC0FF) == 33022;
}

unsigned __int8 *ot::IsMulticast(unsigned __int8 *this, const unsigned __int8 *a2)
{
  if (this) {
    return (unsigned __int8 *)(*this == 255);
  }
  return this;
}

uint64_t ot::GetScope(ot *this, unsigned __int8 *a2)
{
  if (this && *(unsigned __int8 *)this == 255) {
    return *((unsigned char *)this + 1) & 0xF;
  }
  if ((*(_WORD *)this & 0xC0FF) == 0x80FE) {
    return 2;
  }
  if (*(_DWORD *)this || *((_DWORD *)this + 1)) {
    return 14;
  }
  int v4 = *((_DWORD *)this + 2);
  uint64_t result = 14;
  if (!v4)
  {
    if (*((_DWORD *)this + 3)) {
      return 14;
    }
    else {
      return 0;
    }
  }
  return result;
}

ot *ot::IsMulticastLargerThanRealmLocal(ot *this, unsigned __int8 *a2)
{
  if (this)
  {
    if (*(unsigned __int8 *)this == 255) {
      return (ot *)(ot::GetScope(this, a2) > 3);
    }
    else {
      return 0;
    }
  }
  return this;
}

unint64_t ot::otPlatTimeGet(ot *this)
{
  gettimeofday(&v2, 0);
  return 1000 * v2.tv_sec + v2.tv_usec / 0x3E8uLL;
}

unint64_t ot::MsecToSec(unint64_t this)
{
  return this / 0x3E8;
}

unint64_t ot::UsecToSec(unint64_t this)
{
  return this / 0xF4240;
}

const char *ot::ErrorToString(unsigned int a1)
{
  if (a1 > 0x24) {
    return "UnknownErrorType";
  }
  else {
    return ot::ErrorToString(ot::otError)::kErrorStrings[a1];
  }
}

void startThreadDiagnosticsManagerBridge(void)
{
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v1 = dispatch_queue_create("wpantund.TDM.Queue", v0);
  timeval v2 = (void *)tdm_queue;
  tdm_queue = (uint64_t)v1;

  if (!tdm_queue)
  {
    unsigned int v10 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      startThreadDiagnosticsManagerBridge(v10);
    }

    __assert_rtn("startThreadDiagnosticsManagerBridge", "ThreadDiagnosticsManagerBridge.mm", 34, "false");
  }
  int v3 = [ThreadDiagnosticsManagerInstance alloc];
  id v4 = [(ThreadDiagnosticsManagerInstance *)v3 init:tdm_queue];
  unint64_t v5 = (void *)tdm_instance;
  tdm_instance = (uint64_t)v4;

  uint64_t v6 = tdm_instance;
  uint64_t v7 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  unsigned __int16 v8 = v7;
  if (!v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      startThreadDiagnosticsManagerBridge(v8);
    }

    __assert_rtn("startThreadDiagnosticsManagerBridge", "ThreadDiagnosticsManagerBridge.mm", 42, "false");
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    unsigned int v12 = "startThreadDiagnosticsManagerBridge";
    __int16 v13 = 2112;
    uint64_t v14 = tdm_instance;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s: Instance is initiated : %@, signalling semaphore.", (uint8_t *)&v11, 0x16u);
  }

  dispatch_semaphore_signal((dispatch_semaphore_t)tdm_instance_init_semaphore);
  uint64_t v9 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315138;
    unsigned int v12 = "startThreadDiagnosticsManagerBridge";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s: instance semaphore is signalled...", (uint8_t *)&v11, 0xCu);
  }
}

void threadDiagnosticsManager_MsgHandlerBridge(const std::string::value_type *a1@<X0>, xpc::object *a2@<X1>, void **a3@<X8>)
{
  if (tdm_queue)
  {
    if (!tdm_instance)
    {
      uint64_t v6 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "threadDiagnosticsManager_MsgHandlerBridge";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: instance semaphore is waiting...", (uint8_t *)&buf, 0xCu);
      }

      dispatch_semaphore_wait((dispatch_semaphore_t)tdm_instance_init_semaphore, 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v7 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      unsigned __int16 v8 = a1;
      if (a1[23] < 0) {
        unsigned __int16 v8 = *(const std::string::value_type **)a1;
      }
      xpc::object::to_string((uint64_t *)&buf, a2);
      if (v24 >= 0) {
        p_long long buf = &buf;
      }
      else {
        p_long long buf = (long long *)buf;
      }
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v26 = v8;
      __int16 v27 = 2080;
      uint64_t v28 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TDM Handling command for client %s with inputs %s", v25, 0x16u);
      if (v24 < 0) {
        operator delete((void *)buf);
      }
    }

    unsigned int v10 = (void *)tdm_instance;
    if (a1[23] < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a1, *((void *)a1 + 1));
    }
    else {
      std::string v22 = *(std::string *)a1;
    }
    xpc::dict::dict((xpc::dict *)&v21, (id *)a2);
    if (v10) {
      objc_msgSend(v10, "threadDiagnosticsManagerInstance_MsgHandler:message:", &v22, &v21);
    }
    else {
      *a3 = 0;
    }
    id v19 = v21;
    id v21 = 0;

    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v11 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      if (a1[23] < 0) {
        a1 = *(const std::string::value_type **)a1;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "TDM Msg received from client %s before TDM is started", (uint8_t *)&buf, 0xCu);
    }

    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v13 = v12;
    if (!v12) {
      xpc_object_t v13 = xpc_null_create();
    }

    id v14 = v13;
    uint64_t v15 = v14;
    *a3 = v14;
    if (!v14 || xpc_get_type(v14) != (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v16 = xpc_null_create();
      __int16 v17 = *a3;
      *a3 = v16;
    }
    *(void *)&long long buf = a3;
    *((void *)&buf + 1) = "ret";
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v20);
    id v18 = v20;
    id v20 = 0;
  }
}

void sub_10023C09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void startThreadDiagnosticsManagerBridge(os_log_t log)
{
  int v1 = 136315138;
  timeval v2 = "startThreadDiagnosticsManagerBridge";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: Failed to create tdm queue, unexpected scenario, asserting...", (uint8_t *)&v1, 0xCu);
}

{
  int v1;
  const char *v2;

  int v1 = 136315138;
  timeval v2 = "startThreadDiagnosticsManagerBridge";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: Failed to create Thread Diagnostics Manager Instance, unexpected scenario, asserting...", (uint8_t *)&v1, 0xCu);
}

void _GLOBAL__sub_I_ThreadDiagnosticsManagerBridge_mm()
{
  tdm_instance_init_semaphore = (uint64_t)dispatch_semaphore_create(0);
}

void NetworkDiagnosticsManager::NetworkDiagnosticsManager(NetworkDiagnosticsManager *this)
{
  timeval v2 = (NetworkDiagnosticsConfigDb *)((char *)NetworkDiagnosticsConfigDb::NetworkDiagnosticsConfigDb(this) + 6752);
  NetworkDiagnosticsMdnsResolver::NetworkDiagnosticsMdnsResolver(v2, this);
  NetworkDiagnosticsLogger::NetworkDiagnosticsLogger((NetworkDiagnosticsManager *)((char *)this + 7456), v2, this);
  NetworkDiagnosticsReqTransmitReceive::NetworkDiagnosticsReqTransmitReceive((uint64_t)this + 11448, (uint64_t)this, (uint64_t)this + 7456);
  NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig((NetworkDiagnosticsManager *)((char *)this + 11736));
  *(_OWORD *)((char *)this + 11768) = 0u;
  *((void *)this + 1473) = 0;
  *(unsigned char *)(v3 + 56) = 1;
  *(void *)((char *)this + 11756) = 0xE1A0000000FLL;
  *(_WORD *)(v3 + 1) = 257;
  *(unsigned char *)(v3 + 3) = 1;
  *(_OWORD *)(v3 + 4) = xmmword_1003F6D30;
  atomic_store(1u, (unsigned __int8 *)v3);
  *((_DWORD *)this + 2916) = 0;
}

void sub_10023C310(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;
  NetworkDiagnosticsReqTransmitReceive::~NetworkDiagnosticsReqTransmitReceive(v5);
  NetworkDiagnosticsLogger::~NetworkDiagnosticsLogger(v3);
  NetworkDiagnosticsMdnsResolver::~NetworkDiagnosticsMdnsResolver(v2);
  NetworkDiagnosticsConfigDb::~NetworkDiagnosticsConfigDb(v1);
  _Unwind_Resume(a1);
}

void NetworkDiagnosticsReqTransmitReceive::~NetworkDiagnosticsReqTransmitReceive(NetworkDiagnosticsReqTransmitReceive *this)
{
  timeval v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
  std::unordered_set<unsigned short>::~unordered_set[abi:ne180100]((uint64_t)this + 168);
  std::unordered_set<unsigned short>::~unordered_set[abi:ne180100]((uint64_t)this + 128);
  std::unordered_set<unsigned short>::~unordered_set[abi:ne180100]((uint64_t)this + 88);
  std::unordered_set<unsigned short>::~unordered_set[abi:ne180100]((uint64_t)this + 48);
  std::unordered_set<unsigned short>::~unordered_set[abi:ne180100]((uint64_t)this + 8);
}

void NetworkDiagnosticsConfigDb::~NetworkDiagnosticsConfigDb(void **this)
{
  timeval v2 = (char *)this + 6639;
  if (*((char *)this + 6735) < 0) {
    operator delete(this[839]);
  }
  if (v2[72] < 0) {
    operator delete(this[836]);
  }
  if (v2[48] < 0) {
    operator delete(this[833]);
  }
  if (*v2 < 0) {
    operator delete(this[827]);
  }
  NetworkDiagnosticsLogFileDescriptors::~NetworkDiagnosticsLogFileDescriptors((NetworkDiagnosticsLogFileDescriptors *)(this + 46));
  NetworkDiagnosticsLogFileNames::~NetworkDiagnosticsLogFileNames(this + 7);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t NetworkDiagnosticsManager::cleanup(uint64_t this, int a2, int a3)
{
  uint64_t v3 = (unsigned char *)(this + 11792);
  if (!*(unsigned char *)(this + 11792))
  {
    uint64_t v6 = this;
    uint64_t v7 = (unsigned char *)(this + 6736);
    if (*(unsigned char *)(this + 6736))
    {
      int v8 = *(_DWORD *)(this + 6740);
      int v9 = *(unsigned __int8 *)(this + 6744);
      logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        v11[0] = 67109888;
        v11[1] = v8;
        __int16 v12 = 1024;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = a2;
        __int16 v16 = 1024;
        int v17 = a3;
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, " NetworkDiagnosticsManager::cleanup sys diag triggerd previously. Restore old config prevSendToChildMode=%d isPrevProcessDnsFlagEnabled=%d status=%d resetFlag=%d ", (uint8_t *)v11, 0x1Au);
      }
      *(_DWORD *)(v6 + 44) = v8;
      *(unsigned char *)(v6 + 49) = v9;
      unsigned char *v7 = 0;
      v7[8] = 1;
      *(_DWORD *)(v6 + 6740) = 2;
    }
    NetworkDiagnosticsReqTransmitReceive::cleanup((NetworkDiagnosticsLogger **)(v6 + 11448), a2, a3);
    NetworkDiagnosticsMdnsResolver::cleanup((NetworkDiagnosticsMdnsResolver *)(v6 + 6752), a2, a3);
    if (a3) {
      *(void *)(v6 + 11776) = *(void *)(v6 + 11768);
    }
    this = NetworkDiagnosticsConfigDb::closeFiles((NetworkDiagnosticsConfigDb *)v6);
    *uint64_t v3 = 1;
  }
  return this;
}

uint64_t NetworkDiagnosticsManager::cleanupForNextIteration(NetworkDiagnosticsManager *this)
{
  if (*((unsigned char *)this + 11696) && (!*(_DWORD *)(*((void *)this + 1431) + 44) || *((unsigned char *)this + 11697)))
  {
    AWDMetricsClient_UpdateMetrics_Topology(*((_DWORD *)this + 2890), *((_DWORD *)this + 2900), *((_DWORD *)this + 2910));
    CAMetricsClient_UpdateMetrics_Topology(*((_DWORD *)this + 2890), *((_DWORD *)this + 2900), *((_DWORD *)this + 2910));
    int v2 = 1;
  }
  else
  {
    int v2 = 0;
  }

  return NetworkDiagnosticsManager::cleanup((uint64_t)this, v2, 1);
}

BOOL NetworkDiagnosticsManager::handle_networkdiagnostics_response(NetworkDiagnosticsManager *this, unsigned __int8 *a2, unsigned int a3)
{
  id v4 = (char *)this + 11448;
  BOOL v5 = NetworkDiagnosticsReqTransmitReceive::handle_network_diagnostics_response((NetworkDiagnosticsManager *)((char *)this + 11448), a2, a3);
  if (v5 && *((unsigned char *)this + 11696) && (!*(_DWORD *)(*(void *)v4 + 44) || *((unsigned char *)this + 11697))) {
    NetworkDiagnosticsManager::cleanupForNextIteration(this);
  }
  return v5;
}

uint64_t NetworkDiagnosticsManager::initialize(NetworkDiagnosticsManager *this)
{
  int v2 = (NetworkDiagnosticsManager *)((char *)this + 11736);
  current_time(v6);
  *((unsigned char *)v2 + 56) = 0;
  NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig((NetworkDiagnosticsPendingConfig *)v5, v2);
  if (NetworkDiagnosticsConfigDb::initialize((uint64_t)this, (uint64_t)v6)
    && (atomic_store(0, (unsigned __int8 *)v2),
        NetworkDiagnosticsMdnsResolver::initialize((uint64_t)this + 6752, (void *)this + 22, (uint64_t)this + 200, *((unsigned int *)this + 6), *((unsigned int *)this + 7), (uint64_t)v6)))
  {
    uint64_t v3 = NetworkDiagnosticsLogger::initialize((void *)this + 932, (uint64_t)this + 320, (uint64_t)this + 56, (uint64_t)this + 80, (uint64_t)this + 104, (uint64_t)this + 344, (uint64_t)this + 200, (uint64_t)this + 296, (uint64_t)this + 248, (uint64_t)this + 272, (uint64_t)v6);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v3;
}

void sub_10023C7A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

void NetworkDiagnosticsManager::updatePendingConfig(NetworkDiagnosticsManager *this, char a2, int a3, char a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10)
{
  __int16 v14 = (unsigned __int8 *)this + 11736;
  atomic_store(0, (unsigned __int8 *)this + 11736);
  if (a10 < 0x12D)
  {
    *((_OWORD *)this + 734) = xmmword_1003F6D60;
    if (a10) {
      *((_DWORD *)this + 2940) = 3610;
    }
    else {
      *((_DWORD *)this + 2940) = 0;
    }
    *(_WORD *)((char *)this + 11737) = 257;
    *((unsigned char *)this + 11739) = 1;
    *((_DWORD *)this + 2935) = 2;
  }
  else
  {
    *((_DWORD *)this + 2936) = a6;
    *((_DWORD *)this + 2937) = a7;
    *((_DWORD *)this + 2938) = a8;
    *((_DWORD *)this + 2939) = a9;
    *((_DWORD *)this + 2940) = a10;
    *((unsigned char *)this + 11738) = a3;
    *((unsigned char *)this + 11737) = a2;
    *((unsigned char *)this + 11739) = a4;
    *((_DWORD *)this + 2935) = a5;
  }
  atomic_store(1u, v14);
  logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    int v16 = *((_DWORD *)this + 2940);
    int v17 = *((_DWORD *)this + 10);
    int v18 = v14[1];
    int v19 = v14[3];
    int v20 = *((_DWORD *)this + 2938);
    int v21 = *((_DWORD *)this + 2939);
    int v22 = *((_DWORD *)this + 2936);
    int v23 = *((_DWORD *)this + 2937);
    v24[0] = 67111424;
    v24[1] = v16;
    __int16 v25 = 1024;
    int v26 = v17;
    __int16 v27 = 1024;
    int v28 = a3;
    __int16 v29 = 1024;
    int v30 = a5;
    __int16 v31 = 1024;
    int v32 = v18;
    __int16 v33 = 1024;
    int v34 = v19;
    __int16 v35 = 1024;
    int v36 = v20;
    __int16 v37 = 1024;
    int v38 = v21;
    __int16 v39 = 1024;
    int v40 = v22;
    __int16 v41 = 1024;
    int v42 = v23;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM: NetworkDiagnosticsManager::updatePendingConfig newPendingPeriodicity=%d curConfigPeriodicity=%d  processdns=%d sendTochildren=%d expandEdges=%d enhancedTlvReq=%d browseTimeout=%d resolveTimeout=%d routerRspTimeout=%d childRspTimeout=%d", (uint8_t *)v24, 0x3Eu);
  }
}

void NetworkDiagnosticsManager::updateNCPProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, __int16 a7, __int16 a8, int a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v17 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v16 = *(std::string *)a4;
  }
  NetworkDiagnosticsConfigDb::updateNCPProperties(a1, &v18, &v17, &v16, a5, a6, a7, a8, a9);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_10023CAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

BOOL NetworkDiagnosticsManager::browseServices(NetworkDiagnosticsManager *this)
{
  logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM: Start Browse services", (uint8_t *)v10, 2u);
  }
  int started = NetworkDiagnosticsMdnsResolver::MyStartBrowsingForServices((NetworkDiagnosticsManager *)((char *)this + 6752));
  if (started)
  {
    LODWORD(v4) = *((_DWORD *)this + 6);
    CFRunLoopRunInMode(kCFRunLoopDefaultMode, (double)v4, 0);
    BOOL v5 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = -252645135 * ((*((void *)this + 846) - *((void *)this + 845)) >> 3);
      int v7 = *((unsigned __int8 *)this + 7440);
      v10[0] = 67109376;
      v10[1] = v6;
      __int16 v11 = 1024;
      int v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TDM: Browse service completed Total services discovered:%d browseServiceCompletedFlag=%d", (uint8_t *)v10, 0xEu);
    }
    if (!*((unsigned char *)this + 7440)) {
      NetworkDiagnosticsMdnsResolver::MyStopBrowsingForServices((NetworkDiagnosticsManager *)((char *)this + 6752), *((CFNetServiceBrowserRef *)this + 931));
    }
  }
  else
  {
    int v8 = log_get_logging_obg("com.apple.wpantund.tdm", "default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      NetworkDiagnosticsManager::browseServices(v8);
    }
  }
  return started != 0;
}

uint64_t NetworkDiagnosticsManager::resolveServices(NetworkDiagnosticsManager *this)
{
  NetworkDiagnosticsMdnsResolver::MyResolveService((NetworkDiagnosticsManager *)((char *)this + 6752));
  logging_obg = log_get_logging_obg("com.apple.wpantund.tdm", "default");
  if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
  {
    int v3 = *((_DWORD *)this + 1716);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "TDM: Resolved services: Total Services Resolved=%d", (uint8_t *)v5, 8u);
  }
  return 1;
}

uint64_t NetworkDiagnosticsManager::startDiagnostics(NetworkDiagnosticsManager *this)
{
  int v2 = (unsigned __int8 *)this + 11736;
  NetworkDiagnosticsPendingConfig::NetworkDiagnosticsPendingConfig((NetworkDiagnosticsPendingConfig *)v4, (NetworkDiagnosticsManager *)((char *)this + 11736));
  if (NetworkDiagnosticsConfigDb::update((uint64_t)this, (uint64_t)v4))
  {
    atomic_store(0, v2);
    if (!*((unsigned char *)this + 49)) {
      goto LABEL_5;
    }
    if (NetworkDiagnosticsManager::browseServices(this))
    {
      NetworkDiagnosticsManager::resolveServices(this);
LABEL_5:
      *((_DWORD *)this + 2916) = 1;
      uint64_t result = NetworkDiagnosticsReqTransmitReceive::send_networkdiagnostics_get_to_self_ncp((uint64_t)this + 11448, (uint64_t *)this + 839);
      if (result) {
        return result;
      }
    }
  }
  return NetworkDiagnosticsManager::cleanup((uint64_t)this, 0, 1);
}

void NetworkDiagnosticsLogger::~NetworkDiagnosticsLogger(NetworkDiagnosticsLogger *this)
{
  *(void *)((char *)this + *(void *)(v3 - 24) + 3408) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 355) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 2840) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 284) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 2272) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 213) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 1704) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 142) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 1136) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 71) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 568) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *(void *)this = v2;
  *(void *)((char *)this + *(void *)(v2 - 24)) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void NetworkDiagnosticsLogFileDescriptors::~NetworkDiagnosticsLogFileDescriptors(NetworkDiagnosticsLogFileDescriptors *this)
{
  *(void *)((char *)this + *(void *)(v3 - 24) + 5680) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 639) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 5112) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 568) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 4544) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 497) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 3976) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 426) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 3408) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 355) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 2840) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 284) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 2272) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 213) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 1704) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 142) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 1136) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *((void *)this + 71) = v2;
  *(void *)((char *)this + *(void *)(v2 - 24) + 568) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *(void *)this = v2;
  *(void *)((char *)this + *(void *)(v2 - 24)) = v4;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void NetworkDiagnosticsManager::browseServices(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "TDM: Error browsing for services", v1, 2u);
}

std::string *padString(std::string *result, std::string::size_type a2, std::string::value_type __c)
{
  if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = result->__r_.__value_.__l.__size_;
    if (size >= a2) {
      return result;
    }
    BOOL v5 = (std::string *)result->__r_.__value_.__r.__words[0];
    uint64_t v4 = (char *)(result->__r_.__value_.__r.__words[0] + size);
  }
  else
  {
    std::string::size_type size = HIBYTE(result->__r_.__value_.__r.__words[2]);
    if (size >= a2) {
      return result;
    }
    uint64_t v4 = (char *)result + size;
    BOOL v5 = result;
  }
  return std::string::insert(result, v4 - (char *)v5, a2 - size, __c);
}

void *convertNodeTypeForDisplay@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    uint64_t v2 = "INVALID";
  }
  else {
    uint64_t v2 = off_10049C758[a1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t getRloc16FromRouterId(char a1)
{
  return (a1 & 0x3F) << 10;
}

uint64_t getRloc16FromChildId(__int16 a1, __int16 a2)
{
  return a1 & 0xFC00 | a2 & 0x1FFu;
}

uint64_t convertUint16ToHexString(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"0x", 2);
  LOBYTE(v6) = 48;
  uint64_t v3 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, (char *)&v6);
  *(void *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 4;
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) = *(_DWORD *)((unsigned char *)&v9[1] + *(void *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  *(void *)((char *)v8
  v9[0] = v4;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10023D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *current_time@<X0>(void *a1@<X8>)
{
  gettimeofday(&v4, 0);
  uint64_t v2 = localtime(&v4.tv_sec);
  strftime(__format, 0x40uLL, "%H:%M:%S:%%06u", v2);
  snprintf(__str, 0x40uLL, __format, v4.tv_usec);
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

void getDestinationIPv6FromPrefixAndRloc16(int a1, const void **a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "ff:fe00:");
  sprintf(__s, "%x", a1);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t v7 = &v13;
  std::string::basic_string[abi:ne180100]((uint64_t)&v13, v6 + 8);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "ff:fe00:");
  if ((v16 & 0x80u) == 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v10 = v16;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  __int16 v11 = std::string::append(&v13, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)a3, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
}

void sub_10023DB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t getNodeType(unsigned __int16 a1, void *a2, void *a3, void *a4)
{
  unsigned __int16 v7 = a1;
  if ((a1 & 0x1FF) == 0
    || std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(a2, &v7))
  {
    return 2;
  }
  if (std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(a3, &v7))
  {
    return 1;
  }
  if (std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(a4, &v7))
  {
    return 0;
  }
  return 3;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t **std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  size_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

char *toLower(char *a1)
{
  bufIndex = (bufIndex + 1) % 5;
  for (uint64_t i = strcpy(&tempString[100 * bufIndex], a1); *i; ++i)
  {
    if (*i <= 64 || *i >= 91) {
      char v2 = *i;
    }
    else {
      char v2 = *i | 0x60;
    }
    *uint64_t i = v2;
  }
  return &tempString[100 * bufIndex];
}

BOOL isSupportedPlatform(void)
{
  ot::Posix::HardwareIdentifier::HardwareIdentifier((ot::Posix::HardwareIdentifier *)&v3);
  *(_OWORD *)unint64_t v5 = 0u;
  long long v6 = 0u;
  uint64_t ChipsetFromHWIdentifiers = ot::Posix::HardwareIdentifier::getChipsetFromHWIdentifiers(&v3);
  ot::Posix::HardwareIdentifier::getSteppingFromHWIdentifiers(&v3, v5, 0x20u);
  BOOL v4 = ChipsetFromHWIdentifiers != 4399 || (v0 = toLower(v5), !strstr[abi:nn180100](v0, "c0"));
  return v4;
}

ot::Posix::HardwareIdentifier *ot::Posix::HardwareIdentifier::HardwareIdentifier(ot::Posix::HardwareIdentifier *this)
{
  return this;
}

uint64_t ot::Posix::HardwareIdentifier::getChipsetFromHWIdentifiers(CFDictionaryRef *this)
{
  char v19 = this;
  if (ot::Posix::HardwareIdentifier::getHWIdentifiers((ot::Posix::HardwareIdentifier *)this))
  {
    uint64_t valuePtr = 0;
    CFNumberRef Value = 0;
    CFNumberRef Value = (CFNumberRef)CFDictionaryGetValue(*this, @"C");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
      CFRelease(*this);
      *this = 0;
      if (valuePtr == 276347) {
        return 4377;
      }
      return valuePtr;
    }
    else
    {
      os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t oslog = logging_obg;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          char v2 = oslog;
          os_log_type_t v3 = v8;
          __os_log_helper_16_0_0(v7);
          _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get chipset(C) from HWIdentifiers property", v7, 2u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v21, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v21, 0x16u);
      }
      CFRelease(*this);
      *this = 0;
      return 0;
    }
  }
  else
  {
    os_log_t v18 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v18 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v17 = v18;
      char v16 = 1;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        log = v17;
        os_log_type_t type = v16;
        __os_log_helper_16_0_0(v15);
        _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to get HWIdentifiers property, while trying to pull chipset", v15, 2u);
      }
    }
    else if (!v18)
    {
      os_log_t v14 = (os_log_t)&_os_log_default;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v22, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v14, v13, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v22, 0x16u);
      }
    }
    return 0;
  }
}

void *ot::Posix::HardwareIdentifier::getSteppingFromHWIdentifiers(CFDictionaryRef *this, char *a2, unsigned __int16 a3)
{
  return ot::Posix::HardwareIdentifier::getStringFromHWIdentifiers(this, 115, a2, a3);
}

char *strstr[abi:nn180100](char *a1, const char *a2)
{
  return strstr(a1, a2);
}

void getFilePathFromDirectory(char *a1, char *a2, const char *a3, unsigned __int8 a4)
{
  uint64_t v60 = a1;
  int v59 = a2;
  uint64_t v58 = a3;
  unsigned __int8 v57 = a4;
  d_name = 0;
  memset(v65, 0, sizeof(v65));
  memset(v64, 0, sizeof(v64));
  memset(__s1, 0, sizeof(__s1));
  int v54 = 0;
  char v55 = 0;
  int v52 = 0;
  char v53 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = "154_p";
  int v49 = "154_evt";
  uint64_t v48 = "154_final";
  char v47 = 0;
  char v46 = 0;
  uint64_t v45 = 0;
  ot::Posix::HardwareIdentifier::HardwareIdentifier((ot::Posix::HardwareIdentifier *)&v44);
  uint64_t ChipsetFromHWIdentifiers = ot::Posix::HardwareIdentifier::getChipsetFromHWIdentifiers(&v44);
  ot::Posix::HardwareIdentifier::getSteppingFromHWIdentifiers(&v44, (char *)v65, 0x20u);
  ot::Posix::HardwareIdentifier::getPlatformFromHWIdentifiers(&v44, (char *)v64, 0x20u);
  ot::Posix::HardwareIdentifier::getVendorFromHWIdentifiers(&v44, (char *)__s1, 0x20u);
  otLogWarnPlat("chipsetVal = %llu, chipsetStepping = %s, platform = %s, vendor = %s", v4, v5, v6, v7, v8, v9, v10, ChipsetFromHWIdentifiers);
  memset(v62, 0, sizeof(v62));
  ot::Posix::HardwareIdentifier::getSKUFromSystem((ot::Posix::HardwareIdentifier *)&v44, (char *)v62, 0x20u);
  memset(v61, 0, sizeof(v61));
  size_t v11 = strlen((const char *)v62);
  snprintf(v61, v11 + 2, "_%s", (const char *)v62);
  if (!ChipsetFromHWIdentifiers || !LOBYTE(v65[0]) || !LOBYTE(v64[0]) || !LOBYTE(__s1[0])) {
    return;
  }
  if (!strcmp((const char *)__s1, "u"))
  {
    uint64_t v51 = "os_usi";
  }
  else if (!strcmp((const char *)__s1, "g"))
  {
    uint64_t v51 = "os_stats";
  }
  else
  {
    uint64_t v51 = "os_amkor";
  }
  snprintf(v66, 8uLL, "%llu", ChipsetFromHWIdentifiers);
  LOBYTE(v64[0]) = toupper(SLOBYTE(v64[0]));
  int v42 = opendir(v59);
  if (!v42)
  {
    otLogWarnPlat("Could not open PTB/BANDEDGE folder path directory", v12, v13, v14, v15, v16, v17, v18, v34);
    return;
  }
  while (1)
  {
    uint64_t v45 = readdir(v42);
    if (!v45) {
      break;
    }
    int v26 = toLower(v45->d_name);
    if (strstr[abi:nn180100](v26, v58))
    {
      int v38 = toLower(v45->d_name);
      __int16 v27 = toLower(v66);
      if (strstr[abi:nn180100](v38, v27))
      {
        __int16 v37 = toLower(v45->d_name);
        uint64_t v28 = toLower((char *)v65);
        if (strstr[abi:nn180100](v37, v28))
        {
          int v36 = toLower(v45->d_name);
          __int16 v29 = toLower((char *)v64);
          if (strstr[abi:nn180100](v36, v29))
          {
            int v30 = toLower(v45->d_name);
            if (strstr[abi:nn180100](v30, v51))
            {
              if (strstr[abi:nn180100](v45->d_name, "154")
                && ((ot::Posix::HardwareIdentifier::isIPad((ot::Posix::HardwareIdentifier *)&v44) & 1) != 0
                 || !ot::Posix::HardwareIdentifier::isSKUSpecificiPhone((ot::Posix::HardwareIdentifier *)&v44)
                 || strstr[abi:nn180100](v45->d_name, v61)
                 && (!strcmp((const char *)v62, sku_list[0])
                  || !strcmp((const char *)v62, off_1004B5E00[0])
                  || !strcmp((const char *)v62, off_1004B5E08[0])
                  || !strcmp((const char *)v62, off_1004B5E10[0])
                  || !strcmp((const char *)v62, off_1004B5E18))))
              {
                __int16 v31 = toLower(v45->d_name);
                __int16 v41 = strstr[abi:nn180100](v31, v50);
                int v32 = toLower(v45->d_name);
                int v40 = strstr[abi:nn180100](v32, v49);
                __int16 v33 = toLower(v45->d_name);
                __int16 v39 = strstr[abi:nn180100](v33, v48);
                if ((v47 & 1) == 0 && v39)
                {
                  char v47 = 1;
                  int v54 = 0;
                  char v55 = 0;
                }
                if ((v47 & 1) == 0 && (v46 & 1) == 0 && v40)
                {
                  char v46 = 1;
                  int v54 = 0;
                  char v55 = 0;
                }
                if (((v47 & 1) != 1 || !v40 && !v41) && ((v46 & 1) != 1 || !v41))
                {
                  int v52 = 0;
                  char v53 = 0;
                  if ((v47 & 1) == 1)
                  {
                    LOWORD(v52) = *(_WORD *)&v39[strlen(v48)];
                    BYTE2(v52) = 0;
                    if (!(_BYTE)v54 || SBYTE1(v52) > SBYTE1(v54))
                    {
                      char v55 = 0;
                      int v54 = (unsigned __int16)v52;
LABEL_57:
                      d_name = v45->d_name;
                      size_t v35 = strlen(v59);
                      if (v35 + strlen(v45->d_name) < v57 - 1)
                      {
                        strlcpy(v60, v59, v57);
                        strcat(v60, d_name);
                      }
                    }
                  }
                  else if ((v46 & 1) == 1)
                  {
                    LOWORD(v52) = *(_WORD *)&v40[strlen(v49)];
                    BYTE2(v52) = 0;
                    if (!(_BYTE)v54 || SBYTE1(v52) > SBYTE1(v54))
                    {
                      char v55 = 0;
                      int v54 = (unsigned __int16)v52;
                      goto LABEL_57;
                    }
                  }
                  else
                  {
                    int v52 = *(_DWORD *)&v41[strlen(v50) - 1];
                    char v53 = 0;
                    if (!(_BYTE)v54
                      || SBYTE1(v52) > SBYTE1(v54)
                      || SBYTE1(v52) == SBYTE1(v54) && SHIBYTE(v52) > SHIBYTE(v54))
                    {
                      char v55 = 0;
                      int v54 = v52;
                      goto LABEL_57;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (*v60) {
    otLogWarnPlat("Load file: %s, version %s ", v19, v20, v21, v22, v23, v24, v25, (char)v60);
  }
  else {
    otLogWarnPlat("Failed to find the right %s file", v19, v20, v21, v22, v23, v24, v25, (char)v58);
  }
  closedir(v42);
}

void *ot::Posix::HardwareIdentifier::getPlatformFromHWIdentifiers(CFDictionaryRef *this, char *a2, unsigned __int16 a3)
{
  return ot::Posix::HardwareIdentifier::getStringFromHWIdentifiers(this, 80, a2, a3);
}

void *ot::Posix::HardwareIdentifier::getVendorFromHWIdentifiers(CFDictionaryRef *this, char *a2, unsigned __int16 a3)
{
  return ot::Posix::HardwareIdentifier::getStringFromHWIdentifiers(this, 86, a2, a3);
}

void *ot::Posix::HardwareIdentifier::getSKUFromSystem(ot::Posix::HardwareIdentifier *this, char *a2, unsigned __int16 a3)
{
  uint64_t v18 = this;
  uint64_t v17 = a2;
  unsigned __int16 v16 = a3;
  bzero(a2, a3);
  memset(__src, 0, 32);
  unsigned __int8 v15 = 8;
  unsigned __int8 v14 = 11;
  char v13 = 0;
  CFDataRef v12 = (const __CFData *)MGCopyAnswer();
  if (v12)
  {
    if (CFDataGetLength(v12) == 16)
    {
      BytePtr = CFDataGetBytePtr(v12);
      for (int i = v15; i <= v14; ++i)
      {
        if (BytePtr[i] > 0x20u) {
          __src[v13++] = BytePtr[i];
        }
      }
    }
    CFRelease(v12);
  }
  else
  {
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t oslog = logging_obg;
      os_log_type_t type = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        log = oslog;
        os_log_type_t v5 = type;
        __os_log_helper_16_0_0(v6);
        _os_log_impl((void *)&_mh_execute_header, log, v5, "SKU could not be determined", v6, 2u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v19, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v19, 0x16u);
    }
  }
  memcpy(v17, __src, v13);
  return v17;
}

int toupper(int _c)
{
  return __toupper(_c);
}

{
  return toupper(_c);
}

uint64_t ot::Posix::HardwareIdentifier::isIPad(ot::Posix::HardwareIdentifier *this)
{
  CFStringRef v3 = (const __CFString *)MGGetStringAnswer();
  if (!v3) {
    goto LABEL_12;
  }
  *(void *)buffer = 0;
  uint64_t v8 = 0;
  CFStringGetCString(v3, buffer, 16, 0x600u);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v6, (uint64_t)buffer);
      _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "isIPad::: %s", v6, 0xCu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v5, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v5, 0x16u);
  }
  if (!strcmp(buffer, "iPad")) {
    char v4 = 1;
  }
  else {
LABEL_12:
  }
    char v4 = 0;
  return v4 & 1;
}

BOOL ot::Posix::HardwareIdentifier::isSKUSpecificiPhone(ot::Posix::HardwareIdentifier *this)
{
  return (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0;
}

uint64_t readFromFilePTB(const char *a1, unsigned __int8 *a2, unsigned __int16 a3)
{
  __stream = fopen(a1, "rb");
  if (__stream)
  {
    unsigned __int16 v20 = fread(a2, 1uLL, a3, __stream);
    if (!v20 || ferror(__stream)) {
      otLogWarnPlat("PTB file read error", v10, v11, v12, v13, v14, v15, v16, v18);
    }
    fclose(__stream);
    return v20;
  }
  else
  {
    otLogWarnPlat("PTB file does not exist", v3, v4, v5, v6, v7, v8, v9, v18);
    return 0;
  }
}

void *ot::Posix::HardwareIdentifier::HardwareIdentifier(void *this)
{
  *this = 0;
  return this;
}

uint64_t ot::Posix::HardwareIdentifier::setHWIdentifiers(ot::Posix::HardwareIdentifier *this)
{
  uint64_t v19 = this;
  CFDictionaryRef v1 = IOServiceNameMatching("AppleBCMWLANBusInterfacePCIe");
  io_registry_entry_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (MatchingService)
  {
    *(void *)this = IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", @"HWIdentifiers", kCFAllocatorDefault, 1u);
    if (*(void *)this)
    {
      return 0;
    }
    else
    {
      os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t oslog = logging_obg;
        os_log_type_t v9 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          uint64_t v3 = oslog;
          os_log_type_t v4 = v9;
          __os_log_helper_16_0_0(v8);
          _os_log_impl((void *)&_mh_execute_header, v3, v4, "No HWIdentifiers property", v8, 2u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v21, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v21, 0x16u);
      }
      return 23;
    }
  }
  else
  {
    os_log_t v17 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v17 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v16 = v17;
      char v15 = 1;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        log = v16;
        os_log_type_t type = v15;
        __os_log_helper_16_0_0(v14);
        _os_log_impl((void *)&_mh_execute_header, log, type, "No AppleBCMWLANBusInterfacePCIe service", v14, 2u);
      }
    }
    else if (!v17)
    {
      os_log_t v13 = (os_log_t)&_os_log_default;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v22, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v13, v12, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v22, 0x16u);
      }
    }
    return 23;
  }
}

unsigned char *__os_log_helper_16_0_0(unsigned char *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

uint64_t ot::Posix::HardwareIdentifier::getHWIdentifiers(ot::Posix::HardwareIdentifier *this)
{
  os_log_t v17 = this;
  if (*(void *)this) {
    return *(void *)this;
  }
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v15 = logging_obg;
    char v14 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v15;
      os_log_type_t type = v14;
      __os_log_helper_16_0_0(v13);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Attemping to set HWIdentifiers in order to Load PTB/BANDEDGE file...", v13, 2u);
    }
  }
  else if (!logging_obg)
  {
    os_log_t v12 = (os_log_t)&_os_log_default;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v20, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, v12, v11, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v20, 0x16u);
    }
  }
  if (!ot::Posix::HardwareIdentifier::setHWIdentifiers(this)) {
    return *(void *)this;
  }
  os_log_t v10 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (v10 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t oslog = v10;
    os_log_type_t v8 = OS_LOG_TYPE_INFO;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      char v2 = oslog;
      os_log_type_t v3 = v8;
      __os_log_helper_16_0_0(v7);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Setting HWIdentifiers has failed", v7, 2u);
    }
  }
  else if (!v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v19, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v19, 0x16u);
  }
  return 0;
}

void *ot::Posix::HardwareIdentifier::getStringFromHWIdentifiers(CFDictionaryRef *this, char a2, char *a3, unsigned __int16 a4)
{
  uint64_t v19 = this;
  char v18 = a2;
  os_log_t v17 = a3;
  unsigned __int16 v16 = a4;
  bzero(a3, a4);
  if (ot::Posix::HardwareIdentifier::getHWIdentifiers((ot::Posix::HardwareIdentifier *)this))
  {
    memset(buffer, 0, sizeof(buffer));
    cStr[0] = v18;
    cStr[1] = 0;
    CFStringRef v4 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
    CFTypeRef key = CFAutorelease(v4);
    CFStringRef theString = (const __CFString *)CFDictionaryGetValue(*this, key);
    if (theString)
    {
      CFStringGetCString(theString, (char *)buffer, v16, 0x8000100u);
      memcpy(v17, buffer, v16);
      CFRelease(*this);
      *this = 0;
      return v17;
    }
    else
    {
      os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_0_1_4_0((uint64_t)v22, v18);
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Failed to get %c property from HWIdentifiers", v22, 8u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v21, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v21, 0x16u);
      }
      CFRelease(*this);
      *this = 0;
      return 0;
    }
  }
  else
  {
    os_log_t v15 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v15 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v14 = v15;
      os_log_type_t v13 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v25, v18);
        _os_log_impl((void *)&_mh_execute_header, v14, v13, "Failed to get HWIdentifiers property, while trying to pull %c: ", v25, 8u);
      }
    }
    else if (!v15)
    {
      os_log_t oslog = (os_log_t)&_os_log_default;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v24, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, oslog, v11, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v24, 0x16u);
      }
    }
    return 0;
  }
}

uint64_t __os_log_helper_16_0_1_4_0(uint64_t result, int a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 1) = 1;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

void *ot::Posix::HardwareIdentifier::getManufacturerFromHWIdentifiers(CFDictionaryRef *this, char *a2, unsigned __int16 a3)
{
  return ot::Posix::HardwareIdentifier::getStringFromHWIdentifiers(this, 77, a2, a3);
}

void *ot::Posix::HardwareIdentifier::getVersionFromHWIdentifiers(CFDictionaryRef *this, char *a2, unsigned __int16 a3)
{
  return ot::Posix::HardwareIdentifier::getStringFromHWIdentifiers(this, 109, a2, a3);
}

uint64_t __os_log_helper_16_2_1_8_32(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 1;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  return result;
}

BOOL ot::Posix::HardwareIdentifier::isIphonePlatform(CFDictionaryRef *this)
{
  memset(v20, 0, sizeof(v20));
  int v5 = 23;
  long long v18 = xmmword_1003F6D98;
  int v19 = 1223847566;
  if (MGIsDeviceOfType()) {
    int v5 = 0;
  }
  long long v16 = xmmword_1003F6DAC;
  int v17 = 185580364;
  if (MGIsDeviceOfType()) {
    int v5 = 1;
  }
  long long v14 = xmmword_1003F6DC0;
  int v15 = 1874287171;
  if (MGIsDeviceOfType()) {
    int v5 = 2;
  }
  long long v12 = xmmword_1003F6DD4;
  int v13 = -781324731;
  if (MGIsDeviceOfType()) {
    int v5 = 3;
  }
  long long v10 = xmmword_1003F6DE8;
  int v11 = 1214880059;
  if (MGIsDeviceOfType()) {
    int v5 = 4;
  }
  long long v8 = xmmword_1003F6DFC;
  int v9 = 426359977;
  if (MGIsDeviceOfType()) {
    int v5 = 5;
  }
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      PlatformFromHWIdentifiers = ot::Posix::HardwareIdentifier::getPlatformFromHWIdentifiers(this, (char *)v20, 0x20u);
      __os_log_helper_16_2_3_8_32_4_0_8_32((uint64_t)v7, (uint64_t)"isIphonePlatform", v5, (uint64_t)PlatformFromHWIdentifiers);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: productCFStringRef Type = %d[%s]", v7, 0x1Cu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v6, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v6, 0x16u);
  }
  return v5 != 23;
}

uint64_t __os_log_helper_16_2_3_8_32_4_0_8_32(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 4;
  *(_DWORD *)(result + 14) = a3;
  *(unsigned char *)(result + 18) = 32;
  *(unsigned char *)(result + 19) = 8;
  *(void *)(result + 20) = a4;
  return result;
}

uint64_t ot::Posix::HardwareIdentifier::isMacCC5Platform_v39(CFDictionaryRef *this)
{
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      PlatformFromHWIdentifiers = ot::Posix::HardwareIdentifier::getPlatformFromHWIdentifiers(this, v7, 0x20u);
      __os_log_helper_16_2_3_8_32_4_0_8_32((uint64_t)v6, (uint64_t)"isMacCC5Platform_v39", 23, (uint64_t)PlatformFromHWIdentifiers);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: productCFStringRef Type = %d[%s]", v6, 0x1Cu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v5, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v5, 0x16u);
  }
  return 0;
}

uint64_t ot::Posix::HardwareIdentifier::isMacCC5Platform_v19(CFDictionaryRef *this)
{
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      PlatformFromHWIdentifiers = ot::Posix::HardwareIdentifier::getPlatformFromHWIdentifiers(this, v7, 0x20u);
      __os_log_helper_16_2_3_8_32_4_0_8_32((uint64_t)v6, (uint64_t)"isMacCC5Platform_v19", 23, (uint64_t)PlatformFromHWIdentifiers);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: productCFStringRef Type = %d[%s]", v6, 0x1Cu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v5, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v5, 0x16u);
  }
  return 0;
}

uint64_t ot::Posix::HardwareIdentifier::isMacCC4Platform(CFDictionaryRef *this)
{
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      PlatformFromHWIdentifiers = ot::Posix::HardwareIdentifier::getPlatformFromHWIdentifiers(this, v7, 0x20u);
      __os_log_helper_16_2_3_8_32_4_0_8_32((uint64_t)v6, (uint64_t)"isMacCC4Platform", 23, (uint64_t)PlatformFromHWIdentifiers);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: productCFStringRef Type = %d[%s]", v6, 0x1Cu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v5, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v5, 0x16u);
  }
  return 0;
}

BOOL ot::Posix::HardwareIdentifier::isCCMappingVer200(ot::Posix::HardwareIdentifier *this)
{
  if (MGIsDeviceOfType()) {
    return 1;
  }
  else {
    return (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0;
  }
}

BOOL ot::Posix::HardwareIdentifier::isCCMappingVer100(ot::Posix::HardwareIdentifier *this)
{
  return (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0;
}

void *ot::Posix::HdlcInterface::HdlcInterface(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a3;
  a1[5] = 0xFFFFFFFFLL;
  ot::Hdlc::Decoder::Decoder((uint64_t)(a1 + 6), a4, (uint64_t)ot::Posix::HdlcInterface::HandleHdlcFrame, (uint64_t)a1);
  uint64_t result = a1;
  a1[11] = 0;
  ot::Posix::gErrorCallback = (uint64_t (*)(void, void))a1[3];
  ot::Posix::gErrorContext = a1[4];
  return result;
}

{
  ot::Posix::HdlcInterface::HdlcInterface(a1, a2, a3, a4, a5);
  return a1;
}

void ot::Posix::HdlcInterface::HandleHdlcFrame(uint64_t a1, int a2)
{
}

{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *log;
  os_log_type_t type;
  uint8_t v13[15];
  char v14;
  os_log_t v15;
  os_log_t logging_obg;
  int v17;
  uint64_t v18;
  uint8_t v19[24];

  long long v18 = a1;
  int v17 = a2;
  if (a2)
  {
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      int v15 = logging_obg;
      long long v14 = 1;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        log = v15;
        os_log_type_t type = v14;
        __os_log_helper_16_0_0(v13);
        _os_log_impl((void *)&_mh_execute_header, log, type, "Skywalk::DiscardFrame:\n", v13, 2u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v19, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v19, 0x16u);
    }
    ot::Hdlc::MultiFrameBuffer<(unsigned short)8192>::DiscardFrame(*(void *)(a1 + 16));
    char v2 = otThreadErrorToString(v17);
    otLogWarnPlat("Error decoding hdlc frame: %s", v3, v4, v5, v6, v7, v8, v9, v2);
  }
  else
  {
    (*(void (**)(void))a1)(*(void *)(a1 + 8));
  }
}

uint64_t ot::Posix::HdlcInterface::OnRcpReset(ot::Posix::HdlcInterface *this)
{
  int v9 = this;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v7 = logging_obg;
    char v6 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v7;
      os_log_type_t type = v6;
      __os_log_helper_16_0_0(v5);
      _os_log_impl((void *)&_mh_execute_header, log, type, "In Skywalk::OnRcpReset:\n", v5, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v10, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v10, 0x16u);
  }
  return ot::Hdlc::Decoder::Reset((uint64_t)this + 48);
}

uint64_t ot::Posix::HdlcInterface::Init(ot::Posix::HdlcInterface *this, const ot::Url::Url *a2)
{
  long long v12 = this;
  int v11 = a2;
  unsigned int v10 = 0;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v8 = logging_obg;
    char v7 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v8;
      os_log_type_t type = v7;
      __os_log_helper_16_0_0(v6);
      _os_log_impl((void *)&_mh_execute_header, log, type, "In Skywalk::Init:\n", v6, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v13, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v13, 0x16u);
  }
  ot::Posix::gk_HdlcDecoder = (uint64_t)this + 48;
  *((_DWORD *)this + 10) = ot::Posix::HdlcInterface::OpenFile(this, v11);
  if (*((_DWORD *)this + 10) == -1) {
    return 7;
  }
  return v10;
}

uint64_t ot::Posix::HdlcInterface::OpenFile(ot::Posix::HdlcInterface *this, const ot::Url::Url *a2)
{
  int v7 = 0;
  while (ot::Posix::HdlcInterface::OpenFile(ot::Url::Url const&)::count < 0x19u)
  {
    int v7 = ot::Posix::HdlcInterface::skywalk_open(this);
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_2_4_0_4_0((uint64_t)v9, ot::Posix::HdlcInterface::OpenFile(ot::Url::Url const&)::count, v7);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "Skywalk::OpenFile:skywalk_open Attempt= %d status = %d", v9, 0xEu);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v8, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v8, 0x16u);
    }
    if (!v7)
    {
      gPciStatus = 0;
      break;
    }
    ++ot::Posix::HdlcInterface::OpenFile(ot::Url::Url const&)::count;
    this = (ot::Posix::HdlcInterface *)usleep(0x186A0u);
  }
  if (v7)
  {
    perror("open PCIe failed");
    int v5 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
    if (v5) {
      CFStringRef v4 = v5 + 1;
    }
    else {
      CFStringRef v4 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
    }
    char v2 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "OpenFile", v4, 690, v2);
    handle_daemon_exit();
    exit(1);
  }
  return 0;
}

void ot::Posix::HdlcInterface::~HdlcInterface(ot::Posix::HdlcInterface *this)
{
  os_log_t v8 = this;
  int v9 = this;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v6 = logging_obg;
    char v5 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v6;
      os_log_type_t type = v5;
      __os_log_helper_16_0_0(v4);
      _os_log_impl((void *)&_mh_execute_header, log, type, "In Skywalk::destructor:\n", v4, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v10, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v10, 0x16u);
  }
  ot::Posix::HdlcInterface::Deinit(this);
}

{
  ot::Posix::HdlcInterface::~HdlcInterface(this);
}

void ot::Posix::HdlcInterface::Deinit(ot::Posix::HdlcInterface *this)
{
  os_log_t v8 = this;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v6 = logging_obg;
    char v5 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v6;
      os_log_type_t type = v5;
      __os_log_helper_16_0_0(v4);
      _os_log_impl((void *)&_mh_execute_header, log, type, "In Skywalk::Deinit:\n", v4, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v9, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v9, 0x16u);
  }
  ot::Posix::HdlcInterface::CloseFile(this);
}

void ot::Posix::HdlcInterface::CloseFile(ot::Posix::HdlcInterface *this)
{
  int v7 = this;
  ot::Posix::HdlcInterface::skywalk_close(this);
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v5 = logging_obg;
    char v4 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v5;
      os_log_type_t type = v4;
      __os_log_helper_16_0_0(v3);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Skywalk::CloseFile:\n", v3, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v8, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v8, 0x16u);
  }
}

void ot::Posix::HdlcInterface::Read(ot::Posix::HdlcInterface *this, uint64_t a2)
{
  uint64_t v9 = __chkstk_darwin(this, a2);
  uint64_t v8 = 0;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t oslog = logging_obg;
    os_log_type_t type = OS_LOG_TYPE_INFO;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = oslog;
      os_log_type_t v3 = type;
      __os_log_helper_16_0_0(v4);
      _os_log_impl((void *)&_mh_execute_header, log, v3, "In Skywalk::Read:", v4, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v10, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v10, 0x16u);
  }
}

void ot::Posix::HdlcInterface::Decode(ot::Posix::HdlcInterface *this, char *a2, __int16 a3)
{
  long long v12 = this;
  int v11 = a2;
  __int16 v10 = a3;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v8 = logging_obg;
    char v7 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v8;
      os_log_type_t type = v7;
      __os_log_helper_16_0_0(v6);
      _os_log_impl((void *)&_mh_execute_header, log, type, "In Skywalk::Decode:\n", v6, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v13, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v13, 0x16u);
  }
  ot::Hdlc::Decoder::Decode((ot::Posix::HdlcInterface *)((char *)this + 48), v11, v10);
}

uint64_t ot::Posix::HdlcInterface::SendFrame(ot::Posix::HdlcInterface *this, const unsigned __int8 *a2)
{
  uint64_t v13 = __chkstk_darwin(this, a2);
  long long v12 = v2;
  unsigned __int16 v11 = v3;
  char v7 = (ot::Posix::HdlcInterface *)v13;
  unsigned int v10 = 0;
  ot::Hdlc::FrameBuffer<(unsigned short)8192>::FrameBuffer((uint64_t)v17);
  ot::Hdlc::Encoder::Encoder((ot::Hdlc::Encoder *)v9, (ot::Hdlc::FrameWritePointer *)v17);
  if (gPciStatus)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v16, gPciStatus);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "SendFrame Skipped: gPciStatus=%d\n", v16, 8u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v15, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v15, 0x16u);
    }
    return 0;
  }
  else
  {
    unsigned int v10 = ot::Hdlc::Encoder::BeginFrame((ot::Hdlc::Encoder *)v9);
    if (!v10)
    {
      unsigned int v10 = ot::Hdlc::Encoder::Encode((ot::Hdlc::FrameWritePointer **)v9, v12, v11);
      if (!v10)
      {
        unsigned int v10 = ot::Hdlc::Encoder::EndFrame(v9);
        if (!v10)
        {
          Frame = (unsigned __int8 *)ot::Hdlc::FrameBuffer<(unsigned short)8192>::GetFrame((uint64_t)v17);
          unsigned __int16 Length = ot::Hdlc::FrameBuffer<(unsigned short)8192>::GetLength(v17);
          return ot::Posix::HdlcInterface::Write(v7, (ot::Posix::HdlcInterface *)Frame, Length);
        }
      }
    }
    return v10;
  }
}

uint64_t ot::Hdlc::FrameBuffer<(unsigned short)8192>::FrameBuffer(uint64_t a1)
{
  return a1;
}

{
  ot::Hdlc::FrameWritePointer::FrameWritePointer(a1);
  ot::Hdlc::FrameBuffer<(unsigned short)8192>::Clear(a1);
  return a1;
}

uint64_t ot::Posix::HdlcInterface::Write(ot::Posix::HdlcInterface *this, ot::Posix::HdlcInterface *a2, unsigned __int16 a3)
{
  uint64_t v13 = this;
  long long v12 = a2;
  unsigned __int16 v11 = a3;
  uint64_t v9 = a3;
  if (ot::Posix::HdlcInterface::skywalk_write(a2, a3))
  {
    os_log_t v8 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
    if (v8) {
      char v7 = v8 + 1;
    }
    else {
      char v7 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
    }
    os_log_t v5 = v7;
    int v6 = 5;
    unsigned __int16 v3 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "Write", v7, 287, v3);
    handle_daemon_exit();
    exit(v6);
  }
  return 0;
}

uint64_t ot::Hdlc::FrameBuffer<(unsigned short)8192>::GetFrame(uint64_t a1)
{
  return a1 + 10;
}

{
  return ot::Hdlc::FrameBuffer<(unsigned short)8192>::GetFrame(a1);
}

uint64_t ot::Hdlc::FrameBuffer<(unsigned short)8192>::GetLength(_WORD *a1)
{
  return (unsigned __int16)(*a1 - ((_WORD)a1 + 10));
}

{
  return ot::Hdlc::FrameBuffer<(unsigned short)8192>::GetLength(a1);
}

uint64_t ot::Posix::HdlcInterface::skywalk_write(ot::Posix::HdlcInterface *this, size_t a2)
{
  std::string __src = this;
  size_t __n = a2;
  unsigned int v9 = 0;
  if (gPciStatus)
  {
    printf("Skipping skywalk_write as PCI is not open gPciStatus=%d", gPciStatus);
    return v9;
  }
  else
  {
    memcpy(__dst, __src, __n);
    unsigned int v9 = ot::Posix::HdlcInterface::write_channel((ot::Posix::HdlcInterface *)__dst, __n);
    if (v9)
    {
      os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t oslog = logging_obg;
        os_log_type_t type = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          log = oslog;
          os_log_type_t v4 = type;
          __os_log_helper_16_0_0(v5);
          _os_log_impl((void *)&_mh_execute_header, log, v4, " failed to send in Skywalk\n", v5, 2u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v13, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v13, 0x16u);
      }
      printf("failed to send in Skywalk. error: %d\n", v9);
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t ot::Posix::HdlcInterface::WaitForFrame(ot::Posix::HdlcInterface *this)
{
  return 0;
}

uint64_t ot::Posix::HdlcInterface::UpdateFdSet(uint64_t this, fd_set *a2, fd_set *a3, int *a4, timeval *a5)
{
  uint64_t v5 = this;
  int v8 = *(_DWORD *)(this + 40);
  if (&___darwin_check_fd_set_overflow)
  {
    this = __darwin_check_fd_set_overflow(*(_DWORD *)(this + 40), a2, 0);
    int v9 = this;
  }
  else
  {
    int v9 = 1;
  }
  if (v9) {
    a2->fds_bits[v8 / 0x20uLL] |= 1 << (v8 % 0x20uLL);
  }
  if (*a4 < *(_DWORD *)(v5 + 40)) {
    *a4 = *(_DWORD *)(v5 + 40);
  }
  return this;
}

ssize_t ot::Posix::HdlcInterface::Process(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  uint64_t v4 = a2;
  char v3 = 0;
  return read(gPfdX, &v3, 1uLL);
}

uint64_t ot::Posix::HdlcInterface::WaitForWritable(ot::Posix::HdlcInterface *this)
{
  BOOL v13 = &___darwin_check_fd_set_overflow != 0;
  uint64_t v25 = this;
  long long v14 = this;
  unsigned int v24 = 0;
  timeval v23 = (timeval)xmmword_1003F6E90;
  unint64_t v22 = otPlatTimeGet();
  unint64_t v21 = v22 + 2000000;
  int v18 = 0;
  while (1)
  {
    p_b = &__b;
    size_t __len = 128;
    int __c = 0;
    memset(&__b, 0, sizeof(__b));
    memset(&v19, 0, sizeof(v19));
    int v29 = *((_DWORD *)v14 + 10);
    uint64_t v28 = &__b;
    int v43 = v29;
    int v42 = &__b;
    if (v13) {
      int v44 = __darwin_check_fd_set_overflow(v43, v42, 0);
    }
    else {
      int v44 = 1;
    }
    if (v44) {
      v28->fds_bits[v29 / 0x20uLL] |= 1 << (v29 % 0x20uLL);
    }
    int v27 = *((_DWORD *)v14 + 10);
    int v26 = &v19;
    int v46 = v27;
    uint64_t v45 = &v19;
    if (v13) {
      int v47 = __darwin_check_fd_set_overflow(v46, v45, 0);
    }
    else {
      int v47 = 1;
    }
    if (v47) {
      v26->fds_bits[v27 / 0x20uLL] |= 1 << (v27 % 0x20uLL);
    }
    int v18 = select(*((_DWORD *)v14 + 10) + 1, 0, &__b, &v19, &v23);
    if (v18 > 0) {
      break;
    }
    if (v18 < 0 && *__error() != 4)
    {
      long long v16 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
      if (v16) {
        int v6 = v16 + 1;
      }
      else {
        int v6 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
      }
      uint64_t v4 = v6;
      int v5 = 5;
      char v2 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "WaitForWritable", v6, 462, v2);
      handle_daemon_exit();
      exit(v5);
    }
    unint64_t v22 = otPlatTimeGet();
    if (v21 <= v22) {
      return 1;
    }
    unint64_t v15 = v21 - v22;
    v23.__darwin_time_t tv_sec = (v21 - v22) / 0xF4240;
    v23.tv_usec = (v21 - v22) % 0xF4240;
  }
  int v34 = *((_DWORD *)v14 + 10);
  __int16 v33 = &__b;
  int v37 = v34;
  int v36 = &__b;
  if (v13) {
    int v38 = __darwin_check_fd_set_overflow(v37, v36, 0);
  }
  else {
    int v38 = 1;
  }
  if (v38) {
    int v35 = v33->fds_bits[v34 / 0x20uLL] & (1 << (v34 % 0x20uLL));
  }
  else {
    int v35 = 0;
  }
  if (!v35)
  {
    int v31 = *((_DWORD *)v14 + 10);
    int v30 = &v19;
    int v40 = v31;
    __int16 v39 = &v19;
    if (v13) {
      int v41 = __darwin_check_fd_set_overflow(v40, v39, 0);
    }
    else {
      int v41 = 1;
    }
    if (v41) {
      int v32 = v30->fds_bits[v31 / 0x20uLL] & (1 << (v31 % 0x20uLL));
    }
    else {
      int v32 = 0;
    }
    if (v32)
    {
      int v17 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
      if (v17) {
        int v9 = v17 + 1;
      }
      else {
        int v9 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
      }
      char v7 = v9;
      int v8 = 1;
      CFDictionaryRef v1 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "WaitForWritable", v9, 453, v1);
      handle_daemon_exit();
      exit(v8);
    }
    __assert_rtn("WaitForWritable", "hdlc_skywalk_interface.cpp", 457, "false");
  }
  return v24;
}

uint64_t ot::Posix::HdlcInterface::skywalk_open(ot::Posix::HdlcInterface *this)
{
  unsigned int v36 = 0;
  ot::Posix::HdlcInterface::init_channel_data(this);
  if ((int)ot::Posix::HdlcInterface::start_channel((ot::Posix::HdlcInterface *)"tsi", v1, v2) >= 0)
  {
    gPciStatus = 0;
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v29 = logging_obg;
      os_log_type_t v28 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v42, gPciStatus);
        _os_log_impl((void *)&_mh_execute_header, v29, v28, " opening Skywalk channel gPciStatus=%d\n", v42, 8u);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v27 = (os_log_t)&_os_log_default;
      os_log_type_t v26 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v41, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v27, v26, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v41, 0x16u);
      }
    }
    if (pthread_create(&ot::Posix::g_hci_thread_id, 0, (void *(__cdecl *)(void *))ot::Posix::HdlcInterface::skywalk_read_thread, 0))
    {
      os_log_t v25 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v25 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t oslog = v25;
        os_log_type_t v23 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          int v8 = oslog;
          os_log_type_t v9 = v23;
          __os_log_helper_16_0_0(v22);
          _os_log_impl((void *)&_mh_execute_header, v8, v9, " failed to create skywalk rx thread\n", v22, 2u);
        }
      }
      else if (!v25)
      {
        os_log_t v21 = (os_log_t)&_os_log_default;
        os_log_type_t v20 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v40, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v21, v20, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v40, 0x16u);
        }
      }
      return 1;
    }
    else
    {
      os_log_t v19 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v19 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t v18 = v19;
        os_log_type_t v17 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          int v6 = v18;
          os_log_type_t v7 = v17;
          __os_log_helper_16_0_0(v16);
          _os_log_impl((void *)&_mh_execute_header, v6, v7, " created skywalk rx thread\n", v16, 2u);
        }
      }
      else if (!v19)
      {
        os_log_t v15 = (os_log_t)&_os_log_default;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v39, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v15, v14, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v39, 0x16u);
        }
      }
      if ((ot::Posix::create_pcie_error_listener((uint64_t)ot::Posix::errorCb, (const char *)ot::Posix::chipResettingCb, (uint64_t)ot::Posix::driverMetricsCb) & 1) == 0)
      {
        os_log_t v13 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v13 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          os_log_t v12 = v13;
          os_log_type_t v11 = OS_LOG_TYPE_INFO;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            uint64_t v4 = v12;
            os_log_type_t v5 = v11;
            __os_log_helper_16_0_0(v10);
            _os_log_impl((void *)&_mh_execute_header, v4, v5, " Event Listener failed\n", v10, 2u);
          }
        }
        else if (!v13 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v38, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v38, 0x16u);
        }
      }
      return v36;
    }
  }
  else
  {
    gPciStatus = 3;
    os_log_t v35 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v35 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v34 = v35;
      os_log_type_t v33 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v44, gPciStatus);
        _os_log_impl((void *)&_mh_execute_header, v34, v33, " failed opening Skywalk channel gPciStatus=%d\n", v44, 8u);
      }
    }
    else if (!v35)
    {
      os_log_t v32 = (os_log_t)&_os_log_default;
      os_log_type_t v31 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v43, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v32, v31, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v43, 0x16u);
      }
    }
    return 1;
  }
}

uint64_t __os_log_helper_16_0_2_4_0_4_0(uint64_t result, int a2, int a3)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 1) = 2;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 9) = 4;
  *(_DWORD *)(result + 10) = a3;
  return result;
}

void ot::Posix::HdlcInterface::skywalk_close(ot::Posix::HdlcInterface *this)
{
  gPciStatus = 3;
  ot::Posix::HdlcInterface::close_channel(this);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_1_4_0((uint64_t)v3, gPciStatus);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, " Closing Skywalk channel gPciStatus=%d\n", v3, 8u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v2, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v2, 0x16u);
  }
}

uint64_t ot::Posix::HdlcInterface::ForkPty(ot::Posix::HdlcInterface *this, const ot::Url::Url *a2)
{
  os_log_t v29 = this;
  int v28 = -1;
  pid_t v27 = -1;
  int v26 = -1;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t oslog = logging_obg;
    os_log_type_t type = OS_LOG_TYPE_INFO;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = oslog;
      os_log_type_t v15 = type;
      __os_log_helper_16_0_0(v22);
      _os_log_impl((void *)&_mh_execute_header, log, v15, "Skywalk::ForkPty: \n", v22, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v32, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v32, 0x16u);
  }
  memset(&__b, 0, sizeof(__b));
  cfmakeraw(&__b);
  __b.c_cflag = 51968;
  pid_t v27 = forkpty(&v28, 0, &__b, 0);
  if (v27 == -1)
  {
    os_log_t v21 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
    if (v21) {
      os_log_t v13 = v21 + 1;
    }
    else {
      os_log_t v13 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
    }
    char v2 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "ForkPty", v13, 797, v2);
    handle_daemon_exit();
    exit(5);
  }
  if (v27)
  {
    int v26 = fcntl(v28, 3);
    if (v26 == -1)
    {
      os_log_type_t v17 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
      if (v17) {
        unsigned int v10 = v17 + 1;
      }
      else {
        unsigned int v10 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
      }
      int v6 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "ForkPty", v10, 827, v6);
      handle_daemon_exit();
      exit(5);
    }
    int v26 = fcntl(v28, 4, v26 | 0x1000004u);
    if (v26 == -1)
    {
      long long v16 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
      if (v16) {
        os_log_type_t v9 = v16 + 1;
      }
      else {
        os_log_type_t v9 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
      }
      os_log_type_t v7 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "ForkPty", v9, 828, v7);
      handle_daemon_exit();
      exit(5);
    }
  }
  else
  {
    bzero(__file, 0x108uLL);
    unint64_t v20 = 1;
    __file[0] = (char *)ot::Url::Url::GetPath(v29);
    for (int i = 0; ; __file[v3] = i)
    {
      BOOL v12 = 0;
      if (v20 < 0x21)
      {
        int i = ot::Url::Url::GetValue(v29, "forkpty-arg", i);
        BOOL v12 = i != 0;
      }
      if (!v12) {
        break;
      }
      unint64_t v3 = v20++;
    }
    if (v20 >= 0x21)
    {
      uint64_t v4 = otExitCodeToString(2u);
      otLogCritPlat("exit(%d): %s line %d, %s, %s", 2, "ForkPty", 820, "Too many arguments!", v4);
      handle_daemon_exit();
      exit(2);
    }
    __file[v20] = 0;
    int v26 = execvp(__file[0], __file);
    if (v26 == -1)
    {
      os_log_t v18 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
      if (v18) {
        os_log_type_t v11 = v18 + 1;
      }
      else {
        os_log_type_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
      }
      os_log_type_t v5 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "ForkPty", v11, 823, v5);
      handle_daemon_exit();
      exit(5);
    }
  }
  return v28;
}

uint64_t ot::Url::Url::GetPath(ot::Url::Url *this)
{
  return *((void *)this + 1);
}

{
  return ot::Url::Url::GetPath(this);
}

uint64_t ot::Posix::HdlcInterface::ResetConnection(ot::Posix::HdlcInterface *this)
{
  unsigned int v10 = this;
  unsigned int v9 = 0;
  uint64_t v8 = 0;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v6 = logging_obg;
    char v5 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v6;
      os_log_type_t type = v5;
      __os_log_helper_16_0_0(v4);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Skywalk::ResetConnection:\n", v4, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v11, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v11, 0x16u);
  }
  usleep(0x1E8480u);
  return v9;
}

void ot::Posix::HdlcInterface::print_pkt_bytes(ot::Posix::HdlcInterface *this, unsigned __int8 *a2)
{
  bzero(v8, 0xBB8uLL);
  for (unsigned int i = 0; i < (unint64_t)a2; ++i)
    snprintf(&v8[3 * i], 0xBB8uLL, " %02X", *((unsigned __int8 *)this + i));
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_0_8_32((uint64_t)v7, (uint64_t)a2, (uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, " *****Skywalk Read Bytes****** len[%llu] 0x[%s]", v7, 0x16u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v6, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v6, 0x16u);
  }
}

uint64_t __os_log_helper_16_2_2_8_0_8_32(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 2;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 32;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  return result;
}

uint64_t ot::Posix::HdlcInterface::get_uuid(ot::Posix::HdlcInterface *this, char *a2, unsigned __int8 (*a3)[16])
{
  if (this && a2)
  {
    printf("retrieving uuid for %s\n", (const char *)this);
    uint64_t v8 = IOServiceMatching("AppleConvergedIPCInterface");
    if (v8)
    {
      CFStringRef value = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)this, 0x600u);
      if (value)
      {
        CFDictionarySetValue(v8, @"ACIPCInterfaceProtocol", value);
        CFRelease(value);
        io_service_t entry = IOServiceGetMatchingService(kIOMasterPortDefault, v8);
        if (entry)
        {
          CFStringRef theString = (const __CFString *)IORegistryEntrySearchCFProperty(entry, "IOService", @"IOSkywalkNexusUUID", kCFAllocatorDefault, 1u);
          if (theString)
          {
            in = (char *)CFStringGetCStringPtr(theString, 0x600u);
            printf("protocol: %s, uuidstr: %s\n", (const char *)this, in);
            uuid_parse(in, (unsigned __int8 *)a2);
            CFRelease(theString);
            IOObjectRelease(entry);
            return 0;
          }
          else
          {
            printf("no IOSkywalkNexusUUID property\n");
            return -1;
          }
        }
        else
        {
          printf("no matching service found\n");
          return -1;
        }
      }
      else
      {
        printf("failed to create stringRef\n");
        return -1;
      }
    }
    else
    {
      printf("could not create matching dictionary\n");
      return -1;
    }
  }
  else
  {
    printf("%s: invalid argument\n", "get_uuid");
    return -1;
  }
}

void ot::Posix::HdlcInterface::init_channel_data(ot::Posix::HdlcInterface *this)
{
  ot::Posix::g_zgb_channel_uint64_t data = 0;
  unk_1004FC478 = -1;
}

void ot::Posix::HdlcInterface::close_channel(ot::Posix::HdlcInterface *this)
{
  os_log_type_t v23 = &ot::Posix::g_zgb_channel_data;
  if (unk_1004FC478 != -1)
  {
    close(*((_DWORD *)v23 + 2));
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v21 = logging_obg;
      char v20 = 1;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        log = v21;
        os_log_type_t type = v20;
        __os_log_helper_16_0_0(v19);
        _os_log_impl((void *)&_mh_execute_header, log, type, " closed sw_kq_write\n", v19, 2u);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v18 = (os_log_t)&_os_log_default;
      os_log_type_t v17 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v26, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v18, v17, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v26, 0x16u);
      }
    }
    *((_DWORD *)v23 + 2) = -1;
  }
  if (*((_DWORD *)v23 + 3) != -1)
  {
    close(*((_DWORD *)v23 + 3));
    os_log_t v16 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v16 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v15 = v16;
      char v14 = 1;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        unint64_t v3 = v15;
        os_log_type_t v4 = v14;
        __os_log_helper_16_0_0(v13);
        _os_log_impl((void *)&_mh_execute_header, v3, v4, " closed sw_kq_read\n", v13, 2u);
      }
    }
    else if (!v16)
    {
      os_log_t v12 = (os_log_t)&_os_log_default;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v25, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v12, v11, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v25, 0x16u);
      }
    }
    *((_DWORD *)v23 + 3) = -1;
  }
  if (*v23)
  {
    os_channel_destroy();
    os_log_t v10 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v10 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t oslog = v10;
      os_log_type_t v8 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        CFDictionaryRef v1 = oslog;
        os_log_type_t v2 = v8;
        __os_log_helper_16_0_0(v7);
        _os_log_impl((void *)&_mh_execute_header, v1, v2, " closed sk_channel\n", v7, 2u);
      }
    }
    else if (!v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v24, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v24, 0x16u);
    }
    void *v23 = 0;
  }
}

uint64_t ot::Posix::HdlcInterface::start_channel(ot::Posix::HdlcInterface *this, const char *a2, unsigned __int8 (*a3)[16])
{
  std::string::size_type v89 = this;
  id v88 = &ot::Posix::g_zgb_channel_data;
  unsigned int v87 = -1;
  uint64_t v85 = 0;
  int v84 = 0;
  int v83 = 0;
  uint64_t v82 = 0;
  v103[0] = 0;
  v103[1] = 0;
  if (!this)
  {
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v80 = logging_obg;
      os_log_type_t type = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        log = v80;
        os_log_type_t v20 = type;
        __os_log_helper_16_0_0(v78);
        _os_log_impl((void *)&_mh_execute_header, log, v20, "failed opening Skywalk channel- Invalid input\n", v78, 2u);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v77 = (os_log_t)&_os_log_default;
      os_log_type_t v76 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v102, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v77, v76, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v102, 0x16u);
      }
    }
    return -1;
  }
  if ((int)ot::Posix::HdlcInterface::get_uuid(v89, (char *)v103, a3) < 0)
  {
    os_log_t v75 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v75 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v74 = v75;
      os_log_type_t v73 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_1_8_32((uint64_t)v101, (uint64_t)v89);
        _os_log_impl((void *)&_mh_execute_header, v74, v73, " failed to get uuid for %s channel\n", v101, 0xCu);
      }
    }
    else if (!v75)
    {
      os_log_t v72 = (os_log_t)&_os_log_default;
      os_log_type_t v71 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v100, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v72, v71, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v100, 0x16u);
      }
    }
    return -1;
  }
  uint64_t v85 = os_channel_create();
  if (!v85)
  {
    os_log_t v70 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v70 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v69 = v70;
      os_log_type_t v68 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v17 = v69;
        os_log_type_t v18 = v68;
        __os_log_helper_16_0_0(v67);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, " failed to create channel\n", v67, 2u);
      }
    }
    else if (!v70)
    {
      os_log_t v66 = (os_log_t)&_os_log_default;
      os_log_type_t v65 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v99, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v66, v65, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v99, 0x16u);
      }
    }
LABEL_91:
    uint64_t is_the_mask_enabled = (uint64_t)log_get_logging_obg("com.apple.threadradiod", "default");
    os_log_t v24 = (os_log_t)is_the_mask_enabled;
    if (is_the_mask_enabled && (uint64_t is_the_mask_enabled = syslog_is_the_mask_enabled(6), (is_the_mask_enabled & 1) != 0))
    {
      os_log_t v23 = v24;
      os_log_type_t v22 = OS_LOG_TYPE_INFO;
      uint64_t is_the_mask_enabled = os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
      if (is_the_mask_enabled)
      {
        char v5 = v23;
        os_log_type_t v6 = v22;
        __os_log_helper_16_0_0(v21);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, " failed to create channel", v21, 2u);
      }
    }
    else if (!v24)
    {
      uint64_t is_the_mask_enabled = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (is_the_mask_enabled)
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v91, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v91, 0x16u);
      }
    }
    ot::Posix::HdlcInterface::close_channel((ot::Posix::HdlcInterface *)is_the_mask_enabled);
    return v87;
  }
  *id v88 = v85;
  uint64_t v82 = os_channel_attr_create();
  if (v82)
  {
    if (!os_channel_read_attr())
    {
      uint64_t v64 = 0;
      uint64_t v63 = 0;
      uint64_t v62 = 0;
      os_channel_attr_get();
      os_channel_attr_get();
      os_channel_attr_get();
      os_log_t v61 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v61 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t v60 = v61;
        os_log_type_t v59 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_0_3_8_0_8_0_8_0((uint64_t)v98, v64, v63, v62);
          _os_log_impl((void *)&_mh_execute_header, v60, v59, " skywalk channel slotlen: %llu, rxslots: %llu, txslots: %llu\n", v98, 0x20u);
        }
      }
      else if (!v61)
      {
        os_log_t v58 = (os_log_t)&_os_log_default;
        os_log_type_t v57 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v97, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v58, v57, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v97, 0x16u);
        }
      }
    }
    os_channel_attr_destroy();
  }
  int v84 = kqueue();
  if (v84 == -1)
  {
    os_log_t v56 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v56 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v55 = v56;
      os_log_type_t v54 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        os_log_t v15 = v55;
        os_log_type_t v16 = v54;
        __os_log_helper_16_0_0(v53);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, " failed to creatre read kqueue\n", v53, 2u);
      }
    }
    else if (!v56)
    {
      os_log_t v52 = (os_log_t)&_os_log_default;
      os_log_type_t v51 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v96, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v52, v51, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v96, 0x16u);
      }
    }
    goto LABEL_91;
  }
  *((_DWORD *)v88 + 2) = v84;
  p_kevent changelist = &changelist;
  changelist.ident = (int)os_channel_get_fd();
  changelist.filter = -2;
  changelist.flags = 5;
  memset(&changelist.fflags, 0, 20);
  if (kevent(v84, &changelist, 1, 0, 0, 0) == -1)
  {
    os_log_t v49 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v49 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v48 = v49;
      os_log_type_t v47 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        os_log_t v13 = v48;
        os_log_type_t v14 = v47;
        __os_log_helper_16_0_0(v46);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, " write kevent registration failed\n", v46, 2u);
      }
    }
    else if (!v49)
    {
      os_log_t v45 = (os_log_t)&_os_log_default;
      os_log_type_t v44 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v95, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v45, v44, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v95, 0x16u);
      }
    }
    goto LABEL_91;
  }
  int v83 = kqueue();
  if (v83 == -1)
  {
    os_log_t v43 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v43 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v42 = v43;
      os_log_type_t v41 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v11 = v42;
        os_log_type_t v12 = v41;
        __os_log_helper_16_0_0(v40);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, " failed to create read kqueue\n", v40, 2u);
      }
    }
    else if (!v43)
    {
      os_log_t v39 = (os_log_t)&_os_log_default;
      os_log_type_t v38 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v94, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v39, v38, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v94, 0x16u);
      }
    }
    goto LABEL_91;
  }
  *((_DWORD *)v88 + 3) = v83;
  int v37 = &changelist;
  changelist.ident = (int)os_channel_get_fd();
  changelist.filter = -1;
  changelist.flags = 5;
  memset(&changelist.fflags, 0, 20);
  if (kevent(v83, &changelist, 1, 0, 0, 0) == -1)
  {
    os_log_t v36 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v36 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t oslog = v36;
      os_log_type_t v34 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        unsigned int v9 = oslog;
        os_log_type_t v10 = v34;
        __os_log_helper_16_0_0(v33);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, " read kevent registration failed\n", v33, 2u);
      }
    }
    else if (!v36)
    {
      os_log_t v32 = (os_log_t)&_os_log_default;
      os_log_type_t v31 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v93, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v32, v31, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v93, 0x16u);
      }
    }
    goto LABEL_91;
  }
  os_log_t v30 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (v30 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v29 = v30;
    os_log_type_t v28 = OS_LOG_TYPE_INFO;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v7 = v29;
      os_log_type_t v8 = v28;
      __os_log_helper_16_0_0(v27);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, " channel created successfully\n", v27, 2u);
    }
  }
  else if (!v30)
  {
    os_log_t v26 = (os_log_t)&_os_log_default;
    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v92, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, v26, v25, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v92, 0x16u);
    }
  }
  return 0;
}

uint64_t __os_log_helper_16_0_3_8_0_8_0_8_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 8;
  *(void *)(result + 24) = a4;
  return result;
}

uint64_t ot::Posix::HdlcInterface::write_channel(ot::Posix::HdlcInterface *this, size_t a2)
{
  os_log_t v58 = this;
  size_t v57 = a2;
  unsigned int v56 = 0;
  os_log_t v55 = &ot::Posix::g_zgb_channel_data;
  if (ot::Posix::g_zgb_channel_data && v55[2] != -1)
  {
    uint64_t v48 = 0;
    uint64_t v48 = *(void *)v55;
    int v47 = 0;
    int v47 = v55[2];
    int v46 = 0;
    int v43 = os_channel_ring_id();
    uint64_t v42 = os_channel_tx_ring();
    for (uint64_t i = os_channel_get_next_slot(); !i; uint64_t i = os_channel_get_next_slot())
    {
      os_log_t logging_obg = 0;
      os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t v39 = logging_obg;
        os_log_type_t v38 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v11 = v39;
          os_log_type_t v12 = v38;
          __os_log_helper_16_0_0(v37);
          _os_log_impl((void *)&_mh_execute_header, v11, v12, " waiting for slot to become available", v37, 2u);
        }
      }
      else if (!logging_obg)
      {
        os_log_t v36 = &_os_log_default;
        os_log_type_t v35 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          unsigned int v9 = v36;
          os_log_type_t v10 = v35;
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v63, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v9, v10, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v63, 0x16u);
        }
      }
      int v46 = kevent(v47, 0, 0, &eventlist, 1, 0);
      if (v46 == -1 || eventlist.filter != -2)
      {
        os_log_t v33 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v33 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          os_log_t v32 = v33;
          os_log_type_t v31 = OS_LOG_TYPE_INFO;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v7 = v32;
            os_log_type_t v8 = v31;
            __os_log_helper_16_0_0(v30);
            _os_log_impl((void *)&_mh_execute_header, v7, v8, " kevent error on sw_kq_write\n", v30, 2u);
          }
        }
        else if (!v33)
        {
          os_log_t v29 = (os_log_t)&_os_log_default;
          os_log_type_t v28 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v62, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, v29, v28, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v62, 0x16u);
          }
        }
        return 7;
      }
    }
    unsigned __int16 v27 = v44;
    if (v44 >= v57)
    {
      memcpy(v45, v58, v57);
      unsigned __int16 v44 = v57;
      os_channel_set_slot_properties();
      os_channel_advance_slot();
      int v46 = os_channel_sync();
      if (v46 == -1)
      {
        os_log_t v20 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v20 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          os_log_t v19 = v20;
          os_log_type_t v18 = OS_LOG_TYPE_INFO;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            unint64_t v3 = v19;
            os_log_type_t v4 = v18;
            __os_log_helper_16_0_0(v17);
            _os_log_impl((void *)&_mh_execute_header, v3, v4, " os_channel_sync tx failed\n", v17, 2u);
          }
        }
        else if (!v20)
        {
          os_log_t v16 = (os_log_t)&_os_log_default;
          os_log_type_t v15 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v60, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, v16, v15, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v60, 0x16u);
          }
        }
        return 7;
      }
      else
      {
        return v56;
      }
    }
    else
    {
      os_log_t v26 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v26 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t oslog = v26;
        os_log_type_t v24 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          char v5 = oslog;
          os_log_type_t v6 = v24;
          __os_log_helper_16_0_0(v23);
          _os_log_impl((void *)&_mh_execute_header, v5, v6, " slot_len", v23, 2u);
        }
      }
      else if (!v26)
      {
        os_log_t v22 = (os_log_t)&_os_log_default;
        os_log_type_t v21 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v61, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v22, v21, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v61, 0x16u);
        }
      }
      return 7;
    }
  }
  else
  {
    os_log_t v54 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v54 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v53 = v54;
      os_log_type_t type = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
      {
        log = v53;
        os_log_type_t v14 = type;
        __os_log_helper_16_0_0(v51);
        _os_log_impl((void *)&_mh_execute_header, log, v14, " invalid ch_data\n", v51, 2u);
      }
    }
    else if (!v54)
    {
      os_log_t v50 = (os_log_t)&_os_log_default;
      os_log_type_t v49 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v64, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v50, v49, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v64, 0x16u);
      }
    }
    return 7;
  }
}

uint64_t ot::Posix::HdlcInterface::read_channel(ot::Posix::HdlcInterface *this, uint64_t *a2, unint64_t *a3)
{
  os_log_type_t v41 = this;
  int v40 = a2;
  os_log_t v39 = &ot::Posix::g_zgb_channel_data;
  if (ot::Posix::g_zgb_channel_data && *((_DWORD *)v39 + 3) != -1)
  {
    uint64_t v32 = 0;
    uint64_t v32 = *v39;
    int v31 = 0;
    int v31 = *((_DWORD *)v39 + 3);
    int v30 = 0;
    int v29 = 0;
    int v29 = os_channel_ring_id();
    uint64_t v28 = 0;
    uint64_t v28 = os_channel_rx_ring();
    uint64_t next_slot = 0;
    int v30 = kevent(v31, 0, 0, &eventlist, 1, 0);
    if (v30 != -1 && eventlist.filter == -1)
    {
      uint64_t next_slot = os_channel_get_next_slot();
      if (next_slot)
      {
        LOWORD(__n[0]) = v26;
        if (v26 <= (unint64_t)*v40)
        {
          memcpy(v41, v27, LOWORD(__n[0]));
          *int v40 = LOWORD(__n[0]);
          os_channel_advance_slot();
          os_channel_sync();
          return 0;
        }
        else
        {
          os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
          if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
          {
            os_log_t v17 = logging_obg;
            os_log_type_t v16 = OS_LOG_TYPE_INFO;
            if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
            {
              __os_log_helper_16_0_2_4_0_8_0((uint64_t)v45, LOWORD(__n[0]), *v40);
              _os_log_impl((void *)&_mh_execute_header, v17, v16, " slot has more data, slotLen: %u, size_in: %zu\n", v45, 0x12u);
            }
          }
          else if (!logging_obg)
          {
            os_log_t v15 = (os_log_t)&_os_log_default;
            os_log_type_t v14 = OS_LOG_TYPE_ERROR;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_2_8_32_8_32((uint64_t)v44, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
              _os_log_error_impl((void *)&_mh_execute_header, v15, v14, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v44, 0x16u);
            }
          }
          return -1;
        }
      }
      else
      {
        os_log_t v13 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v13 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          os_log_t v12 = v13;
          os_log_type_t v11 = OS_LOG_TYPE_INFO;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v4 = v12;
            os_log_type_t v5 = v11;
            __os_log_helper_16_0_0(v10);
            _os_log_impl((void *)&_mh_execute_header, v4, v5, " empty slot\n\n", v10, 2u);
          }
        }
        else if (!v13 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v43, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v43, 0x16u);
        }
        return -1;
      }
    }
    else
    {
      os_log_t v23 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v23 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t oslog = v23;
        os_log_type_t v21 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v6 = oslog;
          os_log_type_t v7 = v21;
          __os_log_helper_16_0_0(v20);
          _os_log_impl((void *)&_mh_execute_header, v6, v7, " invalid filter\n", v20, 2u);
        }
      }
      else if (!v23)
      {
        *(void *)&__n[1] = &_os_log_default;
        HIBYTE(__n[0]) = 16;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v46, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, *(os_log_t *)&__n[1], HIBYTE(__n[0]), "Logging1 Module is not defined for SubSystem: %s, Category: %s", v46, 0x16u);
        }
      }
      return -1;
    }
  }
  else
  {
    os_log_t v38 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v38 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v37 = v38;
      char v36 = 1;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        log = v37;
        os_log_type_t type = v36;
        __os_log_helper_16_0_0(v35);
        _os_log_impl((void *)&_mh_execute_header, log, type, " invalid ch_data\n", v35, 2u);
      }
    }
    else if (!v38)
    {
      os_log_t v34 = (os_log_t)&_os_log_default;
      os_log_type_t v33 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v47, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v34, v33, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v47, 0x16u);
      }
    }
    return -1;
  }
}

uint64_t __os_log_helper_16_0_2_4_0_8_0(uint64_t result, int a2, uint64_t a3)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 1) = 2;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 9) = 8;
  *(void *)(result + 10) = a3;
  return result;
}

uint64_t ot::Posix::create_pcie_error_listener(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v45 = a1;
  unsigned __int16 v44 = a2;
  uint64_t v43 = a3;
  if (a1 && v44 && v43)
  {
    if (ot::Posix::pcie_driver_init(0, a2))
    {
      os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t v35 = logging_obg;
        char v34 = 1;
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v8 = v35;
          os_log_type_t v9 = v34;
          __os_log_helper_16_0_0(v33);
          _os_log_impl((void *)&_mh_execute_header, v8, v9, " PCIe Initialization failed\n ", v33, 2u);
        }
      }
      else if (!logging_obg)
      {
        os_log_t v32 = (os_log_t)&_os_log_default;
        os_log_type_t v31 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v49, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v32, v31, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v49, 0x16u);
        }
      }
      char v46 = 0;
    }
    else
    {
      os_log_t v23 = _NSConcreteStackBlock;
      int v24 = 0x40000000;
      int v25 = 0;
      unsigned __int16 v26 = ___ZN2ot5Posix26create_pcie_error_listenerEPFvPKcbEPFvS2_PbEPFv27AppleBluetoothStatisticTypeyE_block_invoke;
      unsigned __int16 v27 = &__block_descriptor_tmp_13;
      uint64_t v28 = v45;
      int v29 = v44;
      int v30 = &v23;
      fatalErrorCb = v45;
      char v22 = AppleConvergedTransportRegisterEventBlockQ() & 1;
      if (v22)
      {
        os_log_t v21 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v21 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          os_log_t oslog = v21;
          os_log_type_t v19 = OS_LOG_TYPE_INFO;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v6 = oslog;
            os_log_type_t v7 = v19;
            __os_log_helper_16_0_0(v18);
            _os_log_impl((void *)&_mh_execute_header, v6, v7, "PCIe registered event listener successfully\n", v18, 2u);
          }
        }
        else if (!v21)
        {
          os_log_t v17 = (os_log_t)&_os_log_default;
          os_log_type_t v16 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v48, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, v17, v16, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v48, 0x16u);
          }
        }
        char v46 = v22 & 1;
      }
      else
      {
        os_log_t v15 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v15 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          os_log_t v14 = v15;
          os_log_type_t v13 = OS_LOG_TYPE_INFO;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v4 = v14;
            os_log_type_t v5 = v13;
            __os_log_helper_16_0_0(v12);
            _os_log_impl((void *)&_mh_execute_header, v4, v5, "PCIe failed to register event listener\n", v12, 2u);
          }
        }
        else if (!v15 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v47, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v47, 0x16u);
        }
        fatalErrorCb = 0;
        char v46 = v22 & 1;
      }
    }
  }
  else
  {
    os_log_t v42 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v42 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v41 = v42;
      char v40 = 1;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        log = v41;
        os_log_type_t type = v40;
        __os_log_helper_16_0_0(v39);
        _os_log_impl((void *)&_mh_execute_header, log, type, "PCIe Bad argument\n", v39, 2u);
      }
    }
    else if (!v42)
    {
      os_log_t v38 = (os_log_t)&_os_log_default;
      os_log_type_t v37 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v50, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v38, v37, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v50, 0x16u);
      }
    }
    char v46 = 0;
  }
  return v46 & 1;
}

uint64_t ot::Posix::pcie_driver_init(ot::Posix *this, const char *a2)
{
  if (ot::Posix::pcie_driver_init(char const*)::once_token != -1) {
    dispatch_once(&ot::Posix::pcie_driver_init(char const*)::once_token, &__block_literal_global_15);
  }
  if (eventQueue) {
    return 0;
  }
  else {
    return -1;
  }
}

uint64_t ___ZN2ot5Posix26create_pcie_error_listenerEPFvPKcbEPFvS2_PbEPFv27AppleBluetoothStatisticTypeyE_block_invoke(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v22 = a1;
  int v21 = a2;
  uint64_t v20 = a3;
  int v19 = a4;
  uint64_t v18 = a1;
  if (a2)
  {
    if (v21 == 2)
    {
      os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t oslog = logging_obg;
        os_log_type_t v10 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v5 = oslog;
          os_log_type_t v6 = v10;
          __os_log_helper_16_0_0(v9);
          _os_log_impl((void *)&_mh_execute_header, v5, v6, "PCIe detected controller is resetting", v9, 2u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v25, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v25, 0x16u);
      }
      return (*(uint64_t (**)(uint64_t, char *))(a1 + 40))(v20, &rx_route_suspended);
    }
    else
    {
      os_log_type_t v8 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v8 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_2_1_8_32((uint64_t)v24, v20);
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "PCIe Non-fatal event: %s\n", v24, 0xCu);
        }
      }
      else if (!v8 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v23, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v23, 0x16u);
      }
      return (*(uint64_t (**)(uint64_t, void))(a1 + 32))(v20, 0);
    }
  }
  else
  {
    os_log_t v17 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v17 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v16 = v17;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_1_8_32((uint64_t)v27, v20);
        _os_log_impl((void *)&_mh_execute_header, v16, v15, "PCIe Fatal event: %s\n", v27, 0xCu);
      }
    }
    else if (!v17)
    {
      os_log_t v14 = (os_log_t)&_os_log_default;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v26, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v14, v13, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v26, 0x16u);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(a1 + 32))(v20, 1);
    rx_route_suspended = 1;
    return usleep(1000 * v19);
  }
}

void ot::Posix::errorCb(ot::Posix *this, const char *a2)
{
  char v5 = a2 & 1;
  os_log_type_t v2 = (ot::Posix::HdlcInterface *)pthread_mutex_lock(&lock);
  gPciStatus = 3;
  ot::Posix::HdlcInterface::skywalk_close(v2);
  ot::Posix::gErrorCallback(ot::Posix::gErrorContext, 0);
  pthread_mutex_unlock(&lock);
  if (v5)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_4_8_32_8_32_4_0_4_0((uint64_t)v10, (uint64_t)"errorCb", (uint64_t)this, gPciStatus, v5 & 1);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: PCIe Igor errorCb Update Firmware reset counters reason=[%s], gPciStatus=[%d] fatal=[%d]\n", v10, 0x22u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v9, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v9, 0x16u);
    }
    persist_host_reset_dueto_rcp();
  }
  unint64_t v3 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v3 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_4_8_32_8_32_4_0_4_0((uint64_t)v8, (uint64_t)"errorCb", (uint64_t)this, gPciStatus, v5 & 1);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s: PCIe Igor errorCb reason=[%s], gPciStatus=[%d] fatal=[%d]\n", v8, 0x22u);
    }
  }
  else if (!v3 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v7, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v7, 0x16u);
  }
}

uint64_t __os_log_helper_16_2_4_8_32_8_32_4_0_4_0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 4;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 32;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 4;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = 0;
  *(unsigned char *)(result + 29) = 4;
  *(_DWORD *)(result + 30) = a5;
  return result;
}

void ot::Posix::driverMetricsCb(int a1, uint64_t a2)
{
  int v9 = a1;
  uint64_t v8 = a2;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v6 = logging_obg;
    char v5 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v6;
      os_log_type_t type = v5;
      __os_log_helper_16_0_0(v4);
      _os_log_impl((void *)&_mh_execute_header, log, type, "PCIe Igor driverMetricsCb\n", v4, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v10, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v10, 0x16u);
  }
}

uint64_t ot::Posix::chipResettingCb(ot::Posix *this, const char *a2, BOOL *a3)
{
  unint64_t v3 = (ot::Posix::HdlcInterface *)pthread_mutex_lock(&lock);
  ot::Posix::HdlcInterface::skywalk_close(v3);
  ot::Posix::gErrorCallback(ot::Posix::gErrorContext, 0);
  gPciStatus = 2;
  if ((*a2 & 1) == 0)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_4_8_32_8_32_4_0_4_0((uint64_t)v19, (uint64_t)"chipResettingCb", (uint64_t)this, gPciStatus, *a2 & 1);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: PCIe Igor chipResettingCb Update Firmware reset counters reason=[%s], gPciStatus=[%d] fatal=[%d]\n", v19, 0x22u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v18, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v18, 0x16u);
    }
    persist_host_reset_dueto_rcp();
  }
  os_log_type_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v10 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_4_8_32_8_32_4_0_4_0((uint64_t)v17, (uint64_t)"chipResettingCb", (uint64_t)this, gPciStatus, *a2 & 1);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s: PCIe Igor chipResettingCb reason=[%s], gPciStatus=[%d] fatal=[%d]\n", v17, 0x22u);
    }
  }
  else if (!v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v16, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v16, 0x16u);
  }
  os_log_type_t v4 = (ot::Posix::HdlcInterface *)pthread_mutex_unlock(&lock);
  uint64_t result = ot::Posix::HdlcInterface::isPCIeSkywalk(v4);
  if (result)
  {
    int v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_1_8_32((uint64_t)v15, (uint64_t)"chipResettingCb");
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s: DieNow daemon restart triggered due to chip reset", v15, 0xCu);
      }
    }
    else if (!v9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v14, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v14, 0x16u);
    }
    uint64_t v8 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp", 47);
    if (v8) {
      os_log_type_t v7 = v8 + 1;
    }
    else {
      os_log_type_t v7 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/hdlc_skywalk_interface.cpp";
    }
    os_log_t v6 = otExitCodeToString(4u);
    otLogCritPlat("%s() at %s:%d: %s", "chipResettingCb", v7, 1367, v6);
    handle_daemon_exit();
    exit(4);
  }
  return result;
}

uint64_t ot::Posix::HdlcInterface::isPCIeSkywalk(ot::Posix::HdlcInterface *this)
{
  kern_return_t v81;
  uint8_t v82[32];
  uint8_t v83[16];
  uint8_t v84[32];
  uint8_t v85[32];
  uint8_t v86[32];
  uint8_t v87[16];
  uint8_t v88[32];
  uint8_t v89[32];
  uint8_t v90[16];
  uint8_t v91[32];
  void buffer[2];
  uint8_t v93[32];
  uint8_t v94[32];
  uint8_t v95[16];
  uint8_t v96[32];
  uint8_t v97[16];
  uint8_t v98[32];
  uint8_t v99[24];

  unint64_t v81 = -536870212;
  io_iterator_t notification = 0;
  CFRunLoopRunResult v75 = 0xFFFF;
  char v74 = 0;
  int v73 = 0;
  io_registry_entry_t v72 = 0;
  CFStringRef v71 = 0;
  IONotificationPortRef v78 = IONotificationPortCreate(kIOMainPortDefault);
  CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(v78);
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  CFDictionaryRef v80 = IOServiceMatching("AppleConvergedIPCInterface");
  if (v80)
  {
    CFStringRef v71 = CFStringCreateWithCString(kCFAllocatorDefault, "tsi", 0x600u);
    if (v71)
    {
      CFDictionarySetValue(v80, @"ACIPCInterfaceProtocol", v71);
      CFRelease(v71);
      unint64_t v81 = IOServiceAddMatchingNotification(v78, "IOServiceFirstMatch", v80, (IOServiceMatchingCallback)ot::Posix::IOServiceObjectFoundCB, Current, &notification);
      if (v81)
      {
        os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          os_log_t v59 = logging_obg;
          os_log_type_t v58 = OS_LOG_TYPE_INFO;
          if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
          {
            __os_log_helper_16_0_1_4_0((uint64_t)v95, v81);
            _os_log_impl((void *)&_mh_execute_header, v59, v58, "PCIe IOServiceAddMatchingNotification returned 0x%08x", v95, 8u);
          }
        }
        else if (!logging_obg)
        {
          os_log_t v57 = (os_log_t)&_os_log_default;
          os_log_type_t v56 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v94, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, v57, v56, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v94, 0x16u);
          }
        }
        CFRunLoopRemoveSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
        IONotificationPortDestroy(v78);
      }
      else
      {
        while (1)
        {
          io_registry_entry_t v72 = IOIteratorNext(notification);
          BOOL v12 = 0;
          if (!v72) {
            BOOL v12 = v75 != kCFRunLoopRunTimedOut;
          }
          if (!v12) {
            break;
          }
          os_log_t v55 = 0;
          os_log_t v55 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
          if (v55 && (syslog_is_the_mask_enabled(6) & 1) != 0)
          {
            os_log_t v54 = v55;
            os_log_type_t v53 = OS_LOG_TYPE_INFO;
            if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v10 = v54;
              os_log_type_t v11 = v53;
              __os_log_helper_16_0_0(v52);
              _os_log_impl((void *)&_mh_execute_header, v10, v11, "PCIe ACIPCInterface not found, waiting for it to appear", v52, 2u);
            }
          }
          else if (!v55)
          {
            os_log_t v51 = (os_log_t)&_os_log_default;
            os_log_type_t v50 = OS_LOG_TYPE_ERROR;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_2_8_32_8_32((uint64_t)v93, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
              _os_log_error_impl((void *)&_mh_execute_header, v51, v50, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v93, 0x16u);
            }
          }
          CFRunLoopRunResult v75 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 5.0, 0);
        }
        CFRunLoopRemoveSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
        IONotificationPortDestroy(v78);
        IOObjectRelease(notification);
        if (v72 && (v75 == kCFRunLoopRunStopped || v75 == 0xFFFF))
        {
          CFStringRef v49 = (CFStringRef)IORegistryEntrySearchCFProperty(v72, "IOService", @"ACIPCInterfaceTransport", kCFAllocatorDefault, 1u);
          if (v49)
          {
            buffer[0] = 0;
            buffer[1] = 0;
            if (CFStringGetCString(v49, (char *)buffer, 16, 0x600u) != 0)
            {
              os_log_t v41 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
              if (v41 && (syslog_is_the_mask_enabled(6) & 1) != 0)
              {
                os_log_t v40 = v41;
                os_log_type_t v39 = OS_LOG_TYPE_INFO;
                if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                {
                  __os_log_helper_16_2_1_8_32((uint64_t)v90, (uint64_t)buffer);
                  _os_log_impl((void *)&_mh_execute_header, v40, v39, "PCIe ACIPCInterfaceTransport \"%s\"\n", v90, 0xCu);
                }
              }
              else if (!v41)
              {
                os_log_t v38 = (os_log_t)&_os_log_default;
                os_log_type_t v37 = OS_LOG_TYPE_ERROR;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  __os_log_helper_16_2_2_8_32_8_32((uint64_t)v89, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                  _os_log_error_impl((void *)&_mh_execute_header, v38, v37, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v89, 0x16u);
                }
              }
              if (!strcmp((const char *)buffer, "skywalk"))
              {
                while (v73 < 25)
                {
                  CFTypeRef v36 = IORegistryEntrySearchCFProperty(v72, "IOService", @"IOSkywalkNexusUUID", kCFAllocatorDefault, 1u);
                  if (v36)
                  {
                    os_log_t v35 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
                    if (v35 && (syslog_is_the_mask_enabled(6) & 1) != 0)
                    {
                      os_log_t v34 = v35;
                      os_log_type_t v33 = OS_LOG_TYPE_INFO;
                      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
                      {
                        os_log_t v6 = v34;
                        os_log_type_t v7 = v33;
                        __os_log_helper_16_0_0(v32);
                        _os_log_impl((void *)&_mh_execute_header, v6, v7, "PCIe ACIPCInterfaceTransport + IOSkywalkNexusUUID found\n", v32, 2u);
                      }
                    }
                    else if (!v35)
                    {
                      os_log_t v31 = (os_log_t)&_os_log_default;
                      os_log_type_t v30 = OS_LOG_TYPE_ERROR;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                      {
                        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v88, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                        _os_log_error_impl((void *)&_mh_execute_header, v31, v30, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v88, 0x16u);
                      }
                    }
                    CFRelease(v36);
                    char v74 = 1;
                    int v29 = 0;
                    usleep(0xF4240u);
                    break;
                  }
                  usleep(0x30D40u);
                  os_log_t v28 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
                  if (v28 && (syslog_is_the_mask_enabled(6) & 1) != 0)
                  {
                    os_log_t v27 = v28;
                    os_log_type_t v26 = OS_LOG_TYPE_INFO;
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
                    {
                      __os_log_helper_16_0_1_4_0((uint64_t)v87, v73);
                      _os_log_impl((void *)&_mh_execute_header, v27, v26, "PCIe Retry: %d - trying to find ACIPCInterfaceTransport + IOSkywalkNexusUUID\n", v87, 8u);
                    }
                  }
                  else if (!v28)
                  {
                    os_log_t v25 = (os_log_t)&_os_log_default;
                    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v86, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                      _os_log_error_impl((void *)&_mh_execute_header, v25, v24, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v86, 0x16u);
                    }
                  }
                  ++v73;
                }
              }
              else
              {
                os_log_t v23 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
                if (v23 && (syslog_is_the_mask_enabled(6) & 1) != 0)
                {
                  os_log_t oslog = v23;
                  os_log_type_t v21 = OS_LOG_TYPE_INFO;
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                  {
                    os_log_type_t v4 = oslog;
                    os_log_type_t v5 = v21;
                    __os_log_helper_16_0_0(v20);
                    _os_log_impl((void *)&_mh_execute_header, v4, v5, "PCIe ACIPCInterfaceTransport is not skywalk\n", v20, 2u);
                  }
                }
                else if (!v23)
                {
                  os_log_t v19 = (os_log_t)&_os_log_default;
                  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v85, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                    _os_log_error_impl((void *)&_mh_execute_header, v19, v18, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v85, 0x16u);
                  }
                }
              }
            }
            else
            {
              os_log_t v47 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
              if (v47 && (syslog_is_the_mask_enabled(6) & 1) != 0)
              {
                os_log_t v46 = v47;
                os_log_type_t v45 = OS_LOG_TYPE_INFO;
                if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
                {
                  uint64_t v8 = v46;
                  os_log_type_t v9 = v45;
                  __os_log_helper_16_0_0(v44);
                  _os_log_impl((void *)&_mh_execute_header, v8, v9, "PCIe failed to get cstring property", v44, 2u);
                }
              }
              else if (!v47)
              {
                os_log_t v43 = (os_log_t)&_os_log_default;
                os_log_type_t v42 = OS_LOG_TYPE_ERROR;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  __os_log_helper_16_2_2_8_32_8_32((uint64_t)v91, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                  _os_log_error_impl((void *)&_mh_execute_header, v43, v42, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v91, 0x16u);
                }
              }
            }
            CFRelease(v49);
          }
          else
          {
            os_log_t v17 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
            if (v17 && (syslog_is_the_mask_enabled(6) & 1) != 0)
            {
              os_log_t v16 = v17;
              os_log_type_t v15 = OS_LOG_TYPE_INFO;
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                os_log_type_t v2 = v16;
                os_log_type_t v3 = v15;
                __os_log_helper_16_0_0(v14);
                _os_log_impl((void *)&_mh_execute_header, v2, v3, "PCIe ACIPCInterface found, ACIPCInterfaceTransport property not found", v14, 2u);
              }
            }
            else if (!v17 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_2_8_32_8_32((uint64_t)v84, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v84, 0x16u);
            }
          }
        }
        else
        {
          os_log_type_t v13 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v13 && (syslog_is_the_mask_enabled(6) & 1) != 0)
          {
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              __os_log_helper_16_0_1_4_0((uint64_t)v83, v75);
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "PCIe ACIPCInterface not found after 5 second -- runLoopResult = 0x%02x", v83, 8u);
            }
          }
          else if (!v13 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v82, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v82, 0x16u);
          }
        }
      }
    }
    else
    {
      os_log_t v65 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v65 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t v64 = v65;
        os_log_type_t v63 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_2_1_8_32((uint64_t)v97, (uint64_t)"isPCIeSkywalk");
          _os_log_impl((void *)&_mh_execute_header, v64, v63, "%s: PCIe failed to create stringRef", v97, 0xCu);
        }
      }
      else if (!v65)
      {
        os_log_t v62 = (os_log_t)&_os_log_default;
        os_log_type_t v61 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v96, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v62, v61, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v96, 0x16u);
        }
      }
      CFRelease(v80);
    }
  }
  else
  {
    os_log_t v70 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v70 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v69 = v70;
      os_log_type_t type = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_1_8_32((uint64_t)v99, (uint64_t)"isPCIeSkywalk");
        _os_log_impl((void *)&_mh_execute_header, v69, type, "%s: PCIe could not create matching dictionary", v99, 0xCu);
      }
    }
    else if (!v70)
    {
      os_log_t v67 = (os_log_t)&_os_log_default;
      os_log_type_t v66 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v98, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v67, v66, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v98, 0x16u);
      }
    }
  }
  if (v72) {
    IOObjectRelease(v72);
  }
  return v74 & 1;
}

void ot::Posix::IOServiceObjectFoundCB(ot::Posix *this, void *a2)
{
  os_log_type_t v10 = this;
  int v9 = (int)a2;
  CFRunLoopRef v8 = this;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v6 = logging_obg;
    char v5 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v6;
      os_log_type_t type = v5;
      __os_log_helper_16_0_0(v4);
      _os_log_impl((void *)&_mh_execute_header, log, type, "ACIPCInterface found, releasing waiting thread", v4, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v11, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v11, 0x16u);
  }
  CFRunLoopStop(v8);
}

uint64_t ot::Posix::HdlcInterface::skywalk_read_thread(ot::Posix::HdlcInterface *this, void *a2)
{
  BOOL v12 = this;
  int channel = -1;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v9 = logging_obg;
    char v8 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v9;
      os_log_type_t type = v8;
      __os_log_helper_16_0_0(v7);
      _os_log_impl((void *)&_mh_execute_header, log, type, " In skywalk_read_thread Read Thread,\n ", v7, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v16, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v16, 0x16u);
  }
  while (!gPciStatus)
  {
    bzero(ot::Posix::recv_pkt_loop, 0x4B0uLL);
    ot::Posix::recv_pkt_len_loop = 1200;
    ot::Posix::buf_index = ot::Posix::buf_index % 10;
    int channel = ot::Posix::HdlcInterface::read_channel((ot::Posix::HdlcInterface *)&ot::Posix::recv_pkt_loop[1200 * ot::Posix::buf_index], &ot::Posix::recv_pkt_len_loop, v2);
    if (channel)
    {
      ot::Posix::recv_pkt_len_loop = 0;
      if (++ot::Posix::readFailCount > 0xAu) {
        return 0;
      }
      usleep(0x3E8u);
    }
    if (ot::Posix::recv_pkt_len_loop)
    {
      ot::Posix::readFailint Count = 0;
      ot::Hdlc::Decoder::Decode((ot::Hdlc::Decoder *)ot::Posix::gk_HdlcDecoder, &ot::Posix::recv_pkt_loop[1200 * ot::Posix::buf_index], ot::Posix::recv_pkt_len_loop);
      write(dword_1004B620C, "x", 1uLL);
    }
  }
  os_log_t v6 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v6 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_1_4_0((uint64_t)v15, gPciStatus);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "skywalk_read_thread exits due to PCI failure,gPciStatus=%d\n ", v15, 8u);
    }
  }
  else if (!v6 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v14, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v14, 0x16u);
  }
  return 0;
}

void ot::Posix::HdlcInterface::skywalk_read(ot::Posix::HdlcInterface *this, unsigned __int8 *a2, unint64_t *a3)
{
  bzero(this, 0x4B0uLL);
  *(void *)a2 = 1200;
  int channel = ot::Posix::HdlcInterface::read_channel(this, (uint64_t *)a2, v3);
  if (channel)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v12, channel);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, " read failure. return =%d\n", v12, 8u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v11, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v11, 0x16u);
    }
    printf("%s: read failure. return: 0x%08x\n", "skywalk_read", channel);
  }
  printf("received %zu bytes: ", *(void *)a2);
  os_log_type_t v4 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v4 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_1_8_0((uint64_t)v10, *(void *)a2);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, " skywalk_read: bytes=%zu ", v10, 0xCu);
    }
  }
  else if (!v4 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v9, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v9, 0x16u);
  }
  ot::Posix::HdlcInterface::print_pkt_bytes(this, *(unsigned __int8 **)a2);
}

uint64_t __os_log_helper_16_0_1_8_0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 1) = 1;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  return result;
}

void ___ZN2ot5PosixL16pcie_driver_initEPKc_block_invoke(id a1)
{
  CFDictionaryRef v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  eventQueue = (uint64_t)dispatch_queue_create("com.apple.threadradiod.pcie-event", v1);
}

uint64_t ot::Hdlc::FrameBuffer<(unsigned short)8192>::Clear(uint64_t result)
{
  *(void *)uint64_t result = result + 10;
  *(_WORD *)(result + 8) = 0x2000;
  return result;
}

{
  return ot::Hdlc::FrameBuffer<(unsigned short)8192>::Clear(result);
}

uint64_t boost::optional_ns::in_place_init_t::in_place_init_t(uint64_t a1)
{
  return a1;
}

uint64_t ot::Posix::bpf_new(ot::Posix *this)
{
  int v4 = -1;
  for (int i = 0; ; ++i)
  {
    snprintf(__str, 0x100uLL, "/dev/bpf%d", i);
    int v4 = open(__str, 2, 0);
    if (v4 >= 0) {
      break;
    }
    if (*__error() != 16) {
      goto LABEL_6;
    }
  }
  int v3 = 900;
  ioctl(v4, 0x8004427BuLL, &v3);
LABEL_6:
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_0_1_4_0((uint64_t)v7, v4);
      _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface bpf_new for fd=%d", v7, 8u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v6, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v6, 0x16u);
  }
  return v4;
}

uint64_t ot::Posix::BackboneIPv6Interface::get_read_fd(ot::Posix::BackboneIPv6Interface *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t ot::Posix::BackboneIPv6Interface::get_read(ot::Posix::BackboneIPv6Interface *this, unsigned __int8 *a2, uint64_t a3)
{
  CFTypeRef v36 = this;
  os_log_t v35 = a2;
  uint64_t v34 = a3;
  unsigned int v33 = -1;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  if (*((unsigned char *)this + 38))
  {
    if ((int)v34 >= *((_DWORD *)this + 24))
    {
      if (*((void *)this + 11))
      {
        if (*((_DWORD *)this + 24))
        {
          uint64_t v32 = *((void *)this + 11);
          uint64_t v31 = *((void *)this + 11) + *(unsigned __int16 *)(v32 + 16);
          uint64_t v30 = v31 + 14;
          unsigned int v33 = *(_DWORD *)(v32 + 12) - 14;
          bcopy((const void *)(v31 + 14), v35, (int)v33);
        }
        else
        {
          os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
          if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
          {
            os_log_t v12 = logging_obg;
            os_log_type_t v11 = OS_LOG_TYPE_ERROR;
            if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
            {
              int v4 = v12;
              os_log_type_t v5 = v11;
              __os_log_helper_16_0_0(v10);
              _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "BackboneIPv6Interface get_read mReadBufferLen is 0", v10, 2u);
            }
          }
          else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v40, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v40, 0x16u);
          }
        }
      }
      else
      {
        os_log_t v18 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v18 && (syslog_is_the_mask_enabled(3) & 1) != 0)
        {
          os_log_t oslog = v18;
          os_log_type_t v16 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_0_1_4_0((uint64_t)v42, *((_DWORD *)this + 24));
            _os_log_error_impl((void *)&_mh_execute_header, oslog, v16, "BackboneIPv6Interface get_read mReadBuffer is NULL while mReadBufferLen=%d", v42, 8u);
          }
        }
        else if (!v18)
        {
          os_log_t v15 = (os_log_t)&_os_log_default;
          os_log_type_t v14 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v41, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, v15, v14, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v41, 0x16u);
          }
        }
        *((_DWORD *)this + 24) = 0;
      }
    }
    else
    {
      os_log_t v23 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v23 && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        os_log_t v22 = v23;
        os_log_type_t v21 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_0_2_4_0_4_0((uint64_t)v44, v34, *((_DWORD *)this + 24));
          _os_log_error_impl((void *)&_mh_execute_header, v22, v21, "BackboneIPv6Interface get_read failed as len(%d) < mReadBufferLen(%d)", v44, 0xEu);
        }
      }
      else if (!v23)
      {
        os_log_t v20 = (os_log_t)&_os_log_default;
        os_log_type_t v19 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v43, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v20, v19, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v43, 0x16u);
        }
      }
    }
    if (*((void *)this + 11))
    {
      *((_DWORD *)this + 24) = 0;
      if (*((void *)this + 11)) {
        operator delete();
      }
      *((void *)this + 11) = 0;
    }
    else
    {
      os_log_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v9 && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_0_3_4_0_4_0_4_0((uint64_t)v39, v33, *((_DWORD *)this + 24), *((unsigned char *)this + 38) & 1);
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface get_read mReadBuffer is NULL here lenToRet=%d mReadBufferLen=%d mBackboneIsConnected=%d", v39, 0x14u);
        }
      }
      else if (!v9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v38, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v38, 0x16u);
      }
    }
    return v33;
  }
  else
  {
    os_log_t v29 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v29 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v28 = v29;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        log = v28;
        os_log_type_t v7 = type;
        __os_log_helper_16_0_0(v26);
        _os_log_error_impl((void *)&_mh_execute_header, log, v7, "BackboneIPv6Interface::get_read Backbone is not connected", v26, 2u);
      }
    }
    else if (!v29)
    {
      os_log_t v25 = (os_log_t)&_os_log_default;
      os_log_type_t v24 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v45, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v25, v24, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v45, 0x16u);
      }
    }
    return -1;
  }
}

uint64_t __os_log_helper_16_0_3_4_0_4_0_4_0(uint64_t result, int a2, int a3, int a4)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 9) = 4;
  *(_DWORD *)(result + 10) = a3;
  *(unsigned char *)(result + 14) = 0;
  *(unsigned char *)(result + 15) = 4;
  *(_DWORD *)(result + 16) = a4;
  return result;
}

uint64_t ot::Posix::BackboneIPv6Interface::check_valid_read(ot::Posix::BackboneIPv6Interface *this, unsigned __int8 *a2, int a3, in6_addr *a4, in6_addr *a5)
{
  os_log_t v18 = this;
  os_log_t v17 = a2;
  int v16 = a3;
  os_log_t v15 = a4;
  os_log_type_t v14 = a5;
  if (a2)
  {
    os_log_type_t v13 = v17;
    os_log_t v12 = 0;
    os_log_t v12 = &v17[*((unsigned __int16 *)v17 + 8)];
    if (v12)
    {
      if ((unsigned __int16)_OSSwapInt16(*((_WORD *)v12 + 6)) == 34525)
      {
        os_log_type_t v11 = v12 + 14;
        if (v12 == (unsigned __int8 *)-14)
        {
          char v19 = 0;
        }
        else
        {
          unsigned __int16 v10 = 0;
          unsigned __int16 v10 = _OSSwapInt16(*((_WORD *)v11 + 2));
          if (v10 <= 0x500u)
          {
            memset(__b, 0, sizeof(__b));
            inet_ntop(30, v11 + 8, __b, 0x2Eu);
            memset(v23, 0, sizeof(v23));
            inet_ntop(30, v11 + 24, v23, 0x2Eu);
            memset(v22, 0, sizeof(v22));
            inet_ntop(30, v11 + 24, v22, 0x2Eu);
            std::string::basic_string[abi:nn180100]<0>(&v9, v22);
            char v8 = v11 + 24;
            ot::Ip6::Address::SetBytes(&v7, (__n128 *)(v11 + 24));
            if (ot::Ip6::Address::IsMulticastLargerThanRealmLocal((ot::Ip6::Address *)&v7))
            {
              in6_addr *v15 = *(in6_addr *)(v11 + 8);
              in6_addr *v14 = *(in6_addr *)(v11 + 24);
              os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
              if (logging_obg && (syslog_is_the_mask_enabled(7) & 1) != 0)
              {
                if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG))
                {
                  __os_log_helper_16_2_4_8_32_8_32_4_0_8_0((uint64_t)v21, (uint64_t)__b, (uint64_t)v23, v10, 8);
                  _os_log_debug_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_DEBUG, "BackboneIPv6Interface: check_valid_read read ipv6 src:%s to dst:%s ipv6 packet len(%d) ipv6 hdr len(%lu)", v21, 0x26u);
                }
              }
              else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                __os_log_helper_16_2_2_8_32_8_32((uint64_t)v20, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v20, 0x16u);
              }
              char v19 = 1;
            }
            else
            {
              char v19 = 0;
            }
            std::string::~string(&v9);
          }
          else
          {
            char v19 = 0;
          }
        }
      }
      else
      {
        char v19 = 0;
      }
    }
    else
    {
      char v19 = 0;
    }
  }
  else
  {
    char v19 = 0;
  }
  return v19 & 1;
}

uint64_t _OSSwapInt16(unsigned __int16 a1)
{
  return (unsigned __int16)(((int)a1 >> 8) | (a1 << 8));
}

std::string *std::string::basic_string[abi:nn180100]<0>(std::string *a1, const char *a2)
{
  return a1;
}

{
  std::string::size_type v2;

  std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:nn180100]<std::__default_init_tag,std::__default_init_tag>((uint64_t)a1);
  os_log_type_t v2 = std::char_traits<char>::length[abi:nn180100](a2);
  std::string::__init(a1, a2, v2);
  return a1;
}

__n128 ot::Ip6::Address::SetBytes(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this = *a2;
  return result;
}

uint64_t __os_log_helper_16_2_4_8_32_8_32_4_0_8_0(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 4;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 32;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 4;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = 0;
  *(unsigned char *)(result + 29) = 8;
  *(void *)(result + 30) = a5;
  return result;
}

uint64_t ot::Posix::BackboneIPv6Interface::can_read(ot::Posix::BackboneIPv6Interface *this, in6_addr *a2, in6_addr *a3)
{
  os_log_type_t v21 = this;
  os_log_t v20 = a2;
  char v19 = a3;
  unsigned int v18 = 0;
  char v17 = 0;
  if (std::string::size[abi:nn180100]())
  {
    if (*((unsigned char *)this + 38) & 1) != 0 && (*((unsigned char *)this + 39) & 1) != 0 && (*((unsigned char *)this + 40))
    {
      if (*((int *)this + 20) >= 0 && *((int *)this + 19) >= 0 && *((int *)this + 18) >= 0)
      {
        if (ioctl(*((_DWORD *)this + 19), 0x40044266uLL, &v18) >= 0)
        {
          if (*((void *)this + 11) || *((int *)this + 24) > 0)
          {
            os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
            if (logging_obg && (syslog_is_the_mask_enabled(7) & 1) != 0)
            {
              if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG))
              {
                __os_log_helper_16_0_1_4_0((uint64_t)v32, *((_DWORD *)this + 24));
                _os_log_debug_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_DEBUG, "BackbineInterface can_read return here as mReadBufferLen(%d) already", v32, 8u);
              }
            }
            else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_2_8_32_8_32((uint64_t)v31, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v31, 0x16u);
            }
            char v22 = 1;
          }
          else
          {
            if (*((void *)this + 11))
            {
              unsigned __int16 v10 = log_get_logging_obg("com.apple.threadradiod", "default");
              if (v10 && (syslog_is_the_mask_enabled(3) & 1) != 0)
              {
                if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
                {
                  __os_log_helper_16_0_1_4_0((uint64_t)v30, *((_DWORD *)this + 24));
                  _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "BackboneInterface Read buffer is not NULL which is unexpected mReadBufferLen(%d)", v30, 8u);
                }
              }
              else if (!v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                __os_log_helper_16_2_2_8_32_8_32((uint64_t)v29, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v29, 0x16u);
              }
              if (*((void *)this + 11)) {
                operator delete();
              }
              *((void *)this + 11) = 0;
              *((_DWORD *)this + 24) = 0;
            }
            if (*((_DWORD *)this + 24))
            {
              std::string v9 = log_get_logging_obg("com.apple.threadradiod", "default");
              if (v9 && (syslog_is_the_mask_enabled(3) & 1) != 0)
              {
                if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                {
                  __os_log_helper_16_0_1_4_0((uint64_t)v28, *((_DWORD *)this + 24));
                  _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BackboneInterface Read buffer Len is not NULL which is unexpected mReadBufferLen(%d)", v28, 8u);
                }
              }
              else if (!v9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                __os_log_helper_16_2_2_8_32_8_32((uint64_t)v27, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v27, 0x16u);
              }
              *((_DWORD *)this + 24) = 0;
              if (*((void *)this + 11)) {
                operator delete();
              }
            }
            *((void *)this + 11) = malloc_type_malloc(v18, 0xEC90FBFuLL);
            if (*((void *)this + 11))
            {
              *((_DWORD *)this + 24) = read(*((_DWORD *)this + 19), *((void **)this + 11), v18);
              if (*((int *)this + 24) > 0
                && (ot::Posix::BackboneIPv6Interface::check_valid_read(this, *((unsigned __int8 **)this + 11), *((_DWORD *)this + 24), v20, v19) & 1) != 0)
              {
                if (*((int *)this + 24) < 1295)
                {
                  char v22 = 1;
                  return v22 & 1;
                }
                __n128 v7 = log_get_logging_obg("com.apple.threadradiod", "default");
                if (v7 && (syslog_is_the_mask_enabled(7) & 1) != 0)
                {
                  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
                  {
                    __os_log_helper_16_0_1_4_0((uint64_t)v24, v18);
                    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BackboneInterface read buffer of len (%d) > max size supported (1295)", v24, 8u);
                  }
                }
                else if (!v7 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  __os_log_helper_16_2_2_8_32_8_32((uint64_t)v23, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v23, 0x16u);
                }
              }
            }
            else
            {
              char v8 = log_get_logging_obg("com.apple.threadradiod", "default");
              if (v8 && (syslog_is_the_mask_enabled(7) & 1) != 0)
              {
                if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
                {
                  __os_log_helper_16_0_1_4_0((uint64_t)v26, v18);
                  _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BackboneInterface can_read cannot create buffer of len (%d) to read", v26, 8u);
                }
              }
              else if (!v8 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                __os_log_helper_16_2_2_8_32_8_32((uint64_t)v25, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v25, 0x16u);
              }
            }
            if (*((void *)this + 11))
            {
              free(*((void **)this + 11));
              *((void *)this + 11) = 0;
            }
            *((_DWORD *)this + 24) = 0;
            char v22 = 0;
          }
        }
        else
        {
          os_log_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v12 && (syslog_is_the_mask_enabled(7) & 1) != 0)
          {
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              __os_log_helper_16_0_1_4_0((uint64_t)v34, v18);
              _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "BackboneInterface can_read return here as blen(%d) < 0", v34, 8u);
            }
          }
          else if (!v12 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v33, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v33, 0x16u);
          }
          char v22 = v17 & 1;
        }
      }
      else
      {
        char v22 = v17 & 1;
      }
    }
    else
    {
      char v22 = v17 & 1;
    }
  }
  else
  {
    os_log_t v16 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v16 && (syslog_is_the_mask_enabled(7) & 1) != 0)
    {
      os_log_t v15 = v16;
      os_log_type_t type = OS_LOG_TYPE_DEBUG;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        log = v15;
        os_log_type_t v5 = type;
        __os_log_helper_16_0_0(v13);
        _os_log_debug_impl((void *)&_mh_execute_header, log, v5, "BackboneInterface can_read return here as backbone interface name is not initialized yet", v13, 2u);
      }
    }
    else if (!v16 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v35, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v35, 0x16u);
    }
    char v22 = v17 & 1;
  }
  return v22 & 1;
}

uint64_t std::string::size[abi:nn180100]()
{
  if (std::string::__is_long[abi:nn180100]()) {
    return std::string::__get_long_size[abi:nn180100]();
  }
  else {
    return std::string::__get_short_size[abi:nn180100]();
  }
}

uint64_t ot::Posix::BackboneIPv6Interface::cleanupReadBuffer(uint64_t this)
{
  if (*(void *)(this + 88)) {
    operator delete();
  }
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t ot::Posix::BackboneIPv6Interface::update_backbone_ethernet_address(ot::Posix::BackboneIPv6Interface *this)
{
  unsigned int v33 = this;
  if (std::string::empty[abi:nn180100]())
  {
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v31 = logging_obg;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
      {
        log = v31;
        os_log_type_t v9 = type;
        __os_log_helper_16_0_0(v29);
        _os_log_error_impl((void *)&_mh_execute_header, log, v9, "BackboneIPv6Interface::update_backbone_ethernet_address backbone interface name is nullptr", v29, 2u);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v28 = (os_log_t)&_os_log_default;
      os_log_type_t v27 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v43, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v28, v27, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v43, 0x16u);
      }
    }
    char v34 = 0;
    return v34 & 1;
  }
  os_log_type_t v26 = 0;
  int i = 0;
  if (getifaddrs(&v26) < 0)
  {
    os_log_t v24 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v24 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v23 = v24;
      os_log_type_t v22 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        os_log_t v6 = v23;
        os_log_type_t v7 = v22;
        __os_log_helper_16_0_0(v21);
        _os_log_error_impl((void *)&_mh_execute_header, v6, v7, "BackboneIPv6Interface::update_backbone_ethernet_address Couldnt getifaddrs", v21, 2u);
      }
    }
    else if (!v24)
    {
      os_log_t v20 = (os_log_t)&_os_log_default;
      os_log_type_t v19 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v42, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v20, v19, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v42, 0x16u);
      }
    }
    char v34 = 0;
    return v34 & 1;
  }
  for (int i = v26; ; int i = i->ifa_next)
  {
    if (!i)
    {
      char v34 = 0;
      return v34 & 1;
    }
    if (!i->ifa_name)
    {
      os_log_t v18 = 0;
      os_log_t v18 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v18 && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        os_log_t v17 = v18;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          int v4 = v17;
          os_log_type_t v5 = v16;
          __os_log_helper_16_0_0(v15);
          _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "BackboneIPv6Interface update_backbone_ethernet_address ifa_name is nullptr", v15, 2u);
        }
      }
      else if (!v18 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v41, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v41, 0x16u);
      }
      continue;
    }
    std::string::c_str[abi:nn180100]();
    if (strcmp(v1, i->ifa_name) || i->ifa_addr->sa_family != 18) {
      continue;
    }
    ifa_addr = i->ifa_addr;
    if (!ifa_addr)
    {
      os_log_type_t v13 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v13 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_2_1_8_32((uint64_t)v40, (uint64_t)i->ifa_name);
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BackboneIPv6Interface update_backbone_ethernet_address ifname=%s sockaddr is null", v40, 0xCu);
        }
      }
      else if (!v13 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v39, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v39, 0x16u);
      }
      continue;
    }
    os_log_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v12 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_2_8_32_4_0((uint64_t)v38, (uint64_t)i->ifa_name, ifa_addr->sa_data[2]);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BackboneIPv6Interface update_backbone_ethernet_address ifname=%s ether_type=%d", v38, 0x12u);
      }
    }
    else if (!v12 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v37, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v37, 0x16u);
    }
    if (ifa_addr->sa_data[2] == 6) {
      break;
    }
  }
  uint64_t v2 = (uint64_t)&ifa_addr->sa_data[ifa_addr->sa_data[3] + 6];
  *((_DWORD *)this + 8) = *(_DWORD *)v2;
  *((_WORD *)this + 18) = *(_WORD *)(v2 + 4);
  freeifaddrs(v26);
  os_log_type_t v11 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v11 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_6_4_0_4_0_4_0_4_0_4_0_4_0((uint64_t)v36, *((unsigned __int8 *)this + 32), *((unsigned __int8 *)this + 33), *((unsigned __int8 *)this + 34), *((unsigned __int8 *)this + 35), *((unsigned __int8 *)this + 36), *((unsigned __int8 *)this + 37));
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BackboneIPv6Interface update_backbone_ethernet_address,the backbone interface HW address is %02x:%02x:%02x:%02x:%02x:%02x ", v36, 0x26u);
    }
  }
  else if (!v11 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v35, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v35, 0x16u);
  }
  char v34 = 1;
  return v34 & 1;
}

BOOL std::string::empty[abi:nn180100]()
{
  return std::string::size[abi:nn180100]() == 0;
}

void std::string::c_str[abi:nn180100]()
{
}

uint64_t __os_log_helper_16_2_2_8_32_4_0(uint64_t result, uint64_t a2, int a3)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 2;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 4;
  *(_DWORD *)(result + 14) = a3;
  return result;
}

uint64_t __os_log_helper_16_0_6_4_0_4_0_4_0_4_0_4_0_4_0(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 1) = 6;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 9) = 4;
  *(_DWORD *)(result + 10) = a3;
  *(unsigned char *)(result + 14) = 0;
  *(unsigned char *)(result + 15) = 4;
  *(_DWORD *)(result + 16) = a4;
  *(unsigned char *)(result + 20) = 0;
  *(unsigned char *)(result + 21) = 4;
  *(_DWORD *)(result + 22) = a5;
  *(unsigned char *)(result + 26) = 0;
  *(unsigned char *)(result + 27) = 4;
  *(_DWORD *)(result + 28) = a6;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 33) = 4;
  *(_DWORD *)(result + 34) = a7;
  return result;
}

void ot::Posix::BackboneIPv6Interface::send_bmlr_packet(ot::Posix::BackboneIPv6Interface *this, char *a2, size_t a3)
{
  uint64_t v30 = this;
  os_log_t v29 = a2;
  size_t v28 = a3;
  if (*((unsigned char *)this + 38))
  {
    __int16 v22 = -31011;
    ssize_t v21 = 0;
    bzero(v39, 0x800uLL);
    os_log_t v20 = v39;
    bcopy(&ot::Posix::bmlr_broadcast_ether, v39, 6uLL);
    bcopy((char *)this + 32, v40, 6uLL);
    v40[3] = _OSSwapInt16(0x86DDu);
    bzero(&v38, 0x12uLL);
    v38.sa_len = 18;
    v38.sa_family = 27;
    bcopy(v29, v41, v28);
    os_log_type_t v19 = v41;
    v41[7] = 1;
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(7) & 1) != 0)
    {
      os_log_t v17 = logging_obg;
      os_log_type_t v16 = OS_LOG_TYPE_DEBUG;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG))
      {
        __os_log_helper_16_0_2_4_0_4_0((uint64_t)v37, v19[7], v28);
        _os_log_debug_impl((void *)&_mh_execute_header, v17, v16, "BackboneIPv6Interface[BMLR]: Hop limit in the ipv6 header=%d len=%d", v37, 0xEu);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v15 = (os_log_t)&_os_log_default;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v36, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v15, v14, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v36, 0x16u);
      }
    }
    if (*((_DWORD *)this + 20) == -1)
    {
      os_log_t v13 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v13 && (syslog_is_the_mask_enabled(7) & 1) != 0)
      {
        os_log_t oslog = v13;
        os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v5 = oslog;
          os_log_type_t v6 = v11;
          __os_log_helper_16_0_0(v10);
          _os_log_debug_impl((void *)&_mh_execute_header, v5, v6, "BackboneIPv6Interface[BMLR]: send_bmlr_packet failed as mBackboneInterfaceNdrvFd = -1", v10, 2u);
        }
      }
      else if (!v13 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v35, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v35, 0x16u);
      }
    }
    else
    {
      ssize_t v21 = sendto(*((_DWORD *)this + 20), v39, v28 + 14, 0, &v38, 0x12u);
      if (v21 == v28 + 14)
      {
        char v8 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v8 && (syslog_is_the_mask_enabled(7) & 1) != 0)
        {
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            __os_log_helper_16_0_3_8_0_8_0_4_0((uint64_t)v32, v21, v28, *((_DWORD *)this + 20));
            _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BackboneIPv6Interface[BMLR]: send_bmlr_packet sendSize=%zu len=%zu, fd:%d", v32, 0x1Cu);
          }
        }
        else if (!v8 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v31, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v31, 0x16u);
        }
      }
      else
      {
        os_log_type_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v9 && (syslog_is_the_mask_enabled(3) & 1) != 0)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            int v3 = __error();
            int v4 = strerror(*v3);
            __os_log_helper_16_2_4_8_32_8_0_8_0_4_0((uint64_t)v34, (uint64_t)v4, v21, v28, *((_DWORD *)this + 20));
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface[BMLR]: send_bmlr_packet sendto failed %s sendSize=%zu len=%zu fd:%d", v34, 0x26u);
          }
        }
        else if (!v9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v33, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v33, 0x16u);
        }
      }
    }
  }
  else
  {
    os_log_t v27 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v27 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v26 = v27;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v43, v28);
        _os_log_error_impl((void *)&_mh_execute_header, v26, type, "BackboneIPv6Interface[BMLR]: Backbone is not connected, cannot send BMLR packet len:%d", v43, 8u);
      }
    }
    else if (!v27)
    {
      os_log_t v24 = (os_log_t)&_os_log_default;
      os_log_type_t v23 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v42, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v24, v23, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v42, 0x16u);
      }
    }
  }
}

uint64_t __os_log_helper_16_2_4_8_32_8_0_8_0_4_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 4;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 8;
  *(void *)(result + 24) = a4;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 33) = 4;
  *(_DWORD *)(result + 34) = a5;
  return result;
}

uint64_t __os_log_helper_16_0_3_8_0_8_0_4_0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 4;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

void ot::Posix::BackboneIPv6Interface::send_packet(ot::Posix::BackboneIPv6Interface *this, char *a2, size_t a3)
{
  os_log_t v35 = this;
  char v34 = a2;
  size_t v33 = a3;
  if (*((unsigned char *)this + 38))
  {
    __int16 v25 = -31011;
    ssize_t v24 = 0;
    bzero(v46, 0x800uLL);
    os_log_t v27 = v46;
    bcopy(&ot::Posix::broadcast_ether, v46, 6uLL);
    bcopy((char *)this + 32, v47, 6uLL);
    v47[3] = _OSSwapInt16(0x86DDu);
    bzero(&v45, 0x12uLL);
    v45.sa_len = 18;
    v45.sa_family = 27;
    bcopy(v34, v48, v33);
    os_log_t v26 = v48;
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(7) & 1) != 0)
    {
      os_log_t v22 = logging_obg;
      os_log_type_t v21 = OS_LOG_TYPE_DEBUG;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_DEBUG))
      {
        __os_log_helper_16_0_2_4_0_4_0((uint64_t)v44, v26[7], v33);
        _os_log_debug_impl((void *)&_mh_execute_header, v22, v21, "BackboneInterface send_packet Hop limit in the ipv6 header=%d len=%d", v44, 0xEu);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v20 = (os_log_t)&_os_log_default;
      os_log_type_t v19 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v43, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v20, v19, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v43, 0x16u);
      }
    }
    if (v26[7] > 1u)
    {
      --v26[7];
      if (*((_DWORD *)this + 20) == -1)
      {
        os_log_t v13 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (v13 && (syslog_is_the_mask_enabled(7) & 1) != 0)
        {
          os_log_t oslog = v13;
          os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v5 = oslog;
            os_log_type_t v6 = v11;
            __os_log_helper_16_0_0(v10);
            _os_log_debug_impl((void *)&_mh_execute_header, v5, v6, "BackboneInterface send_packet failed as mBackboneInterfaceNdrvFd = -1", v10, 2u);
          }
        }
        else if (!v13 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v40, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v40, 0x16u);
        }
      }
      else
      {
        ssize_t v24 = sendto(*((_DWORD *)this + 20), v46, v33 + 14, 0, &v45, 0x12u);
        if (v24 == v33 + 14)
        {
          char v8 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v8 && (syslog_is_the_mask_enabled(7) & 1) != 0)
          {
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              __os_log_helper_16_0_2_8_0_8_0((uint64_t)v37, v24, v33);
              _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BackboneInterface send_packet sent packet sendSize=%zu len=%zu", v37, 0x16u);
            }
          }
          else if (!v8 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v36, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v36, 0x16u);
          }
        }
        else
        {
          os_log_type_t v9 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v9 && (syslog_is_the_mask_enabled(3) & 1) != 0)
          {
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            {
              int v3 = __error();
              int v4 = strerror(*v3);
              __os_log_helper_16_2_3_8_32_8_0_8_0((uint64_t)v39, (uint64_t)v4, v24, v33);
              _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BackboneInterface send_packet return here as sendto failed %s sendSize=%zu len=%zu", v39, 0x20u);
            }
          }
          else if (!v9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v38, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v38, 0x16u);
          }
        }
      }
    }
    else
    {
      os_log_t v18 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v18 && (syslog_is_the_mask_enabled(7) & 1) != 0)
      {
        os_log_t v17 = v18;
        os_log_type_t v16 = OS_LOG_TYPE_DEBUG;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          __os_log_helper_16_0_2_4_0_4_0((uint64_t)v42, v26[7], v33);
          _os_log_debug_impl((void *)&_mh_execute_header, v17, v16, "BackboneInterface drop the packet as Hop limit in the ipv6 header=%d len=%d", v42, 0xEu);
        }
      }
      else if (!v18)
      {
        os_log_t v15 = (os_log_t)&_os_log_default;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v41, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v15, v14, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v41, 0x16u);
        }
      }
    }
  }
  else
  {
    os_log_t v32 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v32 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v31 = v32;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v50, v33);
        _os_log_error_impl((void *)&_mh_execute_header, v31, type, "BackboneIPv6Interface is not connected, cannot send_packet len:%d", v50, 8u);
      }
    }
    else if (!v32)
    {
      os_log_t v29 = (os_log_t)&_os_log_default;
      os_log_type_t v28 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v49, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v29, v28, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v49, 0x16u);
      }
    }
  }
}

uint64_t __os_log_helper_16_2_3_8_32_8_0_8_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 8;
  *(void *)(result + 24) = a4;
  return result;
}

void ot::Posix::BackboneIPv6Interface::Update(uint64_t a1, _DWORD *a2)
{
  uint64_t v19 = a1;
  os_log_t v18 = a2;
  if (*(unsigned char *)(a1 + 38) & 1) != 0 && (*(unsigned char *)(a1 + 39) & 1) != 0 && (*(unsigned char *)(a1 + 40))
  {
    if (*(int *)(a1 + 80) >= 0 && *(int *)(a1 + 76) >= 0 && *(int *)(a1 + 72) >= 0)
    {
      if (*(int *)(a1 + 76) < 0)
      {
        os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
        if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
        {
          os_log_t oslog = logging_obg;
          os_log_type_t v9 = OS_LOG_TYPE_ERROR;
          if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
          {
            uint64_t v2 = oslog;
            os_log_type_t v3 = v9;
            __os_log_helper_16_0_0(v8);
            _os_log_error_impl((void *)&_mh_execute_header, v2, v3, "BackboneIPv6Interface::Update Backbone interface BPF fd is invalid. Cannot update fd set", v8, 2u);
          }
        }
        else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v25, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v25, 0x16u);
        }
      }
      else
      {
        int v21 = *(_DWORD *)(a1 + 76);
        os_log_t v20 = v18;
        int v23 = v21;
        os_log_t v22 = v18;
        if (&___darwin_check_fd_set_overflow) {
          int v24 = __darwin_check_fd_set_overflow(v23, v22, 0);
        }
        else {
          int v24 = 1;
        }
        if (v24) {
          v20[v21 / 0x20uLL] |= 1 << (v21 % 0x20uLL);
        }
        if (v18[96] >= *(_DWORD *)(a1 + 76)) {
          int v4 = v18[96];
        }
        else {
          int v4 = *(_DWORD *)(a1 + 76);
        }
        v18[96] = v4;
      }
    }
  }
  else
  {
    os_log_t v17 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v17 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v16 = v17;
      char v15 = 16;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        log = v16;
        os_log_type_t type = v15;
        __os_log_helper_16_0_0(v14);
        _os_log_error_impl((void *)&_mh_execute_header, log, type, "BackboneIPv6Interface::Update Backbone interface is not connected. Cannot update fd set", v14, 2u);
      }
    }
    else if (!v17)
    {
      os_log_t v13 = (os_log_t)&_os_log_default;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v26, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v13, v12, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v26, 0x16u);
      }
    }
  }
}

uint64_t ot::Posix::BackboneIPv6Interface::ndrv_socket(ot::Posix::BackboneIPv6Interface *this, const char *a2)
{
  int v21 = this;
  os_log_t v20 = a2;
  int v19 = -1;
  *((_DWORD *)this + 20) = socket(27, 3, 0);
  if (*((int *)this + 20) < 0)
  {
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v17 = logging_obg;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
      {
        uint64_t v2 = __error();
        os_log_type_t v3 = strerror(*v2);
        __os_log_helper_16_2_1_8_32((uint64_t)v30, (uint64_t)v3);
        _os_log_error_impl((void *)&_mh_execute_header, v17, type, "BackboneIPv6Interface ndrv socket() failed %s", v30, 0xCu);
      }
    }
    else if (!logging_obg)
    {
      os_log_t oslog = (os_log_t)&_os_log_default;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v29, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, oslog, v14, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v29, 0x16u);
      }
    }
    return *((_DWORD *)this + 20);
  }
  int v13 = 1;
  int v19 = setsockopt(*((_DWORD *)this + 20), 0xFFFF, 4, &v13, 4u);
  if (v19 < 0)
  {
    os_log_type_t v12 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v12 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v4 = __error();
        os_log_type_t v5 = strerror(*v4);
        __os_log_helper_16_2_1_8_32((uint64_t)v28, (uint64_t)v5);
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:ndrv_socket() setsockopt(SO_REUSEADDR) failed: %s\n", v28, 0xCu);
      }
    }
    else if (!v12 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v27, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v27, 0x16u);
    }
LABEL_20:
    close(*((_DWORD *)this + 20));
    *((_DWORD *)this + 20) = -1;
    return -1;
  }
  if ((int)ot::Posix::set_nonblocking((ot::Posix *)*((unsigned int *)this + 20)) < 0)
  {
    os_log_type_t v11 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v11 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v26, *((_DWORD *)this + 20));
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:ndrv_socket() Non-Blocking failed interface=%d", v26, 8u);
      }
    }
    else if (!v11 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v25, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v25, 0x16u);
    }
    goto LABEL_20;
  }
  strlcpy(v31.sa_data, v20, 0x10uLL);
  v31.sa_len = 18;
  v31.sa_family = 27;
  if (bind(*((_DWORD *)this + 20), &v31, 0x12u) < 0)
  {
    unsigned __int16 v10 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v10 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v6 = __error();
        os_log_type_t v7 = strerror(*v6);
        __os_log_helper_16_2_1_8_32((uint64_t)v24, (uint64_t)v7);
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface ndrv  bind() failed %s", v24, 0xCu);
      }
    }
    else if (!v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v23, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v23, 0x16u);
    }
  }
  return *((_DWORD *)this + 20);
}

uint64_t ot::Posix::set_nonblocking(ot::Posix *this)
{
  int v9 = (int)this;
  int v8 = fcntl((int)this, 3, 0);
  if (v8 == -1)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
      {
        CFDictionaryRef v1 = __error();
        uint64_t v2 = strerror(*v1);
        __os_log_helper_16_2_2_4_0_8_32((uint64_t)v14, v9, (uint64_t)v2);
        _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:set_nonblocking F_GETFL failed fd=%d err:%s", v14, 0x12u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v13, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v13, 0x16u);
    }
    return -1;
  }
  if ((v8 & 4) == 0 && fcntl(v9, 4, v8 | 4u) == -1)
  {
    os_log_type_t v6 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v6 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v3 = __error();
        int v4 = strerror(*v3);
        __os_log_helper_16_2_2_4_0_8_32((uint64_t)v12, v9, (uint64_t)v4);
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:set_nonblocking O_NONBLOCK failed fd=%d err:%s", v12, 0x12u);
      }
    }
    else if (!v6 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v11, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v11, 0x16u);
    }
    return -1;
  }
  return 0;
}

uint64_t ot::Posix::BackboneIPv6Interface::cleanup(ot::Posix::BackboneIPv6Interface *this)
{
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_6_4_0_4_0_4_0_4_0_4_0_4_0((uint64_t)v5, *((_DWORD *)this + 18), *((_DWORD *)this + 19), *((_DWORD *)this + 20), *((unsigned char *)this + 40) & 1, *((unsigned char *)this + 38) & 1, *((unsigned char *)this + 39) & 1);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "BackboneIPv6Interface cleanup backboneFd=%d BpfFd=%d ndrvFd=%d mCheckAndInitComplete=%d mBackboneIsConnected=%d mBBRStatePrimary=%d", v5, 0x26u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v4, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v4, 0x16u);
  }
  if (*((_DWORD *)this + 20))
  {
    close(*((_DWORD *)this + 20));
    *((_DWORD *)this + 20) = -1;
  }
  if (*((_DWORD *)this + 19))
  {
    close(*((_DWORD *)this + 19));
    *((_DWORD *)this + 19) = -1;
  }
  if (*((_DWORD *)this + 18))
  {
    close(*((_DWORD *)this + 18));
    *((_DWORD *)this + 18) = -1;
  }
  if (*((void *)this + 11)) {
    operator delete();
  }
  *((unsigned char *)this + 40) = 0;
  return 1;
}

void ot::Posix::BackboneIPv6Interface::updateBBRstate(ot::Posix::BackboneIPv6Interface *this, char a2)
{
  char v4 = a2 & 1;
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_2_4_0_4_0((uint64_t)v6, v4 & 1, *((unsigned char *)this + 39) & 1);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "BackboneIPv6Interface::updateBBRstate isPrimary=%d mBBRStatePrimary=%d", v6, 0xEu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v5, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v5, 0x16u);
  }
  if ((*((unsigned char *)this + 39) & 1) != 0 || (v4 & 1) == 0)
  {
    if ((v4 & 1) == 0) {
      ot::Posix::BackboneIPv6Interface::cleanup(this);
    }
  }
  else
  {
    ot::Posix::BackboneIPv6Interface::checkAndInitialize(this);
  }
  *((unsigned char *)this + 39) = v4 & 1;
}

uint64_t ot::Posix::BackboneIPv6Interface::checkAndInitialize(ot::Posix::BackboneIPv6Interface *this)
{
  os_log_t v27 = this;
  if ((*((unsigned char *)this + 40) & 1) == 1)
  {
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t v25 = logging_obg;
      os_log_type_t v24 = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v34, *((unsigned char *)this + 40) & 1);
        _os_log_impl((void *)&_mh_execute_header, v25, v24, "BackboneIPv6Interface::checkAndInitialize=%d", v34, 8u);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v23 = (os_log_t)&_os_log_default;
      os_log_type_t v22 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v33, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v23, v22, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v33, 0x16u);
      }
    }
    char v28 = 1;
  }
  else if ((*((unsigned char *)this + 38) & 1) == 1)
  {
    if (ot::Posix::BackboneIPv6Interface::initializeBackboneInterface(this))
    {
      *((unsigned char *)this + 40) = 1;
      os_log_t v15 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v15 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t v14 = v15;
        os_log_type_t v13 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_0_3_4_0_4_0_4_0((uint64_t)v31, *((_DWORD *)this + 18), *((_DWORD *)this + 19), *((_DWORD *)this + 20));
          _os_log_impl((void *)&_mh_execute_header, v14, v13, "BackboneIPv6Interface::checkAndInitialize Backbone link successfully initialized backboneFd=%d BpfFd=%d ndrvFd=%d", v31, 0x14u);
        }
      }
      else if (!v15)
      {
        os_log_t v12 = (os_log_t)&_os_log_default;
        os_log_type_t v11 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v30, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v12, v11, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v30, 0x16u);
        }
      }
      char v28 = 1;
    }
    else
    {
      *((unsigned char *)this + 40) = 0;
      os_log_t v21 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v21 && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        os_log_t oslog = v21;
        os_log_type_t v19 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          char v4 = oslog;
          os_log_type_t v5 = v19;
          __os_log_helper_16_0_0(v18);
          _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "BackboneIPv6Interface::checkAndInitialize initializeBackboneInterface failed", v18, 2u);
        }
      }
      else if (!v21)
      {
        os_log_t v17 = (os_log_t)&_os_log_default;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v32, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v17, v16, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v32, 0x16u);
        }
      }
      char v28 = 0;
    }
  }
  else
  {
    *((unsigned char *)this + 40) = 0;
    os_log_t v10 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v10 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v9 = v10;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v2 = v9;
        os_log_type_t v3 = v8;
        __os_log_helper_16_0_0(v7);
        _os_log_error_impl((void *)&_mh_execute_header, v2, v3, "BackboneIPv6Interface::checkAndInitialize Cannot initialize as backbone link is not connected", v7, 2u);
      }
    }
    else if (!v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v29, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v29, 0x16u);
    }
    char v28 = 0;
  }
  return v28 & 1;
}

uint64_t ot::Posix::BackboneIPv6Interface::IsActive(ot::Posix::BackboneIPv6Interface *this)
{
  char v3 = 1;
  if ((*((unsigned char *)this + 39) & 1) == 0
    || (*((unsigned char *)this + 40) & 1) == 0
    || (*((unsigned char *)this + 38) & 1) == 0
    || !std::string::size[abi:nn180100]())
  {
    char v3 = 0;
  }
  if (*((int *)this + 18) < 0 || *((int *)this + 19) < 0 || *((int *)this + 20) < 0) {
    char v3 = 0;
  }
  return v3 & 1;
}

BOOL ot::Posix::BackboneIPv6Interface::isBackboneConnected(ot::Posix::BackboneIPv6Interface *this)
{
  return (*((unsigned char *)this + 38) & 1) == 1;
}

uint64_t ot::Posix::BackboneIPv6Interface::initializeBackboneInterface(ot::Posix::BackboneIPv6Interface *this)
{
  os_log_type_t v63 = this;
  __int16 v62 = -30578;
  int v61 = -1;
  if (!std::string::size[abi:nn180100]())
  {
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v59 = logging_obg;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
      {
        log = v59;
        os_log_type_t v20 = type;
        __os_log_helper_16_0_0(v57);
        _os_log_error_impl((void *)&_mh_execute_header, log, v20, "Unable to initialize as Backbone interface name cannot be got", v57, 2u);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v56 = (os_log_t)&_os_log_default;
      os_log_type_t v55 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v81, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v56, v55, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v81, 0x16u);
      }
    }
    char v64 = 0;
    return v64 & 1;
  }
  CFDictionaryRef v1 = (ot::Posix *)socket(30, 2, 0);
  int v61 = (int)v1;
  if ((int)v1 < 0)
  {
    os_log_t v54 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v54 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v53 = v54;
      os_log_type_t v52 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        uint64_t v2 = __error();
        __os_log_helper_16_0_1_4_0((uint64_t)v80, *v2);
        _os_log_error_impl((void *)&_mh_execute_header, v53, v52, "BackboneIPv6Interface socket call failed for sk %d\n", v80, 8u);
      }
    }
    else if (!v54)
    {
      os_log_t v51 = (os_log_t)&_os_log_default;
      os_log_type_t v50 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v79, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v51, v50, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v79, 0x16u);
      }
    }
LABEL_94:
    if (*((_DWORD *)this + 18))
    {
      close(*((_DWORD *)this + 18));
      *((_DWORD *)this + 18) = -1;
    }
    if (*((_DWORD *)this + 20))
    {
      close(*((_DWORD *)this + 20));
      *((_DWORD *)this + 20) = -1;
    }
    if (*((_DWORD *)this + 19))
    {
      close(*((_DWORD *)this + 19));
      *((_DWORD *)this + 19) = -1;
    }
    char v64 = 0;
    return v64 & 1;
  }
  *((_DWORD *)this + 18) = v61;
  *((_DWORD *)this + 19) = ot::Posix::bpf_new(v1);
  os_log_t v49 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (v49 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v48 = v49;
    os_log_type_t v47 = OS_LOG_TYPE_INFO;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_1_4_0((uint64_t)v78, *((_DWORD *)this + 19));
      _os_log_impl((void *)&_mh_execute_header, v48, v47, "BackboneIPv6Interface bp_new fd=%d", v78, 8u);
    }
  }
  else if (!v49)
  {
    os_log_t v46 = (os_log_t)&_os_log_default;
    os_log_type_t v45 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v77, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, v46, v45, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v77, 0x16u);
    }
  }
  if (*((int *)this + 19) < 0)
  {
    os_log_t v44 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v44 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v43 = v44;
      os_log_type_t v42 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        int v18 = *((_DWORD *)this + 19);
        char v3 = __error();
        __os_log_helper_16_0_2_4_0_4_0((uint64_t)v76, v18, *v3);
        _os_log_error_impl((void *)&_mh_execute_header, v43, v42, "BackboneIPv6Interface no bpf devices mBackboneInterfaceBpfFd(%d) errno(%d)", v76, 0xEu);
      }
    }
    else if (!v44)
    {
      os_log_t v41 = (os_log_t)&_os_log_default;
      os_log_type_t v40 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v75, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v41, v40, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v75, 0x16u);
      }
    }
    goto LABEL_94;
  }
  unsigned int v17 = *((_DWORD *)this + 19);
  std::string::c_str[abi:nn180100]();
  if ((int)ot::Posix::bpf_set_options((ot::Posix *)v17, v4, v5) < 0)
  {
    os_log_t v39 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v39 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v38 = v39;
      os_log_type_t v37 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        os_log_t v15 = v38;
        os_log_type_t v16 = v37;
        __os_log_helper_16_0_0(v36);
        _os_log_error_impl((void *)&_mh_execute_header, v15, v16, "BackboneIPv6Interface bpf attach failed", v36, 2u);
      }
    }
    else if (!v39)
    {
      os_log_t v35 = (os_log_t)&_os_log_default;
      os_log_type_t v34 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v74, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v35, v34, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v74, 0x16u);
      }
    }
    goto LABEL_94;
  }
  os_log_t v33 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (v33 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v32 = v33;
    os_log_type_t v31 = OS_LOG_TYPE_INFO;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_1_4_0((uint64_t)v73, *((_DWORD *)this + 19));
      _os_log_impl((void *)&_mh_execute_header, v32, v31, "BackboneIPv6Interface bpf_set_options fd=%d", v73, 8u);
    }
  }
  else if (!v33)
  {
    os_log_t v30 = (os_log_t)&_os_log_default;
    os_log_type_t v29 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v72, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, v30, v29, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v72, 0x16u);
    }
  }
  if ((int)ot::Posix::bpf_set_filter((ot::Posix *)*((unsigned int *)this + 19)) < 0)
  {
    os_log_t v28 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v28 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v27 = v28;
      os_log_type_t v26 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v13 = v27;
        os_log_type_t v14 = v26;
        __os_log_helper_16_0_0(v25);
        _os_log_error_impl((void *)&_mh_execute_header, v13, v14, "BackboneIPv6Interface bpf set filter failed", v25, 2u);
      }
    }
    else if (!v28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v71, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v71, 0x16u);
    }
    goto LABEL_94;
  }
  os_log_type_t v24 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v24 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      int v11 = *((_DWORD *)this + 19);
      std::string::c_str[abi:nn180100]();
      uint64_t v12 = v6;
      std::string::c_str[abi:nn180100]();
      __os_log_helper_16_2_3_4_0_8_32_8_32((uint64_t)v70, v11, v12, v7);
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BackboneIPv6Interface bpf_set_filter fd=%d backbone interface name =%s thread interface name=%s", v70, 0x1Cu);
    }
  }
  else if (!v24 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v69, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v69, 0x16u);
  }
  std::string::c_str[abi:nn180100]();
  *((_DWORD *)this + 20) = ot::Posix::BackboneIPv6Interface::ndrv_socket(this, v8);
  if (*((int *)this + 20) < 0)
  {
    os_log_t v23 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v23 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        os_log_t v9 = __error();
        __os_log_helper_16_0_1_4_0((uint64_t)v68, *v9);
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface ndrv_socket call failed for mBackboneInterfaceNdrvFd %d\n", v68, 8u);
      }
    }
    else if (!v23 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v67, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v67, 0x16u);
    }
    *((_DWORD *)this + 20) = -1;
    goto LABEL_94;
  }
  os_log_type_t v22 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v22 && (syslog_is_the_mask_enabled(7) & 1) != 0)
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      __os_log_helper_16_2_4_8_32_4_0_4_0_4_0((uint64_t)v66, (uint64_t)"initializeBackboneInterface", *((_DWORD *)this + 19), *((_DWORD *)this + 18), *((_DWORD *)this + 20));
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%s: BackboneInterface fd set with backboneBpfFd(%d) and backboneInterfaceFd(%d) ndrvInterfaceFd(%d)", v66, 0x1Eu);
    }
  }
  else if (!v22 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v65, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v65, 0x16u);
  }
  char v64 = 1;
  return v64 & 1;
}

uint64_t ot::Posix::BackboneIPv6Interface::updateBackboneInterfaceInfo(ot::Posix::BackboneIPv6Interface *this, const char *a2, char a3, char a4)
{
  os_log_t v25 = this;
  os_log_type_t v24 = a2;
  char v23 = a3 & 1;
  char v22 = a4 & 1;
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
  {
    os_log_t v20 = logging_obg;
    char v19 = 16;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
    {
      log = v20;
      os_log_type_t type = v19;
      __os_log_helper_16_0_0(v18);
      _os_log_error_impl((void *)&_mh_execute_header, log, type, "BackboneIPv6Interface::updateBackboneInterfaceInfo", v18, 2u);
    }
  }
  else if (!logging_obg)
  {
    os_log_t v17 = (os_log_t)&_os_log_default;
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v29, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, v17, v16, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v29, 0x16u);
    }
  }
  if (v24)
  {
    std::string::basic_string[abi:nn180100]<0>(&v15, v24);
    std::string::operator=[abi:nn180100]((uint64_t)this + 8, (uint64_t)&v15);
    std::string::~string(&v15);
    if ((ot::Posix::BackboneIPv6Interface::update_backbone_ethernet_address(this) & 1) == 0)
    {
      os_log_t v14 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v14 && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        os_log_t v13 = v14;
        char v12 = 16;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v5 = v13;
          os_log_type_t v6 = v12;
          __os_log_helper_16_0_0(v11);
          _os_log_error_impl((void *)&_mh_execute_header, v5, v6, "BackboneIPv6Interface::updateBackboneInterfaceInfo update_backbone_ethernet_address failed", v11, 2u);
        }
      }
      else if (!v14 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v28, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v28, 0x16u);
      }
      char v23 = 0;
    }
  }
  else
  {
    std::string::clear[abi:nn180100]((uint64_t)this + 8);
  }
  *((unsigned char *)this + 38) = v23 & 1;
  if ((*((unsigned char *)this + 39) & 1) == 1 && (*((unsigned char *)this + 40) & 1) == 0)
  {
    os_log_t v10 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v10 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_0_2_4_0_4_0((uint64_t)v27, *((unsigned char *)this + 39) & 1, v23 & 1);
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface::updateBackboneInterfaceInfo calling check & initialize state = %d, isConnected = %d", v27, 0xEu);
      }
    }
    else if (!v10 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v26, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v26, 0x16u);
    }
    ot::Posix::BackboneIPv6Interface::checkAndInitialize(this);
  }
  return 1;
}

uint64_t std::string::operator=[abi:nn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

void std::string::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v6 = std::string::size[abi:nn180100]();
  if (std::string::__is_long[abi:nn180100]())
  {
    CFDictionaryRef v1 = (unsigned char *)std::string::__get_long_pointer[abi:nn180100]();
    char v5 = 0;
    std::char_traits<char>::assign[abi:nn180100](v1, &v5);
    std::string::__set_long_size[abi:nn180100](a1, 0);
  }
  else
  {
    std::string::__get_short_pointer[abi:nn180100]();
    char v4 = 0;
    std::char_traits<char>::assign[abi:nn180100](v2, &v4);
    std::string::__set_short_size[abi:nn180100](a1, 0);
  }
  std::string::__annotate_shrink[abi:nn180100]();
}

std::string *ot::Posix::BackboneIPv6Interface::updateThreadVirtualInterfaceName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

uint64_t ot::Posix::BackboneIPv6Interface::subscribeMulticastAddress(ot::Posix::BackboneIPv6Interface *this, const in6_addr *a2)
{
  char v19 = this;
  int v18 = a2;
  in6_addr_to_string(a2, &v17);
  unsigned int v11 = *((_DWORD *)this + 18);
  std::string::c_str[abi:nn180100]();
  os_log_t v10 = v2;
  std::string::c_str[abi:nn180100]();
  if ((int)ot::Posix::set_multicast_for_interface((ot::Posix *)v11, 80, v10, v3, v4) >= 0)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        std::string::c_str[abi:nn180100]();
        __os_log_helper_16_2_1_8_32((uint64_t)v22, v5);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "BackboneIPv6Interface::subscribeMulticastAddress subscribed:%s on Backbone", v22, 0xCu);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v21, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v21, 0x16u);
    }
    char v20 = 1;
  }
  else
  {
    os_log_t v16 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v16 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v15 = v16;
      char v14 = 16;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        log = v15;
        os_log_type_t type = v14;
        __os_log_helper_16_0_0(v13);
        _os_log_error_impl((void *)&_mh_execute_header, log, type, "BackboneIPv6Interface::subscribeMulticastAddress failed\n", v13, 2u);
      }
    }
    else if (!v16 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v23, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v23, 0x16u);
    }
    char v20 = 0;
  }
  std::string::~string(&v17);
  return v20 & 1;
}

uint64_t ot::Posix::set_multicast_for_interface(ot::Posix *this, int a2, const char *a3, const char *a4, const char *a5)
{
  int v29 = (int)this;
  int v28 = a2;
  os_log_t v27 = a3;
  os_log_type_t v26 = a4;
  unsigned int v25 = 0;
  if (a2 != 81 && a2 != 80)
  {
    return -1;
  }
  else
  {
    *(_DWORD *)&v24[24] = if_nametoindex(v27);
    int v38 = *(_DWORD *)&v24[24];
    *(void *)&uint8_t v24[16] = &v39;
    *(void *)os_log_type_t v24 = 0;
    *(void *)&v24[8] = 0;
    char v23 = gethostbyname2(v26, 30);
    if (v23)
    {
      if (v23->h_length >= 1)
      {
        inet_pton(30, v26, v24);
        uint64_t v6 = *(void *)&v24[16];
        *(_OWORD *)(*(void *)&v24[16] + 8) = *(_OWORD *)v24;
        *(_OWORD *)(v6 + 20) = *(_OWORD *)&v24[12];
        *(unsigned char *)(*(void *)&v24[16] + 1) = 30;
        *(_WORD *)(*(void *)&v24[16] + 2) = 0;
        *(_DWORD *)(*(void *)&v24[16] + 4) = 0;
        *(_DWORD *)(*(void *)&v24[16] + 24) = if_nametoindex(v27);
        **(unsigned char **)&uint8_t v24[16] = 28;
        unsigned int v25 = setsockopt(v29, 41, v28, &v38, 0x84u);
        if (v25)
        {
          os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
          if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
          {
            if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
            {
              uint64_t v7 = "MCAST_JOIN_GROUP";
              if (v28 != 80) {
                uint64_t v7 = "MCAST_LEAVE_GROUP";
              }
              uint64_t v12 = (uint64_t)v7;
              int v13 = *(_DWORD *)&v24[24];
              os_log_type_t v8 = __error();
              os_log_t v9 = strerror(*v8);
              __os_log_helper_16_2_4_8_32_4_0_8_32_4_0((uint64_t)v34, v12, v13, (uint64_t)v9, v25);
              _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface setsockopt(%s) if_index %d failed, %s ret %d\n", v34, 0x22u);
            }
          }
          else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v33, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v33, 0x16u);
          }
        }
        else
        {
          os_log_t v16 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v16 && (syslog_is_the_mask_enabled(6) & 1) != 0)
          {
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              if (v28 == 80) {
                os_log_t v10 = "MCAST_JOIN_GROUP";
              }
              else {
                os_log_t v10 = "MCAST_LEAVE_GROUP";
              }
              __os_log_helper_16_2_5_8_32_4_0_8_32_8_32_4_0((uint64_t)v32, (uint64_t)v10, *(int *)&v24[24], (uint64_t)v27, (uint64_t)v26, v25);
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "BackboneIPv6Interface setsockopt(%s) if_index %d ifname=%s group_name=%s succeeded, ret %d\n", v32, 0x2Cu);
            }
          }
          else if (!v16 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v31, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v31, 0x16u);
          }
        }
        return v25;
      }
      else
      {
        int v18 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v18 && (syslog_is_the_mask_enabled(3) & 1) != 0)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_0_1_4_0((uint64_t)v36, v23->h_length);
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface tmp->h_length [%d] is invalid \n", v36, 8u);
          }
        }
        else if (!v18 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v35, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v35, 0x16u);
        }
        return -1;
      }
    }
    else
    {
      os_log_t v22 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v22 && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        os_log_t v21 = v22;
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          log = v21;
          os_log_type_t v15 = type;
          __os_log_helper_16_0_0(v19);
          _os_log_error_impl((void *)&_mh_execute_header, log, v15, "BackboneIPv6Interface tmp is NULL. Cannot convert group name to adddress\n", v19, 2u);
        }
      }
      else if (!v22 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v37, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v37, 0x16u);
      }
      return -1;
    }
  }
}

uint64_t ot::Posix::BackboneIPv6Interface::unSubscribeMulticastAddress(ot::Posix::BackboneIPv6Interface *this, const in6_addr *a2)
{
  char v19 = this;
  int v18 = a2;
  in6_addr_to_string(a2, &v17);
  unsigned int v11 = *((_DWORD *)this + 18);
  std::string::c_str[abi:nn180100]();
  os_log_t v10 = v2;
  std::string::c_str[abi:nn180100]();
  if ((int)ot::Posix::set_multicast_for_interface((ot::Posix *)v11, 81, v10, v3, v4) >= 0)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        std::string::c_str[abi:nn180100]();
        __os_log_helper_16_2_1_8_32((uint64_t)v22, v5);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "BackboneIPv6Interface::unSubscribeMulticastAddress unsubscribed:%s on Backbone", v22, 0xCu);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v21, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v21, 0x16u);
    }
    char v20 = 1;
  }
  else
  {
    os_log_t v16 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (v16 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      os_log_t v15 = v16;
      char v14 = 16;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        log = v15;
        os_log_type_t type = v14;
        __os_log_helper_16_0_0(v13);
        _os_log_error_impl((void *)&_mh_execute_header, log, type, "BackboneIPv6Interface::unSubscribeMulticastAddress failed\n", v13, 2u);
      }
    }
    else if (!v16 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v23, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v23, 0x16u);
    }
    char v20 = 0;
  }
  std::string::~string(&v17);
  return v20 & 1;
}

uint64_t ot::Posix::bpf_set_options(ot::Posix *this, const char *a2, const char *a3)
{
  unsigned int v29 = this;
  int v28 = a2;
  int v27 = 0;
  unsigned int v24 = -1;
  strlcpy(__dst, a2, 0xFuLL);
  if (ioctl(v29, 0x8020426CuLL, __dst) >= 0)
  {
    if (ioctl(v29, 0x80044275uLL, &v27) >= 0)
    {
      if (ioctl(v29, 0x80044277uLL, &v27) >= 0)
      {
        if (ioctl(v29, 0x80044270uLL, &v27) >= 0)
        {
          uint64_t v25 = 0;
          int v26 = 1000;
          if (ioctl(v29, 0x8010426DuLL, &v25) == -1)
          {
            unsigned int v24 = -1;
            os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
            if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
            {
              if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
              {
                uint64_t v14 = (uint64_t)v28;
                unsigned int v11 = __error();
                uint64_t v12 = strerror(*v11);
                __os_log_helper_16_2_2_8_32_8_32((uint64_t)v33, v14, (uint64_t)v12);
                _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:bpf_set_options BIOCSRTIMEOUT failed interface=%s err:%s", v33, 0x16u);
              }
            }
            else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_2_8_32_8_32((uint64_t)v32, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v32, 0x16u);
            }
          }
          else if ((int)ot::Posix::set_nonblocking((ot::Posix *)v29) >= 0)
          {
            unsigned int v24 = 0;
          }
          else
          {
            unsigned int v24 = -1;
            int v18 = log_get_logging_obg("com.apple.threadradiod", "default");
            if (v18 && (syslog_is_the_mask_enabled(3) & 1) != 0)
            {
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                __os_log_helper_16_2_1_8_32((uint64_t)v31, (uint64_t)v28);
                _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:bpf_set_options Non-Blocking failed interface=%s", v31, 0xCu);
              }
            }
            else if (!v18 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              __os_log_helper_16_2_2_8_32_8_32((uint64_t)v30, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v30, 0x16u);
            }
          }
        }
        else
        {
          char v20 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v20 && (syslog_is_the_mask_enabled(3) & 1) != 0)
          {
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              uint64_t v15 = (uint64_t)v28;
              os_log_t v9 = __error();
              os_log_t v10 = strerror(*v9);
              __os_log_helper_16_2_2_8_32_8_32((uint64_t)v35, v15, (uint64_t)v10);
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:bpf_set_options BIOCIMMEDIATE failed interface=%s err:%s", v35, 0x16u);
            }
          }
          else if (!v20 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v34, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v34, 0x16u);
          }
        }
      }
      else
      {
        os_log_t v21 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v21 && (syslog_is_the_mask_enabled(3) & 1) != 0)
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = (uint64_t)v28;
            uint64_t v7 = __error();
            os_log_type_t v8 = strerror(*v7);
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v37, v16, (uint64_t)v8);
            _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:bpf_set_options BIOCSSEESENT failed interface=%s err:%s", v37, 0x16u);
          }
        }
        else if (!v21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v36, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v36, 0x16u);
        }
      }
    }
    else
    {
      os_log_t v22 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v22 && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = (uint64_t)v28;
          uint64_t v5 = __error();
          uint64_t v6 = strerror(*v5);
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v39, v17, (uint64_t)v6);
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:bpf_set_options BIOCSHDRCMPLT failed interface=%s err:%s", v39, 0x16u);
        }
      }
      else if (!v22 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v38, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v38, 0x16u);
      }
    }
  }
  else
  {
    char v23 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v23 && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        char v3 = __error();
        char v4 = strerror(*v3);
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v41, (uint64_t)v28, (uint64_t)v4);
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "BackboneIPv6Interface:bpf_set_options BIOCSETIF failed interface=%s err:%s", v41, 0x16u);
      }
    }
    else if (!v23 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v40, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v40, 0x16u);
    }
  }
  if (v24 == -1 && v29) {
    close(v29);
  }
  return v24;
}

uint64_t ot::Posix::bpf_set_filter(ot::Posix *this)
{
  int v4 = (int)this;
  memcpy(__dst, "(", sizeof(__dst));
  int v2 = 6;
  char v3 = __dst;
  if (ioctl(v4, 0x80104267uLL, &v2) >= 0) {
    return 0;
  }
  else {
    return -1;
  }
}

uint64_t __os_log_helper_16_2_3_4_0_8_32_8_32(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  *(unsigned char *)(result + 8) = 32;
  *(unsigned char *)(result + 9) = 8;
  *(void *)(result + 10) = a3;
  *(unsigned char *)(result + 18) = 32;
  *(unsigned char *)(result + 19) = 8;
  *(void *)(result + 20) = a4;
  return result;
}

uint64_t __os_log_helper_16_2_4_8_32_4_0_4_0_4_0(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 4;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 4;
  *(_DWORD *)(result + 14) = a3;
  *(unsigned char *)(result + 18) = 0;
  *(unsigned char *)(result + 19) = 4;
  *(_DWORD *)(result + 20) = a4;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 25) = 4;
  *(_DWORD *)(result + 26) = a5;
  return result;
}

ot::Posix::BackboneIPv6Interface *ot::Posix::BackboneIPv6Interface::BackboneIPv6Interface(ot::Posix::BackboneIPv6Interface *this)
{
  *(void *)this = off_10049C7E0;
  std::string::basic_string[abi:nn180100]((void *)this + 1);
  std::string::basic_string[abi:nn180100]((void *)this + 6);
  *((_DWORD *)this + 18) = -1;
  *((_DWORD *)this + 19) = -1;
  *((_DWORD *)this + 20) = -1;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((unsigned char *)this + 100) = 0;
  std::string::clear[abi:nn180100]((uint64_t)this + 8);
  __n128 result = this;
  *((unsigned char *)this + 38) = 0;
  *((unsigned char *)this + 39) = 0;
  *((unsigned char *)this + 40) = 0;
  return result;
}

{
  ot::Posix::BackboneIPv6Interface::BackboneIPv6Interface(this);
  return this;
}

void *std::string::basic_string[abi:nn180100](void *a1)
{
  return a1;
}

{
  std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:nn180100]<std::__value_init_tag,std::__default_init_tag>(a1);
  std::string::__annotate_shrink[abi:nn180100]();
  return a1;
}

void ot::Posix::BackboneIPv6Interface::~BackboneIPv6Interface(ot::Posix::BackboneIPv6Interface *this)
{
  *(void *)this = off_10049C7E0;
  stopNetworkMonitoringOnBackbone();
  if (*((_DWORD *)this + 20))
  {
    close(*((_DWORD *)this + 20));
    *((_DWORD *)this + 20) = -1;
  }
  if (*((_DWORD *)this + 19))
  {
    close(*((_DWORD *)this + 19));
    *((_DWORD *)this + 19) = -1;
  }
  if (*((_DWORD *)this + 18))
  {
    close(*((_DWORD *)this + 18));
    *((_DWORD *)this + 18) = -1;
  }
  if (*((void *)this + 11)) {
    operator delete();
  }
  std::string::~string((std::string *)this + 2);
  std::string::~string((std::string *)((char *)this + 8));
}

{
  ot::Posix::BackboneIPv6Interface::~BackboneIPv6Interface(this);
}

{
  ot::Posix::BackboneIPv6Interface::~BackboneIPv6Interface(this);
  operator delete();
}

uint64_t __os_log_helper_16_2_2_4_0_8_32(uint64_t result, int a2, uint64_t a3)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 2;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 3) = 4;
  *(_DWORD *)(result + 4) = a2;
  *(unsigned char *)(result + 8) = 32;
  *(unsigned char *)(result + 9) = 8;
  *(void *)(result + 10) = a3;
  return result;
}

uint64_t __os_log_helper_16_2_4_8_32_4_0_8_32_4_0(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 4;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 4;
  *(_DWORD *)(result + 14) = a3;
  *(unsigned char *)(result + 18) = 32;
  *(unsigned char *)(result + 19) = 8;
  *(void *)(result + 20) = a4;
  *(unsigned char *)(result + 28) = 0;
  *(unsigned char *)(result + 29) = 4;
  *(_DWORD *)(result + 30) = a5;
  return result;
}

uint64_t __os_log_helper_16_2_5_8_32_4_0_8_32_8_32_4_0(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  *(unsigned char *)__n128 result = 2;
  *(unsigned char *)(result + 1) = 5;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 4;
  *(_DWORD *)(result + 14) = a3;
  *(unsigned char *)(result + 18) = 32;
  *(unsigned char *)(result + 19) = 8;
  *(void *)(result + 20) = a4;
  *(unsigned char *)(result + 28) = 32;
  *(unsigned char *)(result + 29) = 8;
  *(void *)(result + 30) = a5;
  *(unsigned char *)(result + 38) = 0;
  *(unsigned char *)(result + 39) = 4;
  *(_DWORD *)(result + 40) = a6;
  return result;
}

uint64_t std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:nn180100]<std::__default_init_tag,std::__default_init_tag>(uint64_t a1)
{
  return a1;
}

{
  boost::optional_ns::in_place_init_t::in_place_init_t();
  std::__compressed_pair_elem<std::allocator<char>,1,true>::__compressed_pair_elem[abi:nn180100](a1);
  return a1;
}

size_t std::char_traits<char>::length[abi:nn180100](const char *a1)
{
  return std::__constexpr_strlen[abi:nn180100](a1);
}

uint64_t std::__compressed_pair_elem<std::allocator<char>,1,true>::__compressed_pair_elem[abi:nn180100](uint64_t a1)
{
  return a1;
}

uint64_t std::allocator<char>::allocator[abi:nn180100](uint64_t a1)
{
  return a1;
}

size_t std::__constexpr_strlen[abi:nn180100](const char *a1)
{
  return strlen(a1);
}

BOOL std::string::__is_long[abi:nn180100]()
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  return *(char *)(v0 + 23) < 0;
}

uint64_t std::string::__get_long_size[abi:nn180100]()
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  return *(void *)(v0 + 8);
}

uint64_t std::string::__get_short_size[abi:nn180100]()
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  return *(unsigned char *)(v0 + 23) & 0x7F;
}

void std::__compressed_pair<std::string::__rep>::first[abi:nn180100]()
{
}

void std::string::data[abi:nn180100]()
{
}

uint64_t std::string::__get_pointer[abi:nn180100]()
{
  if (std::string::__is_long[abi:nn180100]()) {
    return std::string::__get_long_pointer[abi:nn180100]();
  }
  std::string::__get_short_pointer[abi:nn180100]();
  return v0;
}

uint64_t std::string::__get_long_pointer[abi:nn180100]()
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  return *(void *)v0;
}

void std::string::__get_short_pointer[abi:nn180100]()
{
}

void std::string::__move_assign[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  std::string::__annotate_delete[abi:nn180100]();
  if (std::string::__is_long[abi:nn180100]())
  {
    std::string::__alloc[abi:nn180100]();
    uint64_t v8 = v2;
    uint64_t v7 = (void *)std::string::__get_long_pointer[abi:nn180100]();
    std::string::__get_long_cap[abi:nn180100]();
    std::allocator_traits<std::allocator<char>>::deallocate[abi:nn180100](v8, v7);
  }
  uint64_t v11 = std::string::size[abi:nn180100]();
  v10[1] = !std::string::__is_long[abi:nn180100]();
  std::string::__move_assign_alloc[abi:nn180100]();
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  uint64_t v6 = v3;
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
  *(void *)(v4 + 16) = *(void *)(v6 + 16);
  std::string::__set_short_size[abi:nn180100](v12, 0);
  std::string::__get_short_pointer[abi:nn180100]();
  v10[0] = 0;
  std::char_traits<char>::assign[abi:nn180100](v5, v10);
  std::string::__annotate_shrink[abi:nn180100]();
  if (!std::string::__is_long[abi:nn180100]() && v12 != a1)
  {
    std::string::__get_short_size[abi:nn180100]();
    std::string::__annotate_shrink[abi:nn180100]();
  }
}

void std::allocator_traits<std::allocator<char>>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

void std::string::__alloc[abi:nn180100]()
{
}

uint64_t std::string::__get_long_cap[abi:nn180100]()
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  return *(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL;
}

void std::string::__move_assign_alloc[abi:nn180100]()
{
}

{
  std::string::__alloc[abi:nn180100]();
  std::string::__alloc[abi:nn180100]();
}

void std::string::__set_short_size[abi:nn180100](uint64_t a1, char a2)
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *(unsigned char *)(v2 + 23) = *(unsigned char *)(v2 + 23) & 0x80 | a2 & 0x7F;
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *(unsigned char *)(v3 + 23) &= ~0x80u;
}

unsigned char *std::char_traits<char>::assign[abi:nn180100](unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

void std::allocator<char>::deallocate[abi:nn180100](uint64_t a1, void *a2)
{
}

void std::__libcpp_deallocate[abi:nn180100](void *a1)
{
}

void std::__do_deallocate_handle_size[abi:nn180100]<>(void *a1)
{
}

void std::__libcpp_operator_delete[abi:nn180100]<void *>(void *a1)
{
}

void std::string::__set_long_size[abi:nn180100](uint64_t a1, uint64_t a2)
{
  std::__compressed_pair<std::string::__rep>::first[abi:nn180100]();
  *(void *)(v2 + 8) = a2;
}

void *std::__compressed_pair<std::string::__rep>::__compressed_pair[abi:nn180100]<std::__value_init_tag,std::__default_init_tag>(void *a1)
{
  return a1;
}

{
  std::__compressed_pair_elem<std::string::__rep,0,false>::__compressed_pair_elem[abi:nn180100](a1);
  std::__compressed_pair_elem<std::allocator<char>,1,true>::__compressed_pair_elem[abi:nn180100]((uint64_t)a1);
  return a1;
}

void *std::__compressed_pair_elem<std::string::__rep,0,false>::__compressed_pair_elem[abi:nn180100](void *result)
{
  *__n128 result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t __cxx_global_var_init()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t _GLOBAL__sub_I_multicast_backbone_interface_cpp()
{
  return __cxx_global_var_init_1();
}

unint64_t otPlatTimeGet()
{
  if (clock_gettime(_CLOCK_MONOTONIC_RAW, &__tp))
  {
    uint64_t v5 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/alarm.cpp", 47);
    if (v5) {
      uint64_t v4 = v5 + 1;
    }
    else {
      uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/alarm.cpp";
    }
    uint64_t v2 = v4;
    int v3 = 1;
    uint64_t v0 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatTimeGet", v4, 84, v0);
    handle_daemon_exit();
    exit(v3);
  }
  return 1000000 * __tp.tv_sec + __tp.tv_nsec / 0x3E8uLL;
}

void platformAlarmInit(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15 = a1;
  int v14 = a2;
  sSpeedUpFactor = a1;
  if (a2)
  {
    uint64_t v13 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/alarm.cpp", 47);
    if (v13) {
      uint64_t v12 = v13 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/alarm.cpp";
    }
    os_log_t v10 = v12;
    int v11 = 2;
    uint64_t v8 = otExitCodeToString(2u);
    otLogCritPlat("%s() at %s:%d: %s", "platformAlarmInit", v12, 127, v8);
    handle_daemon_exit();
    exit(v11);
  }
  otLogWarnPlat("Real time signal not enabled, microsecond timers may be inaccurate!", a2, a3, a4, a5, a6, a7, a8, v9);
}

unint64_t otPlatAlarmMilliGetNow()
{
  return platformAlarmGetNow() / 0x3E8;
}

unint64_t platformAlarmGetNow(void)
{
  return otPlatTimeGet() * sSpeedUpFactor;
}

void otPlatAlarmMilliStartAt(uint64_t a1, int a2, int a3)
{
  sMsAlarm = a2 + a3;
  sIsMsRunning = 1;
}

void otPlatAlarmMilliStop()
{
  sIsMsRunning = 0;
}

unint64_t otPlatAlarmMicroGetNow()
{
  return platformAlarmGetNow();
}

void otPlatAlarmMicroStartAt(uint64_t a1, int a2, int a3)
{
  sUsAlarm = a2 + a3;
  sIsUsRunning = 1;
}

void otPlatAlarmMicroStop()
{
  sIsUsRunning = 0;
}

unint64_t platformAlarmUpdateTimeout(uint64_t a1)
{
  int64_t v2 = 0x7FFFFFFFLL;
  unint64_t result = platformAlarmGetNow();
  if (!a1) {
    __assert_rtn("platformAlarmUpdateTimeout", "alarm.cpp", 203, "aTimeout != nullptr");
  }
  if (sIsMsRunning)
  {
    int64_t v2 = (int)(sMsAlarm - result / 0x3E8);
    if (v2 <= 0) {
      goto LABEL_9;
    }
    int64_t v2 = 1000 * v2 - result % 0x3E8;
  }
  if ((sIsUsRunning & 1) != 0 && sUsAlarm - (int)result < v2) {
    int64_t v2 = sUsAlarm - (int)result;
  }
LABEL_9:
  if (v2 > 0)
  {
    uint64_t v3 = v2 / sSpeedUpFactor;
    if (!v3) {
      uint64_t v3 = 1;
    }
    if (v3 < 1000000 * *(void *)a1 + *(int *)(a1 + 8))
    {
      *(void *)a1 = v3 / 1000000;
      *(_DWORD *)(a1 + 8) = v3 % 1000000;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

void platformAlarmProcess(uint64_t a1)
{
  if (sIsMsRunning)
  {
    int v2 = sMsAlarm;
    if ((int)(v2 - otPlatAlarmMilliGetNow()) <= 0)
    {
      sIsMsRunning = 0;
      if (otPlatDiagModeGet()) {
        otPlatDiagAlarmFired(a1);
      }
      else {
        otPlatAlarmMilliFired(a1);
      }
    }
  }
  if (sIsUsRunning)
  {
    int v1 = sUsAlarm;
    if ((int)(v1 - otPlatAlarmMicroGetNow()) <= 0)
    {
      sIsUsRunning = 0;
      otPlatAlarmMicroFired(a1);
    }
  }
}

ot::Posix::MulticastRoutingManager *ot::Posix::MulticastRoutingManager::MulticastRoutingManager(ot::Posix::MulticastRoutingManager *this)
{
  return this;
}

{
  BOOL v1;
  ot::Posix::MulticastRoutingManager::MulticastForwardingCache *v4;

  ot::Posix::Mainloop::Source::Source(this);
  *(void *)this = off_10049C8C8;
  uint64_t v4 = (ot::Posix::MulticastRoutingManager *)((char *)this + 16);
  do
  {
    ot::Posix::MulticastRoutingManager::MulticastForwardingCache::MulticastForwardingCache(v4);
    int v1 = (char *)v4 + 56 != (char *)this + 42016;
    uint64_t v4 = (ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)((char *)v4 + 56);
  }
  while (v1);
  *((void *)this + 5252) = 0;
  *((_DWORD *)this + 10506) = -1;
  ot::Posix::BackboneIPv6Interface::BackboneIPv6Interface((ot::Posix::MulticastRoutingManager *)((char *)this + 42032));
  *((unsigned char *)this + 42028) = 0;
  return this;
}

void ot::Posix::MulticastRoutingManager::~MulticastRoutingManager(ot::Posix::MulticastRoutingManager *this)
{
}

{
  *(void *)this = off_10049C8C8;
  ot::Posix::BackboneIPv6Interface::~BackboneIPv6Interface((ot::Posix::MulticastRoutingManager *)((char *)this + 42032));
  std::__non_trivial_if<true>::__non_trivial_if[abi:nn180100]();
}

{
  ot::Posix::MulticastRoutingManager::~MulticastRoutingManager(this);
  operator delete();
}

void platformBackboneInit(const char *a1)
{
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v25, (uint64_t)a1);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "platformBackboneInit Backbone interface is %s", v25, 0xCu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v24, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v24, 0x16u);
  }
  if (a1 && *a1)
  {
    if (strnlen(a1, 0x10uLL) >= 0x10)
    {
      os_log_t v21 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/backbone.cpp", 47);
      if (v21) {
        char v19 = v21 + 1;
      }
      else {
        char v19 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/backbone.cpp";
      }
      uint64_t v8 = otExitCodeToString(2u);
      otLogCritPlat("%s() at %s:%d: %s", "platformBackboneInit", v19, 65, v8);
      handle_daemon_exit();
      exit(2);
    }
    strcpy((char *)&gBackboneNetifName, a1);
    gBackboneNetifIndex = if_nametoindex((const char *)&gBackboneNetifName);
    if (!gBackboneNetifIndex)
    {
      char v20 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/backbone.cpp", 47);
      if (v20) {
        int v18 = v20 + 1;
      }
      else {
        int v18 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/backbone.cpp";
      }
      uint64_t v16 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "platformBackboneInit", v18, 69, v16);
      handle_daemon_exit();
      exit(1);
    }
    otLogInfoPlat("Backbone interface is configured to %s (%d)", v9, v10, v11, v12, v13, v14, v15, (char)&gBackboneNetifName);
  }
  else
  {
    otLogWarnPlat("Backbone Router feature is disabled: infra/backbone interface is missing", v1, v2, v3, v4, v5, v6, v7, v17);
  }
}

uint64_t platformBackboneSetUp()
{
  ot::Posix::MulticastRoutingManager::SetUp((ot::Posix::MulticastRoutingManager *)&sMulticastRoutingManager);
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v5 = logging_obg;
    char v4 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v5;
      os_log_type_t type = v4;
      __os_log_helper_16_0_0(v3);
      _os_log_impl((void *)&_mh_execute_header, log, type, "platformBackboneInit Calling sMulticastRoutingManager Setup", v3, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v7, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v7, 0x16u);
  }
  return otIp6SetLargeScopeMulticastReceiveCallback(gInstance, (uint64_t)platformBackboneProcessMulticast, gInstance);
}

void platformBackboneProcessMulticast(uint64_t a1, uint64_t a2)
{
}

void platformBackboneMulticastRoutingInit(const char *a1)
{
  uint64_t v2 = a1;
  std::string::basic_string[abi:nn180100]<0>(&v1, a1);
  ot::Posix::MulticastRoutingManager::Init((uint64_t)&sMulticastRoutingManager, &v1);
  std::string::~string(&v1);
}

uint64_t platformUpdateBackboneInterfaceStatus(const char *a1, char a2, char a3)
{
  char v6 = a2 & 1;
  char v5 = a3 & 1;
  BackboneInterface = (ot::Posix::BackboneIPv6Interface *)ot::Posix::MulticastRoutingManager::getBackboneInterface((ot::Posix::MulticastRoutingManager *)&sMulticastRoutingManager);
  return ot::Posix::BackboneIPv6Interface::updateBackboneInterfaceInfo(BackboneInterface, a1, v6 & 1, v5 & 1);
}

uint64_t ot::Posix::MulticastRoutingManager::getBackboneInterface(ot::Posix::MulticastRoutingManager *this)
{
  return (uint64_t)this + 42032;
}

{
  return ot::Posix::MulticastRoutingManager::getBackboneInterface(this);
}

void platformSendPacketToBackBone(char *a1, size_t a2)
{
  BackboneInterface = (ot::Posix::BackboneIPv6Interface *)ot::Posix::MulticastRoutingManager::getBackboneInterface((ot::Posix::MulticastRoutingManager *)&sMulticastRoutingManager);
  ot::Posix::BackboneIPv6Interface::send_bmlr_packet(BackboneInterface, a1, a2);
}

void *platformBackboneTearDown()
{
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v5 = logging_obg;
    char v4 = 1;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      log = v5;
      os_log_type_t type = v4;
      __os_log_helper_16_0_0(v3);
      _os_log_impl((void *)&_mh_execute_header, log, type, "platformBackboneTearDown Calling sMulticastRoutingManager TearDown", v3, 2u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v7, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v7, 0x16u);
  }
  return ot::Posix::MulticastRoutingManager::TearDown((ot::Posix::MulticastRoutingManager *)&sMulticastRoutingManager);
}

void platformBackboneDeinit()
{
  gBackboneNetifIndex = 0;
  gBackboneNetifCFStringRef Name = 0;
  qword_1004B9B8C = 0;
}

void platformBackboneStateChange(uint64_t a1, int a2)
{
}

void *ot::Posix::Mainloop::Source::Source(void *this)
{
  *this = &off_10049C810;
  this[1] = 0;
  return this;
}

ot::Posix::MulticastRoutingManager::MulticastForwardingCache *ot::Posix::MulticastRoutingManager::MulticastForwardingCache::MulticastForwardingCache(ot::Posix::MulticastRoutingManager::MulticastForwardingCache *this)
{
  return this;
}

void ot::Posix::Mainloop::Source::~Source(ot::Posix::Mainloop::Source *this)
{
}

{
  __break(1u);
}

uint64_t ot::Posix::MulticastRoutingManager::MulticastForwardingCache::MulticastForwardingCache(uint64_t this)
{
  *(unsigned char *)(this + 48) = -1;
  return this;
}

uint64_t __cxx_global_var_init_0()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_0()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t __cxx_global_var_init_2()
{
  return __cxa_atexit((void (*)(void *))ot::Posix::MulticastRoutingManager::~MulticastRoutingManager, &sMulticastRoutingManager, (void *)&_mh_execute_header);
}

{
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::RadioSpinel((uint64_t)&sRadioSpinel);
  return __cxa_atexit((void (*)(void *))ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::~RadioSpinel, &sRadioSpinel, (void *)&_mh_execute_header);
}

uint64_t _GLOBAL__sub_I_backbone_cpp()
{
  return __cxx_global_var_init_2();
}

uint64_t ot::Posix::Daemon::OutputFormatV(ot::Posix::Daemon *this, const char *a2, va_list a3)
{
  int __nbyte = vsnprintf(__str, 0x280uLL, a2, a3);
  if (__nbyte >= 0)
  {
    if (__nbyte >= 640)
    {
      int __nbyte = 639;
      strcpy(v25, "(truncated ...)");
    }
    if (*((_DWORD *)this + 6) != -1)
    {
      int __nbyte = write(*((_DWORD *)this + 6), __str, __nbyte);
      if (__nbyte < 0)
      {
        uint64_t v12 = __error();
        char v13 = strerror(*v12);
        otLogWarnPlat("Failed to write CLI output: %s", v14, v15, v16, v17, v18, v19, v20, v13);
        close(*((_DWORD *)this + 6));
        *((_DWORD *)this + 6) = -1;
      }
    }
  }
  else
  {
    uint64_t v3 = __error();
    char v4 = strerror(*v3);
    otLogWarnPlat("Failed to format CLI output: %s", v5, v6, v7, v8, v9, v10, v11, v4);
  }
  return __nbyte;
}

void ot::Posix::Daemon::InitializeSessionSocket(ot::Posix::Daemon *this)
{
  os_log_t v21 = this;
  int v20 = 0;
  int v19 = 0;
  int v20 = accept(*((_DWORD *)this + 4), 0, 0);
  if (v20 == -1)
  {
    int v19 = -1;
  }
  else
  {
    char v17 = 0;
    int v19 = fcntl(v20, 1);
    if (v19 != -1)
    {
      char v17 = v19 | 1;
      int v19 = fcntl(v20, 2);
      if (v19 != -1)
      {
        int v19 = setsockopt(v20, 0xFFFF, 4130, &v19, 4u);
        if (v19 != -1)
        {
          if (*((_DWORD *)this + 6) != -1) {
            close(*((_DWORD *)this + 6));
          }
          *((_DWORD *)this + 6) = v20;
        }
      }
    }
  }
  if (v19 == -1)
  {
    uint64_t v8 = __error();
    char v9 = strerror(*v8);
    otLogWarnPlat("Failed to initialize session socket: %s", v10, v11, v12, v13, v14, v15, v16, v9);
    if (v20 != -1) {
      close(v20);
    }
  }
  else
  {
    otLogInfoPlat("Session socket is ready", v1, v2, v3, v4, v5, v6, v7, v17);
  }
}

void *ot::Posix::Daemon::SetUp(void *this)
{
  char v17 = this;
  uint64_t v13 = (int *)this;
  int v16 = 0;
  if (*((_DWORD *)this + 4) == -1)
  {
    *((_DWORD *)this + 4) = SocketWithCloseExec(1, 1, 0, 1);
    if (v13[4] == -1)
    {
      uint64_t v15 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/daemon.cpp", 47);
      if (v15) {
        uint64_t v12 = v15 + 1;
      }
      else {
        uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/daemon.cpp";
      }
      uint64_t v1 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "SetUp", v12, 201, v1);
      handle_daemon_exit();
      exit(1);
    }
    memset(__b, 0, sizeof(__b));
    _WORD v13[5] = open(__b, 16777728, 384);
    if (v13[5] == -1)
    {
      uint64_t v3 = otExitCodeToString(5u);
      otLogCritPlat("exit(%d): %s line %d, %s, %s", 5, "SetUp", 216, "open", v3);
      handle_daemon_exit();
      exit(5);
    }
    if (flock(v13[5], 6) == -1)
    {
      uint64_t v4 = otExitCodeToString(5u);
      otLogCritPlat("exit(%d): %s line %d, %s, %s", 5, "SetUp", 221, "flock", v4);
      handle_daemon_exit();
      exit(5);
    }
    memset(v19, 0, sizeof(v19));
    v19[1] = 1;
    unlink(&v19[2]);
    ot::Posix::Daemon::SetUp(void)::AllowAllGuard::AllowAllGuard((uint64_t)v14);
    int v16 = bind(v13[4], (const sockaddr *)v19, 0x6Au);
    ot::Posix::Daemon::SetUp(void)::AllowAllGuard::~AllowAllGuard((uint64_t)v14);
    if (v16 == -1)
    {
      uint64_t v6 = otExitCodeToString(5u);
      otLogCritPlat("exit(%d): %s line %d, %s, %s", 5, "SetUp", 238, "bind", v6);
      handle_daemon_exit();
      exit(5);
    }
    int v16 = listen(v13[4], 1);
    if (v16 == -1)
    {
      uint64_t v7 = otExitCodeToString(5u);
      otLogCritPlat("exit(%d): %s line %d, %s, %s", 5, "SetUp", 247, "listen", v7);
      handle_daemon_exit();
      exit(5);
    }
    uint64_t v11 = (ot::Instance *)gInstance;
    uint64_t v8 = ot::Posix::Daemon::SetUp(void)::$_0::operator int (*)(void *,char const*,char *)();
    char v9 = (ot::Posix::Mainloop::Manager *)otCliInit(v11, (int (*)(void *, const char *, char *))v8, v13);
    uint64_t v10 = ot::Posix::Mainloop::Manager::Get(v9);
    return ot::Posix::Mainloop::Manager::Add(v10, (ot::Posix::Mainloop::Source *)v13);
  }
  return this;
}

uint64_t ot::Posix::anonymous namespace'::GetFilename(ot::Posix::_anonymous_namespace_ *this, char (*a2)[104], const char *a3)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  uint64_t result = snprintf((char *)this, 0x68uLL, (const char *)a2, &gNetifName);
  int v9 = result;
  if ((int)result < 0 && (unint64_t)v9 >= 0x68)
  {
    uint64_t v8 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/daemon.cpp", 47);
    if (v8) {
      uint64_t v7 = v8 + 1;
    }
    else {
      uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/daemon.cpp";
    }
    uint64_t v5 = v7;
    int v6 = 2;
    uint64_t v4 = otExitCodeToString(2u);
    otLogCritPlat("%s() at %s:%d: %s", "GetFilename", v7, 72, v4);
    handle_daemon_exit();
    exit(v6);
  }
  return result;
}

uint64_t ot::Posix::Daemon::SetUp(void)::AllowAllGuard::AllowAllGuard(uint64_t a1)
{
  return a1;
}

{
  BOOL v3;
  const char *__s2;

  *(unsigned char *)a1 = 0;
  *(_WORD *)(a1 + 2) = 0;
  __s2 = getenv("OT_DAEMON_ALLOW_ALL");
  uint64_t v3 = 0;
  if (__s2) {
    uint64_t v3 = strcmp("1", __s2) == 0;
  }
  *(unsigned char *)a1 = v3;
  if (*(unsigned char *)a1) {
    *(_WORD *)(a1 + 2) = umask(0);
  }
  return a1;
}

uint64_t ot::Posix::Daemon::SetUp(void)::AllowAllGuard::~AllowAllGuard(uint64_t a1)
{
  return a1;
}

{
  if (*(unsigned char *)a1) {
    umask(*(_WORD *)(a1 + 2));
  }
  return a1;
}

uint64_t (*ot::Posix::Daemon::SetUp(void)::$_0::operator int (*)(void *,char const*,char *)())(ot::Posix::Daemon *a1, const char *a2, va_list a3)
{
  return ot::Posix::Daemon::SetUp(void)::$_0::__invoke;
}

__n128 *ot::Posix::Daemon::EnableCliForXpc(ot::Posix::Daemon *this)
{
  uint64_t v4 = (ot::Instance *)gInstance;
  uint64_t v1 = ot::Posix::Daemon::EnableCliForXpc(void)::$_0::operator int (*)(void *,char const*,char *)();
  return otCliInit(v4, (int (*)(void *, const char *, char *))v1, this);
}

uint64_t (*ot::Posix::Daemon::EnableCliForXpc(void)::$_0::operator int (*)(void *,char const*,char *)())(ot::Posix::Daemon *a1, char *a2, va_list a3)
{
  return ot::Posix::Daemon::EnableCliForXpc(void)::$_0::__invoke;
}

uint64_t ot::Posix::Daemon::OutputFormatXpc(ot::Posix::Daemon *this, char *a2, va_list a3)
{
  uint64_t v25 = this;
  __format = a2;
  va_list v23 = a3;
  char v33 = 0;
  int v22 = vsnprintf(&__str, 0x640uLL, a2, a3);
  if (v22 >= 0)
  {
    if ((*((unsigned char *)this + 10270) & 1) == 1 && v22 == 2 && __str == 13 && v30 == 10)
    {
      *((unsigned char *)this + 10271) = 1;
    }
    else
    {
      if (v22 == 4 && __str == 68 && v30 == 111 && v31 == 110 && v32 == 101) {
        *((unsigned char *)this + 10270) = 1;
      }
      if (v22 + *((unsigned __int16 *)this + 5134) > 10240) {
        handle_xpc_output_nobuff((char *)this + 28, *((unsigned __int16 *)this + 5134));
      }
      for (unsigned __int16 i = 0; i < v22; ++i)
      {
        char v5 = *(&__str + i);
        uint64_t v6 = (unsigned __int16)(*((_WORD *)this + 5134))++;
        *((unsigned char *)this + v6 + 28) = v5;
      }
    }
    if (*((unsigned __int16 *)this + 5134) > 0x1F40u)
    {
      os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(4) & 1) != 0)
      {
        os_log_t oslog = logging_obg;
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_0_1_4_0((uint64_t)v28, *((unsigned __int16 *)this + 5134));
          _os_log_error_impl((void *)&_mh_execute_header, oslog, type, "Daemon::OutputFormatXpc mXpcTxBuffer usage high mXpcTxHead[%d]", v28, 8u);
        }
      }
      else if (!logging_obg)
      {
        os_log_t v17 = (os_log_t)&_os_log_default;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v27, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, v17, v16, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v27, 0x16u);
        }
      }
    }
    if (*((unsigned char *)this + 10271) & 1) != 0 && (*((unsigned char *)this + 10270))
    {
      os_log_t v15 = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
      if (v15 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        os_log_t v14 = v15;
        os_log_type_t v13 = OS_LOG_TYPE_INFO;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v9 = v14;
          os_log_type_t v10 = v13;
          __os_log_helper_16_0_0(v12);
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Uart::XpcOutput  mXpcPrompt && mXpcDone = true", v12, 2u);
        }
      }
      else if (!v15 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v26, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v26, 0x16u);
      }
      uint64_t v7 = (unsigned __int16)(*((_WORD *)this + 5134))++;
      *((unsigned char *)this + v7 + 28) = 0;
      send_response_to_otctl((const char *)this + 28);
      memset((char *)this + 28, -1, *((unsigned __int16 *)this + 5134));
      *((_WORD *)this + 5134) = 0;
      *((unsigned char *)this + 10271) = 0;
      *((unsigned char *)this + 10270) = 0;
    }
  }
  else
  {
    uint64_t v3 = __error();
    uint64_t v4 = strerror(*v3);
    otLogCritPlat("Failed to format CLI output: %s", v4);
  }
  return v22;
}

uint64_t ot::Posix::Daemon::Update(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)(result + 16) != -1)
  {
    int v7 = *(_DWORD *)(result + 16);
    if (&___darwin_check_fd_set_overflow)
    {
      uint64_t result = __darwin_check_fd_set_overflow(*(_DWORD *)(result + 16), a2, 0);
      int v8 = result;
    }
    else
    {
      int v8 = 1;
    }
    if (v8) {
      a2[v7 / 0x20uLL] |= 1 << (v7 % 0x20uLL);
    }
    int v6 = *(_DWORD *)(v2 + 16);
    if (&___darwin_check_fd_set_overflow)
    {
      uint64_t result = __darwin_check_fd_set_overflow(*(_DWORD *)(v2 + 16), a2 + 64, 0);
      int v9 = result;
    }
    else
    {
      int v9 = 1;
    }
    if (v9) {
      a2[v6 / 0x20uLL + 64] |= 1 << (v6 % 0x20uLL);
    }
    if (a2[96] < *(_DWORD *)(v2 + 16)) {
      a2[96] = *(_DWORD *)(v2 + 16);
    }
  }
  if (*(_DWORD *)(v2 + 24) != -1)
  {
    int v5 = *(_DWORD *)(v2 + 24);
    if (&___darwin_check_fd_set_overflow)
    {
      uint64_t result = __darwin_check_fd_set_overflow(*(_DWORD *)(v2 + 24), a2, 0);
      int v10 = result;
    }
    else
    {
      int v10 = 1;
    }
    if (v10) {
      a2[v5 / 0x20uLL] |= 1 << (v5 % 0x20uLL);
    }
    int v4 = *(_DWORD *)(v2 + 24);
    if (&___darwin_check_fd_set_overflow)
    {
      uint64_t result = __darwin_check_fd_set_overflow(*(_DWORD *)(v2 + 24), a2 + 64, 0);
      int v11 = result;
    }
    else
    {
      int v11 = 1;
    }
    if (v11) {
      a2[v4 / 0x20uLL + 64] |= 1 << (v4 % 0x20uLL);
    }
    if (a2[96] < *(_DWORD *)(v2 + 24)) {
      a2[96] = *(_DWORD *)(v2 + 24);
    }
  }
  return result;
}

void ot::Posix::Daemon::Process(int *a1, uint64_t a2)
{
  if (a1[4] != -1)
  {
    int v21 = a1[4];
    if (&___darwin_check_fd_set_overflow) {
      int v23 = __darwin_check_fd_set_overflow(a1[4], (const void *)(a2 + 256), 0);
    }
    else {
      int v23 = 1;
    }
    if (v23) {
      int v22 = *(_DWORD *)(a2 + 256 + 4 * (v21 / 0x20uLL)) & (1 << (v21 % 0x20uLL));
    }
    else {
      int v22 = 0;
    }
    if (v22)
    {
      uint64_t v2 = otExitCodeToString(1u);
      otLogCritPlat("exit(%d): %s line %d, %s, %s", 1, "Process", 405, "daemon socket error", v2);
      handle_daemon_exit();
      exit(1);
    }
    int v19 = a1[4];
    if (&___darwin_check_fd_set_overflow) {
      int v24 = __darwin_check_fd_set_overflow(a1[4], (const void *)a2, 0);
    }
    else {
      int v24 = 1;
    }
    if (v24) {
      int v20 = *(_DWORD *)(a2 + 4 * (v19 / 0x20uLL)) & (1 << (v19 % 0x20uLL));
    }
    else {
      int v20 = 0;
    }
    if (v20) {
      ot::Posix::Daemon::InitializeSessionSocket((ot::Posix::Daemon *)a1);
    }
    if (a1[6] != -1)
    {
      int v17 = a1[6];
      if (&___darwin_check_fd_set_overflow) {
        int v25 = __darwin_check_fd_set_overflow(a1[6], (const void *)(a2 + 256), 0);
      }
      else {
        int v25 = 1;
      }
      if (v25) {
        int v18 = *(_DWORD *)(a2 + 256 + 4 * (v17 / 0x20uLL)) & (1 << (v17 % 0x20uLL));
      }
      else {
        int v18 = 0;
      }
      if (v18)
      {
        close(a1[6]);
        a1[6] = -1;
      }
      else
      {
        int v15 = a1[6];
        if (&___darwin_check_fd_set_overflow) {
          int v26 = __darwin_check_fd_set_overflow(a1[6], (const void *)a2, 0);
        }
        else {
          int v26 = 1;
        }
        if (v26) {
          int v16 = *(_DWORD *)(a2 + 4 * (v15 / 0x20uLL)) & (1 << (v15 % 0x20uLL));
        }
        else {
          int v16 = 0;
        }
        if (v16)
        {
          ssize_t v13 = read(a1[6], v27, 0x27FuLL);
          if (v13 <= 0)
          {
            if (v13 < 0)
            {
              uint64_t v3 = __error();
              char v4 = strerror(*v3);
              otLogWarnPlat("Daemon read: %s", v5, v6, v7, v8, v9, v10, v11, v4);
            }
            close(a1[6]);
            a1[6] = -1;
          }
          else
          {
            v27[v13] = 0;
            otCliInputLine((ot::Cli::Interpreter *)v27);
          }
        }
      }
    }
  }
}

void *ot::Posix::Daemon::Get(ot::Posix::Daemon *this)
{
  {
    ot::Posix::Daemon::Daemon((ot::Posix::Daemon *)&ot::Posix::Daemon::Get(void)::sInstance);
    __cxa_atexit((void (*)(void *))ot::Posix::Daemon::~Daemon, &ot::Posix::Daemon::Get(void)::sInstance, (void *)&_mh_execute_header);
  }
  return &ot::Posix::Daemon::Get(void)::sInstance;
}

ot::Posix::Daemon *ot::Posix::Daemon::Daemon(ot::Posix::Daemon *this)
{
  return this;
}

{
  ot::Posix::Daemon *result;

  ot::Posix::Mainloop::Source::Source(this);
  uint64_t result = this;
  *(void *)this = off_10049C850;
  *((_DWORD *)this + 4) = -1;
  *((_DWORD *)this + 5) = -1;
  *((_DWORD *)this + 6) = -1;
  return result;
}

void ot::Posix::Daemon::~Daemon(ot::Posix::Daemon *this)
{
}

{
  ot::Posix::Daemon::~Daemon(this);
  operator delete();
}

uint64_t ot::Posix::Daemon::SetUp(void)::$_0::__invoke(ot::Posix::Daemon *a1, const char *a2, va_list a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  va_list v5 = a3;
  return ot::Posix::Daemon::SetUp(void)::$_0::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t ot::Posix::Daemon::SetUp(void)::$_0::operator()(uint64_t a1, ot::Posix::Daemon *a2, const char *a3, va_list a4)
{
  return ot::Posix::Daemon::OutputFormatV(a2, a3, a4);
}

uint64_t ot::Posix::Daemon::EnableCliForXpc(void)::$_0::__invoke(ot::Posix::Daemon *a1, char *a2, va_list a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  va_list v5 = a3;
  return ot::Posix::Daemon::EnableCliForXpc(void)::$_0::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t ot::Posix::Daemon::EnableCliForXpc(void)::$_0::operator()(uint64_t a1, ot::Posix::Daemon *a2, char *a3, va_list a4)
{
  return ot::Posix::Daemon::OutputFormatXpc(a2, a3, a4);
}

uint64_t otPlatEntropyGet(void *a1, unsigned __int16 a2)
{
  __stream = 0;
  if (a1 && a2)
  {
    __stream = fopen("/dev/urandom", "rb");
    if (__stream) {
      unsigned int v4 = fread(a1, 1uLL, a2, __stream) != a2;
    }
    else {
      unsigned int v4 = 1;
    }
  }
  else
  {
    unsigned int v4 = 7;
  }
  if (__stream) {
    fclose(__stream);
  }
  return v4;
}

void *ot::Posix::Mainloop::Manager::Add(void *this, ot::Posix::Mainloop::Source *a2)
{
  if (*((void *)a2 + 1)) {
    __assert_rtn("Add", "mainloop.cpp", 41, "aSource.mNext == nullptr");
  }
  *((void *)a2 + 1) = *this;
  *this = a2;
  return this;
}

void *ot::Posix::Mainloop::Manager::Remove(void *this, ot::Posix::Mainloop::Source *a2)
{
  for (unsigned __int16 i = this; *i; unsigned __int16 i = (void *)(*i + 8))
  {
    if ((ot::Posix::Mainloop::Source *)*i == a2)
    {
      *unsigned __int16 i = *((void *)a2 + 1);
      break;
    }
  }
  *((void *)a2 + 1) = 0;
  return this;
}

uint64_t *ot::Posix::Mainloop::Manager::Update(uint64_t *result, uint64_t a2)
{
  for (uint64_t i = *result; i; uint64_t i = *(void *)(i + 8))
    uint64_t result = (uint64_t *)(**(uint64_t (***)(uint64_t, uint64_t))i)(i, a2);
  return result;
}

void **ot::Posix::Mainloop::Manager::Process(void **result, uint64_t a2)
{
  for (uint64_t i = *result; i; uint64_t i = (void *)i[1])
    uint64_t result = (void **)(*(uint64_t (**)(void *, uint64_t))(*i + 8))(i, a2);
  return result;
}

void *ot::Posix::Mainloop::Manager::Get(ot::Posix::Mainloop::Manager *this)
{
  return &ot::Posix::Mainloop::Manager::Get(void)::sInstance;
}

uint64_t otPlatGetResetReason()
{
  return gPlatResetReason;
}

uint64_t otPlatSetMcuPowerState(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = 0;
  if (a2 > 1) {
    return 1;
  }
  else {
    gPlatMcuPowerState = a2;
  }
  return v3;
}

void otPlatAssertFail(const char *a1, int a2)
{
}

uint64_t otPlatGetMcuPowerState()
{
  return gPlatMcuPowerState;
}

uint64_t SocketWithCloseExec(int a1, int a2, int a3, int a4)
{
  int v16 = a1;
  int v15 = a2;
  int v14 = a3;
  int v13 = a4;
  unsigned int v12 = 0;
  unsigned int v11 = socket(a1, a2, a3);
  if (v11 == -1)
  {
    perror("socket(SOCK_CLOEXEC)");
  }
  else
  {
    unsigned int v12 = fcntl(v11, 1, 0);
    if (v12 == -1)
    {
      perror("fcntl(F_GETFD)");
    }
    else
    {
      if (v13 == 1) {
        int v4 = 5;
      }
      else {
        int v4 = 1;
      }
      v12 |= v4;
      unsigned int v12 = fcntl(v11, 2, v12);
      if (v12 == -1) {
        perror("fcntl(F_SETFD)");
      }
    }
  }
  if (v12 == -1)
  {
    if (close(v11))
    {
      uint64_t v10 = 0;
      uint64_t v10 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/misc.cpp", 47);
      if (v10) {
        uint64_t v9 = v10 + 1;
      }
      else {
        uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/misc.cpp";
      }
      uint64_t v7 = v9;
      int v8 = 5;
      va_list v5 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "SocketWithCloseExec", v7, 118, v5);
      handle_daemon_exit();
      exit(v8);
    }
    return -1;
  }
  return v11;
}

void ot::Posix::MulticastRoutingManager::processLargeScopeMulticastTransmit(ot::Posix::MulticastRoutingManager *this, char *a2, uint64_t *a3)
{
  int v26 = this;
  int v25 = a2;
  int v24 = a3;
  int v23 = 0;
  int v22 = 0;
  uint64_t v21 = 0;
  if (!gInstance) {
    __assert_rtn("processLargeScopeMulticastTransmit", "multicast_routing.cpp", 90, "gInstance != nullptr");
  }
  __int16 v20 = otThreadGetDeviceRole(gInstance) != 0;
  int v23 = otIp6NewMessage(gInstance, (uint64_t)&v20);
  if (v23)
  {
    if (*v24 >= 4 && !*v25 && !v25[1])
    {
      *v24 -= 4;
      uint64_t v21 = 4;
    }
    uint64_t v18 = *v24;
    otThreadErrorToString(0);
    otLogInfoPlat("MulticastRoutingManager::processLargeScopeMulticastTransmit Packet to NCP (%hu bytes): %s", v3, v4, v5, v6, v7, v8, v9, v18);
    int v22 = otMessageAppend((uint64_t)v23, &v25[v21], *v24);
    if (!v22)
    {
      otMessageSetTimestamp((uint64_t)v23);
      int v22 = otIp6Send(gInstance, (uint64_t)v23);
      int v23 = 0;
    }
  }
  else
  {
    int v22 = 3;
  }
  if (v23) {
    otMessageFree((uint64_t)v23);
  }
  if (v22)
  {
    int v19 = v22;
    char v17 = otThreadErrorToString(v22);
    otThreadErrorToString(v19);
    otLogWarnPlat("MulticastRoutingManager::processLargeScopeMulticastTransmit Failed to transmit, error:%s: %s", v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

std::string *ot::Posix::MulticastRoutingManager::Init(uint64_t a1, const std::string *a2)
{
  return ot::Posix::BackboneIPv6Interface::updateThreadVirtualInterfaceName((std::string *)(a1 + 42032), a2);
}

void *ot::Posix::MulticastRoutingManager::SetUp(ot::Posix::MulticastRoutingManager *this)
{
  if (!gInstance) {
    __assert_rtn("SetUp", "multicast_routing.cpp", 145, "gInstance != nullptr");
  }
  uint64_t v1 = (ot::Posix::Mainloop::Manager *)otBackboneRouterSetMulticastListenerCallback(gInstance, (uint64_t)ot::Posix::MulticastRoutingManager::HandleBackboneMulticastListenerEvent, (uint64_t)this);
  uint64_t v2 = ot::Posix::Mainloop::Manager::Get(v1);
  return ot::Posix::Mainloop::Manager::Add(v2, this);
}

void ot::Posix::MulticastRoutingManager::HandleBackboneMulticastListenerEvent(ot::Posix::MulticastRoutingManager *a1, int a2, const ot::Ip6::Address *a3)
{
}

{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v11 = otThreadErrorToString(0);
      otLogInfoPlat("MulticastRoutingManager::HandleBackboneMulticastListenerEvent Removed: %s", v12, v13, v14, v15, v16, v17, v18, v11);
      ot::Posix::MulticastRoutingManager::Remove(a1, a3);
    }
  }
  else
  {
    uint64_t v3 = otThreadErrorToString(0);
    otLogInfoPlat("MulticastRoutingManager::HandleBackboneMulticastListenerEvent Added: %s", v4, v5, v6, v7, v8, v9, v10, v3);
    ot::Posix::MulticastRoutingManager::Add(a1, a3);
  }
}

void *ot::Posix::MulticastRoutingManager::TearDown(ot::Posix::MulticastRoutingManager *this)
{
  if (!gInstance) {
    __assert_rtn("TearDown", "multicast_routing.cpp", 158, "gInstance != nullptr");
  }
  char v1 = otThreadErrorToString(0);
  otLogInfoPlat("MulticastRoutingManager::TearDown: %s", v2, v3, v4, v5, v6, v7, v8, v1);
  uint64_t v9 = (ot::Posix::Mainloop::Manager *)otBackboneRouterSetMulticastListenerCallback(gInstance, 0, 0);
  uint64_t v10 = ot::Posix::Mainloop::Manager::Get(v9);
  return ot::Posix::Mainloop::Manager::Remove(v10, this);
}

void ot::Posix::MulticastRoutingManager::Add(ot::Posix::MulticastRoutingManager *this, const ot::Ip6::Address *a2)
{
  if (ot::Posix::MulticastRoutingManager::IsEnabled(this))
  {
    ot::Posix::MulticastRoutingManager::UnblockInboundMulticastForwardingCache(this, a2);
    ot::Ip6::Address::GetBytes(a2);
    if (ot::Posix::BackboneIPv6Interface::subscribeMulticastAddress((ot::Posix::MulticastRoutingManager *)((char *)this + 42032), v2))
    {
      ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v28);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v28);
      otThreadErrorToString(0);
      otLogInfoPlat("MulticastRoutingManager: %s: Backbone interface subscribed to %s: %s", v10, v11, v12, v13, v14, v15, v16, (char)"Add");
    }
    else
    {
      ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v29);
      char v24 = ot::String<(unsigned short)40>::AsCString((uint64_t)v29);
      otThreadErrorToString(1);
      otLogWarnPlat("MulticastRoutingManager:Failed to subscribe large scope multicast %s on backbone interface: %s", v3, v4, v5, v6, v7, v8, v9, v24);
    }
    ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v27);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
    otThreadErrorToString(0);
    otLogInfoPlat("MulticastRoutingManager: %s: %s: %s", v17, v18, v19, v20, v21, v22, v23, (char)"Add");
  }
}

void ot::Posix::MulticastRoutingManager::Remove(ot::Posix::MulticastRoutingManager *this, const ot::Ip6::Address *a2)
{
  if (ot::Posix::MulticastRoutingManager::IsEnabled(this))
  {
    ot::Posix::MulticastRoutingManager::RemoveInboundMulticastForwardingCache((uint64_t)this, a2);
    ot::Ip6::Address::GetBytes(a2);
    if (ot::Posix::BackboneIPv6Interface::unSubscribeMulticastAddress((ot::Posix::MulticastRoutingManager *)((char *)this + 42032), v2))
    {
      ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v28);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v28);
      otThreadErrorToString(0);
      otLogInfoPlat("MulticastRoutingManager: %s: Backbone interface unsubscribed to %s: %s", v10, v11, v12, v13, v14, v15, v16, (char)"Remove");
    }
    else
    {
      ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v29);
      char v24 = ot::String<(unsigned short)40>::AsCString((uint64_t)v29);
      otThreadErrorToString(1);
      otLogWarnPlat("MulticastRoutingManager:Failed to unsubscribe large scope multicast %s on backbone interface: %s", v3, v4, v5, v6, v7, v8, v9, v24);
    }
    ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v27);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
    otThreadErrorToString(0);
    otLogInfoPlat("MulticastRoutingManager: %s: %s: %s", v17, v18, v19, v20, v21, v22, v23, (char)"Remove");
  }
}

uint64_t ot::Posix::MulticastRoutingManager::Enable(ot::Posix::MulticastRoutingManager *this)
{
  return ot::Posix::MulticastRoutingManager::IsEnabled(this);
}

uint64_t ot::Posix::MulticastRoutingManager::IsEnabled(ot::Posix::MulticastRoutingManager *this)
{
  return *((unsigned char *)this + 42028) & 1;
}

{
  return ot::Posix::MulticastRoutingManager::IsEnabled(this);
}

void ot::Posix::MulticastRoutingManager::UnblockInboundMulticastForwardingCache(ot::Posix::MulticastRoutingManager *this, const ot::Ip6::Address *a2)
{
  uint64_t v10 = (unsigned __int8 *)this + 16;
  uint64_t v9 = (unsigned __int8 *)this + 42016;
  while (v10 != v9)
  {
    if (ot::Posix::MulticastRoutingManager::MulticastForwardingCache::IsValid((ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)v10)
      && v10[48] == 1
      && v10[49]
      && !ot::Unequatable<ot::Ip6::Address>::operator!=(v10 + 16, a2))
    {
      ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Set((uint64_t)v10, 1, 0);
      ot::Posix::MulticastRoutingManager::MifIndexToString(v10[48]);
      ot::Ip6::Address::ToString((ot::Ip6::Address *)v10, (ot::StringWriter *)v13);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v13);
      ot::Ip6::Address::ToString((ot::Ip6::Address *)(v10 + 16), (ot::StringWriter *)v12);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v12);
      ot::Posix::MulticastRoutingManager::MifIndexToString(0);
      otThreadErrorToString(0);
      otLogInfoPlat("MulticastRoutingManager: %s: %s %s => %s %s: %s", v2, v3, v4, v5, v6, v7, v8, (char)"UnblockInboundMulticastForwardingCache");
    }
    v10 += 56;
  }
}

uint64_t ot::String<(unsigned short)40>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)40>::AsCString(a1);
}

uint64_t ot::Posix::MulticastRoutingManager::RemoveInboundMulticastForwardingCache(uint64_t this, const ot::Ip6::Address *a2)
{
  uint64_t v2 = (ot::Posix::MulticastRoutingManager *)this;
  uint64_t v4 = (unsigned char *)(this + 16);
  uint64_t v3 = (unsigned char *)(this + 42016);
  while (v4 != v3)
  {
    this = ot::Posix::MulticastRoutingManager::MulticastForwardingCache::IsValid((ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)v4);
    if ((this & 1) != 0 && v4[48] == 1)
    {
      this = ot::Equatable<ot::Ip6::Address>::operator==(v4 + 16, a2);
      if (this) {
        this = ot::Posix::MulticastRoutingManager::RemoveMulticastForwardingCache(v2, (ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)v4);
      }
    }
    v4 += 56;
  }
  return this;
}

void ot::Posix::MulticastRoutingManager::UpdateMldReport(ot::Posix::MulticastRoutingManager *this, const ot::Ip6::Address *a2, char a3)
{
  int v25 = this;
  char v24 = a2;
  char v23 = a3 & 1;
  unsigned int v22 = if_nametoindex((const char *)&gBackboneNetifName);
  ot::Ip6::Address::GetBytes(v24);
  long long v21 = *v3;
  if (v23) {
    int v4 = 12;
  }
  else {
    int v4 = 13;
  }
  BOOL v20 = setsockopt(*((_DWORD *)this + 10506), 41, v4, &v21, 0x14u) != 0;
  if (v20)
  {
    ot::Ip6::Address::ToString(v24, (ot::StringWriter *)v26);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v26);
    otThreadErrorToString(v20);
    otLogWarnPlat("MulticastRoutingManager: %s: address %s %s: %s", v12, v13, v14, v15, v16, v17, v18, (char)"UpdateMldReport");
  }
  else
  {
    ot::Ip6::Address::ToString(v24, (ot::StringWriter *)v27);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
    otThreadErrorToString(0);
    otLogInfoPlat("MulticastRoutingManager: %s: address %s %s: %s", v5, v6, v7, v8, v9, v10, v11, (char)"UpdateMldReport");
  }
}

uint64_t ot::Posix::MulticastRoutingManager::GetMulticastListenerCount(ot::Posix::MulticastRoutingManager *this)
{
  uint64_t v6 = this;
  char v5 = 0;
  unsigned __int16 v4 = 0;
  unsigned int v2 = 0;
  while (!otBackboneRouterMulticastListenerGetNext(gInstance, &v4, (uint64_t)v3))
    ++v2;
  return v2;
}

uint64_t ot::Posix::MulticastRoutingManager::HasMulticastListener(ot::Posix::MulticastRoutingManager *this, const ot::Ip6::Address *a2)
{
  uint64_t v7 = this;
  uint64_t v6 = a2;
  char v5 = 0;
  unsigned __int16 v4 = 0;
  while (!otBackboneRouterMulticastListenerGetNext(gInstance, &v4, (uint64_t)v3))
  {
    if (!ot::Unequatable<ot::Ip6::Address>::operator!=(v3, v6))
    {
      char v5 = 1;
      return v5 & 1;
    }
  }
  return v5 & 1;
}

BOOL ot::Unequatable<ot::Ip6::Address>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Ip6::Address>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Ip6::Address>::operator!=(a1, a2);
}

void ot::Posix::MulticastRoutingManager::Update(uint64_t a1, _DWORD *a2)
{
  if ((ot::Posix::MulticastRoutingManager::IsEnabled((ot::Posix::MulticastRoutingManager *)a1) & 1) != 0
    && (ot::Posix::BackboneIPv6Interface::IsActive((ot::Posix::BackboneIPv6Interface *)(a1 + 42032)) & 1) != 0
    && ot::Posix::BackboneIPv6Interface::GetBackboneBPFFd((ot::Posix::BackboneIPv6Interface *)(a1 + 42032)) != -1)
  {
    if (ot::Posix::MulticastRoutingManager::GetMulticastListenerCount((ot::Posix::MulticastRoutingManager *)a1)) {
      ot::Posix::BackboneIPv6Interface::Update(a1 + 42032, a2);
    }
  }
}

uint64_t ot::Posix::BackboneIPv6Interface::GetBackboneBPFFd(ot::Posix::BackboneIPv6Interface *this)
{
  return *((unsigned int *)this + 19);
}

{
  return ot::Posix::BackboneIPv6Interface::GetBackboneBPFFd(this);
}

void ot::Posix::MulticastRoutingManager::Process(uint64_t a1, _DWORD *a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  if ((ot::Posix::MulticastRoutingManager::IsEnabled((ot::Posix::MulticastRoutingManager *)a1) & 1) != 0
    && (ot::Posix::BackboneIPv6Interface::IsActive((ot::Posix::BackboneIPv6Interface *)(a1 + 42032)) & 1) != 0
    && ot::Posix::BackboneIPv6Interface::GetBackboneBPFFd((ot::Posix::BackboneIPv6Interface *)(a1 + 42032)) != -1
    && ot::Posix::MulticastRoutingManager::GetMulticastListenerCount((ot::Posix::MulticastRoutingManager *)a1))
  {
    int BackboneBPFFd = ot::Posix::BackboneIPv6Interface::GetBackboneBPFFd((ot::Posix::BackboneIPv6Interface *)(a1 + 42032));
    uint64_t v13 = v11;
    int v17 = BackboneBPFFd;
    uint64_t v16 = v11;
    if (&___darwin_check_fd_set_overflow) {
      int v18 = __darwin_check_fd_set_overflow(v17, v16, 0);
    }
    else {
      int v18 = 1;
    }
    if (v18) {
      int v15 = v13[BackboneBPFFd / 0x20uLL] & (1 << (BackboneBPFFd % 0x20uLL));
    }
    else {
      int v15 = 0;
    }
    if (v15 && (ot::Posix::MulticastRoutingManager::can_read((ot::Posix::MulticastRoutingManager *)a1) & 1) == 1)
    {
      uint64_t v10 = (int)ot::Posix::BackboneIPv6Interface::get_read((ot::Posix::BackboneIPv6Interface *)(a1 + 42032), (unsigned __int8 *)v19, 1280);
      ot::Posix::MulticastRoutingManager::GetMulticastListenerCount((ot::Posix::MulticastRoutingManager *)a1);
      otThreadErrorToString(0);
      otLogInfoPlat("MulticastRoutingManager::Process call processLargeScopeMulticastTransmit packetLen=%d multicastListenerCount=%d: %s", v2, v3, v4, v5, v6, v7, v8, v10);
      if (v10 > 0) {
        ot::Posix::MulticastRoutingManager::processLargeScopeMulticastTransmit((ot::Posix::MulticastRoutingManager *)a1, v19, &v10);
      }
    }
    ot::Posix::MulticastRoutingManager::ExpireMulticastForwardingCache((ot::Posix::MulticastRoutingManager *)a1);
  }
}

uint64_t ot::Posix::MulticastRoutingManager::can_read(ot::Posix::MulticastRoutingManager *this)
{
  uint64_t v5 = this;
  if (ot::Posix::MulticastRoutingManager::IsEnabled(this))
  {
    if ((ot::Posix::BackboneIPv6Interface::can_read((ot::Posix::MulticastRoutingManager *)((char *)this + 42032), &v4, &v3) & 1) == 1&& (ot::Posix::MulticastRoutingManager::ProcessMulticastMessagesFromBackBone(this, (__n128 *)&v4, &v3) & 1) == 1)
    {
      char v6 = 1;
    }
    else
    {
      ot::Posix::BackboneIPv6Interface::cleanupReadBuffer((uint64_t)this + 42032);
      char v6 = 0;
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

void ot::Posix::MulticastRoutingManager::ExpireMulticastForwardingCache(ot::Posix::MulticastRoutingManager *this)
{
  unint64_t v10 = otPlatTimeGet();
  if (v10 >= *((void *)this + 5252) + 60000000)
  {
    *((void *)this + 5252) = v10;
    for (uint64_t i = (ot::Posix::MulticastRoutingManager *)((char *)this + 16);
          i != (ot::Posix::MulticastRoutingManager *)((char *)this + 42016);
          uint64_t i = (ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)((char *)i + 56))
    {
      ot::Posix::MulticastRoutingManager::MulticastForwardingCache::IsValid(i);
    }
    ot::Posix::MulticastRoutingManager::DumpMulticastForwardingCache(this, v1, v2, v3, v4, v5, v6, v7);
  }
}

uint64_t ot::Posix::MulticastRoutingManager::ProcessMulticastMessagesFromBackBone(ot::Posix::MulticastRoutingManager *this, __n128 *a2, in6_addr *a3)
{
  char v24 = this;
  char v23 = (unsigned __int8 *)a2;
  unsigned int v22 = (unsigned __int8 *)a3;
  int v21 = 0;
  ot::Ip6::Address::SetBytes(&v20, a2);
  ot::Ip6::Address::SetBytes(&v19, (__n128 *)v22);
  if (ot::Posix::MulticastRoutingManager::HasMulticastListener(this, (const ot::Ip6::Address *)&v19))
  {
    int v21 = ot::Posix::MulticastRoutingManager::AddMulticastForwardingCache(this, (ot::Ip6::Address *)&v20, (const ot::Ip6::Address *)&v19, 1);
    if (v21)
    {
      ot::Ip6::Address::ToString((ot::Ip6::Address *)&v20, (ot::StringWriter *)v27);
      ot::Ip6::Address::ToString((ot::Ip6::Address *)&v19, (ot::StringWriter *)v26);
      otThreadErrorToString(1);
      otLogWarnPlat("%s AddMulticastForwardingCache returned false src(%s) dst(%s): %s", v10, v11, v12, v13, v14, v15, v16, (char)"ProcessMulticastMessagesFromBackBone");
      char v25 = 0;
    }
    else
    {
      char v25 = 1;
    }
  }
  else
  {
    ot::Ip6::Address::ToString((ot::Ip6::Address *)&v20, (ot::StringWriter *)v29);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v29);
    ot::Ip6::Address::ToString((ot::Ip6::Address *)&v19, (ot::StringWriter *)v28);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v28);
    otThreadErrorToString(1);
    otLogWarnPlat("%s Does not have a multicast listener, hence returned false src(%s) dst(%s): %s", v3, v4, v5, v6, v7, v8, v9, (char)"ProcessMulticastMessagesFromBackBone");
    char v25 = 0;
  }
  return v25 & 1;
}

uint64_t ot::Posix::MulticastRoutingManager::AddMulticastForwardingCache(ot::Posix::MulticastRoutingManager *a1, ot::Ip6::Address *a2, const ot::Ip6::Address *a3, char a4)
{
  unsigned int v18 = 0;
  otThreadErrorToString(0);
  otLogInfoPlat("MulticastRoutingManager:%s:: %s", v4, v5, v6, v7, v8, v9, v10, (char)"AddMulticastForwardingCache");
  char v17 = -1;
  if (!a4 || a4 == 1)
  {
    ot::Posix::MulticastRoutingManager::ExpireMulticastForwardingCache(a1);
    if (a4 == 1)
    {
      if (ot::Posix::MulticastRoutingManager::HasMulticastListener(a1, a3)) {
        char v17 = 0;
      }
    }
    else
    {
      if (ot::Ip6::Address::IsLinkLocal(a2)) {
        return 0;
      }
      ot::Ip6::Address::GetPrefix(a2);
      uint64_t v15 = v11;
      otThreadGetMeshLocalPrefix(gInstance);
      uint64_t v13 = (const void *)ot::AsCoreType<otIp6NetworkPrefix>(v12);
      if (!ot::Unequatable<ot::Ip6::NetworkPrefix>::operator!=(v15, v13)) {
        return 0;
      }
      if (ot::Ip6::Address::GetScope(a3) > 3u) {
        char v17 = 1;
      }
    }
    ot::Posix::MulticastRoutingManager::SaveMulticastForwardingCache(a1, a2, a3, a4, v17);
    return v18;
  }
  return 7;
}

void ot::Posix::MulticastRoutingManager::ProcessMulticastMessagesToBackBone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a1;
  uint64_t v25 = a2;
  uint64_t v24 = a3;
  if (ot::Posix::MulticastRoutingManager::IsEnabled((ot::Posix::MulticastRoutingManager *)a1))
  {
    WORD2(v23) = 0;
    LODWORD(v23) = (unsigned __int16)otMessageGetLength(v25);
    uint64_t v22 = 0;
    unsigned __int16 v21 = 1280;
    __n128 v20 = 0;
    if (gInstance != v24) {
      __assert_rtn("ProcessMulticastMessagesToBackBone", "multicast_routing.cpp", 448, "gInstance == aContext");
    }
    if ((unsigned __int16)v23 > 0x500u) {
      __assert_rtn("ProcessMulticastMessagesToBackBone", "multicast_routing.cpp", 449, "length <= OPENTHREAD_CONFIG_IP6_MAX_DATAGRAM_LENGTH");
    }
    if ((unsigned __int16)v23 == (unsigned __int16)otMessageRead(v25, 0, &v27[v22], v21))
    {
      __n128 v20 = v27;
      ot::Ip6::Address::SetBytes(&v19, v28);
      ot::Ip6::Address::SetBytes(&v18, (__n128 *)(v20 + 24));
      *(_DWORD *)((char *)&v23 + 2) = ot::Posix::MulticastRoutingManager::AddMulticastForwardingCache((ot::Posix::MulticastRoutingManager *)a1, (ot::Ip6::Address *)&v19, (const ot::Ip6::Address *)&v18, 0);
      if (*(_DWORD *)((char *)&v23 + 2))
      {
        otThreadErrorToString(1);
        otLogWarnPlat("%s MulticastRoutingManager AddMulticastForwardingCache returns false.: %s", v10, v11, v12, v13, v14, v15, v16, (char)"ProcessMulticastMessagesToBackBone");
      }
      else
      {
        ot::Posix::BackboneIPv6Interface::send_packet((ot::Posix::BackboneIPv6Interface *)(a1 + 42032), v27, (unsigned __int16)v23);
      }
    }
    else
    {
      *(_DWORD *)((char *)&v23 + 2) = 3;
    }
  }
  else
  {
    otThreadErrorToString(0);
    otLogInfoPlat("%s MulticastRoutingManager is not enabled. Return here : %s", v3, v4, v5, v6, v7, v8, v9, (char)"ProcessMulticastMessagesToBackBone");
  }
}

void ot::Posix::MulticastRoutingManager::InitMulticastRouterSock(ot::Posix::MulticastRoutingManager *this)
{
  otThreadErrorToString(0);
  otLogInfoPlat("MulticastRoutingManager:%s:: %s", v1, v2, v3, v4, v5, v6, v7, (char)"InitMulticastRouterSock");
}

uint64_t ot::Posix::MulticastRoutingManager::FinalizeMulticastRouterSock(ot::Posix::MulticastRoutingManager *this)
{
  otThreadErrorToString(0);
  otLogInfoPlat("MulticastRoutingManager:%s:: %s", v1, v2, v3, v4, v5, v6, v7, (char)"FinalizeMulticastRouterSock");
  uint64_t result = ot::Posix::MulticastRoutingManager::IsEnabled(this);
  if (result)
  {
    uint64_t result = close(*((_DWORD *)this + 10506));
    *((_DWORD *)this + 10506) = -1;
  }
  return result;
}

void ot::Posix::MulticastRoutingManager::ProcessMulticastRouterMessages(ot::Posix::MulticastRoutingManager *this)
{
  otThreadErrorToString(0);
  otLogInfoPlat("MulticastRoutingManager:%s:: %s", v1, v2, v3, v4, v5, v6, v7, (char)"ProcessMulticastRouterMessages");
}

BOOL ot::Unequatable<ot::Ip6::NetworkPrefix>::operator!=(const void *a1, const void *a2)
{
  return !ot::Equatable<ot::Ip6::NetworkPrefix>::operator==(a1, a2);
}

{
  return ot::Unequatable<ot::Ip6::NetworkPrefix>::operator!=(a1, a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ot::AsCoreType<otIp6NetworkPrefix>(uint64_t a1)
{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 85, "(aObject) != nullptr");
  }
}

{
  if (!a1) {
    __assert_rtn("AsCoreType", "as_core_type.hpp", 68, "(aObject) != nullptr");
  }
}

unint64_t ot::Posix::MulticastRoutingManager::SaveMulticastForwardingCache(ot::Posix::MulticastRoutingManager *a1, _OWORD *a2, _OWORD *a3, char a4, char a5)
{
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  uint64_t v8 = (void *)((char *)a1 + 16);
  uint64_t v7 = (void *)((char *)a1 + 42016);
  while (v8 != v7)
  {
    if (ot::Posix::MulticastRoutingManager::MulticastForwardingCache::IsValid((ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)v8))
    {
      if (ot::Equatable<ot::Ip6::Address>::operator==(v8, a2)
        && ot::Equatable<ot::Ip6::Address>::operator==(v8 + 2, a3))
      {
        return ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Set((uint64_t)v8, a4, a5);
      }
      if (!v9 || v8[4] < *((void *)v9 + 4)) {
        uint64_t v9 = (ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)v8;
      }
    }
    else if (!v10)
    {
      uint64_t v10 = v8;
    }
    v8 += 7;
  }
  if (v10) {
    return ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Set(v10, a2, a3, a4, a5);
  }
  ot::Posix::MulticastRoutingManager::RemoveMulticastForwardingCache(a1, v9);
  return ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Set(v9, a2, a3, a4, a5);
}

BOOL ot::Posix::MulticastRoutingManager::MulticastForwardingCache::IsValid(ot::Posix::MulticastRoutingManager::MulticastForwardingCache *this)
{
  return *((unsigned __int8 *)this + 48) != 255;
}

{
  return ot::Posix::MulticastRoutingManager::MulticastForwardingCache::IsValid(this);
}

unint64_t ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Set(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(a1 + 48) = a2;
  *(unsigned char *)(a1 + 49) = a3;
  *(void *)(a1 + 40) = 0;
  unint64_t result = otPlatTimeGet();
  *(void *)(a1 + 32) = result;
  return result;
}

const char *ot::Posix::MulticastRoutingManager::MifIndexToString(unsigned __int8 a1)
{
  uint64_t v2 = "Unknown";
  switch(a1)
  {
    case 0u:
      return "Thread";
    case 1u:
      return "Backbone";
    case 0xFFu:
      return "None";
  }
  return v2;
}

BOOL ot::Equatable<ot::Ip6::Address>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

{
  return ot::Equatable<ot::Ip6::Address>::operator==(a1, a2);
}

uint64_t ot::Posix::MulticastRoutingManager::RemoveMulticastForwardingCache(ot::Posix::MulticastRoutingManager *this, ot::Posix::MulticastRoutingManager::MulticastForwardingCache *a2)
{
  ot::Posix::MulticastRoutingManager::MifIndexToString(*((unsigned char *)a2 + 48));
  ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v12);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v12);
  ot::Ip6::Address::ToString((ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)((char *)a2 + 16), (ot::StringWriter *)v11);
  ot::String<(unsigned short)40>::AsCString((uint64_t)v11);
  ot::Posix::MulticastRoutingManager::MifIndexToString(*((unsigned char *)a2 + 49));
  otThreadErrorToString(0);
  otLogInfoPlat("MulticastRoutingManager: %s: %s %s => %s %s: %s", v2, v3, v4, v5, v6, v7, v8, (char)"RemoveMulticastForwardingCache");
  return ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Erase((uint64_t)a2);
}

void ot::Posix::MulticastRoutingManager::DumpMulticastForwardingCache(ot::Posix::MulticastRoutingManager *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  otLogDebgPlat("MulticastRoutingManager: ==================== MFC ENTRIES ====================", a2, a3, a4, a5, a6, a7, a8, v22);
  for (uint64_t i = (unsigned __int8 *)this + 16; i != (unsigned __int8 *)((char *)this + 42016); i += 56)
  {
    if (ot::Posix::MulticastRoutingManager::MulticastForwardingCache::IsValid((ot::Posix::MulticastRoutingManager::MulticastForwardingCache *)i))
    {
      char v24 = ot::Posix::MulticastRoutingManager::MifIndexToString(i[48]);
      ot::Ip6::Address::ToString((ot::Ip6::Address *)i, (ot::StringWriter *)v28);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v28);
      ot::Ip6::Address::ToString((ot::Ip6::Address *)(i + 16), (ot::StringWriter *)v27);
      ot::String<(unsigned short)40>::AsCString((uint64_t)v27);
      ot::Posix::MulticastRoutingManager::MifIndexToString(i[49]);
      otLogDebgPlat("MulticastRoutingManager: %s %s => %s %s", v15, v16, v17, v18, v19, v20, v21, v24);
    }
  }
  otLogDebgPlat("MulticastRoutingManager: =====================================================", v8, v9, v10, v11, v12, v13, v14, v23);
}

void ot::Posix::MulticastRoutingManager::HandleStateChange(ot::Posix::MulticastRoutingManager *a1, uint64_t a2, int a3)
{
  if ((a3 & 0x2000000) != 0)
  {
    unsigned int State = otBackboneRouterGetState(a2);
    if (State <= 1)
    {
      ot::Posix::MulticastRoutingManager::Disable(a1);
    }
    else if (State == 2)
    {
      ot::Posix::MulticastRoutingManager::Enable(a1);
    }
  }
}

unint64_t ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Set(_OWORD *a1, _OWORD *a2, _OWORD *a3, char a4, char a5)
{
  *a1 = *a2;
  a1[1] = *a3;
  return ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Set((uint64_t)a1, a4, a5);
}

unint64_t ot::Posix::MulticastRoutingManager::MulticastForwardingCache::SetValidPktCnt(ot::Posix::MulticastRoutingManager::MulticastForwardingCache *this, uint64_t a2)
{
  *((void *)this + 5) = a2;
  unint64_t result = otPlatTimeGet();
  *((void *)this + 4) = result;
  return result;
}

uint64_t ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Erase(uint64_t this)
{
  *(unsigned char *)(this + 48) = -1;
  return this;
}

{
  return ot::Posix::MulticastRoutingManager::MulticastForwardingCache::Erase(this);
}

BOOL ot::Equatable<ot::Ip6::NetworkPrefix>::operator==(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 8uLL) == 0;
}

{
  return ot::Equatable<ot::Ip6::NetworkPrefix>::operator==(a1, a2);
}

uint64_t __cxx_global_var_init_1_1()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_multicast_routing_cpp()
{
  return __cxx_global_var_init_1_1();
}

char *otSysGetThreadNetifName()
{
  return &gNetifName;
}

uint64_t otSysGetThreadNetifIndex()
{
  return gNetifIndex;
}

uint64_t otSysGetThreadVirtualInterfaceReadBufferSize()
{
  return gVirtualInterfaceReadBufferSize;
}

uint64_t otSysSetThreadirtualInterfaceReadBufferSize(int a1)
{
  gVirtualInterfaceReadBufferunsigned __int16 Size = a1;
  return 0;
}

void platformNetifStateChange(uint64_t a1, int a2)
{
  if ((a2 & 0x1000000) != 0) {
    UpdateLink(a1);
  }
}

void UpdateLink(uint64_t a1)
{
  if (gInstance != a1) {
    __assert_rtn("UpdateLink", "netif.cpp", 664, "gInstance == aInstance");
  }
  char IsEnabled = otIp6IsEnabled(a1);
  SetLinkState(a1, IsEnabled & 1);
}

uint64_t platformNetifInit(uint64_t a1)
{
  uint64_t v12 = a1;
  sIpFd = SocketWithCloseExec(30, 2, 0, 1);
  if (sIpFd < 0)
  {
    uint64_t v11 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp", 47);
    if (v11) {
      uint64_t v9 = v11 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp";
    }
    uint64_t v7 = v9;
    int v8 = 5;
    uint64_t v1 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "platformNetifInit", v9, 2130, v1);
    handle_daemon_exit();
    exit(v8);
  }
  platformConfigureNetLink();
  platformConfigureTunDevice(v12);
  uint64_t result = ne_tunnel_get_ifindex();
  gNetifIndex = result;
  if (!result)
  {
    uint64_t v10 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp", 47);
    if (v10) {
      uint64_t v6 = v10 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp";
    }
    uint64_t v4 = v6;
    int v5 = 1;
    uint64_t v3 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "platformNetifInit", v6, 2140, v3);
    handle_daemon_exit();
    exit(v5);
  }
  return result;
}

uint64_t platformConfigureNetLink(void)
{
  sNetlinkFd = SocketWithCloseExec(17, 3, 0, 1);
  if (sNetlinkFd < 0)
  {
    uint64_t v11 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp", 47);
    if (v11) {
      int v8 = v11 + 1;
    }
    else {
      int v8 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp";
    }
    uint64_t v6 = v8;
    int v7 = 5;
    uint64_t v0 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "platformConfigureNetLink", v8, 2088, v0);
    handle_daemon_exit();
    exit(v7);
  }
  uint64_t result = fcntl(sNetlinkFd, 4, 4);
  int v10 = result;
  if (result)
  {
    uint64_t v9 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp", 47);
    if (v9) {
      int v5 = v9 + 1;
    }
    else {
      int v5 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp";
    }
    uint64_t v3 = v5;
    int v4 = 5;
    uint64_t v2 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "platformConfigureNetLink", v5, 2122, v2);
    handle_daemon_exit();
    exit(v4);
  }
  return result;
}

BOOL platformConfigureTunDevice(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  v4[1] = 20;
  sTunFd = ne_tunnel_open();
  ne_tunnel_name(&gNetifName, 20);
  if (gVirtualInterfaceReadBufferSize)
  {
    v4[0] = gVirtualInterfaceReadBufferSize;
    if (setsockopt(sTunFd, 0xFFFF, 4098, v4, 4u) < 0)
    {
      os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
      {
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_0_1_4_0((uint64_t)v9, v4[0]);
          _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "TunnelIPv6Interface::TunnelIPv6Interface socket read buffer size could not be set to %d bytes", v9, 8u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v8, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v8, 0x16u);
      }
    }
    uint64_t v2 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v2 && (syslog_is_the_mask_enabled(7) & 1) != 0)
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        __os_log_helper_16_0_1_4_0((uint64_t)v7, v4[0]);
        _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TunnelIPv6Interface::TunnelIPv6Interface socket read buffer size set to %d bytes", v7, 8u);
      }
    }
    else if (!v2 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v6, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v6, 0x16u);
    }
  }
  return ne_tunnel_set_mtu();
}

void *platformNetifSetUp()
{
  if (!gInstance) {
    __assert_rtn("platformNetifSetUp", "netif.cpp", 2153, "gInstance != nullptr");
  }
  otIp6SetReceiveFilterEnabled(gInstance, 1);
  otIcmp6SetEchoMode(gInstance, 0);
  otIp6SetReceiveCallback(gInstance, (uint64_t)processReceive, gInstance);
  return otIp6SetAddressCallback(gInstance, (uint64_t)processAddressChange, gInstance);
}

void processReceive(uint64_t a1, uint64_t a2)
{
  uint64_t v152 = a1;
  *(void *)&__nbyte[6] = a2;
  *(_WORD *)&__nbyte[4] = 0;
  *(_DWORD *)int __nbyte = (unsigned __int16)otMessageGetLength(a1);
  unsigned __int16 v149 = 1280;
  char v148 = 0;
  uint64_t v150 = 4;
  if (gInstance != *(void *)&__nbyte[6]) {
    __assert_rtn("processReceive", "netif.cpp", 1048, "gInstance == aContext");
  }
  if (*(unsigned __int16 *)__nbyte > 0x500uLL) {
    __assert_rtn("processReceive", "netif.cpp", 1049, "length <= kMaxIp6Size");
  }
  if (sTunFd > 0)
  {
    if (*(unsigned __int16 *)__nbyte == (unsigned __int16)otMessageRead(v152, 0, &__buf[v150], v149))
    {
      memset(__b, 0, sizeof(__b));
      uint64_t v121 = &gInstance;
      otMessageGetBufferInfo(gInstance, (uint64_t)v123);
      bzero(v154, 0x400uLL);
      if (otMessageGetIsBufferStatsEnabled(gInstance)) {
        otMessageGetBufferIDs(v152, v154);
      }
      uint64_t v118 = v153;
      int v120 = 0;
      memset(v153, 0, sizeof(v153));
      unsigned int v119 = &gInstance;
      char v122 = otMessageGetMatterHeader(gInstance, v152, v153) & 1;
      if (otIp6GetSourceDestinationAddressandPort(gInstance, v152, __b))
      {
        if ((__buf[v150] & 0xF0) == 0x40) {
          char v148 = 1;
        }
        otLogWarnPlat("[netif] processReceive: Could not extract IP and port information isIPv4Packet=%d", v2, v3, v4, v5, v6, v7, v8, v148 & 1);
        otDumpInfoPlat((ot *)"", (uint64_t)&__buf[v150], *(unsigned __int16 *)__nbyte);
        int v89 = *(unsigned __int16 *)__nbyte;
        uint64_t v90 = v152;
        uint64_t v91 = &gInstance;
        TotalBufferint Count = otMessageGetTotalBufferCount(gInstance);
        FreeBufferint Count = otMessageGetFreeBufferCount(gInstance);
        unsigned int v94 = v130;
        unsigned int v95 = v131;
        uint64_t v96 = v132;
        unsigned int v97 = v124;
        unsigned int v98 = v125;
        uint64_t v99 = v126;
        unsigned int v100 = v127;
        unsigned int v101 = v128;
        uint64_t v102 = v129;
        unsigned int v103 = v136;
        unsigned int v104 = v137;
        uint64_t v105 = v138;
        unsigned int v106 = v139;
        unsigned int v107 = v140;
        uint64_t v108 = v141;
        unsigned int v109 = v142;
        unsigned int v110 = v143;
        uint64_t v111 = v144;
        unsigned int v112 = v133;
        unsigned int v113 = v134;
        uint64_t v114 = v135;
        unsigned int v115 = v145;
        unsigned int v116 = v146;
        uint64_t v117 = v147;
        if (v122) {
          id v88 = v153;
        }
        else {
          id v88 = "";
        }
        unsigned int v87 = &v25;
        uint64_t v26 = (char *)v90;
        int v27 = v154;
        unint64_t v28 = (unsigned __int16)TotalBufferCount;
        uint64_t v29 = (unsigned __int16)FreeBufferCount;
        uint64_t v30 = v94;
        uint64_t v31 = v95;
        uint64_t v32 = v96;
        uint64_t v33 = v97;
        uint64_t v34 = v98;
        uint64_t v35 = v99;
        uint64_t v36 = v100;
        uint64_t v37 = v101;
        uint64_t v38 = v102;
        uint64_t v39 = v103;
        uint64_t v40 = v104;
        uint64_t v41 = v105;
        uint64_t v42 = v106;
        uint64_t v43 = v107;
        uint64_t v44 = v108;
        uint64_t v45 = v109;
        uint64_t v46 = v110;
        uint64_t v47 = v111;
        uint64_t v48 = v112;
        uint64_t v49 = v113;
        uint64_t v50 = v114;
        uint64_t v51 = v115;
        uint64_t v52 = v116;
        uint64_t v53 = v117;
        os_log_t v54 = v88;
        otLogInfoPlat("[netif] Packet from NCP (%u bytes), buffer = %p%s, bufs:[tot:%d, free:%d], Ip6:[msgs:%u, bufs:%u, totbytes:%u] 6LoSend:[%u, %u, %u] 6LoReas:[%u, %u, %u] mle:[%u, %u, %u,], coap:[%u, %u, %u], coapSec:[%u, %u, %u], mpl:[%u %u %u], applCoap:[%u, %u, %u]%s", v109, v107, v107, v106, v104, v104, v103, v89);
      }
      else
      {
        int v58 = *(unsigned __int16 *)__nbyte;
        uint64_t v59 = v152;
        os_log_t v60 = &gInstance;
        int v61 = otMessageGetTotalBufferCount(gInstance);
        int v62 = otMessageGetFreeBufferCount(gInstance);
        unsigned int v63 = v130;
        unsigned int v64 = v131;
        uint64_t v65 = v132;
        unsigned int v66 = v124;
        unsigned int v67 = v125;
        uint64_t v68 = v126;
        unsigned int v69 = v127;
        unsigned int v70 = v128;
        uint64_t v71 = v129;
        unsigned int v72 = v136;
        unsigned int v73 = v137;
        uint64_t v74 = v138;
        unsigned int v75 = v139;
        unsigned int v76 = v140;
        uint64_t v77 = v141;
        unsigned int v78 = v142;
        unsigned int v79 = v143;
        uint64_t v80 = v144;
        unsigned int v81 = v133;
        unsigned int v82 = v134;
        uint64_t v83 = v135;
        unsigned int v84 = v145;
        unsigned int v85 = v146;
        uint64_t v86 = (const char *)v147;
        if (v122) {
          os_log_t v57 = v153;
        }
        else {
          os_log_t v57 = "";
        }
        os_log_t v56 = &v25;
        uint64_t v26 = __b;
        int v27 = (char *)v59;
        unint64_t v28 = (unint64_t)v154;
        uint64_t v29 = (unsigned __int16)v61;
        uint64_t v30 = (unsigned __int16)v62;
        uint64_t v31 = v63;
        uint64_t v32 = v64;
        uint64_t v33 = v65;
        uint64_t v34 = v66;
        uint64_t v35 = v67;
        uint64_t v36 = v68;
        uint64_t v37 = v69;
        uint64_t v38 = v70;
        uint64_t v39 = v71;
        uint64_t v40 = v72;
        uint64_t v41 = v73;
        uint64_t v42 = v74;
        uint64_t v43 = v75;
        uint64_t v44 = v76;
        uint64_t v45 = v77;
        uint64_t v46 = v78;
        uint64_t v47 = v79;
        uint64_t v48 = v80;
        uint64_t v49 = v81;
        uint64_t v50 = v82;
        uint64_t v51 = v83;
        uint64_t v52 = v84;
        uint64_t v53 = v85;
        os_log_t v54 = v86;
        os_log_type_t v55 = v57;
        otLogInfoPlat("[netif] Packet from NCP (%u bytes),%s, buffer = %p%s, bufs:[tot:%d, free:%d], Ip6:[msgs:%u, bufs:%u, totbytes:%u] 6LoSend:[%u, %u, %u] 6LoReas:[%u, %u, %u] mle:[%u, %u, %u,], coap:[%u, %u, %u], coapSec:[%u, %u, %u], mpl:[%u %u %u], applCoap:[%u, %u, %u]%s", v78, v76, v76, v75, v73, v73, v72, v58);
      }
      if (*(unsigned __int16 *)__nbyte > 0xAu && __buf[10] == 58)
      {
        otLogInfoPlat("[netif] *****ICMP packet dump******", v9, v10, v11, v12, v13, v14, v15, v25);
        otDumpInfoPlat((ot *)"", (uint64_t)&__buf[v150], *(unsigned __int16 *)__nbyte);
      }
      __buf[0] = 0;
      __buf[1] = 0;
      __buf[2] = 0;
      __buf[3] = 30;
      *(_WORD *)__nbyte += 4;
      ssize_t v16 = write(sTunFd, __buf, *(unsigned __int16 *)__nbyte);
      if (v16 != *(unsigned __int16 *)__nbyte)
      {
        perror("write");
        *(_DWORD *)&__nbyte[2] = 1;
      }
    }
    else
    {
      *(_DWORD *)&__nbyte[2] = 3;
    }
  }
  otMessageFree(v152);
  if (*(_DWORD *)&__nbyte[2])
  {
    char v17 = otThreadErrorToString(*(int *)&__nbyte[2]);
    otLogWarnPlat("[netif] Failed to receive, error:%s", v18, v19, v20, v21, v22, v23, v24, v17);
  }
}

void processAddressChange(void **a1, char a2, uint64_t a3)
{
  if (*(unsigned __int8 *)*a1 == 255) {
    UpdateMulticast(a3, *a1, a2 & 1);
  }
  else {
    UpdateUnicast(a3, (uint64_t)a1, a2 & 1);
  }
}

uint64_t platformNetifDeinit()
{
  if (sTunFd != -1)
  {
    uint64_t result = ne_tunnel_close();
    sTunFd = -1;
  }
  if (sIpFd != -1)
  {
    uint64_t result = close(sIpFd);
    sIpFd = -1;
  }
  if (sNetlinkFd != -1)
  {
    uint64_t result = close(sNetlinkFd);
    sNetlinkFd = -1;
  }
  gNetifIndex = 0;
  return result;
}

const void *platformNetifUpdateFdSet(const void *result, uint64_t a2, const void *a3, _DWORD *a4)
{
  uint64_t v6 = result;
  if (gNetifIndex)
  {
    if (sTunFd < 0) {
      __assert_rtn("platformNetifUpdateFdSet", "netif.cpp", 2222, "sTunFd >= 0");
    }
    if (sNetlinkFd < 0) {
      __assert_rtn("platformNetifUpdateFdSet", "netif.cpp", 2223, "sNetlinkFd >= 0");
    }
    if (sIpFd < 0) {
      __assert_rtn("platformNetifUpdateFdSet", "netif.cpp", 2224, "sIpFd >= 0");
    }
    if (rcpBuffersAvailable)
    {
      int v10 = sTunFd;
      if (&___darwin_check_fd_set_overflow)
      {
        uint64_t result = (const void *)__darwin_check_fd_set_overflow(sTunFd, result, 0);
        int v11 = (int)result;
      }
      else
      {
        int v11 = 1;
      }
      if (v11) {
        v6[v10 / 0x20uLL] |= 1 << (v10 % 0x20uLL);
      }
      int v9 = sTunFd;
      if (&___darwin_check_fd_set_overflow)
      {
        uint64_t result = (const void *)__darwin_check_fd_set_overflow(sTunFd, a3, 0);
        int v12 = (int)result;
      }
      else
      {
        int v12 = 1;
      }
      if (v12) {
        *((_DWORD *)a3 + v9 / 0x20uLL) |= 1 << (v9 % 0x20uLL);
      }
    }
    int v8 = sNetlinkFd;
    if (&___darwin_check_fd_set_overflow)
    {
      uint64_t result = (const void *)__darwin_check_fd_set_overflow(sNetlinkFd, v6, 0);
      int v13 = (int)result;
    }
    else
    {
      int v13 = 1;
    }
    if (v13) {
      v6[v8 / 0x20uLL] |= 1 << (v8 % 0x20uLL);
    }
    int v7 = sNetlinkFd;
    if (&___darwin_check_fd_set_overflow)
    {
      uint64_t result = (const void *)__darwin_check_fd_set_overflow(sNetlinkFd, a3, 0);
      int v14 = (int)result;
    }
    else
    {
      int v14 = 1;
    }
    if (v14) {
      *((_DWORD *)a3 + v7 / 0x20uLL) |= 1 << (v7 % 0x20uLL);
    }
    if ((rcpBuffersAvailable & 1) != 0 && sTunFd > *a4) {
      *a4 = sTunFd;
    }
    if (sNetlinkFd > *a4) {
      *a4 = sNetlinkFd;
    }
  }
  return result;
}

void platformMulticastProcess()
{
}

void processTransmit(uint64_t a1)
{
  uint64_t v162 = a1;
  unsigned int v161 = 0;
  ssize_t v160 = 0;
  BOOL v159 = 0;
  int v158 = 0;
  uint64_t v157 = 0;
  if (gInstance != a1) {
    __assert_rtn("processTransmit", "netif.cpp", 1147, "gInstance == aInstance");
  }
  ssize_t v160 = read(sTunFd, v166, 0x504uLL);
  if (v160 > 0)
  {
    if (v160 >= 4 && !v166[0] && !v166[1])
    {
      v160 -= 4;
      uint64_t v157 = 4;
    }
    v156[0] = otThreadGetDeviceRole(v162) != 0;
    v156[1] = 0;
    unsigned int v161 = otIp6NewMessage(v162, (uint64_t)v156);
    if (v161)
    {
      int v158 = otMessageAppend((uint64_t)v161, &v166[v157], v160);
      if (v158)
      {
        otLogWarnPlat("[netif] Could not append packet to message", v8, v9, v10, v11, v12, v13, v14, v37);
        otDumpDebgPlat((ot *)"", (uint64_t)&v166[v157], v160);
      }
      else
      {
        otMessageSetTimestamp((uint64_t)v161);
        memset(__b, 0, sizeof(__b));
        otMessageGetBufferInfo(v162, (uint64_t)v131);
        bzero(v164, 0x400uLL);
        if (otMessageGetIsBufferStatsEnabled(gInstance)) {
          otMessageGetBufferIDs((uint64_t)v161, v164);
        }
        unsigned __int16 v128 = v163;
        int v129 = 0;
        memset(v163, 0, sizeof(v163));
        char v130 = otMessageGetMatterHeader(gInstance, (uint64_t)v161, v163) & 1;
        if (otIp6GetSourceDestinationAddressandPort(v162, (uint64_t)v161, __b))
        {
          BOOL v159 = (v166[v157] & 0xF0) == 64;
          otLogWarnPlat("[netif] Could not extract IP and port information isIPv4Packet=%d", v15, v16, v17, v18, v19, v20, v21, v159);
          otDumpDebgPlat((ot *)"", (uint64_t)&v166[v157], v160);
          ssize_t v100 = v160;
          unsigned int v101 = v161;
          TotalBufferint Count = otMessageGetTotalBufferCount(v162);
          FreeBufferint Count = otMessageGetFreeBufferCount(v162);
          unsigned int v104 = v138;
          unsigned int v105 = v139;
          uint64_t v106 = v140;
          unsigned int v107 = v132;
          unsigned int v108 = v133;
          uint64_t v109 = v134;
          unsigned int v110 = v135;
          unsigned int v111 = v136;
          uint64_t v112 = v137;
          unsigned int v113 = v144;
          unsigned int v114 = v145;
          uint64_t v115 = v146;
          unsigned int v116 = v147;
          unsigned int v117 = v148;
          uint64_t v118 = v149;
          unsigned int v119 = v150;
          unsigned int v120 = v151;
          uint64_t v121 = v152;
          unsigned int v122 = v141;
          unsigned int v123 = v142;
          uint64_t v124 = v143;
          unsigned int v125 = v153;
          unsigned int v126 = v154;
          uint64_t v127 = v155;
          if (v130) {
            uint64_t v99 = v163;
          }
          else {
            uint64_t v99 = "";
          }
          unsigned int v98 = &v37;
          uint64_t v38 = (char *)v101;
          uint64_t v39 = v164;
          unint64_t v40 = (unsigned __int16)TotalBufferCount;
          uint64_t v41 = (unsigned __int16)FreeBufferCount;
          uint64_t v42 = v104;
          uint64_t v43 = v105;
          uint64_t v44 = v106;
          uint64_t v45 = v107;
          uint64_t v46 = v108;
          uint64_t v47 = v109;
          uint64_t v48 = v110;
          uint64_t v49 = v111;
          uint64_t v50 = v112;
          uint64_t v51 = v113;
          uint64_t v52 = v114;
          uint64_t v53 = v115;
          uint64_t v54 = v116;
          uint64_t v55 = v117;
          uint64_t v56 = v118;
          uint64_t v57 = v119;
          uint64_t v58 = v120;
          uint64_t v59 = v121;
          uint64_t v60 = v122;
          uint64_t v61 = v123;
          uint64_t v62 = v124;
          uint64_t v63 = v125;
          uint64_t v64 = v126;
          uint64_t v65 = v127;
          unsigned int v66 = v99;
          otLogInfoPlat("[netif] Packet to NCP (%hu bytes) ,buffer = %p%s, bufs:[tot:%d, free:%d], Ip6:[msgs:%u, bufs:%u, totbytes:%u] 6LoSend:[%u, %u, %u] 6LoReas:[%u, %u, %u] mle:[%u, %u, %u,], coap:[%u, %u, %u], coapSec:[%u, %u, %u], mpl:[%u %u %u], applCoap:[%u, %u, %u]%s", v119, v117, v117, v116, v114, v114, v113, v100);
        }
        else
        {
          ssize_t v70 = v160;
          uint64_t v71 = v161;
          int v72 = otMessageGetTotalBufferCount(v162);
          int v73 = otMessageGetFreeBufferCount(v162);
          unsigned int v74 = v138;
          unsigned int v75 = v139;
          uint64_t v76 = v140;
          unsigned int v77 = v132;
          unsigned int v78 = v133;
          uint64_t v79 = v134;
          unsigned int v80 = v135;
          unsigned int v81 = v136;
          uint64_t v82 = v137;
          unsigned int v83 = v144;
          unsigned int v84 = v145;
          uint64_t v85 = v146;
          unsigned int v86 = v147;
          unsigned int v87 = v148;
          uint64_t v88 = v149;
          unsigned int v89 = v150;
          unsigned int v90 = v151;
          uint64_t v91 = v152;
          unsigned int v92 = v141;
          unsigned int v93 = v142;
          uint64_t v94 = v143;
          unsigned int v95 = v153;
          unsigned int v96 = v154;
          unsigned int v97 = (const char *)v155;
          if (v130) {
            unsigned int v69 = v163;
          }
          else {
            unsigned int v69 = "";
          }
          uint64_t v68 = &v37;
          uint64_t v38 = __b;
          uint64_t v39 = (char *)v71;
          unint64_t v40 = (unint64_t)v164;
          uint64_t v41 = (unsigned __int16)v72;
          uint64_t v42 = (unsigned __int16)v73;
          uint64_t v43 = v74;
          uint64_t v44 = v75;
          uint64_t v45 = v76;
          uint64_t v46 = v77;
          uint64_t v47 = v78;
          uint64_t v48 = v79;
          uint64_t v49 = v80;
          uint64_t v50 = v81;
          uint64_t v51 = v82;
          uint64_t v52 = v83;
          uint64_t v53 = v84;
          uint64_t v54 = v85;
          uint64_t v55 = v86;
          uint64_t v56 = v87;
          uint64_t v57 = v88;
          uint64_t v58 = v89;
          uint64_t v59 = v90;
          uint64_t v60 = v91;
          uint64_t v61 = v92;
          uint64_t v62 = v93;
          uint64_t v63 = v94;
          uint64_t v64 = v95;
          uint64_t v65 = v96;
          unsigned int v66 = v97;
          unsigned int v67 = v69;
          otLogInfoPlat("[netif] Packet to NCP (%hu bytes) ,%s, buffer = %p%s, bufs:[tot:%d, free:%d], Ip6:[msgs:%u, bufs:%u, totbytes:%u] 6LoSend:[%u, %u, %u] 6LoReas:[%u, %u, %u] mle:[%u, %u, %u,], coap:[%u, %u, %u], coapSec:[%u, %u, %u], mpl:[%u %u %u], applCoap:[%u, %u, %u]%s", v89, v87, v87, v86, v84, v84, v83, v70);
        }
        if (v160 > 10 && v166[10] == 58)
        {
          otLogInfoPlat("[netif] *****ICMP packet dump******", v22, v23, v24, v25, v26, v27, v28, v37);
          otDumpInfoPlat((ot *)"", (uint64_t)&v166[v157], v160);
        }
        int v158 = otIp6Send(v162, (uint64_t)v161);
        unsigned int v161 = 0;
      }
    }
    else
    {
      int v158 = 3;
    }
  }
  else
  {
    int v158 = 1;
  }
  if (v161) {
    otMessageFree((uint64_t)v161);
  }
  if (v158)
  {
    if (v158 == 2)
    {
      otLogInfoPlat("[netif] Message dropped by Thread", v1, v2, v3, v4, v5, v6, v7, v37);
    }
    else
    {
      char v29 = otThreadErrorToString(v158);
      otLogWarnPlat("[netif] Failed to transmit, error:%s", v30, v31, v32, v33, v34, v35, v36, v29);
    }
  }
}

void platformNetifProcess(_DWORD *a1, uint64_t a2, _DWORD *a3)
{
  BOOL v11 = &___darwin_check_fd_set_overflow != 0;
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  if (gNetifIndex)
  {
    int v27 = sTunFd;
    uint64_t v26 = v14;
    int v30 = sTunFd;
    char v29 = v14;
    if (v11) {
      int v31 = __darwin_check_fd_set_overflow(v30, v29, 0);
    }
    else {
      int v31 = 1;
    }
    if (v31) {
      int v28 = v26[v27 / 0x20uLL] & (1 << (v27 % 0x20uLL));
    }
    else {
      int v28 = 0;
    }
    if (v28)
    {
      ne_tunnel_close();
      uint64_t v13 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp", 47);
      if (v13) {
        uint64_t v10 = v13 + 1;
      }
      else {
        uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp";
      }
      uint64_t v8 = v10;
      int v9 = 1;
      uint64_t v3 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "platformNetifProcess", v10, 2295, v3);
      handle_daemon_exit();
      exit(v9);
    }
    int v24 = sNetlinkFd;
    uint64_t v23 = v14;
    int v33 = sNetlinkFd;
    uint64_t v32 = v14;
    if (v11) {
      int v34 = __darwin_check_fd_set_overflow(v33, v32, 0);
    }
    else {
      int v34 = 1;
    }
    if (v34) {
      int v25 = v23[v24 / 0x20uLL] & (1 << (v24 % 0x20uLL));
    }
    else {
      int v25 = 0;
    }
    if (v25)
    {
      close(sNetlinkFd);
      uint64_t v12 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp", 47);
      if (v12) {
        uint64_t v7 = v12 + 1;
      }
      else {
        uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp";
      }
      uint64_t v5 = v7;
      int v6 = 1;
      uint64_t v4 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "platformNetifProcess", v7, 2301, v4);
      handle_daemon_exit();
      exit(v6);
    }
    if ((rcpBuffersAvailable & 1) == 1)
    {
      int v21 = sTunFd;
      uint64_t v20 = v16;
      int v36 = sTunFd;
      uint64_t v35 = v16;
      int v37 = v11 ? __darwin_check_fd_set_overflow(v36, v35, 0) : 1;
      if (v37 ? v20[v21 / 0x20uLL] & (1 << (v21 % 0x20uLL)) : 0) {
        processTransmit(gInstance);
      }
    }
    int v18 = sNetlinkFd;
    uint64_t v17 = v16;
    int v39 = sNetlinkFd;
    uint64_t v38 = v16;
    if (v11) {
      int v40 = __darwin_check_fd_set_overflow(v39, v38, 0);
    }
    else {
      int v40 = 1;
    }
    if (v40) {
      int v19 = v17[v18 / 0x20uLL] & (1 << (v18 % 0x20uLL));
    }
    else {
      int v19 = 0;
    }
    if (v19) {
      processNetlinkEvent(gInstance, a2);
    }
  }
}

void processNetlinkEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __chkstk_darwin(a1, a2);
  if (recv(sNetlinkFd, v5, 0x2000uLL, 0) > 0)
  {
    if (v6 == 13 || v6 == 12) {
      goto LABEL_12;
    }
    if (v6 == 14)
    {
      processNetifInfoEvent(v4, (uint64_t)v5);
      return;
    }
    if (v6 == 16 || v6 == 15) {
LABEL_12:
    }
      processNetifAddrEvent(v4, (uint64_t)v5);
  }
}

void SetLinkState(uint64_t a1, char a2)
{
  char v23 = a2 & 1;
  int v22 = 0;
  if (gInstance != a1) {
    __assert_rtn("SetLinkState", "netif.cpp", 633, "gInstance == aInstance");
  }
  if (sIpFd >= 0)
  {
    *(_OWORD *)std::string __dst = 0u;
    long long v25 = 0u;
    strncpy(__dst, &gNetifName, 0x10uLL);
    if (ioctl(sIpFd, 0xC0206911uLL, __dst)) {
      goto LABEL_15;
    }
    BOOL v21 = (v25 & 1) == 1;
    if (v23) {
      int v9 = "up";
    }
    else {
      int v9 = "down";
    }
    uint64_t v10 = " (already done, ignoring)";
    if (((v25 & 1) == 1) != (v23 & 1)) {
      uint64_t v10 = "";
    }
    int v19 = v10;
    otLogNotePlat("[netif] Changing interface state to %s%s.", v2, v3, v4, v5, v6, v7, v8, (char)v9);
    if (v21 != (v23 & 1))
    {
      __int16 v20 = (v23 & 1) != 0 ? v25 | 1 : v25 & 0xFFFE;
      LOWORD(v25) = v20;
      if (ioctl(sIpFd, 0x80206910uLL, __dst, v19))
      {
LABEL_15:
        perror("ioctl");
        int v22 = 1;
      }
    }
  }
  if (v22)
  {
    char v11 = otThreadErrorToString(v22);
    otLogWarnPlat("[netif] Failed to update state %s", v12, v13, v14, v15, v16, v17, v18, v11);
  }
}

void UpdateMulticast(uint64_t a1, void *a2, char a3)
{
  uint64_t v57 = a1;
  uint64_t v56 = a2;
  char v55 = a3 & 1;
  int v52 = 0;
  if (gInstance != a1) {
    __assert_rtn("UpdateMulticast", "netif.cpp", 571, "gInstance == aInstance");
  }
  if (sIpFd >= 0)
  {
    long long v53 = *(_OWORD *)v56;
    int v54 = gNetifIndex;
    if (v55) {
      int v3 = 12;
    }
    else {
      int v3 = 13;
    }
    int v51 = setsockopt(sIpFd, 41, v3, &v53, 0x14u);
    if ((v55 & 1) == 1)
    {
      ot::Posix::Ip6Utils::Ip6AddressString::Ip6AddressString((ot::Posix::Ip6Utils::Ip6AddressString *)v61, v56);
      ot::Posix::Ip6Utils::Ip6AddressString::AsCString((ot::Posix::Ip6Utils::Ip6AddressString *)v61);
      char v49 = v4;
      __error();
      otLogInfoPlat("[netif] Adding multicast address %s, gNetifIndex = %d, err = %d, errno = %d, EINVAL = %d, EADDRNOTAVAIL = %d", v5, v6, v7, v8, v9, v10, v11, v49);
    }
    else
    {
      ot::Posix::Ip6Utils::Ip6AddressString::Ip6AddressString((ot::Posix::Ip6Utils::Ip6AddressString *)v60, v56);
      ot::Posix::Ip6Utils::Ip6AddressString::AsCString((ot::Posix::Ip6Utils::Ip6AddressString *)v60);
      char v48 = v12;
      __error();
      otLogInfoPlat("[netif] Removing multicast address %s, gNetifIndex = %d, err = %d, errno = %d, EINVAL = %d, EADDRNOTAVAIL = %d", v13, v14, v15, v16, v17, v18, v19, v48);
    }
    if (v51 && (*__error() == 22 || *__error() == 49))
    {
      inet_ntop(30, &v53, v59, 0x2Fu);
      int v27 = "IPV6_LEAVE_GROUP";
      if (v55) {
        int v27 = "IPV6_JOIN_GROUP";
      }
      otLogWarnPlat("[netif] Ignoring %s failure (EINVAL) for MC LINKLOCAL address (%s)", v20, v21, v22, v23, v24, v25, v26, (char)v27);
      int v51 = 0;
    }
    if (v51)
    {
      int v28 = "IPV6_JOIN_GROUP";
      if ((v55 & 1) == 0) {
        int v28 = "IPV6_LEAVE_GROUP";
      }
      char v47 = (char)v28;
      __error();
      otLogWarnPlat("[netif] %s failure (%d)", v29, v30, v31, v32, v33, v34, v35, v47);
      int v52 = 1;
    }
    else
    {
      int v36 = "Added";
      if ((v55 & 1) == 0) {
        int v36 = "Removed";
      }
      char v46 = (char)v36;
      ot::Posix::Ip6Utils::Ip6AddressString::Ip6AddressString((ot::Posix::Ip6Utils::Ip6AddressString *)v58, v56);
      ot::Posix::Ip6Utils::Ip6AddressString::AsCString((ot::Posix::Ip6Utils::Ip6AddressString *)v58);
      otLogInfoPlat("[netif] %s multicast address %s", v37, v38, v39, v40, v41, v42, v43, v46);
    }
  }
  if (v52)
  {
    uint64_t v50 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp", 47);
    if (v50) {
      uint64_t v45 = v50 + 1;
    }
    else {
      uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/netif.cpp";
    }
    uint64_t v44 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "UpdateMulticast", v45, 622, v44);
    handle_daemon_exit();
    exit(1);
  }
}

void UpdateUnicast(uint64_t a1, uint64_t a2, char a3)
{
  if (gInstance != a1) {
    __assert_rtn("UpdateUnicast", "netif.cpp", 496, "gInstance == aInstance");
  }
  if (a3)
  {
    ne_tunnel_add_address(*(void **)a2, *(unsigned __int8 *)(a2 + 8), (*(unsigned char *)(a2 + 9) & 0x10) != 0);
    ot::Posix::Ip6Utils::Ip6AddressString::Ip6AddressString((ot::Posix::Ip6Utils::Ip6AddressString *)v19, *(const void **)a2);
    ot::Posix::Ip6Utils::Ip6AddressString::AsCString((ot::Posix::Ip6Utils::Ip6AddressString *)v19);
    otLogInfoPlat("[ne_tunnel] %s %s/%u preferred:%d", v3, v4, v5, v6, v7, v8, v9, (char)"Added");
  }
  else
  {
    ne_tunnel_remove_address(*(void **)a2);
    ot::Posix::Ip6Utils::Ip6AddressString::Ip6AddressString((ot::Posix::Ip6Utils::Ip6AddressString *)v18, *(const void **)a2);
    ot::Posix::Ip6Utils::Ip6AddressString::AsCString((ot::Posix::Ip6Utils::Ip6AddressString *)v18);
    otLogInfoPlat("[ne_tunnel] %s %s/%u", v10, v11, v12, v13, v14, v15, v16, (char)"Removed");
  }
}

ot::Posix::Ip6Utils::Ip6AddressString *ot::Posix::Ip6Utils::Ip6AddressString::Ip6AddressString(ot::Posix::Ip6Utils::Ip6AddressString *this, const void *a2)
{
  return this;
}

{
  char *v2;
  const char *v4;
  int v5;
  const char *v6;
  ot::Posix::Ip6Utils::Ip6AddressString *v7;
  char *v8;
  const void *v9;
  ot::Posix::Ip6Utils::Ip6AddressString *v10;

  uint64_t v10 = this;
  uint64_t v9 = a2;
  uint64_t v7 = this;
  if (!inet_ntop(30, a2, (char *)this, 0x2Eu))
  {
    uint64_t v8 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/ip6_utils.hpp", 47);
    if (v8) {
      uint64_t v6 = v8 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/ip6_utils.hpp";
    }
    uint64_t v4 = v6;
    uint64_t v5 = 5;
    uint64_t v2 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "Ip6AddressString", v6, 53, v2);
    handle_daemon_exit();
    exit(v5);
  }
  return v7;
}

void processNetifAddrEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v25 = a2;
  int v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  int v18 = 0;
  unsigned int i = 0;
  uint64_t v16 = 0;
  char v15 = 0;
  BYTE1(v21[0]) = 0;
  v20.sin6_family = 0;
  if ((otIp6IsEnabled(a1) & 1) == 0 && (*(unsigned char *)(v25 + 3) == 12 || *(unsigned char *)(v25 + 3) == 15))
  {
    otLogWarnPlat("[netif] add new address not handled as interface is disabled", v2, v3, v4, v5, v6, v7, v8, v9);
    int v24 = 0;
    return;
  }
  if (*(unsigned char *)(v25 + 3) == 12 || *(unsigned char *)(v25 + 3) == 13)
  {
    uint64_t v23 = v25;
    if (*(unsigned __int16 *)(v25 + 12) != gNetifIndex) {
      return;
    }
    uint64_t v19 = v23 + 20;
    int v18 = *(_DWORD *)(v23 + 4);
  }
  else if (*(unsigned char *)(v25 + 3) == 15 || *(unsigned char *)(v25 + 3) == 16)
  {
    uint64_t v22 = v25;
    if (*(unsigned __int16 *)(v25 + 12) != gNetifIndex) {
      return;
    }
    uint64_t v19 = v22 + 16;
    int v18 = *(_DWORD *)(v22 + 4);
  }
  if (v18)
  {
    for (unsigned int i = 0; i < 8; ++i)
    {
      if (v18 & (1 << i))
      {
        uint64_t v16 = (_OWORD *)v19;
        if (*(unsigned char *)(v19 + 1) == 30)
        {
          if (i == 5)
          {
            v21[0] = *v16;
            *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)((char *)v16 + 12);
          }
          if (i == 2)
          {
            *(_OWORD *)&v20.sin6_len = *v16;
            *(in6_addr *)((char *)&v20.sin6_addr + 4) = *(in6_addr *)((char *)v16 + 12);
          }
        }
        if (*(unsigned char *)v16) {
          uint64_t v10 = ((*(unsigned __int8 *)v16 - 1) | 3) + 1;
        }
        else {
          uint64_t v10 = 4;
        }
        v19 += v10;
      }
    }
  }
  if (BYTE1(v21[0]) == 30)
  {
    char v15 = 0;
    if (BYTE8(v21[0]) == 254 && (BYTE9(v21[0]) & 0xC0) == 0x80)
    {
      char v15 = 1;
      BYTE11(v21[0]) = 0;
    }
    else if (BYTE8(v21[0]) == 255 && (BYTE9(v21[0]) & 0xF0) != 0x30 && (BYTE9(v21[0]) & 0xF) == 2)
    {
      BYTE11(v21[0]) = 0;
    }
    long long v13 = *(_OWORD *)((char *)v21 + 8);
    if (*(unsigned char *)(v25 + 3) == 12 || *(unsigned char *)(v25 + 3) == 15)
    {
      if (ot::Ip6::Address::IsMulticast((ot::Ip6::Address *)&v13))
      {
        int v24 = otIp6SubscribeMulticastAddress(v26, (uint64_t)&v13);
        logAddrEvent(1, (ot::Ip6::Address *)&v13, v24);
        if (v24 == 24 || v24 == 37) {
          int v24 = 0;
        }
      }
      else
      {
        long long v11 = v13;
        unsigned __int8 v12 = NetmaskToPrefixLength(&v20);
        UnicastAddressIsSubscribed(v26, &v11);
        logAddrEvent(1, (ot::Ip6::Address *)&v13, 24);
        int v24 = 0;
      }
    }
    else if (*(unsigned char *)(v25 + 3) == 13 || *(unsigned char *)(v25 + 3) == 16)
    {
      if (ot::Ip6::Address::IsMulticast((ot::Ip6::Address *)&v13))
      {
        int v24 = otIp6UnsubscribeMulticastAddress(v26, (uint64_t)&v13);
        logAddrEvent(0, (ot::Ip6::Address *)&v13, v24);
      }
      else
      {
        int v24 = otIp6RemoveUnicastAddress(v26, (uint64_t)&v13);
        logAddrEvent(0, (ot::Ip6::Address *)&v13, v24);
        if (v24 == 23) {
          int v24 = 0;
        }
      }
    }
  }
}

void processNetifInfoEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 12) == gNetifIndex) {
    UpdateLink(a1);
  }
}

BOOL ot::Ip6::Address::IsMulticast(ot::Ip6::Address *this)
{
  return *(unsigned __int8 *)this == 255;
}

{
  return ot::Ip6::Address::IsMulticast(this);
}

uint64_t NetmaskToPrefixLength(const sockaddr_in6 *a1)
{
  return otIp6PrefixMatch((uint64_t)&a1->sin6_addr, (uint64_t)&allOnes);
}

uint64_t UnicastAddressIsSubscribed(uint64_t a1, const void *a2)
{
  for (std::string __s1 = (void *)otIp6GetUnicastAddresses(a1); __s1; std::string __s1 = (void *)__s1[3])
  {
    if (!memcmp(__s1, a2, 0x10uLL))
    {
      char v5 = 1;
      return v5 & 1;
    }
  }
  char v5 = 0;
  return v5 & 1;
}

void logAddrEvent(char a1, ot::Ip6::Address *a2, int a3)
{
  if (!a3 || (a1 & 1) != 0 && (a3 == 24 || a3 == 37) || (a1 & 1) == 0 && (a3 == 23 || a3 == 37))
  {
    if (a1) {
      int v18 = "ADD";
    }
    else {
      int v18 = "DEL";
    }
    ot::Ip6::Address::IsMulticast(a2);
    ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v22);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v22);
    otLogInfoPlat("[netif] %s [%s] %s%s", v3, v4, v5, v6, v7, v8, v9, (char)v18);
  }
  else
  {
    if (a1) {
      uint64_t v17 = "ADD";
    }
    else {
      uint64_t v17 = "DEL";
    }
    ot::Ip6::Address::IsMulticast(a2);
    ot::Ip6::Address::ToString(a2, (ot::StringWriter *)v21);
    ot::String<(unsigned short)40>::AsCString((uint64_t)v21);
    otThreadErrorToString(a3);
    otLogWarnPlat("[netif] %s [%s] %s failed (%s)", v10, v11, v12, v13, v14, v15, v16, (char)v17);
  }
}

double InitNetaskWithPrefixLength(in6_addr *a1, unsigned __int8 a2)
{
  uint64_t v5 = a1;
  unsigned __int8 v4 = a2;
  if (a2 > 0x80u) {
    unsigned __int8 v4 = 0x80;
  }
  ot::Clearable<ot::Ip6::Address>::Clear(&v3);
  ot::Ip6::Address::SetPrefix((ot::Ip6::Address *)&v3, allOnes, v4);
  double result = *(double *)v3.__u6_addr8;
  in6_addr *v5 = v3;
  return result;
}

void *ot::Clearable<ot::Ip6::Address>::Clear(void *result)
{
  *double result = 0;
  result[1] = 0;
  return result;
}

{
  return ot::Clearable<ot::Ip6::Address>::Clear(result);
}

void *ot::Ip6::Address::SetPrefix(ot::Ip6::Address *this, unsigned __int8 *a2, unsigned __int8 a3)
{
  return ot::Ip6::Address::CopyBits(this, a2, (const unsigned __int8 *)a3);
}

{
  return ot::Ip6::Address::SetPrefix(this, a2, a3);
}

uint64_t ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::~RadioSpinel(uint64_t a1)
{
  return a1;
}

{
  ot::Posix::HdlcInterface::~HdlcInterface((ot::Posix::HdlcInterface *)(a1 + 8448));
  return a1;
}

ot::Posix::PowerUpdater *ot::Posix::PowerUpdater::PowerUpdater(ot::Posix::PowerUpdater *this)
{
  return this;
}

{
  ot::Posix::PowerUpdater *result;

  *(void *)this = "src/posix/platform/openthread.conf.example";
  *((void *)this + 1) = "src/posix/platform/openthread.conf.example";
  *((void *)this + 2) = "calibrated_power";
  *((void *)this + 3) = "target_power";
  *((void *)this + 4) = "region_domain_mapping";
  *((void *)this + 5) = ",";
  ot::Posix::ConfigFile::ConfigFile((ot::Posix::PowerUpdater *)((char *)this + 48), *(const char **)this);
  ot::Posix::ConfigFile::ConfigFile((ot::Posix::PowerUpdater *)((char *)this + 72), *((const char **)this + 1));
  double result = this;
  *((_WORD *)this + 48) = 0;
  return result;
}

void getBandEdgeInfo(void)
{
  memset(__b, 0, sizeof(__b));
  getFilePathFromDirectory(__b, "/usr/share/firmware/wpan/", ".txcb", 0xC8u);
  configReadBandEdgePowerTable(__b);
}

void configReadBandEdgePowerTable(const char *a1)
{
  unsigned __int8 v20 = 0;
  unsigned __int8 v19 = -1;
  memset(__b, 0, sizeof(__b));
  memset(radioBackOffPower, 0, sizeof(radioBackOffPower));
  if (!a1) {
    __assert_rtn("configReadBandEdgePowerTable", "radio.cpp", 406, "fileName != NULL");
  }
  __stream = fopen(a1, "rb");
  if (__stream)
  {
    int64_t v22 = fread(__b, 1uLL, 0x32uLL, __stream);
    if (v22 && !ferror(__stream))
    {
      __b[v22] = 0;
      while (v20 < v22)
      {
        if (__b[v20] == 126)
        {
          ++v20;
          ++v19;
        }
        else
        {
          radioBackOffPower[13 * v19] = __b[v20];
          unsigned __int8 v21 = v20 + 1;
          uint64_t v15 = &radioBackOffPower[13 * v19];
          uint64_t v16 = &__b[v21];
          *(_DWORD *)(v15 + 1) = *(_DWORD *)v16;
          *(_WORD *)(v15 + 5) = *((_WORD *)v16 + 2);
          v21 += 6;
          uint64_t v17 = &__b[v21];
          *(_DWORD *)(v15 + 7) = *(_DWORD *)v17;
          *(_WORD *)(v15 + 11) = *((_WORD *)v17 + 2);
          unsigned __int8 v20 = v21 + 6;
        }
      }
    }
    else
    {
      otLogWarnPlat("%s(): %s read error\n", v8, v9, v10, v11, v12, v13, v14, (char)"configReadBandEdgePowerTable");
    }
    fclose(__stream);
  }
  else
  {
    otLogWarnPlat("%s(): %s does not exist\n", v1, v2, v3, v4, v5, v6, v7, (char)"configReadBandEdgePowerTable");
  }
}

uint64_t ot::Spinel::parse_string_into_data(ot::Spinel *this, unsigned __int8 *a2, char *a3, const char *a4)
{
  uint64_t v16 = this;
  unsigned int v13 = 0;
  if (!this) {
    a2 = 0;
  }
  while (1)
  {
    BOOL v10 = 0;
    if (*a3) {
      BOOL v10 = a2 != 0;
    }
    if (!v10) {
      break;
    }
    uint64_t v4 = a3++;
    int _c = tolower(*v4);
    if (isdigit(_c) || _c >= 97 && _c <= 102)
    {
      if (isdigit(_c)) {
        char v9 = _c - 48;
      }
      else {
        char v9 = _c - 87;
      }
      if (a2)
      {
        *(unsigned char *)uint64_t v16 = 16 * v9;
        --a2;
      }
      ++v13;
      if (!*a3) {
        return v13;
      }
      uint64_t v5 = a3++;
      int _ca = tolower(*v5);
      if (isdigit(_ca) || _ca >= 97 && _ca <= 102)
      {
        if (isdigit(_ca)) {
          char v8 = _ca - 48;
        }
        else {
          char v8 = _ca - 87;
        }
        uint64_t v6 = v16;
        uint64_t v16 = (ot::Spinel *)((char *)v16 + 1);
        *(unsigned char *)v6 |= v8;
      }
    }
  }
  return v13;
}

int tolower(int _c)
{
  return __tolower(_c);
}

{
  return tolower(_c);
}

int isdigit(int _c)
{
  return __isctype(_c, 0x400uLL);
}

{
  return isdigit(_c);
}

uint64_t ot::Spinel::encode_data_into_string(ot::Spinel *this, const unsigned __int8 *a2, unsigned char *a3, char *a4, int a5)
{
  for (unsigned int i = 0; ; i += 2)
  {
    BOOL v11 = 0;
    if (a2) {
      BOOL v11 = (unint64_t)a4 > 2;
    }
    if (!v11) {
      break;
    }
    uint64_t v5 = this;
    this = (ot::Spinel *)((char *)this + 1);
    char v12 = *(unsigned char *)v5;
    --a2;
    --a5;
    *a3 = ot::Spinel::int_to_hex_digit((ot::Spinel *)((int)*(unsigned __int8 *)v5 >> 4));
    char v6 = ot::Spinel::int_to_hex_digit((ot::Spinel *)(v12 & 0xF));
    uint64_t v7 = a3 + 1;
    a3 += 2;
    unsigned char *v7 = v6;
    a4 -= 2;
  }
  while (1)
  {
    BOOL v10 = 0;
    if (a5 > 0) {
      BOOL v10 = (unint64_t)a4 > 2;
    }
    if (!v10) {
      break;
    }
    --a5;
    *a3 = 48;
    char v8 = a3 + 1;
    a3 += 2;
    *char v8 = 48;
    a4 -= 2;
    i += 2;
  }
  *a3 = 0;
  return i;
}

uint64_t ot::Spinel::int_to_hex_digit(ot::Spinel *this)
{
  return a0123456789abcd_0[this & 0xF];
}

uint64_t ot::Spinel::too_many_grants_denied(ot::Spinel *this)
{
  char v12 = 0;
  gettimeofday(&v11, &v10);
  if (dword_1004BC378 && v11.tv_sec >= mTxNotGrantedTracker && v11.tv_sec < mTxNotGrantedTracker + 3600)
  {
    if (++dword_1004BC378 > 100)
    {
      char v12 = 1;
      dword_1004BC378 = 0;
      mTxNotGrantedTracker = v11.tv_sec;
      otLogWarnPlat("Too many grants denied", v1, v2, v3, v4, v5, v6, v7, v9);
    }
  }
  else
  {
    dword_1004BC378 = 1;
    mTxNotGrantedTracker = v11.tv_sec;
  }
  otLogDebgPlat("numOccurances=%d, NCP-Tx-Grant-Denied-Time-Sec=%llu, Curr-Time-Sec=%ld", v1, v2, v3, v4, v5, v6, v7, dword_1004BC378);
  return v12 & 1;
}

unsigned char *platformRadioInit(const char *a1)
{
}

ot::Posix::Radio *ot::Posix::Radio::Radio(ot::Posix::Radio *this, const char *a2)
{
  return this;
}

unsigned char *ot::Posix::Radio::Init(ot::Posix::Radio *this)
{
  BOOL v107 = ot::Url::Url::GetValue(this, "no-reset", 0) == 0;
  BOOL v106 = ot::Url::Url::GetValue(this, "ncp-dataset", 0) != 0;
  BOOL v105 = ot::Url::Url::GetValue(this, "skip-rcp-compatibility-check", 0) != 0;
  getBandEdgeInfo();
  uint64_t SpinelInterface = (ot::Posix::HdlcInterface *)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetSpinelInterface((uint64_t)&sRadioSpinel);
  if (ot::Posix::HdlcInterface::Init(SpinelInterface, this))
  {
    unsigned int v101 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v101) {
      uint64_t v88 = v101 + 1;
    }
    else {
      uint64_t v88 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    uint64_t v6 = (ot::Posix::HdlcInterface *)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetSpinelInterface((uint64_t)&sRadioSpinel);
    if (ot::Posix::HdlcInterface::Init(v6, this) == 7) {
      unsigned __int8 v7 = 2;
    }
    else {
      unsigned __int8 v7 = 1;
    }
    char v8 = otExitCodeToString(v7);
    otLogCritPlat("%s() at %s:%d: %s", "Init", v88, 288, v8);
    handle_daemon_exit();
    char v9 = (ot::Posix::HdlcInterface *)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetSpinelInterface((uint64_t)&sRadioSpinel);
    if (ot::Posix::HdlcInterface::Init(v9, this) == 7) {
      int v10 = 2;
    }
    else {
      int v10 = 1;
    }
    exit(v10);
  }
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Init((uint64_t)&sRadioSpinel, v107, v106, v105, v2, v3, v4, v5);
  CFNumberRef Value = ot::Url::Url::GetValue(this, "fem-lnagain", 0);
  if (Value)
  {
    uint64_t v100 = strtol(Value, 0, 0);
    if (v100 < -128 || v100 > 127)
    {
      uint64_t v99 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
      if (v99) {
        unsigned int v87 = v99 + 1;
      }
      else {
        unsigned int v87 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
      }
      uint64_t v17 = otExitCodeToString(2u);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v87, 296, v17);
      handle_daemon_exit();
      exit(2);
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFemLnaGain((uint64_t)&sRadioSpinel, v100, v11, v12, v13, v14, v15, v16))
    {
      unsigned int v98 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
      if (v98) {
        unsigned int v86 = v98 + 1;
      }
      else {
        unsigned int v86 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
      }
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFemLnaGain((uint64_t)&sRadioSpinel, v100, v18, v19, v20, v21, v22, v23) == 7)unsigned __int8 v24 = 2; {
      else
      }
        unsigned __int8 v24 = 1;
      uint64_t v25 = otExitCodeToString(v24);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v86, 297, v25);
      handle_daemon_exit();
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFemLnaGain((uint64_t)&sRadioSpinel, v100, v26, v27, v28, v29, v30, v31) == 7)int v32 = 2; {
      else
      }
        int v32 = 1;
      exit(v32);
    }
  }
  unsigned int v104 = ot::Url::Url::GetValue(this, "cca-threshold", 0);
  if (v104)
  {
    uint64_t v97 = strtol(v104, 0, 0);
    if (v97 < -128 || v97 > 127)
    {
      unsigned int v96 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
      if (v96) {
        uint64_t v85 = v96 + 1;
      }
      else {
        uint64_t v85 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
      }
      uint64_t v39 = otExitCodeToString(2u);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v85, 305, v39);
      handle_daemon_exit();
      exit(2);
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCcaEnergyDetectThreshold((uint64_t)&sRadioSpinel, v97, v33, v34, v35, v36, v37, v38))
    {
      unsigned int v95 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
      if (v95) {
        unsigned int v84 = v95 + 1;
      }
      else {
        unsigned int v84 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
      }
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCcaEnergyDetectThreshold((uint64_t)&sRadioSpinel, v97, v40, v41, v42, v43, v44, v45) == 7)unsigned __int8 v46 = 2; {
      else
      }
        unsigned __int8 v46 = 1;
      char v47 = otExitCodeToString(v46);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v84, 306, v47);
      handle_daemon_exit();
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCcaEnergyDetectThreshold((uint64_t)&sRadioSpinel, v97, v48, v49, v50, v51, v52, v53) == 7)int v54 = 2; {
      else
      }
        int v54 = 1;
      exit(v54);
    }
  }
  uint64_t v102 = ot::Url::Url::GetValue(this, "region", 0);
  if (v102)
  {
    if (strnlen(v102, 3uLL) != 2)
    {
      unsigned int v93 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
      if (v93) {
        unsigned int v83 = v93 + 1;
      }
      else {
        unsigned int v83 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
      }
      char v55 = otExitCodeToString(2u);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v83, 314, v55);
      handle_daemon_exit();
      exit(2);
    }
    __int16 v94 = v102[1] + (*v102 << 8);
    if (otPlatRadioSetRegion(gInstance, v94))
    {
      unsigned int v92 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
      if (v92) {
        uint64_t v82 = v92 + 1;
      }
      else {
        uint64_t v82 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
      }
      if (otPlatRadioSetRegion(gInstance, v94) == 7) {
        unsigned __int8 v56 = 2;
      }
      else {
        unsigned __int8 v56 = 1;
      }
      uint64_t v57 = otExitCodeToString(v56);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v82, 316, v57);
      handle_daemon_exit();
      if (otPlatRadioSetRegion(gInstance, v94) == 7) {
        int v58 = 2;
      }
      else {
        int v58 = 1;
      }
      exit(v58);
    }
  }
  double result = ot::Url::Url::GetValue(this, "enable-coex", 0);
  uint64_t v91 = result;
  if (result)
  {
    double result = (unsigned char *)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCoexEnabled((uint64_t)&sRadioSpinel, *result != 48, v60, v61, v62, v63, v64, v65);
    if (result)
    {
      unsigned int v90 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
      if (v90) {
        unsigned int v81 = v90 + 1;
      }
      else {
        unsigned int v81 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
      }
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCoexEnabled((uint64_t)&sRadioSpinel, *v91 != 48, v66, v67, v68, v69, v70, v71) == 7)unsigned __int8 v72 = 2; {
      else
      }
        unsigned __int8 v72 = 1;
      int v73 = otExitCodeToString(v72);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v81, 370, v73);
      handle_daemon_exit();
      if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCoexEnabled((uint64_t)&sRadioSpinel, *v91 != 48, v74, v75, v76, v77, v78, v79) == 7)int v80 = 2; {
      else
      }
        int v80 = 1;
      exit(v80);
    }
  }
  return result;
}

ot::Url::Url *ot::Posix::Radio::Radio(ot::Posix::Radio *this, const char *a2)
{
  int v10 = this;
  char v9 = a2;
  unsigned __int8 v7 = this;
  ot::Posix::RadioUrl::RadioUrl(this, a2);
  if (!ot::Url::Url::GetPath(v7))
  {
    char v8 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v8) {
      uint64_t v6 = v8 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    uint64_t v4 = v6;
    int v5 = 2;
    uint64_t v2 = otExitCodeToString(2u);
    otLogCritPlat("%s() at %s:%d: %s", "Radio", v6, 254, v2);
    handle_daemon_exit();
    exit(v5);
  }
  return v7;
}

uint64_t otPlatRadioSetRegion(uint64_t a1, __int16 a2)
{
  return ot::Posix::PowerUpdater::SetRegion((const char **)&sPowerUpdater, a2);
}

void *ot::Posix::Radio::GetSpinelInstance(ot::Posix::Radio *this)
{
  return &sRadioSpinel;
}

uint64_t platformRadioDeinit()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Deinit((uint64_t)&sRadioSpinel);
}

uint64_t currentChannelRegionInPowerBackOffTable(signed __int8 *a1)
{
  unsigned __int8 Channel = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetChannel((uint64_t)&sRadioSpinel);
  if (sCurrentRegion < 6u)
  {
    for (unsigned __int8 i = 0; i < 0x10uLL; ++i)
    {
      if (radioBackOffPower[13 * i] == Channel
        && radioBackOffPower[13 * i + 1 + sCurrentRegion] == sCurrentRegion
        && radioBackOffPower[13 * i + 7 + sCurrentRegion] != 127)
      {
        *a1 = (char)radioBackOffPower[13 * i + 7 + sCurrentRegion] / 4;
        otLogWarnPlat("Get BackOff power = %d, int channel = [%d],region = [%d]", v1, v2, v3, v4, v5, v6, v7, *a1);
        char v12 = 1;
        return v12 & 1;
      }
    }
    char v12 = 0;
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t otPlatRadioGetIeeeEui64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetIeeeEui64((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v25 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v25) {
      unsigned __int8 v24 = v25 + 1;
    }
    else {
      unsigned __int8 v24 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetIeeeEui64((uint64_t)&sRadioSpinel, a2, v9, v10, v11, v12, v13, v14) == 7)unsigned __int8 v15 = 2; {
    else
    }
      unsigned __int8 v15 = 1;
    uint64_t v16 = otExitCodeToString(v15);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioGetIeeeEui64", v24, 497, v16);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetIeeeEui64((uint64_t)&sRadioSpinel, a2, v17, v18, v19, v20, v21, v22) == 7)int v23 = 2; {
    else
    }
      int v23 = 1;
    exit(v23);
  }
  return result;
}

uint64_t otPlatRadioSetPanId(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPanId((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v25 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v25) {
      unsigned __int8 v24 = v25 + 1;
    }
    else {
      unsigned __int8 v24 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPanId((uint64_t)&sRadioSpinel, a2, v9, v10, v11, v12, v13, v14) == 7)unsigned __int8 v15 = 2; {
    else
    }
      unsigned __int8 v15 = 1;
    uint64_t v16 = otExitCodeToString(v15);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioSetPanId", v24, 503, v16);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPanId((uint64_t)&sRadioSpinel, a2, v17, v18, v19, v20, v21, v22) == 7)int v23 = 2; {
    else
    }
      int v23 = 1;
    exit(v23);
  }
  return result;
}

uint64_t otPlatRadioSetExtendedAddress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v64 = a1;
  uint64_t v63 = a2;
  for (unint64_t i = 0; i < 8; ++i)
    *((unsigned char *)&v65 + i) = *(unsigned char *)(v63 + 7 - i);
  char v8 = *(unsigned char *)v63;
  uint64_t v9 = *(unsigned __int8 *)(v63 + 1);
  uint64_t v10 = *(unsigned __int8 *)(v63 + 2);
  uint64_t v11 = *(unsigned __int8 *)(v63 + 3);
  uint64_t v12 = *(unsigned __int8 *)(v63 + 4);
  uint64_t v13 = *(unsigned __int8 *)(v63 + 5);
  uint64_t v14 = *(unsigned __int8 *)(v63 + 6);
  uint64_t v15 = *(unsigned __int8 *)(v63 + 7);
  uint64_t v59 = &v46;
  uint64_t v47 = v9;
  uint64_t v48 = v10;
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  uint64_t v51 = v13;
  uint64_t v52 = v14;
  uint64_t v53 = v15;
  otLogInfoPlat("otPlatRadioSetExtendedAddress aAddress: 0[%d] 1[%d] 2[%d] 3[%d] 4[%d] 5[%d] 6[%d] 7[%d]", a2, a3, a4, a5, a6, a7, a8, v8);
  uint64_t v60 = &v46;
  uint64_t v47 = BYTE1(v65);
  uint64_t v48 = BYTE2(v65);
  uint64_t v49 = BYTE3(v65);
  uint64_t v50 = BYTE4(v65);
  uint64_t v51 = BYTE5(v65);
  uint64_t v52 = BYTE6(v65);
  uint64_t v53 = HIBYTE(v65);
  otLogInfoPlat("otPlatRadioSetExtendedAddress addr: 0[%d] 1[%d] 2[%d] 3[%d] 4[%d] 5[%d] 6[%d] 7[%d]", v16, v17, v18, v19, v20, v21, v22, v65);
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetExtendedAddress((uint64_t)&sRadioSpinel, &v65, v23, v24, v25, v26, v27, v28);
  if (result)
  {
    uint64_t v61 = 0;
    uint64_t v61 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v61) {
      int v58 = v61 + 1;
    }
    else {
      int v58 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    int v54 = v58;
    char v55 = &sRadioSpinel;
    unsigned __int8 v56 = &v65;
    BOOL v36 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetExtendedAddress((uint64_t)&sRadioSpinel, &v65, v30, v31, v32, v33, v34, v35) == 7;
    int v57 = 2;
    if (v36) {
      unsigned __int8 v37 = 2;
    }
    else {
      unsigned __int8 v37 = 1;
    }
    uint64_t v38 = otExitCodeToString(v37);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioSetExtendedAddress", v54, 523, v38);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetExtendedAddress((uint64_t)v55, v56, v39, v40, v41, v42, v43, v44) == 7)int v45 = v57; {
    else
    }
      int v45 = 1;
    exit(v45);
  }
  return result;
}

uint64_t otPlatRadioSetShortAddress(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetShortAddress((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v25 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v25) {
      uint64_t v24 = v25 + 1;
    }
    else {
      uint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetShortAddress((uint64_t)&sRadioSpinel, a2, v9, v10, v11, v12, v13, v14) == 7)unsigned __int8 v15 = 2; {
    else
    }
      unsigned __int8 v15 = 1;
    uint64_t v16 = otExitCodeToString(v15);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioSetShortAddress", v24, 529, v16);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetShortAddress((uint64_t)&sRadioSpinel, a2, v17, v18, v19, v20, v21, v22) == 7)int v23 = 2; {
    else
    }
      int v23 = 1;
    exit(v23);
  }
  return result;
}

uint64_t otPlatRadioSetPromiscuous(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v26 = a2 & 1;
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuous((uint64_t)&sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v25 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v25) {
      uint64_t v24 = v25 + 1;
    }
    else {
      uint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuous((uint64_t)&sRadioSpinel, v26 & 1, v9, v10, v11, v12, v13, v14) == 7)unsigned __int8 v15 = 2; {
    else
    }
      unsigned __int8 v15 = 1;
    uint64_t v16 = otExitCodeToString(v15);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioSetPromiscuous", v24, 535, v16);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuous((uint64_t)&sRadioSpinel, v26 & 1, v17, v18, v19, v20, v21, v22) == 7)int v23 = 2; {
    else
    }
      int v23 = 1;
    exit(v23);
  }
  return result;
}

BOOL otPlatRadioIsEnabled()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsEnabled((uint64_t)sRadioSpinel);
}

uint64_t otPlatRadioEnable(uint64_t a1)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Enable((uint64_t)&sRadioSpinel, a1);
}

uint64_t otPlatRadioDisable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Disable((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

void otPlatClearPendingTransmission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t otPlatRadioSleep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Sleep((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioReceive(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Receive((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioTransmit(uint64_t a1, uint64_t a2)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Transmit((uint64_t)&sRadioSpinel, a2);
}

uint64_t otPlatRadioGetTransmitBuffer()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTransmitFrame((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioGetRssi(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (char)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRssi((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetCaps()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioCaps((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioGetVersionString()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVersion((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioGetPromiscuous()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsPromiscuous((uint64_t)&sRadioSpinel) & 1;
}

BOOL platformRadioUpdateFdSet(fd_set *a1, fd_set *a2, int *a3, timeval *a4)
{
  unint64_t v9 = otPlatTimeGet();
  unint64_t NextRadioTimeRecalcStart = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNextRadioTimeRecalcStart((uint64_t)&sRadioSpinel);
  if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsTransmitting((uint64_t)&sRadioSpinel))
  {
    unint64_t TxRadioEndUs = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTxRadioEndUs((uint64_t)&sRadioSpinel);
    if (TxRadioEndUs < NextRadioTimeRecalcStart) {
      unint64_t NextRadioTimeRecalcStart = TxRadioEndUs;
    }
  }
  if (v9 >= NextRadioTimeRecalcStart)
  {
    a4->__darwin_time_t tv_sec = 0;
    a4->tv_usec = 0;
  }
  else
  {
    unint64_t v6 = NextRadioTimeRecalcStart - v9;
    if (NextRadioTimeRecalcStart - v9 < 1000000 * a4->tv_sec + a4->tv_usec)
    {
      a4->__darwin_time_t tv_sec = v6 / 0xF4240;
      a4->tv_usec = v6 % 0xF4240;
    }
  }
  uint64_t SpinelInterface = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetSpinelInterface((uint64_t)&sRadioSpinel);
  ot::Posix::HdlcInterface::UpdateFdSet(SpinelInterface, a1, a2, a3, a4);
  BOOL result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::HasPendingFrame((uint64_t)&sRadioSpinel);
  if (result
    || (BOOL result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsTransmitDone((uint64_t)&sRadioSpinel)))
  {
    a4->__darwin_time_t tv_sec = 0;
    a4->tv_usec = 0;
  }
  return result;
}

void platformRadioProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[4] = a1;
  v8[3] = a2;
  void v8[2] = a3;
  v8[0] = a2;
  v8[1] = a3;
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Process((uint64_t)&sRadioSpinel, (uint64_t)v8, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioEnableSrcMatch(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v26 = a2 & 1;
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableSrcMatch((uint64_t)&sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v25 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v25) {
      uint64_t v24 = v25 + 1;
    }
    else {
      uint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableSrcMatch((uint64_t)&sRadioSpinel, v26 & 1, v9, v10, v11, v12, v13, v14) == 7)unsigned __int8 v15 = 2; {
    else
    }
      unsigned __int8 v15 = 1;
    uint64_t v16 = otExitCodeToString(v15);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioEnableSrcMatch", v24, 674, v16);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableSrcMatch((uint64_t)&sRadioSpinel, v26 & 1, v17, v18, v19, v20, v21, v22) == 7)int v23 = 2; {
    else
    }
      int v23 = 1;
    exit(v23);
  }
  return result;
}

uint64_t otPlatRadioAddSrcMatchShortEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddSrcMatchShortEntry((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioAddSrcMatchExtEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  for (unint64_t i = 0; i < 8; ++i)
    *((unsigned char *)&v10 + i) = *(unsigned char *)(a2 + 7 - i);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddSrcMatchExtEntry((uint64_t)&sRadioSpinel, &v10, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioClearSrcMatchShortEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntry((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioClearSrcMatchExtEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  for (unint64_t i = 0; i < 8; ++i)
    v10[i] = *(unsigned char *)(a2 + 7 - i);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntry((uint64_t)&sRadioSpinel, v10, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioClearSrcMatchShortEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntries((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v27 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v27) {
      char v26 = v27 + 1;
    }
    else {
      char v26 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntries((uint64_t)&sRadioSpinel, v9, v10, v11, v12, v13, v14, v15) == 7)unsigned __int8 v16 = 2; {
    else
    }
      unsigned __int8 v16 = 1;
    uint64_t v17 = otExitCodeToString(v16);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioClearSrcMatchShortEntries", v26, 718, v17);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchShortEntries((uint64_t)&sRadioSpinel, v18, v19, v20, v21, v22, v23, v24) == 7)int v25 = 2; {
    else
    }
      int v25 = 1;
    exit(v25);
  }
  return result;
}

uint64_t otPlatRadioClearSrcMatchExtEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntries((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v27 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v27) {
      char v26 = v27 + 1;
    }
    else {
      char v26 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntries((uint64_t)&sRadioSpinel, v9, v10, v11, v12, v13, v14, v15) == 7)unsigned __int8 v16 = 2; {
    else
    }
      unsigned __int8 v16 = 1;
    uint64_t v17 = otExitCodeToString(v16);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioClearSrcMatchExtEntries", v26, 724, v17);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearSrcMatchExtEntries((uint64_t)&sRadioSpinel, v18, v19, v20, v21, v22, v23, v24) == 7)int v25 = 2; {
    else
    }
      int v25 = 1;
    exit(v25);
  }
  return result;
}

uint64_t otPlatRadioEnergyScan(uint64_t a1, char a2, __int16 a3)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnergyScan((uint64_t)&sRadioSpinel, a2, a3);
}

uint64_t otPlatRadioGetTransmitPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    __assert_rtn("otPlatRadioGetTransmitPower", "radio.cpp", 736, "aPower != nullptr");
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTransmitPower((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetTransmitPower(uint64_t a1, char a2)
{
  uint64_t v26 = a1;
  char v25 = a2;
  signed __int8 v24 = 0;
  if ((currentChannelRegionInPowerBackOffTable(&v24) & 1) != 0 && v24 <= v25)
  {
    otLogWarnPlat("BandEdge has lower ceiling, set BandEdge Power=[%d]", v2, v3, v4, v5, v6, v7, v8, v24);
    unsigned int v23 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTransmitPower((uint64_t)&sRadioSpinel, v24, v9, v10, v11, v12, v13, v14);
    if (v23)
    {
      otLogWarnPlat("BandEdge Load failure=[%d]", v15, v16, v17, v18, v19, v20, v21, v23);
      ptb_bandedge_captureABC_Failure(3);
    }
    return v23;
  }
  else
  {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetTransmitPower((uint64_t)&sRadioSpinel, v25, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t otPlatRadioGetCcaEnergyDetectThreshold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    __assert_rtn("otPlatRadioGetCcaEnergyDetectThreshold", "radio.cpp", 767, "aThreshold != nullptr");
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCcaEnergyDetectThreshold((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetCcaEnergyDetectThreshold(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCcaEnergyDetectThreshold((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatSetRcpLogLevel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v9 = a2;
    char v8 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    char v8 = 0;
  }
  if ((v8 & 1) == 0)
  {
    switch(v9)
    {
      case 0:
        return 0;
      case 1:
        return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRcpLogLevel((uint64_t)&sRadioSpinel, 2u, a3, a4, a5, a6, a7, a8);
      case 2:
        return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRcpLogLevel((uint64_t)&sRadioSpinel, 4u, a3, a4, a5, a6, a7, a8);
      case 3:
        return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRcpLogLevel((uint64_t)&sRadioSpinel, 5u, a3, a4, a5, a6, a7, a8);
      case 4:
        return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRcpLogLevel((uint64_t)&sRadioSpinel, 6u, a3, a4, a5, a6, a7, a8);
      case 5:
        break;
      default:
        JUMPOUT(0);
    }
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRcpLogLevel((uint64_t)&sRadioSpinel, 7u, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPTB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPTB((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetPTB(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPTB((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetMSFState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMSFState((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPower((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetRssiOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    __assert_rtn("otPlatRadioGetRssiOffset", "radio.cpp", 839, "aOffset != nullptr");
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRssiOffset((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetRssiOffset(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetRssiOffset((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetFemLnaGain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    __assert_rtn("otPlatRadioGetFemLnaGain", "radio.cpp", 853, "aGain != nullptr");
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetFemLnaGain((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetFemLnaGain(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFemLnaGain((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetReceiveSensitivity()
{
  return (char)ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetReceiveSensitivity((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioSetCoexEnabled(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetCoexEnabled((uint64_t)&sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioIsCoexEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsCoexEnabled((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8) & 1;
}

uint64_t otPlatRadioGetCoexMetrics(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCoexMetrics((uint64_t)&sRadioSpinel, a2);
  }
  else {
    return 7;
  }
}

uint64_t otPlatDiagProcess(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  memset(__b, 0, sizeof(__b));
  char __str = __b;
  for (unsigned __int8 i = 0; ; ++i)
  {
    BOOL v10 = 0;
    if (i < (int)a2) {
      BOOL v10 = __str < (char *)&v18;
    }
    if (!v10) {
      break;
    }
    __str += snprintf(__str, (char *)&v18 - __str, "%s ", *(const char **)(a3 + 8 * i));
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)&sRadioSpinel, (uint64_t)__b, a4, a5, v5, v6, v7, v8);
}

uint64_t otPlatDiagModeSet(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10 = a1 & 1;
  if (a1) {
    uint64_t v8 = "start";
  }
  else {
    uint64_t v8 = "stop";
  }
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)v8, 0, 0, a5, a6, a7, a8);
  if (!result) {
    return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetDiagEnabled((uint64_t)sRadioSpinel, v10 & 1);
  }
  return result;
}

uint64_t otPlatDiagModeGet()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::IsDiagEnabled((uint64_t)&sRadioSpinel) & 1;
}

uint64_t otPlatDiagTxPowerSet(char a1)
{
  snprintf(__str, 0x100uLL, "power %d", a1);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v1, v2, v3, v4);
}

uint64_t otPlatDiagChannelSet(unsigned __int8 a1)
{
  snprintf(__str, 0x100uLL, "channel %d", a1);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v1, v2, v3, v4);
}

uint64_t otPlatDiagGpioSet(int a1, char a2)
{
  snprintf(__str, 0x100uLL, "gpio set %d %d", a1, a2 & 1);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v2, v3, v4, v5);
}

uint64_t otPlatDiagGpioGet(int a1, BOOL *a2)
{
  snprintf(__str, 0x100uLL, "gpio get %d", a1);
  unsigned int v8 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, (uint64_t)v10, 500, v2, v3, v4, v5);
  if (!v8)
  {
    uint64_t v7 = strtok(v10, "\r");
    if (v7) {
      *a2 = atoi(v7) != 0;
    }
    else {
      return 1;
    }
  }
  return v8;
}

uint64_t otPlatDiagGpioSetMode(int a1, int a2)
{
  uint64_t v2 = "in";
  if (a2) {
    uint64_t v2 = "out";
  }
  snprintf(__str, 0x100uLL, "gpio mode %d %s", a1, v2);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v3, v4, v5, v6);
}

uint64_t otPlatDiagGpioGetMode(int a1, _DWORD *a2)
{
  snprintf(__str, 0x100uLL, "gpio mode %d", a1);
  unsigned int v8 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, (uint64_t)v10, 500, v2, v3, v4, v5);
  if (!v8)
  {
    std::string __s1 = strtok(v10, "\r");
    if (__s1)
    {
      if (!strcmp(__s1, "in"))
      {
        *a2 = 0;
      }
      else if (!strcmp(__s1, "out"))
      {
        *a2 = 1;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return v8;
}

uint64_t otPlatDiagRadioGetPowerSettings(uint64_t a1, unsigned __int8 a2, _WORD *a3, _WORD *a4, unsigned __int16 *a5, char *a6)
{
  uint64_t v21 = a1;
  unsigned __int8 v20 = a2;
  uint64_t v19 = a3;
  uint64_t v18 = a4;
  uint64_t v17 = a5;
  uint64_t v16 = a6;
  unsigned int v15 = 0;
  int v14 = 0;
  int v13 = 0;
  BOOL v12 = 0;
  if (a3)
  {
    BOOL v12 = 0;
    if (v18)
    {
      BOOL v12 = 0;
      if (v17) {
        BOOL v12 = v16 != 0;
      }
    }
  }
  if (!v12) {
    __assert_rtn("otPlatDiagRadioGetPowerSettings", "radio.cpp", 1039, "(aTargetPower != nullptr) && (aActualPower != nullptr) && (aRawPowerSetting != nullptr) && (aRawPowerSettingLength != nullptr)");
  }
  snprintf(__str, 0x100uLL, "powersettings %d", v20);
  unsigned int v15 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, (uint64_t)v24, 500, v6, v7, v8, v9);
  if (!v15)
  {
    snprintf(v22, 0x64uLL, "TargetPower(0.01dBm): %%d\r\nActualPower(0.01dBm): %%d\r\nRawPowerSetting: %%%us\r\n", 33);
    if (sscanf(v24, v22, &v14, &v13, v23) == 3)
    {
      unsigned int v15 = ot::Utils::CmdLineParser::ParseAsHexString((ot::Utils::CmdLineParser *)v23, v16, v17, v10);
      if (!v15)
      {
        *uint64_t v19 = v14;
        _WORD *v18 = v13;
      }
    }
    else
    {
      return 1;
    }
  }
  return v15;
}

uint64_t otPlatDiagRadioSetRawPowerSetting(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  if (!a2) {
    __assert_rtn("otPlatDiagRadioSetRawPowerSetting", "radio.cpp", 1065, "aRawPowerSetting != nullptr");
  }
  int v9 = snprintf(__str, 0x100uLL, "rawpowersetting ");
  for (unsigned __int16 i = 0; i < (int)a3; ++i)
  {
    v9 += snprintf(&__str[v9], 256 - v9, "%02x", *(unsigned __int8 *)(a2 + i));
    if (v9 >= 256) {
      return 7;
    }
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v3, v4, v5, v6);
}

uint64_t otPlatDiagRadioGetRawPowerSetting(uint64_t a1, unsigned __int16 *a2, char *a3)
{
  BOOL v9 = 0;
  if (a2) {
    BOOL v9 = a3 != 0;
  }
  if (!v9) {
    __assert_rtn("otPlatDiagRadioGetRawPowerSetting", "radio.cpp", 1091, "(aRawPowerSetting != nullptr) && (aRawPowerSettingLength != nullptr)");
  }
  snprintf(__str, 0x100uLL, "rawpowersetting");
  unsigned int v11 = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, (uint64_t)v14, 500, v3, v4, v5, v6);
  if (!v11)
  {
    char v10 = (ot::Utils::CmdLineParser *)strtok(v14, "\r");
    if (v10) {
      return ot::Utils::CmdLineParser::ParseAsHexString(v10, a3, a2, v7);
    }
    else {
      return 1;
    }
  }
  return v11;
}

uint64_t otPlatDiagRadioRawPowerSettingEnable(uint64_t a1, char a2)
{
  uint64_t v2 = "enable";
  if ((a2 & 1) == 0) {
    uint64_t v2 = "disable";
  }
  snprintf(__str, 0x100uLL, "rawpowersetting %s", v2);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v3, v4, v5, v6);
}

uint64_t otPlatDiagRadioTransmitCarrier(uint64_t a1, char a2)
{
  uint64_t v2 = "start";
  if ((a2 & 1) == 0) {
    uint64_t v2 = "stop";
  }
  snprintf(__str, 0x100uLL, "cw %s", v2);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v3, v4, v5, v6);
}

uint64_t otPlatDiagRadioTransmitStream(uint64_t a1, char a2)
{
  uint64_t v2 = "start";
  if ((a2 & 1) == 0) {
    uint64_t v2 = "stop";
  }
  snprintf(__str, 0x100uLL, "stream %s", v2);
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::PlatDiagProcess((uint64_t)sRadioSpinel, (uint64_t)__str, 0, 0, v3, v4, v5, v6);
}

uint64_t otPlatRadioGetSupportedChannelMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioChannelMask((uint64_t)&sRadioSpinel, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetPreferredChannelMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioChannelMask((uint64_t)&sRadioSpinel, 1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetState()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetState((uint64_t)sRadioSpinel);
}

uint64_t otPlatRadioSetMacKey(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacKey((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v17 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v17) {
      uint64_t v16 = v17 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacKey((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, v9, v10) == 7)unsigned __int8 v11 = 2; {
    else
    }
      unsigned __int8 v11 = 1;
    BOOL v12 = otExitCodeToString(v11);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioSetMacKey", v16, 1176, v12);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacKey((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, v13, v14) == 7)int v15 = 2; {
    else
    }
      int v15 = 1;
    exit(v15);
  }
  return result;
}

uint64_t otPlatRadioGetMacFrameCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMacFrameCounter((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetMacFrameCounter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter((uint64_t)&sRadioSpinel, a2, 0, a4, a5, a6, a7, a8);
  if (result)
  {
    unsigned int v23 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v23) {
      uint64_t v22 = v23 + 1;
    }
    else {
      uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter((uint64_t)&sRadioSpinel, a2, 0, v9, v10, v11, v12, v13) == 7)unsigned __int8 v14 = 2; {
    else
    }
      unsigned __int8 v14 = 1;
    int v15 = otExitCodeToString(v14);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioSetMacFrameCounter", v22, 1194, v15);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter((uint64_t)&sRadioSpinel, a2, 0, v16, v17, v18, v19, v20) == 7)int v21 = 2; {
    else
    }
      int v21 = 1;
    exit(v21);
  }
  return result;
}

uint64_t otPlatRadioSetMacFrameCounterIfLarger(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter((uint64_t)&sRadioSpinel, a2, 1, a4, a5, a6, a7, a8);
  if (result)
  {
    unsigned int v23 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v23) {
      uint64_t v22 = v23 + 1;
    }
    else {
      uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter((uint64_t)&sRadioSpinel, a2, 1, v9, v10, v11, v12, v13) == 7)unsigned __int8 v14 = 2; {
    else
    }
      unsigned __int8 v14 = 1;
    int v15 = otExitCodeToString(v14);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioSetMacFrameCounterIfLarger", v22, 1200, v15);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMacFrameCounter((uint64_t)&sRadioSpinel, a2, 1, v16, v17, v18, v19, v20) == 7)int v21 = 2; {
    else
    }
      int v21 = 1;
    exit(v21);
  }
  return result;
}

unint64_t otPlatRadioGetNow()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetNow((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioGetBusSpeed()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetBusSpeed((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioReceiveAt(uint64_t a1, unsigned __int8 a2, unsigned int a3, unsigned int a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ReceiveAt((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetWakeupConfiguration(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetWakeupConfiguration((uint64_t)&sRadioSpinel, a2, a3);
}

uint64_t otPlatRadioStopWakeup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::StopWakeup((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioEnableCst(uint64_t a1, unsigned int a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::EnableCst((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioUpdateCstSampleTime(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCstSampleTime((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    char v25 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v25) {
      signed __int8 v24 = v25 + 1;
    }
    else {
      signed __int8 v24 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCstSampleTime((uint64_t)&sRadioSpinel, a2, v9, v10, v11, v12, v13, v14) == 7)unsigned __int8 v15 = 2; {
    else
    }
      unsigned __int8 v15 = 1;
    uint64_t v16 = otExitCodeToString(v15);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioUpdateCstSampleTime", v24, 1278, v16);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCstSampleTime((uint64_t)&sRadioSpinel, a2, v17, v18, v19, v20, v21, v22) == 7)int v23 = 2; {
    else
    }
      int v23 = 1;
    exit(v23);
  }
  return result;
}

uint64_t otPlatRadioGetCslAccuracy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCslAccuracy((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetCslUncertainty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetCslUncertainty((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioEnableCsl(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set((uint64_t)&sRadioSpinel, 15392, "SE", a4, a5, a6, a7, a8, a2);
}

uint64_t otPlatRadioUpdateCslChannel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::UpdateCslChannel((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioBrcmSetCslParentClockAccuracy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v29 = a2;
  otLogInfoPlat("ClockAccuracy Info-SetCslParentClockAccuracy: %d", a2, a3, a4, a5, a6, a7, a8, a2);
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set((uint64_t)&sRadioSpinel, 15393, "C", v8, v9, v10, v11, v12, v29);
  if (result)
  {
    uint64_t v28 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v28) {
      uint64_t v27 = v28 + 1;
    }
    else {
      uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set((uint64_t)&sRadioSpinel, 15393, "C", v14, v15, v16, v17, v18, v29) == 7)unsigned __int8 v19 = 2; {
    else
    }
      unsigned __int8 v19 = 1;
    uint64_t v20 = otExitCodeToString(v19);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioBrcmSetCslParentClockAccuracy", v27, 1349, v20);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set((uint64_t)&sRadioSpinel, 15393, "C", v21, v22, v23, v24, v25, v29) == 7)int v26 = 2; {
    else
    }
      int v26 = 1;
    exit(v26);
  }
  return result;
}

uint64_t otPlatRadioBrcmSetCslParentUncertainty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v29 = a2;
  otLogInfoPlat("ClockAccuracy Info-SetCslParentUncertainty: %d", a2, a3, a4, a5, a6, a7, a8, a2);
  uint64_t result = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set((uint64_t)&sRadioSpinel, 15394, "C", v8, v9, v10, v11, v12, v29);
  if (result)
  {
    uint64_t v28 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp", 47);
    if (v28) {
      uint64_t v27 = v28 + 1;
    }
    else {
      uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio.cpp";
    }
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set((uint64_t)&sRadioSpinel, 15394, "C", v14, v15, v16, v17, v18, v29) == 7)unsigned __int8 v19 = 2; {
    else
    }
      unsigned __int8 v19 = 1;
    uint64_t v20 = otExitCodeToString(v19);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatRadioBrcmSetCslParentUncertainty", v27, 1359, v20);
    handle_daemon_exit();
    if (ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Set((uint64_t)&sRadioSpinel, 15394, "C", v21, v22, v23, v24, v25, v29) == 7)int v26 = 2; {
    else
    }
      int v26 = 1;
    exit(v26);
  }
  return result;
}

uint64_t otPlatRadioSetChannelMaxTransmitPower(uint64_t a1, unsigned __int8 a2, char a3)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetChannelMaxTransmitPower((uint64_t)&sRadioSpinel, a2, a3);
}

uint64_t otPlatRadioAddCalibratedPower(uint64_t a1, unsigned __int8 a2, __int16 a3, uint64_t a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddCalibratedPower((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioClearCalibratedPowers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearCalibratedPowers((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetChannelTargetPower(uint64_t a1, unsigned __int8 a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetChannelTargetPower((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetRegion(uint64_t a1, _WORD *a2)
{
  *a2 = ot::Posix::PowerUpdater::GetRegion((ot::Posix::PowerUpdater *)&sPowerUpdater);
  return 0;
}

uint64_t ot::Posix::PowerUpdater::GetRegion(ot::Posix::PowerUpdater *this)
{
  return *((unsigned __int16 *)this + 48);
}

{
  return ot::Posix::PowerUpdater::GetRegion(this);
}

uint64_t otPlatRadioConfigureEnhAckProbing(uint64_t a1, unsigned __int8 a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ConfigureEnhAckProbing((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPowerControlSetMode(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t otPowerControlGetMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1;
  unsigned int v9 = 0;
  ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetTpcMode((uint64_t)&sRadioSpinel, (uint64_t)&v9, a3, a4, a5, a6, a7, a8);
  return v9;
}

uint64_t otSysGetRadioSpinelMetrics()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetRadioSpinelMetrics((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioSetLmeAckEnabled()
{
  return 0;
}

uint64_t otPlatRadioIsLmeAckEnabled(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t otPlatRadioSetLmeAckSetPoint()
{
  return 0;
}

uint64_t otPlatRadioGetLmeAckSetPoint(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t otPlatRadioAddLmeAckShortEntry()
{
  return 0;
}

uint64_t otPlatRadioAddLmeAckExtEntry()
{
  return 0;
}

uint64_t otPlatRadioClearLmeAckShortEntry()
{
  return 0;
}

uint64_t otPlatRadioClearLmeAckExtEntry()
{
  return 0;
}

uint64_t otPlatPeek(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Peek((uint64_t)&sRadioSpinel, a1, a2, a3, a4, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexRxMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexRxMixedModeUpperBound(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMixedModeUpperBound((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexRxMixedModeLowerBound(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxMixedModeLowerBound((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexTxMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexTxMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexEnabled((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexGrantTimeout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexGrantTimeout((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexThrottleMaxAttemptsNone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsNone((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexThrottleMaxAttemptsTxOnly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsTxOnly((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexThrottleMaxAttemptsRxOnly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexThrottleMaxAttemptsRxOnly((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexRxThrottleTimeout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRxThrottleTimeout((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexHistograms(uint64_t a1, uint64_t a2)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexHistograms((uint64_t)sRadioSpinel, a2);
}

uint64_t otPlatVendorGetCoexRequestAheadCslTx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRequestAheadCslTx((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCoexRequestAheadCslTxMin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCoexRequestAheadCslTxMin((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCslTxSchedulerFrameRequestAhead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCslTxSchedulerFrameRequestAhead((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPmuWakeTestResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPmuWakeTestResult((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetFemEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFemEnabled((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCsmaMinBe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMinBe((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCsmaMaxBe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMaxBe((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCsmaMaxBackoffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaMaxBackoffs((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCsmaCcaIdleAttempts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaCcaIdleAttempts((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCsmaSlidingWindowEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaSlidingWindowEnabled((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCcaEnergyDetectedHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCcaEnergyDetectedHistogram((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCsmaBackoffHistogram(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  unsigned int VendorCsmaBackoffHistogram = 0;
  unsigned __int16 v14 = 1024;
  unsigned int VendorCsmaBackoffHistogram = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCsmaBackoffHistogram((uint64_t)sRadioSpinel, (uint64_t)v18, (uint64_t)&v14, a4, a5, a6, a7, a8);
  if (!VendorCsmaBackoffHistogram) {
    return unpackVendorCsmaBackoffHistogram(v18, v14, v16, v8, v9, v10, v11, v12);
  }
  return VendorCsmaBackoffHistogram;
}

uint64_t unpackVendorCsmaBackoffHistogram(unsigned __int8 *a1, unsigned __int16 a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = a1;
  unsigned __int16 v20 = a2;
  unsigned __int8 v19 = a3;
  unsigned int v18 = 0;
  unsigned int v17 = 0;
  uint64_t v16 = 0;
  unsigned __int16 v15 = 0;
  unsigned int v17 = spinel_datatype_unpack(a1, a2, "d", a4, a5, a6, a7, a8, (uint64_t)&v16);
  if (v17)
  {
    *unsigned __int8 v19 = 0;
    for (unsigned __int8 i = 0; i < (int)*v19; ++i)
    {
      unsigned int v17 = spinel_datatype_unpack(v16, v15, "L", v8, v9, v10, v11, v12, (uint64_t)&v19[4 * i + 4]);
      if (!v17) {
        return 6;
      }
      v16 += v17;
      v15 -= v17;
    }
  }
  else
  {
    return 6;
  }
  return v18;
}

uint64_t otPlatVendorGetIfsMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetIfsMinSifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMinSifs((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetIfsMinLifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsMinLifs((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetIfsRetxMinSifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsRetxMinSifs((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetIfsRetxMinLifs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsRetxMinLifs((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetIfsAckTurnAroundTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundTime((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetIfsAckTurnAroundMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetIfsAckTurnAroundEnable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckTurnAroundEnable((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otGetStreamRawResponseHistogram(uint64_t a1, uint64_t a2)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::getStreamRawHistogram((uint64_t)&sRadioSpinel, a2);
}

uint64_t otResetStreamRawResponseHistogram()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::resetStreamRawHistogram((uint64_t)&sRadioSpinel);
}

uint64_t otPlatVendorGetIfsAckDataPerNeighbor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  unsigned __int8 v14 = 100;
  unsigned int VendorIfsAckDataPerNeighbor = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorIfsAckDataPerNeighbor((uint64_t)&sRadioSpinel, (uint64_t)v17, (uint64_t)&v14, a4, a5, a6, a7, a8);
  if (!VendorIfsAckDataPerNeighbor) {
    return unpackVendorAckDataPerNeighbor(v17, v14, v16, v15, v8, v9, v10, v11);
  }
  return VendorIfsAckDataPerNeighbor;
}

uint64_t unpackVendorAckDataPerNeighbor(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v20 = a1;
  unsigned __int16 v19 = a2;
  uint64_t v18 = a3;
  unsigned int v17 = (unsigned char *)a4;
  int v16 = 0;
  uint64_t v15 = 0;
  for (i = 0; v19; *unsigned int v17 = i)
  {
    int v16 = spinel_datatype_unpack(v20, v19, "d", a4, a5, a6, a7, a8, (uint64_t)&v15);
    if (v16 <= 0) {
      break;
    }
    v20 += v16;
    v19 -= v16;
    if (!spinel_datatype_unpack(v15, 0, "SESD", v8, v9, v10, v11, v12, v18 + 114 * i)) {
      break;
    }
    ++i;
  }
  return 0;
}

uint64_t otPlatVendorGetVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorVersion((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetOpenThreadRadioCounters(uint64_t a1, uint64_t a2)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorOpenThreadRadioCounters((uint64_t)&sRadioSpinel, a2);
}

uint64_t otPlatVendorGetRadioCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioCounters((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetRadioStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioStats((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetAssignedHwMac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAssignedHwMac((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGenerateAssert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAssert((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGenerateHardFault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorHardFault((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGenerateStackOverflow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorStackOverflow((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorFactoryReset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFactoryReset((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetFaultInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorFaultInfo((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetDeepSleepFilterList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepFilterList((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetDeepSleepLogLevel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepLogLevel((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetDeepSleepRegionLogLevels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeepSleepRegionLoglevels((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetHostWakeReason(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorHostWakeReason((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetDeviceId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorDeviceId((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPowerLimitTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  unsigned int v15 = 500;
  unsigned int VendorPowerLimitTable = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTable((uint64_t)&sRadioSpinel, (uint64_t)v18, (uint64_t)&v15, a4, a5, a6, a7, a8);
  if (!VendorPowerLimitTable) {
    return unpackVendorPowerTable(v18, v15, v16, v8, v9, v10, v11, v12);
  }
  return VendorPowerLimitTable;
}

uint64_t unpackVendorPowerTable(unsigned __int8 *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v26 = a1;
  unsigned int v25 = a2;
  uint64_t v24 = a3;
  unsigned int v23 = 0;
  int v22 = 0;
  uint64_t v21 = 0;
  char v20 = 0;
  unsigned __int16 v19 = 0;
  unsigned int v18 = 0;
  int v22 = spinel_datatype_unpack(a1, a2, "UC", a4, a5, a6, a7, a8, (uint64_t)&v21);
  v26 += v22;
  v25 -= v22;
  *(unsigned char *)(v24 + 30) = 7;
  for (int i = 0; i < 7; ++i)
  {
    int v22 = spinel_datatype_unpack(v26, v25, "d", v8, v9, v10, v11, v12, (uint64_t)&v19);
    v26 += v22;
    v25 -= v22;
    unsigned __int16 v16 = v18;
    for (unsigned __int16 j = 0; j < (int)v16; ++j)
    {
      char v14 = 0;
      int v22 = spinel_datatype_unpack(v19, v18, "c", v8, v9, v10, v11, v12, (uint64_t)&v14);
      *(unsigned char *)(v24 + 31 + 16 * i + j) = v14;
      v19 += v22;
      v18 -= v22;
    }
  }
  return v23;
}

uint64_t otPlatDecodeSpinel(char *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SpinelHandleReceivedFrame(sRadioSpinel, a1, a2, a3, a4, a5 & 1, a7, a8);
}

uint64_t otPlatVendorGetAntenna(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorAntenna((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCC((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCore((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPCAP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPCAP((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPriority(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPriority((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetGPIO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorGPIO((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

int *otPlatRadioRcp2GetSpinelVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = 0;
  otPlatRcp2SpinelVersion = 0;
  dword_1004BC384 = 0;
  dword_1004BC388 = 0;
  if (!ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::Get((uint64_t)&sRadioSpinel, 15362, (uint64_t)"LLL", a4, a5, a6, a7, a8, (uint64_t)&otPlatRcp2SpinelVersion))return &otPlatRcp2SpinelVersion; {
  return (int *)v9;
  }
}

BOOL otPlatRadioRcp2SpinelVersionIsSameOrNewer(unsigned int a1, unsigned int a2)
{
  return __PAIR64__(dword_1004BC384, dword_1004BC388) >= __PAIR64__(a1, a2);
}

uint64_t otPlatVendorSetAntenna(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAntenna((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCC(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCC((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetPCAP(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPCAP((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetPriority(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPriority((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetGPIO(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorGPIO((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetRCP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::resetRCP((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

long long *otPlatVendorCoexConfigTest(uint64_t a1, unsigned char *a2, unsigned char *a3, int *a4, int *a5, int *a6, BOOL *a7)
{
  if (a2)
  {
    uint64_t result = getStringValue("vendor:coex:thread:priority");
    int v26 = (const char *)result;
    if (result)
    {
      os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
      if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
        {
          int v19 = *a2;
          unsigned __int8 v8 = atoi(v26);
          __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v49, (uint64_t)"otPlatVendorCoexConfigTest", v19, v8);
          _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "BT Load: %s, kWPANTUNDVendor_CoEx_Priority is set, current priority is %d, overwrite it to %d", v49, 0x18u);
        }
      }
      else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v48, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v48, 0x16u);
      }
      uint64_t result = (long long *)atoi(v26);
      *a2 = (_BYTE)result;
    }
  }
  if (a3)
  {
    uint64_t result = getStringValue("vendor:coex:thread:fragment:size");
    uint64_t v27 = (const char *)result;
    if (result)
    {
      uint64_t v24 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v24 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          int v18 = *a3;
          unsigned __int8 v9 = atoi(v27);
          __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v47, (uint64_t)"otPlatVendorCoexConfigTest", v18, v9);
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BT Load: %s, kWPANTUNDVendor_CoEx_Fragment_Size is set, current fragment size is %d, overwrite it to %d", v47, 0x18u);
        }
      }
      else if (!v24 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v46, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v46, 0x16u);
      }
      uint64_t result = (long long *)atoi(v27);
      *a3 = (_BYTE)result;
    }
  }
  if (a4)
  {
    uint64_t result = getStringValue("vendor:coex:thread:datapoll:timeout");
    uint64_t v28 = (const char *)result;
    if (result)
    {
      unsigned int v23 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v23 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          int v17 = *a4;
          int v10 = atoi(v28);
          __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v45, (uint64_t)"otPlatVendorCoexConfigTest", v17, v10);
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "BT Load: %s, kWPANTUNDVendor_CoEx_DataPoll_Timeout is set, current data_poll_timeout is %d, overwrite it to %d", v45, 0x18u);
        }
      }
      else if (!v23 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v44, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v44, 0x16u);
      }
      uint64_t result = (long long *)atoi(v28);
      *a4 = (int)result;
    }
  }
  if (a5)
  {
    uint64_t result = getStringValue("vendor:coex:thread:dutycycle:high");
    unsigned __int8 v29 = (const char *)result;
    if (result)
    {
      int v22 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v22 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          int v16 = *a5;
          int v11 = atoi(v29);
          __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v43, (uint64_t)"otPlatVendorCoexConfigTest", v16, v11);
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BT Load: %s, kWPANTUNDVendor_CoEx_Dutycycle_High is set, current dt high time is %d, overwrite it to %d", v43, 0x18u);
        }
      }
      else if (!v22 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v42, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v42, 0x16u);
      }
      uint64_t result = (long long *)atoi(v29);
      *a5 = (int)result;
    }
  }
  if (a6)
  {
    uint64_t result = getStringValue("vendor:coex:thread:dutycycle:interval");
    uint64_t v30 = (const char *)result;
    if (result)
    {
      uint64_t v21 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v21 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          int v15 = *a6;
          int v12 = atoi(v30);
          __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v41, (uint64_t)"otPlatVendorCoexConfigTest", v15, v12);
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "BT Load: %s, kWPANTUNDVendor_CoEx_Dutycycle_Interval is set, current dt interval time is %d, overwrite it to %d", v41, 0x18u);
        }
      }
      else if (!v21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v40, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v40, 0x16u);
      }
      uint64_t result = (long long *)atoi(v30);
      *a6 = (int)result;
    }
  }
  if (a7)
  {
    uint64_t result = getStringValue("vendor:coex:thread:dutycycle:datapoll:align");
    uint64_t v31 = (const char *)result;
    if (result)
    {
      char v20 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v20 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          int v14 = *a7;
          unsigned __int8 v13 = atoi(v31);
          __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v39, (uint64_t)"otPlatVendorCoexConfigTest", v14, v13);
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BT Load: %s, kWPANTUNDVendor_CoEx_Dutycycle_Datappoll_Align is set, current datapoll align is %d, overwrite it to %d", v39, 0x18u);
        }
      }
      else if (!v20 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v38, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v38, 0x16u);
      }
      uint64_t result = (long long *)atoi(v31);
      *a7 = result != 0;
    }
  }
  return result;
}

uint64_t __os_log_helper_16_2_3_8_32_4_0_4_0(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 4;
  *(_DWORD *)(result + 14) = a3;
  *(unsigned char *)(result + 18) = 0;
  *(unsigned char *)(result + 19) = 4;
  *(_DWORD *)(result + 20) = a4;
  return result;
}

BOOL otPlatVendorGetThreadJoinSession()
{
  std::string __s1 = (char *)getStringValue("threadSessionJoin");
  return __s1 && !strcmp(__s1, "ON");
}

uint64_t otPlatVendorCoexThreadClear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v14 = otPlatVendorSetPriority(a1, 0, 0, 0, a5, a6, a7, a8);
  if (!v14 && !otPlatVendorSetDutyCycle(a1, 0, 0, 0, v8, v9, v10, v11))
  {
    otLinkSetFragmentSize(a1, 0x7Fu);
    otLinkSetDataPollTimeoutCoex(a1, 100);
  }
  if (v14)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_2_8_32_4_0((uint64_t)v17, (uint64_t)"otPlatVendorCoexThreadClear", v14);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "BT Load: %s, otPlatVendorSetPriority failed error is %d", v17, 0x12u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v16, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v16, 0x16u);
    }
  }
  return v14;
}

uint64_t otPlatVendorCoexThreadDetached(uint64_t a1, char a2, unsigned __int8 a3, unsigned __int8 a4, char a5)
{
  unsigned int v36 = 0;
  unsigned __int8 v35 = 3;
  unsigned int v34 = 0;
  unsigned int v33 = 10000;
  unsigned int v32 = 450000;
  char v31 = 0;
  char v30 = 1;
  unsigned __int8 v29 = 0;
  if (a2)
  {
    if (a3 >= 3u)
    {
      if (a3 >= 5u)
      {
        if (a3 == 5)
        {
          unsigned int v33 = 2500;
          unsigned int v32 = 60000;
          char v31 = 1;
          char v30 = 0;
          if (a4 == 2 || a4 == 5 || a4 == 1 || a4 == 6)
          {
            unsigned __int8 v29 = 60;
            unsigned int v34 = 22500;
          }
          else if (a4 == 10 || a4 == 7)
          {
            unsigned __int8 v29 = 60;
            unsigned int v34 = 22500;
          }
          else if ((a5 & 1) != 0 && (a4 == 3 || a4 == 4 || a4 == 8))
          {
            unsigned __int8 v29 = 60;
          }
          os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
          if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
          {
            if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
            {
              __os_log_helper_16_2_4_8_32_4_0_4_0_4_0((uint64_t)v49, (uint64_t)"otPlatVendorCoexThreadDetached", a3, a4, 3);
              _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "BT Load: %s NewAttachState is %d: Child ID Req procedure started. bt audio task ID is %d, set the priority as %d.", v49, 0x1Eu);
            }
          }
          else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v48, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v48, 0x16u);
          }
          unsigned int v23 = log_get_logging_obg("com.apple.threadradiod", "default");
          if (v23 && (syslog_is_the_mask_enabled(6) & 1) != 0)
          {
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              __os_log_helper_16_2_1_8_32((uint64_t)v47, (uint64_t)"otPlatVendorCoexThreadDetached");
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "BT Load: %s Ongoing Attach procedure after parent response is received, set RX on IDLE use QOS Percentage Policy config to FALSE", v47, 0xCu);
            }
          }
          else if (!v23 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            __os_log_helper_16_2_2_8_32_8_32((uint64_t)v46, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v46, 0x16u);
          }
        }
      }
      else
      {
        int v26 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v26 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v53, (uint64_t)"otPlatVendorCoexThreadDetached", a3, 3);
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BT Load: %s NewAttachState is %d: Backoff time is fired, ready to send out ParentReq now. set the priority as %d.", v53, 0x18u);
          }
        }
        else if (!v26 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v52, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v52, 0x16u);
        }
        unsigned int v25 = log_get_logging_obg("com.apple.threadradiod", "default");
        if (v25 && (syslog_is_the_mask_enabled(6) & 1) != 0)
        {
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            __os_log_helper_16_2_1_8_32((uint64_t)v51, (uint64_t)"otPlatVendorCoexThreadDetached");
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "BT Load: %s Ongoing Attach procedure, set RX on IDLE use QOS Percentage Policy config to TRUE", v51, 0xCu);
          }
        }
        else if (!v25 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __os_log_helper_16_2_2_8_32_8_32((uint64_t)v50, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v50, 0x16u);
        }
      }
    }
    else
    {
      unsigned __int8 v35 = 0;
      unsigned int v33 = 0;
      unsigned int v32 = 0;
      uint64_t v28 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v28 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_2_3_8_32_4_0_4_0((uint64_t)v57, (uint64_t)"otPlatVendorCoexThreadDetached", a3, 0);
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "BT Load: %s NewAttachState is %d: We might still wait for backoff timeout to send out ParentReq, keep the priority as %d.", v57, 0x18u);
        }
      }
      else if (!v28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v56, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v56, 0x16u);
      }
      uint64_t v27 = log_get_logging_obg("com.apple.threadradiod", "default");
      if (v27 && (syslog_is_the_mask_enabled(6) & 1) != 0)
      {
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          __os_log_helper_16_2_1_8_32((uint64_t)v55, (uint64_t)"otPlatVendorCoexThreadDetached");
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "BT Load: %s There is no Ongoing Attach procedure, set RX on IDLE use QOS Percentage Policy config to FALSE", v55, 0xCu);
        }
      }
      else if (!v27 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v54, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v54, 0x16u);
      }
      char v30 = 0;
    }
  }
  else
  {
    int v22 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v22 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_1_8_32((uint64_t)v45, (uint64_t)"otPlatVendorCoexThreadDetached");
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BT Load: %s The role change to detached, but there is no attach state change yet.", v45, 0xCu);
      }
    }
    else if (!v22 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v44, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v44, 0x16u);
    }
  }
  uint64_t v21 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v21 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_11_8_32_4_0_4_0_4_0_4_0_4_0_4_0_4_0_4_0_4_0_4_0((uint64_t)v43, (uint64_t)"otPlatVendorCoexThreadDetached", v35, 0, v34, 127, 100, v33, v32, v31 & 1, v30 & 1, v29);
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "BT Load: %s Set Thread coex config: priority to %d, overridePriority to %d, overridePriorityDuration to %d us, max fragment size to %d, data poll timeout to %d, dt_high(x) %d, dt_interval(y) %d, dt_datapoll_align %d, RxOnIdleUseQOSPercentagePolicy %d, B2BDataPollDelay %d ms", v43, 0x48u);
    }
  }
  else if (!v21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v42, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v42, 0x16u);
  }
  if (!otPlatVendorSetPriority(a1, v35, 0, v34, v5, v6, v7, v8)
    && !otPlatVendorSetDutyCycle(a1, v33, v32, v31 & 1, v9, v10, v11, v12))
  {
    unsigned int v36 = otPlatVendorSetRxOnIdleUseQOSPercentagePolicyConfig(a1, v30 & 1, v13, v14, v15, v16, v17, v18);
    if (!v36)
    {
      otLinkSetFragmentSize(a1, 0x7Fu);
      otLinkSetDataPollTimeoutCoex(a1, 100);
      otLinkSetB2BDataPollDelay(a1, v29);
      otLinkSetSessionPriority(a1, v35);
    }
  }
  if (v36)
  {
    char v20 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v20 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_2_8_32_4_0((uint64_t)v41, (uint64_t)"otPlatVendorCoexThreadDetached", v36);
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BT Load: %s, otPlatVendorSetPriority failed error is %d", v41, 0x12u);
      }
    }
    else if (!v20 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v40, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v40, 0x16u);
    }
  }
  return v36;
}

uint64_t __os_log_helper_16_2_11_8_32_4_0_4_0_4_0_4_0_4_0_4_0_4_0_4_0_4_0_4_0(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 11;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 13) = 4;
  *(_DWORD *)(result + 14) = a3;
  *(unsigned char *)(result + 18) = 0;
  *(unsigned char *)(result + 19) = 4;
  *(_DWORD *)(result + 20) = a4;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 25) = 4;
  *(_DWORD *)(result + 26) = a5;
  *(unsigned char *)(result + 30) = 0;
  *(unsigned char *)(result + 31) = 4;
  *(_DWORD *)(result + 32) = a6;
  *(unsigned char *)(result + 36) = 0;
  *(unsigned char *)(result + 37) = 4;
  *(_DWORD *)(result + 38) = a7;
  *(unsigned char *)(result + 42) = 0;
  *(unsigned char *)(result + 43) = 4;
  *(_DWORD *)(result + 44) = a8;
  *(unsigned char *)(result + 48) = 0;
  *(unsigned char *)(result + 49) = 4;
  *(_DWORD *)(result + 50) = a9;
  *(unsigned char *)(result + 54) = 0;
  *(unsigned char *)(result + 55) = 4;
  *(_DWORD *)(result + 56) = a10;
  *(unsigned char *)(result + 60) = 0;
  *(unsigned char *)(result + 61) = 4;
  *(_DWORD *)(result + 62) = a11;
  *(unsigned char *)(result + 66) = 0;
  *(unsigned char *)(result + 67) = 4;
  *(_DWORD *)(result + 68) = a12;
  return result;
}

uint64_t otPlatVendorSetPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPower((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPowerLimitTableActiveId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTableActiveId((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPowerLimitTableVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTableVersion((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorPowerLimitTablePowerTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLimitTablePowerTest((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPowerLmitActiveTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerLmitActiveTable((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPowerMappingTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  unsigned int VendorPowerMappingTable = 0;
  unsigned __int16 v14 = 343;
  unsigned int VendorPowerMappingTable = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTable((uint64_t)&sRadioSpinel, (uint64_t)v18, (uint64_t)&v14, a4, a5, a6, a7, a8);
  if (!VendorPowerMappingTable) {
    return unpackVendorPowerMappingTable(v18, v14, v16, v8, v9, v10, v11, v12);
  }
  return VendorPowerMappingTable;
}

uint64_t unpackVendorPowerMappingTable(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = a1;
  unsigned __int16 v37 = a2;
  uint64_t v36 = a3;
  unsigned int v35 = 0;
  int v34 = 0;
  __int16 v33 = 0;
  char v32 = 0;
  char v31 = 0;
  unsigned int v30 = 0;
  int v29 = 0;
  int v34 = spinel_datatype_unpack(a1, a2, "S", a4, a5, a6, a7, a8, (uint64_t)&v33);
  if (v34 == 1) {
    int v34 = 2;
  }
  *(_WORD *)uint64_t v36 = v33;
  v38 += v34;
  v37 -= v34;
  int v34 = spinel_datatype_unpack(v38, v37, "C", v8, v9, v10, v11, v12, (uint64_t)&v32);
  *(unsigned char *)(v36 + 2) = v32;
  v38 += v34;
  v37 -= v34;
  int v34 = spinel_datatype_unpack(v38, v37, "d", v13, v14, v15, v16, v17, (uint64_t)&v31);
  v38 += v34;
  v37 -= v34;
  int v29 = v30;
  for (unsigned __int16 i = 0; i < v29; ++i)
  {
    char v27 = 0;
    int v34 = spinel_datatype_unpack(v31, v30, "c", v18, v19, v20, v21, v22, (uint64_t)&v27);
    v31 += v34;
    v30 -= v34;
    *(unsigned char *)(v36 + 3 + i) = v27;
  }
  for (unsigned __int16 j = 0; j < 0x10u; ++j)
  {
    int v34 = spinel_datatype_unpack(v38, v37, "d", v18, v19, v20, v21, v22, (uint64_t)&v31);
    v38 += v34;
    v37 -= v34;
    int v29 = v30;
    for (unsigned __int16 k = 0; k < v29; ++k)
    {
      char v24 = 0;
      int v34 = spinel_datatype_unpack(v31, v30, "c", v18, v19, v20, v21, v22, (uint64_t)&v24);
      *(unsigned char *)(v36 + 23 + 20 * j + k) = v24;
      v31 += v34;
      v30 -= v34;
    }
  }
  return v35;
}

uint64_t otPlatVendorGetPowerMappingTableVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableVersion((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorPowerMappingTablePowerTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTablePowerTest((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetRadioCurrentPowerInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorRadioCurrentPowerInfo((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorGetPowerMappingTableFlashData(uint64_t a1, char *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  uint64_t v15 = a3;
  unsigned int VendorPowerMappingTableFlashData = 0;
  int v13 = 1024;
  unsigned int VendorPowerMappingTableFlashData = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableFlashData((uint64_t)&sRadioSpinel, (uint64_t)v18, (uint64_t)&v13, a4, a5, a6, a7, a8);
  if (!VendorPowerMappingTableFlashData) {
    return unpackVendorPowerMappingFlashData(v18, v13, v16, v15, v8, v9, v10, v11);
  }
  return VendorPowerMappingTableFlashData;
}

uint64_t unpackVendorPowerMappingFlashData(unsigned __int8 *a1, unsigned __int16 a2, char *a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v23 = a1;
  unsigned __int16 v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  unsigned int v19 = 0;
  int v18 = 0;
  unsigned __int16 v17 = 0;
  int v18 = spinel_datatype_unpack(a1, a2, "S", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v17);
  v23 += v18;
  v22 -= v18;
  *uint64_t v20 = v17;
  unsigned __int16 v16 = v17;
  for (unsigned __int16 i = 0; i < (int)v16; ++i)
  {
    char v14 = 0;
    int v18 = spinel_datatype_unpack(v23, v22, "c", v8, v9, v10, v11, v12, (uint64_t)&v14);
    v23 += v18;
    v22 -= v18;
    v21[i] = v14;
  }
  return v19;
}

uint64_t otPlatVendorGetPowerMappingTableFlashDataIsValid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorPowerMappingTableFlashDataIsvalid((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexRxMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexRxMixedModeUpperBound(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMixedModeUpperBound((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexRxMixedModeLowerBound(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxMixedModeLowerBound((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexTxMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexTxMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexEnabled(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexEnabled((uint64_t)sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetCoexCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexCounters((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexGrantTimeout(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexGrantTimeout((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexThrottleMaxAttemptsNone(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsNone((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexThrottleMaxAttemptsTxOnly(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsTxOnly((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexThrottleMaxAttemptsRxOnly(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexThrottleMaxAttemptsRxOnly((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexRxThrottleTimeout(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRxThrottleTimeout((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetCoexHistograms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexHistograms((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexRequestAheadCslTx(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRequestAheadCslTx((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCoexRequestAheadCslTxMin(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCoexRequestAheadCslTxMin((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCslTxSchedulerFrameRequestAhead(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCslTxSchedulerFrameRequestAhead((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetPmuWakeTestStart(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPmuWakeTestStart((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetFemEnabled(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorFemEnabled((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCsmaMinBe(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMinBe((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCsmaMaxBe(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMaxBe((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCsmaMaxBackoffs(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaMaxBackoffs((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCsmaCcaIdleAttempts(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaCcaIdleAttempts((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetCsmaSlidingWindowEnabled(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaSlidingWindowEnabled((uint64_t)sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetCcaEnergyDetectedHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCcaEnergyDetectedHistogram((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetCsmaBackoffHistogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCsmaBackoffHistogram((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsMinSifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMinSifs((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsMinLifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsMinLifs((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsRetxMinSifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsRetxMinSifs((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsRetxMinLifs(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsRetxMinLifs((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsAckTurnAroundMode(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundMode((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsAckTurnAroundEnable(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundEnable((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetIfsAckTurnAroundTime(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorIfsAckturnaroundTime((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorCntrStatsReset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCntrStatsReset((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetOpenThreadRadioCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorOpenThreadRadioCounters((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetRadioCounters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRadioCounters((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorResetRadioStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorRadioStats((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetAssignedHwMac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAssignedHWMac((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorScheduleAssert(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorAssert((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetHardResetTest(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorHardResdtTest((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorLoggingTest(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetLoggingTest((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetNotificationFilter(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetFilterUnsolNotif ((uint64_t)sRadioSpinel, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetFaultInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorFaultInfo((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetDeepSleepFilterList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepFilterList((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetDeepSleepLogLevel(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepLogLevel((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetDeepSleepRegionLogLevels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorDeepSleepRegionLoglevels((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetHostWakeReason(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorHostWakeReason((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorFlashErase(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FlashErase((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorFlashWrite(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::FlashWrite((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetPowerLimitTableActiveId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = a1;
  unsigned __int8 v37 = a2;
  unsigned int VendorCC = 0;
  if (sCurrentRegion != 255 && sCurrentRegion == v37)
  {
    unsigned __int8 v35 = 0;
    unsigned int VendorCC = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetVendorCC((uint64_t)&sRadioSpinel, (uint64_t)&v35, a3, a4, a5, a6, a7, a8);
    otLogWarnPlat("%s RegionCode = %d in controller, and Host request to set the RegionCode = %d", v14, v15, v16, v17, v18, v19, v20, (char)"otPlatVendorSetPowerLimitTableActiveId");
    if (VendorCC || v35 == v37)
    {
      otLogWarnPlat("%s RegionCode = %d request not set,CFStreamError error = %d", v21, v22, v23, v24, v25, v26, v27, (char)"otPlatVendorSetPowerLimitTableActiveId");
    }
    else
    {
      otLogWarnPlat("A crash may have occured in the firmware : %s RegionCode = %d to be set", v21, v22, v23, v24, v25, v26, v27, (char)"otPlatVendorSetPowerLimitTableActiveId");
      unsigned int VendorCC = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCC((uint64_t)&sRadioSpinel, v37, v28, v29, v30, v31, v32, v33);
    }
  }
  else
  {
    otLogWarnPlat("%s RegionCode = %d to be set", a2, a3, a4, a5, a6, a7, a8, (char)"otPlatVendorSetPowerLimitTableActiveId");
    unsigned int VendorCC = ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorCC((uint64_t)&sRadioSpinel, v37, v8, v9, v10, v11, v12, v13);
  }
  if (!VendorCC) {
    sCurrentRegion = v37;
  }
  return VendorCC;
}

uint64_t otPlatVendorSetPowerMappingTableClear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPowerMappingTableClear((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetPowerMappingTableFlashData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  int v10 = 0;
  __int16 v9 = 500;
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorPowerMappingTableFlashData((uint64_t)&sRadioSpinel, (uint64_t)v14, (uint64_t)&v9, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorSetLogTimestampBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorSetLogTimeStampBase((uint64_t)&sRadioSpinel, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatVendorUartDisableStart(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetVendorUartDisableStart((uint64_t)sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetMinInterframeDelay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    __assert_rtn("otPlatRadioGetMinInterframeDelay", "radio.cpp", 3266, "aDurationInMs != nullptr");
  }
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetMinInterframeDelay((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetMinInterframeDelay(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetMinInterframeDelay((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetPcapEnable(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPcapEnable((uint64_t)&sRadioSpinel, a2 & 1, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioGetPcapEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::GetPcapEnable((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8) & 1;
}

uint64_t otPlatRadioSetPromiscuousEnable()
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuousEnable((uint64_t)&sRadioSpinel);
}

uint64_t otPlatRadioSetPromiscuousDisable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetPromiscuousDisable((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioSetHostPowerState(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::SetHostPowerState((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioAddChildEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::AddChildEntry((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t otPlatRadioClearChildEntry(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ot::Spinel::RadioSpinel<ot::Posix::HdlcInterface,RadioProcessContext>::ClearChildEntry((uint64_t)&sRadioSpinel, a2, a3, a4, a5, a6, a7, a8);
}

__darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c, unint64_t _f)
{
  return _c < 0x100 && (_DefaultRuneLocale.__runetype[_c] & _f) != 0;
}

{
  return __isctype(_c, _f);
}

ot::Posix::PowerUpdater *__cxx_global_var_init_1_2()
{
  return ot::Posix::PowerUpdater::PowerUpdater((ot::Posix::PowerUpdater *)&sPowerUpdater);
}

ot::Posix::PowerUpdater *_GLOBAL__sub_I_radio_cpp()
{
  return __cxx_global_var_init_1_2();
}

const char *otSysGetRadioUrlHelpString()
{
  return "RadioURL:\n"
         "    forkpty-arg[=argument string]  Command line arguments for subprocess, can be repeated.\n"
         "    spinel+hdlc+uart://${PATH_TO_UART_DEVICE}?${Parameters} for real uart device\n"
         "    spinel+hdlc+forkpty://${PATH_TO_UART_DEVICE}?${Parameters} for forking a pty subprocess.\n"
         "Parameters:\n"
         "    uart-parity[=even|odd]         Uart parity config, optional.\n"
         "    uart-stop[=number-of-bits]     Uart stop bit, default is 1.\n"
         "    uart-baudrate[=baudrate]       Uart baud rate, default is 115200.\n"
         "    uart-flow-control              Enable flow control, disabled by default.\n"
         "    uart-reset                     Reset connection after hard resetting RCP(USB CDC ACM).\n"
         "    region[=region-code]          Set the radio's region code. The region code must be an\n"
         "                                  ISO 3166 alpha-2 code.\n"
         "    cca-threshold[=dbm]           Set the radio's CCA ED threshold in dBm measured at antenna connector.\n"
         "    enable-coex[=1|0]             If not specified, RCP coex operates with its default configuration.\n"
         "                                  Disable coex with 0, and enable it with other values.\n"
         "    fem-lnagain[=dbm]             Set the Rx LNA gain in dBm of the external FEM.\n"
         "    ncp-dataset                   Retrieve dataset from ncp.\n"
         "    no-reset                      Do not send Spinel reset command to RCP on initialization.\n"
         "    skip-rcp-compatibility-check  Skip checking RCP API version and capabilities during initialization.\n";
}

ot::Posix::RadioUrl *ot::Posix::RadioUrl::RadioUrl(ot::Posix::RadioUrl *this, const char *a2)
{
  if (strnlen(a2, 0x200uLL) >= 0x200)
  {
    uint64_t v11 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio_url.cpp", 47);
    if (v11) {
      uint64_t v8 = v11 + 1;
    }
    else {
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio_url.cpp";
    }
    uint64_t v2 = otExitCodeToString(2u);
    otLogCritPlat("%s() at %s:%d: %s", "RadioUrl", v8, 115, v2);
    handle_daemon_exit();
    exit(2);
  }
  strncpy((char *)this + 32, a2, 0x1FFuLL);
  if (ot::Url::Url::Init(this, (char *)this + 32))
  {
    int v10 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio_url.cpp", 47);
    if (v10) {
      uint64_t v7 = v10 + 1;
    }
    else {
      uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/radio_url.cpp";
    }
    if (ot::Url::Url::Init(this, (char *)this + 32) == 7) {
      unsigned __int8 v3 = 2;
    }
    else {
      unsigned __int8 v3 = 1;
    }
    uint64_t v4 = otExitCodeToString(v3);
    otLogCritPlat("%s() at %s:%d: %s", "RadioUrl", v7, 117, v4);
    handle_daemon_exit();
    if (ot::Url::Url::Init(this, (char *)this + 32) == 7) {
      int v5 = 2;
    }
    else {
      int v5 = 1;
    }
    exit(v5);
  }
  return this;
}

{
  ot::Posix::RadioUrl::RadioUrl(this, a2);
  return this;
}

uint64_t otPlatIsSettingsFileExists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  getSettingsFileName(a1, v17, 0, a4, a5, a6, a7, a8);
  int v11 = open(v17, 0, 384);
  if (v11 == -1)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(3) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v16, (uint64_t)"otPlatIsSettingsFileExists", (uint64_t)v17);
        _os_log_error_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_ERROR, "%s: FileName: %s doesn't exist ", v16, 0x16u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v15, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v15, 0x16u);
    }
    char v12 = 0;
  }
  else
  {
    __int16 v9 = log_get_logging_obg("com.apple.threadradiod", "default");
    if (v9 && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v14, (uint64_t)"otPlatIsSettingsFileExists", (uint64_t)v17);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s: FileName: %s exist ", v14, 0x16u);
      }
    }
    else if (!v9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v13, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v13, 0x16u);
    }
    close(v11);
    char v12 = 1;
  }
  return v12 & 1;
}

void getSettingsFileName(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  char v14 = a3 & 1;
  uint64_t v13 = 0;
  otPlatRadioGetIeeeEui64(a1, &v13, a3, a4, a5, a6, a7, a8);
  uint64_t v13 = (ot::Encoding::BigEndian *)ot::Encoding::BigEndian::HostSwap64(v13);
  ExtendedAddress = (ot::Encoding::BigEndian *)otLinkGetExtendedAddress(v16);
  unint64_t Uint64 = ot::Encoding::BigEndian::ReadUint64(ExtendedAddress, v8);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_0_1_8_0((uint64_t)v20, Uint64);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "ExtendedAddress in Settings File: 0x%llx", v20, 0xCu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v19, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v19, 0x16u);
  }
  if (v14) {
    snprintf(v15, 0x3EuLL, "var/db/com.apple.threadradiod/cfg_%llx.%s", Uint64, "swap");
  }
  else {
    snprintf(v15, 0x3EuLL, "var/db/com.apple.threadradiod/cfg_%llx.%s", Uint64, "data");
  }
  __int16 v9 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v9 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v18, (uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "FileName: %s", v18, 0xCu);
    }
  }
  else if (!v9 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v17, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v17, 0x16u);
  }
}

uint64_t otPlatSettingsInit(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  __int16 v28 = a3;
  int v27 = 0;
  uint64_t result = IsSystemDryRun();
  if ((result & 1) == 0)
  {
    if (stat("var/db/com.apple.threadradiod", &v26) == -1 && mkdir("var/db/com.apple.threadradiod", 0x1EDu))
    {
      uint64_t v25 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
      if (v25) {
        uint64_t v15 = v25 + 1;
      }
      else {
        uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
      }
      __int16 v9 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "otPlatSettingsInit", v15, 241, v9);
      handle_daemon_exit();
      exit(5);
    }
    getSettingsFileName(v30, v33, 0, v4, v5, v6, v7, v8);
    if (sSettingsFd != -1)
    {
      close(sSettingsFd);
      sSettingsFd = -1;
    }
    sSettingsFd = open(v33, 16777730, 384);
    os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      os_log_t oslog = logging_obg;
      os_log_type_t type = OS_LOG_TYPE_INFO;
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_3_8_32_8_32_4_0((uint64_t)v32, (uint64_t)"otPlatSettingsInit", (uint64_t)v33, sSettingsFd);
        _os_log_impl((void *)&_mh_execute_header, oslog, type, "%s: FileName: %s data file opened with fd = %d", v32, 0x1Cu);
      }
    }
    else if (!logging_obg)
    {
      os_log_t v21 = (os_log_t)&_os_log_default;
      os_log_type_t v20 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        __os_log_helper_16_2_2_8_32_8_32((uint64_t)v31, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
        _os_log_error_impl((void *)&_mh_execute_header, v21, v20, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v31, 0x16u);
      }
    }
    checkCTRSettingsFileLimit();
    if (sSettingsFd == -1)
    {
      uint64_t v19 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
      if (v19) {
        char v14 = v19 + 1;
      }
      else {
        char v14 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
      }
      int v10 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "otPlatSettingsInit", v14, 268, v10);
      handle_daemon_exit();
      exit(5);
    }
    off_t v18 = lseek(sSettingsFd, 0, 2);
    uint64_t result = lseek(sSettingsFd, 0, 0);
    *(void *)&v17[1] = result;
    while (*(uint64_t *)&v17[1] < v18)
    {
      v17[0] = 0;
      uint64_t result = read(sSettingsFd, (char *)v17 + 2, 2uLL);
      if (result != 2)
      {
        int v27 = 6;
        break;
      }
      uint64_t result = read(sSettingsFd, v17, 2uLL);
      if (result != 2)
      {
        int v27 = 6;
        break;
      }
      *(void *)&v17[1] += LOWORD(v17[0]) + 4;
      uint64_t v13 = *(void *)&v17[1];
      uint64_t result = lseek(sSettingsFd, LOWORD(v17[0]), 1);
      if (v13 != result)
      {
        int v27 = 6;
        break;
      }
    }
  }
  if (v27 == 6)
  {
    uint64_t result = ftruncate(sSettingsFd, 0);
    if (result)
    {
      uint64_t v16 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
      if (v16) {
        char v12 = v16 + 1;
      }
      else {
        char v12 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
      }
      int v11 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "otPlatSettingsInit", v12, 293, v11);
      handle_daemon_exit();
      exit(5);
    }
  }
  return result;
}

uint64_t __os_log_helper_16_2_3_8_32_8_32_4_0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)uint64_t result = 2;
  *(unsigned char *)(result + 1) = 3;
  *(unsigned char *)(result + 2) = 32;
  *(unsigned char *)(result + 3) = 8;
  *(void *)(result + 4) = a2;
  *(unsigned char *)(result + 12) = 32;
  *(unsigned char *)(result + 13) = 8;
  *(void *)(result + 14) = a3;
  *(unsigned char *)(result + 22) = 0;
  *(unsigned char *)(result + 23) = 4;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

uint64_t otPlatSettingsDeinit()
{
  uint64_t result = IsSystemDryRun();
  if ((result & 1) == 0 && sSettingsFd != -1)
  {
    os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
    if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
    {
      if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
      {
        __os_log_helper_16_2_2_8_32_4_0((uint64_t)v6, (uint64_t)"otPlatSettingsDeinit", sSettingsFd);
        _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: FileName: Deinit with fd = %d", v6, 0x12u);
      }
    }
    else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v5, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v5, 0x16u);
    }
    uint64_t result = close(sSettingsFd);
    if (result)
    {
      unsigned __int8 v3 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
      if (v3) {
        uint64_t v2 = v3 + 1;
      }
      else {
        uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
      }
      uint64_t v1 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "otPlatSettingsDeinit", v2, 311, v1);
      handle_daemon_exit();
      exit(5);
    }
    sSettingsFd = -1;
  }
  return result;
}

uint64_t otPlatSettingsGet(uint64_t a1, unsigned __int16 a2, int a3, void *a4, unsigned __int16 *a5)
{
  uint64_t v16 = a1;
  unsigned __int16 v15 = a2;
  int v14 = a3;
  uint64_t v13 = a4;
  char v12 = a5;
  unsigned int v11 = 23;
  if ((IsSystemDryRun() & 1) == 0) {
    unsigned int v11 = ot::Posix::PlatformSettingsGet(v16, v15, v14, v13, v12);
  }
  if (v11 == 6)
  {
    int v10 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v10) {
      __int16 v9 = v10 + 1;
    }
    else {
      __int16 v9 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v7 = v9;
    int v8 = 1;
    uint64_t v5 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatSettingsGet", v9, 339, v5);
    handle_daemon_exit();
    exit(v8);
  }
  return v11;
}

uint64_t ot::Posix::PlatformSettingsGet(uint64_t a1, unsigned __int16 a2, int a3, void *a4, unsigned __int16 *a5)
{
  uint64_t v15 = a1;
  unsigned __int16 v14 = a2;
  int v13 = a3;
  char v12 = a4;
  unsigned int v11 = a5;
  unsigned int v10 = 23;
  off_t v9 = lseek(sSettingsFd, 0, 2);
  *(void *)&v8[1] = lseek(sSettingsFd, 0, 0);
  if (*(void *)&v8[1] || v9 < 0)
  {
    return 6;
  }
  else
  {
    while (*(uint64_t *)&v8[1] < v9)
    {
      v8[0] = 0;
      if (read(sSettingsFd, (char *)v8 + 2, 2uLL) != 2) {
        return 6;
      }
      if (read(sSettingsFd, v8, 2uLL) != 2) {
        return 6;
      }
      if (HIWORD(v8[0]) == v14)
      {
        if (!v13)
        {
          unsigned int v10 = 0;
          if (v11)
          {
            if (!v12 || (LOWORD(v8[0]) > (int)*v11 ? (unsigned __int16 v7 = *v11) : (unsigned __int16 v7 = v8[0]), read(sSettingsFd, v12, v7) == v7)) {
              unsigned __int16 *v11 = v8[0];
            }
            else {
              return 6;
            }
          }
          return v10;
        }
        --v13;
      }
      *(void *)&v8[1] += LOWORD(v8[0]) + 4;
      uint64_t v6 = *(void *)&v8[1];
      if (v6 != lseek(sSettingsFd, LOWORD(v8[0]), 1)) {
        return 6;
      }
    }
  }
  return v10;
}

uint64_t otPlatSettingsSet(uint64_t a1, __int16 a2, const void *a3, unsigned __int16 a4)
{
  return 0;
}

void ot::Posix::PlatformSettingsSet(uint64_t a1, __int16 a2, const void *a3, unsigned __int16 a4)
{
  uint64_t v22 = a1;
  __long long buf = a2;
  os_log_type_t v20 = a3;
  unsigned __int16 v19 = a4;
  int v18 = -1;
  int v16 = ot::Posix::PlatformSettingsDelete(a1, a2, -1, &v18);
  if (v16 && v16 != 23) {
    __assert_rtn("PlatformSettingsSet", "settings.cpp", 481, "false");
  }
  BOOL v4 = write(v18, &__buf, 2uLL) != 2;
  if (v4 || write(v18, &v19, 2uLL) != 2 || (ssize_t v5 = write(v18, v20, v19), v5 != v19))
  {
    uint64_t v17 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v17) {
      uint64_t v15 = v17 + 1;
    }
    else {
      uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    int v13 = v15;
    int v14 = 1;
    char v12 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "PlatformSettingsSet", v15, 488, v12);
    handle_daemon_exit();
    exit(v14);
  }
  swapPersist(v22, v18, v6, v7, v8, v9, v10, v11);
}

uint64_t otPlatSettingsAdd(uint64_t a1, __int16 a2, const void *a3, unsigned __int16 a4)
{
  return 0;
}

void ot::Posix::PlatformSettingsAdd(uint64_t a1, __int16 a2, const void *a3, unsigned __int16 a4)
{
  uint64_t v30 = a1;
  __long long buf = a2;
  __int16 v28 = a3;
  unsigned __int16 v27 = a4;
  off_t v26 = lseek(sSettingsFd, 0, 2);
  int v25 = swapOpen(v30, v4, v5, v6, v7, v8, v9, v10);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v32, (uint64_t)"PlatformSettingsAdd", v25);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: FileName: Swap file updated with fd = %d", v32, 0x12u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v31, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v31, 0x16u);
  }
  if (v26 > 0)
  {
    if (lseek(sSettingsFd, 0, 0))
    {
      uint64_t v23 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
      if (v23) {
        os_log_t v21 = v23 + 1;
      }
      else {
        os_log_t v21 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
      }
      uint64_t v11 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "PlatformSettingsAdd", v21, 504, v11);
      handle_daemon_exit();
      exit(5);
    }
    swapWrite(v30, v25, v26);
  }
  if (write(v25, &__buf, 2uLL) != 2 || write(v25, &v27, 2uLL) != 2 || (ssize_t v12 = write(v25, v28, v27), v12 != v27))
  {
    uint64_t v22 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v22) {
      os_log_type_t v20 = v22 + 1;
    }
    else {
      os_log_type_t v20 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    unsigned __int16 v19 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "PlatformSettingsAdd", v20, 511, v19);
    handle_daemon_exit();
    exit(1);
  }
  swapPersist(v30, v25, v13, v14, v15, v16, v17, v18);
}

uint64_t otPlatSettingsDelete(uint64_t a1, __int16 a2, int a3)
{
  return ot::Posix::PlatformSettingsDelete(a1, a2, a3, 0);
}

uint64_t ot::Posix::PlatformSettingsDelete(uint64_t a1, __int16 a2, int a3, _DWORD *a4)
{
  uint64_t v39 = a1;
  __int16 v38 = a2;
  int v37 = a3;
  uint64_t v36 = a4;
  unsigned int v35 = 23;
  off_t v34 = lseek(sSettingsFd, 0, 2);
  off_t v33 = lseek(sSettingsFd, 0, 0);
  int v32 = swapOpen(v39, v4, v5, v6, v7, v8, v9, v10);
  os_log_t logging_obg = (os_log_t)log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    os_log_t v30 = logging_obg;
    os_log_type_t v29 = OS_LOG_TYPE_INFO;
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v41, (uint64_t)"PlatformSettingsDelete", v32);
      _os_log_impl((void *)&_mh_execute_header, v30, v29, "%s: FileName: Swap file delete with fd = %d", v41, 0x12u);
    }
  }
  else if (!logging_obg)
  {
    os_log_t v28 = (os_log_t)&_os_log_default;
    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_2_8_32_8_32((uint64_t)v40, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
      _os_log_error_impl((void *)&_mh_execute_header, v28, v27, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v40, 0x16u);
    }
  }
  if (v32 == -1) {
    __assert_rtn("PlatformSettingsDelete", "settings.cpp", 525, "swapFd != -1");
  }
  if (v33) {
    __assert_rtn("PlatformSettingsDelete", "settings.cpp", 526, "offset == 0");
  }
  if (v34 >= 0)
  {
    while (1)
    {
      while (1)
      {
        if (v33 >= v34) {
          goto LABEL_35;
        }
        __long long buf = 0;
        unsigned __int16 v25 = 0;
        if (read(sSettingsFd, &__buf, 2uLL) != 2)
        {
          unsigned int v35 = 6;
          goto LABEL_35;
        }
        if (read(sSettingsFd, &v25, 2uLL) != 2)
        {
          unsigned int v35 = 6;
          goto LABEL_35;
        }
        v33 += v25 + 4;
        if (v38 == __buf) {
          break;
        }
LABEL_30:
        ssize_t v23 = write(v32, &__buf, 2uLL);
        if (v23 != 2)
        {
          handle_settings_captureABC(1, v23);
          __assert_rtn("PlatformSettingsDelete", "settings.cpp", 571, "rval == sizeof(key)");
        }
        ssize_t v24 = write(v32, &v25, 2uLL);
        if (v24 != 2)
        {
          handle_settings_captureABC(0, v24);
          __assert_rtn("PlatformSettingsDelete", "settings.cpp", 581, "rval == sizeof(length)");
        }
        swapWrite(v39, v32, v25);
      }
      if (!v37)
      {
        off_t v21 = v33;
        if (v21 == lseek(sSettingsFd, v25, 1))
        {
          swapWrite(v39, v32, v34 - v33);
          unsigned int v35 = 0;
        }
        else
        {
          unsigned int v35 = 6;
        }
        goto LABEL_35;
      }
      if (v37 != -1)
      {
        --v37;
        goto LABEL_30;
      }
      off_t v20 = v33;
      if (v20 != lseek(sSettingsFd, v25, 1))
      {
        unsigned int v35 = 6;
        goto LABEL_35;
      }
      unsigned int v35 = 0;
    }
  }
  unsigned int v35 = 6;
LABEL_35:
  if (v35 == 6)
  {
    uint64_t v22 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v22) {
      unsigned __int16 v19 = v22 + 1;
    }
    else {
      unsigned __int16 v19 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v17 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "PlatformSettingsDelete", v19, 588, v17);
    handle_daemon_exit();
    exit(1);
  }
  if (v36)
  {
    *uint64_t v36 = v32;
  }
  else if (v35)
  {
    if (v35 == 23) {
      swapDiscard(v39, v32);
    }
  }
  else
  {
    swapPersist(v39, v32, v11, v12, v13, v14, v15, v16);
  }
  return v35;
}

uint64_t otPlatSettingsWipe()
{
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_2_8_32_4_0((uint64_t)v6, (uint64_t)"otPlatSettingsWipe", sSettingsFd);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: FileName: wipe with fd = %d", v6, 0x12u);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v5, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v5, 0x16u);
  }
  uint64_t result = ftruncate(sSettingsFd, 0);
  if (result)
  {
    unsigned __int8 v3 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v3) {
      uint64_t v2 = v3 + 1;
    }
    else {
      uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v1 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "otPlatSettingsWipe", v2, 408, v1);
    handle_daemon_exit();
    exit(5);
  }
  return result;
}

void swapPersist(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  getSettingsFileName(a1, (char *)&__from, 1, a4, a5, a6, a7, a8);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_3_8_32_8_32_4_0((uint64_t)v31, (uint64_t)"swapPersist", (uint64_t)&__from, a2);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: FileName: %s swap file opened with fd = %d", v31, 0x1Cu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v30, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v30, 0x16u);
  }
  getSettingsFileName(a1, (char *)&__to, 0, v8, v9, v10, v11, v12);
  ssize_t v24 = log_get_logging_obg("com.apple.threadradiod", "default");
  if (v24 && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_3_8_32_8_32_4_0((uint64_t)v29, (uint64_t)"swapPersist", (uint64_t)&__to, sSettingsFd);
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s: FileName: %s data fiile opened with fd = %d", v29, 0x1Cu);
    }
  }
  else if (!v24 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v28, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v28, 0x16u);
  }
  if (close(sSettingsFd))
  {
    ssize_t v23 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v23) {
      off_t v20 = v23 + 1;
    }
    else {
      off_t v20 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v13 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "swapPersist", v20, 178, v13);
    handle_daemon_exit();
    exit(5);
  }
  if (fsync(a2))
  {
    uint64_t v22 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v22) {
      unsigned __int16 v19 = v22 + 1;
    }
    else {
      unsigned __int16 v19 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v15 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "swapPersist", v19, 179, v15);
    handle_daemon_exit();
    exit(5);
  }
  rename(&__from, &__to, v14);
  if (v16)
  {
    off_t v21 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v21) {
      uint64_t v18 = v21 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v17 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "swapPersist", v18, 180, v17);
    handle_daemon_exit();
    exit(5);
  }
  sSettingsFd = a2;
}

uint64_t swapOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  getSettingsFileName(a1, v16, 1, a4, a5, a6, a7, a8);
  unsigned int v13 = open(v16, 16778754, 384);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_3_8_32_8_32_4_0((uint64_t)v15, (uint64_t)"swapOpen", (uint64_t)v16, v13);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: FileName: %s swap file opened with fd = %d", v15, 0x1Cu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v14, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v14, 0x16u);
  }
  if (v13 == -1)
  {
    uint64_t v11 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v11) {
      uint64_t v10 = v11 + 1;
    }
    else {
      uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v8 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "swapOpen", v10, 131, v8);
    handle_daemon_exit();
    exit(5);
  }
  return v13;
}

ssize_t swapWrite(uint64_t a1, int a2, unsigned __int16 a3)
{
  while (a3)
  {
    if (a3 < 0x200uLL) {
      unsigned __int16 v6 = a3;
    }
    else {
      unsigned __int16 v6 = 512;
    }
    ssize_t v8 = read(sSettingsFd, __buf, v6);
    if (v8 <= 0)
    {
      uint64_t v7 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
      if (v7) {
        uint64_t v5 = v7 + 1;
      }
      else {
        uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
      }
      unsigned __int8 v3 = otExitCodeToString(1u);
      otLogCritPlat("%s() at %s:%d: %s", "swapWrite", v5, 155, v3);
      handle_daemon_exit();
      exit(1);
    }
    ssize_t result = write(a2, __buf, (unsigned __int16)v8);
    if (result != (unsigned __int16)v8) {
      __assert_rtn("swapWrite", "settings.cpp", 158, "rval == count");
    }
    a3 -= v8;
  }
  return result;
}

uint64_t swapDiscard(uint64_t a1, int a2)
{
  if (close(a2))
  {
    uint64_t v14 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v14) {
      uint64_t v11 = v14 + 1;
    }
    else {
      uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v7 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "swapDiscard", v11, 189, v7);
    handle_daemon_exit();
    exit(5);
  }
  getSettingsFileName(a1, v19, 1, v2, v3, v4, v5, v6);
  os_log_t logging_obg = log_get_logging_obg("com.apple.threadradiod", "default");
  if (logging_obg && (syslog_is_the_mask_enabled(6) & 1) != 0)
  {
    if (os_log_type_enabled(logging_obg, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_3_8_32_8_32_4_0((uint64_t)v18, (uint64_t)"swapDiscard", (uint64_t)v19, a2);
      _os_log_impl((void *)&_mh_execute_header, logging_obg, OS_LOG_TYPE_INFO, "%s: FileName: %s swap file closed and unlinked with fd = %d", v18, 0x1Cu);
    }
  }
  else if (!logging_obg && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    __os_log_helper_16_2_2_8_32_8_32((uint64_t)v17, (uint64_t)"com.apple.wpantund.ncp", (uint64_t)"default");
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Logging1 Module is not defined for SubSystem: %s, Category: %s", v17, 0x16u);
  }
  uint64_t result = unlink(v19);
  if (result)
  {
    uint64_t v12 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp", 47);
    if (v12) {
      uint64_t v10 = v12 + 1;
    }
    else {
      uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/settings.cpp";
    }
    uint64_t v9 = otExitCodeToString(5u);
    otLogCritPlat("%s() at %s:%d: %s", "swapDiscard", v10, 194, v9);
    handle_daemon_exit();
    exit(5);
  }
  return result;
}

unint64_t ot::Encoding::BigEndian::HostSwap64(ot::Encoding::BigEndian *this)
{
  return ot::Encoding::Swap64((unint64_t)this);
}

{
  return ot::Encoding::BigEndian::HostSwap64(this);
}

unint64_t ot::Encoding::BigEndian::ReadUint64(ot::Encoding::BigEndian *this, const unsigned __int8 *a2)
{
  return _byteswap_uint64(*(void *)this);
}

{
  return ot::Encoding::BigEndian::ReadUint64(this, a2);
}

unint64_t ot::Encoding::Swap64(unint64_t this)
{
  return ((unint64_t)((unsigned __int16)this & 0xFF00) << 40) | ((unint64_t)this << 56) | ((this & 0xFF0000) << 24) | ((unint64_t)(this & 0xFF000000) << 8) | ((this & 0xFF00000000) >> 8) | ((this & 0xFF0000000000) >> 24) | ((this & 0xFF000000000000) >> 40) | ((this & 0xFF00000000000000) >> 56);
}

{
  return ot::Encoding::Swap64(this);
}

ot::Posix::ConfigFile *ot::Posix::ConfigFile::ConfigFile(ot::Posix::ConfigFile *this, const char *a2)
{
  uint64_t v11 = this;
  uint64_t v10 = a2;
  ssize_t v8 = this;
  uint64_t v12 = this;
  *(void *)this = "#";
  *((void *)this + 1) = ".swap";
  *((void *)this + 2) = v10;
  if (!*((void *)this + 2)) {
    __assert_rtn("ConfigFile", "config_file.cpp", 49, "mFilePath != nullptr");
  }
  size_t v7 = strlen(*((const char **)v8 + 2));
  if (v7 + strlen(*((const char **)v8 + 1)) >= 0xFF)
  {
    uint64_t v9 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
    if (v9) {
      uint64_t v6 = v9 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
    }
    uint64_t v4 = v6;
    int v5 = 1;
    uint64_t v2 = otExitCodeToString(1u);
    otLogCritPlat("%s() at %s:%d: %s", "ConfigFile", v6, 50, v2);
    handle_daemon_exit();
    exit(v5);
  }
  return v12;
}

{
  ot::Posix::ConfigFile::ConfigFile(this, a2);
  return this;
}

uint64_t ot::Posix::ConfigFile::Get(const char **this, const char *a2, int *a3, char *a4, int a5)
{
  unsigned int v19 = 0;
  uint64_t v18 = 0;
  if (a2 && a4)
  {
    uint64_t v18 = fopen(this[2], "r");
    if (v18)
    {
      if (fseek(v18, *a3, 0))
      {
        uint64_t v15 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
        if (v15) {
          uint64_t v10 = v15 + 1;
        }
        else {
          uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
        }
        int v5 = otExitCodeToString(5u);
        otLogCritPlat("%s() at %s:%d: %s", "Get", v10, 63, v5);
        handle_daemon_exit();
        exit(5);
      }
      while (1)
      {
        uint64_t v17 = fgets(__s, 513, v18);
        if (!v17) {
          break;
        }
        if (strlen(__s) != 512)
        {
          strtok(__s, *this);
          uint64_t v14 = strstr[abi:nn180100](__s, "=");
          if (v14)
          {
            char *v14 = 0;
            ot::Posix::ConfigFile::Strip((ot::Posix::ConfigFile *)this, __s);
            if (!strcmp(a2, __s))
            {
              unsigned int v13 = v14 + 1;
              ot::Posix::ConfigFile::Strip((ot::Posix::ConfigFile *)this, v14 + 1);
              if (a5 - 1 >= (int)strlen(v14 + 1)) {
                int v9 = strlen(v13);
              }
              else {
                int v9 = a5 - 1;
              }
              memcpy(a4, v13, v9);
              a4[v9] = 0;
              break;
            }
          }
        }
      }
      if (v17)
      {
        uint64_t v16 = ftell(v18);
        if (v16 < 0)
        {
          uint64_t v12 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
          if (v12) {
            ssize_t v8 = v12 + 1;
          }
          else {
            ssize_t v8 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
          }
          uint64_t v6 = otExitCodeToString(5u);
          otLogCritPlat("%s() at %s:%d: %s", "Get", v8, 104, v6);
          handle_daemon_exit();
          exit(5);
        }
        *a3 = v16;
      }
      else
      {
        unsigned int v19 = 23;
      }
    }
    else
    {
      unsigned int v19 = 23;
    }
  }
  else
  {
    unsigned int v19 = 7;
  }
  if (v18) {
    fclose(v18);
  }
  return v19;
}

void ot::Posix::ConfigFile::Strip(ot::Posix::ConfigFile *this, char *a2)
{
  int v4 = 0;
  for (int i = 0; a2[i]; ++i)
  {
    if (a2[i] != 32 && a2[i] != 13 && a2[i] != 10)
    {
      uint64_t v2 = v4++;
      a2[v2] = a2[i];
    }
  }
  a2[v4] = 0;
}

uint64_t ot::Posix::ConfigFile::Add(ot::Posix::ConfigFile *this, const char *a2, const char *a3)
{
  int v32 = this;
  uint64_t v31 = a2;
  os_log_t v30 = a3;
  off_t v20 = this;
  unsigned int v29 = 0;
  os_log_t v28 = 0;
  os_log_type_t v27 = 0;
  off_t v26 = 0;
  if (a2 && v30)
  {
    os_log_type_t v27 = strdup(*((const char **)v20 + 2));
    if (!v27)
    {
      ssize_t v24 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
      if (v24) {
        unsigned int v19 = v24 + 1;
      }
      else {
        unsigned int v19 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
      }
      uint64_t v17 = v19;
      int v18 = 5;
      uint64_t v3 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Add", v19, 125, v3);
      handle_daemon_exit();
      exit(v18);
    }
    off_t v26 = dirname(v27);
    if (stat(v26, &v25) == -1 && mkdir(v26, 0x1B0u))
    {
      ssize_t v23 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
      if (v23) {
        uint64_t v16 = v23 + 1;
      }
      else {
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
      }
      uint64_t v14 = v16;
      int v15 = 5;
      int v4 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Add", v16, 130, v4);
      handle_daemon_exit();
      exit(v15);
    }
    os_log_t v28 = fopen(*((const char **)v20 + 2), "at");
    if (!v28)
    {
      uint64_t v22 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
      if (v22) {
        unsigned int v13 = v22 + 1;
      }
      else {
        unsigned int v13 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
      }
      uint64_t v11 = v13;
      int v12 = 5;
      int v5 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Add", v13, 133, v5);
      handle_daemon_exit();
      exit(v12);
    }
    if (fprintf(v28, "%s=%s\n", v31, v30) <= 0)
    {
      off_t v21 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
      if (v21) {
        uint64_t v10 = v21 + 1;
      }
      else {
        uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
      }
      ssize_t v8 = v10;
      int v9 = 5;
      uint64_t v6 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Add", v10, 134, v6);
      handle_daemon_exit();
      exit(v9);
    }
  }
  else
  {
    unsigned int v29 = 7;
  }
  if (v28) {
    fclose(v28);
  }
  if (v27) {
    free(v27);
  }
  return v29;
}

uint64_t ot::Posix::ConfigFile::Clear(const char **this, const char *a2, std::error_code *a3)
{
  unsigned int v21 = 0;
  off_t v20 = 0;
  unsigned int v19 = 0;
  if (a2)
  {
    off_t v20 = fopen(this[2], "r");
    if (!v20)
    {
      int v18 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
      if (v18) {
        int v12 = v18 + 1;
      }
      else {
        int v12 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
      }
      uint64_t v3 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Clear", v12, 159, v3);
      handle_daemon_exit();
      exit(5);
    }
    snprintf((char *)__str, 0xFFuLL, "%s%s", this[2], this[1]);
    unsigned int v19 = fopen((const char *)__str, "w+");
    if (!v19)
    {
      uint64_t v17 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
      if (v17) {
        uint64_t v11 = v17 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
      }
      int v4 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Clear", v11, 161, v4);
      handle_daemon_exit();
      exit(5);
    }
    while (fgets(v23, 512, v20))
    {
      uint64_t v16 = strstr[abi:nn180100](v23, *this);
      int v15 = strstr[abi:nn180100](v23, a2);
      BOOL v10 = 0;
      if (v15)
      {
        BOOL v9 = 1;
        if (v16) {
          BOOL v9 = v15 < v16;
        }
        BOOL v10 = v9;
      }
      if (!v10) {
        fputs(v23, v19);
      }
    }
  }
  else
  {
    unsigned int v21 = 7;
  }
  if (v20) {
    fclose(v20);
  }
  if (v19) {
    fclose(v19);
  }
  if (!v21)
  {
    rename(__str, (const std::__fs::filesystem::path *)this[2], a3);
    if (v5)
    {
      uint64_t v14 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp", 47);
      if (v14) {
        ssize_t v8 = v14 + 1;
      }
      else {
        ssize_t v8 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/config_file.cpp";
      }
      uint64_t v6 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Clear", v8, 194, v6);
      handle_daemon_exit();
      exit(5);
    }
  }
  return v21;
}

uint64_t ot::Posix::PowerUpdater::SetRegion(const char **this, __int16 a2)
{
  uint64_t v41 = this;
  __int16 v40 = a2;
  unsigned int updated = 0;
  int v38 = 0;
  ot::Power::Domain::Domain((ot::Power::Domain *)v43);
  if (ot::Posix::PowerUpdater::GetDomain(this, v40, (ot::Power::Domain *)v43)
    && ot::Posix::PowerUpdater::GetDomain(this, 22359, (ot::Power::Domain *)v43))
  {
    unsigned int updated = 1;
  }
  else
  {
    while (!ot::Posix::PowerUpdater::GetNextTargetPower(this, (const ot::Power::Domain *)v43, &v38, (ot::Power::TargetPower *)v37))
    {
      ot::Power::TargetPower::ToString((ot::Power::TargetPower *)v37, (ot::StringWriter *)v42);
      char v16 = ot::String<(unsigned short)12>::AsCString((uint64_t)v42);
      otLogInfoPlat("Update target power: %s\r\n", v17, v18, v19, v20, v21, v22, v23, v16);
      for (unsigned __int8 i = ot::Power::TargetPower::GetChannelStart((ot::Power::TargetPower *)v37);
            i <= (int)ot::Power::TargetPower::GetChannelEnd((ot::Power::TargetPower *)v37);
            ++i)
      {
        uint64_t v34 = gInstance;
        __int16 TargetPower = ot::Power::TargetPower::GetTargetPower((ot::Power::TargetPower *)v37);
        unsigned int updated = otPlatRadioSetChannelTargetPower(v34, i, TargetPower, v25, v26, v27, v28, v29);
        if (updated) {
          goto LABEL_12;
        }
      }
    }
    unsigned int updated = ot::Posix::PowerUpdater::UpdateCalibratedPower(this, v9, v10, v11, v12, v13, v14, v15);
    if (!updated) {
      *((_WORD *)this + 48) = v40;
    }
  }
LABEL_12:
  if (updated)
  {
    unsigned int v32 = HIBYTE(v40);
    unsigned int v33 = v40;
    os_log_t v30 = otThreadErrorToString(updated);
    otLogCritPlat("Set region \"%c%c\" failed, Error: %s", v32, v33, v30);
  }
  else
  {
    otLogInfoPlat("Set region \"%c%c\" successfully", v2, v3, v4, v5, v6, v7, v8, SHIBYTE(v40));
  }
  return updated;
}

ot::Power::Domain *ot::Power::Domain::Domain(ot::Power::Domain *this)
{
  return this;
}

uint64_t ot::Posix::PowerUpdater::GetDomain(const char **this, __int16 a2, ot::Power::Domain *a3)
{
  uint64_t v12 = this;
  __int16 v11 = a2;
  uint64_t v10 = a3;
  unsigned int v9 = 23;
  int v8 = 0;
  while (!ot::Posix::ConfigFile::Get(this + 9, this[4], &v8, __str, 512))
  {
    if (strtok(__str, this[5]))
    {
      while (1)
      {
        __s = strtok(0, this[5]);
        if (!__s) {
          break;
        }
        if (strlen(__s) == 2)
        {
          __int16 v3 = ot::Posix::PowerUpdater::StringToRegionCode((ot::Posix::PowerUpdater *)this, __s);
          if (v11 == v3)
          {
            unsigned int v9 = ot::Power::Domain::Set(v10, __str);
            goto LABEL_10;
          }
        }
      }
    }
  }
LABEL_10:
  if (v9)
  {
    uint64_t v4 = otThreadErrorToString(v9);
    otLogCritPlat("Get domain failed, Error: %s", v4);
  }
  return v9;
}

uint64_t ot::Posix::PowerUpdater::GetNextTargetPower(const char **this, const ot::Power::Domain *a2, int *a3, ot::Power::TargetPower *a4)
{
  uint64_t v13 = this;
  uint64_t v12 = (const char *)a2;
  __int16 v11 = a3;
  uint64_t v10 = a4;
  unsigned int v9 = 23;
  int v8 = 0;
  __lasts = 0;
  while (!ot::Posix::ConfigFile::Get(this + 9, this[3], v11, __str, 512))
  {
    int v8 = strtok_r(__str, this[5], &__lasts);
    if (v8 && !ot::Power::Domain::operator!=(v12, v8))
    {
      unsigned int v9 = ot::Power::TargetPower::FromString(v10, __lasts);
      if (v9)
      {
        uint64_t v4 = otThreadErrorToString(v9);
        otLogCritPlat("Read target power failed, Error: %s", v4);
      }
      return v9;
    }
  }
  return v9;
}

uint64_t ot::String<(unsigned short)12>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)12>::AsCString(a1);
}

uint64_t ot::Power::TargetPower::GetChannelStart(ot::Power::TargetPower *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Power::TargetPower::GetChannelStart(this);
}

uint64_t ot::Power::TargetPower::GetChannelEnd(ot::Power::TargetPower *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Power::TargetPower::GetChannelEnd(this);
}

uint64_t ot::Power::TargetPower::GetTargetPower(ot::Power::TargetPower *this)
{
  return *((__int16 *)this + 1);
}

{
  return ot::Power::TargetPower::GetTargetPower(this);
}

uint64_t ot::Posix::PowerUpdater::UpdateCalibratedPower(const char **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v33 = this;
  int v31 = 0;
  os_log_t v30 = this + 6;
  unsigned int v32 = otPlatRadioClearCalibratedPowers(gInstance, a2, a3, a4, a5, a6, a7, a8);
  if (!v32)
  {
    if (ot::Posix::ConfigFile::Get(v30, this[2], &v31, v36, 512)) {
      os_log_t v30 = this + 9;
    }
    int v31 = 0;
    while (!ot::Posix::ConfigFile::Get(v30, this[2], &v31, v36, 512))
    {
      unsigned int v32 = ot::Power::CalibratedPower::FromString((ot::Power::CalibratedPower *)v35, v36);
      if (v32) {
        break;
      }
      ot::Power::CalibratedPower::ToString((ot::Power::CalibratedPower *)v35, (ot::StringWriter *)v34);
      char v8 = ot::String<(unsigned short)53>::AsCString((uint64_t)v34);
      otLogInfoPlat("Update calibrated power: %s\r\n", v9, v10, v11, v12, v13, v14, v15, v8);
      for (unsigned __int8 i = ot::Power::CalibratedPower::GetChannelStart((ot::Power::CalibratedPower *)v35);
            i <= (int)ot::Power::CalibratedPower::GetChannelEnd((ot::Power::CalibratedPower *)v35);
            ++i)
      {
        uint64_t v27 = gInstance;
        __int16 ActualPower = ot::Power::CalibratedPower::GetActualPower((ot::Power::CalibratedPower *)v35);
        RawPowerSetting = (ot::Power::RawPowerSetting *)ot::Power::CalibratedPower::GetRawPowerSetting((ot::Power::CalibratedPower *)v35);
        ot::Power::RawPowerSetting::GetData(RawPowerSetting);
        uint64_t v26 = v17;
        uint64_t v18 = (ot::Power::RawPowerSetting *)ot::Power::CalibratedPower::GetRawPowerSetting((ot::Power::CalibratedPower *)v35);
        unsigned __int16 Length = ot::Power::RawPowerSetting::GetLength(v18);
        unsigned int v32 = otPlatRadioAddCalibratedPower(v27, i, ActualPower, v26, Length, v20, v21, v22);
        if (v32) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_12:
  if (v32)
  {
    uint64_t v23 = otThreadErrorToString(v32);
    otLogCritPlat("Update calibrated power table failed, Error: %s", v23);
  }
  return v32;
}

uint64_t ot::String<(unsigned short)53>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)53>::AsCString(a1);
}

uint64_t ot::Power::CalibratedPower::GetChannelStart(ot::Power::CalibratedPower *this)
{
  return *(unsigned __int8 *)this;
}

{
  return ot::Power::CalibratedPower::GetChannelStart(this);
}

uint64_t ot::Power::CalibratedPower::GetChannelEnd(ot::Power::CalibratedPower *this)
{
  return *((unsigned __int8 *)this + 1);
}

{
  return ot::Power::CalibratedPower::GetChannelEnd(this);
}

uint64_t ot::Power::CalibratedPower::GetActualPower(ot::Power::CalibratedPower *this)
{
  return *((__int16 *)this + 1);
}

{
  return ot::Power::CalibratedPower::GetActualPower(this);
}

uint64_t ot::Power::CalibratedPower::GetRawPowerSetting(ot::Power::CalibratedPower *this)
{
  return (uint64_t)this + 4;
}

{
  return ot::Power::CalibratedPower::GetRawPowerSetting(this);
}

uint64_t ot::Power::RawPowerSetting::GetLength(ot::Power::RawPowerSetting *this)
{
  return *((unsigned __int16 *)this + 8);
}

{
  return ot::Power::RawPowerSetting::GetLength(this);
}

uint64_t ot::Posix::PowerUpdater::StringToRegionCode(ot::Posix::PowerUpdater *this, const char *a2)
{
  return _byteswap_ushort(*(_WORD *)a2);
}

{
  return ot::Posix::PowerUpdater::StringToRegionCode(this, a2);
}

BOOL ot::Power::Domain::operator!=(const char *a1, const char *a2)
{
  return !a2 || strcmp(a1, a2) != 0;
}

{
  return ot::Power::Domain::operator!=(a1, a2);
}

unsigned char *ot::Power::Domain::Domain(unsigned char *this)
{
  *this = 0;
  return this;
}

long long *processOtNotifyEvent(RcpHostContext *a1, void *a2)
{
  RcpHostContext = (RcpHostContext *)RcpHostContext::GetRcpHostContext(a1);
  return RcpHostContext::ot_event_handler(RcpHostContext, (uint64_t)a1);
}

uint64_t RcpHostContext::GetRcpHostContext(RcpHostContext *this)
{
  if (!RcpHostContext::sRcpHostContext) {
    __assert_rtn("GetRcpHostContext", "host_context.h", 276, "sRcpHostContext != nullptr");
  }
  return RcpHostContext::sRcpHostContext;
}

{
  return RcpHostContext::GetRcpHostContext(this);
}

unsigned char *platformInit(uint64_t a1)
{
  platformBacktraceInit();
  platformAlarmInit(*(_DWORD *)(a1 + 40), *(unsigned int *)(a1 + 36), v1, v2, v3, v4, v5, v6);
  uint64_t v7 = (const char *)get802154RadioUrl(a1);
  uint64_t result = platformRadioInit(v7);
  if ((*(unsigned char *)(a1 + 45) & 1) == 0)
  {
    platformRandomInit(result);
    platformBackboneInit(*(const char **)a1);
    gNetifCFStringRef Name = 0;
    uint64_t v9 = (ot::Posix::Udp *)platformNetifInit(a1);
    uint64_t v11 = ot::Posix::Udp::Get(v9);
    char ThreadNetifName = otSysGetThreadNetifName();
    return (unsigned char *)ot::Posix::Udp::Init((uint64_t)v11, ThreadNetifName);
  }
  return result;
}

uint64_t get802154RadioUrl(uint64_t a1)
{
  uint64_t v7 = 0;
  for (unsigned __int8 i = 0; i < (int)*(unsigned __int8 *)(a1 + 32); ++i)
  {
    ot::Posix::RadioUrl::RadioUrl((ot::Posix::RadioUrl *)v9, *(const char **)(a1 + 16 + 8 * i));
    Protocol = (const char *)ot::Url::Url::GetProtocol((ot::Url::Url *)v9);
    if (strcmp(Protocol, "trel"))
    {
      uint64_t v7 = *(void *)(a1 + 16 + 8 * i);
      break;
    }
  }
  if (!v7)
  {
    uint64_t v5 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/system.cpp", 47);
    if (v5) {
      uint64_t v4 = v5 + 1;
    }
    else {
      uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/system.cpp";
    }
    uint64_t v2 = otExitCodeToString(2u);
    otLogCritPlat("%s() at %s:%d: %s", "get802154RadioUrl", v4, 111, v2);
    handle_daemon_exit();
    exit(2);
  }
  return v7;
}

void platformSetUp(void)
{
  if ((gDryRun & 1) == 0)
  {
    platformBackboneSetUp();
    uint64_t v0 = (ot::Posix::Udp *)platformNetifSetUp();
    uint64_t v1 = ot::Posix::Udp::Get(v0);
    uint64_t v2 = (ot::Posix::Daemon *)ot::Posix::Udp::SetUp((ot::Posix::Udp *)v1);
    uint64_t v3 = (ot::Posix::Daemon *)ot::Posix::Daemon::Get(v2);
    ot::Posix::Daemon::EnableCliForXpc(v3);
    if (otSetStateChangedCallback(gInstance, (void (*)(unint64_t, void *))processStateChange, gInstance))
    {
      uint64_t v13 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/system.cpp", 47);
      if (v13) {
        uint64_t v11 = v13 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/system.cpp";
      }
      if (otSetStateChangedCallback(gInstance, (void (*)(unint64_t, void *))processStateChange, gInstance) == 7)unsigned __int8 v4 = 2; {
      else
      }
        unsigned __int8 v4 = 1;
      uint64_t v5 = otExitCodeToString(v4);
      otLogCritPlat("%s() at %s:%d: %s", "platformSetUp", v11, 230, v5);
      handle_daemon_exit();
      if (otSetStateChangedCallback(gInstance, (void (*)(unint64_t, void *))processStateChange, gInstance) == 7)int v6 = 2; {
      else
      }
        int v6 = 1;
      exit(v6);
    }
    if (otSetStateChangedCallback(gInstance, (void (*)(unint64_t, void *))processOtNotifyEvent, 0))
    {
      uint64_t v12 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/system.cpp", 47);
      if (v12) {
        uint64_t v10 = v12 + 1;
      }
      else {
        uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/system.cpp";
      }
      if (otSetStateChangedCallback(gInstance, (void (*)(unint64_t, void *))processOtNotifyEvent, 0) == 7)unsigned __int8 v7 = 2; {
      else
      }
        unsigned __int8 v7 = 1;
      char v8 = otExitCodeToString(v7);
      otLogCritPlat("%s() at %s:%d: %s", "platformSetUp", v10, 233, v8);
      handle_daemon_exit();
      if (otSetStateChangedCallback(gInstance, (void (*)(unint64_t, void *))processOtNotifyEvent, 0) == 7)int v9 = 2; {
      else
      }
        int v9 = 1;
      exit(v9);
    }
  }
}

void processStateChange(int a1, uint64_t a2)
{
}

uint64_t otSysInit(uint64_t a1)
{
  if (gInstance) {
    __assert_rtn("otSysInit", "system.cpp", 241, "gInstance == nullptr");
  }
  uint64_t v1 = (ot::Instance *)platformInit(a1);
  gDryRun = *(unsigned char *)(a1 + 45) & 1;
  gInstance = (uint64_t)otInstanceInitSingle(v1);
  if (!gInstance) {
    __assert_rtn("otSysInit", "system.cpp", 247, "gInstance != nullptr");
  }
  platformSetUp();
  return gInstance;
}

ot::Posix::Daemon *platformTearDown(ot::Posix::Daemon *result)
{
  if ((gDryRun & 1) == 0)
  {
    uint64_t v1 = (ot::Posix::Daemon *)ot::Posix::Daemon::Get(result);
    ot::Posix::Daemon::TearDown(v1);
    uint64_t v3 = ot::Posix::Udp::Get(v2);
    unsigned __int8 v4 = ot::Posix::Udp::TearDown((ot::Posix::Udp *)v3);
    platformNetifTearDown(v4);
    return (ot::Posix::Daemon *)platformBackboneTearDown();
  }
  return result;
}

void platformDeinit(void)
{
  uint64_t v0 = (ot::Posix::Udp *)platformRadioDeinit();
  if ((gDryRun & 1) == 0)
  {
    uint64_t v1 = ot::Posix::Udp::Get(v0);
    ot::Posix::Udp::Deinit((ot::Posix::Udp *)v1);
    platformNetifDeinit();
    platformBackboneDeinit();
  }
}

void otSysDeinit(ot::Posix::Daemon *a1)
{
  if (!gInstance) {
    __assert_rtn("otSysDeinit", "system.cpp", 316, "gInstance != nullptr");
  }
  platformTearDown(a1);
  otInstanceFinalize(gInstance);
  gInstance = 0;
  platformDeinit();
}

BOOL otSysMainloopUpdate(ot::Posix::Mainloop::Manager *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)ot::Posix::Mainloop::Manager::Get(a1);
  ot::Posix::Mainloop::Manager::Update(v2, a2);
  platformAlarmUpdateTimeout(a2 + 392);
  platformNetifUpdateFdSet((const void *)a2, a2 + 128, (const void *)(a2 + 256), (_DWORD *)(a2 + 384));
  BOOL result = otTaskletsArePending((uint64_t)a1);
  if (result)
  {
    *(void *)(a2 + 392) = 0;
    *(_DWORD *)(a2 + 400) = 0;
  }
  return result;
}

uint64_t otSysMainloopPoll(uint64_t a1)
{
  return select(*(_DWORD *)(a1 + 384) + 1, (fd_set *)a1, (fd_set *)(a1 + 128), (fd_set *)(a1 + 256), (timeval *)(a1 + 392));
}

void otSysMainloopProcess(ot::Posix::Mainloop::Manager *a1, _DWORD *a2)
{
  uint64_t v2 = (void **)ot::Posix::Mainloop::Manager::Get(a1);
  ot::Posix::Mainloop::Manager::Process(v2, (uint64_t)a2);
  platformRadioProcess((uint64_t)a1, (uint64_t)a2, (uint64_t)(a2 + 32), v3, v4, v5, v6, v7);
  platformAlarmProcess((uint64_t)a1);
  platformNetifProcess(a2, (uint64_t)(a2 + 32), a2 + 64);
}

uint64_t IsSystemDryRun(void)
{
  return gDryRun & 1;
}

uint64_t ot::Url::Url::GetProtocol(ot::Url::Url *this)
{
  return *(void *)this;
}

{
  return ot::Url::Url::GetProtocol(this);
}

uint64_t __cxx_global_var_init_3()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init);
}

uint64_t __cxx_global_var_init_1_3()
{
  return boost::optional_ns::in_place_init_t::in_place_init_t((uint64_t)&boost::optional_ns::in_place_init_if);
}

uint64_t _GLOBAL__sub_I_system_cpp()
{
  return __cxx_global_var_init_1_3();
}

uint64_t otPlatUdpSocket(uint64_t a1)
{
  unsigned int v3 = 0;
  if (*(void *)(a1 + 56)) {
    __assert_rtn("otPlatUdpSocket", "udp.cpp", 227, "aUdpSocket->mHandle == nullptr");
  }
  int v2 = SocketWithCloseExec(30, 2, 17, 1);
  if (v2 >= 0) {
  else
  }
    return 1;
  return v3;
}

uint64_t anonymous namespace'::FdToHandle(uint64_t this)
{
  return (int)this;
}

uint64_t otPlatUdpClose(uint64_t a1, void *a2)
{
  unsigned int v4 = 0;
  if (*(void *)(a1 + 56))
  {
    if (close(v2)) {
      return 1;
    }
    else {
      *(void *)(a1 + 56) = 0;
    }
  }
  return v4;
}

uint64_t otPlatUdpBind(uint64_t a1, void *a2)
{
  uint64_t v13 = a1;
  unsigned int v12 = 0;
  int v11 = 0;
  if (!gNetifIndex) {
    __assert_rtn("otPlatUdpBind", "udp.cpp", 261, "gNetifIndex != 0");
  }
  if (!*(void *)(v13 + 56)) {
    __assert_rtn("otPlatUdpBind", "udp.cpp", 262, "aUdpSocket->mHandle != nullptr");
  }
  if (*(_WORD *)(v13 + 16))
  {
    int v11 = v2;
    uint64_t v8 = 0;
    sockaddr v9 = (sockaddr)0;
    int v10 = 0;
    int v6 = _OSSwapInt16(*(_WORD *)(v13 + 16));
    WORD1(v8) = v6;
    BYTE1(v8) = 30;
    sockaddr v9 = *(sockaddr *)v13;
    if (bind(v11, (const sockaddr *)&v8, 0x1Cu))
    {
      unsigned int v12 = 1;
    }
    else
    {
      int v7 = 1;
      if (setsockopt(v11, 41, 37, &v7, 4u))
      {
        unsigned int v12 = 1;
      }
      else if (setsockopt(v11, 41, 61, &v7, 4u))
      {
        unsigned int v12 = 1;
      }
    }
  }
  else
  {
    unsigned int v12 = 7;
  }
  if (v12 == 1)
  {
    unsigned int v3 = __error();
    unsigned int v4 = strerror(*v3);
    otLogCritPlat("Failed to bind UDP socket: %s", v4);
  }
  return v12;
}

uint64_t otPlatUdpBindToNetif (uint64_t a1, void *a2)
{
  uint64_t v19 = a1;
  int v18 = (int)a2;
  unsigned int v17 = 0;
  int v16 = 0;
  int v16 = v2;
  int v15 = 1;
  int v14 = 0;
  if (v18)
  {
    if (v18 == 1)
    {
      if (setsockopt(v16, 41, 125, &gNetifIndex, 4u))
      {
        unsigned int v17 = 1;
        goto LABEL_17;
      }
    }
    else if (v18 == 2)
    {
      if (setsockopt(v16, 41, 125, &gBackboneNetifIndex, 4u))
      {
        unsigned int v17 = 1;
        goto LABEL_17;
      }
      if (setsockopt(v16, 41, 10, &v15, 4u))
      {
        unsigned int v17 = 1;
        goto LABEL_17;
      }
    }
  }
  else
  {
    int v13 = 0;
    if (setsockopt(v16, 41, 125, &v13, 4u))
    {
      unsigned int v17 = 1;
      goto LABEL_17;
    }
  }
  if (setsockopt(v16, 41, 11, &v14, 4u)) {
    unsigned int v17 = 1;
  }
LABEL_17:
  if (v17)
  {
    char v12 = v16;
    unsigned int v3 = __error();
    strerror(*v3);
    otLogWarnPlat("otPlatUdpBindToNetif failed for fd:%d, netIdentifier:%d, errorno:%s", v4, v5, v6, v7, v8, v9, v10, v12);
  }
  return v17;
}

uint64_t otPlatUdpConnect(uint64_t a1)
{
  uint64_t v20 = a1;
  unsigned int v19 = 0;
  BOOL v14 = 0;
  if (!memcmp((const void *)(a1 + 18), &in6addr_any, 0x10uLL)) {
    BOOL v14 = *(_WORD *)(v20 + 34) == 0;
  }
  if (*(void *)(v20 + 56))
  {
    int v15 = v2;
    uint64_t v16 = 0;
    sockaddr v17 = (sockaddr)0;
    int v18 = 0;
    WORD1(v16) = _OSSwapInt16(*(_WORD *)(v20 + 34));
    if (v14)
    {
      BYTE1(v16) = 0;
    }
    else
    {
      BYTE1(v16) = 30;
      sockaddr v17 = *(sockaddr *)(v20 + 18);
    }
    if (connect(v15, (const sockaddr *)&v16, 0x1Cu) && *__error() == 47 && v14)
    {
      ot::Posix::Ip6Utils::Ip6AddressString::Ip6AddressString((ot::Posix::Ip6Utils::Ip6AddressString *)v21, (const void *)(v20 + 18));
      ot::Posix::Ip6Utils::Ip6AddressString::AsCString((ot::Posix::Ip6Utils::Ip6AddressString *)v21);
      char v13 = v3;
      uint64_t v4 = __error();
      strerror(*v4);
      otLogWarnPlat("Failed to connect to [%s]:%u: %s", v5, v6, v7, v8, v9, v10, v11, v13);
      return 1;
    }
  }
  else
  {
    return 7;
  }
  return v19;
}

uint64_t otPlatUdpSend(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = a1;
  uint64_t v17 = (uint64_t)a2;
  uint64_t v16 = a3;
  unsigned int v15 = 0;
  int v14 = 0;
  unsigned __int16 Length = 0;
  if (*(void *)(a1 + 56))
  {
    int v14 = v3;
    unsigned __int16 Length = otMessageGetLength(v17);
    if (Length == (unsigned __int16)otMessageRead(v17, 0, v19, Length))
    {
      if ((*(unsigned char *)(v16 + 49) & 0x10) != 0)
      {
        int v12 = 1;
        if (setsockopt(v14, 41, 11, &v12, 4u))
        {
          uint64_t v11 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp", 47);
          if (v11) {
            uint64_t v8 = v11 + 1;
          }
          else {
            uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp";
          }
          uint64_t v4 = otExitCodeToString(5u);
          otLogCritPlat("%s() at %s:%d: %s", "otPlatUdpSend", v8, 438, v4);
          handle_daemon_exit();
          exit(5);
        }
      }
      if ((*(unsigned char *)(v16 + 49) & 0x10) != 0)
      {
        int v10 = 0;
        if (setsockopt(v14, 41, 11, &v10, 4u))
        {
          uint64_t v9 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp", 47);
          if (v9) {
            uint64_t v7 = v9 + 1;
          }
          else {
            uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp";
          }
          uint64_t v5 = otExitCodeToString(5u);
          otLogCritPlat("%s() at %s:%d: %s", "otPlatUdpSend", v7, 447, v5);
          handle_daemon_exit();
          exit(5);
        }
      }
    }
    else
    {
      unsigned int v15 = 7;
    }
  }
  else
  {
    unsigned int v15 = 7;
  }
  if (!v15) {
    otMessageFree(v17);
  }
  return v15;
}

uint64_t anonymous namespace'::transmitPacket(int a1, uint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  int v25 = a1;
  uint64_t v24 = a2;
  unsigned __int16 v23 = a3;
  uint64_t v22 = (unsigned __int8 *)a4;
  uint64_t v21 = 128;
  uint64_t v17 = 0;
  unsigned int v13 = 0;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  int v20 = 0;
  WORD1(v18) = _OSSwapInt16(*(_WORD *)(a4 + 34));
  BYTE1(v18) = 30;
  long long v19 = *((_OWORD *)v22 + 1);
    int v20 = gNetifIndex;
  memset(__b, 0, sizeof(__b));
  v16[0] = v24;
  v16[1] = v23;
  v15.msg_name = &v18;
  v15.msg_namelen = 28;
  v15.msg_control = __b;
  v15.msg_controllen = 128;
  v15.msg_iov = (iovec *)v16;
  v15.msg_iovlen = 1;
  v15.msg_flags = 0;
  if (v22[48]) {
    int v12 = v22[48];
  }
  else {
    int v12 = 64;
  }
  if (v15.msg_controllen < 0xCuLL) {
    msg_control = 0;
  }
  else {
    msg_control = (unsigned int *)v15.msg_control;
  }
  msg_control[1] = 41;
  msg_control[2] = 47;
  unsigned int *msg_control = 16;
  msg_control[3] = v12;
  v17 += 16;
  {
    if (msg_control)
    {
      if ((void *)((unint64_t)msg_control + ((*msg_control + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12) <= (char *)v15.msg_control + v15.msg_controllen) {
        uint64_t v8 = (char *)msg_control + ((*msg_control + 3) & 0xFFFFFFFFFFFFFFFCLL);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8;
    }
    else
    {
      if (v15.msg_controllen < 0xCuLL) {
        int v10 = 0;
      }
      else {
        int v10 = (char *)v15.msg_control;
      }
      uint64_t v9 = v10;
    }
    *((_DWORD *)v9 + 1) = 41;
    *((_DWORD *)v9 + 2) = 46;
    *(_DWORD *)uint64_t v9 = 32;
    if ((v22[49] & 4) != 0) {
      int v7 = 0;
    }
    else {
      int v7 = gNetifIndex;
    }
    *(_OWORD *)(v9 + 12) = *(_OWORD *)v22;
    *((_DWORD *)v9 + 7) = v7;
    v17 += 32;
  }
  v15.msg_controllen = v17;
  ssize_t v14 = sendmsg(v25, &v15, 0);
  if (v14 <= 0) {
    perror("sendmsg");
  }
  if (v14 == -1)
  {
    if (*__error() == 22) {
      return 13;
    }
    else {
      return 1;
    }
  }
  return v13;
}

uint64_t otPlatUdpJoinMulticastGroup(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v14 = a1;
  int v13 = (int)a2;
  int v12 = a3;
  unsigned int v11 = 0;
  int v8 = 0;
  if (*(void *)(a1 + 56))
  {
    int v8 = v3;
    long long v9 = *v12;
    int v7 = v13;
    if (v13)
    {
      if (v7 == 1)
      {
        int v10 = gNetifIndex;
      }
      else if (v7 == 2)
      {
        int v10 = gBackboneNetifIndex;
      }
    }
    if (setsockopt(v8, 41, 12, &v9, 0x14u) && *__error() != 48) {
      unsigned int v11 = 1;
    }
  }
  else
  {
    unsigned int v11 = 7;
  }
  if (v11)
  {
    uint64_t v4 = __error();
    uint64_t v5 = strerror(*v4);
    otLogCritPlat("IPV6_JOIN_GROUP failed: %s", v5);
  }
  return v11;
}

uint64_t otPlatUdpLeaveMulticastGroup(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v14 = a1;
  int v13 = (int)a2;
  int v12 = a3;
  unsigned int v11 = 0;
  int v8 = 0;
  if (*(void *)(a1 + 56))
  {
    int v8 = v3;
    long long v9 = *v12;
    int v7 = v13;
    if (v13)
    {
      if (v7 == 1)
      {
        int v10 = gNetifIndex;
      }
      else if (v7 == 2)
      {
        int v10 = gBackboneNetifIndex;
      }
    }
    if (setsockopt(v8, 41, 13, &v9, 0x14u) && *__error() != 48) {
      unsigned int v11 = 1;
    }
  }
  else
  {
    unsigned int v11 = 7;
  }
  if (v11)
  {
    uint64_t v4 = __error();
    uint64_t v5 = strerror(*v4);
    otLogCritPlat("IPV6_LEAVE_GROUP failed: %s", v5);
  }
  return v11;
}

void ot::Posix::Udp::Update(uint64_t a1, _DWORD *a2)
{
  if (gNetifIndex)
  {
    for (uint64_t i = otUdpGetSockets(gInstance); i; uint64_t i = *(void *)(i + 64))
    {
      if (*(void *)(i + 56))
      {
        int v4 = v3;
        int v7 = v3;
        if (&___darwin_check_fd_set_overflow) {
          int v8 = __darwin_check_fd_set_overflow(v3, a2, 0);
        }
        else {
          int v8 = 1;
        }
        if (v8) {
          a2[v7 / 0x20uLL] |= 1 << (v7 % 0x20uLL);
        }
        if (a2[96] < v4) {
          a2[96] = v4;
        }
      }
    }
  }
}

uint64_t ot::Posix::Udp::Init(uint64_t this, const char *a2)
{
  uint64_t v19 = this;
  uint64_t v18 = a2;
  if (!a2)
  {
    uint64_t v17 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp", 47);
    if (v17) {
      uint64_t v14 = v17 + 1;
    }
    else {
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp";
    }
    int v12 = v14;
    int v13 = 2;
    int v2 = otExitCodeToString(2u);
    otLogCritPlat("%s() at %s:%d: %s", "Init", v14, 572, v2);
    handle_daemon_exit();
    exit(v13);
  }
  if (v18 != &gNetifName)
  {
    if (strlen(v18) >= 0xF)
    {
      uint64_t v16 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp", 47);
      if (v16) {
        unsigned int v11 = v16 + 1;
      }
      else {
        unsigned int v11 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp";
      }
      long long v9 = v11;
      int v10 = 2;
      int v3 = otExitCodeToString(2u);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v11, 577, v3);
      handle_daemon_exit();
      exit(v10);
    }
    if (gNetifIndex) {
      __assert_rtn("Init", "udp.cpp", 578, "gNetifIndex == 0");
    }
    int v8 = &gNetifName;
    strcpy(&gNetifName, v18);
    this = if_nametoindex(&gNetifName);
    gNetifIndex = this;
    if (!this)
    {
      msghdr v15 = strrchr[abi:nn180100]("/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp", 47);
      if (v15) {
        int v7 = v15 + 1;
      }
      else {
        int v7 = "/Library/Caches/com.apple.xbs/Sources/CoreThreadRadio/openthread/src/posix/platform/udp.cpp";
      }
      uint64_t v5 = v7;
      int v6 = 5;
      int v4 = otExitCodeToString(5u);
      otLogCritPlat("%s() at %s:%d: %s", "Init", v7, 581, v4);
      handle_daemon_exit();
      exit(v6);
    }
  }
  if (!gNetifIndex) {
    __assert_rtn("Init", "udp.cpp", 584, "gNetifIndex != 0");
  }
  return this;
}

void *ot::Posix::Udp::SetUp(ot::Posix::Udp *this)
{
  uint64_t v1 = ot::Posix::Mainloop::Manager::Get(this);
  return ot::Posix::Mainloop::Manager::Add(v1, this);
}

void *ot::Posix::Udp::TearDown(ot::Posix::Udp *this)
{
  uint64_t v1 = ot::Posix::Mainloop::Manager::Get(this);
  return ot::Posix::Mainloop::Manager::Remove(v1, this);
}

uint64_t (***ot::Posix::Udp::Get(ot::Posix::Udp *this))()
{
  {
    __cxa_atexit((void (*)(void *))ot::Posix::Daemon::~Daemon, &ot::Posix::Udp::Get(void)::sInstance, (void *)&_mh_execute_header);
  }
  return &ot::Posix::Udp::Get(void)::sInstance;
}

void ot::Posix::Udp::Process(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = a1;
  int v10 = a2;
  __int16 v9 = 256;
  for (uint64_t i = otUdpGetSockets(gInstance); i; uint64_t i = *(void *)(i + 64))
  {
    int v7 = 0;
    int v7 = v3;
    if (v3 > 0)
    {
      int v13 = v7;
      int v12 = v10;
      int v16 = v7;
      msghdr v15 = v10;
      int v17 = &___darwin_check_fd_set_overflow ? __darwin_check_fd_set_overflow(v16, v15, 0) : 1;
      if (v17 ? v12[v13 / 0x20uLL] & (1 << (v13 % 0x20uLL)) : 0)
      {
        uint64_t v5 = 0;
        unsigned __int16 v4 = 1280;
        memset(__b, 0, 0x38uLL);
        void __b[16] = *(_WORD *)(i + 16);
        {
          uint64_t v5 = otUdpNewMessage(gInstance, (uint64_t)&v9);
          if (v5)
          {
            if (!otMessageAppend((uint64_t)v5, v18, v4))
            {
              (*(void (**)(void, ot::Buffer *, _WORD *))(i + 40))(*(void *)(i + 48), v5, __b);
              otMessageFree((uint64_t)v5);
              return;
            }
            otMessageFree((uint64_t)v5);
          }
        }
      }
    }
  }
}

BOOL anonymous namespace'::receivePacket(int a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v18 = a1;
  uint64_t v17 = a2;
  int v16 = a3;
  uint64_t v15 = a4;
  v11[0] = a2;
  v11[1] = *a3;
  v10.msg_name = &v12;
  v10.msg_namelen = 28;
  v10.msg_control = &v19;
  v10.msg_controllen = 1280;
  v10.msg_iov = (iovec *)v11;
  v10.msg_iovlen = 1;
  v10.msg_flags = 0;
  ssize_t v9 = recvmsg(a1, &v10, 0);
  if (v9 > 0)
  {
    _WORD *v16 = v9;
    if (v10.msg_controllen < 0xCuLL) {
      msg_control = 0;
    }
    else {
      msg_control = (unsigned int *)v10.msg_control;
    }
    for (uint64_t i = msg_control; i; uint64_t i = v5)
    {
      if (i[1] == 41)
      {
        if (i[2] == 47)
        {
          *(unsigned char *)(v15 + 48) = i[3];
        }
        else if (i[2] == 46)
        {
          long long v7 = *(_OWORD *)(i + 3);
          *(unsigned char *)(v15 + 49) = *(unsigned char *)(v15 + 49) & 0xFB | (4 * (i[7] != gNetifIndex));
          *(_OWORD *)uint64_t v15 = v7;
        }
      }
      if ((void *)((unint64_t)i + ((*i + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12) <= (char *)v10.msg_control
                                                                                     + v10.msg_controllen)
        uint64_t v5 = (unsigned int *)((char *)i + ((*i + 3) & 0xFFFFFFFFFFFFFFFCLL));
      else {
        uint64_t v5 = 0;
      }
    }
    *(_WORD *)(v15 + 34) = _OSSwapInt16(v13);
    *(_OWORD *)(v15 + 16) = v14;
  }
  else
  {
    perror("recvmsg");
  }
  return v9 <= 0;
}

void ot::Posix::Udp::~Udp(ot::Posix::Udp *this)
{
}

BOOL anonymous namespace'::IsLinkLocal(_anonymous_namespace_ *this, const in6_addr *a2)
{
  BOOL v3 = 0;
  if (*(unsigned __int8 *)this == 254) {
    return *((unsigned __int8 *)this + 1) == 128;
  }
  return v3;
}

BOOL anonymous namespace'::IsMulticast(unsigned __int8 *a1)
{
  return *a1 == 255;
}

uint64_t ot::Power::Domain::Set(ot::Power::Domain *this, const char *a2)
{
  *(_WORD *)&__n[4] = 0;
  *(_DWORD *)size_t __n = (unsigned __int16)strlen(a2);
  if (*(unsigned __int16 *)__n <= 8u)
  {
    memcpy(this, a2, *(unsigned __int16 *)__n);
    *((unsigned char *)this + *(unsigned __int16 *)__n) = 0;
  }
  else
  {
    *(_DWORD *)&__n[2] = 7;
  }
  return *(unsigned int *)&__n[2];
}

uint64_t ot::Power::TargetPower::FromString(ot::Power::TargetPower *this, char *a2)
{
  long long v7 = (ot::Utils::CmdLineParser *)strtok(a2, ",");
  if (v7)
  {
    unsigned int v10 = ot::Utils::CmdLineParser::ParseAsUint8(v7, (char *)this, v2);
    if (!v10)
    {
      int v8 = (ot::Utils::CmdLineParser *)strtok(0, ",");
      if (v8)
      {
        unsigned int v10 = ot::Utils::CmdLineParser::ParseAsUint8(v8, (char *)this + 1, v3);
        if (!v10)
        {
          ssize_t v9 = (ot::Utils::CmdLineParser *)strtok(0, ",");
          if (v9) {
            return ot::Utils::CmdLineParser::ParseAsInt16(v9, (char *)this + 2, v4);
          }
          else {
            return 6;
          }
        }
      }
      else
      {
        return 6;
      }
    }
  }
  else
  {
    return 6;
  }
  return v10;
}

ot::StringWriter *ot::Power::TargetPower::ToString@<X0>(ot::Power::TargetPower *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::Append(a2, "%u,%u,%d", *(unsigned __int8 *)this, *((unsigned __int8 *)this + 1), *((__int16 *)this + 1));
}

uint64_t ot::String<(unsigned short)12>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 12);
  return a1;
}

uint64_t ot::Power::RawPowerSetting::Set(ot::Power::RawPowerSetting *this, ot::Utils::CmdLineParser *a2, uint64_t a3, unsigned __int8 *a4)
{
  ssize_t v9 = this;
  int v8 = a2;
  unsigned int v7 = 0;
  *(_WORD *)int v6 = 16;
  unsigned int v7 = ot::Utils::CmdLineParser::ParseAsHexString(a2, v6, (unsigned __int16 *)this, a4);
  if (!v7) {
    *((_WORD *)this + 8) = v6[0];
  }
  return v7;
}

ot::StringWriter *ot::Power::RawPowerSetting::ToString@<X0>(ot::Power::RawPowerSetting *this@<X0>, ot::StringWriter *a2@<X8>)
{
  return ot::StringWriter::AppendHexBytes(a2, (unsigned __int8 *)this, *((_WORD *)this + 8));
}

uint64_t ot::String<(unsigned short)33>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 33);
  return a1;
}

uint64_t ot::Power::CalibratedPower::FromString(ot::Power::CalibratedPower *this, char *a2)
{
  unsigned __int16 v13 = this;
  char v12 = a2;
  unsigned int v11 = 0;
  unsigned int v10 = 0;
  __lasts = 0;
  unsigned int v10 = (ot::Utils::CmdLineParser *)strtok_r(a2, ",", &__lasts);
  if (v10)
  {
    unsigned int v11 = ot::Utils::CmdLineParser::ParseAsUint8(v10, (char *)this, v2);
    if (!v11)
    {
      unsigned int v10 = (ot::Utils::CmdLineParser *)strtok_r(0, ",", &__lasts);
      if (v10)
      {
        unsigned int v11 = ot::Utils::CmdLineParser::ParseAsUint8(v10, (char *)this + 1, v3);
        if (!v11)
        {
          unsigned int v10 = (ot::Utils::CmdLineParser *)strtok_r(0, ",", &__lasts);
          if (v10)
          {
            unsigned int v11 = ot::Utils::CmdLineParser::ParseAsInt16(v10, (char *)this + 2, v4);
            if (!v11) {
              return ot::Power::RawPowerSetting::Set((ot::Power::CalibratedPower *)((char *)this + 4), (ot::Utils::CmdLineParser *)__lasts, v5, v6);
            }
          }
          else
          {
            return 6;
          }
        }
      }
      else
      {
        return 6;
      }
    }
  }
  else
  {
    return 6;
  }
  return v11;
}

ot::StringWriter *ot::Power::CalibratedPower::ToString@<X0>(ot::Power::CalibratedPower *this@<X0>, ot::StringWriter *a2@<X8>)
{
  ot::String<(unsigned short)53>::String((uint64_t)a2);
  int v5 = *(unsigned __int8 *)this;
  int v6 = *((unsigned __int8 *)this + 1);
  int v7 = *((__int16 *)this + 1);
  ot::Power::RawPowerSetting::ToString((ot::Power::CalibratedPower *)((char *)this + 4), (ot::StringWriter *)v9);
  int v2 = (const char *)ot::String<(unsigned short)33>::AsCString((uint64_t)v9);
  return ot::StringWriter::Append(a2, "%u,%u,%d,%s", v5, v6, v7, v2);
}

uint64_t ot::String<(unsigned short)53>::String(uint64_t a1)
{
  return a1;
}

{
  ot::StringWriter::StringWriter(a1, (char *)(a1 + 12), 53);
  return a1;
}

uint64_t ot::String<(unsigned short)33>::AsCString(uint64_t a1)
{
  return a1 + 12;
}

{
  return ot::String<(unsigned short)33>::AsCString(a1);
}

uint64_t mbedtls_aes_init()
{
  return __memset_chk();
}

void *mbedtls_aes_free(void *result)
{
  if (result) {
    return mbedtls_platform_zeroize(result, 0x120uLL);
  }
  return result;
}

uint64_t mbedtls_aes_setkey_enc(int *a1, uint64_t a2, unsigned int a3)
{
  switch(a3)
  {
    case 0x80u:
      *a1 = 10;
      break;
    case 0xC0u:
      *a1 = 12;
      break;
    case 0x100u:
      *a1 = 14;
      break;
    default:
      return -32;
  }
  int v5 = a1 + 4;
  *((void *)a1 + 1) = a1 + 4;
  for (unsigned int i = 0; i < a3 >> 5; ++i)
    v5[i] = *(unsigned __int8 *)(a2 + 4 * i) | (*(unsigned __int8 *)(a2 + 4 * i + 1) << 8) | (*(unsigned __int8 *)(a2 + 4 * i + 2) << 16) | (*(unsigned __int8 *)(a2 + 4 * i + 3) << 24);
  int v4 = *a1;
  if (*a1 == 10)
  {
    for (unsigned int j = 0; j < 0xA; ++j)
    {
      v5[4] = *v5 ^ RCON[j] ^ FSb[BYTE1(v5[3])] ^ (FSb[BYTE2(v5[3])] << 8) ^ (FSb[HIBYTE(v5[3])] << 16) ^ (FSb[*((unsigned __int8 *)v5 + 12)] << 24);
      v5[5] = v5[1] ^ v5[4];
      v5[6] = v5[2] ^ v5[5];
      uint8_t v5[7] = v5[3] ^ v5[6];
      v5 += 4;
    }
  }
  else if (v4 == 12)
  {
    for (unsigned int k = 0; k < 8; ++k)
    {
      v5[6] = *v5 ^ RCON[k] ^ FSb[BYTE1(v5[5])] ^ (FSb[BYTE2(v5[5])] << 8) ^ (FSb[HIBYTE(v5[5])] << 16) ^ (FSb[*((unsigned __int8 *)v5 + 20)] << 24);
      uint8_t v5[7] = v5[1] ^ v5[6];
      v5[8] = v5[2] ^ v5[7];
      v5[9] = v5[3] ^ v5[8];
      v5[10] = v5[4] ^ v5[9];
      v5[11] = v5[5] ^ v5[10];
      v5 += 6;
    }
  }
  else if (v4 == 14)
  {
    for (unsigned int m = 0; m < 7; ++m)
    {
      v5[8] = *v5 ^ RCON[m] ^ FSb[BYTE1(v5[7])] ^ (FSb[BYTE2(v5[7])] << 8) ^ (FSb[HIBYTE(v5[7])] << 16) ^ (FSb[*((unsigned __int8 *)v5 + 28)] << 24);
      v5[9] = v5[1] ^ v5[8];
      v5[10] = v5[2] ^ v5[9];
      v5[11] = v5[3] ^ v5[10];
      v5[12] = v5[4] ^ FSb[*((unsigned __int8 *)v5 + 44)] ^ (FSb[BYTE1(v5[11])] << 8) ^ (FSb[BYTE2(v5[11])] << 16) ^ (FSb[HIBYTE(v5[11])] << 24);
      v5[13] = v5[5] ^ v5[12];
      v5[14] = v5[6] ^ v5[13];
      uint8_t v5[15] = v5[7] ^ v5[14];
      v5 += 8;
    }
  }
  return 0;
}

uint64_t mbedtls_aes_setkey_dec(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  unsigned int v15 = a3;
  int v14 = 0;
  int v13 = 0;
  unsigned int v12 = 0;
  bzero(&v10, 0x120uLL);
  mbedtls_aes_init();
  int v8 = (_DWORD *)(v17 + 16);
  *(void *)(v17 + 8) = v17 + 16;
  unsigned int v12 = mbedtls_aes_setkey_enc(&v10, v16, v15);
  if (!v12)
  {
    *(_DWORD *)uint64_t v17 = v10;
    BOOL v3 = (_DWORD *)(v11 + 16 * v10);
    *int v8 = *v3++;
    v8[1] = *v3++;
    void v8[2] = *v3++;
    int v4 = v8 + 3;
    ssize_t v9 = v8 + 4;
    _DWORD *v4 = *v3;
    int v14 = *(_DWORD *)v17 - 1;
    int v7 = v3 - 7;
    while (v14 > 0)
    {
      int v13 = 0;
      while (v13 < 4)
      {
        int v5 = v9++;
        int *v5 = RT0[FSb[*(unsigned __int8 *)v7]] ^ RT1[FSb[BYTE1(*v7)]] ^ RT2[FSb[BYTE2(*v7)]] ^ RT3[FSb[HIBYTE(*v7)]];
        ++v13;
        ++v7;
      }
      --v14;
      v7 -= 8;
    }
    *ssize_t v9 = *v7;
    v9[1] = v7[1];
    v9[2] = v7[2];
    v9[3] = v7[3];
  }
  mbedtls_aes_free(&v10);
  return v12;
}

uint64_t mbedtls_internal_aes_encrypt(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  uint64_t v28 = a3;
  int i = 0;
  uint64_t v26 = 0;
  uint64_t v26 = *(_DWORD **)(a1 + 8);
  long long v24 = 0u;
  long long v25 = 0u;
  LODWORD(v24) = *v29 | (v29[1] << 8) | (v29[2] << 16) | (v29[3] << 24);
  BOOL v3 = v26++;
  LODWORD(v24) = v24 ^ *v3;
  DWORD1(v24) = v29[4] | (v29[5] << 8) | (v29[6] << 16) | (v29[7] << 24);
  int v4 = v26++;
  DWORD1(v24) ^= *v4;
  DWORD2(v24) = v29[8] | (v29[9] << 8) | (v29[10] << 16) | (v29[11] << 24);
  int v5 = v26++;
  DWORD2(v24) ^= *v5;
  HIDWORD(v24) = v29[12] | (v29[13] << 8) | (v29[14] << 16) | (v29[15] << 24);
  int v6 = v26++;
  HIDWORD(v24) ^= *v6;
  for (int i = (*(int *)a1 >> 1) - 1; i > 0; --i)
  {
    int v7 = v26++;
    LODWORD(v25) = *v7 ^ FT0[v24] ^ FT1[BYTE5(v24)] ^ FT2[BYTE10(v24)] ^ FT3[HIBYTE(v24)];
    int v8 = v26++;
    DWORD1(v25) = *v8 ^ FT0[BYTE4(v24)] ^ FT1[BYTE9(v24)] ^ FT2[BYTE14(v24)] ^ FT3[BYTE3(v24)];
    ssize_t v9 = v26++;
    DWORD2(v25) = *v9 ^ FT0[BYTE8(v24)] ^ FT1[BYTE13(v24)] ^ FT2[BYTE2(v24)] ^ FT3[BYTE7(v24)];
    int v10 = v26++;
    HIDWORD(v25) = *v10 ^ FT0[BYTE12(v24)] ^ FT1[BYTE1(v24)] ^ FT2[BYTE6(v24)] ^ FT3[BYTE11(v24)];
    uint64_t v11 = v26++;
    LODWORD(v24) = *v11 ^ FT0[v25] ^ FT1[BYTE5(v25)] ^ FT2[BYTE10(v25)] ^ FT3[HIBYTE(v25)];
    unsigned int v12 = v26++;
    DWORD1(v24) = *v12 ^ FT0[BYTE4(v25)] ^ FT1[BYTE9(v25)] ^ FT2[BYTE14(v25)] ^ FT3[BYTE3(v25)];
    int v13 = v26++;
    DWORD2(v24) = *v13 ^ FT0[BYTE8(v25)] ^ FT1[BYTE13(v25)] ^ FT2[BYTE2(v25)] ^ FT3[BYTE7(v25)];
    int v14 = v26++;
    HIDWORD(v24) = *v14 ^ FT0[BYTE12(v25)] ^ FT1[BYTE1(v25)] ^ FT2[BYTE6(v25)] ^ FT3[BYTE11(v25)];
  }
  unsigned int v15 = v26++;
  LODWORD(v25) = *v15 ^ FT0[v24] ^ FT1[BYTE5(v24)] ^ FT2[BYTE10(v24)] ^ FT3[HIBYTE(v24)];
  uint64_t v16 = v26++;
  DWORD1(v25) = *v16 ^ FT0[BYTE4(v24)] ^ FT1[BYTE9(v24)] ^ FT2[BYTE14(v24)] ^ FT3[BYTE3(v24)];
  uint64_t v17 = v26++;
  DWORD2(v25) = *v17 ^ FT0[BYTE8(v24)] ^ FT1[BYTE13(v24)] ^ FT2[BYTE2(v24)] ^ FT3[BYTE7(v24)];
  int v18 = v26++;
  HIDWORD(v25) = *v18 ^ FT0[BYTE12(v24)] ^ FT1[BYTE1(v24)] ^ FT2[BYTE6(v24)] ^ FT3[BYTE11(v24)];
  char v19 = v26++;
  LODWORD(v24) = *v19 ^ FSb[v25] ^ (FSb[BYTE5(v25)] << 8) ^ (FSb[BYTE10(v25)] << 16) ^ (FSb[HIBYTE(v25)] << 24);
  int v20 = v26++;
  DWORD1(v24) = *v20 ^ FSb[BYTE4(v25)] ^ (FSb[BYTE9(v25)] << 8) ^ (FSb[BYTE14(v25)] << 16) ^ (FSb[BYTE3(v25)] << 24);
  uint64_t v21 = v26++;
  DWORD2(v24) = *v21 ^ FSb[BYTE8(v25)] ^ (FSb[BYTE13(v25)] << 8) ^ (FSb[BYTE2(v25)] << 16) ^ (FSb[BYTE7(v25)] << 24);
  uint64_t v22 = v26++;
  HIDWORD(v24) = *v22 ^ FSb[BYTE12(v25)] ^ (FSb[BYTE1(v25)] << 8) ^ (FSb[BYTE6(v25)] << 16) ^ (FSb[BYTE11(v25)] << 24);
  *uint64_t v28 = v24;
  mbedtls_platform_zeroize(&v24, 0x20uLL);
  return 0;
}

uint64_t mbedtls_aes_encrypt(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  return mbedtls_internal_aes_encrypt(a1, a2, a3);
}

uint64_t mbedtls_internal_aes_decrypt(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  uint64_t v28 = a3;
  int i = 0;
  uint64_t v26 = 0;
  uint64_t v26 = *(_DWORD **)(a1 + 8);
  long long v24 = 0u;
  long long v25 = 0u;
  LODWORD(v24) = *v29 | (v29[1] << 8) | (v29[2] << 16) | (v29[3] << 24);
  BOOL v3 = v26++;
  LODWORD(v24) = v24 ^ *v3;
  DWORD1(v24) = v29[4] | (v29[5] << 8) | (v29[6] << 16) | (v29[7] << 24);
  int v4 = v26++;
  DWORD1(v24) ^= *v4;
  DWORD2(v24) = v29[8] | (v29[9] << 8) | (v29[10] << 16) | (v29[11] << 24);
  int v5 = v26++;
  DWORD2(v24) ^= *v5;
  HIDWORD(v24) = v29[12] | (v29[13] << 8) | (v29[14] << 16) | (v29[15] << 24);
  int v6 = v26++;
  HIDWORD(v24) ^= *v6;
  for (int i = (*(int *)a1 >> 1) - 1; i > 0; --i)
  {
    int v7 = v26++;
    LODWORD(v25) = *v7 ^ RT0[v24] ^ RT1[BYTE13(v24)] ^ RT2[BYTE10(v24)] ^ RT3[BYTE7(v24)];
    int v8 = v26++;
    DWORD1(v25) = *v8 ^ RT0[BYTE4(v24)] ^ RT1[BYTE1(v24)] ^ RT2[BYTE14(v24)] ^ RT3[BYTE11(v24)];
    ssize_t v9 = v26++;
    DWORD2(v25) = *v9 ^ RT0[BYTE8(v24)] ^ RT1[BYTE5(v24)] ^ RT2[BYTE2(v24)] ^ RT3[HIBYTE(v24)];
    int v10 = v26++;
    HIDWORD(v25) = *v10 ^ RT0[BYTE12(v24)] ^ RT1[BYTE9(v24)] ^ RT2[BYTE6(v24)] ^ RT3[BYTE3(v24)];
    uint64_t v11 = v26++;
    LODWORD(v24) = *v11 ^ RT0[v25] ^ RT1[BYTE13(v25)] ^ RT2[BYTE10(v25)] ^ RT3[BYTE7(v25)];
    unsigned int v12 = v26++;
    DWORD1(v24) = *v12 ^ RT0[BYTE4(v25)] ^ RT1[BYTE1(v25)] ^ RT2[BYTE14(v25)] ^ RT3[BYTE11(v25)];
    int v13 = v26++;
    DWORD2(v24) = *v13 ^ RT0[BYTE8(v25)] ^ RT1[BYTE5(v25)] ^ RT2[BYTE2(v25)] ^ RT3[HIBYTE(v25)];
    int v14 = v26++;
    HIDWORD(v24) = *v14 ^ RT0[BYTE12(v25)] ^ RT1[BYTE9(v25)] ^ RT2[BYTE6(v25)] ^ RT3[BYTE3(v25)];
  }
  unsigned int v15 = v26++;
  LODWORD(v25) = *v15 ^ RT0[v24] ^ RT1[BYTE13(v24)] ^ RT2[BYTE10(v24)] ^ RT3[BYTE7(v24)];
  uint64_t v16 = v26++;
  DWORD1(v25) = *v16 ^ RT0[BYTE4(v24)] ^ RT1[BYTE1(v24)] ^ RT2[BYTE14(v24)] ^ RT3[BYTE11(v24)];
  uint64_t v17 = v26++;
  DWORD2(v25) = *v17 ^ RT0[BYTE8(v24)] ^ RT1[BYTE5(v24)] ^ RT2[BYTE2(v24)] ^ RT3[HIBYTE(v24)];
  int v18 = v26++;
  HIDWORD(v25) = *v18 ^ RT0[BYTE12(v24)] ^ RT1[BYTE9(v24)] ^ RT2[BYTE6(v24)] ^ RT3[BYTE3(v24)];
  char v19 = v26++;
  LODWORD(v24) = *v19 ^ RSb[v25] ^ (RSb[BYTE13(v25)] << 8) ^ (RSb[BYTE10(v25)] << 16) ^ (RSb[BYTE7(v25)] << 24);
  int v20 = v26++;
  DWORD1(v24) = *v20 ^ RSb[BYTE4(v25)] ^ (RSb[BYTE1(v25)] << 8) ^ (RSb[BYTE14(v25)] << 16) ^ (RSb[BYTE11(v25)] << 24);
  uint64_t v21 = v26++;
  DWORD2(v24) = *v21 ^ RSb[BYTE8(v25)] ^ (RSb[BYTE5(v25)] << 8) ^ (RSb[BYTE2(v25)] << 16) ^ (RSb[HIBYTE(v25)] << 24);
  uint64_t v22 = v26++;
  HIDWORD(v24) = *v22 ^ RSb[BYTE12(v25)] ^ (RSb[BYTE9(v25)] << 8) ^ (RSb[BYTE6(v25)] << 16) ^ (RSb[BYTE3(v25)] << 24);
  *uint64_t v28 = v24;
  mbedtls_platform_zeroize(&v24, 0x20uLL);
  return 0;
}

uint64_t mbedtls_aes_decrypt(uint64_t a1, unsigned __int8 *a2, _OWORD *a3)
{
  return mbedtls_internal_aes_decrypt(a1, a2, a3);
}

uint64_t mbedtls_aes_crypt_ecb(uint64_t a1, int a2, unsigned __int8 *a3, _OWORD *a4)
{
  if (a2 == 1) {
    return mbedtls_internal_aes_encrypt(a1, a3, a4);
  }
  else {
    return mbedtls_internal_aes_decrypt(a1, a3, a4);
  }
}

uint64_t mbedtls_mpi_init(uint64_t result)
{
  *(_DWORD *)BOOL result = 1;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void mbedtls_mpi_free(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      mbedtls_mpi_zeroize(*(void **)(a1 + 16), *(void *)(a1 + 8));
      mbedtls_free();
    }
    *(_DWORD *)a1 = 1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

void *mbedtls_mpi_zeroize(void *a1, uint64_t a2)
{
  return mbedtls_platform_zeroize(a1, 8 * a2);
}

uint64_t mbedtls_mpi_grow(uint64_t a1, unint64_t a2)
{
  if (a2 <= 0x2710)
  {
    if (*(void *)(a1 + 8) < a2)
    {
      uint64_t v3 = mbedtls_calloc();
      if (!v3) {
        return -16;
      }
      if (*(void *)(a1 + 16))
      {
        __memcpy_chk();
        mbedtls_mpi_zeroize(*(void **)(a1 + 16), *(void *)(a1 + 8));
        mbedtls_free();
      }
      *(void *)(a1 + 8) = a2;
      *(void *)(a1 + 16) = v3;
    }
    return 0;
  }
  return -16;
}

uint64_t mbedtls_mpi_shrink(uint64_t a1, unint64_t a2)
{
  if (a2 <= 0x2710)
  {
    if (*(void *)(a1 + 8) > a2)
    {
      for (uint64_t i = *(void *)(a1 + 8) - 1; i && !*(void *)(*(void *)(a1 + 16) + 8 * i); --i)
        ;
      unint64_t v4 = i + 1;
      if (v4 < a2) {
        unint64_t v4 = a2;
      }
      uint64_t v5 = mbedtls_calloc();
      if (v5)
      {
        if (*(void *)(a1 + 16))
        {
          __memcpy_chk();
          mbedtls_mpi_zeroize(*(void **)(a1 + 16), *(void *)(a1 + 8));
          mbedtls_free();
        }
        *(void *)(a1 + 8) = v4;
        *(void *)(a1 + 16) = v5;
        return 0;
      }
      else
      {
        return -16;
      }
    }
    else
    {
      return mbedtls_mpi_grow(a1, a2);
    }
  }
  else
  {
    return -16;
  }
}

uint64_t mbedtls_mpi_copy(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = 0;
  if (a1 == a2) {
    return 0;
  }
  if (*(void *)(a2 + 8))
  {
    for (uint64_t i = *(void *)(a2 + 8) - 1; i && !*(void *)(*(void *)(a2 + 16) + 8 * i); --i)
      ;
    unint64_t v4 = i + 1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (*(void *)(a1 + 8) >= v4)
    {
      __memset_chk();
    }
    else
    {
      unsigned int v5 = mbedtls_mpi_grow(a1, v4);
      if (v5) {
        return v5;
      }
    }
    __memcpy_chk();
    return v5;
  }
  if (*(void *)(a1 + 8))
  {
    *(_DWORD *)a1 = 1;
    __memset_chk();
  }
  return 0;
}

uint64_t mbedtls_mpi_swap()
{
  return __memcpy_chk();
}

uint64_t mbedtls_mpi_lset(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = mbedtls_mpi_grow(a1, 1uLL);
  if (!v5)
  {
    __memset_chk();
    if (a2 >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = -a2;
    }
    **(void **)(a1 + 16) = v4;
    if (a2 < 0) {
      int v2 = -1;
    }
    else {
      int v2 = 1;
    }
    *(_DWORD *)a1 = v2;
  }
  return v5;
}

uint64_t mbedtls_mpi_get_bit(uint64_t a1, unint64_t a2)
{
  if (a2 < *(void *)(a1 + 8) << 6) {
    return (*(void *)(*(void *)(a1 + 16) + 8 * (a2 / 0x40)) >> (a2 % 0x40)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_mpi_set_bit(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  unsigned int v6 = 0;
  unint64_t v5 = a2 / 0x40;
  unint64_t v4 = a2 % 0x40;
  if (!a3 || a3 == 1)
  {
    if (a2 < *(void *)(a1 + 8) << 6) {
      goto LABEL_8;
    }
    if (!a3) {
      return 0;
    }
    unsigned int v6 = mbedtls_mpi_grow(a1, v5 + 1);
    if (!v6)
    {
LABEL_8:
      *(void *)(*(void *)(a1 + 16) + 8 * v5) &= ~(1 << v4);
      *(void *)(*(void *)(a1 + 16) + 8 * v5) |= (unint64_t)a3 << v4;
    }
    return v6;
  }
  return -4;
}

uint64_t mbedtls_mpi_lsb(uint64_t a1)
{
  uint64_t v2 = 0;
  for (unint64_t i = 0; i < *(void *)(a1 + 8); ++i)
  {
    for (unint64_t j = 0; j < 0x40; ++j)
    {
      if ((*(void *)(*(void *)(a1 + 16) + 8 * i) >> j)) {
        return v2;
      }
      ++v2;
    }
  }
  return 0;
}

unint64_t mbedtls_mpi_bitlen(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  for (uint64_t i = *(void *)(a1 + 8) - 1; i && !*(void *)(*(void *)(a1 + 16) + 8 * i); --i)
    ;
  return 64 - mbedtls_clz(*(void *)(*(void *)(a1 + 16) + 8 * i)) + (i << 6);
}

unint64_t mbedtls_clz(uint64_t a1)
{
  unint64_t v2 = 0x8000000000000000;
  for (unint64_t i = 0; i < 0x40 && (a1 & v2) == 0; ++i)
    v2 >>= 1;
  return i;
}

unint64_t mbedtls_mpi_size(uint64_t a1)
{
  return (mbedtls_mpi_bitlen(a1) + 7) >> 3;
}

uint64_t mbedtls_mpi_read_string(_DWORD *a1, int a2, const char *a3)
{
  unsigned int v15 = a1;
  int v14 = a2;
  int v13 = a3;
  unsigned int digit = -110;
  size_t i = 0;
  unint64_t v10 = 0;
  size_t v9 = 0;
  unint64_t v8 = 0;
  int v7 = 1;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  if (a2 >= 2 && v14 <= 16)
  {
    mbedtls_mpi_init((uint64_t)v5);
    if (!*v13)
    {
      mbedtls_mpi_free((uint64_t)v15);
      return 0;
    }
    if (*v13 == 45)
    {
      ++v13;
      int v7 = -1;
    }
    size_t v9 = strlen(v13);
    if (v14 == 16)
    {
      if (v9 > 0x3FFFFFFFFFFFFFFFLL) {
        return -4;
      }
      unint64_t v8 = 4 * v9 / 0x40 + (4 * v9 % 0x40 != 0);
      unsigned int digit = mbedtls_mpi_grow((uint64_t)v15, v8);
      if (!digit)
      {
        unsigned int digit = mbedtls_mpi_lset((uint64_t)v15, 0);
        if (!digit)
        {
          size_t i = v9;
          unint64_t v10 = 0;
          while (i)
          {
            unsigned int digit = mpi_get_digit(&v6, v14, v13[i - 1]);
            if (digit) {
              goto LABEL_28;
            }
            uint64_t v3 = (void *)(*((void *)v15 + 2) + 8 * (v10 / 0x10));
            *v3 |= v6 << (4 * (v10 % 0x10));
            --i;
            ++v10;
          }
LABEL_25:
          if (v7 < 0 && mbedtls_mpi_bitlen((uint64_t)v15)) {
            _DWORD *v15 = -1;
          }
        }
      }
    }
    else
    {
      unsigned int digit = mbedtls_mpi_lset((uint64_t)v15, 0);
      if (!digit)
      {
        for (size_t i = 0; i < v9; ++i)
        {
          unsigned int digit = mpi_get_digit(&v6, v14, v13[i]);
          if (digit) {
            goto LABEL_28;
          }
          unsigned int digit = mbedtls_mpi_mul_int((uint64_t)v5, (uint64_t)v15, v14);
          if (digit) {
            goto LABEL_28;
          }
          unsigned int digit = mbedtls_mpi_add_int(v15, (int *)v5, v6);
          if (digit) {
            goto LABEL_28;
          }
        }
        goto LABEL_25;
      }
    }
LABEL_28:
    mbedtls_mpi_free((uint64_t)v5);
    return digit;
  }
  return -4;
}

uint64_t mpi_get_digit(void *a1, int a2, char a3)
{
  *a1 = 255;
  if (a3 >= 48 && a3 <= 57) {
    *a1 = a3 - 48;
  }
  if (a3 >= 65 && a3 <= 70) {
    *a1 = a3 - 55;
  }
  if (a3 >= 97 && a3 <= 102) {
    *a1 = a3 - 87;
  }
  if (*a1 < (unint64_t)a2) {
    return 0;
  }
  else {
    return -6;
  }
}

uint64_t mbedtls_mpi_mul_int(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(void *)(a2 + 8); ; --i)
  {
    BOOL v4 = 0;
    if (i) {
      BOOL v4 = *(void *)(*(void *)(a2 + 16) + 8 * (i - 1)) == 0;
    }
    if (!v4) {
      break;
    }
  }
  if (a3 && i)
  {
    unsigned int v5 = mbedtls_mpi_grow(a1, i + 1);
    if (!v5)
    {
      unsigned int v5 = mbedtls_mpi_copy(a1, a2);
      if (!v5) {
        mpi_mul_hlp(i, *(unint64_t **)(a2 + 16), *(unint64_t **)(a1 + 16), a3 - 1);
      }
    }
    return v5;
  }
  else
  {
    return mbedtls_mpi_lset(a1, 0);
  }
}

uint64_t mbedtls_mpi_add_int(_DWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v11 = a1;
  unint64_t v10 = a2;
  uint64_t v9 = a3;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  if (a3 >= 0) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = -v9;
  }
  uint64_t v12 = v5;
  if (v9 < 0) {
    int v3 = -1;
  }
  else {
    int v3 = 1;
  }
  LODWORD(v6) = v3;
  uint64_t v7 = 1;
  unint64_t v8 = &v12;
  return mbedtls_mpi_add_mpi(v11, v10, &v6);
}

uint64_t mbedtls_mpi_write_string(uint64_t a1, int a2, char *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v24 = a1;
  int v23 = a2;
  uint64_t v22 = a3;
  unint64_t v21 = a4;
  int v20 = a5;
  unsigned int v19 = 0;
  unint64_t v18 = 0;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (a2 >= 2 && v23 <= 16)
  {
    unint64_t v18 = mbedtls_mpi_bitlen(v24);
    if (v23 >= 4) {
      v18 >>= 1;
    }
    if (v23 >= 16) {
      v18 >>= 1;
    }
    v18 += 3 + (((_BYTE)v18 + 3) & 1);
    if (v21 < v18)
    {
      *int v20 = v18;
      return -8;
    }
    uint64_t v17 = v22;
    mbedtls_mpi_init((uint64_t)v16);
    if (*(_DWORD *)v24 == -1)
    {
      uint64_t v5 = v17++;
      char *v5 = 45;
      --v21;
    }
    if (v23 == 16)
    {
      uint64_t v14 = *(void *)(v24 + 8);
      uint64_t v12 = 0;
      while (v14)
      {
        for (uint64_t i = 8; i; --i)
        {
          int v15 = (*(void *)(*(void *)(v24 + 16) + 8 * (v14 - 1)) >> (8 * (i - 1)));
          if ((*(void *)(*(void *)(v24 + 16) + 8 * (v14 - 1)) >> (8 * (i - 1)))
            || v12
            || v14 + i == 2)
          {
            char v6 = a0123456789abcd_0[v15 / 16];
            uint64_t v7 = v17++;
            char *v7 = v6;
            char v8 = a0123456789abcd_0[v15 % 16];
            uint64_t v9 = v17++;
            *uint64_t v9 = v8;
            uint64_t v12 = 1;
          }
        }
        --v14;
      }
    }
    else
    {
      unsigned int v19 = mbedtls_mpi_copy((uint64_t)v16, v24);
      if (v19) {
        goto LABEL_29;
      }
      if (LODWORD(v16[0]) == -1) {
        LODWORD(v16[0]) = 1;
      }
      unsigned int v19 = mpi_write_hlp(v16, v23, &v17, v21);
      if (v19) {
        goto LABEL_29;
      }
    }
    unint64_t v10 = v17++;
    char *v10 = 0;
    *int v20 = v17 - v22;
LABEL_29:
    mbedtls_mpi_free((uint64_t)v16);
    return v19;
  }
  return -4;
}

uint64_t mpi_write_hlp(void *a1, int a2, void *a3, unint64_t a4)
{
  uint64_t v12 = a1;
  int v11 = a2;
  unint64_t v10 = a3;
  unint64_t v9 = a4;
  unsigned int v8 = -110;
  unint64_t v7 = 0;
  unint64_t v6 = 0;
  uint64_t v5 = (unsigned char *)(*a3 + a4);
  while (1)
  {
    if (v6 >= v9) {
      return -8;
    }
    unsigned int v8 = mbedtls_mpi_mod_int(&v7, (uint64_t)v12, v11);
    if (v8) {
      break;
    }
    unsigned int v8 = mbedtls_mpi_div_int(v12, 0, (uint64_t)v12, v11);
    if (v8) {
      break;
    }
    --v5;
    if (v7 >= 0xA) {
      unsigned char *v5 = v7 + 55;
    }
    else {
      unsigned char *v5 = v7 + 48;
    }
    ++v6;
    if (!mbedtls_mpi_cmp_int(v12, 0))
    {
      __memmove_chk();
      *v10 += v6;
      break;
    }
  }
  return v8;
}

uint64_t mbedtls_mpi_read_binary_le(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6 = mbedtls_mpi_resize_clear(a1, a3 / 8 + (a3 % 8 != 0));
  if (!v6)
  {
    for (unint64_t i = 0; i < a3; ++i)
    {
      int v3 = (void *)(*(void *)(a1 + 16) + 8 * (i / 8));
      *v3 |= (unint64_t)*(unsigned __int8 *)(a2 + i) << (8 * (i % 8));
    }
  }
  return v6;
}

uint64_t mbedtls_mpi_resize_clear(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a1 + 8) == a2)
    {
      __memset_chk();
      *(_DWORD *)a1 = 1;
      return 0;
    }
    else
    {
      mbedtls_mpi_free(a1);
      return mbedtls_mpi_grow(a1, a2);
    }
  }
  else
  {
    mbedtls_mpi_free(a1);
    return 0;
  }
}

uint64_t mbedtls_mpi_read_binary(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3 / 8 + (a3 % 8 != 0);
  unsigned int v5 = mbedtls_mpi_resize_clear(a1, v4);
  if (!v5 && a3)
  {
    __memcpy_chk();
    mpi_bigendian_to_host(*(void *)(a1 + 16), v4);
  }
  return v5;
}

unint64_t mpi_bigendian_to_host(unint64_t result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v4 = (unint64_t *)result;
    for (unint64_t i = (unint64_t *)(result + 8 * (a2 - 1)); v4 <= i; --i)
    {
      unint64_t v2 = mpi_uint_bigendian_to_host(*v4);
      BOOL result = mpi_uint_bigendian_to_host(*i);
      unint64_t *v4 = result;
      *unint64_t i = v2;
      ++v4;
    }
  }
  return result;
}

uint64_t mbedtls_mpi_write_binary_le(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v7 = 8 * *(void *)(a1 + 8);
  if (v7 >= a3)
  {
    unint64_t v6 = a3;
    for (unint64_t i = a3; i < v7; ++i)
    {
      if ((*(void *)(*(void *)(a1 + 16) + 8 * (i / 8)) >> (8 * (i % 8)))) {
        return -8;
      }
    }
  }
  else
  {
    unint64_t v6 = 8 * *(void *)(a1 + 8);
  }
  for (unint64_t j = 0; j < v6; ++j)
    *(unsigned char *)(a2 + j) = *(void *)(*(void *)(a1 + 16) + 8 * (j / 8)) >> (8 * (j % 8));
  if (v7 < a3) {
    __memset_chk();
  }
  return 0;
}

uint64_t mbedtls_mpi_write_binary(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v8 = 8 * *(void *)(a1 + 8);
  if (v8 >= a3)
  {
    unint64_t v7 = a3;
    unint64_t v6 = a2;
    for (unint64_t i = a3; i < v8; ++i)
    {
      if ((*(void *)(*(void *)(a1 + 16) + 8 * (i / 8)) >> (8 * (i % 8)))) {
        return -8;
      }
    }
  }
  else
  {
    unint64_t v7 = 8 * *(void *)(a1 + 8);
    unint64_t v6 = a2 + a3 - v8;
    __memset_chk();
  }
  for (unint64_t j = 0; j < v7; ++j)
    *(unsigned char *)(v6 + v7 - j - 1) = *(void *)(*(void *)(a1 + 16) + 8 * (j / 8)) >> (8 * (j % 8));
  return 0;
}

uint64_t mbedtls_mpi_shift_l(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0;
  unint64_t v6 = a2 / 0x40;
  uint64_t v5 = a2 & 0x3F;
  unint64_t v7 = mbedtls_mpi_bitlen(a1) + a2;
  if (v7 <= *(void *)(a1 + 8) << 6 || (unsigned int v10 = mbedtls_mpi_grow(a1, v7 / 0x40 + (v7 % 0x40 != 0))) == 0)
  {
    unsigned int v10 = 0;
    if (v6)
    {
      for (unint64_t i = *(void *)(a1 + 8); i > v6; --i)
        *(void *)(*(void *)(a1 + 16) + 8 * (i - 1)) = *(void *)(*(void *)(a1 + 16) + 8 * (i - v6 - 1));
      while (i)
        *(void *)(*(void *)(a1 + 16) + 8 * --i) = 0;
    }
    if (v5)
    {
      for (unint64_t j = v6; j < *(void *)(a1 + 8); ++j)
      {
        uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8 * j) >> (64 - v5);
        *(void *)(*(void *)(a1 + 16) + 8 * j) <<= v5;
        *(void *)(*(void *)(a1 + 16) + 8 * j) |= v4;
        uint64_t v4 = v3;
      }
    }
  }
  return v10;
}

uint64_t mbedtls_mpi_shift_r(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  unint64_t v8 = a2 / 0x40;
  char v7 = a2 & 0x3F;
  if (__PAIR128__(a2 / 0x40, a2 & 0x3F) <= __PAIR128__(*(void *)(a1 + 8), 0))
  {
    if (v8)
    {
      for (unint64_t i = 0; i < *(void *)(a1 + 8) - v8; ++i)
        *(void *)(*(void *)(a1 + 16) + 8 * i) = *(void *)(*(void *)(a1 + 16) + 8 * (i + v8));
      while (i < *(void *)(a1 + 8))
        *(void *)(*(void *)(a1 + 16) + 8 * i++) = 0;
    }
    if ((a2 & 0x3F) != 0)
    {
      for (uint64_t j = *(void *)(a1 + 8); j; --j)
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8 * (j - 1)) << (64 - v7);
        unint64_t v2 = (void *)(*(void *)(a1 + 16) + 8 * (j - 1));
        *v2 >>= v7;
        uint64_t v3 = (void *)(*(void *)(a1 + 16) + 8 * (j - 1));
        *v3 |= v6;
        uint64_t v6 = v5;
      }
    }
    return 0;
  }
  else
  {
    return mbedtls_mpi_lset(a1, 0);
  }
}

uint64_t mbedtls_mpi_cmp_abs(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = *(void *)(a1 + 8); i && !*(void *)(*(void *)(a1 + 16) + 8 * (i - 1)); --i)
    ;
  for (unint64_t j = *(void *)(a2 + 8); j && !*(void *)(*(void *)(a2 + 16) + 8 * (j - 1)); --j)
    ;
  if (i || j)
  {
    if (i <= j)
    {
      if (j <= i)
      {
        while (i)
        {
          if (*(void *)(*(void *)(a1 + 16) + 8 * (i - 1)) > *(void *)(*(void *)(a2 + 16) + 8 * (i - 1))) {
            return 1;
          }
          if (*(void *)(*(void *)(a1 + 16) + 8 * (i - 1)) < *(void *)(*(void *)(a2 + 16) + 8 * (i - 1))) {
            return -1;
          }
          --i;
        }
        return 0;
      }
      else
      {
        return -1;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_mpi_cmp_mpi(void *a1, uint64_t a2)
{
  for (unint64_t i = a1[1]; i && !*(void *)(a1[2] + 8 * (i - 1)); --i)
    ;
  for (unint64_t j = *(void *)(a2 + 8); j && !*(void *)(*(void *)(a2 + 16) + 8 * (j - 1)); --j)
    ;
  if (i || j)
  {
    if (i <= j)
    {
      if (j <= i)
      {
        if (*(int *)a1 <= 0 || *(int *)a2 >= 0)
        {
          if (*(int *)a2 <= 0 || *(int *)a1 >= 0)
          {
            while (i)
            {
              if (*(void *)(a1[2] + 8 * (i - 1)) > *(void *)(*(void *)(a2 + 16) + 8 * (i - 1))) {
                return *(unsigned int *)a1;
              }
              if (*(void *)(a1[2] + 8 * (i - 1)) < *(void *)(*(void *)(a2 + 16) + 8 * (i - 1))) {
                return -*(_DWORD *)a1;
              }
              --i;
            }
            return 0;
          }
          else
          {
            return -1;
          }
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return -*(_DWORD *)a2;
      }
    }
    else
    {
      return *(unsigned int *)a1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_mpi_cmp_int(void *a1, uint64_t a2)
{
  unint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  char v7 = 0;
  if (a2 >= 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = -v8;
  }
  uint64_t v10 = v4;
  if (v8 < 0) {
    int v2 = -1;
  }
  else {
    int v2 = 1;
  }
  LODWORD(v5) = v2;
  uint64_t v6 = 1;
  char v7 = &v10;
  return mbedtls_mpi_cmp_mpi(v9, (uint64_t)&v5);
}

uint64_t mbedtls_mpi_add_abs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  if (a1 == a3)
  {
    uint64_t v13 = a1;
    uint64_t v12 = a2;
  }
  if (a1 == v13 || (unsigned int v11 = mbedtls_mpi_copy(a1, v13)) == 0)
  {
    *(_DWORD *)a1 = 1;
    for (unint64_t i = *(void *)(v12 + 8); i && !*(void *)(*(void *)(v12 + 16) + 8 * (i - 1)); --i)
      ;
    unsigned int v11 = mbedtls_mpi_grow(a1, i);
    if (!v11)
    {
      uint64_t v8 = *(unint64_t **)(v12 + 16);
      char v7 = *(unint64_t **)(a1 + 16);
      unint64_t v5 = 0;
      for (unint64_t j = 0; j < i; ++j)
      {
        unint64_t v4 = *v8;
        *v7 += v5;
        BOOL v6 = *v7 < v5;
        *v7 += v4;
        unint64_t v5 = v6 + (*v7 < v4);
        ++v8;
        ++v7;
      }
      while (v5)
      {
        if (j >= *(void *)(a1 + 8))
        {
          unsigned int v11 = mbedtls_mpi_grow(a1, j + 1);
          if (v11) {
            return v11;
          }
          char v7 = (unint64_t *)(*(void *)(a1 + 16) + 8 * j);
        }
        *v7 += v5;
        unint64_t v5 = *v7 < v5;
        ++j;
        ++v7;
      }
    }
  }
  return v11;
}

uint64_t mbedtls_mpi_sub_abs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(void *)(a3 + 8); i && !*(void *)(*(void *)(a3 + 16) + 8 * (i - 1)); --i)
    ;
  if (i <= *(void *)(a2 + 8))
  {
    unsigned int v6 = mbedtls_mpi_grow(a1, *(void *)(a2 + 8));
    if (!v6)
    {
      if (*(void *)(a2 + 8) > i) {
        __memcpy_chk();
      }
      if (*(void *)(a1 + 8) > *(void *)(a2 + 8)) {
        __memset_chk();
      }
      if (mpi_sub_hlp(i, *(void *)(a1 + 16), *(void *)(a2 + 16), *(void *)(a3 + 16)))
      {
        while (1)
        {
          BOOL v4 = 0;
          if (i < *(void *)(a1 + 8)) {
            BOOL v4 = *(void *)(*(void *)(a1 + 16) + 8 * i) == 0;
          }
          if (!v4) {
            break;
          }
          --*(void *)(*(void *)(a1 + 16) + 8 * i++);
        }
        if (i == *(void *)(a1 + 8)) {
          return -10;
        }
        --*(void *)(*(void *)(a1 + 16) + 8 * i);
      }
      *(_DWORD *)a1 = 1;
    }
  }
  else
  {
    return -10;
  }
  return v6;
}

unint64_t mpi_sub_hlp(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = 0;
  for (unint64_t i = 0; i < a1; ++i)
  {
    unint64_t v5 = *(void *)(a3 + 8 * i) - v6;
    unint64_t v6 = (v5 < *(void *)(a4 + 8 * i)) + (unint64_t)(*(void *)(a3 + 8 * i) < v6);
    *(void *)(a2 + 8 * i) = v5 - *(void *)(a4 + 8 * i);
  }
  return v6;
}

uint64_t mbedtls_mpi_add_mpi(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v4 = *a2;
  if (*a2 * *a3 >= 0)
  {
    unsigned int v5 = mbedtls_mpi_add_abs((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    if (!v5) {
      *a1 = v4;
    }
  }
  else if ((int)mbedtls_mpi_cmp_abs((uint64_t)a2, (uint64_t)a3) < 0)
  {
    unsigned int v5 = mbedtls_mpi_sub_abs((uint64_t)a1, (uint64_t)a3, (uint64_t)a2);
    if (!v5) {
      *a1 = -v4;
    }
  }
  else
  {
    unsigned int v5 = mbedtls_mpi_sub_abs((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    if (!v5) {
      *a1 = v4;
    }
  }
  return v5;
}

uint64_t mbedtls_mpi_sub_mpi(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v4 = *a2;
  if (*a2 * *a3 <= 0)
  {
    unsigned int v5 = mbedtls_mpi_add_abs((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    if (!v5) {
      *a1 = v4;
    }
  }
  else if ((int)mbedtls_mpi_cmp_abs((uint64_t)a2, (uint64_t)a3) < 0)
  {
    unsigned int v5 = mbedtls_mpi_sub_abs((uint64_t)a1, (uint64_t)a3, (uint64_t)a2);
    if (!v5) {
      *a1 = -v4;
    }
  }
  else
  {
    unsigned int v5 = mbedtls_mpi_sub_abs((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    if (!v5) {
      *a1 = v4;
    }
  }
  return v5;
}

uint64_t mbedtls_mpi_sub_int(_DWORD *a1, int *a2, uint64_t a3)
{
  unsigned int v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (a3 >= 0) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = -v9;
  }
  uint64_t v12 = v5;
  if (v9 < 0) {
    int v3 = -1;
  }
  else {
    int v3 = 1;
  }
  LODWORD(v6) = v3;
  uint64_t v7 = 1;
  uint64_t v8 = &v12;
  return mbedtls_mpi_sub_mpi(v11, v10, &v6);
}

uint64_t mbedtls_mpi_mul_mpi(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = (void *)a1;
  unsigned int v11 = (void *)a2;
  uint64_t v10 = (void *)a3;
  unsigned int v9 = -110;
  unint64_t i = 0;
  uint64_t j = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  int v4 = 0;
  mbedtls_mpi_init((uint64_t)v6);
  mbedtls_mpi_init((uint64_t)v5);
  if (v12 == v11)
  {
    unsigned int v9 = mbedtls_mpi_copy((uint64_t)v6, (uint64_t)v11);
    if (v9) {
      goto LABEL_26;
    }
    unsigned int v11 = v6;
  }
  if (v12 == v10)
  {
    unsigned int v9 = mbedtls_mpi_copy((uint64_t)v5, (uint64_t)v10);
    if (v9) {
      goto LABEL_26;
    }
    uint64_t v10 = v5;
  }
  for (unint64_t i = v11[1]; i && !*(void *)(v11[2] + 8 * (i - 1)); --i)
    ;
  if (!i) {
    int v4 = 1;
  }
  for (uint64_t j = v10[1]; j && !*(void *)(v10[2] + 8 * (j - 1)); --j)
    ;
  if (!j) {
    int v4 = 1;
  }
  unsigned int v9 = mbedtls_mpi_grow((uint64_t)v12, i + j);
  if (!v9)
  {
    unsigned int v9 = mbedtls_mpi_lset((uint64_t)v12, 0);
    if (!v9)
    {
      while (j)
      {
        mpi_mul_hlp(i, (unint64_t *)v11[2], (unint64_t *)(v12[2] + 8 * j - 8), *(void *)(v10[2] + 8 * (j - 1)));
        --j;
      }
      if (v4) {
        *(_DWORD *)uint64_t v12 = 1;
      }
      else {
        *(_DWORD *)uint64_t v12 = *(_DWORD *)v11 * *(_DWORD *)v10;
      }
    }
  }
LABEL_26:
  mbedtls_mpi_free((uint64_t)v5);
  mbedtls_mpi_free((uint64_t)v6);
  return v9;
}

unint64_t mpi_mul_hlp(unint64_t result, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v32 = result;
  unint64_t v29 = 0;
  while (v32 >= 0x10)
  {
    unsigned long long v4 = *a2 * (unsigned __int128)a4 + *a3 + v29;
    *a3 = v4;
    unsigned long long v5 = a2[1] * (unsigned __int128)a4 + a3[1] + *((unint64_t *)&v4 + 1);
    a3[1] = v5;
    unsigned long long v6 = a2[2] * (unsigned __int128)a4 + a3[2] + *((unint64_t *)&v5 + 1);
    a3[2] = v6;
    unsigned long long v7 = a2[3] * (unsigned __int128)a4 + a3[3] + *((unint64_t *)&v6 + 1);
    a3[3] = v7;
    unsigned long long v8 = a2[4] * (unsigned __int128)a4 + a3[4] + *((unint64_t *)&v7 + 1);
    a3[4] = v8;
    unsigned long long v9 = a2[5] * (unsigned __int128)a4 + a3[5] + *((unint64_t *)&v8 + 1);
    a3[5] = v9;
    unsigned long long v10 = a2[6] * (unsigned __int128)a4 + a3[6] + *((unint64_t *)&v9 + 1);
    a3[6] = v10;
    unsigned long long v11 = a2[7] * (unsigned __int128)a4 + a3[7] + *((unint64_t *)&v10 + 1);
    a3[7] = v11;
    unsigned long long v12 = a2[8] * (unsigned __int128)a4 + a3[8] + *((unint64_t *)&v11 + 1);
    a3[8] = v12;
    unsigned long long v13 = a2[9] * (unsigned __int128)a4 + a3[9] + *((unint64_t *)&v12 + 1);
    a3[9] = v13;
    unsigned long long v14 = a2[10] * (unsigned __int128)a4 + a3[10] + *((unint64_t *)&v13 + 1);
    a3[10] = v14;
    unsigned long long v15 = a2[11] * (unsigned __int128)a4 + a3[11] + *((unint64_t *)&v14 + 1);
    a3[11] = v15;
    unsigned long long v16 = a2[12] * (unsigned __int128)a4 + a3[12] + *((unint64_t *)&v15 + 1);
    a3[12] = v16;
    unsigned long long v17 = a2[13] * (unsigned __int128)a4 + a3[13] + *((unint64_t *)&v16 + 1);
    a3[13] = v17;
    unsigned long long v18 = a2[14] * (unsigned __int128)a4 + a3[14] + *((unint64_t *)&v17 + 1);
    a3[14] = v18;
    unsigned long long v19 = a2[15] * (unsigned __int128)a4 + a3[15] + *((unint64_t *)&v18 + 1);
    a3[15] = v19;
    unint64_t v29 = *((void *)&v19 + 1);
    a3 += 16;
    a2 += 16;
    v32 -= 16;
  }
  while (v32 >= 8)
  {
    unsigned long long v20 = *a2 * (unsigned __int128)a4 + *a3 + v29;
    *a3 = v20;
    unsigned long long v21 = a2[1] * (unsigned __int128)a4 + a3[1] + *((unint64_t *)&v20 + 1);
    a3[1] = v21;
    unsigned long long v22 = a2[2] * (unsigned __int128)a4 + a3[2] + *((unint64_t *)&v21 + 1);
    a3[2] = v22;
    unsigned long long v23 = a2[3] * (unsigned __int128)a4 + a3[3] + *((unint64_t *)&v22 + 1);
    a3[3] = v23;
    unsigned long long v24 = a2[4] * (unsigned __int128)a4 + a3[4] + *((unint64_t *)&v23 + 1);
    a3[4] = v24;
    unsigned long long v25 = a2[5] * (unsigned __int128)a4 + a3[5] + *((unint64_t *)&v24 + 1);
    a3[5] = v25;
    unsigned long long v26 = a2[6] * (unsigned __int128)a4 + a3[6] + *((unint64_t *)&v25 + 1);
    a3[6] = v26;
    unsigned long long v27 = a2[7] * (unsigned __int128)a4 + a3[7] + *((unint64_t *)&v26 + 1);
    a3[7] = v27;
    unint64_t v29 = *((void *)&v27 + 1);
    a3 += 8;
    a2 += 8;
    v32 -= 8;
  }
  while (v32)
  {
    unsigned long long v28 = *a2 * (unsigned __int128)a4 + *a3 + v29;
    *a3 = v28;
    unint64_t v29 = *((void *)&v28 + 1);
    ++a3;
    ++a2;
    --v32;
  }
  while (v29)
  {
    *a3 += v29;
    unint64_t v29 = *a3++ < v29;
  }
  return result;
}

uint64_t mbedtls_mpi_div_mpi(_DWORD *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v30 = a1;
  unint64_t v29 = a2;
  uint64_t v28 = a3;
  unsigned long long v27 = a4;
  unsigned int v26 = -110;
  unint64_t v25 = 0;
  unint64_t v24 = 0;
  unint64_t v23 = 0;
  unint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  v12[0] = 0;
  v12[1] = 0;
  unsigned long long v13 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned long long v11 = 0;
  if (mbedtls_mpi_cmp_int(a4, 0))
  {
    mbedtls_mpi_init((uint64_t)&v19);
    mbedtls_mpi_init((uint64_t)&v16);
    mbedtls_mpi_init((uint64_t)v14);
    mbedtls_mpi_init((uint64_t)v12);
    LODWORD(v9) = 1;
    uint64_t v10 = 3;
    unsigned long long v11 = v32;
    if ((int)mbedtls_mpi_cmp_abs(v28, (uint64_t)v27) < 0)
    {
      if ((!v30 || (unsigned int v26 = mbedtls_mpi_lset((uint64_t)v30, 0)) == 0)
        && (!v29 || (unsigned int v26 = mbedtls_mpi_copy((uint64_t)v29, v28)) == 0))
      {
        return 0;
      }
LABEL_59:
      mbedtls_mpi_free((uint64_t)&v19);
      mbedtls_mpi_free((uint64_t)&v16);
      mbedtls_mpi_free((uint64_t)v14);
      mbedtls_mpi_free((uint64_t)v12);
      mbedtls_platform_zeroize(v32, 0x18uLL);
      return v26;
    }
    unsigned int v26 = mbedtls_mpi_copy((uint64_t)&v19, v28);
    if (v26) {
      goto LABEL_59;
    }
    unsigned int v26 = mbedtls_mpi_copy((uint64_t)&v16, (uint64_t)v27);
    if (v26) {
      goto LABEL_59;
    }
    LODWORD(v16) = 1;
    LODWORD(v19) = 1;
    unsigned int v26 = mbedtls_mpi_grow((uint64_t)v14, *(void *)(v28 + 8) + 2);
    if (v26) {
      goto LABEL_59;
    }
    unsigned int v26 = mbedtls_mpi_lset((uint64_t)v14, 0);
    if (v26) {
      goto LABEL_59;
    }
    unsigned int v26 = mbedtls_mpi_grow((uint64_t)v12, *(void *)(v28 + 8) + 2);
    if (v26) {
      goto LABEL_59;
    }
    unint64_t v22 = mbedtls_mpi_bitlen((uint64_t)&v16) % 0x40;
    if (v22 >= 0x3F)
    {
      unint64_t v22 = 0;
    }
    else
    {
      unint64_t v22 = 63 - v22;
      unsigned int v26 = mbedtls_mpi_shift_l((uint64_t)&v19, v22);
      if (v26) {
        goto LABEL_59;
      }
      unsigned int v26 = mbedtls_mpi_shift_l((uint64_t)&v16, v22);
      if (v26) {
        goto LABEL_59;
      }
    }
    unint64_t v24 = v20 - 1;
    unint64_t v23 = v17 - 1;
    unsigned int v26 = mbedtls_mpi_shift_l((uint64_t)&v16, (v20 - v17) << 6);
    if (v26) {
      goto LABEL_59;
    }
    while ((int)mbedtls_mpi_cmp_mpi(&v19, (uint64_t)&v16) >= 0)
    {
      ++*(void *)(v15 + 8 * (v24 - v23));
      unsigned int v26 = mbedtls_mpi_sub_mpi(&v19, (int *)&v19, &v16);
      if (v26) {
        goto LABEL_59;
      }
    }
    unsigned int v26 = mbedtls_mpi_shift_r((uint64_t)&v16, (v24 - v23) << 6);
    if (v26) {
      goto LABEL_59;
    }
    unint64_t v25 = v24;
    while (2)
    {
      if (v25 > v23)
      {
        if (*(void *)(v21 + 8 * v25) < *(void *)(v18 + 8 * v23))
        {
          uint64_t v4 = mbedtls_int_div_int(*(void *)(v21 + 8 * v25), *(void *)(v21 + 8 * (v25 - 1)), *(void *)(v18 + 8 * v23), 0);
          *(void *)(v15 + 8 * (v25 - v23 - 1)) = v4;
        }
        else
        {
          *(void *)(v15 + 8 * (v25 - v23 - 1)) = -1;
        }
        if (v25 >= 2) {
          uint64_t v8 = *(void *)(v21 + 8 * (v25 - 2));
        }
        else {
          uint64_t v8 = 0;
        }
        void *v11 = v8;
        if (v25) {
          uint64_t v7 = *(void *)(v21 + 8 * (v25 - 1));
        }
        else {
          uint64_t v7 = 0;
        }
        v11[1] = v7;
        void v11[2] = *(void *)(v21 + 8 * v25);
        ++*(void *)(v15 + 8 * (v25 - v23 - 1));
        do
        {
          --*(void *)(v15 + 8 * (v25 - v23 - 1));
          unsigned int v26 = mbedtls_mpi_lset((uint64_t)v12, 0);
          if (!v26)
          {
            uint64_t v6 = v23 ? *(void *)(v18 + 8 * (v23 - 1)) : 0;
            void *v13 = v6;
            v13[1] = *(void *)(v18 + 8 * v23);
            unsigned int v26 = mbedtls_mpi_mul_int((uint64_t)v12, (uint64_t)v12, *(void *)(v15 + 8 * (v25 - v23 - 1)));
            if (!v26) {
              continue;
            }
          }
          goto LABEL_59;
        }
        while ((int)mbedtls_mpi_cmp_mpi(v12, (uint64_t)&v9) > 0);
        unsigned int v26 = mbedtls_mpi_mul_int((uint64_t)v12, (uint64_t)&v16, *(void *)(v15 + 8 * (v25 - v23 - 1)));
        if (v26) {
          goto LABEL_59;
        }
        unsigned int v26 = mbedtls_mpi_shift_l((uint64_t)v12, (v25 - v23 - 1) << 6);
        if (v26) {
          goto LABEL_59;
        }
        unsigned int v26 = mbedtls_mpi_sub_mpi(&v19, (int *)&v19, v12);
        if (v26) {
          goto LABEL_59;
        }
        if ((int)mbedtls_mpi_cmp_int(&v19, 0) < 0)
        {
          unsigned int v26 = mbedtls_mpi_copy((uint64_t)v12, (uint64_t)&v16);
          if (v26) {
            goto LABEL_59;
          }
          unsigned int v26 = mbedtls_mpi_shift_l((uint64_t)v12, (v25 - v23 - 1) << 6);
          if (v26) {
            goto LABEL_59;
          }
          unsigned int v26 = mbedtls_mpi_add_mpi(&v19, (int *)&v19, v12);
          if (v26) {
            goto LABEL_59;
          }
          --*(void *)(v15 + 8 * (v25 - v23 - 1));
        }
        --v25;
        continue;
      }
      break;
    }
    if (v30)
    {
      unsigned int v26 = mbedtls_mpi_copy((uint64_t)v30, (uint64_t)v14);
      if (v26) {
        goto LABEL_59;
      }
      *uint64_t v30 = *(_DWORD *)v28 * *v27;
    }
    if (v29)
    {
      unsigned int v26 = mbedtls_mpi_shift_r((uint64_t)&v19, v22);
      if (!v26)
      {
        LODWORD(v19) = *(_DWORD *)v28;
        unsigned int v26 = mbedtls_mpi_copy((uint64_t)v29, (uint64_t)&v19);
        if (!v26 && !mbedtls_mpi_cmp_int(v29, 0)) {
          *(_DWORD *)unint64_t v29 = 1;
        }
      }
    }
    goto LABEL_59;
  }
  return -12;
}

uint64_t mbedtls_int_div_int(unint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3 && a1 < a3)
  {
    uint64_t v6 = __udivti3();
    if (v4) {
      uint64_t v6 = -1;
    }
    if (a4) {
      *a4 = a2 - v6 * a3;
    }
    return v6;
  }
  else
  {
    if (a4) {
      *a4 = -1;
    }
    return -1;
  }
}

uint64_t mbedtls_mpi_div_int(_DWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned long long v13 = a1;
  unsigned long long v12 = a2;
  uint64_t v11 = a3;
  uint64_t v10 = a4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (a4 >= 0) {
    uint64_t v6 = v10;
  }
  else {
    uint64_t v6 = -v10;
  }
  uint64_t v14 = v6;
  if (v10 < 0) {
    int v4 = -1;
  }
  else {
    int v4 = 1;
  }
  LODWORD(v7) = v4;
  uint64_t v8 = 1;
  uint64_t v9 = &v14;
  return mbedtls_mpi_div_mpi(v13, v12, v11, &v7);
}

uint64_t mbedtls_mpi_mod_mpi(int *a1, uint64_t a2, void *a3)
{
  if ((int)mbedtls_mpi_cmp_int(a3, 0) >= 0)
  {
    unsigned int v4 = mbedtls_mpi_div_mpi(0, a1, a2, a3);
    if (!v4)
    {
      while ((int)mbedtls_mpi_cmp_int(a1, 0) < 0)
      {
        unsigned int v4 = mbedtls_mpi_add_mpi(a1, a1, a3);
        if (v4) {
          return v4;
        }
      }
      do
      {
        if ((int)mbedtls_mpi_cmp_mpi(a1, (uint64_t)a3) < 0) {
          break;
        }
        unsigned int v4 = mbedtls_mpi_sub_mpi(a1, a1, a3);
      }
      while (!v4);
    }
    return v4;
  }
  else
  {
    return -10;
  }
}

uint64_t mbedtls_mpi_mod_int(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (a3 >= 0)
    {
      if (a3 == 1)
      {
        *a1 = 0;
        return 0;
      }
      else if (a3 == 2)
      {
        *a1 = **(void **)(a2 + 16) & 1;
        return 0;
      }
      else
      {
        uint64_t v6 = *(void *)(a2 + 8);
        unint64_t v4 = 0;
        while (v6)
        {
          unint64_t v5 = *(void *)(*(void *)(a2 + 16) + 8 * (v6 - 1));
          unint64_t v4 = (v5 | (((HIDWORD(v5) | (v4 << 32)) % a3) << 32)) % a3;
          --v6;
        }
        if (*(int *)a2 < 0 && v4) {
          unint64_t v4 = a3 - v4;
        }
        *a1 = v4;
        return 0;
      }
    }
    else
    {
      return -10;
    }
  }
  else
  {
    return -12;
  }
}

uint64_t mbedtls_mpi_exp_mod(_DWORD *a1, void *a2, void *a3, int *a4, long long *a5)
{
  unint64_t v32 = a1;
  int v31 = a2;
  uint64_t v30 = a3;
  unint64_t v29 = a4;
  uint64_t v28 = a5;
  unsigned int v27 = -110;
  uint64_t v26 = 0;
  unint64_t v25 = 0;
  uint64_t v24 = 1;
  unint64_t i = 0;
  unint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  unint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  if (int)mbedtls_mpi_cmp_int(a4, 0) > 0 && (**((void **)v29 + 2))
  {
    if ((int)mbedtls_mpi_cmp_int(v30, 0) >= 0)
    {
      if (mbedtls_mpi_bitlen((uint64_t)v30) <= 0x100 && mbedtls_mpi_bitlen((uint64_t)v29) <= 0x100)
      {
        mpi_montg_init(&v17, (uint64_t)v29);
        mbedtls_mpi_init((uint64_t)&v14);
        mbedtls_mpi_init((uint64_t)v13);
        mbedtls_mpi_init((uint64_t)v11);
        mbedtls_mpi_init((uint64_t)v12);
        memset(__b, 0, sizeof(__b));
        unint64_t i = mbedtls_mpi_bitlen((uint64_t)v30);
        if (i <= 0x29F)
        {
          if (i <= 0xEF)
          {
            if (i <= 0x4F)
            {
              if (i <= 0x17) {
                int v5 = 1;
              }
              else {
                int v5 = 3;
              }
              int v7 = v5;
            }
            else
            {
              int v7 = 4;
            }
            int v8 = v7;
          }
          else
          {
            int v8 = 5;
          }
          int v9 = v8;
        }
        else
        {
          int v9 = 6;
        }
        unint64_t v25 = v9;
        if ((unint64_t)v9 > 1) {
          unint64_t v25 = 1;
        }
        unint64_t v22 = *((void *)v29 + 1) + 1;
        unsigned int v27 = mbedtls_mpi_grow((uint64_t)v32, v22);
        if (!v27)
        {
          unsigned int v27 = mbedtls_mpi_grow((uint64_t)&__b[6], v22);
          if (!v27)
          {
            unsigned int v27 = mbedtls_mpi_grow((uint64_t)v13, 2 * v22);
            if (!v27)
            {
              BOOL v10 = *(_DWORD *)v31 == -1;
              if (*(_DWORD *)v31 == -1)
              {
                unsigned int v27 = mbedtls_mpi_copy((uint64_t)v11, (uint64_t)v31);
                if (v27) {
                  goto LABEL_80;
                }
                LODWORD(v11[0]) = 1;
                int v31 = v11;
              }
              if (v28 && *((void *)v28 + 2))
              {
                long long v14 = *v28;
                uint64_t v15 = *((void *)v28 + 2);
              }
              else
              {
                unsigned int v27 = mbedtls_mpi_lset((uint64_t)&v14, 1);
                if (v27) {
                  goto LABEL_80;
                }
                unsigned int v27 = mbedtls_mpi_shift_l((uint64_t)&v14, *((void *)v29 + 1) << 7);
                if (v27) {
                  goto LABEL_80;
                }
                unsigned int v27 = mbedtls_mpi_mod_mpi((int *)&v14, (uint64_t)&v14, v29);
                if (v27) {
                  goto LABEL_80;
                }
                if (v28) {
                  __memcpy_chk();
                }
              }
              if ((int)mbedtls_mpi_cmp_mpi(v31, (uint64_t)v29) < 0)
              {
                unsigned int v27 = mbedtls_mpi_copy((uint64_t)&__b[6], (uint64_t)v31);
                if (v27) {
                  goto LABEL_80;
                }
              }
              else
              {
                unsigned int v27 = mbedtls_mpi_mod_mpi(&__b[6], (uint64_t)v31, v29);
                if (v27) {
                  goto LABEL_80;
                }
                unsigned int v27 = mbedtls_mpi_grow((uint64_t)&__b[6], *((void *)v29 + 1) + 1);
                if (v27) {
                  goto LABEL_80;
                }
              }
              mpi_montmul((uint64_t)&__b[6], (uint64_t)&v14, (uint64_t)v29, v17, (uint64_t)v13);
              unsigned int v27 = mbedtls_mpi_copy((uint64_t)v32, (uint64_t)&v14);
              if (v27) {
                goto LABEL_80;
              }
              mpi_montred((uint64_t)v32, (uint64_t)v29, v17, (uint64_t)v13);
              if (v25 > 1)
              {
                unint64_t v22 = v24 << (v25 - 1);
                unsigned int v27 = mbedtls_mpi_grow((uint64_t)&__b[6 * v22], *((void *)v29 + 1) + 1);
                if (v27) {
                  goto LABEL_80;
                }
                unsigned int v27 = mbedtls_mpi_copy((uint64_t)&__b[6 * v22], (uint64_t)&__b[6]);
                if (v27) {
                  goto LABEL_80;
                }
                for (unint64_t i = 0; i < v25 - 1; ++i)
                  mpi_montmul((uint64_t)&__b[6 * v22], (uint64_t)&__b[6 * v22], (uint64_t)v29, v17, (uint64_t)v13);
                for (unint64_t i = v22 + 1; i < v24 << v25; ++i)
                {
                  unsigned int v27 = mbedtls_mpi_grow((uint64_t)&__b[6 * i], *((void *)v29 + 1) + 1);
                  if (v27) {
                    goto LABEL_80;
                  }
                  unsigned int v27 = mbedtls_mpi_copy((uint64_t)&__b[6 * i], (uint64_t)&__b[6 * i - 6]);
                  if (v27) {
                    goto LABEL_80;
                  }
                  mpi_montmul((uint64_t)&__b[6 * i], (uint64_t)&__b[6], (uint64_t)v29, v17, (uint64_t)v13);
                }
              }
              uint64_t v21 = v30[1];
              uint64_t v20 = 0;
              unint64_t v19 = 0;
              uint64_t v26 = 0;
              uint64_t v16 = 0;
              while (1)
              {
                if (!v20)
                {
                  if (!v21)
                  {
                    for (unint64_t i = 0; i < v19; ++i)
                    {
                      mpi_montmul((uint64_t)v32, (uint64_t)v32, (uint64_t)v29, v17, (uint64_t)v13);
                      v26 *= 2;
                      if ((v26 & (v24 << v25)) != 0) {
                        mpi_montmul((uint64_t)v32, (uint64_t)&__b[6], (uint64_t)v29, v17, (uint64_t)v13);
                      }
                    }
                    mpi_montred((uint64_t)v32, (uint64_t)v29, v17, (uint64_t)v13);
                    if (v10 && v30[1] && (*(void *)v30[2] & 1) != 0)
                    {
                      *unint64_t v32 = -1;
                      unsigned int v27 = mbedtls_mpi_add_mpi(v32, v29, v32);
                    }
                    break;
                  }
                  --v21;
                  uint64_t v20 = 64;
                }
                uint64_t v18 = (*(void *)(v30[2] + 8 * v21) >> --v20) & 1;
                if (v18 || v16)
                {
                  if (v18 || v16 != 1)
                  {
                    uint64_t v16 = 2;
                    v26 |= v18 << (v25 - ++v19);
                    if (v19 == v25)
                    {
                      for (unint64_t i = 0; i < v25; ++i)
                        mpi_montmul((uint64_t)v32, (uint64_t)v32, (uint64_t)v29, v17, (uint64_t)v13);
                      unsigned int v27 = mpi_select((uint64_t)v12, (uint64_t)__b, 1 << v25, v26);
                      if (v27) {
                        break;
                      }
                      mpi_montmul((uint64_t)v32, (uint64_t)v12, (uint64_t)v29, v17, (uint64_t)v13);
                      --v16;
                      unint64_t v19 = 0;
                      uint64_t v26 = 0;
                    }
                  }
                  else
                  {
                    mpi_montmul((uint64_t)v32, (uint64_t)v32, (uint64_t)v29, v17, (uint64_t)v13);
                  }
                }
              }
            }
          }
        }
LABEL_80:
        for (unint64_t i = v24 << (v25 - 1); i < v24 << v25; ++i)
          mbedtls_mpi_free((uint64_t)&__b[6 * i]);
        mbedtls_mpi_free((uint64_t)&__b[6]);
        mbedtls_mpi_free((uint64_t)v13);
        mbedtls_mpi_free((uint64_t)v11);
        mbedtls_mpi_free((uint64_t)v12);
        if (!v28 || !*((void *)v28 + 2)) {
          mbedtls_mpi_free((uint64_t)&v14);
        }
        return v27;
      }
      else
      {
        return -4;
      }
    }
    else
    {
      return -4;
    }
  }
  else
  {
    return -4;
  }
}

void *mpi_montg_init(void *result, uint64_t a2)
{
  uint64_t v3 = **(void **)(a2 + 16);
  uint64_t v4 = v3 + 2 * (((_BYTE)v3 + 2) & 4);
  for (unsigned int i = 64; i >= 8; i /= 2u)
    v4 *= 2 - v3 * v4;
  *BOOL result = -v4;
  return result;
}

unint64_t mpi_montmul(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __memset_chk();
  int v8 = *(unint64_t **)(a5 + 16);
  unint64_t v11 = *(void *)(a3 + 8);
  if (*(void *)(a2 + 8) >= v11) {
    unint64_t v7 = *(void *)(a3 + 8);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 8);
  }
  for (unint64_t i = 0; i < v11; ++i)
  {
    unint64_t v10 = *(void *)(*(void *)(a1 + 16) + 8 * i);
    unint64_t v9 = (*v8 + v10 * **(void **)(a2 + 16)) * a4;
    mpi_mul_hlp(v7, *(unint64_t **)(a2 + 16), v8, v10);
    mpi_mul_hlp(v11, *(unint64_t **)(a3 + 16), v8, v9);
    int v5 = v8++;
    unint64_t *v5 = v10;
    v8[v11 + 1] = 0;
  }
  __memcpy_chk();
  ++v8[v11];
  v8[v11] -= mpi_sub_hlp(v11, (uint64_t)v8, (uint64_t)v8, *(void *)(a3 + 16));
  return mbedtls_ct_mpi_uint_cond_assign(v11, *(void *)(a1 + 16), (uint64_t)v8, v8[v11]);
}

unint64_t mpi_montred(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[4] = a1;
  void v6[3] = a2;
  char v6[2] = a3;
  v6[1] = a4;
  v6[0] = 1;
  v5[0] = 1;
  v5[1] = 1;
  _DWORD v5[2] = v6;
  return mpi_montmul(a1, (uint64_t)v5, a2, a3, a4);
}

uint64_t mpi_select(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned int v7 = -110;
  for (unint64_t i = 0; i < a3; ++i)
  {
    unsigned __int8 v4 = mbedtls_ct_size_BOOL_eq(i, a4);
    unsigned int v7 = mbedtls_mpi_safe_cond_assign(a1, a2 + 24 * i, v4);
    if (v7) {
      break;
    }
  }
  return v7;
}

uint64_t mbedtls_mpi_gcd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  unsigned int v10 = -110;
  unint64_t v9 = 0;
  unint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  mbedtls_mpi_init((uint64_t)v7);
  mbedtls_mpi_init((uint64_t)v6);
  unsigned int v10 = mbedtls_mpi_copy((uint64_t)v7, v12);
  if (!v10)
  {
    unsigned int v10 = mbedtls_mpi_copy((uint64_t)v6, v11);
    if (!v10)
    {
      unint64_t v9 = mbedtls_mpi_lsb((uint64_t)v7);
      unint64_t v8 = mbedtls_mpi_lsb((uint64_t)v6);
      if (v8 || mbedtls_mpi_get_bit((uint64_t)v6, 0))
      {
        if (v8 < v9) {
          unint64_t v9 = v8;
        }
        LODWORD(v6[0]) = 1;
        LODWORD(v7[0]) = 1;
        while (mbedtls_mpi_cmp_int(v7, 0))
        {
          unint64_t v3 = mbedtls_mpi_lsb((uint64_t)v7);
          unsigned int v10 = mbedtls_mpi_shift_r((uint64_t)v7, v3);
          if (v10) {
            goto LABEL_21;
          }
          unint64_t v4 = mbedtls_mpi_lsb((uint64_t)v6);
          unsigned int v10 = mbedtls_mpi_shift_r((uint64_t)v6, v4);
          if (v10) {
            goto LABEL_21;
          }
          if ((int)mbedtls_mpi_cmp_mpi(v7, (uint64_t)v6) < 0)
          {
            unsigned int v10 = mbedtls_mpi_sub_abs((uint64_t)v6, (uint64_t)v6, (uint64_t)v7);
            if (v10) {
              goto LABEL_21;
            }
            unsigned int v10 = mbedtls_mpi_shift_r((uint64_t)v6, 1uLL);
            if (v10) {
              goto LABEL_21;
            }
          }
          else
          {
            unsigned int v10 = mbedtls_mpi_sub_abs((uint64_t)v7, (uint64_t)v7, (uint64_t)v6);
            if (v10) {
              goto LABEL_21;
            }
            unsigned int v10 = mbedtls_mpi_shift_r((uint64_t)v7, 1uLL);
            if (v10) {
              goto LABEL_21;
            }
          }
        }
        unsigned int v10 = mbedtls_mpi_shift_l((uint64_t)v6, v9);
        if (!v10) {
          unsigned int v10 = mbedtls_mpi_copy(v13, (uint64_t)v6);
        }
      }
      else
      {
        unsigned int v10 = mbedtls_mpi_copy(v13, v12);
      }
    }
  }
LABEL_21:
  mbedtls_mpi_free((uint64_t)v7);
  mbedtls_mpi_free((uint64_t)v6);
  return v10;
}

uint64_t mbedtls_mpi_fill_random(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  unsigned int v5 = mbedtls_mpi_resize_clear(a1, a2 / 8 + (a2 % 8 != 0));
  if (v5) {
    return v5;
  }
  if (a2) {
    return mpi_fill_random_internal(a1, a2, a3, a4);
  }
  return 0;
}

uint64_t mpi_fill_random_internal(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  unint64_t v6 = a2 / 8 + (a2 % 8 != 0);
  uint64_t v5 = 8 * v6 - a2;
  if (*(void *)(a1 + 8) >= v6)
  {
    __memset_chk();
    __memset_chk();
    unsigned int v7 = a3(a4, *(void *)(a1 + 16) + v5, a2);
    if (!v7) {
      mpi_bigendian_to_host(*(void *)(a1 + 16), v6);
    }
    return v7;
  }
  else
  {
    return -4;
  }
}

uint64_t mbedtls_mpi_random(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t), uint64_t a5)
{
  uint64_t v19 = a1;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  uint64_t v16 = a4;
  uint64_t v15 = a5;
  unsigned int v14 = -4;
  int v13 = 0;
  int v12 = 1;
  int v11 = 0;
  unint64_t v10 = mbedtls_mpi_bitlen((uint64_t)a3);
  unint64_t v9 = (v10 + 7) / 8;
  memset(v8, 0, sizeof(v8));
  if (v18 >= 0)
  {
    if ((int)mbedtls_mpi_cmp_int(v17, v18) > 0)
    {
      if (v9 <= 4) {
        int v5 = 250;
      }
      else {
        int v5 = 30;
      }
      int v13 = v5;
      mbedtls_mpi_init((uint64_t)v8);
      unsigned int v14 = mbedtls_mpi_resize_clear(v19, v17[1]);
      if (!v14)
      {
        unsigned int v14 = mbedtls_mpi_grow((uint64_t)v8, v17[1]);
        if (!v14)
        {
          unsigned int v14 = mbedtls_mpi_lset((uint64_t)v8, v18);
          if (!v14)
          {
            while (1)
            {
              unsigned int v14 = mpi_fill_random_internal(v19, v9, v16, v15);
              if (v14) {
                break;
              }
              unsigned int v14 = mbedtls_mpi_shift_r(v19, 8 * v9 - v10);
              if (v14) {
                break;
              }
              if (!--v13)
              {
                unsigned int v14 = -14;
                break;
              }
              unsigned int v14 = mbedtls_mpi_lt_mpi_ct(v19, (uint64_t)v8, &v12);
              if (!v14)
              {
                unsigned int v14 = mbedtls_mpi_lt_mpi_ct(v19, (uint64_t)v17, &v11);
                if (!v14)
                {
                  BOOL v7 = 1;
                  if (!v12) {
                    BOOL v7 = v11 == 0;
                  }
                  if (v7) {
                    continue;
                  }
                }
              }
              break;
            }
          }
        }
      }
      mbedtls_mpi_free((uint64_t)v8);
      return v14;
    }
    else
    {
      return -4;
    }
  }
  else
  {
    return -4;
  }
}

uint64_t mbedtls_mpi_inv_mod(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  uint64_t v20 = a3;
  unsigned int v19 = -110;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  v13[0] = 0;
  v13[1] = 0;
  unsigned int v14 = 0;
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  memset(v10, 0, sizeof(v10));
  v8[0] = 0;
  v8[1] = 0;
  unint64_t v9 = 0;
  v6[0] = 0;
  v6[1] = 0;
  BOOL v7 = 0;
  v4[0] = 0;
  v4[1] = 0;
  int v5 = 0;
  if ((int)mbedtls_mpi_cmp_int(a3, 1) > 0)
  {
    mbedtls_mpi_init((uint64_t)v17);
    mbedtls_mpi_init((uint64_t)v15);
    mbedtls_mpi_init((uint64_t)v13);
    mbedtls_mpi_init((uint64_t)v11);
    mbedtls_mpi_init((uint64_t)v18);
    mbedtls_mpi_init((uint64_t)v10);
    mbedtls_mpi_init((uint64_t)v8);
    mbedtls_mpi_init((uint64_t)v6);
    mbedtls_mpi_init((uint64_t)v4);
    unsigned int v19 = mbedtls_mpi_gcd((uint64_t)v18, v21, (uint64_t)v20);
    if (!v19)
    {
      if (mbedtls_mpi_cmp_int(v18, 1))
      {
        unsigned int v19 = -14;
      }
      else
      {
        unsigned int v19 = mbedtls_mpi_mod_mpi((int *)v17, v21, v20);
        if (!v19)
        {
          unsigned int v19 = mbedtls_mpi_copy((uint64_t)v15, (uint64_t)v17);
          if (!v19)
          {
            unsigned int v19 = mbedtls_mpi_copy((uint64_t)v10, (uint64_t)v20);
            if (!v19)
            {
              unsigned int v19 = mbedtls_mpi_copy((uint64_t)v8, (uint64_t)v20);
              if (!v19)
              {
                unsigned int v19 = mbedtls_mpi_lset((uint64_t)v13, 1);
                if (!v19)
                {
                  unsigned int v19 = mbedtls_mpi_lset((uint64_t)v11, 0);
                  if (!v19)
                  {
                    unsigned int v19 = mbedtls_mpi_lset((uint64_t)v6, 0);
                    if (!v19)
                    {
                      unsigned int v19 = mbedtls_mpi_lset((uint64_t)v4, 1);
                      if (!v19)
                      {
                        do
                        {
                          while ((*v16 & 1) == 0)
                          {
                            unsigned int v19 = mbedtls_mpi_shift_r((uint64_t)v15, 1uLL);
                            if (!v19
                              && ((*v14 & 1) == 0 && (*v12 & 1) == 0
                               || (unsigned int v19 = mbedtls_mpi_add_mpi(v13, (int *)v13, v10)) == 0
                               && (unsigned int v19 = mbedtls_mpi_sub_mpi(v11, (int *)v11, v17)) == 0))
                            {
                              unsigned int v19 = mbedtls_mpi_shift_r((uint64_t)v13, 1uLL);
                              if (!v19)
                              {
                                unsigned int v19 = mbedtls_mpi_shift_r((uint64_t)v11, 1uLL);
                                if (!v19) {
                                  continue;
                                }
                              }
                            }
                            goto LABEL_48;
                          }
                          while ((*v9 & 1) == 0)
                          {
                            unsigned int v19 = mbedtls_mpi_shift_r((uint64_t)v8, 1uLL);
                            if (!v19
                              && ((*v7 & 1) == 0 && (*v5 & 1) == 0
                               || (unsigned int v19 = mbedtls_mpi_add_mpi(v6, (int *)v6, v10)) == 0
                               && (unsigned int v19 = mbedtls_mpi_sub_mpi(v4, (int *)v4, v17)) == 0))
                            {
                              unsigned int v19 = mbedtls_mpi_shift_r((uint64_t)v6, 1uLL);
                              if (!v19)
                              {
                                unsigned int v19 = mbedtls_mpi_shift_r((uint64_t)v4, 1uLL);
                                if (!v19) {
                                  continue;
                                }
                              }
                            }
                            goto LABEL_48;
                          }
                          if ((int)mbedtls_mpi_cmp_mpi(v15, (uint64_t)v8) < 0)
                          {
                            unsigned int v19 = mbedtls_mpi_sub_mpi(v8, (int *)v8, v15);
                            if (v19) {
                              goto LABEL_48;
                            }
                            unsigned int v19 = mbedtls_mpi_sub_mpi(v6, (int *)v6, v13);
                            if (v19) {
                              goto LABEL_48;
                            }
                            unsigned int v19 = mbedtls_mpi_sub_mpi(v4, (int *)v4, v11);
                            if (v19) {
                              goto LABEL_48;
                            }
                          }
                          else
                          {
                            unsigned int v19 = mbedtls_mpi_sub_mpi(v15, (int *)v15, v8);
                            if (v19) {
                              goto LABEL_48;
                            }
                            unsigned int v19 = mbedtls_mpi_sub_mpi(v13, (int *)v13, v6);
                            if (v19) {
                              goto LABEL_48;
                            }
                            unsigned int v19 = mbedtls_mpi_sub_mpi(v11, (int *)v11, v4);
                            if (v19) {
                              goto LABEL_48;
                            }
                          }
                        }
                        while (mbedtls_mpi_cmp_int(v15, 0));
                        while ((int)mbedtls_mpi_cmp_int(v6, 0) < 0)
                        {
                          unsigned int v19 = mbedtls_mpi_add_mpi(v6, (int *)v6, v20);
                          if (v19) {
                            goto LABEL_48;
                          }
                        }
                        while ((int)mbedtls_mpi_cmp_mpi(v6, (uint64_t)v20) >= 0)
                        {
                          unsigned int v19 = mbedtls_mpi_sub_mpi(v6, (int *)v6, v20);
                          if (v19) {
                            goto LABEL_48;
                          }
                        }
                        unsigned int v19 = mbedtls_mpi_copy(v22, (uint64_t)v6);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    mbedtls_mpi_free((uint64_t)v17);
    mbedtls_mpi_free((uint64_t)v15);
    mbedtls_mpi_free((uint64_t)v13);
    mbedtls_mpi_free((uint64_t)v11);
    mbedtls_mpi_free((uint64_t)v18);
    mbedtls_mpi_free((uint64_t)v10);
    mbedtls_mpi_free((uint64_t)v8);
    mbedtls_mpi_free((uint64_t)v6);
    mbedtls_mpi_free((uint64_t)v4);
    return v19;
  }
  else
  {
    return -4;
  }
}

unint64_t mpi_uint_bigendian_to_host(unint64_t a1)
{
  return bswap64(a1);
}

uint64_t mbedtls_ccm_init()
{
  return __memset_chk();
}

uint64_t mbedtls_ccm_setkey(void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5 = mbedtls_cipher_info_from_values(a2, a4, 1);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 32) == 16)
    {
      mbedtls_cipher_free(a1);
      unsigned int v6 = mbedtls_cipher_setup(a1, v5);
      if (v6)
      {
        return v6;
      }
      else
      {
        unsigned int v7 = mbedtls_cipher_setkey((uint64_t)a1, a3, a4, 1);
        if (v7) {
          return v7;
        }
        else {
          return 0;
        }
      }
    }
    else
    {
      return -13;
    }
  }
  else
  {
    return -13;
  }
}

void *mbedtls_ccm_free(void *result)
{
  uint64_t v1 = result;
  if (result)
  {
    mbedtls_cipher_free(result);
    return mbedtls_platform_zeroize(v1, 0x50uLL);
  }
  return result;
}

uint64_t mbedtls_ccm_star_encrypt_and_tag(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  return ccm_auth_crypt(a1, 0, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t ccm_auth_crypt(uint64_t a1, int a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v36 = a1;
  int v35 = a2;
  unint64_t v34 = a3;
  uint64_t v33 = a4;
  unint64_t v32 = a5;
  uint64_t v31 = a6;
  unint64_t v30 = a7;
  uint64_t v29 = a8;
  uint64_t v28 = a9;
  uint64_t v27 = a10;
  unint64_t v26 = a11;
  unsigned int v25 = -110;
  unsigned __int8 i = 0;
  unsigned __int8 v23 = 0;
  unint64_t v22 = 0;
  uint64_t v21 = 0;
  if (a11 == 2 || v26 > 0x10 || v26 % 2)
  {
    return -13;
  }
  else if (v32 >= 7 && v32 <= 0xD)
  {
    if (v30 < 0xFF00)
    {
      unsigned __int8 v23 = 15 - v32;
      LOBYTE(v40) = ((v30 != 0) << 6) | (8 * ((v26 - 2) / 2)) | (14 - v32);
      __memcpy_chk();
      unsigned __int8 i = 0;
      unint64_t v22 = v34;
      while (i < (int)v23)
      {
        *((unsigned char *)&v40 + 15 - i++) = v22;
        v22 >>= 8;
      }
      if (v22)
      {
        return -13;
      }
      else
      {
        v39[0] = 0;
        v39[1] = 0;
        for (unsigned __int8 i = 0; i < 0x10u; ++i)
          *((unsigned char *)v39 + i) ^= *((unsigned char *)&v40 + i);
        unsigned int v25 = mbedtls_cipher_update(v36, (uint64_t)v39, 0x10uLL, (uint64_t)v39, &v21);
        if (v25)
        {
          return v25;
        }
        else
        {
          if (v30)
          {
            unint64_t v22 = v30;
            uint64_t v18 = v31;
            uint64_t v41 = 0;
            uint64_t v40 = BYTE1(v30);
            BYTE1(v40) = v30;
            if (v30 >= 0xE) {
              uint64_t v16 = 14;
            }
            else {
              uint64_t v16 = v22;
            }
            __memcpy_chk();
            v22 -= v16;
            uint64_t v19 = v18 + v16;
            for (unsigned __int8 i = 0; i < 0x10u; ++i)
              *((unsigned char *)v39 + i) ^= *((unsigned char *)&v40 + i);
            unsigned int v25 = mbedtls_cipher_update(v36, (uint64_t)v39, 0x10uLL, (uint64_t)v39, &v21);
            if (v25) {
              return v25;
            }
            while (v22)
            {
              if (v22 <= 0x10) {
                uint64_t v15 = v22;
              }
              else {
                uint64_t v15 = 16;
              }
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              __memcpy_chk();
              for (unsigned __int8 i = 0; i < 0x10u; ++i)
                *((unsigned char *)v39 + i) ^= *((unsigned char *)&v40 + i);
              unsigned int v25 = mbedtls_cipher_update(v36, (uint64_t)v39, 0x10uLL, (uint64_t)v39, &v21);
              if (v25) {
                return v25;
              }
              v22 -= v15;
              v19 += v15;
            }
          }
          v38[0] = v23 - 1;
          __memcpy_chk();
          __memset_chk();
          v38[15] = 1;
          unint64_t v22 = v34;
          uint64_t v20 = v29;
          uint64_t v17 = v28;
          while (v22)
          {
            if (v22 <= 0x10) {
              unint64_t v14 = v22;
            }
            else {
              unint64_t v14 = 16;
            }
            if (!v35)
            {
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              __memcpy_chk();
              for (unsigned __int8 i = 0; i < 0x10u; ++i)
                *((unsigned char *)v39 + i) ^= *((unsigned char *)&v40 + i);
              unsigned int v25 = mbedtls_cipher_update(v36, (uint64_t)v39, 0x10uLL, (uint64_t)v39, &v21);
              if (v25) {
                return v25;
              }
            }
            unsigned int v25 = mbedtls_cipher_update(v36, (uint64_t)v38, 0x10uLL, (uint64_t)&v40, &v21);
            if (v25) {
              return v25;
            }
            for (unsigned __int8 i = 0; i < v14; ++i)
              *(unsigned char *)(v17 + i) = *(unsigned char *)(v20 + i) ^ *((unsigned char *)&v40 + i);
            if (v35 == 1)
            {
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              __memcpy_chk();
              for (unsigned __int8 i = 0; i < 0x10u; ++i)
                *((unsigned char *)v39 + i) ^= *((unsigned char *)&v40 + i);
              unsigned int v25 = mbedtls_cipher_update(v36, (uint64_t)v39, 0x10uLL, (uint64_t)v39, &v21);
              if (v25) {
                return v25;
              }
            }
            v17 += v14;
            v20 += v14;
            v22 -= v14;
            for (unsigned __int8 i = 0; i < (int)v23; ++i)
            {
              int v11 = &v38[15 - i];
              char v12 = *v11 + 1;
              unsigned char *v11 = v12;
              if (v12) {
                break;
              }
            }
          }
          for (unsigned __int8 i = 0; i < (int)v23; ++i)
            v38[15 - i] = 0;
          unsigned int v25 = mbedtls_cipher_update(v36, (uint64_t)v38, 0x10uLL, (uint64_t)&v40, &v21);
          if (v25)
          {
            return v25;
          }
          else
          {
            for (unsigned __int8 i = 0; i < 0x10u; ++i)
              *((unsigned char *)v39 + i) ^= *((unsigned char *)&v40 + i);
            __memcpy_chk();
            return 0;
          }
        }
      }
    }
    else
    {
      return -13;
    }
  }
  else
  {
    return -13;
  }
}

uint64_t mbedtls_ccm_encrypt_and_tag(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a10) {
    return mbedtls_ccm_star_encrypt_and_tag(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else {
    return -13;
  }
}

uint64_t mbedtls_ccm_star_auth_decrypt(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void *a8, uint64_t a9, unint64_t a10)
{
  unsigned int v13 = ccm_auth_crypt(a1, 1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, (uint64_t)v17, a10);
  if (v13)
  {
    return v13;
  }
  else
  {
    int v11 = 0;
    for (unsigned __int8 i = 0; i < a10; ++i)
      v11 |= *(unsigned __int8 *)(a9 + i) ^ v17[i];
    if (v11)
    {
      mbedtls_platform_zeroize(a8, a2);
      return -15;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t mbedtls_ccm_auth_decrypt(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void *a8, uint64_t a9, unint64_t a10)
{
  if (a10) {
    return mbedtls_ccm_star_auth_decrypt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else {
    return -13;
  }
}

void *mbedtls_cipher_list()
{
  if (!supported_init)
  {
    unint64_t v4 = &mbedtls_cipher_definitions;
    unint64_t v3 = &mbedtls_cipher_supported;
    while (*v4)
    {
      uint64_t v0 = v4;
      v4 += 4;
      uint64_t v1 = v3++;
      _DWORD *v1 = *v0;
    }
    *unint64_t v3 = 0;
    supported_init = 1;
  }
  return &mbedtls_cipher_supported;
}

uint64_t mbedtls_cipher_info_from_type(int a1)
{
  for (unsigned __int8 i = &mbedtls_cipher_definitions; i[1]; i += 2)
  {
    if (*(_DWORD *)i == a1) {
      return i[1];
    }
  }
  return 0;
}

uint64_t mbedtls_cipher_info_from_string(const char *a1)
{
  if (!a1) {
    return 0;
  }
  for (unsigned __int8 i = &mbedtls_cipher_definitions; i[1]; i += 2)
  {
    if (!strcmp(*(const char **)(i[1] + 16), a1)) {
      return i[1];
    }
  }
  return 0;
}

uint64_t mbedtls_cipher_info_from_values(int a1, int a2, int a3)
{
  for (unsigned __int8 i = &mbedtls_cipher_definitions; i[1]; i += 2)
  {
    if (**(_DWORD **)(i[1] + 40) == a1 && *(_DWORD *)(i[1] + 8) == a2 && *(_DWORD *)(i[1] + 4) == a3) {
      return i[1];
    }
  }
  return 0;
}

uint64_t mbedtls_cipher_init()
{
  return __memset_chk();
}

void *mbedtls_cipher_free(void *result)
{
  uint64_t v1 = result;
  if (result)
  {
    if (*((void *)result + 9))
    {
      mbedtls_platform_zeroize(*((void **)result + 9), 0x28uLL);
      mbedtls_free();
    }
    if (v1[8]) {
      (*(void (**)(void))(*(void *)(*v1 + 40) + 40))(v1[8]);
    }
    return mbedtls_platform_zeroize(v1, 0x50uLL);
  }
  return result;
}

uint64_t mbedtls_cipher_setup(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = __memset_chk();
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 40) + 32))(v2);
    a1[8] = v3;
    if (v3)
    {
      *a1 = a2;
      return 0;
    }
    else
    {
      return -24960;
    }
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_setkey(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(void *)a1)
  {
    if ((*(_DWORD *)(*(void *)a1 + 28) & 2) != 0 || *(_DWORD *)(*(void *)a1 + 8) == a3)
    {
      *(_DWORD *)(a1 + 8) = a3;
      *(_DWORD *)(a1 + 12) = a4;
      if (a4 == 1
        || *(_DWORD *)(*(void *)a1 + 4) == 3
        || *(_DWORD *)(*(void *)a1 + 4) == 4
        || *(_DWORD *)(*(void *)a1 + 4) == 5)
      {
        return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(*(void *)a1 + 40)
                                                                                + 16))(*(void *)(a1 + 64), a2, *(unsigned int *)(a1 + 8));
      }
      else if (a4)
      {
        return -24832;
      }
      else
      {
        return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(*(void *)a1 + 40)
                                                                                + 24))(*(void *)(a1 + 64), a2, *(unsigned int *)(a1 + 8));
      }
    }
    else
    {
      return -24832;
    }
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_set_iv(void *a1, uint64_t a2, unint64_t a3)
{
  if (*a1)
  {
    if (a3 <= 0x10)
    {
      if (*(_DWORD *)(*a1 + 28))
      {
        unint64_t v4 = a3;
      }
      else
      {
        unint64_t v4 = *(unsigned int *)(*a1 + 24);
        if (v4 > a3) {
          return -24832;
        }
      }
      if (v4)
      {
        __memcpy_chk();
        a1[7] = v4;
      }
      return 0;
    }
    else
    {
      return -24704;
    }
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_reset(void *a1)
{
  if (*a1)
  {
    a1[4] = 0;
    return 0;
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_update(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  if (*(void *)a1)
  {
    *a5 = 0;
    block_std::string::size_type size = mbedtls_cipher_get_block_size(a1);
    if (block_size)
    {
      if (*(_DWORD *)(*(void *)a1 + 4) == 1)
      {
        if (a3 == block_size)
        {
          *a5 = a3;
          unsigned int v7 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(*(void *)a1 + 40) + 8))(*(void *)(a1 + 64), *(unsigned int *)(a1 + 12), a2, a4);
          if (v7) {
            return v7;
          }
          else {
            return 0;
          }
        }
        else
        {
          return -25216;
        }
      }
      else if (a2 == a4 && (*(void *)(a1 + 32) || a3 % block_size))
      {
        return -24832;
      }
      else
      {
        return -24704;
      }
    }
    else
    {
      return -25472;
    }
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_get_block_size(uint64_t a1)
{
  if (*(void *)a1) {
    return *(unsigned int *)(*(void *)a1 + 32);
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_cipher_finish(void *a1, uint64_t a2, void *a3)
{
  if (*a1)
  {
    *a3 = 0;
    if (*(_DWORD *)(*a1 + 4) == 3
      || *(_DWORD *)(*a1 + 4) == 4
      || *(_DWORD *)(*a1 + 4) == 5
      || *(_DWORD *)(*a1 + 4) == 6
      || *(_DWORD *)(*a1 + 4) == 9
      || *(_DWORD *)(*a1 + 4) == 7)
    {
      return 0;
    }
    else if (*(_DWORD *)*a1 == 72 || *(_DWORD *)*a1 == 73)
    {
      return 0;
    }
    else if (*(_DWORD *)(*a1 + 4) == 1)
    {
      if (a1[4]) {
        return -25216;
      }
      else {
        return 0;
      }
    }
    else
    {
      return -24704;
    }
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_crypt(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  unint64_t v14 = a3;
  uint64_t v13 = a4;
  unint64_t v12 = a5;
  uint64_t v11 = a6;
  unint64_t v10 = a7;
  uint64_t v8 = 0;
  unsigned int v9 = mbedtls_cipher_set_iv(a1, a2, a3);
  if (v9)
  {
    return v9;
  }
  else
  {
    unsigned int v9 = mbedtls_cipher_reset(v16);
    if (v9)
    {
      return v9;
    }
    else
    {
      unsigned int v9 = mbedtls_cipher_update((uint64_t)v16, v13, v12, v11, v10);
      if (v9)
      {
        return v9;
      }
      else
      {
        unsigned int v9 = mbedtls_cipher_finish(v16, v11 + *v10, &v8);
        if (v9)
        {
          return v9;
        }
        else
        {
          *v10 += v8;
          return 0;
        }
      }
    }
  }
}

uint64_t mbedtls_cipher_auth_encrypt(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t *a9, uint64_t a10, unint64_t a11)
{
  return mbedtls_cipher_aead_encrypt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mbedtls_cipher_aead_encrypt(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t *a9, uint64_t a10, unint64_t a11)
{
  if (*(_DWORD *)(*a1 + 4) == 8)
  {
    *a9 = a7;
    return mbedtls_ccm_encrypt_and_tag(a1[8], a7, a2, a3, a4, a5, a6, a8, a10, a11);
  }
  else
  {
    return -24704;
  }
}

uint64_t mbedtls_cipher_auth_decrypt(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8, unint64_t *a9, uint64_t a10, unint64_t a11)
{
  return mbedtls_cipher_aead_decrypt(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mbedtls_cipher_aead_decrypt(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8, unint64_t *a9, uint64_t a10, unint64_t a11)
{
  if (*(_DWORD *)(*a1 + 4) == 8)
  {
    *a9 = a7;
    unsigned int v12 = mbedtls_ccm_auth_decrypt(a1[8], a7, a2, a3, a4, a5, a6, a8, a10, a11);
    if (v12 == -15) {
      return -25344;
    }
    return v12;
  }
  else
  {
    return -24704;
  }
}

uint64_t mbedtls_cipher_auth_encrypt_ext(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t *a10, unint64_t a11)
{
  if (a9 >= a7 + a11)
  {
    unsigned int v11 = mbedtls_cipher_aead_encrypt(a1, a2, a3, a4, a5, a6, a7, a8, a10, a8 + a7, a11);
    *a10 += a11;
    return v11;
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_auth_decrypt_ext(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8, unint64_t a9, unint64_t *a10, unint64_t a11)
{
  if (a7 >= a11 && a9 >= a7 - a11) {
    return mbedtls_cipher_aead_decrypt(a1, a2, a3, a4, a5, a6, a7 - a11, a8, a10, a6 + a7 - a11, a11);
  }
  else {
    return -24832;
  }
}

uint64_t aes_crypt_ecb_wrap(uint64_t a1, int a2, unsigned __int8 *a3, _OWORD *a4)
{
  return mbedtls_aes_crypt_ecb(a1, a2, a3, a4);
}

uint64_t aes_setkey_enc_wrap(int *a1, uint64_t a2, unsigned int a3)
{
  return mbedtls_aes_setkey_enc(a1, a2, a3);
}

uint64_t aes_setkey_dec_wrap(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return mbedtls_aes_setkey_dec(a1, a2, a3);
}

uint64_t aes_ctx_alloc()
{
  uint64_t v1 = mbedtls_calloc();
  if (!v1) {
    return 0;
  }
  mbedtls_aes_init();
  return v1;
}

void aes_ctx_free(void *a1)
{
}

uint64_t ccm_aes_setkey_wrap(void *a1, uint64_t a2, int a3)
{
  return mbedtls_ccm_setkey(a1, 2, a2, a3);
}

uint64_t ccm_ctx_alloc()
{
  uint64_t v1 = mbedtls_calloc();
  if (v1) {
    mbedtls_ccm_init();
  }
  return v1;
}

void ccm_ctx_free(void *a1)
{
}

uint64_t mbedtls_cipher_cmac_starts(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && *(void *)a1 && a2)
  {
    unsigned int v5 = mbedtls_cipher_setkey(a1, a2, a3, 1);
    if (v5)
    {
      return v5;
    }
    else
    {
      int v4 = **(_DWORD **)a1;
      if ((v4 - 2) <= 2 || v4 == 36)
      {
        unsigned int v6 = (void *)mbedtls_calloc();
        if (v6)
        {
          *(void *)(a1 + 72) = v6;
          mbedtls_platform_zeroize(v6, 0x10uLL);
          return 0;
        }
        else
        {
          return -24960;
        }
      }
      else
      {
        return -24832;
      }
    }
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_cmac_update(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  unint64_t v11 = a3;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  unsigned int v8 = 0;
  unint64_t v7 = 0;
  unint64_t i = 0;
  uint64_t v5 = 0;
  if (a1 && *v13 && v12 && v13[9])
  {
    uint64_t v10 = v13[9];
    unint64_t v4 = *(unsigned int *)(*v13 + 32);
    uint64_t v9 = v13[9];
    if (*(void *)(v10 + 32) && v11 > v4 - *(void *)(v10 + 32))
    {
      __memcpy_chk();
      cmac_xor_block(v9, v10 + 16, v9, v4);
      unsigned int v8 = mbedtls_cipher_update((uint64_t)v13, v9, v4, v9, &v5);
      if (v8) {
        return v8;
      }
      v12 += v4 - *(void *)(v10 + 32);
      v11 -= v4 - *(void *)(v10 + 32);
      *(void *)(v10 + 32) = 0;
    }
    unint64_t v7 = (v11 + v4 - 1) / v4;
    for (unint64_t i = 1; i < v7; ++i)
    {
      cmac_xor_block(v9, v12, v9, v4);
      unsigned int v8 = mbedtls_cipher_update((uint64_t)v13, v9, v4, v9, &v5);
      if (v8) {
        return v8;
      }
      v11 -= v4;
      v12 += v4;
    }
    if (v11)
    {
      __memcpy_chk();
      *(void *)(v10 + 32) += v11;
    }
    return v8;
  }
  return -24832;
}

uint64_t cmac_xor_block(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  for (unint64_t i = 0; i < a4; ++i)
    *(unsigned char *)(result + i) = *(unsigned char *)(a2 + i) ^ *(unsigned char *)(a3 + i);
  return result;
}

uint64_t mbedtls_cipher_cmac_finish(void *a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  unsigned int v8 = 0;
  unint64_t v7 = 0;
  unsigned int v6 = 0;
  unsigned int v5 = -110;
  uint64_t v4 = 0;
  if (a1 && *v10 && v10[9] && v9)
  {
    unsigned int v8 = (unint64_t *)v10[9];
    unint64_t v3 = *(unsigned int *)(*v10 + 32);
    unint64_t v7 = v8;
    mbedtls_platform_zeroize(v14, 0x10uLL);
    mbedtls_platform_zeroize(v13, 0x10uLL);
    cmac_generate_subkeys((uint64_t)v10, v14, (uint64_t)v13);
    unsigned int v6 = v8 + 2;
    if (v8[4] >= v3)
    {
      cmac_xor_block((uint64_t)v12, (uint64_t)v6, (uint64_t)v14, v3);
    }
    else
    {
      cmac_pad((uint64_t)v12, v3, (uint64_t)v6, v8[4]);
      cmac_xor_block((uint64_t)v12, (uint64_t)v12, (uint64_t)v13, v3);
    }
    cmac_xor_block((uint64_t)v7, (uint64_t)v12, (uint64_t)v7, v3);
    unsigned int v5 = mbedtls_cipher_update((uint64_t)v10, (uint64_t)v7, v3, (uint64_t)v7, &v4);
    if (!v5) {
      __memcpy_chk();
    }
    mbedtls_platform_zeroize(v14, 0x10uLL);
    mbedtls_platform_zeroize(v13, 0x10uLL);
    v8[4] = 0;
    mbedtls_platform_zeroize(v8 + 2, 0x10uLL);
    mbedtls_platform_zeroize(v7, 0x10uLL);
    return v5;
  }
  else
  {
    return -24832;
  }
}

uint64_t cmac_generate_subkeys(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v9 = a1;
  unsigned int v8 = a2;
  uint64_t v7 = a3;
  unsigned int v6 = -110;
  uint64_t v5 = 0;
  mbedtls_platform_zeroize(v10, 0x10uLL);
  unint64_t v4 = *(unsigned int *)(*(void *)v9 + 32);
  unsigned int v6 = mbedtls_cipher_update(v9, (uint64_t)v10, v4, (uint64_t)v10, &v5);
  if (!v6)
  {
    unsigned int v6 = cmac_multiply_by_u((uint64_t)v8, v10, v4);
    if (!v6) {
      unsigned int v6 = cmac_multiply_by_u(v7, v8, v4);
    }
  }
  mbedtls_platform_zeroize(v10, 0x10uLL);
  return v6;
}

uint64_t cmac_pad(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  for (unint64_t i = 0; i < a2; ++i)
  {
    if (i >= a4)
    {
      if (i == a4) {
        *(unsigned char *)(result + i) = 0x80;
      }
      else {
        *(unsigned char *)(result + i) = 0;
      }
    }
    else
    {
      *(unsigned char *)(result + i) = *(unsigned char *)(a3 + i);
    }
  }
  return result;
}

uint64_t mbedtls_cipher_cmac_reset(void *a1)
{
  if (a1 && *a1 && a1[9])
  {
    uint64_t v2 = (void *)a1[9];
    v2[4] = 0;
    mbedtls_platform_zeroize(v2 + 2, 0x10uLL);
    mbedtls_platform_zeroize(v2, 0x10uLL);
    return 0;
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_cipher_cmac(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  memset(__b, 0, sizeof(__b));
  if (a1 && a2 && a4 && a6)
  {
    mbedtls_cipher_init();
    unsigned int v7 = mbedtls_cipher_setup(__b, a1);
    if (!v7)
    {
      unsigned int v7 = mbedtls_cipher_cmac_starts((uint64_t)__b, a2, a3);
      if (!v7)
      {
        unsigned int v7 = mbedtls_cipher_cmac_update(__b, a4, a5);
        if (!v7) {
          unsigned int v7 = mbedtls_cipher_cmac_finish(__b, a6);
        }
      }
    }
    mbedtls_cipher_free(__b);
    return v7;
  }
  else
  {
    return -24832;
  }
}

uint64_t mbedtls_aes_cmac_prf_128(long long *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a1 && a3 && a5)
  {
    uint64_t v6 = mbedtls_cipher_info_from_type(2);
    if (!v6)
    {
      unsigned int v7 = -24704;
LABEL_11:
      mbedtls_platform_zeroize(&v14, 0x10uLL);
      return v7;
    }
    if (a2 == 16)
    {
      long long v14 = *a1;
    }
    else
    {
      v15[0] = 0;
      v15[1] = 0;
      unsigned int v7 = mbedtls_cipher_cmac(v6, (uint64_t)v15, 128, (uint64_t)a1, a2, (uint64_t)&v14);
      if (v7) {
        goto LABEL_11;
      }
    }
    unsigned int v7 = mbedtls_cipher_cmac(v6, (uint64_t)&v14, 128, a3, a4, a5);
    goto LABEL_11;
  }
  return -24832;
}

uint64_t cmac_multiply_by_u(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char v5 = 0;
  if (a3 == 16)
  {
    char v6 = -121;
  }
  else
  {
    if (a3 != 8) {
      return -24832;
    }
    char v6 = 27;
  }
  for (int i = a3 - 1; i >= 0; --i)
  {
    *(unsigned char *)(a1 + i) = v5 | (2 * a2[i]);
    char v5 = (int)a2[i] >> 7;
  }
  *(unsigned char *)(a1 + a3 - 1) ^= v6 & -((int)*a2 >> 7);
  return 0;
}

uint64_t mbedtls_ctr_drbg_init(uint64_t a1)
{
  uint64_t result = __memset_chk();
  *(_DWORD *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 32) = 10000;
  return result;
}

_DWORD *mbedtls_ctr_drbg_free(_DWORD *result)
{
  uint64_t v1 = result;
  if (result)
  {
    mbedtls_aes_free(result + 10);
    uint64_t result = mbedtls_platform_zeroize(v1, 0x158uLL);
    v1[8] = 10000;
    v1[4] = -1;
  }
  return result;
}

uint64_t mbedtls_ctr_drbg_set_prediction_resistance(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t mbedtls_ctr_drbg_set_entropy_len(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t mbedtls_ctr_drbg_set_nonce_len(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 328))
  {
    return -52;
  }
  else if (a2 <= 0x180)
  {
    *(_DWORD *)(a1 + 16) = a2;
    return 0;
  }
  else
  {
    return -56;
  }
}

uint64_t mbedtls_ctr_drbg_set_reseed_interval(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t mbedtls_ctr_drbg_update_ret(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unsigned int updated = block_cipher_df(v7, a2, a3);
    if (!updated) {
      unsigned int updated = ctr_drbg_update_internal(a1, (uint64_t)v7);
    }
    mbedtls_platform_zeroize(v7, 0x30uLL);
    return updated;
  }
  else
  {
    return 0;
  }
}

uint64_t block_cipher_df(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  unint64_t v15 = a3;
  long long v14 = 0;
  uint64_t v13 = 0;
  bzero(v12, 0x120uLL);
  if (v15 <= 0x180)
  {
    bzero(v23, 0x1A0uLL);
    mbedtls_aes_init();
    char v25 = BYTE3(v15);
    char v26 = BYTE2(v15);
    char v27 = BYTE1(v15);
    char v28 = v15;
    long long v14 = &v30;
    char v29 = 48;
    __memcpy_chk();
    *((unsigned char *)v14 + v15) = 0x80;
    unint64_t v6 = v15 + 25;
    for (int i = 0; i < 32; ++i)
      v20[i] = i;
    unsigned int v11 = mbedtls_aes_setkey_enc(v12, (uint64_t)v20, 0x100u);
    if (!v11)
    {
      for (int j = 0; j < 48; j += 16)
      {
        long long v14 = (uint64_t *)v23;
        long long v19 = 0uLL;
        unint64_t v5 = v6;
        while (v5)
        {
          for (int k = 0; k < 16; ++k)
            v20[k - 16] ^= *((unsigned char *)v14 + k);
          v14 += 2;
          if (v5 < 0x10) {
            uint64_t v4 = v5;
          }
          else {
            uint64_t v4 = 16;
          }
          v5 -= v4;
          unsigned int v11 = mbedtls_aes_crypt_ecb((uint64_t)v12, 1, (unsigned __int8 *)&v19, &v19);
          if (v11) {
            goto LABEL_25;
          }
        }
        __memcpy_chk();
        ++v24;
      }
      unsigned int v11 = mbedtls_aes_setkey_enc(v12, (uint64_t)v21, 0x100u);
      if (!v11)
      {
        uint64_t v13 = (unsigned __int8 *)&v22;
        long long v14 = v17;
        for (int m = 0; m < 48; m += 16)
        {
          unsigned int v11 = mbedtls_aes_crypt_ecb((uint64_t)v12, 1, v13, v13);
          if (v11) {
            break;
          }
          __memcpy_chk();
          v14 += 2;
        }
      }
    }
LABEL_25:
    mbedtls_aes_free(v12);
    mbedtls_platform_zeroize(v23, 0x1A0uLL);
    mbedtls_platform_zeroize(v21, 0x30uLL);
    mbedtls_platform_zeroize(v20, 0x20uLL);
    mbedtls_platform_zeroize(&v19, 0x10uLL);
    if (v11) {
      mbedtls_platform_zeroize(v17, 0x30uLL);
    }
    return v11;
  }
  else
  {
    return -56;
  }
}

uint64_t ctr_drbg_update_internal(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = __b;
  memset(__b, 0, sizeof(__b));
  for (int i = 0; i < 48; i += 16)
  {
    for (int j = 16; j > 0; --j)
    {
      uint64_t v2 = (unsigned char *)(a1 + j - 1);
      char v3 = *v2 + 1;
      *uint64_t v2 = v3;
      if (v3) {
        break;
      }
    }
    unsigned int v5 = mbedtls_aes_crypt_ecb(a1 + 40, 1, (unsigned __int8 *)a1, v9);
    if (v5) {
      goto LABEL_14;
    }
    ++v9;
  }
  for (int k = 0; k < 48; ++k)
    __b[k] ^= *(unsigned char *)(a2 + k);
  unsigned int v5 = mbedtls_aes_setkey_enc((int *)(a1 + 40), (uint64_t)__b, 0x100u);
  if (!v5) {
    __memcpy_chk();
  }
LABEL_14:
  mbedtls_platform_zeroize(__b, 0x30uLL);
  return v5;
}

uint64_t mbedtls_ctr_drbg_update(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3;
  if (a3 > 0x180) {
    unint64_t v4 = 384;
  }
  return mbedtls_ctr_drbg_update_ret(a1, a2, v4);
}

uint64_t mbedtls_ctr_drbg_reseed(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_ctr_drbg_reseed_internal(a1, a2, a3, 0);
}

uint64_t mbedtls_ctr_drbg_reseed_internal(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (*(void *)(a1 + 24) <= 0x180uLL)
  {
    if (a4 <= 384 - *(void *)(a1 + 24))
    {
      if (a3 <= 384 - *(void *)(a1 + 24) - a4)
      {
        bzero(v12, 0x180uLL);
        if ((*(unsigned int (**)(void, uint64_t *, void))(a1 + 328))(*(void *)(a1 + 336), v12, *(void *)(a1 + 24)))
        {
          return -52;
        }
        else
        {
          unint64_t v6 = *(void *)(a1 + 24);
          if (a4)
          {
            if ((*(unsigned int (**)(void, char *, unint64_t))(a1 + 328))(*(void *)(a1 + 336), (char *)v12 + v6, a4))
            {
              return -52;
            }
            v6 += a4;
          }
          if (a2 && a3)
          {
            __memcpy_chk();
            v6 += a3;
          }
          unsigned int updated = block_cipher_df(v12, (uint64_t)v12, v6);
          if (!updated)
          {
            unsigned int updated = ctr_drbg_update_internal(a1, (uint64_t)v12);
            if (!updated) {
              *(_DWORD *)(a1 + 16) = 1;
            }
          }
          mbedtls_platform_zeroize(v12, 0x180uLL);
          return updated;
        }
      }
      else
      {
        return -56;
      }
    }
    else
    {
      return -56;
    }
  }
  else
  {
    return -56;
  }
}

uint64_t mbedtls_ctr_drbg_seed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  memset(v15, 0, sizeof(v15));
  mbedtls_aes_init();
  *(void *)(a1 + 328) = a2;
  *(void *)(a1 + 336) = a3;
  if (!*(void *)(a1 + 24)) {
    *(void *)(a1 + 24) = 32;
  }
  if (*(int *)(a1 + 16) < 0) {
    unint64_t v6 = good_nonce_len(*(void *)(a1 + 24));
  }
  else {
    unint64_t v6 = *(int *)(a1 + 16);
  }
  unsigned int v7 = mbedtls_aes_setkey_enc((int *)(a1 + 40), (uint64_t)v15, 0x100u);
  if (v7)
  {
    return v7;
  }
  else
  {
    unsigned int v8 = mbedtls_ctr_drbg_reseed_internal(a1, a4, a5, v6);
    if (v8) {
      return v8;
    }
    else {
      return 0;
    }
  }
}

unint64_t good_nonce_len(unint64_t a1)
{
  if (a1 < 0x30) {
    return (a1 + 1) / 2;
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_ctr_drbg_random_with_add(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v16 = a3;
  unint64_t v14 = a5;
  if (a3 <= 0x400)
  {
    if (a5 <= 0x100)
    {
      memset(__b, 0, sizeof(__b));
      if (*(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 20))
      {
        unsigned int v12 = mbedtls_ctr_drbg_reseed(a1, a4, v14);
        if (v12) {
          return v12;
        }
        unint64_t v14 = 0;
      }
      if (!v14
        || (unsigned int updated = block_cipher_df(__b, a4, v14)) == 0 && (unsigned int updated = ctr_drbg_update_internal(a1, (uint64_t)__b)) == 0)
      {
        while (v16)
        {
          for (int i = 16; i > 0; --i)
          {
            unsigned int v5 = (unsigned char *)(a1 + i - 1);
            char v6 = *v5 + 1;
            unsigned char *v5 = v6;
            if (v6) {
              break;
            }
          }
          unsigned int updated = mbedtls_aes_crypt_ecb(a1 + 40, 1, (unsigned __int8 *)a1, &v18);
          if (updated) {
            goto LABEL_25;
          }
          if (v16 <= 0x10) {
            uint64_t v8 = v16;
          }
          else {
            uint64_t v8 = 16;
          }
          __memcpy_chk();
          a2 += v8;
          v16 -= v8;
        }
        unsigned int updated = ctr_drbg_update_internal(a1, (uint64_t)__b);
        if (!updated) {
          ++*(_DWORD *)(a1 + 16);
        }
      }
LABEL_25:
      mbedtls_platform_zeroize(__b, 0x30uLL);
      mbedtls_platform_zeroize(&v18, 0x10uLL);
      return updated;
    }
    else
    {
      return -56;
    }
  }
  else
  {
    return -54;
  }
}

uint64_t mbedtls_ctr_drbg_random(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_ctr_drbg_random_with_add(a1, a2, a3, 0, 0);
}

uint64_t mbedtls_ecjpake_init(uint64_t a1)
{
  *(void *)a1 = 0;
  mbedtls_ecp_group_init(a1 + 8);
  *(_DWORD *)(a1 + 260) = 0;
  mbedtls_ecp_point_init(a1 + 264);
  mbedtls_ecp_point_init(a1 + 336);
  mbedtls_ecp_point_init(a1 + 408);
  mbedtls_ecp_point_init(a1 + 480);
  mbedtls_ecp_point_init(a1 + 552);
  mbedtls_mpi_init(a1 + 624);
  mbedtls_mpi_init(a1 + 648);
  return mbedtls_mpi_init(a1 + 672);
}

void mbedtls_ecjpake_free(void *a1)
{
  if (a1)
  {
    *a1 = 0;
    mbedtls_ecp_group_free(a1 + 1);
    mbedtls_ecp_point_free((uint64_t)(a1 + 33));
    mbedtls_ecp_point_free((uint64_t)(a1 + 42));
    mbedtls_ecp_point_free((uint64_t)(a1 + 51));
    mbedtls_ecp_point_free((uint64_t)(a1 + 60));
    mbedtls_ecp_point_free((uint64_t)(a1 + 69));
    mbedtls_mpi_free((uint64_t)(a1 + 78));
    mbedtls_mpi_free((uint64_t)(a1 + 81));
    mbedtls_mpi_free((uint64_t)(a1 + 84));
  }
}

uint64_t mbedtls_ecjpake_setup(uint64_t a1, int a2, int a3, int a4, uint64_t a5, unint64_t a6)
{
  *(_DWORD *)(a1 + 256) = a2;
  char v6 = mbedtls_md_info_from_type(a3);
  *(void *)a1 = v6;
  if (v6)
  {
    unsigned int binary = mbedtls_ecp_group_load((void *)(a1 + 8), a4);
    if (!binary) {
      unsigned int binary = mbedtls_mpi_read_binary(a1 + 672, a5, a6);
    }
    if (binary) {
      mbedtls_ecjpake_free((void *)a1);
    }
    return binary;
  }
  else
  {
    return -20608;
  }
}

uint64_t mbedtls_ecjpake_check(uint64_t a1)
{
  if (*(void *)a1 && *(_DWORD *)(a1 + 8) && *(void *)(a1 + 688)) {
    return 0;
  }
  else {
    return -20352;
  }
}

uint64_t mbedtls_ecjpake_read_round_one(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ecjpake_kkpp_read(*(void *)a1, a1 + 8, *(_DWORD *)(a1 + 260), (void *)(a1 + 88), (void *)(a1 + 408), (void *)(a1 + 480), ecjpake_id[1 - *(_DWORD *)(a1 + 256)], a2, a3);
}

uint64_t ecjpake_kkpp_read(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void *a6, char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  int v19 = a3;
  long long v18 = a4;
  uint64_t v17 = a5;
  unint64_t v16 = a6;
  unint64_t v15 = a7;
  uint64_t v14 = a8;
  uint64_t v13 = a9;
  unsigned int v12 = -110;
  uint64_t v11 = a8;
  unint64_t v10 = a8 + a9;
  unsigned int v12 = ecjpake_kkp_read(a1, a2, a3, a4, a5, a7, &v11, a8 + a9);
  if (!v12)
  {
    unsigned int v12 = ecjpake_kkp_read(v21, v20, v19, v18, v16, v15, &v11, v10);
    if (!v12 && v11 != v10) {
      return -20352;
    }
  }
  return v12;
}

uint64_t mbedtls_ecjpake_write_round_one(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t), void **a6)
{
  return ecjpake_kkpp_write(*(void *)a1, a1 + 8, *(_DWORD *)(a1 + 260), (void *)(a1 + 88), (void *)(a1 + 624), (int *)(a1 + 264), (void *)(a1 + 648), (int *)(a1 + 336), ecjpake_id[*(unsigned int *)(a1 + 256)], a2, a3, a4, a5, a6);
}

uint64_t ecjpake_kkpp_write(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, int *a6, void *a7, int *a8, char *a9, unint64_t a10, uint64_t a11, void *a12, uint64_t (*a13)(uint64_t, uint64_t, unint64_t), void **a14)
{
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  int v28 = a3;
  char v27 = a4;
  char v26 = a5;
  char v25 = a6;
  char v24 = a7;
  unsigned __int8 v23 = a8;
  uint64_t v22 = a9;
  unint64_t v21 = a10;
  uint64_t v20 = a11;
  int v19 = a12;
  long long v18 = a13;
  uint64_t v17 = a14;
  unsigned int v16 = -110;
  unint64_t v15 = a10;
  unsigned int v16 = ecjpake_kkp_write(a1, a2, a3, a4, a5, a6, a9, &v15, a10 + a11, a13, a14);
  if (!v16)
  {
    unsigned int v16 = ecjpake_kkp_write(v30, v29, v28, v27, v24, v23, v22, &v15, a10 + a11, v18, v17);
    if (!v16) {
      *int v19 = v15 - v21;
    }
  }
  return v16;
}

uint64_t mbedtls_ecjpake_read_round_two(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  unint64_t v9 = a3;
  unsigned int v8 = -110;
  uint64_t v7 = a2;
  unint64_t v6 = a2 + a3;
  memset(__b, 0, sizeof(__b));
  memset(v4, 0, sizeof(v4));
  mbedtls_ecp_group_init((uint64_t)__b);
  mbedtls_ecp_point_init((uint64_t)v4);
  unsigned int v8 = ecjpake_ecp_add3(v11 + 8, v4, (void *)(v11 + 264), (void *)(v11 + 336), (void *)(v11 + 408));
  if (!v8)
  {
    if (!*(_DWORD *)(v11 + 256))
    {
      unsigned int v8 = mbedtls_ecp_tls_read_group(__b, &v7, v9);
      if (v8) {
        goto LABEL_9;
      }
      if (LODWORD(__b[0]) != *(_DWORD *)(v11 + 8))
      {
        unsigned int v8 = -20096;
        goto LABEL_9;
      }
    }
    unsigned int v8 = ecjpake_kkp_read(*(void *)v11, v11 + 8, *(_DWORD *)(v11 + 260), v4, (void *)(v11 + 552), ecjpake_id[1 - *(_DWORD *)(v11 + 256)], &v7, v6);
    if (!v8 && v7 != v6) {
      unsigned int v8 = -20352;
    }
  }
LABEL_9:
  mbedtls_ecp_group_free(__b);
  mbedtls_ecp_point_free((uint64_t)v4);
  return v8;
}

uint64_t ecjpake_ecp_add3(uint64_t a1, int *a2, void *a3, void *a4, void *a5)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  unint64_t v9 = a4;
  unsigned int v8 = a5;
  unsigned int v7 = -110;
  memset(v6, 0, sizeof(v6));
  mbedtls_mpi_init((uint64_t)v6);
  unsigned int v7 = mbedtls_mpi_lset((uint64_t)v6, 1);
  if (!v7)
  {
    unsigned int v7 = mbedtls_ecp_muladd(v12, v11, v6, v10, v6, v9);
    if (!v7) {
      unsigned int v7 = mbedtls_ecp_muladd(v12, v11, v6, v11, v6, v8);
    }
  }
  mbedtls_mpi_free((uint64_t)v6);
  return v7;
}

uint64_t ecjpake_kkp_read(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, char *a6, uint64_t *a7, unint64_t a8)
{
  if (a8 >= *a7)
  {
    unsigned int point = mbedtls_ecp_tls_read_point(a2, (uint64_t)a5, a7, a8 - *a7);
    if (!point)
    {
      if (mbedtls_ecp_is_zero((uint64_t)a5)) {
        return -19584;
      }
      else {
        return ecjpake_zkp_read(a1, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    return point;
  }
  else
  {
    return -20352;
  }
}

uint64_t mbedtls_ecjpake_write_round_two(uint64_t a1, unsigned char *a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t), void **a6)
{
  uint64_t v19 = a1;
  long long v18 = a2;
  uint64_t v17 = a3;
  unsigned int v16 = a4;
  unint64_t v15 = a5;
  uint64_t v14 = a6;
  unsigned int v13 = -110;
  memset(__b, 0, 0x48uLL);
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  unint64_t v9 = v18;
  unsigned int v8 = &v18[v17];
  unint64_t v7 = 0;
  mbedtls_ecp_point_init((uint64_t)__b);
  mbedtls_ecp_point_init((uint64_t)v11);
  mbedtls_mpi_init((uint64_t)v10);
  unsigned int v13 = ecjpake_ecp_add3(v19 + 8, __b, (void *)(v19 + 408), (void *)(v19 + 480), (void *)(v19 + 264));
  if (!v13)
  {
    unsigned int v13 = ecjpake_mul_secret((int *)v10, 1, v19 + 648, (_DWORD *)(v19 + 672), (void *)(v19 + 160), v15, (uint64_t)v14);
    if (!v13)
    {
      unsigned int v13 = mbedtls_ecp_mul(v19 + 8, v11, v10, __b, v15, v14);
      if (!v13)
      {
        if (*(_DWORD *)(v19 + 256) == 1)
        {
          if (v8 < v9)
          {
            unsigned int v13 = -20224;
            goto LABEL_14;
          }
          unsigned int v13 = mbedtls_ecp_tls_write_group((int *)(v19 + 8), &v7, v9, v8 - v9);
          if (v13) {
            goto LABEL_14;
          }
          v9 += v7;
        }
        if (v8 >= v9)
        {
          unsigned int v13 = mbedtls_ecp_tls_write_point(v19 + 8, (uint64_t)v11, *(_DWORD *)(v19 + 260), &v7, v9, v8 - v9);
          if (!v13)
          {
            v9 += v7;
            unsigned int v13 = ecjpake_zkp_write(*(void *)v19, v19 + 8, *(_DWORD *)(v19 + 260), __b, (uint64_t)v10, (uint64_t)v11, ecjpake_id[*(unsigned int *)(v19 + 256)], (unint64_t *)&v9, (unint64_t)v8, v15, v14);
            if (!v13) {
              void *v16 = v9 - v18;
            }
          }
        }
        else
        {
          unsigned int v13 = -20224;
        }
      }
    }
  }
LABEL_14:
  mbedtls_ecp_point_free((uint64_t)__b);
  mbedtls_ecp_point_free((uint64_t)v11);
  mbedtls_mpi_free((uint64_t)v10);
  return v13;
}

uint64_t ecjpake_mul_secret(int *a1, int a2, uint64_t a3, _DWORD *a4, void *a5, uint64_t (*a6)(uint64_t, uint64_t, unint64_t), uint64_t a7)
{
  unsigned int v16 = a1;
  int v15 = a2;
  uint64_t v14 = a3;
  unsigned int v13 = a4;
  uint64_t v12 = a5;
  uint64_t v11 = a6;
  uint64_t v10 = a7;
  unsigned int v9 = -110;
  memset(v8, 0, sizeof(v8));
  mbedtls_mpi_init((uint64_t)v8);
  unsigned int v9 = mbedtls_mpi_fill_random((uint64_t)v8, 0x10uLL, v11, v10);
  if (!v9)
  {
    unsigned int v9 = mbedtls_mpi_mul_mpi((uint64_t)v8, (uint64_t)v8, (uint64_t)v12);
    if (!v9)
    {
      unsigned int v9 = mbedtls_mpi_add_mpi(v8, (int *)v8, v13);
      if (!v9)
      {
        unsigned int v9 = mbedtls_mpi_mul_mpi((uint64_t)v16, v14, (uint64_t)v8);
        if (!v9)
        {
          *v16 *= v15;
          unsigned int v9 = mbedtls_mpi_mod_mpi(v16, (uint64_t)v16, v12);
        }
      }
    }
  }
  mbedtls_mpi_free((uint64_t)v8);
  return v9;
}

uint64_t ecjpake_zkp_write(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, char *a7, unint64_t *a8, unint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, unint64_t), void **a11)
{
  uint64_t v29 = a1;
  uint64_t v28 = a2;
  int v27 = a3;
  char v26 = a4;
  uint64_t v25 = a5;
  uint64_t v24 = a6;
  unsigned __int8 v23 = a7;
  uint64_t v22 = a8;
  unint64_t v21 = a9;
  uint64_t v20 = a10;
  uint64_t v19 = a11;
  unsigned int v18 = -110;
  memset(__b, 0, 0x48uLL);
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  unint64_t v14 = 0;
  if (a9 >= *v22)
  {
    mbedtls_ecp_point_init((uint64_t)__b);
    mbedtls_mpi_init((uint64_t)v16);
    mbedtls_mpi_init((uint64_t)v15);
    unsigned int v18 = mbedtls_ecp_gen_keypair_base(v28, v26, v16, __b, v20, v19);
    if (!v18)
    {
      unsigned int v18 = ecjpake_hash(v29, v28, v27, (uint64_t)v26, (uint64_t)__b, v24, v23, (int *)v15);
      if (!v18)
      {
        unsigned int v18 = mbedtls_mpi_mul_mpi((uint64_t)v15, (uint64_t)v15, v25);
        if (!v18)
        {
          unsigned int v18 = mbedtls_mpi_sub_mpi(v15, (int *)v16, v15);
          if (!v18)
          {
            unsigned int v18 = mbedtls_mpi_mod_mpi((int *)v15, (uint64_t)v15, (void *)(v28 + 152));
            if (!v18)
            {
              unsigned int v18 = mbedtls_ecp_tls_write_point(v28, (uint64_t)__b, v27, &v14, (unsigned char *)*v22, v21 - *v22);
              if (!v18)
              {
                *v22 += v14;
                unint64_t v14 = mbedtls_mpi_size((uint64_t)v15);
                if (v21 >= *v22 && v21 - *v22 >= v14 + 1 && v14 <= 0xFF)
                {
                  char v11 = v14;
                  uint64_t v12 = (unsigned char *)(*v22)++;
                  unsigned char *v12 = v11;
                  unsigned int v18 = mbedtls_mpi_write_binary((uint64_t)v15, *v22, v14);
                  if (!v18) {
                    *v22 += v14;
                  }
                }
                else
                {
                  unsigned int v18 = -20224;
                }
              }
            }
          }
        }
      }
    }
    mbedtls_ecp_point_free((uint64_t)__b);
    mbedtls_mpi_free((uint64_t)v16);
    mbedtls_mpi_free((uint64_t)v15);
    return v18;
  }
  else
  {
    return -20224;
  }
}

uint64_t mbedtls_ecjpake_derive_secret(uint64_t a1, unsigned char *a2, unint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t), void **a6)
{
  uint64_t v18 = a1;
  uint64_t v17 = a2;
  unint64_t v16 = a3;
  int v15 = a4;
  unint64_t v14 = a5;
  unsigned int v13 = a6;
  unsigned int v12 = -110;
  memset(__b, 0, 0x48uLL);
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  unsigned __int8 size = mbedtls_md_get_size(*(void *)v18);
  unint64_t *v15 = size;
  if (v16 >= *v15)
  {
    mbedtls_ecp_point_init((uint64_t)__b);
    mbedtls_mpi_init((uint64_t)v10);
    mbedtls_mpi_init((uint64_t)v9);
    unsigned int v12 = mbedtls_mpi_lset((uint64_t)v9, 1);
    if (!v12)
    {
      unsigned int v12 = ecjpake_mul_secret((int *)v10, -1, v18 + 648, (_DWORD *)(v18 + 672), (void *)(v18 + 160), v14, (uint64_t)v13);
      if (!v12)
      {
        unsigned int v12 = mbedtls_ecp_muladd(v18 + 8, __b, v9, (void *)(v18 + 552), v10, (void *)(v18 + 480));
        if (!v12)
        {
          unsigned int v12 = mbedtls_ecp_mul(v18 + 8, __b, (void *)(v18 + 648), __b, v14, v13);
          if (!v12)
          {
            unint64_t v8 = (*(void *)(v18 + 184) + 7) / 8uLL;
            unsigned int v12 = mbedtls_mpi_write_binary((uint64_t)__b, (unint64_t)v20, v8);
            if (!v12) {
              unsigned int v12 = mbedtls_md(*(void *)v18, (uint64_t)v20, v8, v17);
            }
          }
        }
      }
    }
    mbedtls_ecp_point_free((uint64_t)__b);
    mbedtls_mpi_free((uint64_t)v10);
    mbedtls_mpi_free((uint64_t)v9);
    return v12;
  }
  else
  {
    return -20224;
  }
}

uint64_t ecjpake_kkp_write(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, int *a6, char *a7, unint64_t *a8, unint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, unint64_t), void **a11)
{
  uint64_t v24 = a1;
  uint64_t v23 = a2;
  int v22 = a3;
  unint64_t v21 = a4;
  uint64_t v20 = a5;
  uint64_t v19 = a6;
  uint64_t v18 = a7;
  uint64_t v17 = a8;
  unint64_t v16 = a9;
  int v15 = a10;
  unint64_t v14 = a11;
  unsigned int v13 = -110;
  unint64_t v12 = 0;
  if (a9 >= *a8)
  {
    unsigned int v13 = mbedtls_ecp_gen_keypair_base(v23, v21, v20, v19, v15, v14);
    if (!v13)
    {
      unsigned int v13 = mbedtls_ecp_tls_write_point(v23, (uint64_t)v19, v22, &v12, (unsigned char *)*v17, v16 - *v17);
      if (!v13)
      {
        *v17 += v12;
        return ecjpake_zkp_write(v24, v23, v22, v21, (uint64_t)v20, (uint64_t)v19, v18, v17, v16, v15, v14);
      }
    }
    return v13;
  }
  else
  {
    return -20224;
  }
}

uint64_t ecjpake_zkp_read(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, char *a6, uint64_t *a7, unint64_t a8)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  int v21 = a3;
  uint64_t v20 = a4;
  uint64_t v19 = a5;
  uint64_t v18 = a6;
  uint64_t v17 = a7;
  unint64_t v16 = a8;
  unsigned int point = -110;
  memset(__b, 0, 0x48uLL);
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  mbedtls_ecp_point_init((uint64_t)__b);
  mbedtls_ecp_point_init((uint64_t)v13);
  mbedtls_mpi_init((uint64_t)v12);
  mbedtls_mpi_init((uint64_t)v11);
  if (v16 >= *v17)
  {
    unsigned int point = mbedtls_ecp_tls_read_point(v22, (uint64_t)__b, v17, v16 - *v17);
    if (!point)
    {
      if (v16 > *v17)
      {
        unint64_t v8 = (unsigned char *)(*v17)++;
        unint64_t v10 = *v8;
        if (v16 >= *v17 && v16 - *v17 >= v10 && *v8)
        {
          unsigned int point = mbedtls_mpi_read_binary((uint64_t)v12, *v17, v10);
          if (!point)
          {
            *v17 += v10;
            unsigned int point = ecjpake_hash(v23, v22, v21, (uint64_t)v20, (uint64_t)__b, (uint64_t)v19, v18, (int *)v11);
            if (!point)
            {
              unsigned int point = mbedtls_ecp_muladd(v22, v13, v11, v19, v12, v20);
              if (!point)
              {
                if (mbedtls_ecp_point_cmp(v13, (uint64_t)__b)) {
                  unsigned int point = -19968;
                }
              }
            }
          }
        }
        else
        {
          unsigned int point = -20352;
        }
      }
      else
      {
        unsigned int point = -20352;
      }
    }
    mbedtls_ecp_point_free((uint64_t)__b);
    mbedtls_ecp_point_free((uint64_t)v13);
    mbedtls_mpi_free((uint64_t)v12);
    mbedtls_mpi_free((uint64_t)v11);
    return point;
  }
  else
  {
    return -20352;
  }
}

uint64_t ecjpake_hash(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, int *a8)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  int v19 = a3;
  uint64_t v18 = a4;
  uint64_t v17 = a5;
  uint64_t v16 = a6;
  __s = a7;
  unint64_t v14 = a8;
  unsigned int binary = -110;
  unint64_t v12 = (uint64_t *)v24;
  size_t v11 = strlen(a7);
  unsigned int binary = ecjpake_write_len_point((unint64_t *)&v12, (unint64_t)&v25, v20, v19, v18);
  if (binary) {
    return binary;
  }
  unsigned int binary = ecjpake_write_len_point((unint64_t *)&v12, (unint64_t)&v25, v20, v19, v17);
  if (binary) {
    return binary;
  }
  unsigned int binary = ecjpake_write_len_point((unint64_t *)&v12, (unint64_t)&v25, v20, v19, v16);
  if (binary) {
    return binary;
  }
  if ((char *)&v25 - (char *)v12 >= 4)
  {
    *(unsigned char *)unint64_t v12 = BYTE3(v11);
    *((unsigned char *)v12 + 1) = BYTE2(v11);
    *((unsigned char *)v12 + 2) = BYTE1(v11);
    *((unsigned char *)v12 + 3) = v11;
    unint64_t v12 = (uint64_t *)((char *)v12 + 4);
    if (&v25 < v12 || (char *)&v25 - (char *)v12 < v11) {
      return -20224;
    }
    __memcpy_chk();
    unint64_t v12 = (uint64_t *)((char *)v12 + v11);
    unsigned int binary = mbedtls_md(v21, (uint64_t)v24, (char *)v12 - v24, v23);
    if (!binary)
    {
      unint64_t v10 = v14;
      unsigned __int8 size = mbedtls_md_get_size(v21);
      unsigned int binary = mbedtls_mpi_read_binary((uint64_t)v10, (uint64_t)v23, size);
      if (!binary) {
        return mbedtls_mpi_mod_mpi(v14, (uint64_t)v14, (void *)(v20 + 152));
      }
    }
    return binary;
  }
  return -20224;
}

uint64_t ecjpake_write_len_point(unint64_t *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t v12 = a1;
  unint64_t v11 = a2;
  uint64_t v10 = a3;
  int v9 = a4;
  uint64_t v8 = a5;
  unsigned int v7 = -110;
  unint64_t v6 = 0;
  if (a2 >= *a1 && (uint64_t)(v11 - *v12) >= 5)
  {
    unsigned int v7 = mbedtls_ecp_point_write_binary(v10, v8, v9, &v6, (unsigned char *)(*v12 + 4), v11 - (*v12 + 4));
    if (v7)
    {
      return v7;
    }
    else
    {
      *(unsigned char *)unint64_t *v12 = BYTE3(v6);
      *(unsigned char *)(*v12 + 1) = BYTE2(v6);
      *(unsigned char *)(*v12 + 2) = BYTE1(v6);
      *(unsigned char *)(*v12 + 3) = v6;
      *v12 += v6 + 4;
      return 0;
    }
  }
  else
  {
    return -20224;
  }
}

void *mbedtls_ecp_curve_list()
{
  return &ecp_supported_curves;
}

_DWORD *mbedtls_ecp_grp_id_list()
{
  if (!mbedtls_ecp_grp_id_list_init_done)
  {
    uint64_t v3 = 0;
    for (int i = mbedtls_ecp_curve_list(); *i; i += 4)
    {
      uint64_t v0 = v3++;
      ecp_supported_grp_id[v0] = *i;
    }
    ecp_supported_grp_id[v3] = 0;
    mbedtls_ecp_grp_id_list_init_done = 1;
  }
  return ecp_supported_grp_id;
}

_DWORD *mbedtls_ecp_curve_info_from_grp_id(int a1)
{
  for (int i = mbedtls_ecp_curve_list(); *i; i += 4)
  {
    if (*i == a1) {
      return i;
    }
  }
  return 0;
}

_DWORD *mbedtls_ecp_curve_info_from_tls_id(unsigned __int16 a1)
{
  for (int i = mbedtls_ecp_curve_list(); *i; i += 4)
  {
    if (*((unsigned __int16 *)i + 2) == a1) {
      return i;
    }
  }
  return 0;
}

const char **mbedtls_ecp_curve_info_from_name(const char *a1)
{
  if (!a1) {
    return 0;
  }
  for (int i = (const char **)mbedtls_ecp_curve_list(); *(_DWORD *)i; i += 2)
  {
    if (!strcmp(i[1], a1)) {
      return i;
    }
  }
  return 0;
}

uint64_t mbedtls_ecp_get_type(uint64_t a1)
{
  if (*(void *)(a1 + 96))
  {
    if (*(void *)(a1 + 120)) {
      return 1;
    }
    else {
      return 2;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ecp_point_init(uint64_t a1)
{
  return mbedtls_mpi_init(a1 + 48);
}

uint64_t mbedtls_ecp_group_init(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  mbedtls_mpi_init(a1 + 8);
  mbedtls_mpi_init(a1 + 32);
  mbedtls_mpi_init(a1 + 56);
  mbedtls_ecp_point_init(a1 + 80);
  uint64_t result = mbedtls_mpi_init(a1 + 152);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return result;
}

uint64_t mbedtls_ecp_keypair_init(uint64_t a1)
{
  return mbedtls_ecp_point_init(a1 + 272);
}

void mbedtls_ecp_point_free(uint64_t a1)
{
  if (a1)
  {
    mbedtls_mpi_free(a1);
    mbedtls_mpi_free(a1 + 24);
    mbedtls_mpi_free(a1 + 48);
  }
}

void *mbedtls_ecp_group_free(void *result)
{
  uint64_t v2 = result;
  if (result)
  {
    if (*((_DWORD *)result + 48) != 1)
    {
      mbedtls_mpi_free((uint64_t)(result + 1));
      mbedtls_mpi_free((uint64_t)(v2 + 4));
      mbedtls_mpi_free((uint64_t)(v2 + 7));
      mbedtls_ecp_point_free((uint64_t)(v2 + 10));
      mbedtls_mpi_free((uint64_t)(v2 + 19));
    }
    if (v2[29])
    {
      for (unint64_t i = 0; i < v2[30]; ++i)
        mbedtls_ecp_point_free(v2[29] + 72 * i);
      mbedtls_free();
    }
    return mbedtls_platform_zeroize(v2, 0xF8uLL);
  }
  return result;
}

void mbedtls_ecp_keypair_free(void *a1)
{
  if (a1)
  {
    mbedtls_ecp_group_free(a1);
    mbedtls_mpi_free((uint64_t)(a1 + 31));
    mbedtls_ecp_point_free((uint64_t)(a1 + 34));
  }
}

uint64_t mbedtls_ecp_copy(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = mbedtls_mpi_copy(a1, a2);
  if (!v3)
  {
    unsigned int v3 = mbedtls_mpi_copy(a1 + 24, a2 + 24);
    if (!v3) {
      return mbedtls_mpi_copy(a1 + 48, a2 + 48);
    }
  }
  return v3;
}

uint64_t mbedtls_ecp_group_copy(void *a1, int *a2)
{
  return mbedtls_ecp_group_load(a1, *a2);
}

uint64_t mbedtls_ecp_set_zero(uint64_t a1)
{
  unsigned int v2 = mbedtls_mpi_lset(a1, 1);
  if (!v2)
  {
    unsigned int v2 = mbedtls_mpi_lset(a1 + 24, 1);
    if (!v2) {
      return mbedtls_mpi_lset(a1 + 48, 0);
    }
  }
  return v2;
}

BOOL mbedtls_ecp_is_zero(uint64_t a1)
{
  return mbedtls_mpi_cmp_int((void *)(a1 + 48), 0) == 0;
}

uint64_t mbedtls_ecp_point_cmp(void *a1, uint64_t a2)
{
  if (mbedtls_mpi_cmp_mpi(a1, a2)
    || mbedtls_mpi_cmp_mpi(a1 + 3, a2 + 24)
    || mbedtls_mpi_cmp_mpi(a1 + 6, a2 + 48))
  {
    return -20352;
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ecp_point_read_string(_DWORD *a1, int a2, const char *a3, const char *a4)
{
  unsigned int string = mbedtls_mpi_read_string(a1, a2, a3);
  if (!string)
  {
    unsigned int string = mbedtls_mpi_read_string(a1 + 6, a2, a4);
    if (!string) {
      return mbedtls_mpi_lset((uint64_t)(a1 + 12), 1);
    }
  }
  return string;
}

uint64_t mbedtls_ecp_point_write_binary(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, unsigned char *a5, unint64_t a6)
{
  unsigned int v8 = -20096;
  unint64_t v7 = mbedtls_mpi_size(a1 + 8);
  if (mbedtls_ecp_get_type(a1) != 1) {
    return v8;
  }
  if (mbedtls_mpi_cmp_int((void *)(a2 + 48), 0))
  {
    if (a3)
    {
      if (a3 == 1)
      {
        *a4 = v7 + 1;
        if (a6 < *a4) {
          return -20224;
        }
        *a5 = mbedtls_mpi_get_bit(a2 + 24, 0) + 2;
        return mbedtls_mpi_write_binary(a2, (unint64_t)(a5 + 1), v7);
      }
    }
    else
    {
      *a4 = 2 * v7 + 1;
      if (a6 < *a4) {
        return -20224;
      }
      *a5 = 4;
      unsigned int v8 = mbedtls_mpi_write_binary(a2, (unint64_t)(a5 + 1), v7);
      if (!v8) {
        return mbedtls_mpi_write_binary(a2 + 24, (unint64_t)&a5[v7 + 1], v7);
      }
    }
    return v8;
  }
  if (a6)
  {
    *a5 = 0;
    *a4 = 1;
    return 0;
  }
  else
  {
    return -20224;
  }
}

uint64_t mbedtls_ecp_point_read_binary(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  unsigned int binary = -20096;
  if (!a4) {
    return -20352;
  }
  unint64_t v5 = mbedtls_mpi_size(a1 + 8);
  if (mbedtls_ecp_get_type(a1) != 1) {
    return binary;
  }
  if (*a3)
  {
    if (*a3 != 4) {
      return -20096;
    }
    if (a4 != 2 * v5 + 1) {
      return -20352;
    }
    unsigned int binary = mbedtls_mpi_read_binary(a2, (uint64_t)(a3 + 1), v5);
    if (!binary)
    {
      unsigned int binary = mbedtls_mpi_read_binary(a2 + 24, (uint64_t)&a3[v5 + 1], v5);
      if (!binary) {
        return mbedtls_mpi_lset(a2 + 48, 1);
      }
    }
    return binary;
  }
  if (a4 == 1) {
    return mbedtls_ecp_set_zero(a2);
  }
  else {
    return -20352;
  }
}

uint64_t mbedtls_ecp_tls_read_point(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unsigned __int8 *)(*a3)++;
    unsigned __int8 v7 = *v4;
    if (*v4 && v7 <= a4 - 1)
    {
      unint64_t v6 = (unsigned char *)*a3;
      *a3 += v7;
      return mbedtls_ecp_point_read_binary(a1, a2, v6, v7);
    }
    else
    {
      return -20352;
    }
  }
  else
  {
    return -20352;
  }
}

uint64_t mbedtls_ecp_tls_write_point(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, unsigned char *a5, uint64_t a6)
{
  if (a6)
  {
    unsigned int v7 = mbedtls_ecp_point_write_binary(a1, a2, a3, a4, a5 + 1, a6 - 1);
    if (v7)
    {
      return v7;
    }
    else
    {
      *a5 = (*a4)++;
      return 0;
    }
  }
  else
  {
    return -20352;
  }
}

uint64_t mbedtls_ecp_tls_read_group(void *a1, void *a2, unint64_t a3)
{
  unsigned int v8 = a1;
  unsigned int v7 = a2;
  unint64_t v6 = a3;
  unsigned int v5 = -110;
  int v4 = 0;
  unsigned int v5 = mbedtls_ecp_tls_read_group_id(&v4, a2, a3);
  if (v5) {
    return v5;
  }
  else {
    return mbedtls_ecp_group_load(v8, v4);
  }
}

uint64_t mbedtls_ecp_tls_read_group_id(_DWORD *a1, void *a2, unint64_t a3)
{
  if (a3 >= 3)
  {
    unsigned int v3 = (unsigned char *)(*a2)++;
    if (*v3 == 3)
    {
      int v4 = (unsigned __int8 *)(*a2)++;
      __int16 v8 = *v4 << 8;
      unsigned int v5 = (unsigned __int8 *)(*a2)++;
      unsigned int v7 = mbedtls_ecp_curve_info_from_tls_id(v8 | *v5);
      if (v7)
      {
        *a1 = *v7;
        return 0;
      }
      else
      {
        return -20096;
      }
    }
    else
    {
      return -20352;
    }
  }
  else
  {
    return -20352;
  }
}

uint64_t mbedtls_ecp_tls_write_group(int *a1, unint64_t *a2, unsigned char *a3, unint64_t a4)
{
  unint64_t v6 = mbedtls_ecp_curve_info_from_grp_id(*a1);
  if (v6)
  {
    *a2 = 3;
    if (a4 >= *a2)
    {
      int v4 = a3;
      int v9 = a3 + 1;
      unsigned char *v4 = 3;
      *int v9 = HIBYTE(*((_WORD *)v6 + 2));
      v9[1] = *((unsigned char *)v6 + 4);
      return 0;
    }
    else
    {
      return -20224;
    }
  }
  else
  {
    return -20352;
  }
}

uint64_t mbedtls_ecp_mul_restartable(uint64_t a1, int *a2, void *a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t), void **a6, uint64_t a7)
{
  unsigned int v8 = mbedtls_ecp_check_privkey(a1, a3);
  if (!v8)
  {
    unsigned int v8 = mbedtls_ecp_check_pubkey(a1, a4);
    if (!v8)
    {
      unsigned int v8 = -20352;
      if (mbedtls_ecp_get_type(a1) == 1) {
        return ecp_mul_comb(a1, a2, a3, (uint64_t)a4, a5, a6, a7);
      }
    }
  }
  return v8;
}

uint64_t mbedtls_ecp_check_privkey(uint64_t a1, void *a2)
{
  if (mbedtls_ecp_get_type(a1) == 1)
  {
    if ((int)mbedtls_mpi_cmp_int(a2, 1) >= 0 && (int)mbedtls_mpi_cmp_mpi(a2, a1 + 152) < 0) {
      return 0;
    }
    else {
      return -19584;
    }
  }
  else
  {
    return -20352;
  }
}

uint64_t mbedtls_ecp_check_pubkey(uint64_t a1, void *a2)
{
  if (mbedtls_mpi_cmp_int(a2 + 6, 1))
  {
    return -19584;
  }
  else if (mbedtls_ecp_get_type(a1) == 1)
  {
    return ecp_check_pubkey_sw(a1, a2);
  }
  else
  {
    return -20352;
  }
}

uint64_t ecp_mul_comb(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t), void **a6, uint64_t a7)
{
  unsigned __int8 v9 = 0;
  uint64_t v8 = 0;
  memset(__b, 0, sizeof(__b));
  ecp_drbg_init((uint64_t)__b);
  if (a5
    || (a5 = ecp_drbg_random,
        a6 = __b,
        (unsigned int v14 = ecp_drbg_seed((uint64_t)__b, (uint64_t)a3, (*(void *)(a1 + 184) + 7) / 8uLL)) == 0))
  {
    unsigned __int8 v13 = ecp_pick_window_size(a1, 0);
    unsigned __int8 v9 = 1 << (v13 - 1);
    unint64_t v10 = (*(void *)(a1 + 184) + (unint64_t)v13 - 1) / v13;
    uint64_t v8 = mbedtls_calloc();
    if (v8)
    {
      for (unsigned __int8 i = 0; i < (int)v9; ++i)
        mbedtls_ecp_point_init(v8 + 72 * i);
      unsigned int v14 = ecp_precompute_comb(a1, v8, a4, v13, v10);
      if (!v14) {
        unsigned int v14 = ecp_mul_comb_after_precomp(a1, a2, a3, v8, v9, v13, v10, a5, (uint64_t)a6, a7);
      }
    }
    else
    {
      unsigned int v14 = -19840;
    }
  }
  ecp_drbg_free(__b);
  if (v8 == *(void *)(a1 + 232)) {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    for (unsigned __int8 j = 0; j < (int)v9; ++j)
      mbedtls_ecp_point_free(v8 + 72 * j);
    mbedtls_free();
  }
  if (v14) {
    mbedtls_ecp_point_free((uint64_t)a2);
  }
  return v14;
}

uint64_t mbedtls_ecp_mul(uint64_t a1, int *a2, void *a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t), void **a6)
{
  return mbedtls_ecp_mul_restartable(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t mbedtls_ecp_muladd_restartable(uint64_t a1, int *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  int v15 = a3;
  unsigned int v14 = a4;
  unsigned __int8 v13 = a5;
  unint64_t v12 = a6;
  uint64_t v11 = a7;
  unsigned int v10 = -110;
  memset(__b, 0, 0x48uLL);
  uint64_t v8 = v16;
  if (mbedtls_ecp_get_type(v17) == 1)
  {
    mbedtls_ecp_point_init((uint64_t)__b);
    unsigned int v10 = mbedtls_ecp_mul_shortcuts(v17, __b, v15, v14, v11);
    if (!v10)
    {
      unsigned int v10 = mbedtls_ecp_mul_shortcuts(v17, v8, v13, v12, v11);
      if (!v10)
      {
        unsigned int v10 = ecp_add_mixed(v17, (uint64_t)v8, (uint64_t)__b, (uint64_t)v8);
        if (!v10) {
          unsigned int v10 = ecp_normalize_jac(v17, (uint64_t)v8);
        }
      }
    }
    mbedtls_ecp_point_free((uint64_t)__b);
    return v10;
  }
  else
  {
    return -20096;
  }
}

uint64_t mbedtls_ecp_mul_shortcuts(uint64_t a1, int *a2, void *a3, void *a4, uint64_t a5)
{
  if (mbedtls_mpi_cmp_int(a3, 0))
  {
    if (mbedtls_mpi_cmp_int(a3, 1))
    {
      if (mbedtls_mpi_cmp_int(a3, -1))
      {
        return mbedtls_ecp_mul_restartable(a1, a2, a3, a4, 0, 0, a5);
      }
      else
      {
        unsigned int v6 = mbedtls_ecp_copy((uint64_t)a2, (uint64_t)a4);
        if (!v6 && mbedtls_mpi_cmp_int((void *)a2 + 3, 0)) {
          return mbedtls_mpi_sub_mpi(a2 + 6, (int *)(a1 + 8), a2 + 6);
        }
      }
    }
    else
    {
      return mbedtls_ecp_copy((uint64_t)a2, (uint64_t)a4);
    }
  }
  else
  {
    return mbedtls_ecp_set_zero((uint64_t)a2);
  }
  return v6;
}

uint64_t ecp_add_mixed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  unsigned int v14 = (int *)a3;
  uint64_t v13 = a4;
  unsigned int v12 = -110;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  if (mbedtls_mpi_cmp_int((void *)(a3 + 48), 0))
  {
    if (!*(void *)(v13 + 64) || mbedtls_mpi_cmp_int((void *)(v13 + 48), 0))
    {
      if (*(void *)(v13 + 64) && mbedtls_mpi_cmp_int((void *)(v13 + 48), 1))
      {
        return -20352;
      }
      else
      {
        mbedtls_mpi_init((uint64_t)v11);
        mbedtls_mpi_init((uint64_t)v10);
        mbedtls_mpi_init((uint64_t)v9);
        mbedtls_mpi_init((uint64_t)v8);
        mbedtls_mpi_init((uint64_t)v7);
        mbedtls_mpi_init((uint64_t)v6);
        mbedtls_mpi_init((uint64_t)v5);
        unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v11, (uint64_t)(v14 + 12), (uint64_t)(v14 + 12));
        if (!v12)
        {
          unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v10, (uint64_t)v11, (uint64_t)(v14 + 12));
          if (!v12)
          {
            unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v11, (uint64_t)v11, v13);
            if (!v12)
            {
              unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v10, (uint64_t)v10, v13 + 24);
              if (!v12)
              {
                unsigned int v12 = mbedtls_mpi_sub_mod(v16, (int *)v11, (int *)v11, v14);
                if (!v12)
                {
                  unsigned int v12 = mbedtls_mpi_sub_mod(v16, (int *)v10, (int *)v10, v14 + 6);
                  if (!v12)
                  {
                    if (mbedtls_mpi_cmp_int(v11, 0))
                    {
                      unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v5, (uint64_t)(v14 + 12), (uint64_t)v11);
                      if (!v12)
                      {
                        unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v9, (uint64_t)v11, (uint64_t)v11);
                        if (!v12)
                        {
                          unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v8, (uint64_t)v9, (uint64_t)v11);
                          if (!v12)
                          {
                            unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v9, (uint64_t)v9, (uint64_t)v14);
                            if (!v12)
                            {
                              unsigned int v12 = mbedtls_mpi_copy((uint64_t)v11, (uint64_t)v9);
                              if (!v12)
                              {
                                unsigned int v12 = mbedtls_mpi_shift_l_mod(v16, v11, 1uLL);
                                if (!v12)
                                {
                                  unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v7, (uint64_t)v10, (uint64_t)v10);
                                  if (!v12)
                                  {
                                    unsigned int v12 = mbedtls_mpi_sub_mod(v16, (int *)v7, (int *)v7, v11);
                                    if (!v12)
                                    {
                                      unsigned int v12 = mbedtls_mpi_sub_mod(v16, (int *)v7, (int *)v7, v8);
                                      if (!v12)
                                      {
                                        unsigned int v12 = mbedtls_mpi_sub_mod(v16, (int *)v9, (int *)v9, v7);
                                        if (!v12)
                                        {
                                          unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v9, (uint64_t)v9, (uint64_t)v10);
                                          if (!v12)
                                          {
                                            unsigned int v12 = mbedtls_mpi_mul_mod(v16, (int *)v8, (uint64_t)v8, (uint64_t)(v14 + 6));
                                            if (!v12)
                                            {
                                              unsigned int v12 = mbedtls_mpi_sub_mod(v16, (int *)v6, (int *)v9, v8);
                                              if (!v12)
                                              {
                                                unsigned int v12 = mbedtls_mpi_copy(v15, (uint64_t)v7);
                                                if (!v12)
                                                {
                                                  unsigned int v12 = mbedtls_mpi_copy(v15 + 24, (uint64_t)v6);
                                                  if (!v12) {
                                                    unsigned int v12 = mbedtls_mpi_copy(v15 + 48, (uint64_t)v5);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    else if (mbedtls_mpi_cmp_int(v10, 0))
                    {
                      unsigned int v12 = mbedtls_ecp_set_zero(v15);
                    }
                    else
                    {
                      unsigned int v12 = ecp_double_jac(v16, v15, v14);
                    }
                  }
                }
              }
            }
          }
        }
        mbedtls_mpi_free((uint64_t)v11);
        mbedtls_mpi_free((uint64_t)v10);
        mbedtls_mpi_free((uint64_t)v9);
        mbedtls_mpi_free((uint64_t)v8);
        mbedtls_mpi_free((uint64_t)v7);
        mbedtls_mpi_free((uint64_t)v6);
        mbedtls_mpi_free((uint64_t)v5);
        return v12;
      }
    }
    else
    {
      return mbedtls_ecp_copy(v15, (uint64_t)v14);
    }
  }
  else
  {
    return mbedtls_ecp_copy(v15, v13);
  }
}

uint64_t ecp_normalize_jac(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  unsigned int v6 = (int *)a2;
  if (mbedtls_mpi_cmp_int((void *)(a2 + 48), 0))
  {
    unsigned int v5 = -110;
    memset(v4, 0, sizeof(v4));
    memset(v3, 0, sizeof(v3));
    mbedtls_mpi_init((uint64_t)v4);
    mbedtls_mpi_init((uint64_t)v3);
    unsigned int v5 = mbedtls_mpi_inv_mod((uint64_t)v4, (uint64_t)(v6 + 12), (void *)(v7 + 8));
    if (!v5)
    {
      unsigned int v5 = mbedtls_mpi_mul_mod(v7, (int *)v3, (uint64_t)v4, (uint64_t)v4);
      if (!v5)
      {
        unsigned int v5 = mbedtls_mpi_mul_mod(v7, v6, (uint64_t)v6, (uint64_t)v3);
        if (!v5)
        {
          unsigned int v5 = mbedtls_mpi_mul_mod(v7, v6 + 6, (uint64_t)(v6 + 6), (uint64_t)v3);
          if (!v5)
          {
            unsigned int v5 = mbedtls_mpi_mul_mod(v7, v6 + 6, (uint64_t)(v6 + 6), (uint64_t)v4);
            if (!v5) {
              unsigned int v5 = mbedtls_mpi_lset((uint64_t)(v6 + 12), 1);
            }
          }
        }
      }
    }
    mbedtls_mpi_free((uint64_t)v4);
    mbedtls_mpi_free((uint64_t)v3);
    return v5;
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ecp_muladd(uint64_t a1, int *a2, void *a3, void *a4, void *a5, void *a6)
{
  return mbedtls_ecp_muladd_restartable(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t ecp_check_pubkey_sw(uint64_t a1, void *a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  unsigned int i = -110;
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  if ((int)mbedtls_mpi_cmp_int(a2, 0) >= 0
    && (int)mbedtls_mpi_cmp_int(v7 + 3, 0) >= 0
    && (int)mbedtls_mpi_cmp_mpi(v7, v8 + 8) < 0
    && (int)mbedtls_mpi_cmp_mpi(v7 + 3, v8 + 8) < 0)
  {
    mbedtls_mpi_init((uint64_t)v5);
    mbedtls_mpi_init((uint64_t)v4);
    unsigned int i = mbedtls_mpi_mul_mod(v8, (int *)v5, (uint64_t)(v7 + 3), (uint64_t)(v7 + 3));
    if (!i)
    {
      unsigned int i = mbedtls_mpi_mul_mod(v8, (int *)v4, (uint64_t)v7, (uint64_t)v7);
      if (!i)
      {
        if (*(void *)(v8 + 48))
        {
          unsigned int i = mbedtls_mpi_add_mod(v8, v4, (int *)v4, (_DWORD *)(v8 + 32));
          if (!i)
          {
LABEL_17:
            unsigned int i = mbedtls_mpi_mul_mod(v8, (int *)v4, (uint64_t)v4, (uint64_t)v7);
            if (!i)
            {
              unsigned int i = mbedtls_mpi_add_mod(v8, v4, (int *)v4, (_DWORD *)(v8 + 56));
              if (!i)
              {
                if (mbedtls_mpi_cmp_mpi(v5, (uint64_t)v4)) {
                  unsigned int i = -19584;
                }
              }
            }
          }
        }
        else
        {
          for (unsigned int i = mbedtls_mpi_sub_int(v4, (int *)v4, 3); !i; unsigned int i = mbedtls_mpi_add_mpi(v4, (int *)v4, (_DWORD *)(v8 + 8)))
          {
            BOOL v3 = 0;
            if (SLODWORD(v4[0]) < 0) {
              BOOL v3 = mbedtls_mpi_cmp_int(v4, 0) != 0;
            }
            if (!v3) {
              goto LABEL_17;
            }
          }
        }
      }
    }
    mbedtls_mpi_free((uint64_t)v5);
    mbedtls_mpi_free((uint64_t)v4);
    return i;
  }
  return -19584;
}

uint64_t mbedtls_ecp_gen_privkey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  if (mbedtls_ecp_get_type(a1) == 1) {
    return mbedtls_ecp_gen_privkey_sw((void *)(a1 + 152), a2, a3, a4);
  }
  else {
    return -20352;
  }
}

uint64_t mbedtls_ecp_gen_privkey_sw(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  unsigned int v5 = mbedtls_mpi_random(a2, 1, a1, a3, a4);
  if (v5 == -14) {
    return -19712;
  }
  else {
    return v5;
  }
}

uint64_t mbedtls_ecp_gen_keypair_base(uint64_t a1, void *a2, void *a3, int *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t), void **a6)
{
  unsigned int v7 = mbedtls_ecp_gen_privkey(a1, (uint64_t)a3, a5, (uint64_t)a6);
  if (!v7) {
    return mbedtls_ecp_mul(a1, a4, a3, a2, a5, a6);
  }
  return v7;
}

uint64_t mbedtls_ecp_gen_keypair(uint64_t a1, void *a2, int *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t), void **a5)
{
  return mbedtls_ecp_gen_keypair_base(a1, (void *)(a1 + 80), a2, a3, a4, a5);
}

uint64_t mbedtls_ecp_gen_key(int a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), void **a4)
{
  unsigned int v5 = mbedtls_ecp_group_load((void *)a2, a1);
  if (v5) {
    return v5;
  }
  else {
    return mbedtls_ecp_gen_keypair(a2, (void *)(a2 + 248), (int *)(a2 + 272), a3, a4);
  }
}

uint64_t mbedtls_ecp_read_key(int a1, void *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5 = mbedtls_ecp_group_load(a2, a1);
  if (v5)
  {
    return v5;
  }
  else
  {
    unsigned int binary = -20096;
    if (mbedtls_ecp_get_type((uint64_t)a2) == 1)
    {
      unsigned int binary = mbedtls_mpi_read_binary((uint64_t)(a2 + 31), a3, a4);
      if (!binary) {
        unsigned int binary = mbedtls_ecp_check_privkey((uint64_t)a2, a2 + 31);
      }
    }
    if (binary) {
      mbedtls_mpi_free((uint64_t)(a2 + 31));
    }
    return binary;
  }
}

uint64_t mbedtls_ecp_write_key(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v4 = -20096;
  if (mbedtls_ecp_get_type(a1) == 1) {
    return mbedtls_mpi_write_binary(a1 + 248, a2, a3);
  }
  return v4;
}

uint64_t mbedtls_ecp_check_pub_priv(uint64_t a1, int *a2)
{
  uint64_t v7 = a1;
  unsigned int v6 = a2;
  unsigned int v5 = -110;
  memset(__b, 0, sizeof(__b));
  memset(v3, 0, sizeof(v3));
  if (!*(_DWORD *)v7
    || *(_DWORD *)v7 != *v6
    || mbedtls_mpi_cmp_mpi((void *)(v7 + 272), (uint64_t)(v6 + 68))
    || mbedtls_mpi_cmp_mpi((void *)(v7 + 296), (uint64_t)(v6 + 74))
    || mbedtls_mpi_cmp_mpi((void *)(v7 + 320), (uint64_t)(v6 + 80)))
  {
    return -20352;
  }
  else
  {
    mbedtls_ecp_point_init((uint64_t)__b);
    mbedtls_ecp_group_init((uint64_t)v3);
    mbedtls_ecp_group_copy(v3, v6);
    unsigned int v5 = mbedtls_ecp_mul((uint64_t)v3, (int *)__b, (void *)v6 + 31, (void *)v6 + 10, 0, 0);
    if (!v5
      && (mbedtls_mpi_cmp_mpi(__b, (uint64_t)(v6 + 68))
       || mbedtls_mpi_cmp_mpi(&__b[3], (uint64_t)(v6 + 74))
       || mbedtls_mpi_cmp_mpi(&__b[6], (uint64_t)(v6 + 80))))
    {
      unsigned int v5 = -20352;
    }
    mbedtls_ecp_point_free((uint64_t)__b);
    mbedtls_ecp_group_free(v3);
    return v5;
  }
}

uint64_t ecp_drbg_init(uint64_t a1)
{
  return mbedtls_hmac_drbg_init(a1);
}

uint64_t ecp_drbg_random(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_hmac_drbg_random(a1, a2, a3);
}

uint64_t ecp_drbg_seed(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v5 = *(_DWORD *)mbedtls_md_list();
  unsigned int v4 = mbedtls_md_info_from_type(v5);
  if (a3 <= 0x20)
  {
    unsigned int v6 = mbedtls_mpi_write_binary(a2, (unint64_t)v10, a3);
    if (!v6) {
      unsigned int v6 = mbedtls_hmac_drbg_seed_buf(a1, (uint64_t)v4, (uint64_t)v10, a3);
    }
  }
  else
  {
    unsigned int v6 = -19712;
  }
  mbedtls_platform_zeroize(v10, a3);
  return v6;
}

uint64_t ecp_pick_window_size(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 184) < 0x180uLL) {
    char v2 = 4;
  }
  else {
    char v2 = 5;
  }
  unsigned __int8 v4 = v2;
  if (a2) {
    unsigned __int8 v4 = v2 + 1;
  }
  if (v4 > 2u) {
    unsigned __int8 v4 = 2;
  }
  if ((unint64_t)v4 >= *(void *)(a1 + 184)) {
    return 2;
  }
  return v4;
}

uint64_t ecp_precompute_comb(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unint64_t a5)
{
  unsigned __int8 v9 = 1 << (a4 - 1);
  uint64_t v22 = 0;
  unsigned int v17 = mbedtls_ecp_copy(a2, a3);
  if (!v17)
  {
    for (unint64_t i = 0; i < a5 * (a4 - 1); ++i)
    {
      unsigned __int8 v14 = 1 << (i / a5);
      uint64_t v8 = (int *)(a2 + 72 * v14);
      if (!(i % a5))
      {
        unsigned int v17 = mbedtls_ecp_copy((uint64_t)v8, a2 + 72 * ((int)v14 >> 1));
        if (v17) {
          return v17;
        }
      }
      unsigned int v17 = ecp_double_jac(a1, (uint64_t)v8, v8);
      if (v17) {
        return v17;
      }
    }
    unint64_t v11 = 0;
    for (unsigned __int8 j = 1; j < (int)v9; j *= 2)
    {
      unint64_t v5 = v11++;
      *(&v22 + v5) = a2 + 72 * j;
    }
    unsigned int v17 = ecp_normalize_jac_many(a1, &v22, v11);
    if (!v17)
    {
      for (unsigned __int8 k = 1; k < (int)v9; k *= 2)
      {
        uint64_t v12 = k;
        while (v12--)
        {
          unsigned int v17 = ecp_add_mixed(a1, a2 + 72 * (k + v12), a2 + 72 * v12, a2 + 72 * k);
          if (v17) {
            return v17;
          }
        }
      }
      for (unint64_t m = 0; m + 1 < v9; ++m)
        *(&v22 + m) = a2 + 72 * m + 72;
      return ecp_normalize_jac_many(a1, &v22, m);
    }
  }
  return v17;
}

uint64_t ecp_mul_comb_after_precomp(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, unint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, unint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  unsigned __int8 v19 = a5;
  unsigned __int8 v18 = a6;
  unint64_t v17 = a7;
  uint64_t v16 = a8;
  uint64_t v15 = a9;
  uint64_t v14 = a10;
  unsigned int v13 = -110;
  char v12 = 0;
  unsigned int v13 = ecp_comb_recode_scalar(a1, a3, (uint64_t)v24, a7, a6, (unsigned __int8 *)&v12);
  if (!v13)
  {
    unsigned int v13 = ecp_mul_comb_core(v23, a2, v20, v19, (uint64_t)v24, v17, v16, v15, v14);
    if (!v13)
    {
      unsigned int v13 = ecp_safe_invert_jac(v23, (uint64_t)a2, v12);
      if (!v13)
      {
        unsigned int v13 = ecp_randomize_jac(v23, a2, v16, v15);
        if (!v13) {
          return ecp_normalize_jac(v23, (uint64_t)a2);
        }
      }
    }
  }
  return v13;
}

void **ecp_drbg_free(void **a1)
{
  return mbedtls_hmac_drbg_free(a1);
}

uint64_t ecp_double_jac(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  unsigned __int8 v9 = a3;
  unsigned int v8 = -110;
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  mbedtls_mpi_init((uint64_t)v7);
  mbedtls_mpi_init((uint64_t)v6);
  mbedtls_mpi_init((uint64_t)v5);
  mbedtls_mpi_init((uint64_t)v4);
  if (!*(void *)(v11 + 48))
  {
    unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v6, (uint64_t)(v9 + 12), (uint64_t)(v9 + 12));
    if (v8) {
      goto LABEL_38;
    }
    unsigned int v8 = mbedtls_mpi_add_mod(v11, v5, v9, v6);
    if (v8) {
      goto LABEL_38;
    }
    unsigned int v8 = mbedtls_mpi_sub_mod(v11, (int *)v4, v9, v6);
    if (v8) {
      goto LABEL_38;
    }
    unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v6, (uint64_t)v5, (uint64_t)v4);
    if (v8) {
      goto LABEL_38;
    }
    unsigned int v8 = mbedtls_mpi_mul_int((uint64_t)v7, (uint64_t)v6, 3);
    if (v8) {
      goto LABEL_38;
    }
    while ((int)mbedtls_mpi_cmp_mpi(v7, v11 + 8) >= 0)
    {
      unsigned int v8 = mbedtls_mpi_sub_abs((uint64_t)v7, (uint64_t)v7, v11 + 8);
      if (v8) {
        goto LABEL_38;
      }
    }
    goto LABEL_21;
  }
  unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v6, (uint64_t)v9, (uint64_t)v9);
  if (!v8)
  {
    unsigned int v8 = mbedtls_mpi_mul_int((uint64_t)v7, (uint64_t)v6, 3);
    if (!v8)
    {
      while ((int)mbedtls_mpi_cmp_mpi(v7, v11 + 8) >= 0)
      {
        unsigned int v8 = mbedtls_mpi_sub_abs((uint64_t)v7, (uint64_t)v7, v11 + 8);
        if (v8) {
          goto LABEL_38;
        }
      }
      if (!mbedtls_mpi_cmp_int((void *)(v11 + 32), 0)
        || (unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v6, (uint64_t)(v9 + 12), (uint64_t)(v9 + 12))) == 0
        && (unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v5, (uint64_t)v6, (uint64_t)v6)) == 0
        && (unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v6, (uint64_t)v5, v11 + 32)) == 0
        && (unsigned int v8 = mbedtls_mpi_add_mod(v11, v7, (int *)v7, v6)) == 0)
      {
LABEL_21:
        unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v5, (uint64_t)(v9 + 6), (uint64_t)(v9 + 6));
        if (!v8)
        {
          unsigned int v8 = mbedtls_mpi_shift_l_mod(v11, v5, 1uLL);
          if (!v8)
          {
            unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v6, (uint64_t)v9, (uint64_t)v5);
            if (!v8)
            {
              unsigned int v8 = mbedtls_mpi_shift_l_mod(v11, v6, 1uLL);
              if (!v8)
              {
                unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v4, (uint64_t)v5, (uint64_t)v5);
                if (!v8)
                {
                  unsigned int v8 = mbedtls_mpi_shift_l_mod(v11, v4, 1uLL);
                  if (!v8)
                  {
                    unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v5, (uint64_t)v7, (uint64_t)v7);
                    if (!v8)
                    {
                      unsigned int v8 = mbedtls_mpi_sub_mod(v11, (int *)v5, (int *)v5, v6);
                      if (!v8)
                      {
                        unsigned int v8 = mbedtls_mpi_sub_mod(v11, (int *)v5, (int *)v5, v6);
                        if (!v8)
                        {
                          unsigned int v8 = mbedtls_mpi_sub_mod(v11, (int *)v6, (int *)v6, v5);
                          if (!v8)
                          {
                            unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v6, (uint64_t)v6, (uint64_t)v7);
                            if (!v8)
                            {
                              unsigned int v8 = mbedtls_mpi_sub_mod(v11, (int *)v6, (int *)v6, v4);
                              if (!v8)
                              {
                                unsigned int v8 = mbedtls_mpi_mul_mod(v11, (int *)v4, (uint64_t)(v9 + 6), (uint64_t)(v9 + 12));
                                if (!v8)
                                {
                                  unsigned int v8 = mbedtls_mpi_shift_l_mod(v11, v4, 1uLL);
                                  if (!v8)
                                  {
                                    unsigned int v8 = mbedtls_mpi_copy(v10, (uint64_t)v5);
                                    if (!v8)
                                    {
                                      unsigned int v8 = mbedtls_mpi_copy(v10 + 24, (uint64_t)v6);
                                      if (!v8) {
                                        unsigned int v8 = mbedtls_mpi_copy(v10 + 48, (uint64_t)v4);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_38:
  mbedtls_mpi_free((uint64_t)v7);
  mbedtls_mpi_free((uint64_t)v6);
  mbedtls_mpi_free((uint64_t)v5);
  mbedtls_mpi_free((uint64_t)v4);
  return v8;
}

uint64_t ecp_normalize_jac_many(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  unint64_t v10 = a3;
  if (a3 >= 2)
  {
    unsigned int v9 = -110;
    unint64_t i = 0;
    memset(v6, 0, sizeof(v6));
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    uint64_t v7 = mbedtls_calloc();
    if (v7)
    {
      for (unint64_t i = 0; i < v10; ++i)
        mbedtls_mpi_init(v7 + 24 * i);
      mbedtls_mpi_init((uint64_t)v6);
      mbedtls_mpi_init((uint64_t)v5);
      mbedtls_mpi_init((uint64_t)v4);
      unsigned int v9 = mbedtls_mpi_copy(v7, *v11 + 48);
      if (!v9)
      {
        for (unint64_t i = 1; i < v10; ++i)
        {
          unsigned int v9 = mbedtls_mpi_mul_mod(v12, (int *)(v7 + 24 * i), v7 + 24 * (i - 1), v11[i] + 48);
          if (v9) {
            goto LABEL_28;
          }
        }
        unsigned int v9 = mbedtls_mpi_inv_mod((uint64_t)v6, v7 + 24 * (v10 - 1), (void *)(v12 + 8));
        if (!v9)
        {
          for (unint64_t i = v10 - 1; ; --i)
          {
            if (i)
            {
              unsigned int v9 = mbedtls_mpi_mul_mod(v12, (int *)v5, (uint64_t)v6, v7 + 24 * (i - 1));
              if (v9) {
                break;
              }
              unsigned int v9 = mbedtls_mpi_mul_mod(v12, (int *)v6, (uint64_t)v6, v11[i] + 48);
              if (v9) {
                break;
              }
            }
            else
            {
              unsigned int v9 = mbedtls_mpi_copy((uint64_t)v5, (uint64_t)v6);
              if (v9) {
                break;
              }
            }
            unsigned int v9 = mbedtls_mpi_mul_mod(v12, (int *)v4, (uint64_t)v5, (uint64_t)v5);
            if (v9) {
              break;
            }
            unsigned int v9 = mbedtls_mpi_mul_mod(v12, (int *)v11[i], v11[i], (uint64_t)v4);
            if (v9) {
              break;
            }
            unsigned int v9 = mbedtls_mpi_mul_mod(v12, (int *)(v11[i] + 24), v11[i] + 24, (uint64_t)v4);
            if (v9) {
              break;
            }
            unsigned int v9 = mbedtls_mpi_mul_mod(v12, (int *)(v11[i] + 24), v11[i] + 24, (uint64_t)v5);
            if (v9) {
              break;
            }
            unsigned int v9 = mbedtls_mpi_shrink(v11[i], *(void *)(v12 + 16));
            if (v9) {
              break;
            }
            unsigned int v9 = mbedtls_mpi_shrink(v11[i] + 24, *(void *)(v12 + 16));
            if (v9) {
              break;
            }
            mbedtls_mpi_free(v11[i] + 48);
            if (!i) {
              break;
            }
          }
        }
      }
LABEL_28:
      mbedtls_mpi_free((uint64_t)v6);
      mbedtls_mpi_free((uint64_t)v5);
      mbedtls_mpi_free((uint64_t)v4);
      for (unint64_t i = 0; i < v10; ++i)
        mbedtls_mpi_free(v7 + 24 * i);
      mbedtls_free();
      return v9;
    }
    else
    {
      return -19840;
    }
  }
  else
  {
    return ecp_normalize_jac(v12, *v11);
  }
}

uint64_t mbedtls_mpi_mul_mod(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = mbedtls_mpi_mul_mpi((uint64_t)a2, a3, a4);
  if (!v5) {
    return ecp_modp(a2, a1);
  }
  return v5;
}

uint64_t mbedtls_mpi_add_mod(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4)
{
  for (unsigned int i = mbedtls_mpi_add_mpi(a2, a3, a4); !i; unsigned int i = mbedtls_mpi_sub_abs((uint64_t)a2, (uint64_t)a2, a1 + 8))
  {
    if ((int)mbedtls_mpi_cmp_mpi(a2, a1 + 8) < 0) {
      break;
    }
  }
  return i;
}

uint64_t mbedtls_mpi_sub_mod(uint64_t a1, int *a2, int *a3, _DWORD *a4)
{
  for (unsigned int i = mbedtls_mpi_sub_mpi(a2, a3, a4); !i; unsigned int i = mbedtls_mpi_add_mpi(a2, a2, (_DWORD *)(a1 + 8)))
  {
    BOOL v5 = 0;
    if (*a2 < 0) {
      BOOL v5 = mbedtls_mpi_cmp_int(a2, 0) != 0;
    }
    if (!v5) {
      break;
    }
  }
  return i;
}

uint64_t mbedtls_mpi_shift_l_mod(uint64_t a1, void *a2, unint64_t a3)
{
  for (unsigned int i = mbedtls_mpi_shift_l((uint64_t)a2, a3); !i; unsigned int i = mbedtls_mpi_sub_abs((uint64_t)a2, (uint64_t)a2, a1 + 8))
  {
    if ((int)mbedtls_mpi_cmp_mpi(a2, a1 + 8) < 0) {
      break;
    }
  }
  return i;
}

uint64_t ecp_modp(int *a1, uint64_t a2)
{
  if (*(void *)(a2 + 200))
  {
    if (*a1 < 0 && mbedtls_mpi_cmp_int(a1, 0)
      || mbedtls_mpi_bitlen((uint64_t)a1) > 2 * *(void *)(a2 + 176))
    {
      return -20352;
    }
    else
    {
      unsigned int v4 = (*(uint64_t (**)(int *))(a2 + 200))(a1);
      if (!v4)
      {
        while (1)
        {
          BOOL v3 = 0;
          if (*a1 < 0) {
            BOOL v3 = mbedtls_mpi_cmp_int(a1, 0) != 0;
          }
          if (!v3) {
            break;
          }
          unsigned int v4 = mbedtls_mpi_add_mpi(a1, a1, (_DWORD *)(a2 + 8));
          if (v4) {
            return v4;
          }
        }
        do
        {
          if ((int)mbedtls_mpi_cmp_mpi(a1, a2 + 8) < 0) {
            break;
          }
          unsigned int v4 = mbedtls_mpi_sub_abs((uint64_t)a1, (uint64_t)a1, a2 + 8);
        }
        while (!v4);
      }
      return v4;
    }
  }
  else
  {
    return mbedtls_mpi_mod_mpi(a1, (uint64_t)a1, (void *)(a2 + 8));
  }
}

uint64_t ecp_comb_recode_scalar(uint64_t a1, _DWORD *a2, uint64_t a3, unint64_t a4, unsigned __int8 a5, unsigned __int8 *a6)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  unint64_t v13 = a4;
  unsigned __int8 v12 = a5;
  uint64_t v11 = a6;
  unsigned int v10 = -110;
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  mbedtls_mpi_init((uint64_t)v9);
  mbedtls_mpi_init((uint64_t)v8);
  if (mbedtls_mpi_get_bit(v16 + 152, 0) == 1)
  {
    BOOL v6 = mbedtls_mpi_get_bit((uint64_t)v15, 0) == 0;
    unsigned __int8 *v11 = v6;
    unsigned int v10 = mbedtls_mpi_copy((uint64_t)v9, (uint64_t)v15);
    if (!v10)
    {
      unsigned int v10 = mbedtls_mpi_sub_mpi(v8, (int *)(v16 + 152), v15);
      if (!v10)
      {
        unsigned int v10 = mbedtls_mpi_safe_cond_assign((uint64_t)v9, (uint64_t)v8, *v11);
        if (!v10) {
          ecp_comb_recode_core(v14, v13, v12, (uint64_t)v9);
        }
      }
    }
    mbedtls_mpi_free((uint64_t)v8);
    mbedtls_mpi_free((uint64_t)v9);
    return v10;
  }
  else
  {
    return -20352;
  }
}

uint64_t ecp_mul_comb_core(uint64_t a1, int *a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, unint64_t), uint64_t a8, uint64_t a9)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  unsigned __int8 v18 = a4;
  uint64_t v17 = a5;
  uint64_t v16 = a6;
  uint64_t v15 = a7;
  uint64_t v14 = a8;
  uint64_t v13 = a9;
  unsigned int i = -110;
  memset(__b, 0, 0x48uLL);
  mbedtls_ecp_point_init((uint64_t)__b);
  uint64_t v10 = v16;
  unsigned int i = ecp_select_comb(v21, (uint64_t)v20, v19, v18, *(unsigned char *)(v17 + v16));
  if (!i)
  {
    unsigned int i = mbedtls_mpi_lset((uint64_t)(v20 + 12), 1);
    if (!i)
    {
      for (unsigned int i = ecp_randomize_jac(v21, v20, v15, v14); !i; unsigned int i = ecp_add_mixed(v21, (uint64_t)v20, (uint64_t)v20, (uint64_t)__b))
      {
        if (!v10) {
          break;
        }
        --v10;
        unsigned int i = ecp_double_jac(v21, (uint64_t)v20, v20);
        if (i) {
          break;
        }
        unsigned int i = ecp_select_comb(v21, (uint64_t)__b, v19, v18, *(unsigned char *)(v17 + v10));
        if (i) {
          break;
        }
      }
    }
  }
  mbedtls_ecp_point_free((uint64_t)__b);
  return i;
}

uint64_t ecp_safe_invert_jac(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  unsigned int v6 = -110;
  BOOL v5 = 0;
  memset(v4, 0, sizeof(v4));
  mbedtls_mpi_init((uint64_t)v4);
  unsigned int v6 = mbedtls_mpi_sub_mpi(v4, (int *)(v9 + 8), (_DWORD *)(v8 + 24));
  if (!v6)
  {
    BOOL v5 = mbedtls_mpi_cmp_int((void *)(v8 + 24), 0) != 0;
    unsigned int v6 = mbedtls_mpi_safe_cond_assign(v8 + 24, (uint64_t)v4, v7 & v5);
  }
  mbedtls_mpi_free((uint64_t)v4);
  return v6;
}

uint64_t ecp_randomize_jac(uint64_t a1, int *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  uint64_t v8 = a4;
  unsigned int v7 = -110;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  mbedtls_mpi_init((uint64_t)v6);
  mbedtls_mpi_init((uint64_t)v5);
  unsigned int v7 = mbedtls_mpi_random((uint64_t)v6, 2, (void *)(v11 + 8), v9, v8);
  if (!v7)
  {
    unsigned int v7 = mbedtls_mpi_mul_mod(v11, v10 + 12, (uint64_t)(v10 + 12), (uint64_t)v6);
    if (!v7)
    {
      unsigned int v7 = mbedtls_mpi_mul_mod(v11, (int *)v5, (uint64_t)v6, (uint64_t)v6);
      if (!v7)
      {
        unsigned int v7 = mbedtls_mpi_mul_mod(v11, v10, (uint64_t)v10, (uint64_t)v5);
        if (!v7)
        {
          unsigned int v7 = mbedtls_mpi_mul_mod(v11, (int *)v5, (uint64_t)v5, (uint64_t)v6);
          if (!v7) {
            unsigned int v7 = mbedtls_mpi_mul_mod(v11, v10 + 6, (uint64_t)(v10 + 6), (uint64_t)v5);
          }
        }
      }
    }
  }
  mbedtls_mpi_free((uint64_t)v6);
  mbedtls_mpi_free((uint64_t)v5);
  if (v7 == -14) {
    return -19712;
  }
  return v7;
}

uint64_t ecp_comb_recode_core(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t result = __memset_chk();
  for (unint64_t i = 0; i < a2; ++i)
  {
    for (unint64_t j = 0; j < a3; ++j)
    {
      uint64_t result = mbedtls_mpi_get_bit(a4, i + a2 * j);
      *(unsigned char *)(a1 + i) |= result << j;
    }
  }
  char v7 = 0;
  for (unint64_t k = 1; k <= a2; ++k)
  {
    char v6 = *(unsigned char *)(a1 + k) & v7;
    *(unsigned char *)(a1 + k) ^= v7;
    char v5 = 1 - (*(unsigned char *)(a1 + k) & 1);
    char v7 = v6 | *(unsigned char *)(a1 + k) & (*(unsigned char *)(a1 + k - 1) * v5);
    *(unsigned char *)(a1 + k) ^= *(unsigned char *)(a1 + k - 1) * v5;
    *(unsigned char *)(a1 + k - 1) |= v5 << 7;
  }
  return result;
}

uint64_t ecp_select_comb(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5)
{
  unsigned __int8 v7 = (a5 & 0x7F) >> 1;
  for (unsigned __int8 i = 0; i < (int)a4; ++i)
  {
    unsigned int v8 = mbedtls_mpi_safe_cond_assign(a2, a3 + 72 * i, i == v7);
    if (v8) {
      return v8;
    }
    unsigned int v8 = mbedtls_mpi_safe_cond_assign(a2 + 24, a3 + 72 * i + 24, i == v7);
    if (v8) {
      return v8;
    }
  }
  return ecp_safe_invert_jac(a1, a2, (int)a5 >> 7);
}

uint64_t mbedtls_ecp_group_load(void *a1, int a2)
{
  *(_DWORD *)a1 = a2;
  if (a2 == 3)
  {
    a1[25] = ecp_mod_p256;
    return ecp_group_load((uint64_t)a1, (uint64_t)&secp256r1_p, 0x20uLL, 0, 0, (uint64_t)&secp256r1_b, 0x20uLL, (uint64_t)&secp256r1_gx, 0x20uLL, (uint64_t)&secp256r1_gy, 0x20uLL, (uint64_t)&secp256r1_n, 0x20uLL);
  }
  else
  {
    *(_DWORD *)a1 = 0;
    return -20096;
  }
}

uint64_t ecp_mod_p256(uint64_t a1)
{
  uint64_t v11 = a1;
  char v9 = 0;
  char v8 = 0;
  unsigned int v7 = 0;
  unsigned int v10 = mbedtls_mpi_grow(a1, 9uLL);
  if (!v10)
  {
    unsigned int v7 = **(void **)(v11 + 16);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 32), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 32)), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 40)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 48), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    **(void **)(v11 + 16) &= 0xFFFFFFFF00000000;
    **(void **)(v11 + 16) |= v7;
    unsigned int v7 = HIDWORD(**(void **)(v11 + 16));
    char v8 = v9;
    char v9 = 0;
    if (v8 >= 0) {
      add32(&v7, v8, &v9);
    }
    else {
      sub32(&v7, -v8, &v9);
    }
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 32)), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 40), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 48), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    **(void **)(v11 + 16) = **(unsigned int **)(v11 + 16);
    **(void **)(v11 + 16) |= (unint64_t)v7 << 32;
    unsigned int v7 = *(void *)(*(void *)(v11 + 16) + 8);
    char v8 = v9;
    char v9 = 0;
    if (v8 >= 0) {
      add32(&v7, v8, &v9);
    }
    else {
      sub32(&v7, -v8, &v9);
    }
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 40), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 40)), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    *(void *)(*(void *)(v11 + 16) + 8) &= 0xFFFFFFFF00000000;
    *(void *)(*(void *)(v11 + 16) + 8) |= v7;
    unsigned int v7 = HIDWORD(*(void *)(*(void *)(v11 + 16) + 8));
    char v8 = v9;
    char v9 = 0;
    if (v8 >= 0) {
      add32(&v7, v8, &v9);
    }
    else {
      sub32(&v7, -v8, &v9);
    }
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 40)), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 40)), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 48), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 48), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 32), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 32)), &v9);
    *(void *)(*(void *)(v11 + 16) + 8) = *(unsigned int *)(*(void *)(v11 + 16) + 8);
    *(void *)(*(void *)(v11 + 16) + 8) |= (unint64_t)v7 << 32;
    unsigned int v7 = *(void *)(*(void *)(v11 + 16) + 16);
    char v8 = v9;
    char v9 = 0;
    if (v8 >= 0) {
      add32(&v7, v8, &v9);
    }
    else {
      sub32(&v7, -v8, &v9);
    }
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 48), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 48), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 32)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 40), &v9);
    *(void *)(*(void *)(v11 + 16) + 16) &= 0xFFFFFFFF00000000;
    *(void *)(*(void *)(v11 + 16) + 16) |= v7;
    unsigned int v7 = HIDWORD(*(void *)(*(void *)(v11 + 16) + 16));
    char v8 = v9;
    char v9 = 0;
    if (v8 >= 0) {
      add32(&v7, v8, &v9);
    }
    else {
      sub32(&v7, -v8, &v9);
    }
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 40), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 40)), &v9);
    *(void *)(*(void *)(v11 + 16) + 16) = *(unsigned int *)(*(void *)(v11 + 16) + 16);
    *(void *)(*(void *)(v11 + 16) + 16) |= (unint64_t)v7 << 32;
    unsigned int v7 = *(void *)(*(void *)(v11 + 16) + 24);
    char v8 = v9;
    char v9 = 0;
    if (v8 >= 0) {
      add32(&v7, v8, &v9);
    }
    else {
      sub32(&v7, -v8, &v9);
    }
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 56), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 32), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 32)), &v9);
    *(void *)(*(void *)(v11 + 16) + 24) &= 0xFFFFFFFF00000000;
    *(void *)(*(void *)(v11 + 16) + 24) |= v7;
    unsigned int v7 = HIDWORD(*(void *)(*(void *)(v11 + 16) + 24));
    char v8 = v9;
    char v9 = 0;
    if (v8 >= 0) {
      add32(&v7, v8, &v9);
    }
    else {
      sub32(&v7, -v8, &v9);
    }
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    add32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 56)), &v9);
    add32(&v7, *(void *)(*(void *)(v11 + 16) + 32), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 40), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 40)), &v9);
    sub32(&v7, *(void *)(*(void *)(v11 + 16) + 48), &v9);
    sub32(&v7, HIDWORD(*(void *)(*(void *)(v11 + 16) + 48)), &v9);
    *(void *)(*(void *)(v11 + 16) + 24) = *(unsigned int *)(*(void *)(v11 + 16) + 24);
    *(void *)(*(void *)(v11 + 16) + 24) |= (unint64_t)v7 << 32;
    unint64_t v6 = 8;
    if (v9 <= 0) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = v9;
    }
    unsigned int v7 = v5;
    *(void *)(*(void *)(v11 + 16) + 32) &= 0xFFFFFFFF00000000;
    *(void *)(*(void *)(v11 + 16) + 32) |= v7;
    unsigned int v7 = 0;
    while (++v6 < 2 * *(void *)(v11 + 8))
    {
      uint64_t v1 = (void *)(*(void *)(v11 + 16) + 8 * (v6 / 2));
      if (v6 % 2)
      {
        void *v1 = *(unsigned int *)v1;
        char v2 = (void *)(*(void *)(v11 + 16) + 8 * (v6 / 2));
        *v2 |= (unint64_t)v7 << 32;
      }
      else
      {
        *v1 &= 0xFFFFFFFF00000000;
        BOOL v3 = (void *)(*(void *)(v11 + 16) + 8 * (v6 / 2));
        *v3 |= v7;
      }
    }
    if (v9 < 0) {
      mbedtls_ecp_fix_negative(v11, v9, 0x100uLL);
    }
  }
  return v10;
}

uint64_t ecp_group_load(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a4) {
    ecp_mpi_load(a1 + 32, a4, a5);
  }
  ecp_mpi_load(a1 + 56, a6, a7);
  ecp_mpi_load(a1 + 152, a12, a13);
  ecp_mpi_load(a1 + 80, a8, a9);
  ecp_mpi_load(a1 + 104, a10, a11);
  ecp_mpi_set1(a1 + 128);
  *(void *)(a1 + 176) = mbedtls_mpi_bitlen(a1 + 8);
  *(void *)(a1 + 184) = mbedtls_mpi_bitlen(a1 + 152);
  *(_DWORD *)(a1 + 192) = 1;
  return 0;
}

uint64_t ecp_mpi_load(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = a3 / 8;
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t ecp_mpi_set1(uint64_t result)
{
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = 1;
  *(void *)(result + 16) = &ecp_mpi_set1_one;
  return result;
}

unsigned int *add32(unsigned int *result, unsigned int a2, unsigned char *a3)
{
  *result += a2;
  *a3 += *result < a2;
  return result;
}

unsigned int *sub32(unsigned int *result, unsigned int a2, unsigned char *a3)
{
  *a3 -= *result < a2;
  *result -= a2;
  return result;
}

uint64_t mbedtls_ecp_fix_negative(uint64_t result, char a2, unint64_t a3)
{
  for (unint64_t i = 0; i <= a3 / 8 / 8; ++i)
    *(void *)(*(void *)(result + 16) + 8 * i) = -1 - *(void *)(*(void *)(result + 16) + 8 * i);
  unint64_t v8 = 0;
  do
  {
    ++*(void *)(*(void *)(result + 16) + 8 * v8);
    unint64_t v3 = v8++;
    BOOL v5 = 0;
    if (!*(void *)(*(void *)(result + 16) + 8 * v3)) {
      BOOL v5 = v8 <= a3 / 8 / 8;
    }
  }
  while (v5);
  *(_DWORD *)uint64_t result = -1;
  uint64_t v6 = -a2;
  if (a3 == 224) {
    v6 <<= 32;
  }
  unsigned int v4 = (void *)(*(void *)(result + 16) + 8 * (a3 / 8 / 8));
  *v4 += v6;
  return result;
}

uint64_t mbedtls_entropy_init(_DWORD *a1)
{
  a1[28] = 0;
  __memset_chk();
  *a1 = 0;
  return mbedtls_sha256_init();
}

_DWORD *mbedtls_entropy_free(_DWORD *result)
{
  uint64_t v1 = result;
  if (*result != -1)
  {
    mbedtls_sha256_free(result + 1);
    v1[28] = 0;
    uint64_t result = mbedtls_platform_zeroize(v1 + 30, 0x28uLL);
    _DWORD *v1 = -1;
  }
  return result;
}

uint64_t mbedtls_entropy_add_source(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v6 = 0;
  int v7 = *(_DWORD *)(a1 + 112);
  if (v7 < 1)
  {
    *(void *)(a1 + 120 + 40 * v7) = a2;
    *(void *)(a1 + 120 + 40 * v7 + 8) = a3;
    *(void *)(a1 + 120 + 40 * v7 + 24) = a4;
    *(_DWORD *)(a1 + 120 + 40 * v7 + 32) = a5;
    ++*(_DWORD *)(a1 + 112);
  }
  else
  {
    return -62;
  }
  return v6;
}

uint64_t mbedtls_entropy_update_manual(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  return entropy_update(a1, 1, a2, a3);
}

uint64_t entropy_update(_DWORD *a1, char a2, uint64_t a3, unint64_t a4)
{
  unsigned __int8 v12 = a1;
  char v11 = a2;
  uint64_t v10 = a3;
  unint64_t v9 = a4;
  unint64_t v7 = a4;
  unsigned int v6 = (unsigned char *)a3;
  if (a4 > 0x20)
  {
    unsigned int updated = mbedtls_sha256_ret(v10, v9, v13, 0);
    if (updated) {
      goto LABEL_8;
    }
    unsigned int v6 = v13;
    unint64_t v7 = 32;
  }
  v8[0] = v11;
  v8[1] = v7;
  if (*v12 || (unsigned int updated = mbedtls_sha256_starts_ret(v12 + 1, 0)) == 0)
  {
    _DWORD *v12 = 1;
    unsigned int updated = mbedtls_sha256_update_ret(v12 + 1, (uint64_t)v8, 2uLL);
    if (!updated) {
      unsigned int updated = mbedtls_sha256_update_ret(v12 + 1, (uint64_t)v6, v7);
    }
  }
LABEL_8:
  mbedtls_platform_zeroize(v13, 0x20uLL);
  return updated;
}

uint64_t mbedtls_entropy_gather(_DWORD *a1)
{
  return entropy_gather_internal(a1);
}

uint64_t entropy_gather_internal(_DWORD *a1)
{
  unsigned int v6 = a1;
  unsigned int v5 = -60;
  int i = 0;
  int v3 = 0;
  unint64_t v2 = 0;
  if (a1[28])
  {
    for (int i = 0; i < v6[28]; ++i)
    {
      if (v6[10 * i + 38] == 1) {
        int v3 = 1;
      }
      unint64_t v2 = 0;
      unsigned int v5 = (*(uint64_t (**)(void, unsigned char *, uint64_t, unint64_t *))&v6[10 * i + 30])(*(void *)&v6[10 * i + 32], v8, 128, &v2);
      if (v5) {
        goto LABEL_15;
      }
      if (v2)
      {
        unsigned int v5 = entropy_update(v6, i, (uint64_t)v8, v2);
        if (v5) {
          return v5;
        }
        *(void *)&v6[10 * i + 34] += v2;
      }
    }
    if (!v3) {
      unsigned int v5 = -61;
    }
LABEL_15:
    mbedtls_platform_zeroize(v8, 0x80uLL);
    return v5;
  }
  else
  {
    return -64;
  }
}

uint64_t mbedtls_entropy_func(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  int v11 = 0;
  if (a3 <= 0x20)
  {
    do
    {
      int v3 = v11++;
      if (v3 > 256)
      {
        unsigned int updated = -60;
        goto LABEL_24;
      }
      unsigned int updated = entropy_gather_internal(a1);
      if (updated) {
        goto LABEL_24;
      }
      int v8 = 1;
      unint64_t v7 = 0;
      for (int i = 0; i < a1[28]; ++i)
      {
        if (*(void *)&a1[10 * i + 34] < *(void *)&a1[10 * i + 36]) {
          int v8 = 0;
        }
        if (a1[10 * i + 38] == 1) {
          v7 += *(void *)&a1[10 * i + 34];
        }
      }
      BOOL v5 = 1;
      if (v8) {
        BOOL v5 = v7 < 0x20;
      }
    }
    while (v5);
    memset(v14, 0, sizeof(v14));
    unsigned int updated = mbedtls_sha256_finish_ret((uint64_t)(a1 + 1), v14);
    if (!updated)
    {
      mbedtls_sha256_free(a1 + 1);
      mbedtls_sha256_init();
      unsigned int updated = mbedtls_sha256_starts_ret(a1 + 1, 0);
      if (!updated)
      {
        unsigned int updated = mbedtls_sha256_update_ret(a1 + 1, (uint64_t)v14, 0x20uLL);
        if (!updated)
        {
          unsigned int updated = mbedtls_sha256_ret((uint64_t)v14, 0x20uLL, v14, 0);
          if (!updated)
          {
            for (int j = 0; j < a1[28]; ++j)
              *(void *)&a1[10 * j + 34] = 0;
            __memcpy_chk();
            unsigned int updated = 0;
          }
        }
      }
    }
LABEL_24:
    mbedtls_platform_zeroize(v14, 0x20uLL);
    return updated;
  }
  else
  {
    return -60;
  }
}

uint64_t mbedtls_hmac_drbg_init(uint64_t a1)
{
  uint64_t result = __memset_chk();
  *(_DWORD *)(a1 + 76) = 10000;
  return result;
}

uint64_t mbedtls_hmac_drbg_update_ret(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v12 = a1;
  uint64_t v11 = a2;
  unint64_t v10 = a3;
  unint64_t size = 0;
  unint64_t size = mbedtls_md_get_size(*a1);
  unsigned __int8 v8 = 0;
  BOOL v5 = 0;
  if (v11) {
    BOOL v5 = v10 != 0;
  }
  if (v5) {
    char v3 = 2;
  }
  else {
    char v3 = 1;
  }
  unsigned __int8 v8 = v3;
  unsigned int v6 = -20736;
  for (unsigned __int8 i = 0; i < (int)v8; ++i)
  {
    unsigned int v6 = mbedtls_md_hmac_reset((uint64_t)v12);
    if (v6) {
      break;
    }
    unsigned int v6 = mbedtls_md_hmac_update((uint64_t)v12, (uint64_t)(v12 + 3), size);
    if (v6) {
      break;
    }
    unsigned int v6 = mbedtls_md_hmac_update((uint64_t)v12, (uint64_t)&i, 1uLL);
    if (v6) {
      break;
    }
    if (v8 == 2)
    {
      unsigned int v6 = mbedtls_md_hmac_update((uint64_t)v12, v11, v10);
      if (v6) {
        break;
      }
    }
    unsigned int v6 = mbedtls_md_hmac_finish(v12, v13);
    if (v6) {
      break;
    }
    unsigned int v6 = mbedtls_md_hmac_starts((uint64_t)v12, v13, size);
    if (v6) {
      break;
    }
    unsigned int v6 = mbedtls_md_hmac_update((uint64_t)v12, (uint64_t)(v12 + 3), size);
    if (v6) {
      break;
    }
    unsigned int v6 = mbedtls_md_hmac_finish(v12, (unsigned char *)v12 + 24);
    if (v6) {
      break;
    }
  }
  mbedtls_platform_zeroize(v13, 0x20uLL);
  return v6;
}

uint64_t mbedtls_hmac_drbg_update(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_hmac_drbg_update_ret(a1, a2, a3);
}

uint64_t mbedtls_hmac_drbg_seed_buf(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v6 = mbedtls_md_setup(a1, a2, 1);
  if (v6)
  {
    return v6;
  }
  else
  {
    unsigned __int8 size = mbedtls_md_get_size(a2);
    unsigned int v7 = mbedtls_md_hmac_starts(a1, (unsigned char *)(a1 + 24), size);
    if (v7)
    {
      return v7;
    }
    else
    {
      mbedtls_md_get_size(a2);
      __memset_chk();
      unsigned int updated = mbedtls_hmac_drbg_update_ret((uint64_t *)a1, a3, a4);
      if (updated) {
        return updated;
      }
      else {
        return 0;
      }
    }
  }
}

uint64_t mbedtls_hmac_drbg_reseed(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return hmac_drbg_reseed_core(a1, a2, a3, 0);
}

uint64_t hmac_drbg_reseed_core(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (a4) {
    unint64_t v5 = 3 * *(void *)(a1 + 64) / 2uLL;
  }
  else {
    unint64_t v5 = *(void *)(a1 + 64);
  }
  if (a3 <= 0x100 && v5 + a3 <= 0x180)
  {
    bzero(v13, 0x180uLL);
    if ((*(unsigned int (**)(void, unsigned char *, void))(a1 + 80))(*(void *)(a1 + 88), v13, *(void *)(a1 + 64)))
    {
      return -9;
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 64);
      if (a4)
      {
        if ((*(unsigned int (**)(void, unsigned char *, unint64_t))(a1 + 80))(*(void *)(a1 + 88), &v13[v7], *(void *)(a1 + 64) / 2uLL))
        {
          return -9;
        }
        v7 += *(void *)(a1 + 64) / 2uLL;
      }
      if (a2 && a3)
      {
        __memcpy_chk();
        v7 += a3;
      }
      unsigned int updated = mbedtls_hmac_drbg_update_ret((uint64_t *)a1, (uint64_t)v13, v7);
      if (!updated) {
        *(_DWORD *)(a1 + 56) = 1;
      }
      mbedtls_platform_zeroize(v13, v7);
      return updated;
    }
  }
  else
  {
    return -5;
  }
}

uint64_t mbedtls_hmac_drbg_seed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unsigned int v10 = mbedtls_md_setup(a1, a2, 1);
  if (v10)
  {
    return v10;
  }
  else
  {
    unint64_t size = mbedtls_md_get_size(a2);
    unsigned int v11 = mbedtls_md_hmac_starts(a1, (unsigned char *)(a1 + 24), size);
    if (v11)
    {
      return v11;
    }
    else
    {
      __memset_chk();
      *(void *)(a1 + 80) = a3;
      *(void *)(a1 + 88) = a4;
      if (!*(void *)(a1 + 64))
      {
        if (size > 0x14)
        {
          if (size > 0x1C) {
            int v6 = 32;
          }
          else {
            int v6 = 24;
          }
          int v8 = v6;
        }
        else
        {
          int v8 = 16;
        }
        *(void *)(a1 + 64) = v8;
      }
      unsigned int v12 = hmac_drbg_reseed_core(a1, a5, a6, 1);
      if (v12) {
        return v12;
      }
      else {
        return 0;
      }
    }
  }
}

uint64_t mbedtls_hmac_drbg_set_prediction_resistance(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t mbedtls_hmac_drbg_set_entropy_len(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t mbedtls_hmac_drbg_set_reseed_interval(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t mbedtls_hmac_drbg_random_with_add(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t size = mbedtls_md_get_size(*(void *)a1);
  unint64_t v8 = a3;
  uint64_t v7 = a2;
  if (a3 <= 0x400)
  {
    if (a5 <= 0x100)
    {
      if (*(void *)(a1 + 80) && (*(_DWORD *)(a1 + 72) == 1 || *(_DWORD *)(a1 + 56) > *(_DWORD *)(a1 + 76)))
      {
        unsigned int v11 = mbedtls_hmac_drbg_reseed(a1, a4, a5);
        if (v11) {
          return v11;
        }
        a5 = 0;
      }
      if (!a4 || !a5 || (unsigned int updated = mbedtls_hmac_drbg_update_ret((uint64_t *)a1, a4, a5)) == 0)
      {
        while (v8)
        {
          if (v8 <= size) {
            unint64_t v6 = v8;
          }
          else {
            unint64_t v6 = size;
          }
          unsigned int updated = mbedtls_md_hmac_reset(a1);
          if (updated) {
            return updated;
          }
          unsigned int updated = mbedtls_md_hmac_update(a1, a1 + 24, size);
          if (updated) {
            return updated;
          }
          unsigned int updated = mbedtls_md_hmac_finish((uint64_t *)a1, (unsigned char *)(a1 + 24));
          if (updated) {
            return updated;
          }
          __memcpy_chk();
          v7 += v6;
          v8 -= v6;
        }
        unsigned int updated = mbedtls_hmac_drbg_update_ret((uint64_t *)a1, a4, a5);
        if (!updated) {
          ++*(_DWORD *)(a1 + 56);
        }
      }
      return updated;
    }
    else
    {
      return -5;
    }
  }
  else
  {
    return -3;
  }
}

uint64_t mbedtls_hmac_drbg_random(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_hmac_drbg_random_with_add(a1, a2, a3, 0, 0);
}

void **mbedtls_hmac_drbg_free(void **result)
{
  uint64_t v1 = result;
  if (result)
  {
    mbedtls_md_free(result);
    uint64_t result = (void **)mbedtls_platform_zeroize(v1, 0x60uLL);
    *((_DWORD *)v1 + 19) = 10000;
  }
  return result;
}

void *mbedtls_md_list()
{
  return &supported_digests;
}

char **mbedtls_md_info_from_string(const char *a1)
{
  if (!a1) {
    return 0;
  }
  if (!strcmp("SHA224", a1)) {
    return mbedtls_md_info_from_type(5);
  }
  if (!strcmp("SHA256", a1)) {
    return mbedtls_md_info_from_type(6);
  }
  return 0;
}

char **mbedtls_md_info_from_type(int a1)
{
  if (a1 == 5) {
    return &mbedtls_sha224_info;
  }
  if (a1 == 6) {
    return &mbedtls_sha256_info;
  }
  return 0;
}

uint64_t mbedtls_md_init()
{
  return __memset_chk();
}

void **mbedtls_md_free(void **result)
{
  unint64_t v2 = result;
  if (result && *result)
  {
    if (result[1])
    {
      if (*((_DWORD *)*result + 2) == 6 || *((_DWORD *)*result + 2) == 5) {
        mbedtls_sha256_free(result[1]);
      }
      mbedtls_free();
    }
    if (v2[2])
    {
      mbedtls_platform_zeroize(v2[2], 2 * *((unsigned __int8 *)*v2 + 13));
      mbedtls_free();
    }
    return (void **)mbedtls_platform_zeroize(v2, 0x18uLL);
  }
  return result;
}

uint64_t mbedtls_md_clone(uint64_t a1, const void **a2)
{
  if (a1 && *(void *)a1 && a2 && *a2 && *(const void **)a1 == *a2)
  {
    if (*((_DWORD *)*a2 + 2) != 6 && *((_DWORD *)*a2 + 2) != 5)
    {
      return -20736;
    }
    else
    {
      mbedtls_sha256_clone(*(void **)(a1 + 8), a2[1]);
      return 0;
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_init_ctx(uint64_t a1, uint64_t a2)
{
  return mbedtls_md_setup(a1, a2, 1);
}

uint64_t mbedtls_md_setup(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 && a1)
  {
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (*(_DWORD *)(a2 + 8) != 6 && *(_DWORD *)(a2 + 8) != 5)
    {
      return -20736;
    }
    else
    {
      *(void *)(a1 + 8) = mbedtls_calloc();
      if (*(void *)(a1 + 8))
      {
        mbedtls_sha256_init();
        if (!a3 || (*(void *)(a1 + 16) = mbedtls_calloc()) != 0)
        {
          return 0;
        }
        else
        {
          mbedtls_md_free((void **)a1);
          return -20864;
        }
      }
      else
      {
        return -20864;
      }
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_starts(_DWORD **a1)
{
  if (a1 && *a1)
  {
    int v2 = (*a1)[2];
    if (v2 == 5)
    {
      return mbedtls_sha256_starts_ret(a1[1], 1);
    }
    else if (v2 == 6)
    {
      return mbedtls_sha256_starts_ret(a1[1], 0);
    }
    else
    {
      return -20736;
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_update(_DWORD **a1, uint64_t a2, unint64_t a3)
{
  if (a1 && *a1)
  {
    if ((*a1)[2] != 6 && (*a1)[2] != 5) {
      return -20736;
    }
    else {
      return mbedtls_sha256_update_ret(a1[1], a2, a3);
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_finish(uint64_t *a1, unsigned char *a2)
{
  if (a1 && *a1)
  {
    if (*(_DWORD *)(*a1 + 8) != 6 && *(_DWORD *)(*a1 + 8) != 5) {
      return -20736;
    }
    else {
      return mbedtls_sha256_finish_ret(a1[1], a2);
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (a1)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if (v5 == 5)
    {
      return mbedtls_sha256_ret(a2, a3, a4, 1);
    }
    else if (v5 == 6)
    {
      return mbedtls_sha256_ret(a2, a3, a4, 0);
    }
    else
    {
      return -20736;
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_hmac_starts(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  unint64_t v8 = a3;
  if (a1 && *(void *)a1 && *(void *)(a1 + 16))
  {
    if (a3 > *(unsigned __int8 *)(*(void *)a1 + 13))
    {
      unsigned int v7 = mbedtls_md_starts((_DWORD **)a1);
      if (v7
        || (unsigned int v7 = mbedtls_md_update((_DWORD **)a1, (uint64_t)a2, v8)) != 0
        || (unsigned int v7 = mbedtls_md_finish((uint64_t *)a1, v12)) != 0)
      {
LABEL_15:
        mbedtls_platform_zeroize(v12, 0x20uLL);
        return v7;
      }
      unint64_t v8 = *(unsigned __int8 *)(*(void *)a1 + 12);
      a2 = v12;
    }
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v5 = v6 + *(unsigned __int8 *)(*(void *)a1 + 13);
    __memset_chk();
    __memset_chk();
    for (unint64_t i = 0; i < v8; ++i)
    {
      *(unsigned char *)(v6 + i) ^= a2[i];
      *(unsigned char *)(v5 + i) ^= a2[i];
    }
    unsigned int v7 = mbedtls_md_starts((_DWORD **)a1);
    if (!v7) {
      unsigned int v7 = mbedtls_md_update((_DWORD **)a1, v6, *(unsigned __int8 *)(*(void *)a1 + 13));
    }
    goto LABEL_15;
  }
  return -20736;
}

uint64_t mbedtls_md_hmac_update(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 && *(void *)a1 && *(void *)(a1 + 16)) {
    return mbedtls_md_update((_DWORD **)a1, a2, a3);
  }
  else {
    return -20736;
  }
}

uint64_t mbedtls_md_hmac_finish(uint64_t *a1, unsigned char *a2)
{
  if (a1 && *a1 && a1[2])
  {
    uint64_t v3 = a1[2] + *(unsigned __int8 *)(*a1 + 13);
    unsigned int v4 = mbedtls_md_finish(a1, v11);
    if (v4)
    {
      return v4;
    }
    else
    {
      unsigned int v5 = mbedtls_md_starts((_DWORD **)a1);
      if (v5)
      {
        return v5;
      }
      else
      {
        unsigned int v6 = mbedtls_md_update((_DWORD **)a1, v3, *(unsigned __int8 *)(*a1 + 13));
        if (v6)
        {
          return v6;
        }
        else
        {
          unsigned int v7 = mbedtls_md_update((_DWORD **)a1, (uint64_t)v11, *(unsigned __int8 *)(*a1 + 12));
          if (v7) {
            return v7;
          }
          else {
            return mbedtls_md_finish(a1, a2);
          }
        }
      }
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_hmac_reset(uint64_t a1)
{
  if (a1 && *(void *)a1 && *(void *)(a1 + 16))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    unsigned int v3 = mbedtls_md_starts((_DWORD **)a1);
    if (v3) {
      return v3;
    }
    else {
      return mbedtls_md_update((_DWORD **)a1, v2, *(unsigned __int8 *)(*(void *)a1 + 13));
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_hmac(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4, unint64_t a5, unsigned char *a6)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  unint64_t v12 = a3;
  uint64_t v11 = a4;
  unint64_t v10 = a5;
  unint64_t v9 = a6;
  memset(v8, 0, sizeof(v8));
  if (a1)
  {
    mbedtls_md_init();
    unsigned int v7 = mbedtls_md_setup((uint64_t)v8, v14, 1);
    if (!v7)
    {
      unsigned int v7 = mbedtls_md_hmac_starts((uint64_t)v8, v13, v12);
      if (!v7)
      {
        unsigned int v7 = mbedtls_md_hmac_update((uint64_t)v8, v11, v10);
        if (!v7) {
          unsigned int v7 = mbedtls_md_hmac_finish((uint64_t *)v8, v9);
        }
      }
    }
    mbedtls_md_free(v8);
    return v7;
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_process(uint64_t *a1, uint64_t a2)
{
  if (a1 && *a1)
  {
    if (*(_DWORD *)(*a1 + 8) != 6 && *(_DWORD *)(*a1 + 8) != 5) {
      return -20736;
    }
    else {
      return mbedtls_internal_sha256_process(a1[1], a2);
    }
  }
  else
  {
    return -20736;
  }
}

uint64_t mbedtls_md_get_size(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 12);
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_md_get_type(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_md_get_name(uint64_t a1)
{
  if (a1) {
    return *(void *)a1;
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_ct_memcmp(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v4 = 0;
  for (unint64_t i = 0; i < a3; ++i)
    v4 |= *(unsigned char *)(a1 + i) ^ *(unsigned char *)(a2 + i);
  return v4;
}

uint64_t mbedtls_ct_uint_mask(int a1)
{
  return -((a1 | -a1) >> 31);
}

uint64_t mbedtls_ct_mpi_uint_mask(uint64_t a1)
{
  return -(uint64_t)((a1 | (unint64_t)-a1) >> 63);
}

BOOL mbedtls_ct_size_BOOL_eq(uint64_t a1, uint64_t a2)
{
  return (a1 ^ a2 | -(a1 ^ a2)) >= 0;
}

unint64_t mbedtls_ct_mpi_uint_lt(uint64_t a1, unint64_t a2)
{
  return ((a1 - a2) & ~(a1 ^ a2) | a2 & (a1 ^ a2)) >> 63;
}

uint64_t mbedtls_ct_uint_if (int a1, int a2, int a3)
{
  int v4 = mbedtls_ct_uint_mask(a1);
  return v4 & a2 | a3 & ~v4;
}

unint64_t mbedtls_ct_mpi_uint_cond_assign(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  for (unint64_t i = 0; i < result; ++i)
    *(void *)(a2 + 8 * i) = *(void *)(a3 + 8 * i) & -a4 | *(void *)(a2 + 8 * i) & ~(uint64_t)-a4;
  return result;
}

uint64_t mbedtls_ct_base64_enc_char(unsigned __int8 a1)
{
  char v2 = mbedtls_ct_uchar_mask_of_range(0, 0x19u, a1) & (a1 + 65);
  char v3 = v2 | mbedtls_ct_uchar_mask_of_range(0x1Au, 0x33u, a1) & (a1 + 71);
  char v4 = v3 | mbedtls_ct_uchar_mask_of_range(0x34u, 0x3Du, a1) & (a1 - 4);
  char v5 = v4 | mbedtls_ct_uchar_mask_of_range(0x3Eu, 0x3Eu, a1) & 0x2B;
  return (v5 | mbedtls_ct_uchar_mask_of_range(0x3Fu, 0x3Fu, a1) & 0x2F);
}

uint64_t mbedtls_ct_uchar_mask_of_range(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return ~(((unsigned __int16)(a3 - a1) >> 8) | ((unsigned __int16)(a2 - a3) >> 8));
}

uint64_t mbedtls_ct_base64_dec_value(unsigned __int8 a1)
{
  char v2 = mbedtls_ct_uchar_mask_of_range(0x41u, 0x5Au, a1) & (a1 - 64);
  char v3 = v2 | mbedtls_ct_uchar_mask_of_range(0x61u, 0x7Au, a1) & (a1 - 70);
  char v4 = v3 | mbedtls_ct_uchar_mask_of_range(0x30u, 0x39u, a1) & (a1 + 5);
  char v5 = v4 | mbedtls_ct_uchar_mask_of_range(0x2Bu, 0x2Bu, a1) & (a1 + 20);
  return (char)((v5 | mbedtls_ct_uchar_mask_of_range(0x2Fu, 0x2Fu, a1) & (a1 + 17)) - 1);
}

uint64_t mbedtls_mpi_safe_cond_assign(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v4 = mbedtls_ct_mpi_uint_mask(a3);
  unsigned int v6 = mbedtls_mpi_grow(a1, *(void *)(a2 + 8));
  if (!v6)
  {
    *(_DWORD *)a1 = mbedtls_ct_cond_select_sign(a3, *(_DWORD *)a2, *(_DWORD *)a1);
    mbedtls_ct_mpi_uint_cond_assign(*(void *)(a2 + 8), *(void *)(a1 + 16), *(void *)(a2 + 16), a3);
    for (unint64_t i = *(void *)(a2 + 8); i < *(void *)(a1 + 8); ++i)
      *(void *)(*(void *)(a1 + 16) + 8 * i) &= ~v4;
  }
  return v6;
}

uint64_t mbedtls_ct_cond_select_sign(unsigned __int8 a1, int a2, int a3)
{
  return ((a3 + 1) & ~(2 * a1) | (a2 + 1) & (2 * a1)) - 1;
}

uint64_t mbedtls_mpi_safe_cond_swap(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a1 == a2)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = mbedtls_ct_mpi_uint_mask(a3);
    unsigned int v8 = mbedtls_mpi_grow(a1, *(void *)(a2 + 8));
    if (!v8)
    {
      unsigned int v8 = mbedtls_mpi_grow(a2, *(void *)(a1 + 8));
      if (!v8)
      {
        int v7 = *(_DWORD *)a1;
        *(_DWORD *)a1 = mbedtls_ct_cond_select_sign(a3, *(_DWORD *)a2, *(_DWORD *)a1);
        *(_DWORD *)a2 = mbedtls_ct_cond_select_sign(a3, v7, *(_DWORD *)a2);
        for (unint64_t i = 0; i < *(void *)(a1 + 8); ++i)
        {
          uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * i);
          *(void *)(*(void *)(a1 + 16) + 8 * i) = v4 & ~v5 | *(void *)(*(void *)(a2 + 16) + 8 * i) & v5;
          *(void *)(*(void *)(a2 + 16) + 8 * i) = *(void *)(*(void *)(a2 + 16) + 8 * i) & ~v5 | v4 & v5;
        }
      }
    }
    return v8;
  }
}

uint64_t mbedtls_mpi_lt_mpi_ct(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    int v6 = (*(_DWORD *)a1 & 2) >> 1;
    int v5 = (*(_DWORD *)a2 & 2) >> 1;
    *a3 = (v6 ^ v5) & v6;
    int v7 = v6 ^ v5;
    for (uint64_t i = *(void *)(a1 + 8); i; --i)
    {
      int v3 = mbedtls_ct_mpi_uint_lt(*(void *)(*(void *)(a2 + 16) + 8 * (i - 1)), *(void *)(*(void *)(a1 + 16) + 8 * (i - 1)));
      *a3 |= v3 & (1 - v7) & v6;
      int v8 = v7 | v3;
      int v9 = mbedtls_ct_mpi_uint_lt(*(void *)(*(void *)(a1 + 16) + 8 * (i - 1)), *(void *)(*(void *)(a2 + 16) + 8 * (i - 1)));
      *a3 |= v9 & (1 - v8) & (1 - v6);
      int v7 = v8 | v9;
    }
    return 0;
  }
  else
  {
    return -4;
  }
}

uint64_t mbedtls_calloc()
{
  return mbedtls_calloc_func[0]();
}

void mbedtls_free()
{
}

uint64_t mbedtls_platform_set_calloc_free(uint64_t (*a1)(), uint64_t (*a2)())
{
  mbedtls_calloc_func[0] = a1;
  mbedtls_free_func = a2;
  return 0;
}

uint64_t mbedtls_platform_setup()
{
  return 0;
}

uint64_t platform_calloc_uninit()
{
  return 0;
}

void *mbedtls_platform_zeroize(void *result, size_t a2)
{
  if (a2) {
    return _memset(result, 0, a2);
  }
  return result;
}

uint64_t mbedtls_sha256_init()
{
  return __memset_chk();
}

void *mbedtls_sha256_free(void *result)
{
  if (result) {
    return mbedtls_platform_zeroize(result, 0x6CuLL);
  }
  return result;
}

void *mbedtls_sha256_clone(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x6CuLL);
}

uint64_t mbedtls_sha256_starts_ret(_DWORD *a1, int a2)
{
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    a1[2] = -1056596264;
    a1[3] = 914150663;
    a1[4] = 812702999;
    a1[5] = -150054599;
    a1[6] = -4191439;
    a1[7] = 1750603025;
    a1[8] = 1694076839;
    a1[9] = -1090891868;
  }
  else
  {
    a1[2] = 1779033703;
    a1[3] = -1150833019;
    a1[4] = 1013904242;
    a1[5] = -1521486534;
    a1[6] = 1359893119;
    a1[7] = -1694144372;
    a1[8] = 528734635;
    a1[9] = 1541459225;
  }
  a1[26] = a2;
  return 0;
}

uint64_t mbedtls_sha256_starts(_DWORD *a1, int a2)
{
  return mbedtls_sha256_starts_ret(a1, a2);
}

uint64_t mbedtls_internal_sha256_process(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v17 = a2;
  bzero(&v6, 0x128uLL);
  for (unsigned int i = 0; i < 8; ++i)
    *(&v9 + i) = *(_DWORD *)(v18 + 8 + 4 * i);
  for (unsigned int j = 0; j < 0x40; ++j)
  {
    if (j >= 0x10) {
      v8[j] = (((v8[j - 2] << 15) | (v8[j - 2] >> 17)) ^ ((v8[j - 2] << 13) | (v8[j - 2] >> 19)) ^ (v8[j - 2] >> 10))
    }
            + v8[j - 7]
            + (((v8[j - 15] << 25) | (v8[j - 15] >> 7)) ^ ((v8[j - 15] << 14) | (v8[j - 15] >> 18)) ^ (v8[j - 15] >> 3))
            + v8[j - 16];
    else {
      v8[j] = (*(unsigned __int8 *)(v17 + 4 * j + 1) << 16) | (*(unsigned __int8 *)(v17 + 4 * j) << 24) | (*(unsigned __int8 *)(v17 + 4 * j + 2) << 8) | *(unsigned __int8 *)(v17 + 4 * j + 3);
    }
    int v6 = v16
       + (((v13 << 26) | (v13 >> 6)) ^ ((v13 << 21) | (v13 >> 11)) ^ ((v13 << 7) | (v13 >> 25)))
       + (v15 ^ v13 & (v14 ^ v15))
       + K[j]
       + v8[j];
    int v7 = (((v9 << 30) | (v9 >> 2)) ^ ((v9 << 19) | (v9 >> 13)) ^ ((v9 << 10) | (v9 >> 22)))
       + (v9 & v10 | v11 & (v9 | v10));
    v12 += v6;
    v6 += v7;
    int v16 = v15;
    unsigned int v15 = v14;
    unsigned int v14 = v13;
    unsigned int v13 = v12;
    unsigned int v12 = v11;
    unsigned int v11 = v10;
    unsigned int v10 = v9;
    unsigned int v9 = v6;
  }
  for (unsigned int k = 0; k < 8; ++k)
    *(_DWORD *)(v18 + 8 + 4 * k) += *(&v9 + k);
  mbedtls_platform_zeroize(&v6, 0x128uLL);
  return 0;
}

uint64_t mbedtls_sha256_process(uint64_t a1, uint64_t a2)
{
  return mbedtls_internal_sha256_process(a1, a2);
}

uint64_t mbedtls_sha256_update_ret(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v8 = a3;
  if (a3)
  {
    int v4 = *a1 & 0x3F;
    unint64_t v5 = (64 - v4);
    *a1 += a3;
    *a1 = *a1;
    if (*a1 < a3) {
      ++a1[1];
    }
    if (v4 && a3 >= v5)
    {
      __memcpy_chk();
      unsigned int v6 = mbedtls_internal_sha256_process((uint64_t)a1, (uint64_t)(a1 + 10));
      if (!v6)
      {
        a2 += v5;
        v8 -= v5;
        goto LABEL_10;
      }
      return v6;
    }
    else
    {
LABEL_10:
      while (v8 >= 0x40)
      {
        unsigned int v7 = mbedtls_internal_sha256_process((uint64_t)a1, a2);
        if (v7) {
          return v7;
        }
        a2 += 64;
        v8 -= 64;
      }
      if (v8) {
        __memcpy_chk();
      }
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_sha256_update(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  return mbedtls_sha256_update_ret(a1, a2, a3);
}

uint64_t mbedtls_sha256_finish_ret(uint64_t a1, unsigned char *a2)
{
  unsigned int v4 = *(_DWORD *)a1 & 0x3F;
  *(unsigned char *)(a1 + 40 + v4) = 0x80;
  if (v4 + 1 > 0x38 && (__memset_chk(), (unsigned int v5 = mbedtls_internal_sha256_process(a1, a1 + 40)) != 0))
  {
    return v5;
  }
  else
  {
    __memset_chk();
    uint64_t v3 = 8 * *(void *)a1;
    *(unsigned char *)(a1 + 96) = HIBYTE(v3);
    *(unsigned char *)(a1 + 97) = BYTE6(v3);
    *(unsigned char *)(a1 + 98) = BYTE5(v3);
    *(unsigned char *)(a1 + 99) = BYTE4(v3);
    *(unsigned char *)(a1 + 100) = BYTE3(v3);
    *(unsigned char *)(a1 + 101) = BYTE2(v3);
    *(unsigned char *)(a1 + 102) = BYTE1(v3);
    *(unsigned char *)(a1 + 103) = v3;
    unsigned int v6 = mbedtls_internal_sha256_process(a1, a1 + 40);
    if (v6)
    {
      return v6;
    }
    else
    {
      *a2 = HIBYTE(*(_DWORD *)(a1 + 8));
      a2[1] = BYTE2(*(_DWORD *)(a1 + 8));
      a2[2] = BYTE1(*(_DWORD *)(a1 + 8));
      a2[3] = *(unsigned char *)(a1 + 8);
      a2[4] = HIBYTE(*(_DWORD *)(a1 + 12));
      a2[5] = BYTE2(*(_DWORD *)(a1 + 12));
      a2[6] = BYTE1(*(_DWORD *)(a1 + 12));
      a2[7] = *(unsigned char *)(a1 + 12);
      a2[8] = HIBYTE(*(_DWORD *)(a1 + 16));
      a2[9] = BYTE2(*(_DWORD *)(a1 + 16));
      a2[10] = BYTE1(*(_DWORD *)(a1 + 16));
      a2[11] = *(unsigned char *)(a1 + 16);
      a2[12] = HIBYTE(*(_DWORD *)(a1 + 20));
      a2[13] = BYTE2(*(_DWORD *)(a1 + 20));
      a2[14] = BYTE1(*(_DWORD *)(a1 + 20));
      a2[15] = *(unsigned char *)(a1 + 20);
      a2[16] = HIBYTE(*(_DWORD *)(a1 + 24));
      a2[17] = BYTE2(*(_DWORD *)(a1 + 24));
      a2[18] = BYTE1(*(_DWORD *)(a1 + 24));
      a2[19] = *(unsigned char *)(a1 + 24);
      a2[20] = HIBYTE(*(_DWORD *)(a1 + 28));
      a2[21] = BYTE2(*(_DWORD *)(a1 + 28));
      a2[22] = BYTE1(*(_DWORD *)(a1 + 28));
      a2[23] = *(unsigned char *)(a1 + 28);
      a2[24] = HIBYTE(*(_DWORD *)(a1 + 32));
      a2[25] = BYTE2(*(_DWORD *)(a1 + 32));
      a2[26] = BYTE1(*(_DWORD *)(a1 + 32));
      a2[27] = *(unsigned char *)(a1 + 32);
      if (!*(_DWORD *)(a1 + 104))
      {
        a2[28] = HIBYTE(*(_DWORD *)(a1 + 36));
        a2[29] = BYTE2(*(_DWORD *)(a1 + 36));
        a2[30] = BYTE1(*(_DWORD *)(a1 + 36));
        a2[31] = *(unsigned char *)(a1 + 36);
      }
      return 0;
    }
  }
}

uint64_t mbedtls_sha256_finish(uint64_t a1, unsigned char *a2)
{
  return mbedtls_sha256_finish_ret(a1, a2);
}

uint64_t mbedtls_sha256_ret(uint64_t a1, unint64_t a2, unsigned char *a3, int a4)
{
  memset(__b, 0, sizeof(__b));
  mbedtls_sha256_init();
  unsigned int updated = mbedtls_sha256_starts_ret(__b, a4);
  if (!updated)
  {
    unsigned int updated = mbedtls_sha256_update_ret(__b, a1, a2);
    if (!updated) {
      unsigned int updated = mbedtls_sha256_finish_ret((uint64_t)__b, a3);
    }
  }
  mbedtls_sha256_free(__b);
  return updated;
}

uint64_t mbedtls_sha256(uint64_t a1, unint64_t a2, unsigned char *a3, int a4)
{
  return mbedtls_sha256_ret(a1, a2, a3, a4);
}

void *mbedtls_ssl_list_ciphersuites()
{
  return &ciphersuite_preference;
}

const char **mbedtls_ssl_ciphersuite_from_string(const char *a1)
{
  char v2 = (const char **)&ciphersuite_definitions;
  if (!a1) {
    return 0;
  }
  while (*(_DWORD *)v2)
  {
    if (!strcmp(v2[1], a1)) {
      return v2;
    }
    v2 += 6;
  }
  return 0;
}

_DWORD *mbedtls_ssl_ciphersuite_from_id(int a1)
{
  for (unsigned int i = &ciphersuite_definitions; *i; i += 12)
  {
    if (*i == a1) {
      return i;
    }
  }
  return 0;
}

const char *mbedtls_ssl_get_ciphersuite_name(int a1)
{
  char v2 = mbedtls_ssl_ciphersuite_from_id(a1);
  if (v2) {
    return (const char *)*((void *)v2 + 1);
  }
  else {
    return "unknown";
  }
}

uint64_t mbedtls_ssl_get_ciphersuite_id(const char *a1)
{
  char v2 = mbedtls_ssl_ciphersuite_from_string(a1);
  if (v2) {
    return *(unsigned int *)v2;
  }
  else {
    return 0;
  }
}

uint64_t mbedtls_ssl_get_ciphersuite_sig_pk_alg(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((v3 - 1) <= 2) {
    return 1;
  }
  if (v3 == 4) {
    return 4;
  }
  if (v3 == 7)
  {
    return 1;
  }
  else if (v3 == 10 || v3 == 9)
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ssl_get_ciphersuite_sig_alg(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 - 1) <= 2)
  {
    return 1;
  }
  else if (v2 == 4)
  {
    return 4;
  }
  else
  {
    return 0;
  }
}

BOOL mbedtls_ssl_ciphersuite_uses_ec(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 24);
  BOOL v1 = v3 == 4 || v3 == 3;
  return v1 || (v3 - 8) <= 3;
}

uint64_t mbedtls_ssl_handshake_client_step(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 16 && *(void *)(a1 + 88))
  {
    unsigned int v5 = mbedtls_ssl_flush_output(a1);
    if (v5)
    {
      return v5;
    }
    else if (*(unsigned char *)(*(void *)a1 + 5) == 1 {
           && *(unsigned char *)(*(void *)(a1 + 88) + 4) == 1
    }
           && (unsigned int v5 = mbedtls_ssl_flight_transmit(a1)) != 0)
    {
      return v5;
    }
    else
    {
      unsigned int v1 = *(_DWORD *)(a1 + 8);
      if (v1)
      {
        uint64_t v3 = v1;
        char v2 = 1;
      }
      else
      {
        uint64_t v3 = *(unsigned int *)(a1 + 8);
        char v2 = 0;
      }
      if (v2)
      {
        return -28928;
      }
      else
      {
        switch(v3)
        {
          case 0:
            *(_DWORD *)(a1 + 8) = 1;
            break;
          case 1:
            unsigned int v5 = ssl_write_client_hello((void *)a1);
            break;
          case 2:
            unsigned int v5 = ssl_parse_server_hello((unsigned __int8 **)a1);
            break;
          case 3:
            unsigned int v5 = mbedtls_ssl_parse_certificate(a1);
            break;
          case 4:
            unsigned int v5 = ssl_parse_server_key_exchange(a1);
            break;
          case 5:
            unsigned int v5 = ssl_parse_certificate_request(a1);
            break;
          case 6:
            unsigned int v5 = ssl_parse_server_hello_done(a1);
            break;
          case 7:
            unsigned int v5 = mbedtls_ssl_write_certificate(a1);
            break;
          case 8:
            unsigned int v5 = ssl_write_client_key_exchange(a1);
            break;
          case 9:
            unsigned int v5 = ssl_write_certificate_verify(a1);
            break;
          case 10:
            unsigned int v5 = mbedtls_ssl_write_change_cipher_spec(a1);
            break;
          case 11:
            unsigned int v5 = mbedtls_ssl_write_finished(a1);
            break;
          case 12:
            unsigned int v5 = mbedtls_ssl_parse_change_cipher_spec(a1);
            break;
          case 13:
            unsigned int v5 = mbedtls_ssl_parse_finished(a1);
            break;
          case 14:
            *(_DWORD *)(a1 + 8) = 15;
            break;
          case 15:
            mbedtls_ssl_handshake_wrapup((void *)a1);
            break;
          default:
            JUMPOUT(0);
        }
        return v5;
      }
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t ssl_write_client_hello(void *a1)
{
  uint64_t v25 = a1;
  randounint64_t m = -110;
  unint64_t i = 0;
  unint64_t v22 = 0;
  uint64_t v21 = 0;
  uint64_t v17 = 0;
  int v6 = 0;
  if (*(void *)(*a1 + 72))
  {
    *((_DWORD *)v25 + 3) = *(unsigned __int8 *)(*v25 + 2);
    *((_DWORD *)v25 + 4) = *(unsigned __int8 *)(*v25 + 3);
    if (*(unsigned char *)*v25)
    {
      unint64_t v16 = v25[41];
      unint64_t v9 = v16 + 768;
      if (mbedtls_ssl_chk_buf_ptr(v16, v16 + 768, 0x47uLL))
      {
        return -27136;
      }
      else
      {
        mbedtls_ssl_write_version(*(unsigned __int8 *)*v25, *(unsigned __int8 *)(*v25 + 1), *(unsigned __int8 *)(*v25 + 5), (unsigned char *)(v16 + 4));
        randounint64_t m = ssl_generate_random(v25);
        if (random)
        {
          return random;
        }
        else
        {
          __memcpy_chk();
          unint64_t v22 = *(void *)(v25[10] + 16);
          if (v22 < 0x10 || v22 > 0x20 || !*(unsigned char *)(v25[11] + 2)) {
            unint64_t v22 = 0;
          }
          unint64_t v11 = v16 + 39;
          *(unsigned char *)(v16 + 38) = v22;
          for (unint64_t i = 0; i < v22; ++i)
          {
            unsigned int v1 = (unsigned char *)v11++;
            unsigned char *v1 = *(unsigned char *)(v25[10] + 24 + i);
          }
          if (*(unsigned char *)(*v25 + 5) == 1)
          {
            if (mbedtls_ssl_chk_buf_ptr(v11, v9, 1uLL)) {
              return -27136;
            }
            if (*(void *)(v25[11] + 920))
            {
              uint64_t v3 = (unsigned char *)v11;
              unint64_t v12 = v11 + 1;
              *uint64_t v3 = *(unsigned char *)(v25[11] + 928);
              if (mbedtls_ssl_chk_buf_ptr(v12, v9, *(unsigned __int8 *)(v25[11] + 928))) {
                return -27136;
              }
              __memcpy_chk();
              unint64_t v11 = v12 + *(unsigned __int8 *)(v25[11] + 928);
            }
            else
            {
              char v2 = (unsigned char *)v11++;
              *char v2 = 0;
            }
          }
          uint64_t v8 = *(void *)(*v25 + 24 + 8 * *((int *)v25 + 4));
          unint64_t v22 = 0;
          unsigned int v10 = (unsigned char *)v11;
          if (mbedtls_ssl_chk_buf_ptr(v11, v9, 2uLL))
          {
            return -27136;
          }
          else
          {
            unsigned int v13 = (unsigned char *)(v11 + 2);
            for (unint64_t i = 0; *(_DWORD *)(v8 + 4 * i); ++i)
            {
              unsigned int v7 = mbedtls_ssl_ciphersuite_from_id(*(_DWORD *)(v8 + 4 * i));
              if (!ssl_validate_ciphersuite((uint64_t)v7, v25, *(unsigned __int8 *)(*v25 + 3), *(unsigned __int8 *)(*v25 + 1)))
              {
                v6 |= mbedtls_ssl_ciphersuite_uses_ec((uint64_t)v7);
                if (mbedtls_ssl_chk_buf_ptr((unint64_t)v13, v9, 2uLL)) {
                  return -27136;
                }
                ++v22;
                unsigned char *v13 = BYTE1(*(_DWORD *)(v8 + 4 * i));
                v13[1] = *(unsigned char *)(v8 + 4 * i);
                v13 += 2;
              }
            }
            if (mbedtls_ssl_chk_buf_ptr((unint64_t)v13, v9, 2uLL))
            {
              return -27136;
            }
            else
            {
              unsigned char *v13 = 0;
              v13[1] = -1;
              unsigned int v14 = v13 + 2;
              unsigned char *v10 = ++v22 >> 7;
              v10[1] = 2 * v22;
              if (mbedtls_ssl_chk_buf_ptr((unint64_t)v14, v9, 2uLL))
              {
                return -27136;
              }
              else
              {
                unsigned char *v14 = 1;
                unsigned int v4 = v14 + 1;
                unsigned int v15 = v14 + 2;
                unsigned char *v4 = 0;
                if (mbedtls_ssl_chk_buf_ptr((unint64_t)v15, v9, 2uLL))
                {
                  return -27136;
                }
                else
                {
                  if (v6)
                  {
                    randounint64_t m = ssl_write_supported_elliptic_curves_ext((uint64_t)v25, v15 + 2, v9, &v21);
                    if (random) {
                      return random;
                    }
                    uint64_t v18 = v21;
                    randounint64_t m = ssl_write_supported_point_formats_ext((uint64_t)v25, &v15[v21 + 2], v9, &v21);
                    if (random) {
                      return random;
                    }
                    uint64_t v17 = v18 + v21;
                  }
                  randounint64_t m = ssl_write_ecjpake_kkpp_ext(v25, &v15[v17 + 2], v9, &v21);
                  if (random)
                  {
                    return random;
                  }
                  else
                  {
                    uint64_t v19 = v17 + v21;
                    randounint64_t m = ssl_write_max_fragment_length_ext((uint64_t)v25, &v15[v19 + 2], v9, &v21);
                    if (random)
                    {
                      return random;
                    }
                    else
                    {
                      uint64_t v20 = v19 + v21;
                      if (v20)
                      {
                        unsigned char *v15 = BYTE1(v20);
                        v15[1] = v20;
                        v15 += v20 + 2;
                      }
                      v25[43] = &v15[-v16];
                      *((_DWORD *)v25 + 84) = 22;
                      *(unsigned char *)v25[41] = 1;
                      ++*((_DWORD *)v25 + 2);
                      if (*(unsigned char *)(*v25 + 5) == 1) {
                        mbedtls_ssl_send_flight_completed((uint64_t)v25);
                      }
                      randounint64_t m = mbedtls_ssl_write_handshake_msg((uint64_t)v25);
                      if (random)
                      {
                        return random;
                      }
                      else if (*(unsigned char *)(*v25 + 5) == 1 && (randounint64_t m = mbedtls_ssl_flight_transmit((uint64_t)v25)) != 0)
                      {
                        return random;
                      }
                      else
                      {
                        return 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return -28928;
    }
  }
  else
  {
    return -29696;
  }
}

uint64_t ssl_parse_server_hello(unsigned __int8 **a1)
{
  int v11 = 0;
  unsigned int record = mbedtls_ssl_read_record((uint64_t)a1, 1);
  if (record) {
    return record;
  }
  unsigned int v13 = a1[24];
  if (*((_DWORD *)a1 + 52) != 22)
  {
    mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 10);
    return -30464;
  }
  if ((*a1)[5] == 1)
  {
    if (*v13 == 3) {
      return ssl_parse_hello_verify_request(a1);
    }
    mbedtls_free();
    *((void *)a1[11] + 115) = 0;
    a1[11][928] = 0;
  }
  unint64_t v7 = (unint64_t)a1[33];
  if (v7 < mbedtls_ssl_hs_hdr_len((uint64_t)a1) + 38 || *v13 != 2) {
    goto LABEL_50;
  }
  unsigned int v14 = &v13[mbedtls_ssl_hs_hdr_len((uint64_t)a1)];
  mbedtls_ssl_read_version((_DWORD *)a1 + 3, (_DWORD *)a1 + 4, (*a1)[5], v14);
  if (*((_DWORD *)a1 + 3) < (int)(*a1)[2]
    || *((_DWORD *)a1 + 4) < (int)(*a1)[3]
    || *((_DWORD *)a1 + 3) > (int)**a1
    || *((_DWORD *)a1 + 4) > (int)(*a1)[1])
  {
    mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 70);
    return -28288;
  }
  __memcpy_chk();
  size_t v16 = v14[34];
  if (v16 > 0x20) {
    goto LABEL_50;
  }
  unint64_t v6 = (unint64_t)a1[33];
  if (v6 <= mbedtls_ssl_hs_hdr_len((uint64_t)a1) + 39 + v16)
  {
    unsigned int v4 = a1[33];
    if (v4 == (unsigned __int8 *)(mbedtls_ssl_hs_hdr_len((uint64_t)a1) + 38 + v16))
    {
      unint64_t v15 = 0;
      goto LABEL_27;
    }
LABEL_50:
    mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 50);
    return -31104;
  }
  unint64_t v15 = v14[v16 + 39] | (v14[v16 + 38] << 8);
  if (v14[v16 + 39] | (v14[v16 + 38] << 8) && v15 < 4) {
    goto LABEL_50;
  }
  unsigned int v5 = a1[33];
  if (v5 != (unsigned __int8 *)(mbedtls_ssl_hs_hdr_len((uint64_t)a1) + 40 + v16 + v15)) {
    goto LABEL_50;
  }
LABEL_27:
  int v17 = v14[v16 + 36] | (v14[v16 + 35] << 8);
  if (v14[v16 + 37])
  {
    mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 47);
    return -28800;
  }
  else
  {
    *((void *)a1[11] + 2) = mbedtls_ssl_ciphersuite_from_id(v17);
    if (*((void *)a1[11] + 2))
    {
      mbedtls_ssl_optimize_checksum((uint64_t)a1, *((void *)a1[11] + 2));
      if (a1[11][2]
        && v16
        && *((_DWORD *)a1[10] + 1) == v17
        && !*((_DWORD *)a1[10] + 2)
        && *((void *)a1[10] + 2) == v16
        && !memcmp(a1[10] + 24, v14 + 35, v16))
      {
        *((_DWORD *)a1 + 2) = 12;
        unsigned int v20 = mbedtls_ssl_derive_keys((uint64_t)a1);
        if (v20)
        {
          mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 80);
          return v20;
        }
      }
      else
      {
        ++*((_DWORD *)a1 + 2);
        a1[11][2] = 0;
        *((_DWORD *)a1[10] + 1) = v17;
        *((_DWORD *)a1[10] + 2) = 0;
        *((void *)a1[10] + 2) = v16;
        __memcpy_chk();
      }
      int v18 = 0;
      do
      {
        if (!*(_DWORD *)(*(void *)&(*a1)[8 * *((int *)a1 + 4) + 24] + 4 * v18)) {
          goto LABEL_42;
        }
        uint64_t v1 = v18++;
      }
      while (*(_DWORD *)(*(void *)&(*a1)[8 * *((int *)a1 + 4) + 24] + 4 * v1) != *((_DWORD *)a1[10] + 1));
      unsigned int v10 = mbedtls_ssl_ciphersuite_from_id(*((_DWORD *)a1[10] + 1));
      if (ssl_validate_ciphersuite((uint64_t)v10, a1, *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 4)))
      {
LABEL_42:
        mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 47);
        return -31104;
      }
      *((_DWORD *)a1[10] + 2) = 0;
      unint64_t v12 = &v14[v16 + 40];
      while (v15)
      {
        int v9 = v12[1] | (*v12 << 8);
        unsigned int v8 = v12[3] | (v12[2] << 8);
        if (v8 + 4 > v15) {
          goto LABEL_50;
        }
        switch(v9)
        {
          case 1:
            unsigned int v22 = ssl_parse_max_fragment_length_ext((uint64_t)a1, v12 + 4, v8);
            if (v22) {
              return v22;
            }
            break;
          case 11:
            unsigned int v23 = ssl_parse_supported_point_formats_ext((uint64_t)a1, v12 + 4, v8);
            if (v23) {
              return v23;
            }
            break;
          case 256:
            unsigned int v24 = ssl_parse_ecjpake_kkpp((uint64_t)a1, (uint64_t)(v12 + 4), v8);
            if (v24) {
              return v24;
            }
            break;
          case 65281:
            unsigned int v21 = ssl_parse_renegotiation_info((uint64_t)a1, v12 + 4, v8);
            if (v21) {
              return v21;
            }
            break;
        }
        v15 -= v8 + 4;
        v12 += v8 + 4;
        if (v15 && v15 < 4) {
          return -31104;
        }
      }
      if (!*((_DWORD *)a1 + 98) && (*a1)[7] == 2) {
        int v11 = 1;
      }
      if (v11 == 1)
      {
        mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 40);
        return -31104;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      mbedtls_ssl_send_alert_message((uint64_t)a1, 2, 80);
      return -28928;
    }
  }
}

uint64_t ssl_parse_server_key_exchange(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 16);
  unsigned int record = mbedtls_ssl_read_record(a1, 1);
  if (!record)
  {
    if (*(_DWORD *)(a1 + 208) != 22)
    {
LABEL_4:
      mbedtls_ssl_send_alert_message(a1, 2, 10);
      return -30464;
    }
    if (**(unsigned char **)(a1 + 192) == 12)
    {
      uint64_t v2 = *(void *)(a1 + 192);
      uint64_t v3 = v2 + mbedtls_ssl_hs_hdr_len(a1);
      if (*(_DWORD *)(v4 + 24) != 11) {
        return -27648;
      }
      if (mbedtls_ecjpake_read_round_two(*(void *)(a1 + 88) + 56, v3, *(void *)(a1 + 192) + *(void *)(a1 + 264) - v3))
      {
        mbedtls_ssl_send_alert_message(a1, 2, 47);
        return -31488;
      }
    }
    else
    {
      if (*(_DWORD *)(v4 + 24) != 5 && *(_DWORD *)(v4 + 24) != 7) {
        goto LABEL_4;
      }
      *(_DWORD *)(a1 + 276) = 1;
    }
    ++*(_DWORD *)(a1 + 8);
    return 0;
  }
  return record;
}

uint64_t ssl_parse_certificate_request(uint64_t a1)
{
  if (mbedtls_ssl_ciphersuite_cert_req_allowed(*(void *)(*(void *)(a1 + 88) + 16)))
  {
    return -27648;
  }
  else
  {
    ++*(_DWORD *)(a1 + 8);
    return 0;
  }
}

uint64_t ssl_parse_server_hello_done(uint64_t a1)
{
  unsigned int record = mbedtls_ssl_read_record(a1, 1);
  if (record)
  {
    return record;
  }
  else if (*(_DWORD *)(a1 + 208) == 22)
  {
    uint64_t v2 = *(void *)(a1 + 264);
    if (v2 == mbedtls_ssl_hs_hdr_len(a1) && **(unsigned char **)(a1 + 192) == 14)
    {
      ++*(_DWORD *)(a1 + 8);
      if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
        mbedtls_ssl_recv_flight_completed(a1);
      }
      return 0;
    }
    else
    {
      mbedtls_ssl_send_alert_message(a1, 2, 50);
      return -31616;
    }
  }
  else
  {
    return -30464;
  }
}

uint64_t ssl_write_client_key_exchange(uint64_t a1)
{
  uint64_t v5 = a1;
  unsigned int v4 = -110;
  uint64_t v3 = 0;
  uint64_t v2 = 0;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 16) + 24) == 11)
  {
    uint64_t v3 = 4;
    unsigned int v4 = mbedtls_ecjpake_write_round_two(*(void *)(v5 + 88) + 56, (unsigned char *)(*(void *)(v5 + 328) + 4), 764, &v2, *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 72), *(void ***)(*(void *)v5 + 80));
    if (v4)
    {
      return v4;
    }
    else
    {
      unsigned int v4 = mbedtls_ecjpake_derive_secret(*(void *)(v5 + 88) + 56, (unsigned char *)(*(void *)(v5 + 88) + 1160), 0x20uLL, (unint64_t *)(*(void *)(v5 + 88) + 8), *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 72), *(void ***)(*(void *)v5 + 80));
      if (v4)
      {
        return v4;
      }
      else
      {
        *(void *)(v5 + 344) = v3 + v2;
        *(_DWORD *)(v5 + 336) = 22;
        **(unsigned char **)(v5 + 328) = 16;
        ++*(_DWORD *)(v5 + 8);
        unsigned int v4 = mbedtls_ssl_write_handshake_msg(v5);
        if (v4) {
          return v4;
        }
        else {
          return 0;
        }
      }
    }
  }
  else
  {
    return -27648;
  }
}

uint64_t ssl_write_certificate_verify(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 16);
  unsigned int v2 = mbedtls_ssl_derive_keys(a1);
  if (v2)
  {
    return v2;
  }
  else if (mbedtls_ssl_ciphersuite_cert_req_allowed(v3))
  {
    return -27648;
  }
  else
  {
    ++*(_DWORD *)(a1 + 8);
    return 0;
  }
}

BOOL mbedtls_ssl_chk_buf_ptr(unint64_t a1, unint64_t a2, unint64_t a3)
{
  BOOL v4 = 1;
  if (a1 <= a2) {
    return a3 > a2 - a1;
  }
  return v4;
}

uint64_t ssl_generate_random(void *a1)
{
  uint64_t v2 = a1[11] + 1096;
  if (*(unsigned char *)(*a1 + 5) == 1 && *(void *)(a1[11] + 920))
  {
    return 0;
  }
  else
  {
    unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*a1 + 72))(*(void *)(*a1 + 80), v2, 4);
    if (v3)
    {
      return v3;
    }
    else
    {
      unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*a1 + 72))(*(void *)(*a1 + 80), v2 + 4, 28);
      if (v4) {
        return v4;
      }
      else {
        return 0;
      }
    }
  }
}

BOOL ssl_validate_ciphersuite(uint64_t a1, void *a2, int a3, int a4)
{
  if (a1) {
    return *(_DWORD *)(a1 + 32) > a4
  }
        || *(_DWORD *)(a1 + 40) < a3
        || *(unsigned char *)(*a2 + 5) == 1 && (*(unsigned char *)(a1 + 44) & 4) != 0
        || *(_DWORD *)(a1 + 24) == 11 && mbedtls_ecjpake_check(a2[11] + 56);
  else {
    return 1;
  }
}

uint64_t ssl_write_supported_elliptic_curves_ext(uint64_t a1, unsigned char *a2, unint64_t a3, void *a4)
{
  int v11 = a2 + 6;
  unint64_t v9 = 0;
  *a4 = 0;
  if (*(void *)(*(void *)a1 + 160))
  {
    for (unint64_t i = *(int **)(*(void *)a1 + 160); *i; ++i)
    {
      if (!mbedtls_ecp_curve_info_from_grp_id(*i)) {
        return -24192;
      }
      v9 += 2;
      if (v9 >= 0x10000) {
        return -24192;
      }
    }
    if (v9)
    {
      if (mbedtls_ssl_chk_buf_ptr((unint64_t)a2, a3, v9 + 6))
      {
        return -27136;
      }
      else
      {
        uint64_t v10 = 0;
        for (unsigned int j = *(int **)(*(void *)a1 + 160); *j; ++j)
        {
          unsigned int v8 = mbedtls_ecp_curve_info_from_grp_id(*j);
          v11[v10] = HIBYTE(*((_WORD *)v8 + 2));
          uint64_t v4 = v10 + 1;
          v10 += 2;
          v11[v4] = *((unsigned char *)v8 + 4);
        }
        *a2 = 0;
        a2[1] = 10;
        unsigned int v13 = a2 + 2;
        unsigned char *v13 = (unsigned __int16)(v10 + 2) >> 8;
        v13[1] = v10 + 2;
        v13 += 2;
        unsigned char *v13 = BYTE1(v10);
        v13[1] = v10;
        *a4 = v10 + 6;
        return 0;
      }
    }
    else
    {
      return -24192;
    }
  }
  else
  {
    return -24192;
  }
}

uint64_t ssl_write_supported_point_formats_ext(uint64_t a1, unsigned char *a2, unint64_t a3, void *a4)
{
  *a4 = 0;
  if (mbedtls_ssl_chk_buf_ptr((unint64_t)a2, a3, 6uLL))
  {
    return -27136;
  }
  else
  {
    *a2 = 0;
    a2[1] = 11;
    a2[2] = 0;
    a2[3] = 2;
    a2[4] = 1;
    a2[5] = 0;
    *a4 = 6;
    return 0;
  }
}

uint64_t ssl_write_ecjpake_kkpp_ext(void *a1, unsigned char *a2, unint64_t a3, void *a4)
{
  int v11 = a1;
  uint64_t v10 = a2;
  unint64_t v9 = a3;
  unsigned int v8 = a4;
  unsigned int v7 = -110;
  unint64_t v6 = a2;
  unint64_t v5 = 0;
  *a4 = 0;
  if (mbedtls_ecjpake_check(v11[11] + 56))
  {
    return 0;
  }
  else
  {
    if (!mbedtls_ssl_chk_buf_ptr((unint64_t)v6, v9, 4uLL))
    {
      unsigned char *v6 = 1;
      v6[1] = 0;
      v6 += 2;
      if (*(void *)(v11[11] + 752) && *(void *)(v11[11] + 760))
      {
        unint64_t v5 = *(void *)(v11[11] + 760);
        if (mbedtls_ssl_chk_buf_ptr((unint64_t)(v6 + 2), v9, v5)) {
          return -27136;
        }
        __memcpy_chk();
      }
      else
      {
        unsigned int v7 = mbedtls_ecjpake_write_round_one(v11[11] + 56, (unint64_t)(v6 + 2), v9 - (void)v6 - 2, &v5, *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*v11 + 72), *(void ***)(*v11 + 80));
        if (v7) {
          return v7;
        }
        *(void *)(v11[11] + 752) = mbedtls_calloc();
        if (!*(void *)(v11[11] + 752)) {
          return -32512;
        }
        __memcpy_chk();
        *(void *)(v11[11] + 760) = v5;
      }
      unsigned char *v6 = BYTE1(v5);
      v6[1] = v5;
      v6 += 2;
      *unsigned int v8 = v5 + 4;
      return 0;
    }
    return -27136;
  }
}

uint64_t ssl_write_max_fragment_length_ext(uint64_t a1, unsigned char *a2, unint64_t a3, void *a4)
{
  *a4 = 0;
  if (*(unsigned char *)(*(void *)a1 + 8))
  {
    if (mbedtls_ssl_chk_buf_ptr((unint64_t)a2, a3, 5uLL))
    {
      return -27136;
    }
    else
    {
      *a2 = 0;
      a2[1] = 1;
      a2[2] = 0;
      a2[3] = 1;
      a2[4] = *(unsigned char *)(*(void *)a1 + 8);
      *a4 = 5;
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t ssl_parse_hello_verify_request(unsigned __int8 **a1)
{
  unsigned int v8 = a1;
  unsigned int v7 = 0;
  unsigned int v3 = a1[24];
  unsigned int v7 = &v3[mbedtls_ssl_hs_hdr_len((uint64_t)a1)];
  int v6 = 0;
  int v5 = 0;
  if (mbedtls_ssl_hs_hdr_len((uint64_t)v8) + 3 <= (unint64_t)v8[27])
  {
    mbedtls_ssl_read_version(&v6, &v5, (*v8)[5], v7);
    v7 += 2;
    if (v6 >= 3 && v5 >= 2 && v6 <= **v8 && v5 <= (*v8)[1])
    {
      uint64_t v1 = v7++;
      unsigned __int8 v4 = *v1;
      if (&v8[27][(void)v8[24]] - v7 >= *v1)
      {
        mbedtls_free();
        *((void *)v8[11] + 115) = mbedtls_calloc();
        if (*((void *)v8[11] + 115))
        {
          __memcpy_chk();
          v8[11][928] = v4;
          *((_DWORD *)v8 + 2) = 1;
          mbedtls_ssl_reset_checksum((uint64_t)v8);
          mbedtls_ssl_recv_flight_completed((uint64_t)v8);
          return 0;
        }
        else
        {
          return -32512;
        }
      }
      else
      {
        mbedtls_ssl_send_alert_message((uint64_t)v8, 2, 50);
        return -31104;
      }
    }
    else
    {
      mbedtls_ssl_send_alert_message((uint64_t)v8, 2, 70);
      return -28288;
    }
  }
  else
  {
    mbedtls_ssl_send_alert_message((uint64_t)v8, 2, 50);
    return -31104;
  }
}

uint64_t mbedtls_ssl_hs_hdr_len(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)a1 + 5) == 1) {
    return 12;
  }
  else {
    return 4;
  }
}

uint64_t ssl_parse_renegotiation_info(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (a3 == 1 && !*a2)
  {
    *(_DWORD *)(a1 + 392) = 1;
    return 0;
  }
  else
  {
    mbedtls_ssl_send_alert_message(a1, 2, 40);
    return -31104;
  }
}

uint64_t ssl_parse_max_fragment_length_ext(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 8) && a3 == 1 && *a2 == *(unsigned __int8 *)(*(void *)a1 + 8))
  {
    return 0;
  }
  else
  {
    mbedtls_ssl_send_alert_message(a1, 2, 47);
    return -31104;
  }
}

uint64_t ssl_parse_supported_point_formats_ext(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a3 && *a2 + 1 == a3)
  {
    uint64_t v5 = *a2;
    unsigned __int8 v4 = a2 + 1;
    while (v5)
    {
      if (!*v4 || *v4 == 1)
      {
        *(_DWORD *)(*(void *)(a1 + 88) + 316) = *v4;
        return 0;
      }
      --v5;
      ++v4;
    }
    mbedtls_ssl_send_alert_message(a1, 2, 40);
    return -31104;
  }
  else
  {
    mbedtls_ssl_send_alert_message(a1, 2, 50);
    return -31104;
  }
}

uint64_t ssl_parse_ecjpake_kkpp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 16) + 24) == 11)
  {
    mbedtls_free();
    *(void *)(*(void *)(a1 + 88) + 752) = 0;
    *(void *)(*(void *)(a1 + 88) + 760) = 0;
    unsigned int round_one = mbedtls_ecjpake_read_round_one(*(void *)(a1 + 88) + 56, a2, a3);
    if (round_one)
    {
      mbedtls_ssl_send_alert_message(a1, 2, 40);
      return round_one;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

BOOL mbedtls_ssl_ciphersuite_cert_req_allowed(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 24);
  BOOL v4 = 1;
  if ((v3 - 1) > 3 && v3 != 10 && v3 != 9) {
    return 0;
  }
  return v4;
}

uint64_t mbedtls_ssl_cookie_init(uint64_t a1)
{
  uint64_t result = mbedtls_md_init();
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 60;
  return result;
}

uint64_t mbedtls_ssl_cookie_set_timeout(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

void *mbedtls_ssl_cookie_free(void **a1)
{
  return mbedtls_platform_zeroize(a1, 0x28uLL);
}

uint64_t mbedtls_ssl_cookie_setup(uint64_t a1, uint64_t (*a2)(uint64_t, unsigned char *, uint64_t), uint64_t a3)
{
  unsigned int v5 = a2(a3, v10, 32);
  if (v5)
  {
    return v5;
  }
  else
  {
    int v3 = mbedtls_md_info_from_type(5);
    unsigned int v6 = mbedtls_md_setup(a1, (uint64_t)v3, 1);
    if (v6)
    {
      return v6;
    }
    else
    {
      unsigned int v7 = mbedtls_md_hmac_starts(a1, v10, 0x20uLL);
      if (v7)
      {
        return v7;
      }
      else
      {
        mbedtls_platform_zeroize(v10, 0x20uLL);
        return 0;
      }
    }
  }
}

uint64_t mbedtls_ssl_cookie_write(uint64_t *a1, unint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1 && a4)
  {
    if (mbedtls_ssl_chk_buf_ptr(*a2, a3, 0x20uLL))
    {
      return -27136;
    }
    else
    {
      uint64_t v5 = a1[3];
      a1[3] = v5 + 1;
      *(unsigned char *)*a2 = BYTE3(v5);
      *(unsigned char *)(*a2 + 1) = BYTE2(v5);
      *(unsigned char *)(*a2 + 2) = BYTE1(v5);
      *(unsigned char *)(*a2 + 3) = v5;
      *a2 += 4;
      return ssl_cookie_hmac(a1, *a2 - 4, a2, a3, a4, a5);
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t ssl_cookie_hmac(uint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (mbedtls_ssl_chk_buf_ptr(*a3, a4, 0x1CuLL))
  {
    return -27136;
  }
  else if (mbedtls_md_hmac_reset((uint64_t)a1) {
         || mbedtls_md_hmac_update((uint64_t)a1, a2, 4uLL)
  }
         || mbedtls_md_hmac_update((uint64_t)a1, a5, a6)
         || mbedtls_md_hmac_finish(a1, v13))
  {
    return -27648;
  }
  else
  {
    __memcpy_chk();
    *a3 += 28;
    return 0;
  }
}

uint64_t mbedtls_ssl_cookie_check(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v13 = a1;
  unint64_t v12 = a2;
  uint64_t v11 = a3;
  uint64_t v10 = a4;
  unint64_t v9 = a5;
  unsigned int v8 = 0;
  unsigned int v7 = v15;
  if (a1 && v10)
  {
    if (v11 == 32)
    {
      if (ssl_cookie_hmac(a1, (uint64_t)v12, (unint64_t *)&v7, (unint64_t)(v7 + 28), v10, v9))unsigned int v8 = -1; {
      if (!v8)
      }
      {
        if (mbedtls_ct_memcmp((uint64_t)(v12 + 4), (uint64_t)v15, 0x1CuLL))
        {
          unsigned int v8 = -1;
        }
        else if (a1[4] {
               && a1[3]
        }
                - (((unint64_t)v12[1] << 16) | ((unint64_t)*v12 << 24) | ((unint64_t)v12[2] << 8) | v12[3]) > a1[4])
        {
          unsigned int v8 = -1;
        }
      }
      mbedtls_platform_zeroize(v15, 0x1CuLL);
      return v8;
    }
    else
    {
      return -1;
    }
  }
  else
  {
    return -28928;
  }
}

uint64_t mbedtls_ssl_set_timer(uint64_t result, unsigned int a2)
{
  if (*(void *)(result + 136)) {
    return (*(uint64_t (**)(void, void, void))(result + 136))(*(void *)(result + 128), a2 / 4, a2);
  }
  return result;
}

uint64_t mbedtls_ssl_check_timer(uint64_t a1)
{
  if (*(void *)(a1 + 144))
  {
    if ((*(unsigned int (**)(void))(a1 + 144))(*(void *)(a1 + 128)) == 2) {
      return -1;
    }
    else {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t mbedtls_ssl_encrypt_buf(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a2;
  unint64_t v15 = a3;
  uint64_t v14 = a4;
  uint64_t v13 = a5;
  int cipher_mode = 0;
  int v11 = 0;
  uint64_t v10 = 0;
  unint64_t v9 = 0;
  uint64_t v17 = 0;
  if (a2)
  {
    if (v15 && v15[2] && v15[3] >= v15[4] && v15[3] - v15[4] >= v15[5])
    {
      uint64_t v10 = v15[2] + v15[4];
      int cipher_mode = mbedtls_cipher_get_cipher_mode(v16 + 72);
      if (v15[5] <= 0x300uLL)
      {
        unint64_t v8 = v15[3] - (v15[5] + v15[4]);
        if (cipher_mode != 6 && cipher_mode != 8 && cipher_mode != 10) {
          return -27648;
        }
        is_unsigned int explicit = ssl_transform_aead_dynamic_iv_is_explicit(v16);
        if (v8 >= *(void *)(v16 + 32))
        {
          ssl_build_record_nonce((uint64_t)v19, 12, v16 + 40, *(void *)(v16 + 16), (uint64_t)v15, 8uLL);
          ssl_extract_add_data_from_record(v20, &v9, (uint64_t)v15);
          unsigned int v7 = mbedtls_cipher_auth_encrypt_ext((uint64_t *)(v16 + 72), (uint64_t)v19, *(void *)(v16 + 8), (uint64_t)v20, v9, v10, v15[5], v10, v15[3] - (v10 - v15[2]), v15 + 5, *(void *)(v16 + 32));
          if (v7)
          {
            return v7;
          }
          else
          {
            if (is_explicit)
            {
              if (v15[4] < 8uLL) {
                return -27136;
              }
              __memcpy_chk();
              v15[4] -= 8;
              v15[5] += 8;
            }
            if (++v11 == 1) {
              return 0;
            }
            else {
              return -27648;
            }
          }
        }
        else
        {
          return -27136;
        }
      }
      else
      {
        return -28928;
      }
    }
    else
    {
      return -27648;
    }
  }
  else
  {
    return -27648;
  }
}

uint64_t mbedtls_cipher_get_cipher_mode(uint64_t a1)
{
  if (*(void *)a1) {
    return *(unsigned int *)(*(void *)a1 + 4);
  }
  else {
    return 0;
  }
}

BOOL ssl_transform_aead_dynamic_iv_is_explicit(uint64_t a1)
{
  return *(void *)(a1 + 8) != *(void *)(a1 + 16);
}

uint64_t ssl_build_record_nonce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  __memset_chk();
  uint64_t result = __memcpy_chk();
  uint64_t v12 = a1 + a2 - a6;
  for (unint64_t i = 0; i < a6; ++i)
    *(unsigned char *)(v12 + i) ^= *(unsigned char *)(a5 + i);
  return result;
}

uint64_t ssl_extract_add_data_from_record(unsigned char *a1, void *a2, uint64_t a3)
{
  BOOL v4 = a1;
  __memcpy_chk();
  v4[8] = *(unsigned char *)(a3 + 8);
  uint64_t result = __memcpy_chk();
  v4 += 11;
  unsigned char *v4 = BYTE1(*(void *)(a3 + 40));
  v4[1] = *(unsigned char *)(a3 + 40);
  *a2 = v4 + 2 - a1;
  return result;
}

uint64_t mbedtls_ssl_decrypt_buf(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = a2;
  int v11 = a3;
  unint64_t v10 = 0;
  int cipher_mode = 0;
  unsigned int v8 = 0;
  int v7 = 0;
  unsigned int v6 = 0;
  unint64_t v5 = 0;
  uint64_t v13 = 0;
  if (a3 && v11[2] && v11[3] >= v11[4] && v11[3] - v11[4] >= v11[5])
  {
    unsigned int v6 = (char *)(v11[2] + v11[4]);
    int cipher_mode = mbedtls_cipher_get_cipher_mode(v12 + 152);
    if (cipher_mode != 6 && cipher_mode != 8 && cipher_mode != 10) {
      return -27648;
    }
    if (ssl_transform_aead_dynamic_iv_is_explicit(v12))
    {
      if (v11[5] < 8uLL) {
        return -29056;
      }
      BOOL v4 = v6;
      v6 += 8;
      v11[4] += 8;
      v11[5] -= 8;
    }
    else
    {
      BOOL v4 = v11;
    }
    if (v11[5] >= *(void *)(v12 + 32))
    {
      v11[5] -= *(void *)(v12 + 32);
      ssl_build_record_nonce((uint64_t)v15, 12, v12 + 56, *(void *)(v12 + 16), (uint64_t)v4, 8uLL);
      ssl_extract_add_data_from_record(v16, &v5, (uint64_t)v11);
      unsigned int v8 = mbedtls_cipher_auth_decrypt_ext((uint64_t *)(v12 + 152), (uint64_t)v15, *(void *)(v12 + 8), (uint64_t)v16, v5, (uint64_t)v6, v11[5] + *(void *)(v12 + 32), v6, v11[3] - (void)&v6[-v11[2]], &v10, *(void *)(v12 + 32));
      if (v8)
      {
        if (v8 == -25344) {
          return -29056;
        }
        else {
          return v8;
        }
      }
      else
      {
        ++v7;
        if (v10 == v11[5])
        {
          if (v7 == 1) {
            return 0;
          }
          else {
            return -27648;
          }
        }
        else
        {
          return -27648;
        }
      }
    }
    else
    {
      return -29056;
    }
  }
  else
  {
    return -27648;
  }
}

uint64_t mbedtls_ssl_fetch_input(void *a1, unint64_t a2)
{
  if (!a1[4] && !a1[5]) {
    return -28928;
  }
  if (a2 > 813 - (a1[21] - a1[19])) {
    return -28928;
  }
  if (*(unsigned char *)(*a1 + 5) != 1)
  {
    while (a1[28] < a2)
    {
      unint64_t v5 = a2 - a1[28];
      if (mbedtls_ssl_check_timer((uint64_t)a1))
      {
        int v8 = -26624;
      }
      else if (a1[5])
      {
        int v8 = ((uint64_t (*)(void, void, unint64_t, void))a1[5])(a1[6], a1[21] + a1[28], v5, *(unsigned int *)(*a1 + 12));
      }
      else
      {
        int v8 = ((uint64_t (*)(void, void, unint64_t))a1[4])(a1[6], a1[21] + a1[28], v5);
      }
      if (!v8) {
        return -29312;
      }
      if (v8 < 0) {
        return v8;
      }
      if (v8 > v5) {
        return -27648;
      }
      a1[28] += v8;
    }
    return 0;
  }
  if (a1[30])
  {
    if (a1[28] < a1[30]) {
      return -27648;
    }
    a1[28] -= a1[30];
    if (a1[28]) {
      __memmove_chk();
    }
    a1[30] = 0;
  }
  if (a2 <= a1[28]) {
    return 0;
  }
  if (a1[28]) {
    return -27648;
  }
  if (mbedtls_ssl_check_timer((uint64_t)a1))
  {
    int v6 = -26624;
  }
  else
  {
    uint64_t v4 = 813 - (a1[21] - a1[19]);
    if (*((_DWORD *)a1 + 2) == 16) {
      unsigned int v3 = *(_DWORD *)(*a1 + 12);
    }
    else {
      unsigned int v3 = *(_DWORD *)(a1[11] + 932);
    }
    if (a1[5]) {
      int v6 = ((uint64_t (*)(void, void, uint64_t, void))a1[5])(a1[6], a1[21], v4, v3);
    }
    else {
      int v6 = ((uint64_t (*)(void, void, uint64_t))a1[4])(a1[6], a1[21], v4);
    }
    if (!v6) {
      return -29312;
    }
  }
  if (v6 != -26624 || (mbedtls_ssl_set_timer((uint64_t)a1, 0), *((_DWORD *)a1 + 2) == 16))
  {
    if (v6 < 0) {
      return v6;
    }
    a1[28] = v6;
    return 0;
  }
  if (ssl_double_retransmit_timeout(a1))
  {
    return -26624;
  }
  else
  {
    unsigned int v7 = mbedtls_ssl_resend((uint64_t)a1);
    if (v7) {
      return v7;
    }
    else {
      return -26880;
    }
  }
}